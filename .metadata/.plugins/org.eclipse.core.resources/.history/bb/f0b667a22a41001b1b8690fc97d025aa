/*
 * Fingerprint_sensor_GT511C3.c
 *
 *  Created on: Dec 14, 2020
 *      Author: odemki
 */



#include <stdint.h>
#include <stdlib.h>

#include "Fingerprint_sensor_GT511C3.h"


extern UART_HandleTypeDef huart2;

//unsigned char receive_data_from_fingerprint[50]={0};
uint8_t fingerprint_count_bytes = 0;
uint8_t data_from_fingerprint_module = 0;

typedef struct __attribute__((packed)) dev_info{
	uint32_t header;
	uint32_t FirmwareVersion;
	uint32_t IsoAreaMaxSize;
	uint8_t DeviceSerialNumber[16];
	uint16_t checksum;
}dev_info;


//////////////////////////////////////
// MAIN FINGERPRINT FUNCTION
void finger_print_test_function(void)
{
	while(1)
	{
//		//LED(1);
//			HAL_Delay(500);
//			int u=0;
//			for(u = 0; u<10; u++)
//			{
//				HAL_Delay(100);
//				touch_bakcklight(0);
//				HAL_Delay(100);
//				touch_bakcklight(1);
//			}
//			while (!touch_is_press_finger())
//			{
//					HAL_Delay(100);
//			}
//			int f = 9999;

		//touch_open(0);
		touch_open(0);
		HAL_Delay(1000);
		int u=0;
		for(u = 0; u<3; u++)
		{
			HAL_Delay(300);
			touch_bakcklight(0);
			HAL_Delay(300);
			touch_bakcklight(1);
		}


		// ----------------------------------------
		identification_enroll_user();				// Запис пальця

		while(1)
		{
		    HAL_Delay(1000);
		    int status = 4;
		    status = touch_is_press_finger();		//  Чи палець приставлений?
		    if (status == 1)
		    {
		    	identify();
		    }
		    HAL_Delay(1000);
		}
		// ----------------------------------------

//		while(1)
//		{
//			wait_for_finger();
//			wait_for_finger_release();
//			HAL_Delay(300);
//		}





		//////////////////////////////////////////////////
//		while(1)
//		{
//			touch_is_press_finger();
//		}






//		HAL_Delay(1000);
//		identification_check();
//		HAL_Delay(1000);
	}

}
// ----------------------------------------------------------------------------
void touch_send(uint8_t* packet, int len)
{
	//HAL_UART_Transmit(&huart1,packet,len,1000);
	int rtn;
	rtn = HAL_UART_Transmit(&huart2, packet, (uint16_t)len, 10000);
	if(rtn != HAL_OK)
	{
		// Error connection
		int g = 999;
	}
}
// ----------------------------------------------------------------------------
int touch_rcv(uint8_t* packet, int len,int timeout)
{
	HAL_UART_Receive(&huart2, packet, len, timeout);
}
// ----------------------------------------------------------------------------
uint16_t get_checksum(uint8_t *package, int len)
{
    int i = 0;
    uint16_t checksum = 0;
    for (; i < len - 2; i++)
    {
        checksum += *(package + i);
    }
    return checksum;
}
// ----------------------------------------------------------------------------
void create_command_package(uint32_t param, uint16_t command,uint8_t* package)
{
    uint16_t checksum;
    package[0] = 0x55;
    package[1] = 0xAA;
    package[2] = 0x01;
    package[3] = 0x00;
    package[4] = param & 0xFF;
    package[5] = (param >> 8) & 0xFF;
    package[6] = (param >> 16) & 0xFF;
    package[7] = (param >> 24) & 0xFF;
    package[8] = command & 0xFF;
    package[9] = (command >> 8) & 0xFF;
    checksum = get_checksum(package, COMMAND_PACKET_LEN);
    package[10] = (checksum)&0xFF;
    package[11] = (checksum >> 8) & 0xFF;
}
// ----------------------------------------------------------------------------
int rcv_ack(uint8_t* packet, int len,int timeout)
{
	uint16_t calc_checksum;
	uint16_t recv_checksum;
	touch_rcv(packet,len,timeout);
	recv_checksum = packet[len - 2]  | packet[len - 1] << 8;
	calc_checksum = get_checksum(packet,len);   // PROBLEM !!!!!
	if(recv_checksum != calc_checksum){
		return 9;
	}else if(packet[8] != ACK){
		return 9;
	}
	return HAL_OK;
}

// ----------------------------------------------------------------------------
/*
 * Turn off LED 1
 * Turn ON LED 1
 */
void touch_bakcklight(int value)
{
	create_command_package(value, CMOSLED_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);

	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
			//Error Handling
			return;
		}
		if(value != 0){
			printf("Touch: Backlight ON");
		}else{
			printf("Touch: Backlight OFF");
		}
}
// ----------------------------------------------------------------------------
// LED must be turn on for finger detection detection
int touch_is_press_finger(){
	create_command_package(1, ISPRESSFINGER_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return -1;
	}
	if(response_packet[4] == 0 && response_packet[5] == 0 && response_packet[6] == 0 && response_packet[7] == 0){
		//printf("Touch: Finger Press");
		return 1;
	}
	//printf("Touch: No Finger Press");
	return 0;
}
// ----------------------------------------------------------------------------
void touch_delete_all_fingerprints(){
	create_command_package(0, DELETE_ALL_FINGERPRINTS_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return;
	}
}
// ----------------------------------------------------------------------------
void touch_enroll_start(int id){
	//if poss > 200 no save mode
	if(id >= 200){
		id = -1;
	}
	create_command_package(id, ENROLLSTART_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return;
	}
}
// ----------------------------------------------------------------------------
void touch_capture_finger(){
	//Non zero argument to capture best image posible
	create_command_package(1, CAPTUREFINGERPRINT_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return;
	}
}
// ----------------------------------------------------------------------------
void touch_enroll_1(){
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL1_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return;
	}
}
// ----------------------------------------------------------------------------
void touch_enroll_2(){
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL2_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return;
	}
}
// ----------------------------------------------------------------------------
//if no save mode extra data would be sent
void touch_enroll_3(int no_save_mode){
	uint8_t* extra_data;
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL3_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
		//Error Handling
		return;
	}
	if(!no_save_mode){
		return;
	}
	//TODO: Delete Magic Number
	extra_data = (uint8_t*)malloc(498);
	//TODO: Calc real accurate timeout
	touch_rcv(extra_data,498,10000);
	//TODO: Info handling
	if(extra_data[1]){
		printf("s");
	}
	return;
}
// ----------------------------------------------------------------------------
void touch_open(int verbose){
	dev_info* extra_info =  (dev_info*)malloc(sizeof(dev_info));
	if(!verbose){
		create_command_package(0,1,command_packet);
		touch_send(command_packet,COMMAND_PACKET_LEN);
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
		{
			//Protocolo de errores
			free(extra_info);
			return;
		}
	}else{
		create_command_package(0,1,command_packet);
		touch_send(command_packet,COMMAND_PACKET_LEN);
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
		{
			//Protocolo de errores
			free(extra_info);
			return;
		}
		touch_rcv((uint8_t*)extra_info,sizeof(dev_info),2000);
	}
}
// ----------------------------------------------------------------------------
int touch_enrolled_count(){
	int ack_reponse_code;
	//Non zero argument to capture best image posible
	create_command_package(0, ENROLLMENTCOUNT_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
	switch(ack_reponse_code)
	{
		case HAL_OK:
			return 1;
		case 9:
			return 0;
		default:
			return -1;
	}
}
// ----------------------------------------------------------------------------
int identify(void)
{
	int ack_reponse_code;
	//Non zero argument to capture best image posible
	create_command_package(0, IDENTIFY, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
	switch(ack_reponse_code)
	{
		case HAL_OK:
			return 1;
		case 9:
			return 0;
		default:
			return -1;
	}

}

////////////// MAIN FUNCTIONS //////////////////////////
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
void wait_for_finger() {
	while (touch_is_press_finger() == 0) {
		HAL_Delay(100);
	}
}
// ----------------------------------------------------------------------------
void wait_for_finger_release() {
	while (touch_is_press_finger() == 1) {
		HAL_Delay(100);
	}
}
// ----------------------------------------------------------------------------
void identification_enroll_user() {
	//touch_delete_all_fingerprints();

//	touch_enroll_start(50);
//	wait_for_finger();
//	touch_capture_finger();
//	touch_enroll_1();
//	wait_for_finger_release();			// Забрати палець
//	wait_for_finger();
//	touch_capture_finger();
//	touch_enroll_2();
//	wait_for_finger_release();			// Забрати палець
//	wait_for_finger();
//	touch_capture_finger();
//	touch_enroll_3(0);
//	wait_for_finger_release();			// Забрати палець

	touch_check_enrolled(48);
	touch_check_enrolled(49);
	touch_check_enrolled(50);
	touch_check_enrolled(51);
	touch_check_enrolled(52);

//	while(1)
//	{
//		identify();
//		HAL_Delay(100);
//	}





//	touch_check_enrolled(48);
//	touch_check_enrolled(48);
//	touch_check_enrolled(48);
//
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//
//	touch_check_enrolled(50);
//	touch_check_enrolled(50);
//	touch_check_enrolled(50);
//	touch_check_enrolled(50);

	//РЕєструє але не робить ідентифікаці, напевно треба робити самому !!!
}
// ----------------------------------------------------------------------------
void identification_check()
{
	while(1)
	{
			touch_check_enrolled(50);	//
			touch_check_enrolled(50);	//

			touch_check_enrolled(48);   //
			touch_check_enrolled(48);   //
			touch_check_enrolled(48);   //
			touch_check_enrolled(48);   //
			touch_check_enrolled(48);   //
			touch_check_enrolled(48);   //

			touch_check_enrolled(49);	//
			touch_check_enrolled(49);	//
			touch_check_enrolled(49);	//
			touch_check_enrolled(49);
			touch_check_enrolled(49);
			touch_check_enrolled(49);

			touch_check_enrolled(50);
			touch_check_enrolled(50);
			touch_check_enrolled(50);

			touch_check_enrolled(42);
			touch_check_enrolled(42);
			touch_check_enrolled(42);
			touch_check_enrolled(42);
			touch_check_enrolled(42);
			touch_check_enrolled(42);


	}
//	touch_check_enrolled(48);   // -
//	touch_check_enrolled(48);   // -
//	touch_check_enrolled(48);   // -
//	touch_check_enrolled(48);   // -
//	touch_check_enrolled(48);   // -
//	touch_check_enrolled(48);   // -

//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//	touch_check_enrolled(49);
//
//	touch_check_enrolled(42);
//	touch_check_enrolled(42);
//	touch_check_enrolled(42);
//	touch_check_enrolled(42);
//	touch_check_enrolled(42);
//	touch_check_enrolled(42);
}
// ----------------------------------------------------------------------------
int touch_check_enrolled(int id){
	int ack_reponse_code;
	//Non zero argument to capture best image posible
	create_command_package(id, CHECKENROLLMENT_CMD, command_packet);
	touch_send(command_packet,COMMAND_PACKET_LEN);
	ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
	switch(ack_reponse_code){
	case HAL_OK:
		return 1;
	case 9:       // Error
		return 0;
	default:
		return -1;
	}
}
// ----------------------------------------------------------------------------













































////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//devinfo gDeviceInfo;
//
//SB_OEM_PKT Command_Packet;				 // extern SB_OEM_PKT Command_Packet;
////unsigned short DEVICE_ID = 0;
//
//struct test_struct
//{
//	unsigned char 	Head1;
//	unsigned char 	Head2;
//	unsigned short	wDevId;
//	unsigned int	nParam;
//	unsigned short	wCmd;// or nAck
//	unsigned short 	wChkSum;
//} tx_structure;
//
//// ----------------------------------------------------------------------------
//void finger_print_test_function(void)
//{
//	//LED(1);
//	HAL_Delay(500);
//	open();
//	int u=0;
//	for(u = 0; u<10; u++)
//	{
//		HAL_Delay(200);
//		LED(1);
//		HAL_Delay(200);
//		LED(0);
//	}
//
//
////	while(1)
////	{
////		removeFinger();
////		HAL_Delay(100);
////	}
//
////	LED(1);
////	HAL_Delay(1000);
//	//captureFinger();
//	//HAL_Delay(1000);
////	LED(0);
//}
//// ----------------------------------------------------------------------------
//int CalcChkSumOfCmdAckPkt( SB_OEM_PKT* pPkt )
//{
//	unsigned short wChkSum = 0;
//	unsigned char * pBuf = (unsigned char*)pPkt;
//	int i;
//
//	for(i=0;i<(sizeof(SB_OEM_PKT)-SB_OEM_CHK_SUM_SIZE);i++)
//		wChkSum += pBuf[i];
//
//	return wChkSum;
//}
//// ----------------------------------------------------------------------------
//int LED(unsigned char State)
//{
//	int rtn;
//	unsigned char i;
//	unsigned long tmp = 0;
//
//	// Test structure
//	struct test_struct * p_tx_structure = & tx_structure;
//	p_tx_structure -> Head1 = COMMAND_START_CODE1;
//	p_tx_structure -> Head2 = COMMAND_START_CODE2;
//	p_tx_structure -> wDevId = DEVICE_ID;
//	p_tx_structure -> nParam= State;
//	p_tx_structure -> wCmd= CMOSLED;
//	tmp = CalcChkSumOfCmdAckPkt(p_tx_structure);
//	p_tx_structure -> wChkSum = tmp;
//
//	rtn = HAL_UART_Transmit(&huart2, p_tx_structure, (uint16_t)SB_OEM_PKT_SIZE, 10000);
//	if(rtn != HAL_OK)
//	{
//		// Error connection
//	}
//
////	if(data_from_fingerprint_module == 1)   // Data in buffer
////	{
////		if(receive_data_from_fingerprint[3] == 48)
////		{
////			fingerprint_count_bytes = 0;
////			memset(receive_data_from_fingerprint, 0 , 50);
////		}
////
////
////		//memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
////	}
////	uint8_t one = '1';
////	HAL_UART_Transmit(&huart2, &one, 1, 10000);
//
//	//if()
//
////	if (data_from_fingerprint_module == 1)
////	{
////		int j= 999;
////		memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
////	}
//
//	// Waiting answer from fingerprint module   (from interrupt)
//
//
//
//	return HAL_OK;
//}
//// ---------------------------------------------------------------------------
//void open(void)
//{
//	int rtn;
//	unsigned char i;
//	unsigned long tmp = 0;
//
//
//	struct test_struct * p_tx_structure = & tx_structure;
//	p_tx_structure -> Head1 = COMMAND_START_CODE1;
//	p_tx_structure -> Head2 = COMMAND_START_CODE2;
//	p_tx_structure -> wDevId = DEVICE_ID;
//	p_tx_structure -> nParam= 0;
//	p_tx_structure -> wCmd= OPEN;
//	tmp = CalcChkSumOfCmdAckPkt(p_tx_structure);
//	p_tx_structure -> wChkSum = tmp;
//		//int temp = p_tx_structure -> Head1;
//	//	rtn = HAL_UART_Transmit(&huart2, p_tx_structure, SB_OEM_PKT_SIZE, 10000);
//
//	rtn = HAL_UART_Transmit(&huart2, p_tx_structure, (uint16_t)SB_OEM_PKT_SIZE, 10000);
//	if(rtn != HAL_OK)
//	{
//		// Error connection
//	}
//	///////////////////////////////
//	unsigned char DataBuffer[12];
//
//	if(data_from_fingerprint_module == 1)   // Data in buffer
//		{
////			if(receive_data_from_fingerprint[3] == 48)
////			{
////
////				fingerprint_count_bytes = 0;
////				memset(receive_data_from_fingerprint, 0 , 50);
////			}
//
//
//			//memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
//		}
//}
//// ---------------------------------------------------------------------------
//void removeFinger(void)
//{
//	int rtn;
//	unsigned char i;
//	unsigned long tmp = 0;
//
//	struct test_struct * p_tx_structure = & tx_structure;
//	p_tx_structure -> Head1 = COMMAND_START_CODE1;
//	p_tx_structure -> Head2 = COMMAND_START_CODE2;
//	p_tx_structure -> wDevId = DEVICE_ID;
//	p_tx_structure -> nParam= ZERO;
//	p_tx_structure -> wCmd= ISPRESSFINGER;
//	tmp = CalcChkSumOfCmdAckPkt(p_tx_structure);
//	p_tx_structure -> wChkSum = tmp;
//		//int temp = p_tx_structure -> Head1;
//		//	rtn = HAL_UART_Transmit(&huart2, p_tx_structure, SB_OEM_PKT_SIZE, 10000);
//
//	rtn = HAL_UART_Transmit(&huart2, p_tx_structure, (uint16_t)SB_OEM_PKT_SIZE, 10000);
//	if(rtn != HAL_OK)
//	{
//			// Error connection
//	}
//
//	if(data_from_fingerprint_module == 1)   // Data in buffer
//	{
////				if(receive_data_from_fingerprint[3] == 48)
////				{
////
////					fingerprint_count_bytes = 0;
////					memset(receive_data_from_fingerprint, 0 , 50);
////				}
//
//
//				//memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
//	}
//
//}
//
////OPEN
////
////int rtn;
////	unsigned char i;
////	unsigned long tmp = 0;
////
////	struct test_struct * p_tx_structure = & tx_structure;
////	p_tx_structure -> Head1 = COMMAND_START_CODE1;
////	p_tx_structure -> Head2 = COMMAND_START_CODE2;
////	p_tx_structure -> wDevId = DEVICE_ID;
////	p_tx_structure -> nParam= 0;
////	p_tx_structure -> wCmd= OPEN;
////	tmp = CalcChkSumOfCmdAckPkt(p_tx_structure);
////	p_tx_structure -> wChkSum = tmp;
////	//int temp = p_tx_structure -> Head1;
////	rtn = HAL_UART_Transmit(&huart2, p_tx_structure, SB_OEM_PKT_SIZE, 10000);
////
////	HAL_Delay(1000);





