/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
// Oled
#include "ssd1306.h"
#include "fonts.h"
#include "oled_ssd1306.h"

#include "Si7021_driver.h"
#include "Humidity_and_Temperature_SI7021_sensor.h"

#include "GPS_NEO_6M.h"

#include "Humidity_and_Temperature_AM2302_sensor.h"

#include "Flash_W25Q.h"
#include "w25qxx.h"

#include "fingerprint_GT_511C3.h"

#include "GSM_IOT_GA6.h"

#include "stdbool.h"

#include "stdio.h"
#include "string.h"               // For work with "strtok" function
#include "stdlib.h"               // For work with "atoi" function

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void test_flash_W25Q(void);
void generate_sound(void);

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define OLED ON
#define H_a_T_SI7021 ON
#define I2C_SCANNER ON
#define GPS OFF
#define SOUND OFF
#define FINGERPRINT OFF
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_rx;

/* USER CODE BEGIN PV */
// -----------------------------------------------------------------------------
// Receive data from GPS module
#if GPS
	// GPS receive part///////////////////////////////////////////////////////
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
		flag = 1;
	}
	///////////////////////////////////////////////////////////////////////////
	// GSM
#endif
// ----------------------------------------------------------------------------



// GSM variables
char GSM_RX_buffer[60]={0};    // buffer for receive data ansver from GSM module
char uart_1_answer_buffer[40] = {0};
uint8_t ansver_flag =0;        // if ansver_flag == 1 data(ansver) are in buffer GSM_RX_buffer
uint8_t count =0;

// variable for init gsm
bool at_ready = false;
bool ast_poweron = false;
bool creg_2 = false;
bool call_ready = false;
bool creg_1 = false;
//

uint8_t interrupt_flag = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
//  struct
//  {
//	  char gps_lat[11];
//	  char gps_lat_letter[2];
//	  char gps_lon[12];
//	  char gps_lon_letter[2];
//	  char gps_time[6];
//      uint8_t gps_speed;
//	  uint8_t gps_number_of_satellites_GPGGA;
//
//	  char temperature_si7021[4];
//	  int humidity_si7021;
//
//	  int temperature_am3202;
//	  int humidity_am3202;
//
//  } global_data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  MX_SPI2_Init();
  MX_TIM1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */



	#if I2C_SCANNER
  	  I2C_1_scaner();
	#endif

	#if H_a_T_SI7021
  	  read_T_and_H_SI7021();
	#endif

	#if OLED
  	  init_oled();
	  //test_oled();
	#endif

  	  HAL_TIM_Base_Start_IT(&htim2);

	#if GPS
  	  uint8_t GPS_buff[512];      						// main buffer for stream from GPS
  	  memset(GPS_buff ,0 ,sizeof(GPS_buff));
  	  HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
	#endif

	#if SOUND
  	  generate_sound();
	#endif



//  	bool at_ready = false;
//    bool ast_poweron = false;
//  	bool creg_2 = false;
//  	bool call_ready = false;
//  	bool creg_1 = false;

/////////////////


  //AM2302_init();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  /////////////  RECEIVE DATA FROM UART 1. FIRST METHOD //////////////////////////////
  HAL_Delay(1000);
  // Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
  USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
  NVIC_EnableIRQ (USART1_IRQn);

  // в терміналі послідовнцість CR/LF
  // CR (U+000D): англ. carriage return — повернення каретки     // '\r'
  // LF (U+000A): англ. line feed — зміна рядка;                 // '\n'

//    // Turn OFF echo
//	char turn_off_echo[]="ATE 0\r\n";   // "ATD+380931482354\r\n"
//	uint8_t size=0;
//    char str[40]={0};
//    uint8_t size_mas = sizeof(str);
//	memset(str, 0 , sizeof(str));
//
//    sprintf(str, turn_off_echo);      							// AT command
//	size=sizeof(str);
//	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);


//	HAL_Delay(500);
//
//	// CALL on NUMBER
//	char call_to_my_mobile_number[]="ATD+380931482354\r\n";   // "ATD+380931482354\r\n"
//	//uint8_t size=0;
//	//char str[40]={0};
//	size_mas = sizeof(str);
//    memset(str, 0 , sizeof(str));
//
//	sprintf(str, call_to_my_mobile_number);      							// AT command
//    size=sizeof(str);
//	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
  //init_gsm_module();
  ////////////////////////////////////////////////////////////////////////////////////


//  char buffer_output_comand[30] = {0};
//  char command[25] = "ATE 0\r\n";
//  strcpy(buffer_output_comand, command);
//  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);

//  while (ansver_flag != 1){}
//  if(ansver_flag ==1)
//  {
//	  if (strstr(GSM_RX_buffer, "OK"))
//	  {
//			while(1)
//			{
//				int j=0;
//				for(j=0; j<100; j++)
//				{
//
//				}
//			}
//
//
//	  }
//  }

//  char str[50]={0};
//	  memset(str, 0 , sizeof(str));
//	  sprintf(str,"%s", "TEST 0123456789");
//	  ssd1306_SetCursor(00, 36);
//	  ssd1306_WriteString(str, Font_7x10, White);
//
//	  ssd1306_UpdateScreen();

  if(init_gsm_module())
  {
	  // init OK
	  char str[50]={0};
	  memset(str, 0 , sizeof(str));
	  sprintf(str,"%s", "TEST 0123456789");
	  ssd1306_SetCursor(00, 36);
	  ssd1306_WriteString(str, Font_7x10, White);

	  ssd1306_UpdateScreen();
  }
  else
  {
	  // GSM didn't init
  }

while (1)
{






	///////////////////////////////////// WORK
//	  HAL_Delay(500);
//	  //     // "ATD+380931482354\r\n"
//	  char turn_off_echo[]="ATE 0\r\n";    			// Turn OFF echo
//	  char AT[]="AT\r\n";                           // Simple command
//	  char AT_CSQ[]="AT+CSQ\r\n";                   // signal reception quality
//	  //uint8_t size=0;
//	  //char str[40]={0};
//	  //uint8_t size_mas = sizeof(str);
//	  //memset(str, 0 , sizeof(str));
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 100);
//
//
//	  //uint8_t state = 1;
//
//	  while (ansver_flag != 1){}      // waite for answer
//	  	  if(ansver_flag ==1)
//	 	  {
//	 	  	  if (strstr(GSM_RX_buffer, "OK"))
//	 	  	  {
//	 	  		 // state = 0;
//	 	  		  memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
//	 	  		  ansver_flag = 0;
//	 	  	  }
//
//	 		 if (strstr(GSM_RX_buffer, "+CSQ"))
//	 		 {
//	 			  //state = 0;
//	 			  memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
//	 			  ansver_flag = 0;
//	 		 }
//
//
//
//
//
//}
///////////////////////////////////////////////////////



//  while (1)
//  {
//	  while (ansver_flag != 1){}
//	    if(ansver_flag ==1)
//	    {
//	  	  if (strstr(GSM_RX_buffer, "OK"))
//	  	  {
//	  			while(1)
//	  			{
//	  				int j=0;
//	  				for(j=0; j<100; j++)
//	  				{
//
//	  				}
//	  			}
//
//
//	  	  }
//
//		 if (strstr(GSM_RX_buffer, "+CSQ"))
//		 {
//			  			while(1)
//			  			{
//			  				int j=0;
//			  				for(j=0; j<100; j++)
//			  				{
//
//			  				}
//			  			}
//
//
//		 }
//}


//	  memset(buffer_output_comand, 0, sizeof(buffer_output_comand));
//	  char command_1[25] = "AT\r\n";
//	  strcpy(buffer_output_comand, command_1);
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);
//
//
//      HAL_Delay(2000);










/////////////////////////////////////////////////////////////////////////////////////
//	    // MAIN LOOP
//        if(interrupt_flag == 1)
//        {
//        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
//
//
//        	read_T_and_H_SI7021();
//        	test_flash_W25Q();
//
//			#if GPS
//        		parsing_GPS(GPS_buff, 512);
//        		HAL_Delay(500);
//			# else
//        		HAL_Delay(500);
//			#endif
//
//			#if OLED
//        		OLED_prinr_all_data();
//			#endif
//
//        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
//
//			#if FINGERPRINT
//        		fingerprint_test();
//			#endif
//
//        	interrupt_flag = 0;
//        }
//////////////////////////////////////////////////////////////////////////////////
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 15600;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 4000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 2000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 1440;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 50000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_M25Q_GPIO_Port, CS_M25Q_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
        }
}
// ----------------------------------------------------------------------------
// Function for generate
void buzzer_fricvency_setings(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Prescaler = 720;
	 timer.Init.Period = period; // set the period duration
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
	 sConfigOC.Pulse = pulse; // set the pulse duration
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
}
//------------------------------------------------------------------------------
void generate_sound(void)
{
	uint16_t pulse = 2;
	uint32_t period = 1;
	uint16_t max = 200;
	uint16_t min = 1;
	for(period = min; period < max; period++)
	{
		  pulse = period/2;
		  buzzer_fricvency_setings(htim1, TIM_CHANNEL_1, period, pulse);
		  HAL_Delay(1);
	}
	if(period >= max)
	{
		  for(period = max; period > min; period--)
		  	  {
		  		  pulse = period/2;
		  		  buzzer_fricvency_setings(htim1, TIM_CHANNEL_1, period, pulse);
		  		  HAL_Delay(1);
		  	  }
	}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
}
// ----------------------------------------------------------------------------
//void uart1_transmit_reseive_data(int* i)
//{
//	// 1. Transmit data in bloking mode /////////////////////////////////////
////	            HAL_Delay(1000);
////
////		  		char str[50]={0};
////		  		sprintf(str,"Bloking mode transfer: %d\n\0", *i);
////		  		uint8_t k=0;
////		  		uint8_t size_buffer=0;
////		  		for(k=0; ((k<=sizeof(str)) && (str[k] != '\0')); k++)
////		  		{
////		  			size_buffer++;
////		  		}
////		  		// uint8_t size=sizeof(str);
////
////		  		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size_buffer, 100);
////		  		(*i)++;
//	/////////////////////////////////////////////////////////////////////////
//
//	// 2. Transmit data using non bloking mode /////////////////////////////
////		  HAL_Delay(1000);
////
////		  char str[50]={0};
////		  sprintf(str,"Non bloking mode transfer: %d\n\0",  *i);
////		  uint8_t k=0;
////		  uint8_t size_buffer=0;
////
////		  for(k=0; ((k<=sizeof(str)) && (str[k] != '\0')); k++)
////		  {
////		  	  size_buffer++;
////		  }
////
////		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)str, size_buffer);
////		  (*i)++;
//	/////////////////////////////////////////////////////////////////////////

//
//
//}


int init_gsm_module(void)
{
	// initialisation GSM module without answer from GSM. /////////////////////////////
	// work ok

	// Inits commands:
		// 1. Send command "AT" answer "OK"
		// 2. Send command "AT+CSQ" answer "+CSQ: 23,99" and "OK". 23,99 value can be from 0 to 31.
		// 3. Send command "AT+CCID" answer "89380062300517128558" and "OK"
		// 4. Send command "AT+CREG?" answer "+CREG: 1,1" and "OK"

//	  char buffer_output_comand[30] = {0};
//	  char command_1[25] = "AT\r\n";
//	  strcpy(buffer_output_comand, command_1);
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);              // Send data into GSM module
//	  /////////////////////////////////////////////////////////
//	  HAL_Delay(500);
//
//	  memset(buffer_output_comand, 0 , sizeof(buffer_output_comand));
//	  char command_2[25] = "AT+CSQ\r\n";
//	  strcpy(buffer_output_comand, command_2);
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);              // Send data into GSM module
//	  /////////////////////////////////////////////////////////
//	  HAL_Delay(500);
//
//	  memset(buffer_output_comand, 0 , sizeof(buffer_output_comand));
//	  char command_3[25] = "AT+CCID\r\n";
//	  strcpy(buffer_output_comand, command_3);
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);              // Send data into GSM module
//	  /////////////////////////////////////////////////////////
//	  HAL_Delay(500);
//
//	  memset(buffer_output_comand, 0 , sizeof(buffer_output_comand));
//	  char command_4[25] = "AT+CREG?\r\n";
//	  strcpy(buffer_output_comand, command_4);
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);              // Send data into GSM module

	///////////////////////////////////////////////////////////////////////////////////

	char turn_off_echo[]="ATE 0\r\n";    			// Turn OFF echo
	char AT[]="AT\r\n";                           // Simple command
	char AT_CSQ[]="AT+CSQ\r\n";                   // signal reception quality
	char CCID[] = "AT+CCID\r\n";
	char AT_CREG[] = "AT+CREG?\n\n";              // Registration in network


	uint8_t answer_1 = 0;
	uint8_t answer_2 = 0;
	uint8_t answer_3 = 0;
	uint8_t answer_4 = 0;
	uint8_t answer_5 = 0;

	// 1. Send command " Turn off echo"
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 100);

    // Waite for answer
	while (ansver_flag != 1)
	{
		// waite for answer
	}
		if(ansver_flag ==1)
		{
		 	if (strstr(GSM_RX_buffer, "OK"))
		 	{
		 	  	memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
		 	  	answer_1 = 1;
		 	  	ansver_flag = 0;
		 	}
		 }

    HAL_Delay(200);
	// 2. Send command " AT"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT, strlen(AT), 100);

	while (ansver_flag != 1)
	{
		// waite for answer
	}
		if(ansver_flag ==1)
		{
			 if (strstr(GSM_RX_buffer, "OK"))
			 {
			 	  memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
			 	  answer_2 = 1;
			 	  ansver_flag = 0;
			 }
		}
    HAL_Delay(200);
	// 3. Send command "signal reception quality"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 100);

	while (ansver_flag != 1)
	{
		// waite for answer
	}
		if(ansver_flag ==1)
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
				answer_3 = 1;
				ansver_flag = 0;
			}
		}
	HAL_Delay(200);
	// 4. Send command "signal reception quality"
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 100);

	while (ansver_flag != 1)
	{
		// waite for answer
	}
		if(ansver_flag ==1)
		{
			if (strstr(GSM_RX_buffer, "89380062300517128558"))
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
				answer_4 = 1;
				ansver_flag = 0;
			}
		}
	HAL_Delay(200);
	// 5. Send command "Check registration in network"
//	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CREG, strlen(AT_CREG), 100);
//
//	while (ansver_flag != 1)
//	{
//		// waite for answer
//	}
//	if(ansver_flag ==1)
//	{
//		if (strstr(GSM_RX_buffer, "+CREG: 1,1"))
//		{
//			// answer   AT+CREG?\r\n
//			memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
//			answer_5 = 1;
//			ansver_flag = 0;
//		}
//	}
	if(answer_1 && answer_2 && answer_3 && answer_4)
	{
		return 1;
	}
	else
	{
		return 0;
	}


}

//void GSM_init(void)
//{
//	// 1. Send AT comand. Ansver must be "OK"
//	char call_to_my_mobile_number[]="AT\r\n";
//	uint8_t size=0;
//	char str[40]={0};
//	uint8_t size_mas = sizeof(str);
//	memset(str, 0 , sizeof(str));
//
//	sprintf(str, call_to_my_mobile_number);      							// AT command
//	size=sizeof(str);
//	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);              // Send data into GSM module
//
//	while(ansver_flag == 1)              // Receive ansver
//	{
//		 if (strstr(GSM_RX_buffer, "OK"))
//		 {
////		     // Clear last line from previus data
////		     sprintf(str,"%s", "                    ");
////		     ssd1306_SetCursor(00, 46);
////		     ssd1306_WriteString(str, Font_7x10, White);
////		     ssd1306_UpdateScreen();
////
////		     memset(str, 0 , sizeof(str));
////		     sprintf(str,"%s", "RING");
////		     ssd1306_SetCursor(00, 46);
////		     ssd1306_WriteString(str, Font_7x10, White);
////
////		     ssd1306_UpdateScreen();
//
//		     // Do something with incoming call
//
//		     //
//		     ansver_flag = 0;
//		 }
//	}
//}

//int GSM_init(void)
//{
////	static bool at_ready = false;
////	static	bool ast_poweron = false;
////	static  bool creg_2 = false;
////	static  bool call_ready = false;
////	static 	bool creg_1 = false;
//
//
//
//
//
//	while(ansver_flag == 1)              // Receive ansver
//	{
//		 if (strstr(GSM_RX_buffer, "AT Ready") )
//		 {
//			   at_ready = true;
//		       ansver_flag = 0;
//		 }
//		 if (strstr(GSM_RX_buffer, "AST_POWERON") )
//		 {
//			   ast_poweron = true;
//			   ansver_flag = 0;
//		 }
//		 if(strstr(GSM_RX_buffer, "+CREG: 2"))
//		 {
//			   creg_2 = true;
//			   ansver_flag = 0;
//		 }
////		 if(strstr(GSM_RX_buffer, "Call Ready"))
////		 {
////			   call_ready = true;
////		 	   ansver_flag = 0;
////		 }
//		 if(strstr(GSM_RX_buffer, "+CREG: 1"))
//		 {
//			   creg_1 = true;
//		       ansver_flag = 0;
//		 }
//
//	 }
//
//	 if( (at_ready == true) && (ast_poweron == true) && (creg_2 == true)  && (creg_1 == true))   // && (call_ready == true)  // If init OK
//	 {
//		 return 1;
//	 }
//	 else
//	 {
//		 return 0;
//	 }
//}


//void call_on_number(void)
//{
//	char call_to_my_mobile_number[]="ATD+380931482354\r\n";
//	uint8_t size=0;
//    char str[40]={0};
//    uint8_t size_mas = sizeof(str);
//	memset(str, 0 , sizeof(str));
//
//    sprintf(str, call_to_my_mobile_number);      							// AT command
//	size=sizeof(str);
//	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);              // Send data into GSM module
//
//
//    while(ansver_flag == 1)              // Receive ansver
//    {
//    	 // Print GSM_RX_buffer in first line
//    	 memset(str, 0 , sizeof(str));
//    	 sprintf(str,"%s", GSM_RX_buffer);
//    	 ssd1306_SetCursor(00, 36);
//    	 ssd1306_WriteString(str, Font_7x10, White);
//    	 //
//
//    	    // Parsing incoming data from GSM
//    	    // Detect incoming call, and print it on OLED
//            if (strstr(GSM_RX_buffer, "RING"))
//            {
//            	// Clear last line from previus data
//            	sprintf(str,"%s", "                    ");
//            	ssd1306_SetCursor(00, 46);
//            	ssd1306_WriteString(str, Font_7x10, White);
//            	ssd1306_UpdateScreen();
//
//            	memset(str, 0 , sizeof(str));
//            	sprintf(str,"%s", "RING");
//            	ssd1306_SetCursor(00, 46);
//            	ssd1306_WriteString(str, Font_7x10, White);
//
//            	ssd1306_UpdateScreen();
//
//            	// Do something with incoming call
//
//            	//
//            	ansver_flag = 0;
//            }
//            //  Звінок збили
//            else if(strstr(GSM_RX_buffer, "BUSY"))
//            {
//            	// Clear last line from previus data
//            	sprintf(str,"%s", "                    ");
//            	ssd1306_SetCursor(00, 46);
//            	ssd1306_WriteString(str, Font_7x10, White);
//            	ssd1306_UpdateScreen();
//
//            	memset(str, 0 , sizeof(str));
//            	sprintf(str,"%s", "BUSY");
//            	ssd1306_SetCursor(00, 46);
//            	ssd1306_WriteString(str, Font_7x10, White);
//
//            	ssd1306_UpdateScreen();
//            	// Do something...
//
//            	//
//            	ansver_flag = 0;
//            }
//              //  Телефон не був піднятий
//            else if(strstr(GSM_RX_buffer, "NO ANSWERALL"))
//            {
//            	// Clear last line from previus data
//            	 sprintf(str,"%s", "                    ");
//            	 ssd1306_SetCursor(00, 46);
//            	 ssd1306_WriteString(str, Font_7x10, White);
//            	 ssd1306_UpdateScreen();
//
//            	 memset(str, 0 , sizeof(str));
//            	 sprintf(str,"%s", "NO ANSWER");
//            	 ssd1306_SetCursor(00, 46);
//            	 ssd1306_WriteString(str, Font_7x10, White);
//
//            	 ssd1306_UpdateScreen();
//            	 // Do something...
//
//            	 //
//            	 ansver_flag = 0;
//            }
//
//            //  Телефон підняли
//            else if(strstr(GSM_RX_buffer, "CONNECT"))
//            {
//                 // Clear last line from previus data
//                 sprintf(str,"%s", "                    ");
//                 ssd1306_SetCursor(00, 46);
//                 ssd1306_WriteString(str, Font_7x10, White);
//                 ssd1306_UpdateScreen();
//
//                 memset(str, 0 , sizeof(str));
//                 sprintf(str,"%s", "ANSWER: say...");
//                 ssd1306_SetCursor(00, 46);
//                 ssd1306_WriteString(str, Font_7x10, White);
//
//                 ssd1306_UpdateScreen();
//                 // Do something...
//
//                 //
//                 ansver_flag = 0;
//             }
//
//            else
//            {
//                // Clean working line OLED  ///////////////////////////////
//            	//memset(GSM_RX_buffer, 0 , sizeof(GSM_RX_buffer));     // Clean GSM_RX_buffer buffer
//
//            	HAL_Delay(1000);
//
//                sprintf(str,"%s", "                    ");
//                ssd1306_SetCursor(00, 46);
//                ssd1306_WriteString(str, Font_7x10, White);
//                ssd1306_UpdateScreen();
//
//                //////////////////////////////////////////////////////////
//            }
//
//
//    	    // Print data on last line on OLED
////    	    memset(str, 0 , sizeof(str));
////    	    sprintf(str,"%s", GSM_RX_buffer);
////    	    ssd1306_SetCursor(00, 46);
////    	    ssd1306_WriteString(str, Font_7x10, White);
////
////    	    ssd1306_UpdateScreen();
//    }
//    // Clean working line OLED  ///////////////////////////////
////    sprintf(str,"%s", "                    ");
////    ssd1306_SetCursor(00, 46);
////    ssd1306_WriteString(str, Font_7x10, White);
////    ssd1306_UpdateScreen();
//    //////////////////////////////////////////////////////////
//
//}

void send_sms_on_number(void)
{


}

/////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
