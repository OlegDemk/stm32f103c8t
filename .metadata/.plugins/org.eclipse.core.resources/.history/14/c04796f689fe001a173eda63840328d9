/*
 * GPS_NEO_6M.c
 *
 *  Created on: Sep 10, 2020
 *      Author: odemki
 */

#include "stdio.h"
#include "stm32f1xx_hal.h"
#include "string.h"               // For work with "strtok" function
#include "stdlib.h"               // For work with "atoi" function

extern UART_HandleTypeDef huart1;
extern uint8_t flag;

struct GPS
{
	char lat[11];
	char lat_letter[2];
	char lon[12];
	char lon_letter[2];
	char time[6];

	uint8_t number_of_satellites_GPGGA;

} GPS_data;


//---------------------------------------------------------------------
// Function print all non parsed data from GSM module
void simple_read_stream_data_from_GPS (uint8_t *GPS_buff, int size_buff)    // <<<<<<<<< NAME FUNCTION !!!!!
{
	if(flag == 1)
	{
		HAL_UART_Transmit(&huart1, GPS_buff, 512, 200);
		memset(GPS_buff, 0, 512);
		flag = 0;
	}
}
//---------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
	int checksum = 0;
	int j = 0;

	for(j = 1; j < strlen(msg) - 4; j++)
	{
		checksum = checksum^(unsigned)msg[j];
	}
	return checksum;
}

//---------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
	memset(nmeaSnt, 0, size);

	//Copy to  "*" з str_GPGLL в nmeaSnt
	int size_nmeaSnt = sizeof(nmeaSnt);
	int i=0;

	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
	{
		nmeaSnt[i]=str_GPGLL[i];    // Read 49 bytes
	}

	// Check check sum //////////////////////////////////////////////////////////////
	char smNmbr[3]={0};     								// array for checksum
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
	smNmbr[2]='\0';											// Add and of line '\0' sing

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
	char hex[3];
	sprintf(hex, "%x", intSum);

	if(strstr(smNmbr, hex) != NULL)
	{
		// Parsing string //////////////////////////////////////////////////////////////
		uint8_t cnt = 0;            		// Count of elements

		int i = 0;
		int count = 0;

		while(nmeaSnt[i] != '\0')
		{
			while(nmeaSnt[i] == ',')
			{
				int g=0;
				i++;
				switch (count)
				{
					case 0:
						for(g=0; g<10; g++)
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
						}
						GPS_data.lat[10] = '\0';
						i = i+g;
						break;

					case 1:
						for (g =0; g<1; g++)
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
						}
						GPS_data.lat_letter[2] = '\0';
						i = i+g;
						break;

					case 2:
						for(g=0; g<11; g++)
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
						}
						GPS_data.lon[11] = '\0';
						i = i+g;
						break;

					case 3:
						for(g=0; g<1; g++)
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
						}
						GPS_data.lon_letter[2] = '\0';
						i = i+g;
						break;

					case 4:
						for(g=0; g<6; g++)
						{
							GPS_data.time[g] = nmeaSnt[i+g];
						}
						GPS_data.time[6] = '\0';
						i = i+g;
						break;

				}
				count++;
			}
			i++;
		}
	}
}
//---------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
        //$GPGGA,154423.00,4948.74034,N,02359.70944,E,1,05A,154422.00,4948.74052,N,02359.70973,E,1,05,3.71,351.1,M,34.8,M,,*53\r\n
		// In this line parsed only count of satellites

		//GPS_data.number_of_satellites_GPGGA = (uint8_t*)number_of_satellites_point_GPGGA[1];		// save only it

	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
		memset(nmeaSnt, 0, size);

		//Copy to  "*" з str_GPGGA в nmeaSnt
		int size_nmeaSnt = sizeof(nmeaSnt);
		int i=0;

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)   // 70   // 68
		{
			nmeaSnt[i]=str_GPGGA[i];
		}

		// Check check sum //////////////////////////////////////////////////////////////
		char smNmbr[3]={0};     								// array for checksum
		char *rawSum;

		char time[6]={0};
		char nothing[2]={2};
		//char latitude[] = {0};

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
		smNmbr[2]='\0';											// Add and of line '\0' sing



		////////////////////////////////////////////
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
		char hex[3];
		sprintf(hex, "%x", intSum);

////////////////////////////////////////////////////
		if(strstr(smNmbr, hex) != NULL)
		{
			// Parsing string //////////////////////////////////////////////////////////////
			uint8_t cnt = 0;            		// Count of elements

			int i = 0;
			int count = 0;

			while(nmeaSnt[i] != '\0')
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
					i++;
					switch (count)
					{
						case 0:
							for(g=0; g<6; g++)
							{
								time[g] = nmeaSnt[i+g];
							}
							time[6] = '\0';
							i = i+g;
							break;

						case 1:
							for (g =0; g<1; g++)
							{
								nothing[g] = nmeaSnt[i+g];
							}
							nothing[2] = '\0';
							i = i+g;
							break;
//
//						case 2:
//							for(g=0; g<11; g++)
//							{
//								GPS_data.lon[g] = nmeaSnt[i+g];
//							}
//							GPS_data.lon[11] = '\0';
//							i = i+g;
//							break;
//
//						case 3:
//							for(g=0; g<1; g++)
//							{
//								GPS_data.lon_letter[g] = nmeaSnt[i+g];
//							}
//							GPS_data.lon_letter[2] = '\0';
//							i = i+g;
//							break;
//
//						case 4:
//							for(g=0; g<6; g++)
//							{
//								GPS_data.time[g] = nmeaSnt[i+g];
//							}
//							GPS_data.time[6] = '\0';
//							i = i+g;
//							break;

					}
					count++;
				}
				i++;
			}
		}




}
//---------------------------------------------------------------------
void parsing_GPVTG_line(nmeaSnt)
{

			//GPS_data.number_of_satellites_GPGGA = (uint8_t*)number_of_satellites_point_GPGGA[1];		// save only it

}

//---------------------------------------------------------------------


//---------------------------------------------------------------------
// Parsing
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{

	char buffStr[512];

	if(flag == 1)    										 // If data from GPS module in buffer
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff

		char *str_GPGLL;
		char *str_GPGGA;

		// Find $GPGLL // work
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
		if(str_GPGLL != NULL)
		{
			parsing_GPGLL_line(str_GPGLL);
		}
		// Find $GPGGA // Don't work
		str_GPGGA = strstr(buffStr, "$GPGGA");
		if(str_GPGGA != NULL)
		{
			parsing_GPGGA_line(str_GPGGA);
		}
		flag = 0;			// Data was read
	}
}
//---------------------------------------------------------------------

















//
