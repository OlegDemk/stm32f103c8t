
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  0800eae8  0800eae8  0001eae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9c0  0800f9c0  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800f9c0  0800f9c0  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f9c0  0800f9c0  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9c0  0800f9c0  0001f9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c4  0800f9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800f9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  20000240  0800fc08  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  0800fc08  00020bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a79b  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003675  00000000  00000000  0003aa04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  0003e080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  0003f520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001765e  00000000  00000000  00040848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013548  00000000  00000000  00057ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078f63  00000000  00000000  0006b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b68  00000000  00000000  000e43cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eacc 	.word	0x0800eacc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800eacc 	.word	0x0800eacc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <touch_send>:
//
//}
// ----------------------------------------------------------------------------
// Send data in fingerprint module
int touch_send(uint8_t* packet, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	//HAL_UART_Transmit(&huart1,packet,len,1000);
	int rtn;
	rtn = HAL_UART_Transmit(&huart2, packet, (uint16_t)len, 10000);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <touch_send+0x34>)
 8001146:	f008 ffa7 	bl	800a098 <HAL_UART_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
	if(rtn != HAL_OK)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <touch_send+0x28>
	{
		// Error connection
		return 9;
 8001154:	2309      	movs	r3, #9
 8001156:	e000      	b.n	800115a <touch_send+0x2a>
	}
	return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000b68 	.word	0x20000b68

08001168 <touch_rcv>:
// ----------------------------------------------------------------------------
// Receive data in fingerprint module
int touch_rcv(uint8_t* packet, int len,int timeout)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	int rtn;
	HAL_UART_Receive(&huart2, packet, len, timeout);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <touch_rcv+0x30>)
 800117e:	f009 f824 	bl	800a1ca <HAL_UART_Receive>
	if(rtn != HAL_OK)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <touch_rcv+0x24>
	{
		// Error connection
		return 9;
 8001188:	2309      	movs	r3, #9
 800118a:	e000      	b.n	800118e <touch_rcv+0x26>
	}
	return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000b68 	.word	0x20000b68

0800119c <get_checksum>:
// ----------------------------------------------------------------------------
uint16_t get_checksum(uint8_t *package, int len)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    int i = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
    uint16_t checksum = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	817b      	strh	r3, [r7, #10]
    for (; i < len - 2; i++)
 80011ae:	e00a      	b.n	80011c6 <get_checksum+0x2a>
    {
        checksum += *(package + i);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	897b      	ldrh	r3, [r7, #10]
 80011bc:	4413      	add	r3, r2
 80011be:	817b      	strh	r3, [r7, #10]
    for (; i < len - 2; i++)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3b02      	subs	r3, #2
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbef      	blt.n	80011b0 <get_checksum+0x14>
    }
    return checksum;
 80011d0:	897b      	ldrh	r3, [r7, #10]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <create_command_package>:
// ----------------------------------------------------------------------------
void create_command_package(uint32_t param, uint16_t command,uint8_t* package)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	460b      	mov	r3, r1
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	817b      	strh	r3, [r7, #10]
    uint16_t checksum;
    package[0] = 0x55;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2255      	movs	r2, #85	; 0x55
 80011ee:	701a      	strb	r2, [r3, #0]
    package[1] = 0xAA;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	22aa      	movs	r2, #170	; 0xaa
 80011f6:	701a      	strb	r2, [r3, #0]
    package[2] = 0x01;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3302      	adds	r3, #2
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
    package[3] = 0x00;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3303      	adds	r3, #3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
    package[4] = param & 0xFF;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    package[5] = (param >> 8) & 0xFF;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	0a1a      	lsrs	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3305      	adds	r3, #5
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    package[6] = (param >> 16) & 0xFF;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	0c1a      	lsrs	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3306      	adds	r3, #6
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
    package[7] = (param >> 24) & 0xFF;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	0e1a      	lsrs	r2, r3, #24
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3307      	adds	r3, #7
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
    package[8] = command & 0xFF;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3308      	adds	r3, #8
 800123a:	897a      	ldrh	r2, [r7, #10]
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
    package[9] = (command >> 8) & 0xFF;
 8001240:	897b      	ldrh	r3, [r7, #10]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3309      	adds	r3, #9
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]
    checksum = get_checksum(package, COMMAND_PACKET_LEN);
 800124e:	210c      	movs	r1, #12
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffa3 	bl	800119c <get_checksum>
 8001256:	4603      	mov	r3, r0
 8001258:	82fb      	strh	r3, [r7, #22]
    package[10] = (checksum)&0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	330a      	adds	r3, #10
 800125e:	8afa      	ldrh	r2, [r7, #22]
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    package[11] = (checksum >> 8) & 0xFF;
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	330b      	adds	r3, #11
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <rcv_ack>:
// ----------------------------------------------------------------------------
// Check answer from fingerprint module
int rcv_ack(uint8_t* packet, int len,int timeout)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
	uint16_t calc_checksum;
	uint16_t recv_checksum;
	touch_rcv(packet,len,timeout);
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff6c 	bl	8001168 <touch_rcv>
	recv_checksum = packet[len - 2]  | packet[len - 1] << 8;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3b02      	subs	r3, #2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b21a      	sxth	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3b01      	subs	r3, #1
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	440b      	add	r3, r1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
	calc_checksum = get_checksum(packet,len);
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff72 	bl	800119c <get_checksum>
 80012b8:	4603      	mov	r3, r0
 80012ba:	82bb      	strh	r3, [r7, #20]
	if(recv_checksum != calc_checksum){
 80012bc:	8afa      	ldrh	r2, [r7, #22]
 80012be:	8abb      	ldrh	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <rcv_ack+0x4e>
		return 9;
 80012c4:	2309      	movs	r3, #9
 80012c6:	e007      	b.n	80012d8 <rcv_ack+0x5e>
	}else if(packet[8] != ACK){
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3308      	adds	r3, #8
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b30      	cmp	r3, #48	; 0x30
 80012d0:	d001      	beq.n	80012d6 <rcv_ack+0x5c>
		return 9;
 80012d2:	2309      	movs	r3, #9
 80012d4:	e000      	b.n	80012d8 <rcv_ack+0x5e>
	}
	return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <touch_bakcklight>:
/*
 * Turn off LED 1
 * Turn ON LED 1
 */
void touch_bakcklight(int value)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	create_command_package(value, CMOSLED_CMD, command_packet);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <touch_bakcklight+0x4c>)
 80012ec:	2112      	movs	r1, #18
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff74 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80012f4:	210c      	movs	r1, #12
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <touch_bakcklight+0x4c>)
 80012f8:	f7ff ff1a 	bl	8001130 <touch_send>

	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 80012fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001300:	210c      	movs	r1, #12
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <touch_bakcklight+0x50>)
 8001304:	f7ff ffb9 	bl	800127a <rcv_ack>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10a      	bne.n	8001324 <touch_bakcklight+0x44>
			//Error Handling
			return;
		}
		if(value != 0){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <touch_bakcklight+0x3c>
			printf("Touch: Backlight ON");
 8001314:	4807      	ldr	r0, [pc, #28]	; (8001334 <touch_bakcklight+0x54>)
 8001316:	f009 fd8f 	bl	800ae38 <iprintf>
 800131a:	e004      	b.n	8001326 <touch_bakcklight+0x46>
		}else{
			printf("Touch: Backlight OFF");
 800131c:	4806      	ldr	r0, [pc, #24]	; (8001338 <touch_bakcklight+0x58>)
 800131e:	f009 fd8b 	bl	800ae38 <iprintf>
 8001322:	e000      	b.n	8001326 <touch_bakcklight+0x46>
			return;
 8001324:	bf00      	nop
		}
}
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000025c 	.word	0x2000025c
 8001330:	20000268 	.word	0x20000268
 8001334:	0800eae8 	.word	0x0800eae8
 8001338:	0800eafc 	.word	0x0800eafc

0800133c <touch_is_press_finger>:
// ----------------------------------------------------------------------------
// LED must be turn on for finger detection detection
int touch_is_press_finger(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	create_command_package(1, ISPRESSFINGER_CMD, command_packet);
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <touch_is_press_finger+0x58>)
 8001342:	2126      	movs	r1, #38	; 0x26
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ff49 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800134a:	210c      	movs	r1, #12
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <touch_is_press_finger+0x58>)
 800134e:	f7ff feef 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 8001352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001356:	210c      	movs	r1, #12
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <touch_is_press_finger+0x5c>)
 800135a:	f7ff ff8e 	bl	800127a <rcv_ack>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <touch_is_press_finger+0x2e>
		//Error Handling
		return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001368:	e012      	b.n	8001390 <touch_is_press_finger+0x54>
	}
	if(response_packet[4] == 0 && response_packet[5] == 0 && response_packet[6] == 0 && response_packet[7] == 0){
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <touch_is_press_finger+0x5c>)
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10d      	bne.n	800138e <touch_is_press_finger+0x52>
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <touch_is_press_finger+0x5c>)
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <touch_is_press_finger+0x52>
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <touch_is_press_finger+0x5c>)
 800137c:	799b      	ldrb	r3, [r3, #6]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <touch_is_press_finger+0x52>
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <touch_is_press_finger+0x5c>)
 8001384:	79db      	ldrb	r3, [r3, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <touch_is_press_finger+0x52>
		//printf("Touch: Finger Press");
		return 1;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <touch_is_press_finger+0x54>
	}
	//printf("Touch: No Finger Press");
	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000025c 	.word	0x2000025c
 8001398:	20000268 	.word	0x20000268

0800139c <touch_capture_finger>:
		//Error Handling
		return;
	}
}
// ----------------------------------------------------------------------------
int touch_capture_finger(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, CAPTUREFINGERPRINT_CMD, command_packet);
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <touch_capture_finger+0x34>)
 80013a2:	2160      	movs	r1, #96	; 0x60
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff ff19 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80013aa:	210c      	movs	r1, #12
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <touch_capture_finger+0x34>)
 80013ae:	f7ff febf 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
 80013b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b6:	210c      	movs	r1, #12
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <touch_capture_finger+0x38>)
 80013ba:	f7ff ff5e 	bl	800127a <rcv_ack>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <touch_capture_finger+0x2c>
	{
		//Error Handling
		return 9;
 80013c4:	2309      	movs	r3, #9
 80013c6:	e000      	b.n	80013ca <touch_capture_finger+0x2e>
	}
	return 1;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000025c 	.word	0x2000025c
 80013d4:	20000268 	.word	0x20000268

080013d8 <touch_open>:
		printf("s");
	}
	return;
}
// ----------------------------------------------------------------------------
void touch_open(int verbose){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	dev_info* extra_info =  (dev_info*)malloc(sizeof(dev_info));
 80013e0:	201e      	movs	r0, #30
 80013e2:	f009 fc6b 	bl	800acbc <malloc>
 80013e6:	4603      	mov	r3, r0
 80013e8:	60fb      	str	r3, [r7, #12]
	if(!verbose){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d115      	bne.n	800141c <touch_open+0x44>
		create_command_package(0,1,command_packet);
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <touch_open+0x84>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fef1 	bl	80011dc <create_command_package>
		touch_send(command_packet,COMMAND_PACKET_LEN);
 80013fa:	210c      	movs	r1, #12
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <touch_open+0x84>)
 80013fe:	f7ff fe97 	bl	8001130 <touch_send>
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
 8001402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001406:	210c      	movs	r1, #12
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <touch_open+0x88>)
 800140a:	f7ff ff36 	bl	800127a <rcv_ack>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01f      	beq.n	8001454 <touch_open+0x7c>
		{
			//Protocolo de errores
			free(extra_info);
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f009 fc59 	bl	800accc <free>
			return;
 800141a:	e01b      	b.n	8001454 <touch_open+0x7c>
		}
	}else{
		create_command_package(0,1,command_packet);
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <touch_open+0x84>)
 800141e:	2101      	movs	r1, #1
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fedb 	bl	80011dc <create_command_package>
		touch_send(command_packet,COMMAND_PACKET_LEN);
 8001426:	210c      	movs	r1, #12
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <touch_open+0x84>)
 800142a:	f7ff fe81 	bl	8001130 <touch_send>
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
 800142e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001432:	210c      	movs	r1, #12
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <touch_open+0x88>)
 8001436:	f7ff ff20 	bl	800127a <rcv_ack>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <touch_open+0x70>
		{
			//Protocolo de errores
			free(extra_info);
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f009 fc43 	bl	800accc <free>
			return;
 8001446:	e005      	b.n	8001454 <touch_open+0x7c>
		}
		touch_rcv((uint8_t*)extra_info,sizeof(dev_info),2000);
 8001448:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800144c:	211e      	movs	r1, #30
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff fe8a 	bl	8001168 <touch_rcv>
	}
}
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000025c 	.word	0x2000025c
 8001460:	20000268 	.word	0x20000268

08001464 <identify>:
/*
 * return ID, if found.
 * return 0, if no matches.
 */
int identify(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
	// 1. Finger is presed?
	int touch_is_press_finger_status = touch_is_press_finger();
 800146a:	f7ff ff67 	bl	800133c <touch_is_press_finger>
 800146e:	60f8      	str	r0, [r7, #12]
	if(touch_is_press_finger_status == 1)        // Work OK
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d127      	bne.n	80014c6 <identify+0x62>
	{
		// 2. Capture finger
		int touch_capture_finger_status = touch_capture_finger();
 8001476:	f7ff ff91 	bl	800139c <touch_capture_finger>
 800147a:	60b8      	str	r0, [r7, #8]
		if(touch_capture_finger_status == 1)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d121      	bne.n	80014c6 <identify+0x62>
		{
			// 3
			int ack_reponse_code;
			create_command_package(0, IDENTIFY, command_packet);
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <identify+0x6c>)
 8001484:	2151      	movs	r1, #81	; 0x51
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fea8 	bl	80011dc <create_command_package>
			touch_send(command_packet,COMMAND_PACKET_LEN);
 800148c:	210c      	movs	r1, #12
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <identify+0x6c>)
 8001490:	f7ff fe4e 	bl	8001130 <touch_send>
			ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
 8001494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001498:	210c      	movs	r1, #12
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <identify+0x70>)
 800149c:	f7ff feed 	bl	800127a <rcv_ack>
 80014a0:	6078      	str	r0, [r7, #4]

			int ID = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
			switch(ack_reponse_code)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <identify+0x4e>
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d005      	beq.n	80014bc <identify+0x58>
 80014b0:	e006      	b.n	80014c0 <identify+0x5c>
			{
					case HAL_OK:
						ID = response_packet[4];
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <identify+0x70>)
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	603b      	str	r3, [r7, #0]
						// sometimes fingerprint module can return '9' if touch unknown finger.
//						if(ID ==  9)
//						{
//							int l = 9999;
//						}
						return ID;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	e004      	b.n	80014c6 <identify+0x62>
					case 9:
						return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e002      	b.n	80014c6 <identify+0x62>
					default:
						return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c4:	e7ff      	b.n	80014c6 <identify+0x62>
			}
		}
	}
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000025c 	.word	0x2000025c
 80014d4:	20000268 	.word	0x20000268

080014d8 <nmea0183_checksum>:
	}
}
//--------------------------------------------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]

	for(j = 1; j < strlen(msg) - 4; j++)
 80014e8:	2301      	movs	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	e00a      	b.n	8001504 <nmea0183_checksum+0x2c>
	{
		checksum = checksum^(unsigned)msg[j];
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4053      	eors	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
	for(j = 1; j < strlen(msg) - 4; j++)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3301      	adds	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7fe fe23 	bl	8000150 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	1f1a      	subs	r2, r3, #4
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8ec      	bhi.n	80014ee <nmea0183_checksum+0x16>
	}
	return checksum;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <parsing_GPGLL_line>:

//--------------------------------------------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b0a9      	sub	sp, #164	; 0xa4
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];										// Main buffer for GPGLL line
	int size = sizeof(nmeaSnt);
 8001528:	2331      	movs	r3, #49	; 0x31
 800152a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	memset(nmeaSnt, 0, size);
 800152e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001532:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f009 fbcf 	bl	800acdc <memset>

	//Copy to  "*" from str_GPGLL in nmeaSnt
	int i=0;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800154a:	e010      	b.n	800156e <parsing_GPGLL_line+0x4e>
	{
		nmeaSnt[i]=str_GPGLL[i];    						// copy bytes from str_GPGLL in nmeaSnt
 800154c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	7819      	ldrb	r1, [r3, #0]
 8001556:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800155a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800155e:	4413      	add	r3, r2
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 8001564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001568:	3301      	adds	r3, #1
 800156a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800156e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b2a      	cmp	r3, #42	; 0x2a
 800157a:	d003      	beq.n	8001584 <parsing_GPGLL_line+0x64>
 800157c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001580:	2b31      	cmp	r3, #49	; 0x31
 8001582:	dde3      	ble.n	800154c <parsing_GPGLL_line+0x2c>
	}
	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 8001584:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001588:	2100      	movs	r1, #0
 800158a:	460a      	mov	r2, r1
 800158c:	801a      	strh	r2, [r3, #0]
 800158e:	460a      	mov	r2, r1
 8001590:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"  (after '*' are checksum two numbers)
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001592:	212a      	movs	r1, #42	; 0x2a
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f009 fca6 	bl	800aee6 <strchr>
 800159a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 800159e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015a2:	3301      	adds	r3, #1
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	873b      	strh	r3, [r7, #56]	; 0x38
	smNmbr[2]='\0';											// Add and of line '\0' sing
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 80015b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff8f 	bl	80014d8 <nmea0183_checksum>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	char hex[3];
	sprintf(hex, "%x", intSum);
 80015c0:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80015c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015c8:	49b2      	ldr	r1, [pc, #712]	; (8001894 <parsing_GPGLL_line+0x374>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f009 fc5c 	bl	800ae88 <siprintf>

	if(strstr(smNmbr, hex) != NULL)                         // Check if checksum line equal checksum after '*'
 80015d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80015d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f009 fc98 	bl	800af10 <strstr>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8234 	beq.w	8001a50 <parsing_GPGLL_line+0x530>
	{
		// Parsing string
		int i = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		int count = 0;                                      // Count of elements
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		while(nmeaSnt[i] != '\0')							// not and of line
 80015f4:	e224      	b.n	8001a40 <parsing_GPGLL_line+0x520>
		{
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
			{
				int g=0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				char str[12]={0};
 80015fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
				i++;										// Count of chars in nmeaSnt[i] array
 8001608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800160c:	3301      	adds	r3, #1
 800160e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				switch (count)
 8001612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001616:	2b04      	cmp	r3, #4
 8001618:	f200 81ff 	bhi.w	8001a1a <parsing_GPGLL_line+0x4fa>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <parsing_GPGLL_line+0x104>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001639 	.word	0x08001639
 8001628:	08001789 	.word	0x08001789
 800162c:	080017db 	.word	0x080017db
 8001630:	08001949 	.word	0x08001949
 8001634:	0800199b 	.word	0x0800199b
				{
					case 0:
						for(g=0; g<10; g++)
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800163e:	e014      	b.n	800166a <parsing_GPGLL_line+0x14a>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 8001640:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001648:	4413      	add	r3, r2
 800164a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800164e:	4413      	add	r3, r2
 8001650:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8001654:	4a90      	ldr	r2, [pc, #576]	; (8001898 <parsing_GPGLL_line+0x378>)
 8001656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800165a:	4413      	add	r3, r2
 800165c:	460a      	mov	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 8001660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001664:	3301      	adds	r3, #1
 8001666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800166a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800166e:	2b09      	cmp	r3, #9
 8001670:	dde6      	ble.n	8001640 <parsing_GPGLL_line+0x120>
						}
						GPS_data.lat[10] = '\0';
 8001672:	4b89      	ldr	r3, [pc, #548]	; (8001898 <parsing_GPGLL_line+0x378>)
 8001674:	2200      	movs	r2, #0
 8001676:	729a      	strb	r2, [r3, #10]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167c:	220c      	movs	r2, #12
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f009 fb2b 	bl	800acdc <memset>
						sprintf(str,"%s", GPS_data.lat);
 8001686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168a:	4983      	ldr	r1, [pc, #524]	; (8001898 <parsing_GPGLL_line+0x378>)
 800168c:	4618      	mov	r0, r3
 800168e:	f009 fc37 	bl	800af00 <strcpy>
						strcpy(gps_lat, str);
 8001692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001696:	4619      	mov	r1, r3
 8001698:	4880      	ldr	r0, [pc, #512]	; (800189c <parsing_GPGLL_line+0x37c>)
 800169a:	f009 fc31 	bl	800af00 <strcpy>

						// Convert lat in coordinate for google mups
						// 1. Separate degrees from minutes
						float integer_part_lat = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	677b      	str	r3, [r7, #116]	; 0x74
						float fractional_part_lat = 0;
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	673b      	str	r3, [r7, #112]	; 0x70
						char integer_part_char_lat[3]={0};
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	460a      	mov	r2, r1
 80016b2:	801a      	strh	r2, [r3, #0]
 80016b4:	460a      	mov	r2, r1
 80016b6:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lat[9]={0};
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	721a      	strb	r2, [r3, #8]
						uint8_t k=0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

						for(k=0; k<=11; k++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80016d0:	e020      	b.n	8001714 <parsing_GPGLL_line+0x1f4>
						{
							if(k<=1)
 80016d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d80b      	bhi.n	80016f2 <parsing_GPGLL_line+0x1d2>
							{
								integer_part_char_lat[k] = GPS_data.lat[k];        	  // Degrees
 80016da:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80016de:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016e2:	496d      	ldr	r1, [pc, #436]	; (8001898 <parsing_GPGLL_line+0x378>)
 80016e4:	5c8a      	ldrb	r2, [r1, r2]
 80016e6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80016ea:	440b      	add	r3, r1
 80016ec:	f803 2c7c 	strb.w	r2, [r3, #-124]
 80016f0:	e00b      	b.n	800170a <parsing_GPGLL_line+0x1ea>
							}
							else
							{
								fractional_part_char_lat[k-2] = GPS_data.lat[k];      // Minutes
 80016f2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80016f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016fa:	3b02      	subs	r3, #2
 80016fc:	4966      	ldr	r1, [pc, #408]	; (8001898 <parsing_GPGLL_line+0x378>)
 80016fe:	5c8a      	ldrb	r2, [r1, r2]
 8001700:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001704:	440b      	add	r3, r1
 8001706:	f803 2c88 	strb.w	r2, [r3, #-136]
						for(k=0; k<=11; k++)
 800170a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800170e:	3301      	adds	r3, #1
 8001710:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001714:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001718:	2b0b      	cmp	r3, #11
 800171a:	d9da      	bls.n	80016d2 <parsing_GPGLL_line+0x1b2>
							}
						}

						// 2. Convert string in numbers
						integer_part_lat = atoi(integer_part_char_lat);          // save int part
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4618      	mov	r0, r3
 8001722:	f009 fa78 	bl	800ac16 <atoi>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fac1 	bl	8000cb0 <__aeabi_i2f>
 800172e:	4603      	mov	r3, r0
 8001730:	677b      	str	r3, [r7, #116]	; 0x74
						fractional_part_lat = atof(fractional_part_char_lat);	 // float part
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	4618      	mov	r0, r3
 8001738:	f009 fa6a 	bl	800ac10 <atof>
 800173c:	4603      	mov	r3, r0
 800173e:	460c      	mov	r4, r1
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	f7ff f9aa 	bl	8000a9c <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	673b      	str	r3, [r7, #112]	; 0x70
 						// 3. Convert in degrees
						fractional_part_lat = (fractional_part_lat/60);
 800174c:	4954      	ldr	r1, [pc, #336]	; (80018a0 <parsing_GPGLL_line+0x380>)
 800174e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001750:	f7ff fbb6 	bl	8000ec0 <__aeabi_fdiv>
 8001754:	4603      	mov	r3, r0
 8001756:	673b      	str	r3, [r7, #112]	; 0x70
						integer_part_lat = integer_part_lat + fractional_part_lat;
 8001758:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800175a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800175c:	f7ff f9f4 	bl	8000b48 <__addsf3>
 8001760:	4603      	mov	r3, r0
 8001762:	677b      	str	r3, [r7, #116]	; 0x74
						// 4. Convert in string and save it in global variable
                        gcvt(integer_part_lat, 11, gps_latitude );
 8001764:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001766:	f7fe fe5f 	bl	8000428 <__aeabi_f2d>
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <parsing_GPGLL_line+0x384>)
 800176c:	220b      	movs	r2, #11
 800176e:	f009 fa57 	bl	800ac20 <gcvt>
                        gps_latitude[9] = '\0';
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <parsing_GPGLL_line+0x384>)
 8001774:	2200      	movs	r2, #0
 8001776:	725a      	strb	r2, [r3, #9]

						i = i+g;
 8001778:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800177c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001780:	4413      	add	r3, r2
 8001782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001786:	e148      	b.n	8001a1a <parsing_GPGLL_line+0x4fa>

					case 1:
						for (g =0; g<1; g++)
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800178e:	e015      	b.n	80017bc <parsing_GPGLL_line+0x29c>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 8001790:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001798:	4413      	add	r3, r2
 800179a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800179e:	4413      	add	r3, r2
 80017a0:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80017a4:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <parsing_GPGLL_line+0x378>)
 80017a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017aa:	4413      	add	r3, r2
 80017ac:	330b      	adds	r3, #11
 80017ae:	460a      	mov	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 80017b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b6:	3301      	adds	r3, #1
 80017b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dde5      	ble.n	8001790 <parsing_GPGLL_line+0x270>
						}
						GPS_data.lat_letter[2] = '\0';
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <parsing_GPGLL_line+0x378>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	735a      	strb	r2, [r3, #13]
						i = i+g;
 80017ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80017ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017d2:	4413      	add	r3, r2
 80017d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80017d8:	e11f      	b.n	8001a1a <parsing_GPGLL_line+0x4fa>

					case 2:
						for(g=0; g<11; g++)
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017e0:	e015      	b.n	800180e <parsing_GPGLL_line+0x2ee>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 80017e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ea:	4413      	add	r3, r2
 80017ec:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80017f0:	4413      	add	r3, r2
 80017f2:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80017f6:	4a28      	ldr	r2, [pc, #160]	; (8001898 <parsing_GPGLL_line+0x378>)
 80017f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017fc:	4413      	add	r3, r2
 80017fe:	330d      	adds	r3, #13
 8001800:	460a      	mov	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 8001804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001808:	3301      	adds	r3, #1
 800180a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800180e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001812:	2b0a      	cmp	r3, #10
 8001814:	dde5      	ble.n	80017e2 <parsing_GPGLL_line+0x2c2>
						}
						GPS_data.lon[11] = '\0';
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <parsing_GPGLL_line+0x378>)
 8001818:	2200      	movs	r2, #0
 800181a:	761a      	strb	r2, [r3, #24]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 800181c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001820:	220c      	movs	r2, #12
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f009 fa59 	bl	800acdc <memset>
						sprintf(str,"%s", GPS_data.lon);
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	491e      	ldr	r1, [pc, #120]	; (80018a8 <parsing_GPGLL_line+0x388>)
 8001830:	4618      	mov	r0, r3
 8001832:	f009 fb65 	bl	800af00 <strcpy>
						strcpy(gps_lon, str);
 8001836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183a:	4619      	mov	r1, r3
 800183c:	481b      	ldr	r0, [pc, #108]	; (80018ac <parsing_GPGLL_line+0x38c>)
 800183e:	f009 fb5f 	bl	800af00 <strcpy>

						// Convert lon in coordinate for google mups
						// // 1. Separate degrees from minutes
						float integer_part_lon = 0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	67fb      	str	r3, [r7, #124]	; 0x7c
						float fractional_part_lon = 0;
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	67bb      	str	r3, [r7, #120]	; 0x78
						char integer_part_char_lon[3]={0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2100      	movs	r1, #0
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
 8001858:	460a      	mov	r2, r1
 800185a:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lon[10]={0};
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	811a      	strh	r2, [r3, #8]

						for(k=0; k<=11; k++)
 8001868:	2300      	movs	r3, #0
 800186a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800186e:	e031      	b.n	80018d4 <parsing_GPGLL_line+0x3b4>
						{
							if(k<=2)
 8001870:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001874:	2b02      	cmp	r3, #2
 8001876:	d81b      	bhi.n	80018b0 <parsing_GPGLL_line+0x390>
							{
								integer_part_char_lon[k] = GPS_data.lon[k];
 8001878:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800187c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001880:	4905      	ldr	r1, [pc, #20]	; (8001898 <parsing_GPGLL_line+0x378>)
 8001882:	440a      	add	r2, r1
 8001884:	7b52      	ldrb	r2, [r2, #13]
 8001886:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800188a:	440b      	add	r3, r1
 800188c:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8001890:	e01b      	b.n	80018ca <parsing_GPGLL_line+0x3aa>
 8001892:	bf00      	nop
 8001894:	0800eb14 	.word	0x0800eb14
 8001898:	20000750 	.word	0x20000750
 800189c:	2000071c 	.word	0x2000071c
 80018a0:	42700000 	.word	0x42700000
 80018a4:	2000070c 	.word	0x2000070c
 80018a8:	2000075d 	.word	0x2000075d
 80018ac:	2000072c 	.word	0x2000072c
							}
							else
							{
								fractional_part_char_lon[k-3] = GPS_data.lon[k];
 80018b0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80018b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80018b8:	3b03      	subs	r3, #3
 80018ba:	4967      	ldr	r1, [pc, #412]	; (8001a58 <parsing_GPGLL_line+0x538>)
 80018bc:	440a      	add	r2, r1
 80018be:	7b52      	ldrb	r2, [r2, #13]
 80018c0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80018c4:	440b      	add	r3, r1
 80018c6:	f803 2c98 	strb.w	r2, [r3, #-152]
						for(k=0; k<=11; k++)
 80018ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80018ce:	3301      	adds	r3, #1
 80018d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80018d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80018d8:	2b0b      	cmp	r3, #11
 80018da:	d9c9      	bls.n	8001870 <parsing_GPGLL_line+0x350>
							}
						}

						// 2. Convert string in numbers
						integer_part_lon = atoi(integer_part_char_lon);          // save int part
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f009 f998 	bl	800ac16 <atoi>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9e1 	bl	8000cb0 <__aeabi_i2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	67fb      	str	r3, [r7, #124]	; 0x7c
						fractional_part_lon = atof(fractional_part_char_lon);	 // float part
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f009 f98a 	bl	800ac10 <atof>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4618      	mov	r0, r3
 8001902:	4621      	mov	r1, r4
 8001904:	f7ff f8ca 	bl	8000a9c <__aeabi_d2f>
 8001908:	4603      	mov	r3, r0
 800190a:	67bb      	str	r3, [r7, #120]	; 0x78
						// 3. Convert in degrees
						fractional_part_lon = (fractional_part_lon/60);
 800190c:	4953      	ldr	r1, [pc, #332]	; (8001a5c <parsing_GPGLL_line+0x53c>)
 800190e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001910:	f7ff fad6 	bl	8000ec0 <__aeabi_fdiv>
 8001914:	4603      	mov	r3, r0
 8001916:	67bb      	str	r3, [r7, #120]	; 0x78
						integer_part_lon = integer_part_lon + fractional_part_lon;
 8001918:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800191a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800191c:	f7ff f914 	bl	8000b48 <__addsf3>
 8001920:	4603      	mov	r3, r0
 8001922:	67fb      	str	r3, [r7, #124]	; 0x7c
						// 4. Convert in string and save it in global variable
					    gcvt(integer_part_lon, 11, gps_lontitude );
 8001924:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001926:	f7fe fd7f 	bl	8000428 <__aeabi_f2d>
 800192a:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <parsing_GPGLL_line+0x540>)
 800192c:	220b      	movs	r2, #11
 800192e:	f009 f977 	bl	800ac20 <gcvt>
					    gps_lontitude[10] = '\0';
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <parsing_GPGLL_line+0x540>)
 8001934:	2200      	movs	r2, #0
 8001936:	729a      	strb	r2, [r3, #10]

						i = i+g;
 8001938:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800193c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001940:	4413      	add	r3, r2
 8001942:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001946:	e068      	b.n	8001a1a <parsing_GPGLL_line+0x4fa>

					case 3:
						for(g=0; g<1; g++)
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800194e:	e015      	b.n	800197c <parsing_GPGLL_line+0x45c>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 8001950:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001958:	4413      	add	r3, r2
 800195a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800195e:	4413      	add	r3, r2
 8001960:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8001964:	4a3c      	ldr	r2, [pc, #240]	; (8001a58 <parsing_GPGLL_line+0x538>)
 8001966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800196a:	4413      	add	r3, r2
 800196c:	3319      	adds	r3, #25
 800196e:	460a      	mov	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 8001972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001976:	3301      	adds	r3, #1
 8001978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800197c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001980:	2b00      	cmp	r3, #0
 8001982:	dde5      	ble.n	8001950 <parsing_GPGLL_line+0x430>
						}
						GPS_data.lon_letter[2] = '\0';
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <parsing_GPGLL_line+0x538>)
 8001986:	2200      	movs	r2, #0
 8001988:	76da      	strb	r2, [r3, #27]
						i = i+g;
 800198a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800198e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001992:	4413      	add	r3, r2
 8001994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001998:	e03f      	b.n	8001a1a <parsing_GPGLL_line+0x4fa>

					case 4:
						for(g=0; g<6; g++)
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019a0:	e015      	b.n	80019ce <parsing_GPGLL_line+0x4ae>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 80019a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019aa:	4413      	add	r3, r2
 80019ac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80019b0:	4413      	add	r3, r2
 80019b2:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80019b6:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <parsing_GPGLL_line+0x538>)
 80019b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019bc:	4413      	add	r3, r2
 80019be:	331b      	adds	r3, #27
 80019c0:	460a      	mov	r2, r1
 80019c2:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 80019c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019c8:	3301      	adds	r3, #1
 80019ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	dde5      	ble.n	80019a2 <parsing_GPGLL_line+0x482>
						}
						GPS_data.time[6] = '\0';
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <parsing_GPGLL_line+0x538>)
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 80019de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019e6:	4413      	add	r3, r2
 80019e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

						// Save time in global variable
						memset(str, 0 , sizeof(str));
 80019ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f0:	220c      	movs	r2, #12
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f009 f971 	bl	800acdc <memset>
						sprintf(str,"%s", GPS_data.time);
 80019fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fe:	4919      	ldr	r1, [pc, #100]	; (8001a64 <parsing_GPGLL_line+0x544>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f009 fa7d 	bl	800af00 <strcpy>
						strcpy(gps_time, str);
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <parsing_GPGLL_line+0x548>)
 8001a0e:	f009 fa77 	bl	800af00 <strcpy>

						GPGGA_data_is_ready = 1;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <parsing_GPGLL_line+0x54c>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

						break;
 8001a18:	bf00      	nop
				}
				count++;
 8001a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
 8001a24:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b2c      	cmp	r3, #44	; 0x2c
 8001a32:	f43f ade0 	beq.w	80015f6 <parsing_GPGLL_line+0xd6>
			}
			i++;
 8001a36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while(nmeaSnt[i] != '\0')							// not and of line
 8001a40:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e9      	bne.n	8001a24 <parsing_GPGLL_line+0x504>
		}
	}
}
 8001a50:	bf00      	nop
 8001a52:	37a4      	adds	r7, #164	; 0xa4
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	20000750 	.word	0x20000750
 8001a5c:	42700000 	.word	0x42700000
 8001a60:	20000740 	.word	0x20000740
 8001a64:	2000076b 	.word	0x2000076b
 8001a68:	20000738 	.word	0x20000738
 8001a6c:	20000278 	.word	0x20000278

08001a70 <parsing_GPGGA_line>:
//--------------------------------------------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0a2      	sub	sp, #136	; 0x88
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 8001a78:	2346      	movs	r3, #70	; 0x46
 8001a7a:	67bb      	str	r3, [r7, #120]	; 0x78
		memset(nmeaSnt, 0, size);
 8001a7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f009 f929 	bl	800acdc <memset>
		char number_of_satalits_str[4] = {0};
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24

		//Copy to  "*" from str_GPGGA in nmeaSnt
		int i=0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a9a:	e010      	b.n	8001abe <parsing_GPGGA_line+0x4e>
		{
			nmeaSnt[i]=str_GPGGA[i];
 8001a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	7819      	ldrb	r1, [r3, #0]
 8001aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aae:	4413      	add	r3, r2
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aca:	d003      	beq.n	8001ad4 <parsing_GPGGA_line+0x64>
 8001acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ad0:	2b45      	cmp	r3, #69	; 0x45
 8001ad2:	dde3      	ble.n	8001a9c <parsing_GPGGA_line+0x2c>
		}

		// Check check sum
		char smNmbr[3]={0};     								// array for checksum
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	2100      	movs	r1, #0
 8001ada:	460a      	mov	r2, r1
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	460a      	mov	r2, r1
 8001ae0:	709a      	strb	r2, [r3, #2]
		char *rawSum;
		char not_used[12] = {0};
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001aee:	212a      	movs	r1, #42	; 0x2a
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f009 f9f8 	bl	800aee6 <strchr>
 8001af6:	6778      	str	r0, [r7, #116]	; 0x74
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001afa:	3301      	adds	r3, #1
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	843b      	strh	r3, [r7, #32]
		smNmbr[2]='\0';											// Add and of line '\0' sing
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        // PROBLEM: Checksum !=
		char hex[3];
		memset(hex, 0 , sizeof(hex));
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 f8e3 	bl	800acdc <memset>
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fcdc 	bl	80014d8 <nmea0183_checksum>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		sprintf(hex, "%x", intSum);
 8001b26:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	49c4      	ldr	r1, [pc, #784]	; (8001e40 <parsing_GPGGA_line+0x3d0>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f009 f9a9 	bl	800ae88 <siprintf>

//		if(strstr(smNmbr, hex) != NULL)
//		{
			// Parsing string

			i = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int count = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(nmeaSnt[i] != '\0')
 8001b42:	e170      	b.n	8001e26 <parsing_GPGGA_line+0x3b6>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	67fb      	str	r3, [r7, #124]	; 0x7c
					i++;
 8001b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					switch (count)
 8001b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	f200 8152 	bhi.w	8001e00 <parsing_GPGGA_line+0x390>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <parsing_GPGGA_line+0xf4>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001b81 	.word	0x08001b81
 8001b68:	08001bc3 	.word	0x08001bc3
 8001b6c:	08001c05 	.word	0x08001c05
 8001b70:	08001c47 	.word	0x08001c47
 8001b74:	08001c89 	.word	0x08001c89
 8001b78:	08001ccb 	.word	0x08001ccb
 8001b7c:	08001d0d 	.word	0x08001d0d
					{
						case 0:                     // Time
							for(g=0; g<8; g++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b84:	e011      	b.n	8001baa <parsing_GPGGA_line+0x13a>
							{
								not_used[g] = nmeaSnt[i+g];
 8001b86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b92:	4413      	add	r3, r2
 8001b94:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001b98:	f107 0214 	add.w	r2, r7, #20
 8001b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
							for(g=0; g<8; g++)
 8001ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001baa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	ddea      	ble.n	8001b86 <parsing_GPGGA_line+0x116>
							}
							not_used[9] = '\0';
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	777b      	strb	r3, [r7, #29]
							i = i+g;
 8001bb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bba:	4413      	add	r3, r2
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001bc0:	e11e      	b.n	8001e00 <parsing_GPGGA_line+0x390>

						case 1:   					// Lat
							for (g =0; g<10; g++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bc6:	e011      	b.n	8001bec <parsing_GPGGA_line+0x17c>
							{
								not_used[g] = nmeaSnt[i+g];
 8001bc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bce:	4413      	add	r3, r2
 8001bd0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001bda:	f107 0214 	add.w	r2, r7, #20
 8001bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be0:	4413      	add	r3, r2
 8001be2:	460a      	mov	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
							for (g =0; g<10; g++)
 8001be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be8:	3301      	adds	r3, #1
 8001bea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bee:	2b09      	cmp	r3, #9
 8001bf0:	ddea      	ble.n	8001bc8 <parsing_GPGGA_line+0x158>
							}
							not_used[10] = '\0';
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	77bb      	strb	r3, [r7, #30]
							i = i+g;
 8001bf6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001c02:	e0fd      	b.n	8001e00 <parsing_GPGGA_line+0x390>

						case 2:						// N
							for(g=0; g<1; g++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c08:	e011      	b.n	8001c2e <parsing_GPGGA_line+0x1be>
							{
								not_used[g] = nmeaSnt[i+g];
 8001c0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c10:	4413      	add	r3, r2
 8001c12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c16:	4413      	add	r3, r2
 8001c18:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001c1c:	f107 0214 	add.w	r2, r7, #20
 8001c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c22:	4413      	add	r3, r2
 8001c24:	460a      	mov	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	ddea      	ble.n	8001c0a <parsing_GPGGA_line+0x19a>
							}
							not_used[1] = '\0';
 8001c34:	2300      	movs	r3, #0
 8001c36:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001c38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c3e:	4413      	add	r3, r2
 8001c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001c44:	e0dc      	b.n	8001e00 <parsing_GPGGA_line+0x390>

						case 3:                     // Lat
							for(g=0; g<11; g++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c4a:	e011      	b.n	8001c70 <parsing_GPGGA_line+0x200>
							{
								not_used[g] = nmeaSnt[i+g];
 8001c4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c52:	4413      	add	r3, r2
 8001c54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c58:	4413      	add	r3, r2
 8001c5a:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001c5e:	f107 0214 	add.w	r2, r7, #20
 8001c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c64:	4413      	add	r3, r2
 8001c66:	460a      	mov	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
							for(g=0; g<11; g++)
 8001c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c72:	2b0a      	cmp	r3, #10
 8001c74:	ddea      	ble.n	8001c4c <parsing_GPGGA_line+0x1dc>
							}
							not_used[11] = '\0';
 8001c76:	2300      	movs	r3, #0
 8001c78:	77fb      	strb	r3, [r7, #31]
							i = i+g;
 8001c7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c80:	4413      	add	r3, r2
 8001c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001c86:	e0bb      	b.n	8001e00 <parsing_GPGGA_line+0x390>

						case 4:                      // E
							for(g=0; g<1; g++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c8c:	e011      	b.n	8001cb2 <parsing_GPGGA_line+0x242>
							{
								not_used[g] = nmeaSnt[i+g];
 8001c8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c94:	4413      	add	r3, r2
 8001c96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001ca0:	f107 0214 	add.w	r2, r7, #20
 8001ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca6:	4413      	add	r3, r2
 8001ca8:	460a      	mov	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cae:	3301      	adds	r3, #1
 8001cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	ddea      	ble.n	8001c8e <parsing_GPGGA_line+0x21e>
							}
							not_used[1] = '\0';
 8001cb8:	2300      	movs	r3, #0
 8001cba:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001cbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001cc8:	e09a      	b.n	8001e00 <parsing_GPGGA_line+0x390>

						case 5:                      // Fix Quality
							for(g=0; g<1; g++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cce:	e011      	b.n	8001cf4 <parsing_GPGGA_line+0x284>
							{
								not_used[g] = nmeaSnt[i+g];
 8001cd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cdc:	4413      	add	r3, r2
 8001cde:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001ce2:	f107 0214 	add.w	r2, r7, #20
 8001ce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ce8:	4413      	add	r3, r2
 8001cea:	460a      	mov	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	ddea      	ble.n	8001cd0 <parsing_GPGGA_line+0x260>
							}
							not_used[1] = '\0';
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001cfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d04:	4413      	add	r3, r2
 8001d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001d0a:	e079      	b.n	8001e00 <parsing_GPGGA_line+0x390>

						case 6:                      // Number of Satellites
							memset(number_of_satalits_str, 0 , sizeof(number_of_satalits_str));    // clean buffer
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	2204      	movs	r2, #4
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f008 ffe1 	bl	800acdc <memset>

							for(g=0; g<2; g++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d1e:	e011      	b.n	8001d44 <parsing_GPGGA_line+0x2d4>
							{
								number_of_satalits_str[g] = nmeaSnt[i+g];
 8001d20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d26:	4413      	add	r3, r2
 8001d28:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001d32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d38:	4413      	add	r3, r2
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
							for(g=0; g<2; g++)
 8001d3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d40:	3301      	adds	r3, #1
 8001d42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	ddea      	ble.n	8001d20 <parsing_GPGGA_line+0x2b0>
							}
							number_of_satalits_str[2] = '\0';
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							// Convert two digits string on number
							uint8_t dozens_number_of_satalits = (uint8_t)number_of_satalits_str[0] - 48;
 8001d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d54:	3b30      	subs	r3, #48	; 0x30
 8001d56:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							dozens_number_of_satalits = dozens_number_of_satalits *10;
 8001d5a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001d5e:	461a      	mov	r2, r3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							uint8_t units_number_of_satalits = (uint8_t)number_of_satalits_str[1]  - 48;
 8001d6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d6e:	3b30      	subs	r3, #48	; 0x30
 8001d70:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
							uint8_t digit_number_of_satalites = dozens_number_of_satalits + units_number_of_satalits;
 8001d74:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8001d78:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

							// Chesk if data id number
							if((digit_number_of_satalites >= 3 || digit_number_of_satalites <= 14))   // Check if data correct
 8001d82:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d803      	bhi.n	8001d92 <parsing_GPGGA_line+0x322>
 8001d8a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001d8e:	2b0e      	cmp	r3, #14
 8001d90:	d826      	bhi.n	8001de0 <parsing_GPGGA_line+0x370>
							{
								// Convert uint8_t in char
								char buff_char_number_of_satalites[3]={0};
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2100      	movs	r1, #0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	709a      	strb	r2, [r3, #2]
								memset(buff_char_number_of_satalites, 0 ,sizeof(buff_char_number_of_satalites));
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	2203      	movs	r2, #3
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 ff97 	bl	800acdc <memset>
								buff_char_number_of_satalites[0] = (char)((dozens_number_of_satalits/10) + 48);
 8001dae:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001db2:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <parsing_GPGGA_line+0x3d4>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	3330      	adds	r3, #48	; 0x30
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	733b      	strb	r3, [r7, #12]
								buff_char_number_of_satalites[1] = (char)units_number_of_satalits + 48;
 8001dc2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001dc6:	3330      	adds	r3, #48	; 0x30
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	737b      	strb	r3, [r7, #13]
								buff_char_number_of_satalites[2] = '\0';
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73bb      	strb	r3, [r7, #14]

								// write in global variable
								strcpy(gps_number_of_satellites, buff_char_number_of_satalites);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481c      	ldr	r0, [pc, #112]	; (8001e48 <parsing_GPGGA_line+0x3d8>)
 8001dd8:	f009 f892 	bl	800af00 <strcpy>
							{
 8001ddc:	bf00      	nop
							{
								char error_message[] = "Er";
								strcpy(gps_number_of_satellites, error_message);
							}

							break;
 8001dde:	e00e      	b.n	8001dfe <parsing_GPGGA_line+0x38e>
								char error_message[] = "Er";
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <parsing_GPGGA_line+0x3dc>)
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4611      	mov	r1, r2
 8001dea:	8019      	strh	r1, [r3, #0]
 8001dec:	3302      	adds	r3, #2
 8001dee:	0c12      	lsrs	r2, r2, #16
 8001df0:	701a      	strb	r2, [r3, #0]
								strcpy(gps_number_of_satellites, error_message);
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <parsing_GPGGA_line+0x3d8>)
 8001dfa:	f009 f881 	bl	800af00 <strcpy>
							break;
 8001dfe:	bf00      	nop
					}
					count++;
 8001e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e04:	3301      	adds	r3, #1
 8001e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(nmeaSnt[i] == ',')
 8001e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b2c      	cmp	r3, #44	; 0x2c
 8001e18:	f43f ae94 	beq.w	8001b44 <parsing_GPGGA_line+0xd4>
				}
				i++;
 8001e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e20:	3301      	adds	r3, #1
 8001e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(nmeaSnt[i] != '\0')
 8001e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e9      	bne.n	8001e0a <parsing_GPGGA_line+0x39a>
			}
		//}
}
 8001e36:	bf00      	nop
 8001e38:	3788      	adds	r7, #136	; 0x88
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	0800eb14 	.word	0x0800eb14
 8001e44:	cccccccd 	.word	0xcccccccd
 8001e48:	20000728 	.word	0x20000728
 8001e4c:	0800eb18 	.word	0x0800eb18

08001e50 <parsing_GPVTG_line>:


//--------------------------------------------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b098      	sub	sp, #96	; 0x60
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001e58:	2331      	movs	r3, #49	; 0x31
 8001e5a:	653b      	str	r3, [r7, #80]	; 0x50
	memset(nmeaSnt, 0, size);
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f008 ff39 	bl	800acdc <memset>

	char str[6]={0};
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	809a      	strh	r2, [r3, #4]

	//Copy to  "*" from str_GPVTG in nmeaSnt
	int i=0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e7c:	e00c      	b.n	8001e98 <parsing_GPVTG_line+0x48>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 8001e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	7819      	ldrb	r1, [r3, #0]
 8001e86:	f107 0218 	add.w	r2, r7, #24
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8c:	4413      	add	r3, r2
 8001e8e:	460a      	mov	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e94:	3301      	adds	r3, #1
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea2:	d002      	beq.n	8001eaa <parsing_GPVTG_line+0x5a>
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea6:	2b31      	cmp	r3, #49	; 0x31
 8001ea8:	dde9      	ble.n	8001e7e <parsing_GPVTG_line+0x2e>
	}

	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2100      	movs	r1, #0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001eb8:	212a      	movs	r1, #42	; 0x2a
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f009 f813 	bl	800aee6 <strchr>
 8001ec0:	64f8      	str	r0, [r7, #76]	; 0x4c
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73bb      	strb	r3, [r7, #14]

//	// PROBLEM: Checksum !=

	i = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
	int count = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t speed_data_readed = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(speed_data_readed == 1)
 8001ede:	e07d      	b.n	8001fdc <parsing_GPVTG_line+0x18c>
	{
		if(nmeaSnt[i] == ',')
 8001ee0:	f107 0218 	add.w	r2, r7, #24
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b2c      	cmp	r3, #44	; 0x2c
 8001eec:	d102      	bne.n	8001ef4 <parsing_GPVTG_line+0xa4>
		{
			count++;
 8001eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if(count == 7)				// Find seven part (speed)
 8001ef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d16d      	bne.n	8001fd6 <parsing_GPVTG_line+0x186>
		{
			i++;
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	3301      	adds	r3, #1
 8001efe:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t k = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			char speed_test_variable[4]={0};    // for debug
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
			uint8_t error = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			do
			{
				//GPS_data.speed[k] = nmeaSnt[i+k];
				if(((nmeaSnt[i+k]-48) >= 0) && ((nmeaSnt[i+k]-48)  <= 9))   // Ok
 8001f10:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f16:	4413      	add	r3, r2
 8001f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001f22:	3b30      	subs	r3, #48	; 0x30
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db1c      	blt.n	8001f62 <parsing_GPVTG_line+0x112>
 8001f28:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2e:	4413      	add	r3, r2
 8001f30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f34:	4413      	add	r3, r2
 8001f36:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001f3a:	3b30      	subs	r3, #48	; 0x30
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	dc10      	bgt.n	8001f62 <parsing_GPVTG_line+0x112>
				{
					speed_test_variable[k] = nmeaSnt[i+k];
 8001f40:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f46:	441a      	add	r2, r3
 8001f48:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f4c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f50:	440a      	add	r2, r1
 8001f52:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8001f56:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001f60:	e009      	b.n	8001f76 <parsing_GPVTG_line+0x126>
				}
				else	// if error value. delete value.
				{
					// Error
					error = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
					memset(speed_test_variable, 0 ,sizeof(speed_test_variable));
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f008 feb3 	bl	800acdc <memset>
				}
				k++;
 8001f76:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			}while ((k < 3) && (nmeaSnt[i+k] != '.') && (error != 1));    // Problem where !!!!
 8001f80:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d80e      	bhi.n	8001fa6 <parsing_GPVTG_line+0x156>
 8001f88:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8e:	4413      	add	r3, r2
 8001f90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f94:	4413      	add	r3, r2
 8001f96:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f9c:	d003      	beq.n	8001fa6 <parsing_GPVTG_line+0x156>
 8001f9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d1b4      	bne.n	8001f10 <parsing_GPVTG_line+0xc0>


			// Save in global variable
			memset(str, 0 , sizeof(str));
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	2206      	movs	r2, #6
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f008 fe94 	bl	800acdc <memset>
			//sprintf(str,"%s", GPS_data.speed);
			sprintf(str,"%s", speed_test_variable);
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f008 ff9e 	bl	800af00 <strcpy>
			strcpy(gps_speed, str);
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <parsing_GPVTG_line+0x1a0>)
 8001fcc:	f008 ff98 	bl	800af00 <strcpy>

			speed_data_readed = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		i++;
 8001fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd8:	3301      	adds	r3, #1
 8001fda:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(speed_data_readed == 1)
 8001fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f43f af7d 	beq.w	8001ee0 <parsing_GPVTG_line+0x90>
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	3760      	adds	r7, #96	; 0x60
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000704 	.word	0x20000704

08001ff4 <parsing_GPS>:
// Parsing only three lines from NMIA
// 1. From GPGLL - coordinates
// 2. From GPGGA - number of satellites
// 3. From GPVTG - speed
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	6018      	str	r0, [r3, #0]
 8002000:	463b      	mov	r3, r7
 8002002:	6019      	str	r1, [r3, #0]
	char buffStr[512];										 // Main buffer in this function

	if(flag == 1)    										 // If data from GPS module in buffer
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <parsing_GPS+0xcc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d153      	bne.n	80020b4 <parsing_GPS+0xc0>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f008 fe60 	bl	800acdc <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	f107 020c 	add.w	r2, r7, #12
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	4610      	mov	r0, r2
 8002026:	f008 ff6b 	bl	800af00 <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL in buffStr
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4925      	ldr	r1, [pc, #148]	; (80020c4 <parsing_GPS+0xd0>)
 8002030:	4618      	mov	r0, r3
 8002032:	f008 ff6d 	bl	800af10 <strstr>
 8002036:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 800203a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <parsing_GPS+0x62>
		{
			parsing_GPGLL_line(str_GPGLL);
 8002042:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8002046:	f7ff fa6b 	bl	8001520 <parsing_GPGLL_line>
			receive_gps_signal++;
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <parsing_GPS+0xd4>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <parsing_GPS+0xd4>)
 8002054:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPGGA in buffStr
		str_GPGGA = strstr(buffStr, "$GPGGA");    //$GPGGA,154423.00,4948.74034,N,02359.70944,E,1,05A,154422.00,4948.74052,N,02359.70973,E,1,05,3.71,351.1,M,34.8,M,,*53\r\n
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	491c      	ldr	r1, [pc, #112]	; (80020cc <parsing_GPS+0xd8>)
 800205c:	4618      	mov	r0, r3
 800205e:	f008 ff57 	bl	800af10 <strstr>
 8002062:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 8002066:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <parsing_GPS+0x8e>
		{
			parsing_GPGGA_line(str_GPGGA);
 800206e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8002072:	f7ff fcfd 	bl	8001a70 <parsing_GPGGA_line>
			receive_gps_signal++;
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <parsing_GPS+0xd4>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <parsing_GPS+0xd4>)
 8002080:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPVTG in buffStr
		str_GPVTG = strstr(buffStr, "$GPVTG");    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	4912      	ldr	r1, [pc, #72]	; (80020d0 <parsing_GPS+0xdc>)
 8002088:	4618      	mov	r0, r3
 800208a:	f008 ff41 	bl	800af10 <strstr>
 800208e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 8002092:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <parsing_GPS+0xba>
		{
			parsing_GPVTG_line(str_GPVTG);
 800209a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800209e:	f7ff fed7 	bl	8001e50 <parsing_GPVTG_line>
			receive_gps_signal++;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <parsing_GPS+0xd4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <parsing_GPS+0xd4>)
 80020ac:	701a      	strb	r2, [r3, #0]
		}

		flag = 0;			// Flag = 0 means: Data was readed
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <parsing_GPS+0xcc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
	}
}
 80020b4:	bf00      	nop
 80020b6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200002c9 	.word	0x200002c9
 80020c4:	0800eb1c 	.word	0x0800eb1c
 80020c8:	2000027c 	.word	0x2000027c
 80020cc:	0800eb24 	.word	0x0800eb24
 80020d0:	0800eb2c 	.word	0x0800eb2c

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4906      	ldr	r1, [pc, #24]	; (8002108 <__NVIC_EnableIRQ+0x34>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100

0800210c <DelayMicro>:

uint8_t GSM_INIT = 0;

// -------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <DelayMicro+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <DelayMicro+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0ddb      	lsrs	r3, r3, #23
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--);
 8002128:	bf00      	nop
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1fa      	bne.n	800212a <DelayMicro+0x1e>
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000064 	.word	0x20000064
 8002144:	ee9bfab5 	.word	0xee9bfab5

08002148 <init_GSM_uart_comunication>:

// -------------------------------------------------------------------
void init_GSM_uart_comunication(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
		// Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
		USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <init_GSM_uart_comunication+0x20>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a05      	ldr	r2, [pc, #20]	; (8002168 <init_GSM_uart_comunication+0x20>)
 8002152:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002156:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ (USART1_IRQn);
 8002158:	2025      	movs	r0, #37	; 0x25
 800215a:	f7ff ffbb 	bl	80020d4 <__NVIC_EnableIRQ>
		HAL_Delay(100);
 800215e:	2064      	movs	r0, #100	; 0x64
 8002160:	f004 fab0 	bl	80066c4 <HAL_Delay>
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800

0800216c <init_gsm_module>:
// -------------------------------------------------------------------
int init_gsm_module(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
		// 1. Send command "AT" answer "OK"
		// 2. Send command "AT+CSQ" answer "+CSQ: 23,99" and "OK". 23,99 value can be from 0 to 31.
		// 3. Send command "AT+CCID" answer "89380062300517128558" and "OK"
		// 4. Send command "AT+CREG?" answer "+CREG: 1,1" and "OK"

	uint8_t answer_1 = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
	uint8_t answer_2 = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	73bb      	strb	r3, [r7, #14]
	uint8_t answer_3 = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	737b      	strb	r3, [r7, #13]
	uint8_t answer_4 = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	733b      	strb	r3, [r7, #12]

	// Whaite only first time init
	static bool init_GSM = false;
	if (init_GSM == false)
 8002182:	4b90      	ldr	r3, [pc, #576]	; (80023c4 <init_gsm_module+0x258>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <init_gsm_module+0x2c>
	{
		HAL_Delay(8000);     // Must be near 7-8 sec
 8002190:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002194:	f004 fa96 	bl	80066c4 <HAL_Delay>
	}
	init_GSM = true;
 8002198:	4b8a      	ldr	r3, [pc, #552]	; (80023c4 <init_gsm_module+0x258>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
	//

	//HAL_Delay(1000);     // Must be near 7-8 sec

	uint32_t id =0;               				 // Variable for timeout
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
	bool no_answer = false;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
	ansver_flag =0;
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <init_gsm_module+0x25c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]

	int timeout_counter = 10000;    //10000
 80021ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80021b0:	603b      	str	r3, [r7, #0]

	// 1. Send command " Turn off echo" ///////////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 10000);
 80021b2:	4886      	ldr	r0, [pc, #536]	; (80023cc <init_gsm_module+0x260>)
 80021b4:	f7fd ffcc 	bl	8000150 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80021c0:	4982      	ldr	r1, [pc, #520]	; (80023cc <init_gsm_module+0x260>)
 80021c2:	4883      	ldr	r0, [pc, #524]	; (80023d0 <init_gsm_module+0x264>)
 80021c4:	f007 ff68 	bl	800a098 <HAL_UART_Transmit>

    // Waite for answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80021c8:	e020      	b.n	800220c <init_gsm_module+0xa0>
	{
		id++;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 80021d0:	2064      	movs	r0, #100	; 0x64
 80021d2:	f7ff ff9b 	bl	800210c <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 80021d6:	4b7c      	ldr	r3, [pc, #496]	; (80023c8 <init_gsm_module+0x25c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d110      	bne.n	8002200 <init_gsm_module+0x94>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 80021de:	497d      	ldr	r1, [pc, #500]	; (80023d4 <init_gsm_module+0x268>)
 80021e0:	487d      	ldr	r0, [pc, #500]	; (80023d8 <init_gsm_module+0x26c>)
 80021e2:	f008 fe95 	bl	800af10 <strstr>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <init_gsm_module+0x94>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80021ec:	223c      	movs	r2, #60	; 0x3c
 80021ee:	2100      	movs	r1, #0
 80021f0:	4879      	ldr	r0, [pc, #484]	; (80023d8 <init_gsm_module+0x26c>)
 80021f2:	f008 fd73 	bl	800acdc <memset>
				answer_1 = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
				ansver_flag = 1;
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <init_gsm_module+0x25c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d301      	bcc.n	800220c <init_gsm_module+0xa0>
		{
			no_answer = true;               // Out from waiting answer
 8002208:	2301      	movs	r3, #1
 800220a:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800220c:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <init_gsm_module+0x25c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d009      	beq.n	8002228 <init_gsm_module+0xbc>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	429a      	cmp	r2, r3
 800221a:	d805      	bhi.n	8002228 <init_gsm_module+0xbc>
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1d0      	bne.n	80021ca <init_gsm_module+0x5e>
		}
	}

    HAL_Delay(DELAY);
 8002228:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <init_gsm_module+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fa49 	bl	80066c4 <HAL_Delay>
    ////////////////////////////////////////////////////////////////

	// 2. Send command "signal reception quality" //////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 1000);
 8002232:	486b      	ldr	r0, [pc, #428]	; (80023e0 <init_gsm_module+0x274>)
 8002234:	f7fd ff8c 	bl	8000150 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	b29a      	uxth	r2, r3
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	4967      	ldr	r1, [pc, #412]	; (80023e0 <init_gsm_module+0x274>)
 8002242:	4863      	ldr	r0, [pc, #396]	; (80023d0 <init_gsm_module+0x264>)
 8002244:	f007 ff28 	bl	800a098 <HAL_UART_Transmit>

	id = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 800224c:	2300      	movs	r3, #0
 800224e:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002250:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <init_gsm_module+0x25c>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002256:	e020      	b.n	800229a <init_gsm_module+0x12e>
	{
		id++;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 800225e:	2064      	movs	r0, #100	; 0x64
 8002260:	f7ff ff54 	bl	800210c <DelayMicro>

		if(ansver_flag ==1)
 8002264:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <init_gsm_module+0x25c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d110      	bne.n	800228e <init_gsm_module+0x122>
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
 800226c:	495d      	ldr	r1, [pc, #372]	; (80023e4 <init_gsm_module+0x278>)
 800226e:	485a      	ldr	r0, [pc, #360]	; (80023d8 <init_gsm_module+0x26c>)
 8002270:	f008 fe4e 	bl	800af10 <strstr>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <init_gsm_module+0x122>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800227a:	223c      	movs	r2, #60	; 0x3c
 800227c:	2100      	movs	r1, #0
 800227e:	4856      	ldr	r0, [pc, #344]	; (80023d8 <init_gsm_module+0x26c>)
 8002280:	f008 fd2c 	bl	800acdc <memset>
				answer_2 = 1;
 8002284:	2301      	movs	r3, #1
 8002286:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8002288:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <init_gsm_module+0x25c>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d301      	bcc.n	800229a <init_gsm_module+0x12e>
		{
			no_answer = true;               // Out from waiting answer
 8002296:	2301      	movs	r3, #1
 8002298:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <init_gsm_module+0x25c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d009      	beq.n	80022b6 <init_gsm_module+0x14a>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d805      	bhi.n	80022b6 <init_gsm_module+0x14a>
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f083 0301 	eor.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1d0      	bne.n	8002258 <init_gsm_module+0xec>
		}
	}

	// Waite for answer "OK" after  "+CSQ"
	id = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80022ba:	2300      	movs	r3, #0
 80022bc:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80022be:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <init_gsm_module+0x25c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80022c4:	e020      	b.n	8002308 <init_gsm_module+0x19c>
	{
		id++;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 80022cc:	200a      	movs	r0, #10
 80022ce:	f7ff ff1d 	bl	800210c <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <init_gsm_module+0x25c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d110      	bne.n	80022fc <init_gsm_module+0x190>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 80022da:	493e      	ldr	r1, [pc, #248]	; (80023d4 <init_gsm_module+0x268>)
 80022dc:	483e      	ldr	r0, [pc, #248]	; (80023d8 <init_gsm_module+0x26c>)
 80022de:	f008 fe17 	bl	800af10 <strstr>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <init_gsm_module+0x190>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80022e8:	223c      	movs	r2, #60	; 0x3c
 80022ea:	2100      	movs	r1, #0
 80022ec:	483a      	ldr	r0, [pc, #232]	; (80023d8 <init_gsm_module+0x26c>)
 80022ee:	f008 fcf5 	bl	800acdc <memset>
				answer_2 = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <init_gsm_module+0x25c>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d301      	bcc.n	8002308 <init_gsm_module+0x19c>
		{
			no_answer = true;               // Out from waiting answer
 8002304:	2301      	movs	r3, #1
 8002306:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <init_gsm_module+0x25c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d009      	beq.n	8002324 <init_gsm_module+0x1b8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d805      	bhi.n	8002324 <init_gsm_module+0x1b8>
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1d0      	bne.n	80022c6 <init_gsm_module+0x15a>
		}
	}
	HAL_Delay(DELAY);
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <init_gsm_module+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f004 f9cb 	bl	80066c4 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	// 3. Send command "signal reception quality" /////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 1000);
 800232e:	482e      	ldr	r0, [pc, #184]	; (80023e8 <init_gsm_module+0x27c>)
 8002330:	f7fd ff0e 	bl	8000150 <strlen>
 8002334:	4603      	mov	r3, r0
 8002336:	b29a      	uxth	r2, r3
 8002338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233c:	492a      	ldr	r1, [pc, #168]	; (80023e8 <init_gsm_module+0x27c>)
 800233e:	4824      	ldr	r0, [pc, #144]	; (80023d0 <init_gsm_module+0x264>)
 8002340:	f007 feaa 	bl	800a098 <HAL_UART_Transmit>

	id = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002348:	2300      	movs	r3, #0
 800234a:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <init_gsm_module+0x25c>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002352:	e020      	b.n	8002396 <init_gsm_module+0x22a>
	{
		id++;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 800235a:	2064      	movs	r0, #100	; 0x64
 800235c:	f7ff fed6 	bl	800210c <DelayMicro>

		if(ansver_flag ==1)
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <init_gsm_module+0x25c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d110      	bne.n	800238a <init_gsm_module+0x21e>
		{
			if (strstr(GSM_RX_buffer, "89380"))
 8002368:	4920      	ldr	r1, [pc, #128]	; (80023ec <init_gsm_module+0x280>)
 800236a:	481b      	ldr	r0, [pc, #108]	; (80023d8 <init_gsm_module+0x26c>)
 800236c:	f008 fdd0 	bl	800af10 <strstr>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <init_gsm_module+0x21e>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002376:	223c      	movs	r2, #60	; 0x3c
 8002378:	2100      	movs	r1, #0
 800237a:	4817      	ldr	r0, [pc, #92]	; (80023d8 <init_gsm_module+0x26c>)
 800237c:	f008 fcae 	bl	800acdc <memset>
				answer_3 = 1;
 8002380:	2301      	movs	r3, #1
 8002382:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <init_gsm_module+0x25c>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	d301      	bcc.n	8002396 <init_gsm_module+0x22a>
		{
			no_answer = true;               // Out from waiting answer
 8002392:	2301      	movs	r3, #1
 8002394:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <init_gsm_module+0x25c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d009      	beq.n	80023b2 <init_gsm_module+0x246>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d805      	bhi.n	80023b2 <init_gsm_module+0x246>
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f083 0301 	eor.w	r3, r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1d0      	bne.n	8002354 <init_gsm_module+0x1e8>
		}
	}

	// Waite for answer "OK"
	id = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80023b6:	2300      	movs	r3, #0
 80023b8:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80023ba:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <init_gsm_module+0x25c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80023c0:	e037      	b.n	8002432 <init_gsm_module+0x2c6>
 80023c2:	bf00      	nop
 80023c4:	200002be 	.word	0x200002be
 80023c8:	200002bc 	.word	0x200002bc
 80023cc:	20000004 	.word	0x20000004
 80023d0:	20000aa8 	.word	0x20000aa8
 80023d4:	0800eb34 	.word	0x0800eb34
 80023d8:	20000280 	.word	0x20000280
 80023dc:	20000000 	.word	0x20000000
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	0800eb38 	.word	0x0800eb38
 80023e8:	20000018 	.word	0x20000018
 80023ec:	0800eb40 	.word	0x0800eb40
	{
		id++;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 80023f6:	200a      	movs	r0, #10
 80023f8:	f7ff fe88 	bl	800210c <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 80023fc:	4b5f      	ldr	r3, [pc, #380]	; (800257c <init_gsm_module+0x410>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d110      	bne.n	8002426 <init_gsm_module+0x2ba>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002404:	495e      	ldr	r1, [pc, #376]	; (8002580 <init_gsm_module+0x414>)
 8002406:	485f      	ldr	r0, [pc, #380]	; (8002584 <init_gsm_module+0x418>)
 8002408:	f008 fd82 	bl	800af10 <strstr>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <init_gsm_module+0x2ba>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002412:	223c      	movs	r2, #60	; 0x3c
 8002414:	2100      	movs	r1, #0
 8002416:	485b      	ldr	r0, [pc, #364]	; (8002584 <init_gsm_module+0x418>)
 8002418:	f008 fc60 	bl	800acdc <memset>
				answer_3 = 1;
 800241c:	2301      	movs	r3, #1
 800241e:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8002420:	4b56      	ldr	r3, [pc, #344]	; (800257c <init_gsm_module+0x410>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	d301      	bcc.n	8002432 <init_gsm_module+0x2c6>
		{
			no_answer = true;               // Out from waiting answer
 800242e:	2301      	movs	r3, #1
 8002430:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002432:	4b52      	ldr	r3, [pc, #328]	; (800257c <init_gsm_module+0x410>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d009      	beq.n	800244e <init_gsm_module+0x2e2>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d805      	bhi.n	800244e <init_gsm_module+0x2e2>
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1d0      	bne.n	80023f0 <init_gsm_module+0x284>
		}
	}
	HAL_Delay(DELAY);
 800244e:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <init_gsm_module+0x41c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f936 	bl	80066c4 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	// 4. Send command "Check registration in network"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CREG, strlen(AT_CREG), 1000);
 8002458:	484c      	ldr	r0, [pc, #304]	; (800258c <init_gsm_module+0x420>)
 800245a:	f7fd fe79 	bl	8000150 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	b29a      	uxth	r2, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	4949      	ldr	r1, [pc, #292]	; (800258c <init_gsm_module+0x420>)
 8002468:	4849      	ldr	r0, [pc, #292]	; (8002590 <init_gsm_module+0x424>)
 800246a:	f007 fe15 	bl	800a098 <HAL_UART_Transmit>

	id = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <init_gsm_module+0x410>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800247c:	e020      	b.n	80024c0 <init_gsm_module+0x354>
	{
		id++;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	f7ff fe41 	bl	800210c <DelayMicro>

		if(ansver_flag == 1)
 800248a:	4b3c      	ldr	r3, [pc, #240]	; (800257c <init_gsm_module+0x410>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d110      	bne.n	80024b4 <init_gsm_module+0x348>
		{
			if (strstr(GSM_RX_buffer, "+CREG: 0,1"))
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <init_gsm_module+0x428>)
 8002494:	483b      	ldr	r0, [pc, #236]	; (8002584 <init_gsm_module+0x418>)
 8002496:	f008 fd3b 	bl	800af10 <strstr>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <init_gsm_module+0x348>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80024a0:	223c      	movs	r2, #60	; 0x3c
 80024a2:	2100      	movs	r1, #0
 80024a4:	4837      	ldr	r0, [pc, #220]	; (8002584 <init_gsm_module+0x418>)
 80024a6:	f008 fc19 	bl	800acdc <memset>
				answer_4 = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <init_gsm_module+0x410>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d301      	bcc.n	80024c0 <init_gsm_module+0x354>
		{
			no_answer = true;               // Out from waiting answer
 80024bc:	2301      	movs	r3, #1
 80024be:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <init_gsm_module+0x410>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d009      	beq.n	80024dc <init_gsm_module+0x370>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d805      	bhi.n	80024dc <init_gsm_module+0x370>
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1d0      	bne.n	800247e <init_gsm_module+0x312>
		}
	}

	// Waite for answer "OK"
	id = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80024e0:	2300      	movs	r3, #0
 80024e2:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <init_gsm_module+0x410>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80024ea:	e020      	b.n	800252e <init_gsm_module+0x3c2>
	{
		id++;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 80024f2:	200a      	movs	r0, #10
 80024f4:	f7ff fe0a 	bl	800210c <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <init_gsm_module+0x410>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d110      	bne.n	8002522 <init_gsm_module+0x3b6>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002500:	491f      	ldr	r1, [pc, #124]	; (8002580 <init_gsm_module+0x414>)
 8002502:	4820      	ldr	r0, [pc, #128]	; (8002584 <init_gsm_module+0x418>)
 8002504:	f008 fd04 	bl	800af10 <strstr>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <init_gsm_module+0x3b6>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800250e:	223c      	movs	r2, #60	; 0x3c
 8002510:	2100      	movs	r1, #0
 8002512:	481c      	ldr	r0, [pc, #112]	; (8002584 <init_gsm_module+0x418>)
 8002514:	f008 fbe2 	bl	800acdc <memset>
				answer_4 = 1;
 8002518:	2301      	movs	r3, #1
 800251a:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <init_gsm_module+0x410>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d301      	bcc.n	800252e <init_gsm_module+0x3c2>
		{
			no_answer = true;               // Out from waiting answer
 800252a:	2301      	movs	r3, #1
 800252c:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <init_gsm_module+0x410>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d009      	beq.n	800254a <init_gsm_module+0x3de>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d805      	bhi.n	800254a <init_gsm_module+0x3de>
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1d0      	bne.n	80024ec <init_gsm_module+0x380>
		}
	}
	HAL_Delay(DELAY);
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <init_gsm_module+0x41c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 f8b8 	bl	80066c4 <HAL_Delay>
	////////////////////////////////////////////////////////////////


	if(answer_1 && answer_2 && answer_3 && answer_4)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <init_gsm_module+0x404>
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <init_gsm_module+0x404>
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <init_gsm_module+0x404>
 8002566:	7b3b      	ldrb	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <init_gsm_module+0x404>
	{
		return 0;            // If init OK
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <init_gsm_module+0x406>
	}
	else
	{
		return 1;
 8002570:	2301      	movs	r3, #1
	}
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200002bc 	.word	0x200002bc
 8002580:	0800eb34 	.word	0x0800eb34
 8002584:	20000280 	.word	0x20000280
 8002588:	20000000 	.word	0x20000000
 800258c:	20000024 	.word	0x20000024
 8002590:	20000aa8 	.word	0x20000aa8
 8002594:	0800eb48 	.word	0x0800eb48

08002598 <call_on_mu_number>:
// -------------------------------------------------------------------
int call_on_mu_number(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 80025a2:	2300      	movs	r3, #0
 80025a4:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 80025a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80025aa:	607b      	str	r3, [r7, #4]
	//

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_to_my_mobile_number, strlen(call_to_my_mobile_number), 1000);
 80025ac:	4822      	ldr	r0, [pc, #136]	; (8002638 <call_on_mu_number+0xa0>)
 80025ae:	f7fd fdcf 	bl	8000150 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	491f      	ldr	r1, [pc, #124]	; (8002638 <call_on_mu_number+0xa0>)
 80025bc:	481f      	ldr	r0, [pc, #124]	; (800263c <call_on_mu_number+0xa4>)
 80025be:	f007 fd6b 	bl	800a098 <HAL_UART_Transmit>

	ansver_flag = 0;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <call_on_mu_number+0xa8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 80025c8:	2300      	movs	r3, #0
 80025ca:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80025cc:	e022      	b.n	8002614 <call_on_mu_number+0x7c>
	{
		id++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
	    DelayMicro(10);
 80025d4:	200a      	movs	r0, #10
 80025d6:	f7ff fd99 	bl	800210c <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <call_on_mu_number+0xa8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d110      	bne.n	8002604 <call_on_mu_number+0x6c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 80025e2:	4918      	ldr	r1, [pc, #96]	; (8002644 <call_on_mu_number+0xac>)
 80025e4:	4818      	ldr	r0, [pc, #96]	; (8002648 <call_on_mu_number+0xb0>)
 80025e6:	f008 fc93 	bl	800af10 <strstr>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <call_on_mu_number+0x6c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80025f0:	223c      	movs	r2, #60	; 0x3c
 80025f2:	2100      	movs	r1, #0
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <call_on_mu_number+0xb0>)
 80025f6:	f008 fb71 	bl	800acdc <memset>
	    		ansver_flag = 1;
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <call_on_mu_number+0xa8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
	    		return 1;
 8002600:	2301      	movs	r3, #1
 8002602:	e015      	b.n	8002630 <call_on_mu_number+0x98>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d303      	bcc.n	8002614 <call_on_mu_number+0x7c>
	    {
	    	no_answer = true;               // Out from waiting answer
 800260c:	2301      	movs	r3, #1
 800260e:	72fb      	strb	r3, [r7, #11]
	    	return 0;
 8002610:	2300      	movs	r3, #0
 8002612:	e00d      	b.n	8002630 <call_on_mu_number+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <call_on_mu_number+0xa8>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d009      	beq.n	8002630 <call_on_mu_number+0x98>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	429a      	cmp	r2, r3
 8002622:	d805      	bhi.n	8002630 <call_on_mu_number+0x98>
 8002624:	7afb      	ldrb	r3, [r7, #11]
 8002626:	f083 0301 	eor.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ce      	bne.n	80025ce <call_on_mu_number+0x36>
	    }
	}
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000040 	.word	0x20000040
 800263c:	20000aa8 	.word	0x20000aa8
 8002640:	200002bc 	.word	0x200002bc
 8002644:	0800eb34 	.word	0x0800eb34
 8002648:	20000280 	.word	0x20000280

0800264c <call_on_number>:
// -------------------------------------------------------------------

int call_on_number(char *number, uint8_t size_number)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool no_answer = false;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	int timeout_counter = 10000;
 8002662:	f242 7310 	movw	r3, #10000	; 0x2710
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
	//
	//char call_to_my_mobile_number[]="ATD+380931482354;\r\n";
	char call_command[21]="ATD+ ";
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <call_on_number+0x174>)
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002672:	6018      	str	r0, [r3, #0]
 8002674:	3304      	adds	r3, #4
 8002676:	8019      	strh	r1, [r3, #0]
 8002678:	f107 0312 	add.w	r3, r7, #18
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	f8c3 200b 	str.w	r2, [r3, #11]
	char end_call_command[] = ";\r\n";
 8002688:	4b4e      	ldr	r3, [pc, #312]	; (80027c4 <call_on_number+0x178>)
 800268a:	60bb      	str	r3, [r7, #8]
	// 1. Finr end of string call_command
	uint8_t i = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 8002692:	e004      	b.n	800269e <call_on_number+0x52>
	{
		i++;
 8002694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002698:	3301      	adds	r3, #1
 800269a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 800269e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80026a6:	4413      	add	r3, r2
 80026a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f1      	bne.n	8002694 <call_on_number+0x48>
	}
	// 2. Add number to end of dtring
	uint8_t k = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 80026b6:	e015      	b.n	80026e4 <call_on_number+0x98>
	{
		call_command[i] = number[k];
 80026b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	441a      	add	r2, r3
 80026c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026ca:	440b      	add	r3, r1
 80026cc:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 80026d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026d4:	3301      	adds	r3, #1
 80026d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		k++;
 80026da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80026de:	3301      	adds	r3, #1
 80026e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 80026e4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d1e4      	bne.n	80026b8 <call_on_number+0x6c>
	}
	// 3. Add ';\r\n' to the end of string
	for(k = 0; k <= 4; k ++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80026f4:	e017      	b.n	8002726 <call_on_number+0xda>
	{
		call_command[i] = end_call_command[k];
 80026f6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80026fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002702:	440a      	add	r2, r1
 8002704:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002708:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800270c:	440b      	add	r3, r1
 800270e:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 8002712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002716:	3301      	adds	r3, #1
 8002718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for(k = 0; k <= 4; k ++)
 800271c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002720:	3301      	adds	r3, #1
 8002722:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002726:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800272a:	2b04      	cmp	r3, #4
 800272c:	d9e3      	bls.n	80026f6 <call_on_number+0xaa>
	}

	// 4. Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_command, strlen(call_command), 1000);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fd0c 	bl	8000150 <strlen>
 8002738:	4603      	mov	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	f107 010c 	add.w	r1, r7, #12
 8002740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002744:	4820      	ldr	r0, [pc, #128]	; (80027c8 <call_on_number+0x17c>)
 8002746:	f007 fca7 	bl	800a098 <HAL_UART_Transmit>

	ansver_flag = 0;
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <call_on_number+0x180>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002750:	e023      	b.n	800279a <call_on_number+0x14e>
	{
		id++;
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	3301      	adds	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
	    DelayMicro(10);
 8002758:	200a      	movs	r0, #10
 800275a:	f7ff fcd7 	bl	800210c <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <call_on_number+0x180>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d110      	bne.n	8002788 <call_on_number+0x13c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 8002766:	491a      	ldr	r1, [pc, #104]	; (80027d0 <call_on_number+0x184>)
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <call_on_number+0x188>)
 800276a:	f008 fbd1 	bl	800af10 <strstr>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <call_on_number+0x13c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002774:	223c      	movs	r2, #60	; 0x3c
 8002776:	2100      	movs	r1, #0
 8002778:	4816      	ldr	r0, [pc, #88]	; (80027d4 <call_on_number+0x188>)
 800277a:	f008 faaf 	bl	800acdc <memset>
	    		ansver_flag = 1;
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <call_on_number+0x180>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
	    		return 1;
 8002784:	2301      	movs	r3, #1
 8002786:	e017      	b.n	80027b8 <call_on_number+0x16c>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278c:	429a      	cmp	r2, r3
 800278e:	d304      	bcc.n	800279a <call_on_number+0x14e>
	    {
	    	no_answer = true;               // Out from waiting answer
 8002790:	2301      	movs	r3, #1
 8002792:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	    	return 0;
 8002796:	2300      	movs	r3, #0
 8002798:	e00e      	b.n	80027b8 <call_on_number+0x16c>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <call_on_number+0x180>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d00a      	beq.n	80027b8 <call_on_number+0x16c>
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d806      	bhi.n	80027b8 <call_on_number+0x16c>
 80027aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1cc      	bne.n	8002752 <call_on_number+0x106>
	    }
	}
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3730      	adds	r7, #48	; 0x30
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	0800eb54 	.word	0x0800eb54
 80027c4:	000a0d3b 	.word	0x000a0d3b
 80027c8:	20000aa8 	.word	0x20000aa8
 80027cc:	200002bc 	.word	0x200002bc
 80027d0:	0800eb34 	.word	0x0800eb34
 80027d4:	20000280 	.word	0x20000280

080027d8 <end_of_call>:
// -------------------------------------------------------------------

// -------------------------------------------------------------------
int end_of_call(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
	////////////////////////
		uint32_t id =0;               				 // Variable for timeout
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
		bool no_answer = false;
 80027e2:	2300      	movs	r3, #0
 80027e4:	72fb      	strb	r3, [r7, #11]
		int timeout_counter = 10000;
 80027e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80027ea:	607b      	str	r3, [r7, #4]
		//

		// Call on number
		HAL_UART_Transmit(&huart1 , (uint8_t *)AT_END_OF_CALL, strlen(AT_END_OF_CALL), 1000);
 80027ec:	4822      	ldr	r0, [pc, #136]	; (8002878 <end_of_call+0xa0>)
 80027ee:	f7fd fcaf 	bl	8000150 <strlen>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <end_of_call+0xa0>)
 80027fc:	481f      	ldr	r0, [pc, #124]	; (800287c <end_of_call+0xa4>)
 80027fe:	f007 fc4b 	bl	800a098 <HAL_UART_Transmit>

		ansver_flag = 0;
 8002802:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <end_of_call+0xa8>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
		no_answer = false;
 8002808:	2300      	movs	r3, #0
 800280a:	72fb      	strb	r3, [r7, #11]

		while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800280c:	e022      	b.n	8002854 <end_of_call+0x7c>
		{
			id++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
		    DelayMicro(100);
 8002814:	2064      	movs	r0, #100	; 0x64
 8002816:	f7ff fc79 	bl	800210c <DelayMicro>

		    if(ansver_flag ==1)					// waite flag from interrupt
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <end_of_call+0xa8>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d110      	bne.n	8002844 <end_of_call+0x6c>
		    {
		    	if (strstr(GSM_RX_buffer, "OK"))
 8002822:	4918      	ldr	r1, [pc, #96]	; (8002884 <end_of_call+0xac>)
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <end_of_call+0xb0>)
 8002826:	f008 fb73 	bl	800af10 <strstr>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <end_of_call+0x6c>
		    	{
		    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002830:	223c      	movs	r2, #60	; 0x3c
 8002832:	2100      	movs	r1, #0
 8002834:	4814      	ldr	r0, [pc, #80]	; (8002888 <end_of_call+0xb0>)
 8002836:	f008 fa51 	bl	800acdc <memset>
		    		ansver_flag = 1;
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <end_of_call+0xa8>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
		    		return 1;
 8002840:	2301      	movs	r3, #1
 8002842:	e015      	b.n	8002870 <end_of_call+0x98>
		    	}

		    }

		    if(id  >= timeout_counter)						// Timeout is goon
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d303      	bcc.n	8002854 <end_of_call+0x7c>
		    {
		    	no_answer = true;               // Out from waiting answer
 800284c:	2301      	movs	r3, #1
 800284e:	72fb      	strb	r3, [r7, #11]
		    	return 0;
 8002850:	2300      	movs	r3, #0
 8002852:	e00d      	b.n	8002870 <end_of_call+0x98>
		while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <end_of_call+0xa8>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d009      	beq.n	8002870 <end_of_call+0x98>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d805      	bhi.n	8002870 <end_of_call+0x98>
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ce      	bne.n	800280e <end_of_call+0x36>
		    }

		}

}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000030 	.word	0x20000030
 800287c:	20000aa8 	.word	0x20000aa8
 8002880:	200002bc 	.word	0x200002bc
 8002884:	0800eb34 	.word	0x0800eb34
 8002888:	20000280 	.word	0x20000280

0800288c <accepts_on_incomming_call>:
// -------------------------------------------------------------------
int accepts_on_incomming_call(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 8002896:	2300      	movs	r3, #0
 8002898:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 800289a:	f242 7310 	movw	r3, #10000	; 0x2710
 800289e:	607b      	str	r3, [r7, #4]
	//

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)ACCEPTS_INCOMMING_CALL, strlen(ACCEPTS_INCOMMING_CALL), 1000);
 80028a0:	4822      	ldr	r0, [pc, #136]	; (800292c <accepts_on_incomming_call+0xa0>)
 80028a2:	f7fd fc55 	bl	8000150 <strlen>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	491f      	ldr	r1, [pc, #124]	; (800292c <accepts_on_incomming_call+0xa0>)
 80028b0:	481f      	ldr	r0, [pc, #124]	; (8002930 <accepts_on_incomming_call+0xa4>)
 80028b2:	f007 fbf1 	bl	800a098 <HAL_UART_Transmit>

	ansver_flag = 0;
 80028b6:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <accepts_on_incomming_call+0xa8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 80028bc:	2300      	movs	r3, #0
 80028be:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80028c0:	e022      	b.n	8002908 <accepts_on_incomming_call+0x7c>
	{
		id++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
		DelayMicro(100);
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	f7ff fc1f 	bl	800210c <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <accepts_on_incomming_call+0xa8>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d110      	bne.n	80028f8 <accepts_on_incomming_call+0x6c>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 80028d6:	4918      	ldr	r1, [pc, #96]	; (8002938 <accepts_on_incomming_call+0xac>)
 80028d8:	4818      	ldr	r0, [pc, #96]	; (800293c <accepts_on_incomming_call+0xb0>)
 80028da:	f008 fb19 	bl	800af10 <strstr>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <accepts_on_incomming_call+0x6c>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80028e4:	223c      	movs	r2, #60	; 0x3c
 80028e6:	2100      	movs	r1, #0
 80028e8:	4814      	ldr	r0, [pc, #80]	; (800293c <accepts_on_incomming_call+0xb0>)
 80028ea:	f008 f9f7 	bl	800acdc <memset>
				ansver_flag = 1;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <accepts_on_incomming_call+0xa8>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
				return 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e015      	b.n	8002924 <accepts_on_incomming_call+0x98>
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d303      	bcc.n	8002908 <accepts_on_incomming_call+0x7c>
		{
			no_answer = true;               // Out from waiting answer
 8002900:	2301      	movs	r3, #1
 8002902:	72fb      	strb	r3, [r7, #11]
			return 0;
 8002904:	2300      	movs	r3, #0
 8002906:	e00d      	b.n	8002924 <accepts_on_incomming_call+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <accepts_on_incomming_call+0xa8>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d009      	beq.n	8002924 <accepts_on_incomming_call+0x98>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d805      	bhi.n	8002924 <accepts_on_incomming_call+0x98>
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ce      	bne.n	80028c2 <accepts_on_incomming_call+0x36>
		}
	}
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000038 	.word	0x20000038
 8002930:	20000aa8 	.word	0x20000aa8
 8002934:	200002bc 	.word	0x200002bc
 8002938:	0800eb34 	.word	0x0800eb34
 800293c:	20000280 	.word	0x20000280

08002940 <wait_ansver_after_make_call_in_blok_mode>:


// -------------------------------------------------------------------
//	 // waite answer "BUSY" from GSM    WORK OK
int wait_ansver_after_make_call_in_blok_mode(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0

		 while (ansver_flag != 1)
 8002944:	bf00      	nop
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d1fb      	bne.n	8002946 <wait_ansver_after_make_call_in_blok_mode+0x6>
		 {
			// waite for answer
		 }
		 if(ansver_flag == 1)
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d132      	bne.n	80029bc <wait_ansver_after_make_call_in_blok_mode+0x7c>
		 {
				if (strstr(GSM_RX_buffer, "BUSY"))                        // Звінок збитий  // Work OK
 8002956:	491b      	ldr	r1, [pc, #108]	; (80029c4 <wait_ansver_after_make_call_in_blok_mode+0x84>)
 8002958:	481b      	ldr	r0, [pc, #108]	; (80029c8 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 800295a:	f008 fad9 	bl	800af10 <strstr>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <wait_ansver_after_make_call_in_blok_mode+0x38>
			    {
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002964:	223c      	movs	r2, #60	; 0x3c
 8002966:	2100      	movs	r1, #0
 8002968:	4817      	ldr	r0, [pc, #92]	; (80029c8 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 800296a:	f008 f9b7 	bl	800acdc <memset>
					ansver_flag = 1;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
					return 1;
 8002974:	2301      	movs	r3, #1
 8002976:	e021      	b.n	80029bc <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}

				if (strstr(GSM_RX_buffer, "NO ANSWER"))					  // Не відповідає  // Work OK
 8002978:	4914      	ldr	r1, [pc, #80]	; (80029cc <wait_ansver_after_make_call_in_blok_mode+0x8c>)
 800297a:	4813      	ldr	r0, [pc, #76]	; (80029c8 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 800297c:	f008 fac8 	bl	800af10 <strstr>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <wait_ansver_after_make_call_in_blok_mode+0x5a>
			    {
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002986:	223c      	movs	r2, #60	; 0x3c
 8002988:	2100      	movs	r1, #0
 800298a:	480f      	ldr	r0, [pc, #60]	; (80029c8 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 800298c:	f008 f9a6 	bl	800acdc <memset>
				    ansver_flag = 1;
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
				    return 2;
 8002996:	2302      	movs	r3, #2
 8002998:	e010      	b.n	80029bc <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}

				if (strstr(GSM_RX_buffer, "NO CARRIER"))					  // Трубка піднята
 800299a:	490d      	ldr	r1, [pc, #52]	; (80029d0 <wait_ansver_after_make_call_in_blok_mode+0x90>)
 800299c:	480a      	ldr	r0, [pc, #40]	; (80029c8 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 800299e:	f008 fab7 	bl	800af10 <strstr>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <wait_ansver_after_make_call_in_blok_mode+0x7c>
				{
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80029a8:	223c      	movs	r2, #60	; 0x3c
 80029aa:	2100      	movs	r1, #0
 80029ac:	4806      	ldr	r0, [pc, #24]	; (80029c8 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80029ae:	f008 f995 	bl	800acdc <memset>
				    ansver_flag = 1;
 80029b2:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
				    return 3;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e7ff      	b.n	80029bc <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}
		}
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200002bc 	.word	0x200002bc
 80029c4:	0800eb6c 	.word	0x0800eb6c
 80029c8:	20000280 	.word	0x20000280
 80029cc:	0800eb74 	.word	0x0800eb74
 80029d0:	0800eb80 	.word	0x0800eb80

080029d4 <wait_incoming_call>:
 * 		0 - Error(Timeout)
 * 		1 - No input call
 * 		2 - input call
 */
int wait_incoming_call(char *incoming_number)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	uint32_t id =0;               				 // Variable for timeout
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
	bool no_answer = false;
 80029e0:	2300      	movs	r3, #0
 80029e2:	77fb      	strb	r3, [r7, #31]
	int timeout_counter = 10000;                 // Variable for compare timeout
 80029e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80029e8:	61bb      	str	r3, [r7, #24]
	ansver_flag = 0;
 80029ea:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <wait_incoming_call+0x1b0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 80029f0:	2300      	movs	r3, #0
 80029f2:	77fb      	strb	r3, [r7, #31]

	// Senc check command
	char AT_CLCC[] = "AT+CLCC\r\n";
 80029f4:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <wait_incoming_call+0x1b4>)
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80029fc:	c303      	stmia	r3!, {r0, r1}
 80029fe:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CLCC, strlen(AT_CLCC), 1000);
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fba3 	bl	8000150 <strlen>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	f107 010c 	add.w	r1, r7, #12
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	485d      	ldr	r0, [pc, #372]	; (8002b8c <wait_incoming_call+0x1b8>)
 8002a18:	f007 fb3e 	bl	800a098 <HAL_UART_Transmit>

	// Wait for an answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002a1c:	e09e      	b.n	8002b5c <wait_incoming_call+0x188>
	{
		id++;														// Increment timeout
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	3301      	adds	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
		DelayMicro(10);
 8002a24:	200a      	movs	r0, #10
 8002a26:	f7ff fb71 	bl	800210c <DelayMicro>

		if(ansver_flag == 1)					// waite flag from interrupt
 8002a2a:	4b56      	ldr	r3, [pc, #344]	; (8002b84 <wait_incoming_call+0x1b0>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 808c 	bne.w	8002b4c <wait_incoming_call+0x178>
		{
			if (strstr(GSM_RX_buffer, "OK"))   					// NO incoming call
 8002a34:	4956      	ldr	r1, [pc, #344]	; (8002b90 <wait_incoming_call+0x1bc>)
 8002a36:	4857      	ldr	r0, [pc, #348]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002a38:	f008 fa6a 	bl	800af10 <strstr>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <wait_incoming_call+0x82>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002a42:	223c      	movs	r2, #60	; 0x3c
 8002a44:	2100      	movs	r1, #0
 8002a46:	4853      	ldr	r0, [pc, #332]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002a48:	f008 f948 	bl	800acdc <memset>
				ansver_flag = 1;
 8002a4c:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <wait_incoming_call+0x1b0>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
				return 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e091      	b.n	8002b7a <wait_incoming_call+0x1a6>
			}
			uint8_t find_edigit_counter = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			//+CLCC: 1,1,4,0,0,"+380931482354",145,""
			if(strstr(GSM_RX_buffer, "+CLCC: 1,1,4,0,0,"))
 8002a5c:	494e      	ldr	r1, [pc, #312]	; (8002b98 <wait_incoming_call+0x1c4>)
 8002a5e:	484d      	ldr	r0, [pc, #308]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002a60:	f008 fa56 	bl	800af10 <strstr>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d05e      	beq.n	8002b28 <wait_incoming_call+0x154>
			{
				// Parsing number
				uint8_t i = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				for(i = 0; i <= sizeof(GSM_RX_buffer); i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a76:	e049      	b.n	8002b0c <wait_incoming_call+0x138>
				{
					if(GSM_RX_buffer[i] == '+')										// Find start number
 8002a78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a7c:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	2b2b      	cmp	r3, #43	; 0x2b
 8002a82:	d13e      	bne.n	8002b02 <wait_incoming_call+0x12e>
					{
						find_edigit_counter ++;										// We have two '+' sign because we must miss first sign
 8002a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						if(find_edigit_counter == 2)
 8002a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d135      	bne.n	8002b02 <wait_incoming_call+0x12e>
						{
							i++;
 8002a96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
							uint8_t k = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							uint8_t j = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3020 	strb.w	r3, [r7, #32]
							for(j = 0; j<= 12; j ++)								// 12 - mobile number long
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3020 	strb.w	r3, [r7, #32]
 8002ab2:	e022      	b.n	8002afa <wait_incoming_call+0x126>
							{
								if(j == 12)											// Add '\0' in last element
 8002ab4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d106      	bne.n	8002aca <wait_incoming_call+0xf6>
								{
									incoming_number[k] = '\0';
 8002abc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e012      	b.n	8002af0 <wait_incoming_call+0x11c>
								}
								else
								{
									incoming_number[k] = GSM_RX_buffer[i];			// Copy
 8002aca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002ace:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	440b      	add	r3, r1
 8002ad6:	492f      	ldr	r1, [pc, #188]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002ad8:	5c8a      	ldrb	r2, [r1, r2]
 8002ada:	701a      	strb	r2, [r3, #0]
									i++;
 8002adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
									k++;
 8002ae6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002aea:	3301      	adds	r3, #1
 8002aec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							for(j = 0; j<= 12; j ++)								// 12 - mobile number long
 8002af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af4:	3301      	adds	r3, #1
 8002af6:	f887 3020 	strb.w	r3, [r7, #32]
 8002afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d9d8      	bls.n	8002ab4 <wait_incoming_call+0xe0>
				for(i = 0; i <= sizeof(GSM_RX_buffer); i++)
 8002b02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b06:	3301      	adds	r3, #1
 8002b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b10:	2b3c      	cmp	r3, #60	; 0x3c
 8002b12:	d9b1      	bls.n	8002a78 <wait_incoming_call+0xa4>
							}
						}
					}
				}

				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));					// Сlean the buffer
 8002b14:	223c      	movs	r2, #60	; 0x3c
 8002b16:	2100      	movs	r1, #0
 8002b18:	481e      	ldr	r0, [pc, #120]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002b1a:	f008 f8df 	bl	800acdc <memset>
				ansver_flag = 1;
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <wait_incoming_call+0x1b0>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]

				return 2;
 8002b24:	2302      	movs	r3, #2
 8002b26:	e028      	b.n	8002b7a <wait_incoming_call+0x1a6>
			}
			//+CLCC: 1,1,0,0,0,"+380931482354",145,""
			if(strstr(GSM_RX_buffer, "+CLCC: 1,1,0,0,0,"))		// Піднята трубка
 8002b28:	491c      	ldr	r1, [pc, #112]	; (8002b9c <wait_incoming_call+0x1c8>)
 8002b2a:	481a      	ldr	r0, [pc, #104]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002b2c:	f008 f9f0 	bl	800af10 <strstr>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <wait_incoming_call+0x166>
			{
				return 3;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e01f      	b.n	8002b7a <wait_incoming_call+0x1a6>
			}

			if(strstr(GSM_RX_buffer, "+CLCC: 1,0,0,0,0,"))		// Піднята трубка вихідного звінка з GSM
 8002b3a:	4919      	ldr	r1, [pc, #100]	; (8002ba0 <wait_incoming_call+0x1cc>)
 8002b3c:	4815      	ldr	r0, [pc, #84]	; (8002b94 <wait_incoming_call+0x1c0>)
 8002b3e:	f008 f9e7 	bl	800af10 <strstr>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <wait_incoming_call+0x178>
			{
				return 4;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	e016      	b.n	8002b7a <wait_incoming_call+0x1a6>
			}

		}

		if(id  >= timeout_counter)													// Out of timeout
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d303      	bcc.n	8002b5c <wait_incoming_call+0x188>
		{
			no_answer = true;														 // Out from waiting answer
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]

			return 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e00e      	b.n	8002b7a <wait_incoming_call+0x1a6>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <wait_incoming_call+0x1b0>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d00a      	beq.n	8002b7a <wait_incoming_call+0x1a6>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d806      	bhi.n	8002b7a <wait_incoming_call+0x1a6>
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	f083 0301 	eor.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f47f af52 	bne.w	8002a1e <wait_incoming_call+0x4a>
		}
	}
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3728      	adds	r7, #40	; 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200002bc 	.word	0x200002bc
 8002b88:	0800ebc8 	.word	0x0800ebc8
 8002b8c:	20000aa8 	.word	0x20000aa8
 8002b90:	0800eb34 	.word	0x0800eb34
 8002b94:	20000280 	.word	0x20000280
 8002b98:	0800eb8c 	.word	0x0800eb8c
 8002b9c:	0800eba0 	.word	0x0800eba0
 8002ba0:	0800ebb4 	.word	0x0800ebb4

08002ba4 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b08b      	sub	sp, #44	; 0x2c
 8002ba8:	af00      	add	r7, sp, #0
	uint8_t size=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 8002bba:	23ff      	movs	r3, #255	; 0xff
 8002bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f958 	bl	8002e80 <r_single_Si7021>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8002bd6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d000      	beq.n	8002be0 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 8002bde:	e7fe      	b.n	8002bde <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fa54 	bl	8001094 <__aeabi_fcmplt>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <read_T_and_H_SI7021+0x52>
 8002bf2:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <read_T_and_H_SI7021+0x198>)
 8002bf4:	e000      	b.n	8002bf8 <read_T_and_H_SI7021+0x54>
 8002bf6:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <read_T_and_H_SI7021+0x19c>)
 8002bf8:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fa47 	bl	8001094 <__aeabi_fcmplt>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <read_T_and_H_SI7021+0x70>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c12:	e000      	b.n	8002c16 <read_T_and_H_SI7021+0x72>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 8002c18:	69f8      	ldr	r0, [r7, #28]
 8002c1a:	f7fe fa63 	bl	80010e4 <__aeabi_f2iz>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 8002c22:	683c      	ldr	r4, [r7, #0]
 8002c24:	69b8      	ldr	r0, [r7, #24]
 8002c26:	f7fe f843 	bl	8000cb0 <__aeabi_i2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7fd ff88 	bl	8000b44 <__aeabi_fsub>
 8002c34:	4603      	mov	r3, r0
 8002c36:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 8002c38:	4942      	ldr	r1, [pc, #264]	; (8002d44 <read_T_and_H_SI7021+0x1a0>)
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7fe f88c 	bl	8000d58 <__aeabi_fmul>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fbf0 	bl	8000428 <__aeabi_f2d>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	4621      	mov	r1, r4
 8002c50:	f00b ff0c 	bl	800ea6c <trunc>
 8002c54:	4603      	mov	r3, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	f7fd fed6 	bl	8000a0c <__aeabi_d2iz>
 8002c60:	4603      	mov	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 8002c64:	1d38      	adds	r0, r7, #4
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	4937      	ldr	r1, [pc, #220]	; (8002d48 <read_T_and_H_SI7021+0x1a4>)
 8002c6c:	f008 f90c 	bl	800ae88 <siprintf>
	strcpy(temperature_si7021, str);
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4835      	ldr	r0, [pc, #212]	; (8002d4c <read_T_and_H_SI7021+0x1a8>)
 8002c76:	f008 f943 	bl	800af00 <strcpy>
	memset(str, 0 , sizeof(str));
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	220a      	movs	r2, #10
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f008 f82b 	bl	800acdc <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 8002c86:	23ff      	movs	r3, #255	; 0xff
 8002c88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f8f5 	bl	8002e80 <r_single_Si7021>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8002c9c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d000      	beq.n	8002ca6 <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 8002ca4:	e7fe      	b.n	8002ca4 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f9f1 	bl	8001094 <__aeabi_fcmplt>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <read_T_and_H_SI7021+0x11c>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cbe:	e000      	b.n	8002cc2 <read_T_and_H_SI7021+0x11e>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8002cc4:	69f8      	ldr	r0, [r7, #28]
 8002cc6:	f7fe fa0d 	bl	80010e4 <__aeabi_f2iz>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 8002cce:	683c      	ldr	r4, [r7, #0]
 8002cd0:	69b8      	ldr	r0, [r7, #24]
 8002cd2:	f7fd ffed 	bl	8000cb0 <__aeabi_i2f>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fd ff32 	bl	8000b44 <__aeabi_fsub>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8002ce4:	4917      	ldr	r1, [pc, #92]	; (8002d44 <read_T_and_H_SI7021+0x1a0>)
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f7fe f836 	bl	8000d58 <__aeabi_fmul>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fb9a 	bl	8000428 <__aeabi_f2d>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	f00b feb6 	bl	800ea6c <trunc>
 8002d00:	4603      	mov	r3, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	4618      	mov	r0, r3
 8002d06:	4621      	mov	r1, r4
 8002d08:	f7fd fe80 	bl	8000a0c <__aeabi_d2iz>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <read_T_and_H_SI7021+0x1ac>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f008 f8b6 	bl	800ae88 <siprintf>
	strcpy(humidity_si7021, str);
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	480c      	ldr	r0, [pc, #48]	; (8002d54 <read_T_and_H_SI7021+0x1b0>)
 8002d22:	f008 f8ed 	bl	800af00 <strcpy>
	memset(str, 0 , sizeof(str));
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	220a      	movs	r2, #10
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f007 ffd5 	bl	800acdc <memset>
}
 8002d32:	bf00      	nop
 8002d34:	372c      	adds	r7, #44	; 0x2c
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	0800ebd4 	.word	0x0800ebd4
 8002d40:	0800ebd8 	.word	0x0800ebd8
 8002d44:	461c4000 	.word	0x461c4000
 8002d48:	0800ebdc 	.word	0x0800ebdc
 8002d4c:	200006f4 	.word	0x200006f4
 8002d50:	0800ebe4 	.word	0x0800ebe4
 8002d54:	200006fc 	.word	0x200006fc

08002d58 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb4d 	bl	8000404 <__aeabi_i2d>
 8002d6a:	a311      	add	r3, pc, #68	; (adr r3, 8002db0 <process_temp_code+0x58>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fbb2 	bl	80004d8 <__aeabi_dmul>
 8002d74:	4603      	mov	r3, r0
 8002d76:	460c      	mov	r4, r1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <process_temp_code+0x68>)
 8002d82:	f7fd fcd3 	bl	800072c <__aeabi_ddiv>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	a30a      	add	r3, pc, #40	; (adr r3, 8002db8 <process_temp_code+0x60>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd f9e8 	bl	8000168 <__aeabi_dsub>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4621      	mov	r1, r4
 8002da0:	f7fd fe7c 	bl	8000a9c <__aeabi_d2f>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	3d70a3d7 	.word	0x3d70a3d7
 8002db4:	4065f70a 	.word	0x4065f70a
 8002db8:	cccccccd 	.word	0xcccccccd
 8002dbc:	40476ccc 	.word	0x40476ccc
 8002dc0:	40f00000 	.word	0x40f00000

08002dc4 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fb17 	bl	8000404 <__aeabi_i2d>
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <process_humi_code+0x84>)
 8002ddc:	f7fd fb7c 	bl	80004d8 <__aeabi_dmul>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <process_humi_code+0x88>)
 8002dee:	f7fd fc9d 	bl	800072c <__aeabi_ddiv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	4618      	mov	r0, r3
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <process_humi_code+0x8c>)
 8002e00:	f7fd f9b2 	bl	8000168 <__aeabi_dsub>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f7fd fe46 	bl	8000a9c <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fe f93b 	bl	8001094 <__aeabi_fcmplt>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <process_humi_code+0x66>
    return 0;
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e009      	b.n	8002e3e <process_humi_code+0x7a>
  else if(value > 100)
 8002e2a:	490a      	ldr	r1, [pc, #40]	; (8002e54 <process_humi_code+0x90>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7fe f94f 	bl	80010d0 <__aeabi_fcmpgt>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <process_humi_code+0x78>
    return 100;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <process_humi_code+0x90>)
 8002e3a:	e000      	b.n	8002e3e <process_humi_code+0x7a>
  else
    return (float)value;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd90      	pop	{r4, r7, pc}
 8002e46:	bf00      	nop
 8002e48:	405f4000 	.word	0x405f4000
 8002e4c:	40f00000 	.word	0x40f00000
 8002e50:	40180000 	.word	0x40180000
 8002e54:	42c80000 	.word	0x42c80000

08002e58 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	b29b      	uxth	r3, r3
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 8002e92:	23e5      	movs	r3, #229	; 0xe5
 8002e94:	737b      	strb	r3, [r7, #13]
 8002e96:	e008      	b.n	8002eaa <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d102      	bne.n	8002ea4 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 8002e9e:	23e3      	movs	r3, #227	; 0xe3
 8002ea0:	737b      	strb	r3, [r7, #13]
 8002ea2:	e002      	b.n	8002eaa <r_single_Si7021+0x2a>
  else
    return -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea8:	e03c      	b.n	8002f24 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	f107 020d 	add.w	r2, r7, #13
 8002eb0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	481c      	ldr	r0, [pc, #112]	; (8002f2c <r_single_Si7021+0xac>)
 8002eba:	f004 fa71 	bl	80073a0 <HAL_I2C_Master_Transmit>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <r_single_Si7021+0x4a>
    return -1;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec8:	e02c      	b.n	8002f24 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	f107 0208 	add.w	r2, r7, #8
 8002ed0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	4814      	ldr	r0, [pc, #80]	; (8002f2c <r_single_Si7021+0xac>)
 8002eda:	f004 fb5f 	bl	800759c <HAL_I2C_Master_Receive>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <r_single_Si7021+0x6a>
    return -1;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ee8:	e01c      	b.n	8002f24 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ffb2 	bl	8002e58 <convert_to_uint16>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5f 	bl	8002dc4 <process_humi_code>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e009      	b.n	8002f22 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 8002f14:	89fb      	ldrh	r3, [r7, #14]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff1e 	bl	8002d58 <process_temp_code>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]

  return 0;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000854 	.word	0x20000854

08002f30 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 8002f36:	2300      	movs	r3, #0
 8002f38:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e043      	b.n	8002fca <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f003 fbbe 	bl	80066c4 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8002f48:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	b299      	uxth	r1, r3
 8002f52:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <I2C_1_scaner+0xb8>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b298      	uxth	r0, r3
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <I2C_1_scaner+0xbc>)
 8002f5a:	881c      	ldrh	r4, [r3, #0]
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <I2C_1_scaner+0xbc>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <I2C_1_scaner+0xc0>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	9202      	str	r2, [sp, #8]
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <I2C_1_scaner+0xc4>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4623      	mov	r3, r4
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4821      	ldr	r0, [pc, #132]	; (8002ff8 <I2C_1_scaner+0xc8>)
 8002f72:	f004 fe67 	bl	8007c44 <HAL_I2C_Mem_Read>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <I2C_1_scaner+0xcc>)
 8002f7c:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <I2C_1_scaner+0xcc>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11b      	bne.n	8002fbe <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8002f8c:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b3c      	cmp	r3, #60	; 0x3c
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b3c      	cmp	r3, #60	; 0x3c
 8002fb6:	d001      	beq.n	8002fbc <I2C_1_scaner+0x8c>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 8002fba:	e000      	b.n	8002fbe <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8002fbc:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <I2C_1_scaner+0xb4>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2bff      	cmp	r3, #255	; 0xff
 8002fd0:	d1b7      	bne.n	8002f42 <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8002fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fd6:	f003 fb75 	bl	80066c4 <HAL_Delay>
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200002bf 	.word	0x200002bf
 8002fe8:	200002c0 	.word	0x200002c0
 8002fec:	2000005c 	.word	0x2000005c
 8002ff0:	20000060 	.word	0x20000060
 8002ff4:	200002c1 	.word	0x200002c1
 8002ff8:	20000854 	.word	0x20000854
 8002ffc:	200002c2 	.word	0x200002c2

08003000 <HAL_UART_RxCpltCallback>:
// -----------------------------------------------------------------------------
// Receive data from GPS module
#if GPS
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
		flag = 1;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_UART_RxCpltCallback+0x18>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
	}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	200002c9 	.word	0x200002c9

0800301c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003022:	f003 faed 	bl	8006600 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003026:	f000 f8b3 	bl	8003190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800302a:	f000 fae7 	bl	80035fc <MX_GPIO_Init>
  MX_DMA_Init();
 800302e:	f000 fac7 	bl	80035c0 <MX_DMA_Init>
  MX_TIM2_Init();
 8003032:	f000 f9f9 	bl	8003428 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003036:	f000 f8f1 	bl	800321c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800303a:	f000 fa43 	bl	80034c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800303e:	f000 fa95 	bl	800356c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8003042:	f000 f919 	bl	8003278 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003046:	f000 f94d 	bl	80032e4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800304a:	f000 fa65 	bl	8003518 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	#if I2C_SCANNER
  		I2C_1_scaner();
 800304e:	f7ff ff6f 	bl	8002f30 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  		read_T_and_H_SI7021();
 8003052:	f7ff fda7 	bl	8002ba4 <read_T_and_H_SI7021>
	#endif

	#if OLED
  		init_oled();
 8003056:	f002 f9d1 	bl	80053fc <init_oled>
	  //test_oled();
	#endif

	#if GPS
  		memset(GPS_buff ,0 ,sizeof(GPS_buff));
 800305a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305e:	2100      	movs	r1, #0
 8003060:	4842      	ldr	r0, [pc, #264]	; (800316c <main+0x150>)
 8003062:	f007 fe3b 	bl	800acdc <memset>
  		HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 8003066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <main+0x150>)
 800306c:	4840      	ldr	r0, [pc, #256]	; (8003170 <main+0x154>)
 800306e:	f007 f953 	bl	800a318 <HAL_UART_Receive_DMA>
	#endif

  	HAL_TIM_Base_Start_IT(&htim2);
 8003072:	4840      	ldr	r0, [pc, #256]	; (8003174 <main+0x158>)
 8003074:	f006 f99a 	bl	80093ac <HAL_TIM_Base_Start_IT>

  	// Turn on interrupt, if in RX buffer are one byte
  	// Register CR1-> RXNEIE
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8003078:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <main+0x15c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <main+0x15c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0220 	orr.w	r2, r2, #32
 8003086:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	// Test led
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800308e:	483b      	ldr	r0, [pc, #236]	; (800317c <main+0x160>)
 8003090:	f004 f81d 	bl	80070ce <HAL_GPIO_WritePin>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
  #endif

  int EXIT = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	607b      	str	r3, [r7, #4]

while (1)
{
	test_function(); 				// TEST FUNCTUION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8003098:	f002 f976 	bl	8005388 <test_function>

	EXIT = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
	char sign = 0;													// Char for keyboard
 80030a0:	2300      	movs	r3, #0
 80030a2:	70fb      	strb	r3, [r7, #3]

	touch_bakcklight(0);											// Turn off Fingerprint modeul LED
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fe f91b 	bl	80012e0 <touch_bakcklight>

	print_main_menu();  											// Print main menu on OLED
 80030aa:	f002 f9dd 	bl	8005468 <print_main_menu>

	do                                                            	// Wait for choice
	{
		sign = read_one_sign_from_keyboard();                     	// Read sign from keyboard
 80030ae:	f000 fb6f 	bl	8003790 <read_one_sign_from_keyboard>
 80030b2:	4603      	mov	r3, r0
 80030b4:	70fb      	strb	r3, [r7, #3]

		// For debug ///////////
		//sign = '1';    // turn on GSM mode
		/////////////////////

		if(sign == '1')    							// If select GSM mode
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	2b31      	cmp	r3, #49	; 0x31
 80030ba:	d10f      	bne.n	80030dc <main+0xc0>
		{
			GSM_MODE = true;
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <main+0x164>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
			while(GSM_MODE && (EXIT == 0))
 80030c2:	e004      	b.n	80030ce <main+0xb2>
			{
				EXIT = gsm_mode(sign);
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd64 	bl	8003b94 <gsm_mode>
 80030cc:	6078      	str	r0, [r7, #4]
			while(GSM_MODE && (EXIT == 0))
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <main+0x164>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <main+0xc0>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f3      	beq.n	80030c4 <main+0xa8>
			}
		}
		if(sign == '2')    							// If select GPS mode
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	2b32      	cmp	r3, #50	; 0x32
 80030e0:	d10f      	bne.n	8003102 <main+0xe6>
		{
			GPS_MODE = true;
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <main+0x168>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
			while (GPS_MODE && (EXIT == 0))
 80030e8:	e004      	b.n	80030f4 <main+0xd8>
			{
				EXIT = gps_mode(sign);
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fc83 	bl	80039f8 <gps_mode>
 80030f2:	6078      	str	r0, [r7, #4]
			while (GPS_MODE && (EXIT == 0))
 80030f4:	4b23      	ldr	r3, [pc, #140]	; (8003184 <main+0x168>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <main+0xe6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f3      	beq.n	80030ea <main+0xce>
			}
		}
		if(sign == '3')    							// If select FINGERPRINT MODE
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	2b33      	cmp	r3, #51	; 0x33
 8003106:	d10f      	bne.n	8003128 <main+0x10c>
		{
			FINGERPRINT_MODE = true;
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <main+0x16c>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
			while (FINGERPRINT_MODE && (EXIT == 0))
 800310e:	e004      	b.n	800311a <main+0xfe>
			{
				EXIT = fingerprint_mode(sign);
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f948 	bl	80043a8 <fingerprint_mode>
 8003118:	6078      	str	r0, [r7, #4]
			while (FINGERPRINT_MODE && (EXIT == 0))
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <main+0x16c>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <main+0x10c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f3      	beq.n	8003110 <main+0xf4>
			}
		}
		if(sign == '4')    							// If select SENSORS MODE
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b34      	cmp	r3, #52	; 0x34
 800312c:	d10f      	bne.n	800314e <main+0x132>
		{
			SENSORS_MODE = true;
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <main+0x170>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
			while (SENSORS_MODE && (EXIT == 0))
 8003134:	e004      	b.n	8003140 <main+0x124>
			{
				EXIT = sensors_mode(sign);
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	4618      	mov	r0, r3
 800313a:	f001 fc1b 	bl	8004974 <sensors_mode>
 800313e:	6078      	str	r0, [r7, #4]
			while (SENSORS_MODE && (EXIT == 0))
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <main+0x170>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <main+0x132>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f3      	beq.n	8003136 <main+0x11a>
			}
		}

		ssd1306_UpdateScreen();
 800314e:	f002 fd1d 	bl	8005b8c <ssd1306_UpdateScreen>
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '4'));     // Select one from 3 modes
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	2b31      	cmp	r3, #49	; 0x31
 8003156:	d09f      	beq.n	8003098 <main+0x7c>
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	2b32      	cmp	r3, #50	; 0x32
 800315c:	d09c      	beq.n	8003098 <main+0x7c>
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	2b33      	cmp	r3, #51	; 0x33
 8003162:	d099      	beq.n	8003098 <main+0x7c>
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b34      	cmp	r3, #52	; 0x34
 8003168:	d1a1      	bne.n	80030ae <main+0x92>
{
 800316a:	e795      	b.n	8003098 <main+0x7c>
 800316c:	200008a8 	.word	0x200008a8
 8003170:	20000814 	.word	0x20000814
 8003174:	20000b28 	.word	0x20000b28
 8003178:	20000b68 	.word	0x20000b68
 800317c:	40011000 	.word	0x40011000
 8003180:	200002c4 	.word	0x200002c4
 8003184:	200002c5 	.word	0x200002c5
 8003188:	200002c6 	.word	0x200002c6
 800318c:	200002c7 	.word	0x200002c7

08003190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b090      	sub	sp, #64	; 0x40
 8003194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003196:	f107 0318 	add.w	r3, r7, #24
 800319a:	2228      	movs	r2, #40	; 0x28
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f007 fd9c 	bl	800acdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c4:	2302      	movs	r3, #2
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80031ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031d4:	f107 0318 	add.w	r3, r7, #24
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 fc3f 	bl	8008a5c <HAL_RCC_OscConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80031e4:	f002 f904 	bl	80053f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031e8:	230f      	movs	r3, #15
 80031ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ec:	2302      	movs	r3, #2
 80031ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f005 feaa 	bl	8008f5c <HAL_RCC_ClockConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800320e:	f002 f8ef 	bl	80053f0 <Error_Handler>
  }
}
 8003212:	bf00      	nop
 8003214:	3740      	adds	r7, #64	; 0x40
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <MX_I2C1_Init+0x50>)
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <MX_I2C1_Init+0x54>)
 8003224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <MX_I2C1_Init+0x50>)
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <MX_I2C1_Init+0x58>)
 800322a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <MX_I2C1_Init+0x50>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <MX_I2C1_Init+0x50>)
 8003234:	2200      	movs	r2, #0
 8003236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <MX_I2C1_Init+0x50>)
 800323a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800323e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <MX_I2C1_Init+0x50>)
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <MX_I2C1_Init+0x50>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <MX_I2C1_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <MX_I2C1_Init+0x50>)
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003258:	4804      	ldr	r0, [pc, #16]	; (800326c <MX_I2C1_Init+0x50>)
 800325a:	f003 ff69 	bl	8007130 <HAL_I2C_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003264:	f002 f8c4 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000854 	.word	0x20000854
 8003270:	40005400 	.word	0x40005400
 8003274:	000186a0 	.word	0x000186a0

08003278 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <MX_SPI2_Init+0x64>)
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <MX_SPI2_Init+0x68>)
 8003280:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <MX_SPI2_Init+0x64>)
 8003284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003288:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <MX_SPI2_Init+0x64>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <MX_SPI2_Init+0x64>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <MX_SPI2_Init+0x64>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <MX_SPI2_Init+0x64>)
 800329e:	2200      	movs	r2, #0
 80032a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <MX_SPI2_Init+0x64>)
 80032a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <MX_SPI2_Init+0x64>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <MX_SPI2_Init+0x64>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MX_SPI2_Init+0x64>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <MX_SPI2_Init+0x64>)
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <MX_SPI2_Init+0x64>)
 80032c4:	220a      	movs	r2, #10
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <MX_SPI2_Init+0x64>)
 80032ca:	f005 ffe3 	bl	8009294 <HAL_SPI_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80032d4:	f002 f88c 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000778 	.word	0x20000778
 80032e0:	40003800 	.word	0x40003800

080032e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b096      	sub	sp, #88	; 0x58
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	615a      	str	r2, [r3, #20]
 8003314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2220      	movs	r2, #32
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f007 fcdd 	bl	800acdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003324:	4a3f      	ldr	r2, [pc, #252]	; (8003424 <MX_TIM1_Init+0x140>)
 8003326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8003328:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <MX_TIM1_Init+0x13c>)
 800332a:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 800332e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8003336:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003338:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800333c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334a:	4b35      	ldr	r3, [pc, #212]	; (8003420 <MX_TIM1_Init+0x13c>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003350:	4833      	ldr	r0, [pc, #204]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003352:	f006 f800 	bl	8009356 <HAL_TIM_Base_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800335c:	f002 f848 	bl	80053f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800336a:	4619      	mov	r1, r3
 800336c:	482c      	ldr	r0, [pc, #176]	; (8003420 <MX_TIM1_Init+0x13c>)
 800336e:	f006 fa43 	bl	80097f8 <HAL_TIM_ConfigClockSource>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003378:	f002 f83a 	bl	80053f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800337c:	4828      	ldr	r0, [pc, #160]	; (8003420 <MX_TIM1_Init+0x13c>)
 800337e:	f006 f838 	bl	80093f2 <HAL_TIM_PWM_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003388:	f002 f832 	bl	80053f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003398:	4619      	mov	r1, r3
 800339a:	4821      	ldr	r0, [pc, #132]	; (8003420 <MX_TIM1_Init+0x13c>)
 800339c:	f006 fd88 	bl	8009eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80033a6:	f002 f823 	bl	80053f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033aa:	2360      	movs	r3, #96	; 0x60
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 80033ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033b8:	2300      	movs	r3, #0
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033bc:	2300      	movs	r3, #0
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033c4:	2300      	movs	r3, #0
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033cc:	2200      	movs	r2, #0
 80033ce:	4619      	mov	r1, r3
 80033d0:	4813      	ldr	r0, [pc, #76]	; (8003420 <MX_TIM1_Init+0x13c>)
 80033d2:	f006 f94b 	bl	800966c <HAL_TIM_PWM_ConfigChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80033dc:	f002 f808 	bl	80053f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4807      	ldr	r0, [pc, #28]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003404:	f006 fd98 	bl	8009f38 <HAL_TIMEx_ConfigBreakDeadTime>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800340e:	f001 ffef 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <MX_TIM1_Init+0x13c>)
 8003414:	f002 fdfc 	bl	8006010 <HAL_TIM_MspPostInit>

}
 8003418:	bf00      	nop
 800341a:	3758      	adds	r7, #88	; 0x58
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000ae8 	.word	0x20000ae8
 8003424:	40012c00 	.word	0x40012c00

08003428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343c:	463b      	mov	r3, r7
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003444:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <MX_TIM2_Init+0x98>)
 8003446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800344a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <MX_TIM2_Init+0x98>)
 800344e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8003452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <MX_TIM2_Init+0x98>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <MX_TIM2_Init+0x98>)
 800345c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <MX_TIM2_Init+0x98>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <MX_TIM2_Init+0x98>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800346e:	4814      	ldr	r0, [pc, #80]	; (80034c0 <MX_TIM2_Init+0x98>)
 8003470:	f005 ff71 	bl	8009356 <HAL_TIM_Base_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800347a:	f001 ffb9 	bl	80053f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800347e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4619      	mov	r1, r3
 800348a:	480d      	ldr	r0, [pc, #52]	; (80034c0 <MX_TIM2_Init+0x98>)
 800348c:	f006 f9b4 	bl	80097f8 <HAL_TIM_ConfigClockSource>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003496:	f001 ffab 	bl	80053f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034a2:	463b      	mov	r3, r7
 80034a4:	4619      	mov	r1, r3
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <MX_TIM2_Init+0x98>)
 80034a8:	f006 fd02 	bl	8009eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80034b2:	f001 ff9d 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000b28 	.word	0x20000b28

080034c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <MX_USART1_UART_Init+0x50>)
 80034cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034ea:	220c      	movs	r2, #12
 80034ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034fa:	4805      	ldr	r0, [pc, #20]	; (8003510 <MX_USART1_UART_Init+0x4c>)
 80034fc:	f006 fd7f 	bl	8009ffe <HAL_UART_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003506:	f001 ff73 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000aa8 	.word	0x20000aa8
 8003514:	40013800 	.word	0x40013800

08003518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <MX_USART2_UART_Init+0x50>)
 8003520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800353e:	220c      	movs	r2, #12
 8003540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003550:	f006 fd55 	bl	8009ffe <HAL_UART_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800355a:	f001 ff49 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000b68 	.word	0x20000b68
 8003568:	40004400 	.word	0x40004400

0800356c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <MX_USART3_UART_Init+0x50>)
 8003574:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 8003578:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800357c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 8003586:	2200      	movs	r2, #0
 8003588:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 800358c:	2200      	movs	r2, #0
 800358e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 8003592:	220c      	movs	r2, #12
 8003594:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_USART3_UART_Init+0x4c>)
 80035a4:	f006 fd2b 	bl	8009ffe <HAL_UART_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035ae:	f001 ff1f 	bl	80053f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000814 	.word	0x20000814
 80035bc:	40004800 	.word	0x40004800

080035c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <MX_DMA_Init+0x38>)
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <MX_DMA_Init+0x38>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6153      	str	r3, [r2, #20]
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <MX_DMA_Init+0x38>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	200d      	movs	r0, #13
 80035e4:	f003 f967 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80035e8:	200d      	movs	r0, #13
 80035ea:	f003 f980 	bl	80068ee <HAL_NVIC_EnableIRQ>

}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003602:	f107 0310 	add.w	r3, r7, #16
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <MX_GPIO_Init+0x158>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <MX_GPIO_Init+0x158>)
 8003616:	f043 0310 	orr.w	r3, r3, #16
 800361a:	6193      	str	r3, [r2, #24]
 800361c:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <MX_GPIO_Init+0x158>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003628:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <MX_GPIO_Init+0x158>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	4a49      	ldr	r2, [pc, #292]	; (8003754 <MX_GPIO_Init+0x158>)
 800362e:	f043 0320 	orr.w	r3, r3, #32
 8003632:	6193      	str	r3, [r2, #24]
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <MX_GPIO_Init+0x158>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	4b44      	ldr	r3, [pc, #272]	; (8003754 <MX_GPIO_Init+0x158>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4a43      	ldr	r2, [pc, #268]	; (8003754 <MX_GPIO_Init+0x158>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6193      	str	r3, [r2, #24]
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <MX_GPIO_Init+0x158>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <MX_GPIO_Init+0x158>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <MX_GPIO_Init+0x158>)
 800365e:	f043 0308 	orr.w	r3, r3, #8
 8003662:	6193      	str	r3, [r2, #24]
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <MX_GPIO_Init+0x158>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003676:	4838      	ldr	r0, [pc, #224]	; (8003758 <MX_GPIO_Init+0x15c>)
 8003678:	f003 fd29 	bl	80070ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 800367c:	2200      	movs	r2, #0
 800367e:	f241 0108 	movw	r1, #4104	; 0x1008
 8003682:	4836      	ldr	r0, [pc, #216]	; (800375c <MX_GPIO_Init+0x160>)
 8003684:	f003 fd23 	bl	80070ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800368e:	4834      	ldr	r0, [pc, #208]	; (8003760 <MX_GPIO_Init+0x164>)
 8003690:	f003 fd1d 	bl	80070ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369a:	2301      	movs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a6:	f107 0310 	add.w	r3, r7, #16
 80036aa:	4619      	mov	r1, r3
 80036ac:	482a      	ldr	r0, [pc, #168]	; (8003758 <MX_GPIO_Init+0x15c>)
 80036ae:	f003 fb9d 	bl	8006dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036b2:	2302      	movs	r3, #2
 80036b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <MX_GPIO_Init+0x168>)
 80036b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	4619      	mov	r1, r3
 80036c4:	4826      	ldr	r0, [pc, #152]	; (8003760 <MX_GPIO_Init+0x164>)
 80036c6:	f003 fb91 	bl	8006dec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 80036ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036d8:	2301      	movs	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	4619      	mov	r1, r3
 80036e2:	481e      	ldr	r0, [pc, #120]	; (800375c <MX_GPIO_Init+0x160>)
 80036e4:	f003 fb82 	bl	8006dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80036e8:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80036ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ee:	2301      	movs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2302      	movs	r3, #2
 80036f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	4619      	mov	r1, r3
 8003700:	4817      	ldr	r0, [pc, #92]	; (8003760 <MX_GPIO_Init+0x164>)
 8003702:	f003 fb73 	bl	8006dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003706:	2308      	movs	r3, #8
 8003708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	2301      	movs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2302      	movs	r3, #2
 8003714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 0310 	add.w	r3, r7, #16
 800371a:	4619      	mov	r1, r3
 800371c:	480f      	ldr	r0, [pc, #60]	; (800375c <MX_GPIO_Init+0x160>)
 800371e:	f003 fb65 	bl	8006dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8003722:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800372c:	2302      	movs	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	4619      	mov	r1, r3
 8003736:	4809      	ldr	r0, [pc, #36]	; (800375c <MX_GPIO_Init+0x160>)
 8003738:	f003 fb58 	bl	8006dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2101      	movs	r1, #1
 8003740:	2007      	movs	r0, #7
 8003742:	f003 f8b8 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003746:	2007      	movs	r0, #7
 8003748:	f003 f8d1 	bl	80068ee <HAL_NVIC_EnableIRQ>

}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	40011000 	.word	0x40011000
 800375c:	40010c00 	.word	0x40010c00
 8003760:	40010800 	.word	0x40010800
 8003764:	10310000 	.word	0x10310000

08003768 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d102      	bne.n	8003780 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
        }
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	200002ca 	.word	0x200002ca

08003790 <read_one_sign_from_keyboard>:
// ---------------------------------------------------------------------------
/*
  Its function read one sing from keyboard
 */
char read_one_sign_from_keyboard(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	// 2. Зробити зчитування даних з клавіатури як переривання
	char sign = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	71fb      	strb	r3, [r7, #7]
	uint8_t readed_status = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	71bb      	strb	r3, [r7, #6]

	readed_status = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	717b      	strb	r3, [r7, #5]

	for(i=1; i<=4; i++)
 80037a6:	2301      	movs	r3, #1
 80037a8:	717b      	strb	r3, [r7, #5]
 80037aa:	e118      	b.n	80039de <read_one_sign_from_keyboard+0x24e>
	{
		if((i == 1) && (readed_status != 1))
 80037ac:	797b      	ldrb	r3, [r7, #5]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d142      	bne.n	8003838 <read_one_sign_from_keyboard+0xa8>
 80037b2:	79bb      	ldrb	r3, [r7, #6]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d03f      	beq.n	8003838 <read_one_sign_from_keyboard+0xa8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);     // For detect 123A
 80037b8:	2201      	movs	r2, #1
 80037ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037be:	488c      	ldr	r0, [pc, #560]	; (80039f0 <read_one_sign_from_keyboard+0x260>)
 80037c0:	f003 fc85 	bl	80070ce <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80037c4:	2001      	movs	r0, #1
 80037c6:	f002 ff7d 	bl	80066c4 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80037ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ce:	4889      	ldr	r0, [pc, #548]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80037d0:	f003 fc66 	bl	80070a0 <HAL_GPIO_ReadPin>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <read_one_sign_from_keyboard+0x54>
			{
			  	sign = 'A';
 80037da:	2341      	movs	r3, #65	; 0x41
 80037dc:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80037de:	2301      	movs	r3, #1
 80037e0:	71bb      	strb	r3, [r7, #6]
 80037e2:	e023      	b.n	800382c <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80037e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037e8:	4882      	ldr	r0, [pc, #520]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80037ea:	f003 fc59 	bl	80070a0 <HAL_GPIO_ReadPin>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <read_one_sign_from_keyboard+0x6e>
			{
			  	sign = '3';
 80037f4:	2333      	movs	r3, #51	; 0x33
 80037f6:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80037f8:	2301      	movs	r3, #1
 80037fa:	71bb      	strb	r3, [r7, #6]
 80037fc:	e016      	b.n	800382c <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80037fe:	2120      	movs	r1, #32
 8003800:	487c      	ldr	r0, [pc, #496]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 8003802:	f003 fc4d 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <read_one_sign_from_keyboard+0x86>
			{
			  	sign = '2';
 800380c:	2332      	movs	r3, #50	; 0x32
 800380e:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003810:	2301      	movs	r3, #1
 8003812:	71bb      	strb	r3, [r7, #6]
 8003814:	e00a      	b.n	800382c <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003816:	2110      	movs	r1, #16
 8003818:	4876      	ldr	r0, [pc, #472]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 800381a:	f003 fc41 	bl	80070a0 <HAL_GPIO_ReadPin>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <read_one_sign_from_keyboard+0x9c>
			{
			  	sign = '1';
 8003824:	2331      	movs	r3, #49	; 0x31
 8003826:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003828:	2301      	movs	r3, #1
 800382a:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003832:	486f      	ldr	r0, [pc, #444]	; (80039f0 <read_one_sign_from_keyboard+0x260>)
 8003834:	f003 fc4b 	bl	80070ce <HAL_GPIO_WritePin>
		}

		if((i == 2) && (readed_status != 1))
 8003838:	797b      	ldrb	r3, [r7, #5]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d142      	bne.n	80038c4 <read_one_sign_from_keyboard+0x134>
 800383e:	79bb      	ldrb	r3, [r7, #6]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d03f      	beq.n	80038c4 <read_one_sign_from_keyboard+0x134>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);     // For detect 456B
 8003844:	2201      	movs	r2, #1
 8003846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800384a:	4869      	ldr	r0, [pc, #420]	; (80039f0 <read_one_sign_from_keyboard+0x260>)
 800384c:	f003 fc3f 	bl	80070ce <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003850:	2001      	movs	r0, #1
 8003852:	f002 ff37 	bl	80066c4 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800385a:	4866      	ldr	r0, [pc, #408]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 800385c:	f003 fc20 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <read_one_sign_from_keyboard+0xe0>
			{
				sign = 'B';
 8003866:	2342      	movs	r3, #66	; 0x42
 8003868:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 800386a:	2301      	movs	r3, #1
 800386c:	71bb      	strb	r3, [r7, #6]
 800386e:	e023      	b.n	80038b8 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003874:	485f      	ldr	r0, [pc, #380]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 8003876:	f003 fc13 	bl	80070a0 <HAL_GPIO_ReadPin>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <read_one_sign_from_keyboard+0xfa>
			{
				sign = '6';
 8003880:	2336      	movs	r3, #54	; 0x36
 8003882:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003884:	2301      	movs	r3, #1
 8003886:	71bb      	strb	r3, [r7, #6]
 8003888:	e016      	b.n	80038b8 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 800388a:	2120      	movs	r1, #32
 800388c:	4859      	ldr	r0, [pc, #356]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 800388e:	f003 fc07 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <read_one_sign_from_keyboard+0x112>
			{
				sign = '5';
 8003898:	2335      	movs	r3, #53	; 0x35
 800389a:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 800389c:	2301      	movs	r3, #1
 800389e:	71bb      	strb	r3, [r7, #6]
 80038a0:	e00a      	b.n	80038b8 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80038a2:	2110      	movs	r1, #16
 80038a4:	4853      	ldr	r0, [pc, #332]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80038a6:	f003 fbfb 	bl	80070a0 <HAL_GPIO_ReadPin>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <read_one_sign_from_keyboard+0x128>
			{
				sign = '4';
 80038b0:	2334      	movs	r3, #52	; 0x34
 80038b2:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038be:	484c      	ldr	r0, [pc, #304]	; (80039f0 <read_one_sign_from_keyboard+0x260>)
 80038c0:	f003 fc05 	bl	80070ce <HAL_GPIO_WritePin>
		}

		if((i == 3) && (readed_status != 1))
 80038c4:	797b      	ldrb	r3, [r7, #5]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d142      	bne.n	8003950 <read_one_sign_from_keyboard+0x1c0>
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d03f      	beq.n	8003950 <read_one_sign_from_keyboard+0x1c0>
		{
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);     // For detect 789C
 80038d0:	2201      	movs	r2, #1
 80038d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d6:	4846      	ldr	r0, [pc, #280]	; (80039f0 <read_one_sign_from_keyboard+0x260>)
 80038d8:	f003 fbf9 	bl	80070ce <HAL_GPIO_WritePin>
		 	HAL_Delay(1);
 80038dc:	2001      	movs	r0, #1
 80038de:	f002 fef1 	bl	80066c4 <HAL_Delay>
		 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80038e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038e6:	4843      	ldr	r0, [pc, #268]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80038e8:	f003 fbda 	bl	80070a0 <HAL_GPIO_ReadPin>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <read_one_sign_from_keyboard+0x16c>
		 	{
		 		sign = 'C';
 80038f2:	2343      	movs	r3, #67	; 0x43
 80038f4:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	71bb      	strb	r3, [r7, #6]
 80038fa:	e023      	b.n	8003944 <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80038fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003900:	483c      	ldr	r0, [pc, #240]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 8003902:	f003 fbcd 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <read_one_sign_from_keyboard+0x186>
		 	{
		 		sign = '9';
 800390c:	2339      	movs	r3, #57	; 0x39
 800390e:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003910:	2301      	movs	r3, #1
 8003912:	71bb      	strb	r3, [r7, #6]
 8003914:	e016      	b.n	8003944 <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003916:	2120      	movs	r1, #32
 8003918:	4836      	ldr	r0, [pc, #216]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 800391a:	f003 fbc1 	bl	80070a0 <HAL_GPIO_ReadPin>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <read_one_sign_from_keyboard+0x19e>
		 	{
		 		sign = '8';
 8003924:	2338      	movs	r3, #56	; 0x38
 8003926:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003928:	2301      	movs	r3, #1
 800392a:	71bb      	strb	r3, [r7, #6]
 800392c:	e00a      	b.n	8003944 <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800392e:	2110      	movs	r1, #16
 8003930:	4830      	ldr	r0, [pc, #192]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 8003932:	f003 fbb5 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <read_one_sign_from_keyboard+0x1b4>
		 	{
		 		 sign = '7';
 800393c:	2337      	movs	r3, #55	; 0x37
 800393e:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003940:	2301      	movs	r3, #1
 8003942:	71bb      	strb	r3, [r7, #6]
		 	}
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003944:	2200      	movs	r2, #0
 8003946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800394a:	4829      	ldr	r0, [pc, #164]	; (80039f0 <read_one_sign_from_keyboard+0x260>)
 800394c:	f003 fbbf 	bl	80070ce <HAL_GPIO_WritePin>
		}


		if((i == 3) && (readed_status != 1))
 8003950:	797b      	ldrb	r3, [r7, #5]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d140      	bne.n	80039d8 <read_one_sign_from_keyboard+0x248>
 8003956:	79bb      	ldrb	r3, [r7, #6]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d03d      	beq.n	80039d8 <read_one_sign_from_keyboard+0x248>
		{
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);     // For detect *0#D
 800395c:	2201      	movs	r2, #1
 800395e:	2108      	movs	r1, #8
 8003960:	4824      	ldr	r0, [pc, #144]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 8003962:	f003 fbb4 	bl	80070ce <HAL_GPIO_WritePin>
		    HAL_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f002 feac 	bl	80066c4 <HAL_Delay>

		   	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800396c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003970:	4820      	ldr	r0, [pc, #128]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 8003972:	f003 fb95 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <read_one_sign_from_keyboard+0x1f6>
		   	{
		   		sign = 'D';
 800397c:	2344      	movs	r3, #68	; 0x44
 800397e:	71fb      	strb	r3, [r7, #7]
		   		readed_status = 1;
 8003980:	2301      	movs	r3, #1
 8003982:	71bb      	strb	r3, [r7, #6]
 8003984:	e023      	b.n	80039ce <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800398a:	481a      	ldr	r0, [pc, #104]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 800398c:	f003 fb88 	bl	80070a0 <HAL_GPIO_ReadPin>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <read_one_sign_from_keyboard+0x210>
		   	{
		   		 sign = '#';
 8003996:	2323      	movs	r3, #35	; 0x23
 8003998:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	71bb      	strb	r3, [r7, #6]
 800399e:	e016      	b.n	80039ce <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80039a0:	2120      	movs	r1, #32
 80039a2:	4814      	ldr	r0, [pc, #80]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80039a4:	f003 fb7c 	bl	80070a0 <HAL_GPIO_ReadPin>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <read_one_sign_from_keyboard+0x228>
		   	{
		   		 sign = '0';
 80039ae:	2330      	movs	r3, #48	; 0x30
 80039b0:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	71bb      	strb	r3, [r7, #6]
 80039b6:	e00a      	b.n	80039ce <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80039b8:	2110      	movs	r1, #16
 80039ba:	480e      	ldr	r0, [pc, #56]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80039bc:	f003 fb70 	bl	80070a0 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <read_one_sign_from_keyboard+0x23e>
		   	{
		   		 sign = '*';
 80039c6:	232a      	movs	r3, #42	; 0x2a
 80039c8:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	71bb      	strb	r3, [r7, #6]
		   	}
		   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2108      	movs	r1, #8
 80039d2:	4808      	ldr	r0, [pc, #32]	; (80039f4 <read_one_sign_from_keyboard+0x264>)
 80039d4:	f003 fb7b 	bl	80070ce <HAL_GPIO_WritePin>
	for(i=1; i<=4; i++)
 80039d8:	797b      	ldrb	r3, [r7, #5]
 80039da:	3301      	adds	r3, #1
 80039dc:	717b      	strb	r3, [r7, #5]
 80039de:	797b      	ldrb	r3, [r7, #5]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	f67f aee3 	bls.w	80037ac <read_one_sign_from_keyboard+0x1c>
		}
	}
	return sign;
 80039e6:	79fb      	ldrb	r3, [r7, #7]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40010800 	.word	0x40010800
 80039f4:	40010c00 	.word	0x40010c00

080039f8 <gps_mode>:
// ----------------------------------------------------------------------------
int gps_mode(char sign)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b092      	sub	sp, #72	; 0x48
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003a02:	2000      	movs	r0, #0
 8003a04:	f002 f8a0 	bl	8005b48 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003a08:	f002 f8c0 	bl	8005b8c <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gps[50]={0};
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	2232      	movs	r2, #50	; 0x32
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f007 f961 	bl	800acdc <memset>
	memset(str_gps, 0 , sizeof(str_gps));
 8003a1a:	f107 030c 	add.w	r3, r7, #12
 8003a1e:	2232      	movs	r2, #50	; 0x32
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f007 f95a 	bl	800acdc <memset>
	sprintf(str_gps,"%s", "2.GPS: waiting...");
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	4a4f      	ldr	r2, [pc, #316]	; (8003b6c <gps_mode+0x174>)
 8003a2e:	461c      	mov	r4, r3
 8003a30:	4615      	mov	r5, r2
 8003a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a36:	682b      	ldr	r3, [r5, #0]
 8003a38:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f002 f9db 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_gps, Font_7x10, White);
 8003a42:	4a4b      	ldr	r2, [pc, #300]	; (8003b70 <gps_mode+0x178>)
 8003a44:	f107 000c 	add.w	r0, r7, #12
 8003a48:	2301      	movs	r3, #1
 8003a4a:	ca06      	ldmia	r2, {r1, r2}
 8003a4c:	f002 f9ae 	bl	8005dac <ssd1306_WriteString>
	//memset(str_gps, 0 , sizeof(str_gps));

	ssd1306_UpdateScreen();
 8003a50:	f002 f89c 	bl	8005b8c <ssd1306_UpdateScreen>

	uint8_t broken_packet_counter = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	do                                                            	// Wait on choiсe
	{
		sign = read_one_sign_from_keyboard();                       // Read sign from keyboard
 8003a5a:	f7ff fe99 	bl	8003790 <read_one_sign_from_keyboard>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]

		if(sign == '*')    	// If select EXIT  // Exit in main menu
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b2a      	cmp	r3, #42	; 0x2a
 8003a66:	d112      	bne.n	8003a8e <gps_mode+0x96>
		{
			// Clear all OLED
			ssd1306_Fill(Black);
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f002 f86d 	bl	8005b48 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8003a6e:	f002 f88d 	bl	8005b8c <ssd1306_UpdateScreen>

			GPS_MODE = false;
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <gps_mode+0x17c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
			GSM_MODE = false;
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <gps_mode+0x180>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
			FINGERPRINT_MODE = false;
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <gps_mode+0x184>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
			SENSORS_MODE = false;
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <gps_mode+0x188>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]

			return 1;   // Flag_fro exit from there
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06a      	b.n	8003b64 <gps_mode+0x16c>
		}
		else
		{
			// Parsing data form GPS
			parsing_GPS(GPS_buff, 512);
 8003a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a92:	483c      	ldr	r0, [pc, #240]	; (8003b84 <gps_mode+0x18c>)
 8003a94:	f7fe faae 	bl	8001ff4 <parsing_GPS>
			int select_print_data = 1;							// Flag for print GPS data on OLED
 8003a98:	2301      	movs	r3, #1
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
			OLED_prinr_all_data(select_print_data);
 8003a9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a9e:	f001 fcbd 	bl	800541c <OLED_prinr_all_data>

			if(GPGGA_data_is_ready == 1)						// Check if data from GPS device was correct ( parsed GPGLL line correct)
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <gps_mode+0x190>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d124      	bne.n	8003af4 <gps_mode+0xfc>
			{
				// Print the data that GPS is valid
				memset(str_gps, 0 , sizeof(str_gps));
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	2232      	movs	r2, #50	; 0x32
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f007 f912 	bl	800acdc <memset>
				sprintf(str_gps,"%s", "1.GPS: OK            ");
 8003ab8:	f107 030c 	add.w	r3, r7, #12
 8003abc:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <gps_mode+0x194>)
 8003abe:	461c      	mov	r4, r3
 8003ac0:	4615      	mov	r5, r2
 8003ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ac6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003aca:	6020      	str	r0, [r4, #0]
 8003acc:	3404      	adds	r4, #4
 8003ace:	8021      	strh	r1, [r4, #0]
				ssd1306_SetCursor(00, 00);
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f002 f990 	bl	8005df8 <ssd1306_SetCursor>
				ssd1306_WriteString(str_gps, Font_7x10, White);
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <gps_mode+0x178>)
 8003ada:	f107 000c 	add.w	r0, r7, #12
 8003ade:	2301      	movs	r3, #1
 8003ae0:	ca06      	ldmia	r2, {r1, r2}
 8003ae2:	f002 f963 	bl	8005dac <ssd1306_WriteString>

				broken_packet_counter = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				GPGGA_data_is_ready = 0;
 8003aec:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <gps_mode+0x190>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e031      	b.n	8003b58 <gps_mode+0x160>
			}
			else
			{
				broken_packet_counter ++;
 8003af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003af8:	3301      	adds	r3, #1
 8003afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				//HAL_Delay(500);
				if((GPGGA_data_is_ready != 1) && (broken_packet_counter >= 20))
 8003afe:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <gps_mode+0x190>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d028      	beq.n	8003b58 <gps_mode+0x160>
 8003b06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b0a:	2b13      	cmp	r3, #19
 8003b0c:	d924      	bls.n	8003b58 <gps_mode+0x160>
				{
					// Print the data that GPS is does not valid
					GPGGA_data_is_ready = 0;
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <gps_mode+0x190>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
					broken_packet_counter = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					memset(str_gps, 0 , sizeof(str_gps));
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2232      	movs	r2, #50	; 0x32
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f007 f8da 	bl	800acdc <memset>
					sprintf(str_gps,"%s", "1.GPS: NO SIGNAL  ");
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <gps_mode+0x198>)
 8003b2e:	461c      	mov	r4, r3
 8003b30:	4615      	mov	r5, r2
 8003b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b36:	682b      	ldr	r3, [r5, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	8022      	strh	r2, [r4, #0]
 8003b3c:	3402      	adds	r4, #2
 8003b3e:	0c1b      	lsrs	r3, r3, #16
 8003b40:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 00);
 8003b42:	2100      	movs	r1, #0
 8003b44:	2000      	movs	r0, #0
 8003b46:	f002 f957 	bl	8005df8 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gps, Font_7x10, White);
 8003b4a:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <gps_mode+0x178>)
 8003b4c:	f107 000c 	add.w	r0, r7, #12
 8003b50:	2301      	movs	r3, #1
 8003b52:	ca06      	ldmia	r2, {r1, r2}
 8003b54:	f002 f92a 	bl	8005dac <ssd1306_WriteString>
				}
			}

			ssd1306_UpdateScreen();
 8003b58:	f002 f818 	bl	8005b8c <ssd1306_UpdateScreen>
		}
	}while ( (sign != '*'));     // Select one from 3 modes
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b60:	f47f af7b 	bne.w	8003a5a <gps_mode+0x62>
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3748      	adds	r7, #72	; 0x48
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6c:	0800ebec 	.word	0x0800ebec
 8003b70:	20000054 	.word	0x20000054
 8003b74:	200002c5 	.word	0x200002c5
 8003b78:	200002c4 	.word	0x200002c4
 8003b7c:	200002c6 	.word	0x200002c6
 8003b80:	200002c7 	.word	0x200002c7
 8003b84:	200008a8 	.word	0x200008a8
 8003b88:	20000278 	.word	0x20000278
 8003b8c:	0800ec00 	.word	0x0800ec00
 8003b90:	0800ec18 	.word	0x0800ec18

08003b94 <gsm_mode>:
// ----------------------------------------------------------------------------
int gsm_mode(char sign)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b0a2      	sub	sp, #136	; 0x88
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f001 ffd2 	bl	8005b48 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003ba4:	f001 fff2 	bl	8005b8c <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gsm[50]={0};
 8003ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bac:	2232      	movs	r2, #50	; 0x32
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f007 f893 	bl	800acdc <memset>
	sprintf(str_gsm,"%s", "1.GSM: waiting...");
 8003bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bba:	4ac9      	ldr	r2, [pc, #804]	; (8003ee0 <gsm_mode+0x34c>)
 8003bbc:	461c      	mov	r4, r3
 8003bbe:	4615      	mov	r5, r2
 8003bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f002 f914 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003bd0:	4ac4      	ldr	r2, [pc, #784]	; (8003ee4 <gsm_mode+0x350>)
 8003bd2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	ca06      	ldmia	r2, {r1, r2}
 8003bda:	f002 f8e7 	bl	8005dac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003bde:	f001 ffd5 	bl	8005b8c <ssd1306_UpdateScreen>
	memset(str_gsm, 0 , sizeof(str_gsm));
 8003be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003be6:	2232      	movs	r2, #50	; 0x32
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f007 f876 	bl	800acdc <memset>

	// Init GSM module
	init_GSM_uart_comunication();
 8003bf0:	f7fe faaa 	bl	8002148 <init_GSM_uart_comunication>
	if(init_gsm_module() == HAL_OK)
 8003bf4:	f7fe faba 	bl	800216c <init_gsm_module>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11e      	bne.n	8003c3c <gsm_mode+0xa8>
	{
		// init OK
		GSM_INIT = 1;
 8003bfe:	4bba      	ldr	r3, [pc, #744]	; (8003ee8 <gsm_mode+0x354>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
		claen_oled_lines(true, false, false, false, false);
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f001 faa6 	bl	8005160 <claen_oled_lines>

		sprintf(str_gsm,"%s", "1.GSM: OK");
 8003c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c18:	4ab4      	ldr	r2, [pc, #720]	; (8003eec <gsm_mode+0x358>)
 8003c1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c1c:	c303      	stmia	r3!, {r0, r1}
 8003c1e:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 8003c20:	2100      	movs	r1, #0
 8003c22:	2000      	movs	r0, #0
 8003c24:	f002 f8e8 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003c28:	4aae      	ldr	r2, [pc, #696]	; (8003ee4 <gsm_mode+0x350>)
 8003c2a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003c2e:	2301      	movs	r3, #1
 8003c30:	ca06      	ldmia	r2, {r1, r2}
 8003c32:	f002 f8bb 	bl	8005dac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003c36:	f001 ffa9 	bl	8005b8c <ssd1306_UpdateScreen>
 8003c3a:	e023      	b.n	8003c84 <gsm_mode+0xf0>
	}
	else
	{
		// GSM didn't init
		GSM_INIT = 0;
 8003c3c:	4baa      	ldr	r3, [pc, #680]	; (8003ee8 <gsm_mode+0x354>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]

		claen_oled_lines(true, false, false, false, false);
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f001 fa87 	bl	8005160 <claen_oled_lines>

		sprintf(str_gsm,"%s", "1.GSM: ERROR");
 8003c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c56:	4aa6      	ldr	r2, [pc, #664]	; (8003ef0 <gsm_mode+0x35c>)
 8003c58:	461c      	mov	r4, r3
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c5e:	c407      	stmia	r4!, {r0, r1, r2}
 8003c60:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	2000      	movs	r0, #0
 8003c66:	f002 f8c7 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003c6a:	4a9e      	ldr	r2, [pc, #632]	; (8003ee4 <gsm_mode+0x350>)
 8003c6c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003c70:	2301      	movs	r3, #1
 8003c72:	ca06      	ldmia	r2, {r1, r2}
 8003c74:	f002 f89a 	bl	8005dac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003c78:	f001 ff88 	bl	8005b8c <ssd1306_UpdateScreen>

		HAL_Delay(2000);
 8003c7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c80:	f002 fd20 	bl	80066c4 <HAL_Delay>
	}
		// END INIT GSM MODULE  //////////////////////////

    if(GSM_INIT == 1)
 8003c84:	4b98      	ldr	r3, [pc, #608]	; (8003ee8 <gsm_mode+0x354>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	f040 8360 	bne.w	800434e <gsm_mode+0x7ba>
    {
    	int incoming_call_status = 0;					// Call status.
 8003c8e:	2300      	movs	r3, #0
 8003c90:	67fb      	str	r3, [r7, #124]	; 0x7c
    	bool first_time_after_call = false;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

    	int print_oled_status = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	673b      	str	r3, [r7, #112]	; 0x70

		// Print GSM menu
    	memset(str_gsm, 0 , sizeof(str_gsm));
 8003c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca0:	2232      	movs	r2, #50	; 0x32
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f007 f819 	bl	800acdc <memset>
		sprintf(str_gsm,"%s", "1.CALL to me");
 8003caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cae:	4a91      	ldr	r2, [pc, #580]	; (8003ef4 <gsm_mode+0x360>)
 8003cb0:	461c      	mov	r4, r3
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb6:	c407      	stmia	r4!, {r0, r1, r2}
 8003cb8:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 8003cba:	2110      	movs	r1, #16
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f002 f89b 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003cc2:	4a88      	ldr	r2, [pc, #544]	; (8003ee4 <gsm_mode+0x350>)
 8003cc4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003cc8:	2301      	movs	r3, #1
 8003cca:	ca06      	ldmia	r2, {r1, r2}
 8003ccc:	f002 f86e 	bl	8005dac <ssd1306_WriteString>

		memset(str_gsm, 0 , sizeof(str_gsm));
 8003cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cd4:	2232      	movs	r2, #50	; 0x32
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f006 ffff 	bl	800acdc <memset>
		sprintf(str_gsm,"%s", "2.CALL on number");
 8003cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce2:	4a85      	ldr	r2, [pc, #532]	; (8003ef8 <gsm_mode+0x364>)
 8003ce4:	461c      	mov	r4, r3
 8003ce6:	4615      	mov	r5, r2
 8003ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8003cf0:	211a      	movs	r1, #26
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f002 f880 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003cf8:	4a7a      	ldr	r2, [pc, #488]	; (8003ee4 <gsm_mode+0x350>)
 8003cfa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003cfe:	2301      	movs	r3, #1
 8003d00:	ca06      	ldmia	r2, {r1, r2}
 8003d02:	f002 f853 	bl	8005dac <ssd1306_WriteString>

		memset(str_gsm, 0 , sizeof(str_gsm));
 8003d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d0a:	2232      	movs	r2, #50	; 0x32
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f006 ffe4 	bl	800acdc <memset>
		sprintf(str_gsm,"%s", "3.For send SMS");
 8003d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d18:	4a78      	ldr	r2, [pc, #480]	; (8003efc <gsm_mode+0x368>)
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d20:	c407      	stmia	r4!, {r0, r1, r2}
 8003d22:	8023      	strh	r3, [r4, #0]
 8003d24:	3402      	adds	r4, #2
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8003d2a:	2124      	movs	r1, #36	; 0x24
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f002 f863 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003d32:	4a6c      	ldr	r2, [pc, #432]	; (8003ee4 <gsm_mode+0x350>)
 8003d34:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003d38:	2301      	movs	r3, #1
 8003d3a:	ca06      	ldmia	r2, {r1, r2}
 8003d3c:	f002 f836 	bl	8005dac <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8003d40:	f001 ff24 	bl	8005b8c <ssd1306_UpdateScreen>

		bool incoming_call_status_oled = false;				// Status for blinky
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		char incoming_number[15] = {0};						// Buffer for incoming number
 8003d4a:	f107 031c 	add.w	r3, r7, #28
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	f8c3 200b 	str.w	r2, [r3, #11]
		char sign='\0';
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		{
			do
			{
				// Wait incoming call

				incoming_call_status = wait_incoming_call(incoming_number);
 8003d60:	f107 031c 	add.w	r3, r7, #28
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fe35 	bl	80029d4 <wait_incoming_call>
 8003d6a:	67f8      	str	r0, [r7, #124]	; 0x7c

				if(incoming_call_status == 2)											// detect incoming call
 8003d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	f040 820d 	bne.w	800418e <gsm_mode+0x5fa>
				{
					sign = read_one_sign_from_keyboard();								// Read sign from keyboard
 8003d74:	f7ff fd0c 	bl	8003790 <read_one_sign_from_keyboard>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					incoming_call_status = wait_incoming_call(incoming_number);			// Read answer from GSM
 8003d7e:	f107 031c 	add.w	r3, r7, #28
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fe26 	bl	80029d4 <wait_incoming_call>
 8003d88:	67f8      	str	r0, [r7, #124]	; 0x7c

					// For print one time
					if(incoming_call_status_oled == false)
 8003d8a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d07a      	beq.n	8003e8e <gsm_mode+0x2fa>
					{
						claen_oled_lines(false, true, true, true, true);
 8003d98:	2301      	movs	r3, #1
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2101      	movs	r1, #1
 8003da2:	2000      	movs	r0, #0
 8003da4:	f001 f9dc 	bl	8005160 <claen_oled_lines>

						memset(str_gsm, 0 , sizeof(str_gsm));
 8003da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dac:	2232      	movs	r2, #50	; 0x32
 8003dae:	2100      	movs	r1, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f006 ff93 	bl	800acdc <memset>
						sprintf(str_gsm,"%s", "'A':pick up phone");
 8003db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dba:	4a51      	ldr	r2, [pc, #324]	; (8003f00 <gsm_mode+0x36c>)
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	4615      	mov	r5, r2
 8003dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	8023      	strh	r3, [r4, #0]
						ssd1306_SetCursor(00, 36);
 8003dc8:	2124      	movs	r1, #36	; 0x24
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f002 f814 	bl	8005df8 <ssd1306_SetCursor>
						ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003dd0:	4a44      	ldr	r2, [pc, #272]	; (8003ee4 <gsm_mode+0x350>)
 8003dd2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	ca06      	ldmia	r2, {r1, r2}
 8003dda:	f001 ffe7 	bl	8005dac <ssd1306_WriteString>

						memset(str_gsm, 0 , sizeof(str_gsm));
 8003dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de2:	2232      	movs	r2, #50	; 0x32
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 ff78 	bl	800acdc <memset>
						sprintf(str_gsm,"%s", "'*':end call");
 8003dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df0:	4a44      	ldr	r2, [pc, #272]	; (8003f04 <gsm_mode+0x370>)
 8003df2:	461c      	mov	r4, r3
 8003df4:	4613      	mov	r3, r2
 8003df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df8:	c407      	stmia	r4!, {r0, r1, r2}
 8003dfa:	7023      	strb	r3, [r4, #0]
						ssd1306_SetCursor(00, 46);
 8003dfc:	212e      	movs	r1, #46	; 0x2e
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f001 fffa 	bl	8005df8 <ssd1306_SetCursor>
						ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003e04:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <gsm_mode+0x350>)
 8003e06:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	ca06      	ldmia	r2, {r1, r2}
 8003e0e:	f001 ffcd 	bl	8005dac <ssd1306_WriteString>

						memset(str_gsm, 0 , sizeof(str_gsm));
 8003e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e16:	2232      	movs	r2, #50	; 0x32
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f006 ff5e 	bl	800acdc <memset>
						sprintf(str_gsm,"%s", "Incoming CALL...");
 8003e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e24:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <gsm_mode+0x374>)
 8003e26:	461c      	mov	r4, r3
 8003e28:	4615      	mov	r5, r2
 8003e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	7023      	strb	r3, [r4, #0]
						ssd1306_SetCursor(00, 16);
 8003e32:	2110      	movs	r1, #16
 8003e34:	2000      	movs	r0, #0
 8003e36:	f001 ffdf 	bl	8005df8 <ssd1306_SetCursor>
						ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <gsm_mode+0x350>)
 8003e3c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003e40:	2301      	movs	r3, #1
 8003e42:	ca06      	ldmia	r2, {r1, r2}
 8003e44:	f001 ffb2 	bl	8005dac <ssd1306_WriteString>

						memset(str_gsm, 0 , sizeof(str_gsm));
 8003e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e4c:	2232      	movs	r2, #50	; 0x32
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f006 ff43 	bl	800acdc <memset>
						sprintf(str_gsm,"%s", incoming_number);
 8003e56:	f107 021c 	add.w	r2, r7, #28
 8003e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f007 f84d 	bl	800af00 <strcpy>
						ssd1306_SetCursor(00, 26);
 8003e66:	211a      	movs	r1, #26
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f001 ffc5 	bl	8005df8 <ssd1306_SetCursor>
						ssd1306_WriteString(incoming_number, Font_7x10, White);
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <gsm_mode+0x350>)
 8003e70:	f107 001c 	add.w	r0, r7, #28
 8003e74:	2301      	movs	r3, #1
 8003e76:	ca06      	ldmia	r2, {r1, r2}
 8003e78:	f001 ff98 	bl	8005dac <ssd1306_WriteString>
						memset(incoming_number, 0 , sizeof(incoming_number));
 8003e7c:	f107 031c 	add.w	r3, r7, #28
 8003e80:	220f      	movs	r2, #15
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f006 ff29 	bl	800acdc <memset>

						ssd1306_UpdateScreen();
 8003e8a:	f001 fe7f 	bl	8005b8c <ssd1306_UpdateScreen>
					}

					// Waiting for action on incoming call or sms
					do{
						sign = read_one_sign_from_keyboard();
 8003e8e:	f7ff fc7f 	bl	8003790 <read_one_sign_from_keyboard>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
						incoming_call_status = wait_incoming_call(incoming_number);			// Read answer from GSM
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fd99 	bl	80029d4 <wait_incoming_call>
 8003ea2:	67f8      	str	r0, [r7, #124]	; 0x7c
						HAL_Delay(200);
 8003ea4:	20c8      	movs	r0, #200	; 0xc8
 8003ea6:	f002 fc0d 	bl	80066c4 <HAL_Delay>
					}while ((sign != '*') && (sign != 'A') && (incoming_call_status != 1));
 8003eaa:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003eae:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb0:	d006      	beq.n	8003ec0 <gsm_mode+0x32c>
 8003eb2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003eb6:	2b41      	cmp	r3, #65	; 0x41
 8003eb8:	d002      	beq.n	8003ec0 <gsm_mode+0x32c>
 8003eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d1e6      	bne.n	8003e8e <gsm_mode+0x2fa>

					if(sign == '*')													// Збити трубку
 8003ec0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec6:	d15d      	bne.n	8003f84 <gsm_mode+0x3f0>
					{
						if(end_of_call() != 1)										// Send "end call" command in GSM module
 8003ec8:	f7fe fc86 	bl	80027d8 <end_of_call>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d158      	bne.n	8003f84 <gsm_mode+0x3f0>
						{
							// ERROR
						}
						else
						{
							uint8_t i, res = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							for(i=0; i<=6; i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8003ede:	e04d      	b.n	8003f7c <gsm_mode+0x3e8>
 8003ee0:	0800ec2c 	.word	0x0800ec2c
 8003ee4:	20000054 	.word	0x20000054
 8003ee8:	2000027d 	.word	0x2000027d
 8003eec:	0800ec40 	.word	0x0800ec40
 8003ef0:	0800ec4c 	.word	0x0800ec4c
 8003ef4:	0800ec5c 	.word	0x0800ec5c
 8003ef8:	0800ec6c 	.word	0x0800ec6c
 8003efc:	0800ec80 	.word	0x0800ec80
 8003f00:	0800ec90 	.word	0x0800ec90
 8003f04:	0800eca4 	.word	0x0800eca4
 8003f08:	0800ecb4 	.word	0x0800ecb4
							{
								res = i%2;
 8003f0c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								if(res)
 8003f18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01d      	beq.n	8003f5c <gsm_mode+0x3c8>
								{
									memset(str_gsm, 0 , sizeof(str_gsm));
 8003f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f24:	2232      	movs	r2, #50	; 0x32
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f006 fed7 	bl	800acdc <memset>
									sprintf(str_gsm,"%s", "CALL END");
 8003f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f32:	4a87      	ldr	r2, [pc, #540]	; (8004150 <gsm_mode+0x5bc>)
 8003f34:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f36:	c303      	stmia	r3!, {r0, r1}
 8003f38:	701a      	strb	r2, [r3, #0]
									ssd1306_SetCursor(00, 16);
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f001 ff5b 	bl	8005df8 <ssd1306_SetCursor>
									ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003f42:	4a84      	ldr	r2, [pc, #528]	; (8004154 <gsm_mode+0x5c0>)
 8003f44:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003f48:	2301      	movs	r3, #1
 8003f4a:	ca06      	ldmia	r2, {r1, r2}
 8003f4c:	f001 ff2e 	bl	8005dac <ssd1306_WriteString>

									ssd1306_UpdateScreen();
 8003f50:	f001 fe1c 	bl	8005b8c <ssd1306_UpdateScreen>
									HAL_Delay(200);
 8003f54:	20c8      	movs	r0, #200	; 0xc8
 8003f56:	f002 fbb5 	bl	80066c4 <HAL_Delay>
 8003f5a:	e00a      	b.n	8003f72 <gsm_mode+0x3de>
								}
								else
								{
									claen_oled_lines(false, true, true, true, true);		// Clean OLED
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2301      	movs	r3, #1
 8003f62:	2201      	movs	r2, #1
 8003f64:	2101      	movs	r1, #1
 8003f66:	2000      	movs	r0, #0
 8003f68:	f001 f8fa 	bl	8005160 <claen_oled_lines>
									HAL_Delay(200);
 8003f6c:	20c8      	movs	r0, #200	; 0xc8
 8003f6e:	f002 fba9 	bl	80066c4 <HAL_Delay>
							for(i=0; i<=6; i++)
 8003f72:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8003f76:	3301      	adds	r3, #1
 8003f78:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8003f7c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8003f80:	2b06      	cmp	r3, #6
 8003f82:	d9c3      	bls.n	8003f0c <gsm_mode+0x378>
							}

						}
					}

					if(sign == 'A')													// Pick up the phone
 8003f84:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003f88:	2b41      	cmp	r3, #65	; 0x41
 8003f8a:	f040 80fd 	bne.w	8004188 <gsm_mode+0x5f4>
					{
						if(accepts_on_incomming_call() == 1);						// Send "pick up the phone" command in GSM module
 8003f8e:	f7fe fc7d 	bl	800288c <accepts_on_incomming_call>
						{
							claen_oled_lines(false, true, true, true, true);		// Clean OLED
 8003f92:	2301      	movs	r3, #1
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2301      	movs	r3, #1
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f001 f8df 	bl	8005160 <claen_oled_lines>

							sprintf(str_gsm,"%s", "SPEAK...");
 8003fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa6:	4a6c      	ldr	r2, [pc, #432]	; (8004158 <gsm_mode+0x5c4>)
 8003fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003faa:	c303      	stmia	r3!, {r0, r1}
 8003fac:	701a      	strb	r2, [r3, #0]
							ssd1306_SetCursor(00, 16);
 8003fae:	2110      	movs	r1, #16
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f001 ff21 	bl	8005df8 <ssd1306_SetCursor>
							ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003fb6:	4a67      	ldr	r2, [pc, #412]	; (8004154 <gsm_mode+0x5c0>)
 8003fb8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	ca06      	ldmia	r2, {r1, r2}
 8003fc0:	f001 fef4 	bl	8005dac <ssd1306_WriteString>
							memset(str_gsm, 0 , sizeof(str_gsm));
 8003fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc8:	2232      	movs	r2, #50	; 0x32
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f006 fe85 	bl	800acdc <memset>

							sprintf(str_gsm,"%s", "'*':end call");
 8003fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd6:	4a61      	ldr	r2, [pc, #388]	; (800415c <gsm_mode+0x5c8>)
 8003fd8:	461c      	mov	r4, r3
 8003fda:	4613      	mov	r3, r2
 8003fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fde:	c407      	stmia	r4!, {r0, r1, r2}
 8003fe0:	7023      	strb	r3, [r4, #0]
							ssd1306_SetCursor(00, 46);
 8003fe2:	212e      	movs	r1, #46	; 0x2e
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f001 ff07 	bl	8005df8 <ssd1306_SetCursor>
							ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003fea:	4a5a      	ldr	r2, [pc, #360]	; (8004154 <gsm_mode+0x5c0>)
 8003fec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	ca06      	ldmia	r2, {r1, r2}
 8003ff4:	f001 feda 	bl	8005dac <ssd1306_WriteString>
							memset(str_gsm, 0 , sizeof(str_gsm));
 8003ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ffc:	2232      	movs	r2, #50	; 0x32
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f006 fe6b 	bl	800acdc <memset>

							ssd1306_UpdateScreen();
 8004006:	f001 fdc1 	bl	8005b8c <ssd1306_UpdateScreen>

							do{
								HAL_Delay(200);
 800400a:	20c8      	movs	r0, #200	; 0xc8
 800400c:	f002 fb5a 	bl	80066c4 <HAL_Delay>
								sign = read_one_sign_from_keyboard();                      				// Read sign from keyboard
 8004010:	f7ff fbbe 	bl	8003790 <read_one_sign_from_keyboard>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
								HAL_Delay(20);
 800401a:	2014      	movs	r0, #20
 800401c:	f002 fb52 	bl	80066c4 <HAL_Delay>
								incoming_call_status = wait_incoming_call(incoming_number);				// Read answer from GSM
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fcd5 	bl	80029d4 <wait_incoming_call>
 800402a:	67f8      	str	r0, [r7, #124]	; 0x7c

								if(incoming_call_status == 1)											// Sometimes GSM module sends wrong answer (BUG)
 800402c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <gsm_mode+0x4b0>
								{
									HAL_Delay(200);
 8004032:	20c8      	movs	r0, #200	; 0xc8
 8004034:	f002 fb46 	bl	80066c4 <HAL_Delay>
									incoming_call_status = wait_incoming_call(incoming_number);			// Read answer from GSM again
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fcc9 	bl	80029d4 <wait_incoming_call>
 8004042:	67f8      	str	r0, [r7, #124]	; 0x7c
								}

							}while ((sign != '*') && (incoming_call_status == 3) );
 8004044:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004048:	2b2a      	cmp	r3, #42	; 0x2a
 800404a:	d002      	beq.n	8004052 <gsm_mode+0x4be>
 800404c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800404e:	2b03      	cmp	r3, #3
 8004050:	d0db      	beq.n	800400a <gsm_mode+0x476>

							if(incoming_call_status == 1)												// If end call from phone
 8004052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d142      	bne.n	80040de <gsm_mode+0x54a>
							{
								uint8_t i, res = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
								for(i=0; i<=6; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8004064:	e037      	b.n	80040d6 <gsm_mode+0x542>
								{
									res = i%2;
 8004066:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
									if(res)
 8004072:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01d      	beq.n	80040b6 <gsm_mode+0x522>
									{
										memset(str_gsm, 0 , sizeof(str_gsm));
 800407a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800407e:	2232      	movs	r2, #50	; 0x32
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f006 fe2a 	bl	800acdc <memset>
										sprintf(str_gsm,"%s", "CALL END");
 8004088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800408c:	4a30      	ldr	r2, [pc, #192]	; (8004150 <gsm_mode+0x5bc>)
 800408e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004090:	c303      	stmia	r3!, {r0, r1}
 8004092:	701a      	strb	r2, [r3, #0]
										ssd1306_SetCursor(00, 16);
 8004094:	2110      	movs	r1, #16
 8004096:	2000      	movs	r0, #0
 8004098:	f001 feae 	bl	8005df8 <ssd1306_SetCursor>
										ssd1306_WriteString(str_gsm, Font_7x10, White);
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <gsm_mode+0x5c0>)
 800409e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80040a2:	2301      	movs	r3, #1
 80040a4:	ca06      	ldmia	r2, {r1, r2}
 80040a6:	f001 fe81 	bl	8005dac <ssd1306_WriteString>

										ssd1306_UpdateScreen();
 80040aa:	f001 fd6f 	bl	8005b8c <ssd1306_UpdateScreen>
										HAL_Delay(200);
 80040ae:	20c8      	movs	r0, #200	; 0xc8
 80040b0:	f002 fb08 	bl	80066c4 <HAL_Delay>
 80040b4:	e00a      	b.n	80040cc <gsm_mode+0x538>
									}
									else
									{
										claen_oled_lines(false, true, true, true, true);				// Clean OLED
 80040b6:	2301      	movs	r3, #1
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2301      	movs	r3, #1
 80040bc:	2201      	movs	r2, #1
 80040be:	2101      	movs	r1, #1
 80040c0:	2000      	movs	r0, #0
 80040c2:	f001 f84d 	bl	8005160 <claen_oled_lines>
										HAL_Delay(200);
 80040c6:	20c8      	movs	r0, #200	; 0xc8
 80040c8:	f002 fafc 	bl	80066c4 <HAL_Delay>
								for(i=0; i<=6; i++)
 80040cc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80040d0:	3301      	adds	r3, #1
 80040d2:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80040d6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d9c3      	bls.n	8004066 <gsm_mode+0x4d2>
									}
								}
							}
							if(sign == '*')																// If end call from GSM mode
 80040de:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80040e2:	2b2a      	cmp	r3, #42	; 0x2a
 80040e4:	d150      	bne.n	8004188 <gsm_mode+0x5f4>
							{
								if(end_of_call() != 1)													// Send "end call" command in GSM module
 80040e6:	f7fe fb77 	bl	80027d8 <end_of_call>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d14b      	bne.n	8004188 <gsm_mode+0x5f4>
								{
																										// ERROR
								}
								else
								{
									uint8_t i, res = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
									for(i=0; i<=6; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80040fc:	e040      	b.n	8004180 <gsm_mode+0x5ec>
									{
										res = i%2;
 80040fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
										if(res)
 800410a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800410e:	2b00      	cmp	r3, #0
 8004110:	d026      	beq.n	8004160 <gsm_mode+0x5cc>
										{
											memset(str_gsm, 0 , sizeof(str_gsm));
 8004112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004116:	2232      	movs	r2, #50	; 0x32
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f006 fdde 	bl	800acdc <memset>
											sprintf(str_gsm,"%s", "CALL END");
 8004120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <gsm_mode+0x5bc>)
 8004126:	ca07      	ldmia	r2, {r0, r1, r2}
 8004128:	c303      	stmia	r3!, {r0, r1}
 800412a:	701a      	strb	r2, [r3, #0]
											ssd1306_SetCursor(00, 16);
 800412c:	2110      	movs	r1, #16
 800412e:	2000      	movs	r0, #0
 8004130:	f001 fe62 	bl	8005df8 <ssd1306_SetCursor>
											ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004134:	4a07      	ldr	r2, [pc, #28]	; (8004154 <gsm_mode+0x5c0>)
 8004136:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800413a:	2301      	movs	r3, #1
 800413c:	ca06      	ldmia	r2, {r1, r2}
 800413e:	f001 fe35 	bl	8005dac <ssd1306_WriteString>

											ssd1306_UpdateScreen();
 8004142:	f001 fd23 	bl	8005b8c <ssd1306_UpdateScreen>
											HAL_Delay(200);
 8004146:	20c8      	movs	r0, #200	; 0xc8
 8004148:	f002 fabc 	bl	80066c4 <HAL_Delay>
 800414c:	e013      	b.n	8004176 <gsm_mode+0x5e2>
 800414e:	bf00      	nop
 8004150:	0800ecc8 	.word	0x0800ecc8
 8004154:	20000054 	.word	0x20000054
 8004158:	0800ecd4 	.word	0x0800ecd4
 800415c:	0800eca4 	.word	0x0800eca4
										}
										else
										{
											claen_oled_lines(false, true, true, true, true);		// Clean OLED
 8004160:	2301      	movs	r3, #1
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2301      	movs	r3, #1
 8004166:	2201      	movs	r2, #1
 8004168:	2101      	movs	r1, #1
 800416a:	2000      	movs	r0, #0
 800416c:	f000 fff8 	bl	8005160 <claen_oled_lines>
											HAL_Delay(200);
 8004170:	20c8      	movs	r0, #200	; 0xc8
 8004172:	f002 faa7 	bl	80066c4 <HAL_Delay>
									for(i=0; i<=6; i++)
 8004176:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800417a:	3301      	adds	r3, #1
 800417c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004180:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004184:	2b06      	cmp	r3, #6
 8004186:	d9ba      	bls.n	80040fe <gsm_mode+0x56a>
									}
								}
							}
						}
					}
					incoming_call_status_oled = true;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				}
				HAL_Delay(200);
 800418e:	20c8      	movs	r0, #200	; 0xc8
 8004190:	f002 fa98 	bl	80066c4 <HAL_Delay>
			}while (INCOMMING_RING_OR_SMS_STATUS == true);									// If "Ring" pin is in low (active) state
 8004194:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <gsm_mode+0x7f0>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f47f ade1 	bne.w	8003d60 <gsm_mode+0x1cc>

			// if no any incoming calls or sms
			incoming_call_status = wait_incoming_call(incoming_number);						// Read answer from GSM
 800419e:	f107 031c 	add.w	r3, r7, #28
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fc16 	bl	80029d4 <wait_incoming_call>
 80041a8:	67f8      	str	r0, [r7, #124]	; 0x7c
			if((INCOMMING_RING_OR_SMS_STATUS == false) && (incoming_call_status == 1))
 80041aa:	4b76      	ldr	r3, [pc, #472]	; (8004384 <gsm_mode+0x7f0>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	f083 0301 	eor.w	r3, r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80c4 	beq.w	8004342 <gsm_mode+0x7ae>
 80041ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 80c0 	bne.w	8004342 <gsm_mode+0x7ae>
			{
				if(incoming_call_status_oled == true)										// print menu, only after incoming call or sms
 80041c2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d05e      	beq.n	8004288 <gsm_mode+0x6f4>
				{
					claen_oled_lines(false, true, true, true, true);
 80041ca:	2301      	movs	r3, #1
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2301      	movs	r3, #1
 80041d0:	2201      	movs	r2, #1
 80041d2:	2101      	movs	r1, #1
 80041d4:	2000      	movs	r0, #0
 80041d6:	f000 ffc3 	bl	8005160 <claen_oled_lines>

					// Print GSM menu <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
					sprintf(str_gsm,"%s", "1.CALL to me");
 80041da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041de:	4a6a      	ldr	r2, [pc, #424]	; (8004388 <gsm_mode+0x7f4>)
 80041e0:	461c      	mov	r4, r3
 80041e2:	4613      	mov	r3, r2
 80041e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041e6:	c407      	stmia	r4!, {r0, r1, r2}
 80041e8:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 16);
 80041ea:	2110      	movs	r1, #16
 80041ec:	2000      	movs	r0, #0
 80041ee:	f001 fe03 	bl	8005df8 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gsm, Font_7x10, White);
 80041f2:	4a66      	ldr	r2, [pc, #408]	; (800438c <gsm_mode+0x7f8>)
 80041f4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80041f8:	2301      	movs	r3, #1
 80041fa:	ca06      	ldmia	r2, {r1, r2}
 80041fc:	f001 fdd6 	bl	8005dac <ssd1306_WriteString>
					memset(str_gsm, 0 , sizeof(str_gsm));
 8004200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004204:	2232      	movs	r2, #50	; 0x32
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f006 fd67 	bl	800acdc <memset>

					sprintf(str_gsm,"%s", "2.CALL on number");
 800420e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004212:	4a5f      	ldr	r2, [pc, #380]	; (8004390 <gsm_mode+0x7fc>)
 8004214:	461c      	mov	r4, r3
 8004216:	4615      	mov	r5, r2
 8004218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 26);
 8004220:	211a      	movs	r1, #26
 8004222:	2000      	movs	r0, #0
 8004224:	f001 fde8 	bl	8005df8 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004228:	4a58      	ldr	r2, [pc, #352]	; (800438c <gsm_mode+0x7f8>)
 800422a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800422e:	2301      	movs	r3, #1
 8004230:	ca06      	ldmia	r2, {r1, r2}
 8004232:	f001 fdbb 	bl	8005dac <ssd1306_WriteString>
					memset(str_gsm, 0 , sizeof(str_gsm));
 8004236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800423a:	2232      	movs	r2, #50	; 0x32
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f006 fd4c 	bl	800acdc <memset>

					sprintf(str_gsm,"%s", "3.For send SMS");
 8004244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <gsm_mode+0x800>)
 800424a:	461c      	mov	r4, r3
 800424c:	4613      	mov	r3, r2
 800424e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004250:	c407      	stmia	r4!, {r0, r1, r2}
 8004252:	8023      	strh	r3, [r4, #0]
 8004254:	3402      	adds	r4, #2
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 36);
 800425a:	2124      	movs	r1, #36	; 0x24
 800425c:	2000      	movs	r0, #0
 800425e:	f001 fdcb 	bl	8005df8 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004262:	4a4a      	ldr	r2, [pc, #296]	; (800438c <gsm_mode+0x7f8>)
 8004264:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004268:	2301      	movs	r3, #1
 800426a:	ca06      	ldmia	r2, {r1, r2}
 800426c:	f001 fd9e 	bl	8005dac <ssd1306_WriteString>
					memset(str_gsm, 0 , sizeof(str_gsm));
 8004270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004274:	2232      	movs	r2, #50	; 0x32
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f006 fd2f 	bl	800acdc <memset>

					ssd1306_UpdateScreen();
 800427e:	f001 fc85 	bl	8005b8c <ssd1306_UpdateScreen>

					incoming_call_status_oled = false;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				}

				HAL_Delay(200);
 8004288:	20c8      	movs	r0, #200	; 0xc8
 800428a:	f002 fa1b 	bl	80066c4 <HAL_Delay>
				sign = read_one_sign_from_keyboard();
 800428e:	f7ff fa7f 	bl	8003790 <read_one_sign_from_keyboard>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

				if(sign == '1')																// Call to me
 8004298:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800429c:	2b31      	cmp	r3, #49	; 0x31
 800429e:	d10d      	bne.n	80042bc <gsm_mode+0x728>
				{
					int call_status = call_on_mu_number();
 80042a0:	f7fe f97a 	bl	8002598 <call_on_mu_number>
 80042a4:	66b8      	str	r0, [r7, #104]	; 0x68
//
//							h = h +10;
//						}
//						ssd1306_UpdateScreen();
//					}
					show_sratus_call (call_status, str_gsm, sign, 1);
 80042a6:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 80042aa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80042ae:	2301      	movs	r3, #1
 80042b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80042b2:	f000 fd1f 	bl	8004cf4 <show_sratus_call>
//					incoming_call_status = wait_incoming_call(incoming_number);				// Read answer from GSM

					incoming_call_status_oled = true;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				}

				if(sign == '2')  															// call on number
 80042bc:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80042c0:	2b32      	cmp	r3, #50	; 0x32
 80042c2:	d13e      	bne.n	8004342 <gsm_mode+0x7ae>
				{
					// 1. Type mobile number.
					char number[13]={0};													// Buffer where will be save entered number
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	731a      	strb	r2, [r3, #12]
					uint8_t size_number = 0;												// How many entered digits in number
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					bool entered_number_status = false;										// Status number buffer.
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					entered_number_status = enter_a_mobile_number(number);					// Enter number
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fe5e 	bl	8004fa4 <enter_a_mobile_number>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

					for(size_number = 0; number[size_number] != '\0'; size_number++){}		// Count digits
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80042f4:	e004      	b.n	8004300 <gsm_mode+0x76c>
 80042f6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80042fa:	3301      	adds	r3, #1
 80042fc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004300:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004304:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004308:	4413      	add	r3, r2
 800430a:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f1      	bne.n	80042f6 <gsm_mode+0x762>

					// 2. Call on entered number.
					if(entered_number_status == true)										// If entered all digits will be call on this number
 8004312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <gsm_mode+0x7a8>
					{
						int call_status = call_on_number(number, size_number);
 800431a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe f991 	bl	800264c <call_on_number>
 800432a:	6638      	str	r0, [r7, #96]	; 0x60
						show_sratus_call(call_status, str_gsm, sign, 0);
 800432c:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8004330:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004334:	2300      	movs	r3, #0
 8004336:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004338:	f000 fcdc 	bl	8004cf4 <show_sratus_call>
					}
					incoming_call_status_oled = true;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

				}
			}


		}while ( sign != '*');     // Select one from 3 modes
 8004342:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004346:	2b2a      	cmp	r3, #42	; 0x2a
 8004348:	f47f ad0a 	bne.w	8003d60 <gsm_mode+0x1cc>
        FINGERPRINT_MODE = false;
        SENSORS_MODE = false;

        return 1;  			 // Flag_fro exit from there
    }
}
 800434c:	e015      	b.n	800437a <gsm_mode+0x7e6>
        HAL_Delay(2000);
 800434e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004352:	f002 f9b7 	bl	80066c4 <HAL_Delay>
        ssd1306_Fill(Black);
 8004356:	2000      	movs	r0, #0
 8004358:	f001 fbf6 	bl	8005b48 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 800435c:	f001 fc16 	bl	8005b8c <ssd1306_UpdateScreen>
        GSM_MODE = false;
 8004360:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <gsm_mode+0x804>)
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
        GPS_MODE = false;
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <gsm_mode+0x808>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
        FINGERPRINT_MODE = false;
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <gsm_mode+0x80c>)
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
        SENSORS_MODE = false;
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <gsm_mode+0x810>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
        return 1;  			 // Flag_fro exit from there
 8004378:	2301      	movs	r3, #1
}
 800437a:	4618      	mov	r0, r3
 800437c:	3780      	adds	r7, #128	; 0x80
 800437e:	46bd      	mov	sp, r7
 8004380:	bdb0      	pop	{r4, r5, r7, pc}
 8004382:	bf00      	nop
 8004384:	200002c8 	.word	0x200002c8
 8004388:	0800ec5c 	.word	0x0800ec5c
 800438c:	20000054 	.word	0x20000054
 8004390:	0800ec6c 	.word	0x0800ec6c
 8004394:	0800ec80 	.word	0x0800ec80
 8004398:	200002c4 	.word	0x200002c4
 800439c:	200002c5 	.word	0x200002c5
 80043a0:	200002c6 	.word	0x200002c6
 80043a4:	200002c7 	.word	0x200002c7

080043a8 <fingerprint_mode>:
// ----------------------------------------------------------------------------
int fingerprint_mode(char sign)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b090      	sub	sp, #64	; 0x40
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	4603      	mov	r3, r0
 80043b0:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f001 fbc8 	bl	8005b48 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80043b8:	f001 fbe8 	bl	8005b8c <ssd1306_UpdateScreen>
	// Fingerprint code place where
	// Print mode in head
	char str_fingerprint[30]={0};
 80043bc:	f107 0310 	add.w	r3, r7, #16
 80043c0:	221e      	movs	r2, #30
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f006 fc89 	bl	800acdc <memset>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 80043ca:	f107 0310 	add.w	r3, r7, #16
 80043ce:	221e      	movs	r2, #30
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f006 fc82 	bl	800acdc <memset>
	sprintf(str_fingerprint,"%s", "3.FINGERPRINT");
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4aca      	ldr	r2, [pc, #808]	; (8004708 <fingerprint_mode+0x360>)
 80043de:	461c      	mov	r4, r3
 80043e0:	4613      	mov	r3, r2
 80043e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e4:	c407      	stmia	r4!, {r0, r1, r2}
 80043e6:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 80043e8:	2100      	movs	r1, #0
 80043ea:	2000      	movs	r0, #0
 80043ec:	f001 fd04 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 80043f0:	4ac6      	ldr	r2, [pc, #792]	; (800470c <fingerprint_mode+0x364>)
 80043f2:	f107 0010 	add.w	r0, r7, #16
 80043f6:	2301      	movs	r3, #1
 80043f8:	ca06      	ldmia	r2, {r1, r2}
 80043fa:	f001 fcd7 	bl	8005dac <ssd1306_WriteString>
	//memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	// Print meu fingerprint
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 80043fe:	f107 0310 	add.w	r3, r7, #16
 8004402:	221e      	movs	r2, #30
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f006 fc68 	bl	800acdc <memset>
	sprintf(str_fingerprint,"%s", "1. Enroll finger");
 800440c:	f107 0310 	add.w	r3, r7, #16
 8004410:	4abf      	ldr	r2, [pc, #764]	; (8004710 <fingerprint_mode+0x368>)
 8004412:	461c      	mov	r4, r3
 8004414:	4615      	mov	r5, r2
 8004416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 16);
 800441e:	2110      	movs	r1, #16
 8004420:	2000      	movs	r0, #0
 8004422:	f001 fce9 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8004426:	4ab9      	ldr	r2, [pc, #740]	; (800470c <fingerprint_mode+0x364>)
 8004428:	f107 0010 	add.w	r0, r7, #16
 800442c:	2301      	movs	r3, #1
 800442e:	ca06      	ldmia	r2, {r1, r2}
 8004430:	f001 fcbc 	bl	8005dac <ssd1306_WriteString>
	//memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	221e      	movs	r2, #30
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f006 fc4d 	bl	800acdc <memset>
	sprintf(str_fingerprint,"%s", "2. ID management");
 8004442:	f107 0310 	add.w	r3, r7, #16
 8004446:	4ab3      	ldr	r2, [pc, #716]	; (8004714 <fingerprint_mode+0x36c>)
 8004448:	461c      	mov	r4, r3
 800444a:	4615      	mov	r5, r2
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 26);
 8004454:	211a      	movs	r1, #26
 8004456:	2000      	movs	r0, #0
 8004458:	f001 fcce 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 800445c:	4aab      	ldr	r2, [pc, #684]	; (800470c <fingerprint_mode+0x364>)
 800445e:	f107 0010 	add.w	r0, r7, #16
 8004462:	2301      	movs	r3, #1
 8004464:	ca06      	ldmia	r2, {r1, r2}
 8004466:	f001 fca1 	bl	8005dac <ssd1306_WriteString>
	//memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 800446a:	f107 0310 	add.w	r3, r7, #16
 800446e:	221e      	movs	r2, #30
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f006 fc32 	bl	800acdc <memset>
	sprintf(str_fingerprint,"%s", "3. Identify");
 8004478:	f107 0310 	add.w	r3, r7, #16
 800447c:	4aa6      	ldr	r2, [pc, #664]	; (8004718 <fingerprint_mode+0x370>)
 800447e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ssd1306_SetCursor(00, 36);
 8004484:	2124      	movs	r1, #36	; 0x24
 8004486:	2000      	movs	r0, #0
 8004488:	f001 fcb6 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 800448c:	4a9f      	ldr	r2, [pc, #636]	; (800470c <fingerprint_mode+0x364>)
 800448e:	f107 0010 	add.w	r0, r7, #16
 8004492:	2301      	movs	r3, #1
 8004494:	ca06      	ldmia	r2, {r1, r2}
 8004496:	f001 fc89 	bl	8005dac <ssd1306_WriteString>
	//memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 800449a:	f107 0310 	add.w	r3, r7, #16
 800449e:	221e      	movs	r2, #30
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f006 fc1a 	bl	800acdc <memset>
	sprintf(str_fingerprint,"%s", "'*' to EXIT");
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	4a9b      	ldr	r2, [pc, #620]	; (800471c <fingerprint_mode+0x374>)
 80044ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80044b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ssd1306_SetCursor(00, 46);
 80044b4:	212e      	movs	r1, #46	; 0x2e
 80044b6:	2000      	movs	r0, #0
 80044b8:	f001 fc9e 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 80044bc:	4a93      	ldr	r2, [pc, #588]	; (800470c <fingerprint_mode+0x364>)
 80044be:	f107 0010 	add.w	r0, r7, #16
 80044c2:	2301      	movs	r3, #1
 80044c4:	ca06      	ldmia	r2, {r1, r2}
 80044c6:	f001 fc71 	bl	8005dac <ssd1306_WriteString>
	//memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	ssd1306_UpdateScreen();
 80044ca:	f001 fb5f 	bl	8005b8c <ssd1306_UpdateScreen>

	// Init fingerprint mogule
	touch_open(0);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fc ff82 	bl	80013d8 <touch_open>
	int u=0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
	for(u = 0; u<=3; u++)
 80044d8:	2300      	movs	r3, #0
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	e00e      	b.n	80044fc <fingerprint_mode+0x154>
	{
		HAL_Delay(50);
 80044de:	2032      	movs	r0, #50	; 0x32
 80044e0:	f002 f8f0 	bl	80066c4 <HAL_Delay>
		touch_bakcklight(0);
 80044e4:	2000      	movs	r0, #0
 80044e6:	f7fc fefb 	bl	80012e0 <touch_bakcklight>
		HAL_Delay(50);
 80044ea:	2032      	movs	r0, #50	; 0x32
 80044ec:	f002 f8ea 	bl	80066c4 <HAL_Delay>
		touch_bakcklight(1);
 80044f0:	2001      	movs	r0, #1
 80044f2:	f7fc fef5 	bl	80012e0 <touch_bakcklight>
	for(u = 0; u<=3; u++)
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	3301      	adds	r3, #1
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	2b03      	cmp	r3, #3
 8004500:	dded      	ble.n	80044de <fingerprint_mode+0x136>
	}

	do                                                            // Whaite for choise
	{
		// Place for sensors code
		HAL_Delay(200);
 8004502:	20c8      	movs	r0, #200	; 0xc8
 8004504:	f002 f8de 	bl	80066c4 <HAL_Delay>
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004508:	f7ff f942 	bl	8003790 <read_one_sign_from_keyboard>
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
	    if(sign == '1')
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b31      	cmp	r3, #49	; 0x31
 8004514:	d13e      	bne.n	8004594 <fingerprint_mode+0x1ec>
	    {
	    	// Clear all OLED
	        ssd1306_Fill(Black);
 8004516:	2000      	movs	r0, #0
 8004518:	f001 fb16 	bl	8005b48 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 800451c:	f001 fb36 	bl	8005b8c <ssd1306_UpdateScreen>
	        // Print mode in head

	        // Ptint selected menu
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	221e      	movs	r2, #30
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f006 fbd7 	bl	800acdc <memset>
	        sprintf(str_fingerprint,"%s", "1. Enroll finger");
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	4a77      	ldr	r2, [pc, #476]	; (8004710 <fingerprint_mode+0x368>)
 8004534:	461c      	mov	r4, r3
 8004536:	4615      	mov	r5, r2
 8004538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800453a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	7023      	strb	r3, [r4, #0]
	        ssd1306_SetCursor(00, 00);
 8004540:	2100      	movs	r1, #0
 8004542:	2000      	movs	r0, #0
 8004544:	f001 fc58 	bl	8005df8 <ssd1306_SetCursor>
	        ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8004548:	4a70      	ldr	r2, [pc, #448]	; (800470c <fingerprint_mode+0x364>)
 800454a:	f107 0010 	add.w	r0, r7, #16
 800454e:	2301      	movs	r3, #1
 8004550:	ca06      	ldmia	r2, {r1, r2}
 8004552:	f001 fc2b 	bl	8005dac <ssd1306_WriteString>
	        //memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	        ssd1306_UpdateScreen();
 8004556:	f001 fb19 	bl	8005b8c <ssd1306_UpdateScreen>

	        do                                                            // Whaite for choise
	        {
	            // Place for code function 1

	            sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 800455a:	f7ff f919 	bl	8003790 <read_one_sign_from_keyboard>
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]

	            if(sign == '*')    // If select EXIT  // Exit in main menu
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b2a      	cmp	r3, #42	; 0x2a
 8004566:	d112      	bne.n	800458e <fingerprint_mode+0x1e6>
	            {
	            	// Clear all OLED
	            	ssd1306_Fill(Black);
 8004568:	2000      	movs	r0, #0
 800456a:	f001 faed 	bl	8005b48 <ssd1306_Fill>
	            	ssd1306_UpdateScreen();
 800456e:	f001 fb0d 	bl	8005b8c <ssd1306_UpdateScreen>

	            	GPS_MODE = false;
 8004572:	4b6b      	ldr	r3, [pc, #428]	; (8004720 <fingerprint_mode+0x378>)
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
	            	GSM_MODE = false;
 8004578:	4b6a      	ldr	r3, [pc, #424]	; (8004724 <fingerprint_mode+0x37c>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
	            	FINGERPRINT_MODE = false;
 800457e:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <fingerprint_mode+0x380>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
	            	SENSORS_MODE = false;
 8004584:	4b69      	ldr	r3, [pc, #420]	; (800472c <fingerprint_mode+0x384>)
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]

	            	return 1;          // Flag_fro exit from there
 800458a:	2301      	movs	r3, #1
 800458c:	e1dc      	b.n	8004948 <fingerprint_mode+0x5a0>
	            }
	         }while (sign != '*');     // Select EXIT
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b2a      	cmp	r3, #42	; 0x2a
 8004592:	d1e2      	bne.n	800455a <fingerprint_mode+0x1b2>
	     }

	     if(sign == '2')
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b32      	cmp	r3, #50	; 0x32
 8004598:	d13e      	bne.n	8004618 <fingerprint_mode+0x270>
	     {
	        // Clear all OLED
	        ssd1306_Fill(Black);
 800459a:	2000      	movs	r0, #0
 800459c:	f001 fad4 	bl	8005b48 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 80045a0:	f001 faf4 	bl	8005b8c <ssd1306_UpdateScreen>
	        // Print mode in head

	        // Ptint selected menu
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	221e      	movs	r2, #30
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f006 fb95 	bl	800acdc <memset>
	        sprintf(str_fingerprint,"%s", "2. ID management");
 80045b2:	f107 0310 	add.w	r3, r7, #16
 80045b6:	4a57      	ldr	r2, [pc, #348]	; (8004714 <fingerprint_mode+0x36c>)
 80045b8:	461c      	mov	r4, r3
 80045ba:	4615      	mov	r5, r2
 80045bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	7023      	strb	r3, [r4, #0]
	        ssd1306_SetCursor(00, 00);
 80045c4:	2100      	movs	r1, #0
 80045c6:	2000      	movs	r0, #0
 80045c8:	f001 fc16 	bl	8005df8 <ssd1306_SetCursor>
	        ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 80045cc:	4a4f      	ldr	r2, [pc, #316]	; (800470c <fingerprint_mode+0x364>)
 80045ce:	f107 0010 	add.w	r0, r7, #16
 80045d2:	2301      	movs	r3, #1
 80045d4:	ca06      	ldmia	r2, {r1, r2}
 80045d6:	f001 fbe9 	bl	8005dac <ssd1306_WriteString>
	        //memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	        ssd1306_UpdateScreen();
 80045da:	f001 fad7 	bl	8005b8c <ssd1306_UpdateScreen>

	        do                                                            // Whaite for choise
	        {
	        	// Place for code function 2

	        	sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80045de:	f7ff f8d7 	bl	8003790 <read_one_sign_from_keyboard>
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]

	            if(sign == '*')    // If select EXIT  // Exit in main menu
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ea:	d112      	bne.n	8004612 <fingerprint_mode+0x26a>
	            {
	                // Clear all OLED
	                ssd1306_Fill(Black);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f001 faab 	bl	8005b48 <ssd1306_Fill>
	                ssd1306_UpdateScreen();
 80045f2:	f001 facb 	bl	8005b8c <ssd1306_UpdateScreen>

	                GPS_MODE = false;
 80045f6:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <fingerprint_mode+0x378>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
	                GSM_MODE = false;
 80045fc:	4b49      	ldr	r3, [pc, #292]	; (8004724 <fingerprint_mode+0x37c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
	                FINGERPRINT_MODE = false;
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <fingerprint_mode+0x380>)
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
	                SENSORS_MODE = false;
 8004608:	4b48      	ldr	r3, [pc, #288]	; (800472c <fingerprint_mode+0x384>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]

	                return 1;          // Flag_fro exit from there
 800460e:	2301      	movs	r3, #1
 8004610:	e19a      	b.n	8004948 <fingerprint_mode+0x5a0>
	            }
	         }while (sign != '*');     // Select EXIT
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	2b2a      	cmp	r3, #42	; 0x2a
 8004616:	d1e2      	bne.n	80045de <fingerprint_mode+0x236>
	      }

	      if(sign == '3')
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b33      	cmp	r3, #51	; 0x33
 800461c:	f040 8171 	bne.w	8004902 <fingerprint_mode+0x55a>
	      {
	    	  // Clear all OLED
	          ssd1306_Fill(Black);
 8004620:	2000      	movs	r0, #0
 8004622:	f001 fa91 	bl	8005b48 <ssd1306_Fill>
	          ssd1306_UpdateScreen();
 8004626:	f001 fab1 	bl	8005b8c <ssd1306_UpdateScreen>
	          // Print mode in head

	          // Ptint selected menu
	          memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 800462a:	f107 0310 	add.w	r3, r7, #16
 800462e:	221e      	movs	r2, #30
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f006 fb52 	bl	800acdc <memset>
	          sprintf(str_fingerprint,"%s", "3. Identify");
 8004638:	f107 0310 	add.w	r3, r7, #16
 800463c:	4a36      	ldr	r2, [pc, #216]	; (8004718 <fingerprint_mode+0x370>)
 800463e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	          ssd1306_SetCursor(00, 00);
 8004644:	2100      	movs	r1, #0
 8004646:	2000      	movs	r0, #0
 8004648:	f001 fbd6 	bl	8005df8 <ssd1306_SetCursor>
	          ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 800464c:	4a2f      	ldr	r2, [pc, #188]	; (800470c <fingerprint_mode+0x364>)
 800464e:	f107 0010 	add.w	r0, r7, #16
 8004652:	2301      	movs	r3, #1
 8004654:	ca06      	ldmia	r2, {r1, r2}
 8004656:	f001 fba9 	bl	8005dac <ssd1306_WriteString>
	          //memset(str_fingerprint, 0 , sizeof(str_fingerprint));

	          ssd1306_UpdateScreen();
 800465a:	f001 fa97 	bl	8005b8c <ssd1306_UpdateScreen>

	          do                                                            // Whaite for choise
	          {
	        	  	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 800465e:	f107 0310 	add.w	r3, r7, #16
 8004662:	221e      	movs	r2, #30
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f006 fb38 	bl	800acdc <memset>
	        	 	sprintf(str_fingerprint,"%s", "Put your finger..");
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <fingerprint_mode+0x388>)
 8004672:	461c      	mov	r4, r3
 8004674:	4615      	mov	r5, r2
 8004676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800467a:	682b      	ldr	r3, [r5, #0]
 800467c:	8023      	strh	r3, [r4, #0]
	        	 	ssd1306_SetCursor(00, 16);
 800467e:	2110      	movs	r1, #16
 8004680:	2000      	movs	r0, #0
 8004682:	f001 fbb9 	bl	8005df8 <ssd1306_SetCursor>
	        	 	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8004686:	4a21      	ldr	r2, [pc, #132]	; (800470c <fingerprint_mode+0x364>)
 8004688:	f107 0010 	add.w	r0, r7, #16
 800468c:	2301      	movs	r3, #1
 800468e:	ca06      	ldmia	r2, {r1, r2}
 8004690:	f001 fb8c 	bl	8005dac <ssd1306_WriteString>
	        	 	//memset(str_fingerprint, 0 , sizeof(str_fingerprint));
	        	 	ssd1306_UpdateScreen();
 8004694:	f001 fa7a 	bl	8005b8c <ssd1306_UpdateScreen>

	        	 	//HAL_Delay(500);
	        	 	uint8_t ID = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	        	 	ID = identify();
 800469e:	f7fc fee1 	bl	8001464 <identify>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	        	 	/////////////////////////////
	        	 	if(ID == 0)
 80046a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d154      	bne.n	800475a <fingerprint_mode+0x3b2>
	        	 	{
	        	 		// Make blinky
	        	 		static bool triger = false;
	        	 		if(triger == false)
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <fingerprint_mode+0x38c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f083 0301 	eor.w	r3, r3, #1
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03e      	beq.n	800473c <fingerprint_mode+0x394>
	        	 		{
	        	 			memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 80046be:	f107 0310 	add.w	r3, r7, #16
 80046c2:	221e      	movs	r2, #30
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f006 fb08 	bl	800acdc <memset>
	        	 			sprintf(str_fingerprint,"%s", "Access denied   ");
 80046cc:	f107 0310 	add.w	r3, r7, #16
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <fingerprint_mode+0x390>)
 80046d2:	461c      	mov	r4, r3
 80046d4:	4615      	mov	r5, r2
 80046d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	7023      	strb	r3, [r4, #0]
	        	 			ssd1306_SetCursor(00, 26);
 80046de:	211a      	movs	r1, #26
 80046e0:	2000      	movs	r0, #0
 80046e2:	f001 fb89 	bl	8005df8 <ssd1306_SetCursor>
	        	 			ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <fingerprint_mode+0x364>)
 80046e8:	f107 0010 	add.w	r0, r7, #16
 80046ec:	2301      	movs	r3, #1
 80046ee:	ca06      	ldmia	r2, {r1, r2}
 80046f0:	f001 fb5c 	bl	8005dac <ssd1306_WriteString>
	        	 			ssd1306_UpdateScreen();
 80046f4:	f001 fa4a 	bl	8005b8c <ssd1306_UpdateScreen>
	        	 			HAL_Delay(400);
 80046f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80046fc:	f001 ffe2 	bl	80066c4 <HAL_Delay>

	        	 			triger = true;
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <fingerprint_mode+0x38c>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e028      	b.n	800475a <fingerprint_mode+0x3b2>
 8004708:	0800ece0 	.word	0x0800ece0
 800470c:	20000054 	.word	0x20000054
 8004710:	0800ecf0 	.word	0x0800ecf0
 8004714:	0800ed04 	.word	0x0800ed04
 8004718:	0800ed18 	.word	0x0800ed18
 800471c:	0800ed24 	.word	0x0800ed24
 8004720:	200002c5 	.word	0x200002c5
 8004724:	200002c4 	.word	0x200002c4
 8004728:	200002c6 	.word	0x200002c6
 800472c:	200002c7 	.word	0x200002c7
 8004730:	0800ed30 	.word	0x0800ed30
 8004734:	200002cb 	.word	0x200002cb
 8004738:	0800ed44 	.word	0x0800ed44
	        	 		}
	        	 		else
	        	 		{
	        	 			claen_oled_lines(false, false, true, false, false);
 800473c:	2300      	movs	r3, #0
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2300      	movs	r3, #0
 8004742:	2201      	movs	r2, #1
 8004744:	2100      	movs	r1, #0
 8004746:	2000      	movs	r0, #0
 8004748:	f000 fd0a 	bl	8005160 <claen_oled_lines>
	        	 			triger = false;
 800474c:	4b80      	ldr	r3, [pc, #512]	; (8004950 <fingerprint_mode+0x5a8>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
	        	 			HAL_Delay(400);
 8004752:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004756:	f001 ffb5 	bl	80066c4 <HAL_Delay>
	        	 		}
	        	 	}
	        	 	// Print on OLED
	        	 	if(ID >=1)
 800475a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80b1 	beq.w	80048c6 <fingerprint_mode+0x51e>
	        	 	{
	        	 		claen_oled_lines(false, false, true, false, false);			// Clear previous OLED line
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	2201      	movs	r2, #1
 800476c:	2100      	movs	r1, #0
 800476e:	2000      	movs	r0, #0
 8004770:	f000 fcf6 	bl	8005160 <claen_oled_lines>

	        	 		memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8004774:	f107 0310 	add.w	r3, r7, #16
 8004778:	221e      	movs	r2, #30
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f006 faad 	bl	800acdc <memset>
	        	 		sprintf(str_fingerprint,"%s", "Your ID: ");					// Add ID to the end of it string
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	4a73      	ldr	r2, [pc, #460]	; (8004954 <fingerprint_mode+0x5ac>)
 8004788:	ca07      	ldmia	r2, {r0, r1, r2}
 800478a:	c303      	stmia	r3!, {r0, r1}
 800478c:	801a      	strh	r2, [r3, #0]

	        	 		// 1. Convert ID number in char
	        	 		char units = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	        	 		char dozens = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	        	 		char hundreds = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	        	 		char string_ID[4] = {0};
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]

	        	 		hundreds = ID/100;
 80047a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80047a8:	4a6b      	ldr	r2, [pc, #428]	; (8004958 <fingerprint_mode+0x5b0>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	        	 		dozens = (ID/10)%10;
 80047b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80047b8:	4a68      	ldr	r2, [pc, #416]	; (800495c <fingerprint_mode+0x5b4>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	08db      	lsrs	r3, r3, #3
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b66      	ldr	r3, [pc, #408]	; (800495c <fingerprint_mode+0x5b4>)
 80047c4:	fba3 1302 	umull	r1, r3, r3, r2
 80047c8:	08d9      	lsrs	r1, r3, #3
 80047ca:	460b      	mov	r3, r1
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	        	 		units = ID%10;
 80047d8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80047dc:	4b5f      	ldr	r3, [pc, #380]	; (800495c <fingerprint_mode+0x5b4>)
 80047de:	fba3 1302 	umull	r1, r3, r3, r2
 80047e2:	08d9      	lsrs	r1, r3, #3
 80047e4:	460b      	mov	r3, r1
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	        	 		string_ID[0] = hundreds + 48;
 80047f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047f6:	3330      	adds	r3, #48	; 0x30
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	733b      	strb	r3, [r7, #12]
	        	 		string_ID[1] = dozens + 48;
 80047fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004800:	3330      	adds	r3, #48	; 0x30
 8004802:	b2db      	uxtb	r3, r3
 8004804:	737b      	strb	r3, [r7, #13]
	        	 		string_ID[2] = units + 48;
 8004806:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800480a:	3330      	adds	r3, #48	; 0x30
 800480c:	b2db      	uxtb	r3, r3
 800480e:	73bb      	strb	r3, [r7, #14]
	        	 		string_ID[3] = '\0';
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
//	        	 		{
//	        	 			int l = 9999;
//	        	 		}

	        	 		// 2. Add string wit ID to str_fingerprint.
	        	 		uint8_t i =0;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//	        	 			str_fingerprint[i] = string_ID[k];
//	        	 			i++;
//	        	 		}


	        	 		for(i = 0; i<= 11; i++)
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004820:	e03c      	b.n	800489c <fingerprint_mode+0x4f4>
	        	 		{
	        	 			if(str_fingerprint[i] == '\0')
 8004822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800482a:	4413      	add	r3, r2
 800482c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d12e      	bne.n	8004892 <fingerprint_mode+0x4ea>
	        	 			{
	        	 				str_fingerprint[i] = string_ID[0];
 8004834:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004838:	7b3a      	ldrb	r2, [r7, #12]
 800483a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800483e:	440b      	add	r3, r1
 8004840:	f803 2c28 	strb.w	r2, [r3, #-40]
	        	 				i++;
 8004844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004848:	3301      	adds	r3, #1
 800484a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	        	 				str_fingerprint[i] = string_ID[1];
 800484e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004852:	7b7a      	ldrb	r2, [r7, #13]
 8004854:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004858:	440b      	add	r3, r1
 800485a:	f803 2c28 	strb.w	r2, [r3, #-40]
	        	 				i++;
 800485e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004862:	3301      	adds	r3, #1
 8004864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	        	 				str_fingerprint[i] = string_ID[2];
 8004868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800486c:	7bba      	ldrb	r2, [r7, #14]
 800486e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004872:	440b      	add	r3, r1
 8004874:	f803 2c28 	strb.w	r2, [r3, #-40]
	        	 				i++;
 8004878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800487c:	3301      	adds	r3, #1
 800487e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	        	 				str_fingerprint[i] = string_ID[3];
 8004882:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800488c:	440b      	add	r3, r1
 800488e:	f803 2c28 	strb.w	r2, [r3, #-40]
	        	 		for(i = 0; i<= 11; i++)
 8004892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004896:	3301      	adds	r3, #1
 8004898:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800489c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048a0:	2b0b      	cmp	r3, #11
 80048a2:	d9be      	bls.n	8004822 <fingerprint_mode+0x47a>
	        	 			}
	        	 		}

	        	 		// 3. Print ID on OLED.
	        	 		ssd1306_SetCursor(00, 26);
 80048a4:	211a      	movs	r1, #26
 80048a6:	2000      	movs	r0, #0
 80048a8:	f001 faa6 	bl	8005df8 <ssd1306_SetCursor>
	        	 		ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <fingerprint_mode+0x5b8>)
 80048ae:	f107 0010 	add.w	r0, r7, #16
 80048b2:	2301      	movs	r3, #1
 80048b4:	ca06      	ldmia	r2, {r1, r2}
 80048b6:	f001 fa79 	bl	8005dac <ssd1306_WriteString>
	        	 		ssd1306_UpdateScreen();
 80048ba:	f001 f967 	bl	8005b8c <ssd1306_UpdateScreen>

	        	 		HAL_Delay(2000);
 80048be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80048c2:	f001 feff 	bl	80066c4 <HAL_Delay>
	        	 	}


	               sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80048c6:	f7fe ff63 	bl	8003790 <read_one_sign_from_keyboard>
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]

	               if(sign == '*')    // If select EXIT  // Exit in main menu
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b2a      	cmp	r3, #42	; 0x2a
 80048d2:	d112      	bne.n	80048fa <fingerprint_mode+0x552>
	               {
	                   // Clear all OLED
	                   ssd1306_Fill(Black);
 80048d4:	2000      	movs	r0, #0
 80048d6:	f001 f937 	bl	8005b48 <ssd1306_Fill>
	                   ssd1306_UpdateScreen();
 80048da:	f001 f957 	bl	8005b8c <ssd1306_UpdateScreen>

	                   GPS_MODE = false;
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <fingerprint_mode+0x5bc>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
	                   GSM_MODE = false;
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <fingerprint_mode+0x5c0>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
	                   FINGERPRINT_MODE = false;
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <fingerprint_mode+0x5c4>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
	                   SENSORS_MODE = false;
 80048f0:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <fingerprint_mode+0x5c8>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]

	                   return 1;          // Flag_fro exit from there
 80048f6:	2301      	movs	r3, #1
 80048f8:	e026      	b.n	8004948 <fingerprint_mode+0x5a0>
	                }
	           }while (sign != '*');     // Select EXIT
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b2a      	cmp	r3, #42	; 0x2a
 80048fe:	f47f aeae 	bne.w	800465e <fingerprint_mode+0x2b6>
	       }

		   if(sign == '*')    // If select EXIT  // Exit in main menu
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	2b2a      	cmp	r3, #42	; 0x2a
 8004906:	d112      	bne.n	800492e <fingerprint_mode+0x586>
		   {
			    // Clear all OLED
				ssd1306_Fill(Black);
 8004908:	2000      	movs	r0, #0
 800490a:	f001 f91d 	bl	8005b48 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800490e:	f001 f93d 	bl	8005b8c <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <fingerprint_mode+0x5bc>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <fingerprint_mode+0x5c0>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <fingerprint_mode+0x5c4>)
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <fingerprint_mode+0x5c8>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 800492a:	2301      	movs	r3, #1
 800492c:	e00c      	b.n	8004948 <fingerprint_mode+0x5a0>
			}
		   }while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	2b31      	cmp	r3, #49	; 0x31
 8004932:	d009      	beq.n	8004948 <fingerprint_mode+0x5a0>
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	2b32      	cmp	r3, #50	; 0x32
 8004938:	d006      	beq.n	8004948 <fingerprint_mode+0x5a0>
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b33      	cmp	r3, #51	; 0x33
 800493e:	d003      	beq.n	8004948 <fingerprint_mode+0x5a0>
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	2b2a      	cmp	r3, #42	; 0x2a
 8004944:	f47f addd 	bne.w	8004502 <fingerprint_mode+0x15a>
}
 8004948:	4618      	mov	r0, r3
 800494a:	3738      	adds	r7, #56	; 0x38
 800494c:	46bd      	mov	sp, r7
 800494e:	bdb0      	pop	{r4, r5, r7, pc}
 8004950:	200002cb 	.word	0x200002cb
 8004954:	0800ed58 	.word	0x0800ed58
 8004958:	51eb851f 	.word	0x51eb851f
 800495c:	cccccccd 	.word	0xcccccccd
 8004960:	20000054 	.word	0x20000054
 8004964:	200002c5 	.word	0x200002c5
 8004968:	200002c4 	.word	0x200002c4
 800496c:	200002c6 	.word	0x200002c6
 8004970:	200002c7 	.word	0x200002c7

08004974 <sensors_mode>:
// ----------------------------------------------------------------------------

int sensors_mode(char sign)
{
 8004974:	b5b0      	push	{r4, r5, r7, lr}
 8004976:	b090      	sub	sp, #64	; 0x40
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
		// Clear all OLED
		ssd1306_Fill(Black);
 800497e:	2000      	movs	r0, #0
 8004980:	f001 f8e2 	bl	8005b48 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8004984:	f001 f902 	bl	8005b8c <ssd1306_UpdateScreen>
		// Sensors code place where
		// Print mode in head
		char str_sensors[50]={0};
 8004988:	f107 0308 	add.w	r3, r7, #8
 800498c:	2232      	movs	r2, #50	; 0x32
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f006 f9a3 	bl	800acdc <memset>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	2232      	movs	r2, #50	; 0x32
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f006 f99c 	bl	800acdc <memset>
		sprintf(str_sensors,"%s", "4.SENSORS");
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	4ac7      	ldr	r2, [pc, #796]	; (8004cc8 <sensors_mode+0x354>)
 80049aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80049ac:	c303      	stmia	r3!, {r0, r1}
 80049ae:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 80049b0:	2100      	movs	r1, #0
 80049b2:	2000      	movs	r0, #0
 80049b4:	f001 fa20 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 80049b8:	4ac4      	ldr	r2, [pc, #784]	; (8004ccc <sensors_mode+0x358>)
 80049ba:	f107 0008 	add.w	r0, r7, #8
 80049be:	2301      	movs	r3, #1
 80049c0:	ca06      	ldmia	r2, {r1, r2}
 80049c2:	f001 f9f3 	bl	8005dac <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	2232      	movs	r2, #50	; 0x32
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f006 f984 	bl	800acdc <memset>

		// Print meu fingerprint
		memset(str_sensors, 0 , sizeof(str_sensors));
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	2232      	movs	r2, #50	; 0x32
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f006 f97d 	bl	800acdc <memset>
		sprintf(str_sensors,"%s", "1. Run all sensors");
 80049e2:	f107 0308 	add.w	r3, r7, #8
 80049e6:	4aba      	ldr	r2, [pc, #744]	; (8004cd0 <sensors_mode+0x35c>)
 80049e8:	461c      	mov	r4, r3
 80049ea:	4615      	mov	r5, r2
 80049ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	8022      	strh	r2, [r4, #0]
 80049f6:	3402      	adds	r4, #2
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 80049fc:	2110      	movs	r1, #16
 80049fe:	2000      	movs	r0, #0
 8004a00:	f001 f9fa 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004a04:	4ab1      	ldr	r2, [pc, #708]	; (8004ccc <sensors_mode+0x358>)
 8004a06:	f107 0008 	add.w	r0, r7, #8
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	ca06      	ldmia	r2, {r1, r2}
 8004a0e:	f001 f9cd 	bl	8005dac <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8004a12:	f107 0308 	add.w	r3, r7, #8
 8004a16:	2232      	movs	r2, #50	; 0x32
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f006 f95e 	bl	800acdc <memset>

		memset(str_sensors, 0 , sizeof(str_sensors));
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	2232      	movs	r2, #50	; 0x32
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f006 f957 	bl	800acdc <memset>
		sprintf(str_sensors,"%s", "2. function 2");
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	4aa8      	ldr	r2, [pc, #672]	; (8004cd4 <sensors_mode+0x360>)
 8004a34:	461c      	mov	r4, r3
 8004a36:	4613      	mov	r3, r2
 8004a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a3a:	c407      	stmia	r4!, {r0, r1, r2}
 8004a3c:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8004a3e:	211a      	movs	r1, #26
 8004a40:	2000      	movs	r0, #0
 8004a42:	f001 f9d9 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004a46:	4aa1      	ldr	r2, [pc, #644]	; (8004ccc <sensors_mode+0x358>)
 8004a48:	f107 0008 	add.w	r0, r7, #8
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	ca06      	ldmia	r2, {r1, r2}
 8004a50:	f001 f9ac 	bl	8005dac <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8004a54:	f107 0308 	add.w	r3, r7, #8
 8004a58:	2232      	movs	r2, #50	; 0x32
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f006 f93d 	bl	800acdc <memset>

		memset(str_sensors, 0 , sizeof(str_sensors));
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	2232      	movs	r2, #50	; 0x32
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f006 f936 	bl	800acdc <memset>
		sprintf(str_sensors,"%s", "3. function 3");
 8004a70:	f107 0308 	add.w	r3, r7, #8
 8004a74:	4a98      	ldr	r2, [pc, #608]	; (8004cd8 <sensors_mode+0x364>)
 8004a76:	461c      	mov	r4, r3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a7c:	c407      	stmia	r4!, {r0, r1, r2}
 8004a7e:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8004a80:	2124      	movs	r1, #36	; 0x24
 8004a82:	2000      	movs	r0, #0
 8004a84:	f001 f9b8 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004a88:	4a90      	ldr	r2, [pc, #576]	; (8004ccc <sensors_mode+0x358>)
 8004a8a:	f107 0008 	add.w	r0, r7, #8
 8004a8e:	2301      	movs	r3, #1
 8004a90:	ca06      	ldmia	r2, {r1, r2}
 8004a92:	f001 f98b 	bl	8005dac <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	2232      	movs	r2, #50	; 0x32
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f006 f91c 	bl	800acdc <memset>

		ssd1306_UpdateScreen();
 8004aa4:	f001 f872 	bl	8005b8c <ssd1306_UpdateScreen>

		do                                                            // Whaite for choise
			{
			// Place for sensors code

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004aa8:	f7fe fe72 	bl	8003790 <read_one_sign_from_keyboard>
 8004aac:	4603      	mov	r3, r0
 8004aae:	71fb      	strb	r3, [r7, #7]
            if(sign == '1')
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	2b31      	cmp	r3, #49	; 0x31
 8004ab4:	d150      	bne.n	8004b58 <sensors_mode+0x1e4>
            {
            	// Clear all OLED
            	ssd1306_Fill(Black);
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f001 f846 	bl	8005b48 <ssd1306_Fill>
            	ssd1306_UpdateScreen();
 8004abc:	f001 f866 	bl	8005b8c <ssd1306_UpdateScreen>

            	// Ptint selected menu
            	memset(str_sensors, 0 , sizeof(str_sensors));
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	2232      	movs	r2, #50	; 0x32
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f006 f907 	bl	800acdc <memset>
            	sprintf(str_sensors,"%s", "1. Run all sensors");
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	4a7f      	ldr	r2, [pc, #508]	; (8004cd0 <sensors_mode+0x35c>)
 8004ad4:	461c      	mov	r4, r3
 8004ad6:	4615      	mov	r5, r2
 8004ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	8022      	strh	r2, [r4, #0]
 8004ae2:	3402      	adds	r4, #2
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	7023      	strb	r3, [r4, #0]
            	ssd1306_SetCursor(00, 00);
 8004ae8:	2100      	movs	r1, #0
 8004aea:	2000      	movs	r0, #0
 8004aec:	f001 f984 	bl	8005df8 <ssd1306_SetCursor>
            	ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004af0:	4a76      	ldr	r2, [pc, #472]	; (8004ccc <sensors_mode+0x358>)
 8004af2:	f107 0008 	add.w	r0, r7, #8
 8004af6:	2301      	movs	r3, #1
 8004af8:	ca06      	ldmia	r2, {r1, r2}
 8004afa:	f001 f957 	bl	8005dac <ssd1306_WriteString>
            	memset(str_sensors, 0 , sizeof(str_sensors));
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	2232      	movs	r2, #50	; 0x32
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f006 f8e8 	bl	800acdc <memset>

            	ssd1306_UpdateScreen();
 8004b0c:	f001 f83e 	bl	8005b8c <ssd1306_UpdateScreen>

            	do                                                            // Whaite for choise
            	{
            		// Place for code function 1
            		// Create timer for measure
            		read_T_and_H_SI7021();
 8004b10:	f7fe f848 	bl	8002ba4 <read_T_and_H_SI7021>
            		int select_print_data = 4;							// Flag for print sensors data on OLED
 8004b14:	2304      	movs	r3, #4
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
            		OLED_prinr_all_data(select_print_data);
 8004b18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b1a:	f000 fc7f 	bl	800541c <OLED_prinr_all_data>

            		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004b1e:	f7fe fe37 	bl	8003790 <read_one_sign_from_keyboard>
 8004b22:	4603      	mov	r3, r0
 8004b24:	71fb      	strb	r3, [r7, #7]

            		if(sign == '*')    // If select EXIT  // Exit in main menu
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2a:	d112      	bne.n	8004b52 <sensors_mode+0x1de>
            		{
            			// Stop timer for measure

            			// Clear all OLED
            			ssd1306_Fill(Black);
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f001 f80b 	bl	8005b48 <ssd1306_Fill>
            			ssd1306_UpdateScreen();
 8004b32:	f001 f82b 	bl	8005b8c <ssd1306_UpdateScreen>

            			GPS_MODE = false;
 8004b36:	4b69      	ldr	r3, [pc, #420]	; (8004cdc <sensors_mode+0x368>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
            			GSM_MODE = false;
 8004b3c:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <sensors_mode+0x36c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
            			FINGERPRINT_MODE = false;
 8004b42:	4b68      	ldr	r3, [pc, #416]	; (8004ce4 <sensors_mode+0x370>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
            			SENSORS_MODE = false;
 8004b48:	4b67      	ldr	r3, [pc, #412]	; (8004ce8 <sensors_mode+0x374>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]

            			return 1;          // Flag_fro exit from there
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0b5      	b.n	8004cbe <sensors_mode+0x34a>
            		}
            	}while (sign != '*');     // Select EXIT
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	2b2a      	cmp	r3, #42	; 0x2a
 8004b56:	d1db      	bne.n	8004b10 <sensors_mode+0x19c>
            }

            if(sign == '2')
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b32      	cmp	r3, #50	; 0x32
 8004b5c:	d144      	bne.n	8004be8 <sensors_mode+0x274>
            {
                // Clear all OLED
                ssd1306_Fill(Black);
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f000 fff2 	bl	8005b48 <ssd1306_Fill>
               	ssd1306_UpdateScreen();
 8004b64:	f001 f812 	bl	8005b8c <ssd1306_UpdateScreen>

                // Ptint selected menu
                memset(str_sensors, 0 , sizeof(str_sensors));
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	2232      	movs	r2, #50	; 0x32
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f006 f8b3 	bl	800acdc <memset>
                sprintf(str_sensors,"%s", "1. function 2");
 8004b76:	f107 0308 	add.w	r3, r7, #8
 8004b7a:	4a5c      	ldr	r2, [pc, #368]	; (8004cec <sensors_mode+0x378>)
 8004b7c:	461c      	mov	r4, r3
 8004b7e:	4613      	mov	r3, r2
 8004b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b82:	c407      	stmia	r4!, {r0, r1, r2}
 8004b84:	8023      	strh	r3, [r4, #0]
                ssd1306_SetCursor(00, 00);
 8004b86:	2100      	movs	r1, #0
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f001 f935 	bl	8005df8 <ssd1306_SetCursor>
                ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004b8e:	4a4f      	ldr	r2, [pc, #316]	; (8004ccc <sensors_mode+0x358>)
 8004b90:	f107 0008 	add.w	r0, r7, #8
 8004b94:	2301      	movs	r3, #1
 8004b96:	ca06      	ldmia	r2, {r1, r2}
 8004b98:	f001 f908 	bl	8005dac <ssd1306_WriteString>
                memset(str_sensors, 0 , sizeof(str_sensors));
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	2232      	movs	r2, #50	; 0x32
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f006 f899 	bl	800acdc <memset>

                ssd1306_UpdateScreen();
 8004baa:	f000 ffef 	bl	8005b8c <ssd1306_UpdateScreen>

                do                                                            // Whaite for choise
                {
                       // Place for code function 2

                       sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004bae:	f7fe fdef 	bl	8003790 <read_one_sign_from_keyboard>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]

                       if(sign == '*')    // If select EXIT  // Exit in main menu
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d112      	bne.n	8004be2 <sensors_mode+0x26e>
                       {
                            // Clear all OLED
                            ssd1306_Fill(Black);
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f000 ffc3 	bl	8005b48 <ssd1306_Fill>
                            ssd1306_UpdateScreen();
 8004bc2:	f000 ffe3 	bl	8005b8c <ssd1306_UpdateScreen>

                            GPS_MODE = false;
 8004bc6:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <sensors_mode+0x368>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
                            GSM_MODE = false;
 8004bcc:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <sensors_mode+0x36c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
                            FINGERPRINT_MODE = false;
 8004bd2:	4b44      	ldr	r3, [pc, #272]	; (8004ce4 <sensors_mode+0x370>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
                            SENSORS_MODE = false;
 8004bd8:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <sensors_mode+0x374>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]

                            return 1;          // Flag_fro exit from there
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06d      	b.n	8004cbe <sensors_mode+0x34a>
                       }
                 }while (sign != '*');     // Select EXIT
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2b2a      	cmp	r3, #42	; 0x2a
 8004be6:	d1e2      	bne.n	8004bae <sensors_mode+0x23a>

                // Place for code function 2
            }

            if(sign == '3')
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	2b33      	cmp	r3, #51	; 0x33
 8004bec:	d144      	bne.n	8004c78 <sensors_mode+0x304>
            {
                 // Clear all OLED
                 ssd1306_Fill(Black);
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f000 ffaa 	bl	8005b48 <ssd1306_Fill>
                 ssd1306_UpdateScreen();
 8004bf4:	f000 ffca 	bl	8005b8c <ssd1306_UpdateScreen>
                 // Print mode in head

                 // Ptint selected menu
                 memset(str_sensors, 0 , sizeof(str_sensors));
 8004bf8:	f107 0308 	add.w	r3, r7, #8
 8004bfc:	2232      	movs	r2, #50	; 0x32
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f006 f86b 	bl	800acdc <memset>
                 sprintf(str_sensors,"%s", "1. function 3");
 8004c06:	f107 0308 	add.w	r3, r7, #8
 8004c0a:	4a39      	ldr	r2, [pc, #228]	; (8004cf0 <sensors_mode+0x37c>)
 8004c0c:	461c      	mov	r4, r3
 8004c0e:	4613      	mov	r3, r2
 8004c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c12:	c407      	stmia	r4!, {r0, r1, r2}
 8004c14:	8023      	strh	r3, [r4, #0]
                 ssd1306_SetCursor(00, 00);
 8004c16:	2100      	movs	r1, #0
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f001 f8ed 	bl	8005df8 <ssd1306_SetCursor>
                 ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004c1e:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <sensors_mode+0x358>)
 8004c20:	f107 0008 	add.w	r0, r7, #8
 8004c24:	2301      	movs	r3, #1
 8004c26:	ca06      	ldmia	r2, {r1, r2}
 8004c28:	f001 f8c0 	bl	8005dac <ssd1306_WriteString>
                 memset(str_sensors, 0 , sizeof(str_sensors));
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	2232      	movs	r2, #50	; 0x32
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f006 f851 	bl	800acdc <memset>

                 ssd1306_UpdateScreen();
 8004c3a:	f000 ffa7 	bl	8005b8c <ssd1306_UpdateScreen>

                 do                                                            // Whaite for choise
                 {
                      // Place for code function 3

                      sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004c3e:	f7fe fda7 	bl	8003790 <read_one_sign_from_keyboard>
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]

                      if(sign == '*')    // If select EXIT  // Exit in main menu
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	2b2a      	cmp	r3, #42	; 0x2a
 8004c4a:	d112      	bne.n	8004c72 <sensors_mode+0x2fe>
                      {
                           // Clear all OLED
                           ssd1306_Fill(Black);
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f000 ff7b 	bl	8005b48 <ssd1306_Fill>
                           ssd1306_UpdateScreen();
 8004c52:	f000 ff9b 	bl	8005b8c <ssd1306_UpdateScreen>

                           GPS_MODE = false;
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <sensors_mode+0x368>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
                           GSM_MODE = false;
 8004c5c:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <sensors_mode+0x36c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
                           FINGERPRINT_MODE = false;
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <sensors_mode+0x370>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
                           SENSORS_MODE = false;
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <sensors_mode+0x374>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]

                           return 1;          // Flag_fro exit from there
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e025      	b.n	8004cbe <sensors_mode+0x34a>
                      }
                  }while (sign != '*');     // Select EXIT
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	2b2a      	cmp	r3, #42	; 0x2a
 8004c76:	d1e2      	bne.n	8004c3e <sensors_mode+0x2ca>

                 // Place for code function 3
            }

			if(sign == '*')    // If select EXIT  // Exit in main menu
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c7c:	d112      	bne.n	8004ca4 <sensors_mode+0x330>
			{
				// Clear all OLED
				ssd1306_Fill(Black);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f000 ff62 	bl	8005b48 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8004c84:	f000 ff82 	bl	8005b8c <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8004c88:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <sensors_mode+0x368>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <sensors_mode+0x36c>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <sensors_mode+0x370>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <sensors_mode+0x374>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e00c      	b.n	8004cbe <sensors_mode+0x34a>
			}
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2b31      	cmp	r3, #49	; 0x31
 8004ca8:	d009      	beq.n	8004cbe <sensors_mode+0x34a>
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	2b32      	cmp	r3, #50	; 0x32
 8004cae:	d006      	beq.n	8004cbe <sensors_mode+0x34a>
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	2b33      	cmp	r3, #51	; 0x33
 8004cb4:	d003      	beq.n	8004cbe <sensors_mode+0x34a>
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cba:	f47f aef5 	bne.w	8004aa8 <sensors_mode+0x134>
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3740      	adds	r7, #64	; 0x40
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	0800ed64 	.word	0x0800ed64
 8004ccc:	20000054 	.word	0x20000054
 8004cd0:	0800ed70 	.word	0x0800ed70
 8004cd4:	0800ed84 	.word	0x0800ed84
 8004cd8:	0800ed94 	.word	0x0800ed94
 8004cdc:	200002c5 	.word	0x200002c5
 8004ce0:	200002c4 	.word	0x200002c4
 8004ce4:	200002c6 	.word	0x200002c6
 8004ce8:	200002c7 	.word	0x200002c7
 8004cec:	0800eda4 	.word	0x0800eda4
 8004cf0:	0800edb4 	.word	0x0800edb4

08004cf4 <show_sratus_call>:
// ----------------------------------------------------------------------------
/* After output call this function show call status
 */
void show_sratus_call(int call_status, char *str_gsm, char sign, uint8_t where_call)
{
 8004cf4:	b5b0      	push	{r4, r5, r7, lr}
 8004cf6:	b08e      	sub	sp, #56	; 0x38
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	460b      	mov	r3, r1
 8004d04:	71fb      	strb	r3, [r7, #7]
 8004d06:	4613      	mov	r3, r2
 8004d08:	71bb      	strb	r3, [r7, #6]
	if (where_call == 1)   // If call to me
 8004d0a:	79bb      	ldrb	r3, [r7, #6]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d135      	bne.n	8004d7c <show_sratus_call+0x88>
	{
		// 1. Clean OLED
		int h = 16;
 8004d10:	2310      	movs	r3, #16
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
		char str[30] = {0};
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	221e      	movs	r2, #30
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f005 ffdd 	bl	800acdc <memset>
		while(h != 46)
 8004d22:	e022      	b.n	8004d6a <show_sratus_call+0x76>
		{
			sprintf(str,"%s", "                    ");
 8004d24:	f107 0310 	add.w	r3, r7, #16
 8004d28:	4a96      	ldr	r2, [pc, #600]	; (8004f84 <show_sratus_call+0x290>)
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d36:	6020      	str	r0, [r4, #0]
 8004d38:	3404      	adds	r4, #4
 8004d3a:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(00, h);
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	4619      	mov	r1, r3
 8004d42:	2000      	movs	r0, #0
 8004d44:	f001 f858 	bl	8005df8 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 8004d48:	4a8f      	ldr	r2, [pc, #572]	; (8004f88 <show_sratus_call+0x294>)
 8004d4a:	f107 0010 	add.w	r0, r7, #16
 8004d4e:	2301      	movs	r3, #1
 8004d50:	ca06      	ldmia	r2, {r1, r2}
 8004d52:	f001 f82b 	bl	8005dac <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 8004d56:	f107 0310 	add.w	r3, r7, #16
 8004d5a:	221e      	movs	r2, #30
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 ffbc 	bl	800acdc <memset>

			h = h +10;
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	330a      	adds	r3, #10
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
		while(h != 46)
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d6e:	d1d9      	bne.n	8004d24 <show_sratus_call+0x30>
		}
		ssd1306_UpdateScreen();
 8004d70:	f000 ff0c 	bl	8005b8c <ssd1306_UpdateScreen>
		HAL_Delay(500);
 8004d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d78:	f001 fca4 	bl	80066c4 <HAL_Delay>
	}

	if (call_status == 1)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d134      	bne.n	8004dec <show_sratus_call+0xf8>
	{
		sprintf(str_gsm,"%s", "STATUS: Call out...");
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a81      	ldr	r2, [pc, #516]	; (8004f8c <show_sratus_call+0x298>)
 8004d86:	461d      	mov	r5, r3
 8004d88:	4614      	mov	r4, r2
 8004d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d8c:	6028      	str	r0, [r5, #0]
 8004d8e:	6069      	str	r1, [r5, #4]
 8004d90:	60aa      	str	r2, [r5, #8]
 8004d92:	60eb      	str	r3, [r5, #12]
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	6128      	str	r0, [r5, #16]
		ssd1306_SetCursor(00, 36);
 8004d98:	2124      	movs	r1, #36	; 0x24
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f001 f82c 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004da0:	4a79      	ldr	r2, [pc, #484]	; (8004f88 <show_sratus_call+0x294>)
 8004da2:	2301      	movs	r3, #1
 8004da4:	ca06      	ldmia	r2, {r1, r2}
 8004da6:	68b8      	ldr	r0, [r7, #8]
 8004da8:	f001 f800 	bl	8005dac <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004dac:	2204      	movs	r2, #4
 8004dae:	2100      	movs	r1, #0
 8004db0:	68b8      	ldr	r0, [r7, #8]
 8004db2:	f005 ff93 	bl	800acdc <memset>

		sprintf(str_gsm,"%s", "#: for end call");
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a75      	ldr	r2, [pc, #468]	; (8004f90 <show_sratus_call+0x29c>)
 8004dba:	461c      	mov	r4, r3
 8004dbc:	4615      	mov	r5, r2
 8004dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dc0:	6020      	str	r0, [r4, #0]
 8004dc2:	6061      	str	r1, [r4, #4]
 8004dc4:	60a2      	str	r2, [r4, #8]
 8004dc6:	60e3      	str	r3, [r4, #12]
		ssd1306_SetCursor(00, 46);
 8004dc8:	212e      	movs	r1, #46	; 0x2e
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f001 f814 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004dd0:	4a6d      	ldr	r2, [pc, #436]	; (8004f88 <show_sratus_call+0x294>)
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	ca06      	ldmia	r2, {r1, r2}
 8004dd6:	68b8      	ldr	r0, [r7, #8]
 8004dd8:	f000 ffe8 	bl	8005dac <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004ddc:	2204      	movs	r2, #4
 8004dde:	2100      	movs	r1, #0
 8004de0:	68b8      	ldr	r0, [r7, #8]
 8004de2:	f005 ff7b 	bl	800acdc <memset>

		ssd1306_UpdateScreen();
 8004de6:	f000 fed1 	bl	8005b8c <ssd1306_UpdateScreen>
 8004dea:	e01e      	b.n	8004e2a <show_sratus_call+0x136>
	}
	else
	{
		sprintf(str_gsm,"%s", "STATUS: ERROR CALL");
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a69      	ldr	r2, [pc, #420]	; (8004f94 <show_sratus_call+0x2a0>)
 8004df0:	461d      	mov	r5, r3
 8004df2:	4614      	mov	r4, r2
 8004df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df6:	6028      	str	r0, [r5, #0]
 8004df8:	6069      	str	r1, [r5, #4]
 8004dfa:	60aa      	str	r2, [r5, #8]
 8004dfc:	60eb      	str	r3, [r5, #12]
 8004dfe:	8823      	ldrh	r3, [r4, #0]
 8004e00:	78a2      	ldrb	r2, [r4, #2]
 8004e02:	822b      	strh	r3, [r5, #16]
 8004e04:	4613      	mov	r3, r2
 8004e06:	74ab      	strb	r3, [r5, #18]
		ssd1306_SetCursor(00, 36);
 8004e08:	2124      	movs	r1, #36	; 0x24
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f000 fff4 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004e10:	4a5d      	ldr	r2, [pc, #372]	; (8004f88 <show_sratus_call+0x294>)
 8004e12:	2301      	movs	r3, #1
 8004e14:	ca06      	ldmia	r2, {r1, r2}
 8004e16:	68b8      	ldr	r0, [r7, #8]
 8004e18:	f000 ffc8 	bl	8005dac <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	2100      	movs	r1, #0
 8004e20:	68b8      	ldr	r0, [r7, #8]
 8004e22:	f005 ff5b 	bl	800acdc <memset>
		ssd1306_UpdateScreen();
 8004e26:	f000 feb1 	bl	8005b8c <ssd1306_UpdateScreen>
	}
	// wait ansver from GSM module

	int gsm_out_call_stattus = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004e2e:	e006      	b.n	8004e3e <show_sratus_call+0x14a>
	&& (gsm_out_call_stattus != 3))
	{
		sign = read_one_sign_from_keyboard();
 8004e30:	f7fe fcae 	bl	8003790 <read_one_sign_from_keyboard>
 8004e34:	4603      	mov	r3, r0
 8004e36:	71fb      	strb	r3, [r7, #7]
		gsm_out_call_stattus = wait_ansver_after_make_call_in_blok_mode();
 8004e38:	f7fd fd82 	bl	8002940 <wait_ansver_after_make_call_in_blok_mode>
 8004e3c:	6338      	str	r0, [r7, #48]	; 0x30
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b23      	cmp	r3, #35	; 0x23
 8004e42:	d008      	beq.n	8004e56 <show_sratus_call+0x162>
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d005      	beq.n	8004e56 <show_sratus_call+0x162>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d002      	beq.n	8004e56 <show_sratus_call+0x162>
	&& (gsm_out_call_stattus != 3))
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d1ec      	bne.n	8004e30 <show_sratus_call+0x13c>
	}

	if (sign == '#')
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	2b23      	cmp	r3, #35	; 0x23
 8004e5a:	d121      	bne.n	8004ea0 <show_sratus_call+0x1ac>
	{
		end_of_call();
 8004e5c:	f7fd fcbc 	bl	80027d8 <end_of_call>

		sprintf(str_gsm,"%s", "STATUS: CALL END   ");
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a4d      	ldr	r2, [pc, #308]	; (8004f98 <show_sratus_call+0x2a4>)
 8004e64:	461d      	mov	r5, r3
 8004e66:	4614      	mov	r4, r2
 8004e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e6a:	6028      	str	r0, [r5, #0]
 8004e6c:	6069      	str	r1, [r5, #4]
 8004e6e:	60aa      	str	r2, [r5, #8]
 8004e70:	60eb      	str	r3, [r5, #12]
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	6128      	str	r0, [r5, #16]
		ssd1306_SetCursor(00, 36);
 8004e76:	2124      	movs	r1, #36	; 0x24
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f000 ffbd 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004e7e:	4a42      	ldr	r2, [pc, #264]	; (8004f88 <show_sratus_call+0x294>)
 8004e80:	2301      	movs	r3, #1
 8004e82:	ca06      	ldmia	r2, {r1, r2}
 8004e84:	68b8      	ldr	r0, [r7, #8]
 8004e86:	f000 ff91 	bl	8005dac <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	f005 ff24 	bl	800acdc <memset>
		ssd1306_UpdateScreen();
 8004e94:	f000 fe7a 	bl	8005b8c <ssd1306_UpdateScreen>

		HAL_Delay(2000);
 8004e98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e9c:	f001 fc12 	bl	80066c4 <HAL_Delay>
	}

	switch (gsm_out_call_stattus)
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d026      	beq.n	8004ef4 <show_sratus_call+0x200>
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d047      	beq.n	8004f3a <show_sratus_call+0x246>
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d000      	beq.n	8004eb0 <show_sratus_call+0x1bc>

			HAL_Delay(2000);
			break;

		}
}
 8004eae:	e065      	b.n	8004f7c <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: BUSY           ");
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <show_sratus_call+0x2a8>)
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eba:	6028      	str	r0, [r5, #0]
 8004ebc:	6069      	str	r1, [r5, #4]
 8004ebe:	60aa      	str	r2, [r5, #8]
 8004ec0:	60eb      	str	r3, [r5, #12]
 8004ec2:	cc03      	ldmia	r4!, {r0, r1}
 8004ec4:	6128      	str	r0, [r5, #16]
 8004ec6:	6169      	str	r1, [r5, #20]
			ssd1306_SetCursor(00, 36);
 8004ec8:	2124      	movs	r1, #36	; 0x24
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f000 ff94 	bl	8005df8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <show_sratus_call+0x294>)
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	ca06      	ldmia	r2, {r1, r2}
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	f000 ff68 	bl	8005dac <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 8004edc:	2204      	movs	r2, #4
 8004ede:	2100      	movs	r1, #0
 8004ee0:	68b8      	ldr	r0, [r7, #8]
 8004ee2:	f005 fefb 	bl	800acdc <memset>
			ssd1306_UpdateScreen();
 8004ee6:	f000 fe51 	bl	8005b8c <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8004eea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004eee:	f001 fbe9 	bl	80066c4 <HAL_Delay>
			break;
 8004ef2:	e043      	b.n	8004f7c <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: NO ANSWER    ");
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <show_sratus_call+0x2ac>)
 8004ef8:	461d      	mov	r5, r3
 8004efa:	4614      	mov	r4, r2
 8004efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004efe:	6028      	str	r0, [r5, #0]
 8004f00:	6069      	str	r1, [r5, #4]
 8004f02:	60aa      	str	r2, [r5, #8]
 8004f04:	60eb      	str	r3, [r5, #12]
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	6128      	str	r0, [r5, #16]
 8004f0a:	88a3      	ldrh	r3, [r4, #4]
 8004f0c:	82ab      	strh	r3, [r5, #20]
			ssd1306_SetCursor(00, 36);
 8004f0e:	2124      	movs	r1, #36	; 0x24
 8004f10:	2000      	movs	r0, #0
 8004f12:	f000 ff71 	bl	8005df8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <show_sratus_call+0x294>)
 8004f18:	2301      	movs	r3, #1
 8004f1a:	ca06      	ldmia	r2, {r1, r2}
 8004f1c:	68b8      	ldr	r0, [r7, #8]
 8004f1e:	f000 ff45 	bl	8005dac <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 8004f22:	2204      	movs	r2, #4
 8004f24:	2100      	movs	r1, #0
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f005 fed8 	bl	800acdc <memset>
			ssd1306_UpdateScreen();
 8004f2c:	f000 fe2e 	bl	8005b8c <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8004f30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004f34:	f001 fbc6 	bl	80066c4 <HAL_Delay>
			break;
 8004f38:	e020      	b.n	8004f7c <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: CALL END   ");
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <show_sratus_call+0x2a4>)
 8004f3e:	461d      	mov	r5, r3
 8004f40:	4614      	mov	r4, r2
 8004f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f44:	6028      	str	r0, [r5, #0]
 8004f46:	6069      	str	r1, [r5, #4]
 8004f48:	60aa      	str	r2, [r5, #8]
 8004f4a:	60eb      	str	r3, [r5, #12]
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	6128      	str	r0, [r5, #16]
			ssd1306_SetCursor(00, 36);
 8004f50:	2124      	movs	r1, #36	; 0x24
 8004f52:	2000      	movs	r0, #0
 8004f54:	f000 ff50 	bl	8005df8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004f58:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <show_sratus_call+0x294>)
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	ca06      	ldmia	r2, {r1, r2}
 8004f5e:	68b8      	ldr	r0, [r7, #8]
 8004f60:	f000 ff24 	bl	8005dac <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 8004f64:	2204      	movs	r2, #4
 8004f66:	2100      	movs	r1, #0
 8004f68:	68b8      	ldr	r0, [r7, #8]
 8004f6a:	f005 feb7 	bl	800acdc <memset>
			ssd1306_UpdateScreen();
 8004f6e:	f000 fe0d 	bl	8005b8c <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8004f72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004f76:	f001 fba5 	bl	80066c4 <HAL_Delay>
			break;
 8004f7a:	bf00      	nop
}
 8004f7c:	bf00      	nop
 8004f7e:	3738      	adds	r7, #56	; 0x38
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bdb0      	pop	{r4, r5, r7, pc}
 8004f84:	0800edc4 	.word	0x0800edc4
 8004f88:	20000054 	.word	0x20000054
 8004f8c:	0800eddc 	.word	0x0800eddc
 8004f90:	0800edf0 	.word	0x0800edf0
 8004f94:	0800ee00 	.word	0x0800ee00
 8004f98:	0800ee14 	.word	0x0800ee14
 8004f9c:	0800ee28 	.word	0x0800ee28
 8004fa0:	0800ee40 	.word	0x0800ee40

08004fa4 <enter_a_mobile_number>:
 * For example 380XXXXXXXXX.
 * And delete wrong entered digits.
 * If entered all digits function finish work.
 */
bool enter_a_mobile_number(char * number)
{
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	bool entered_number_status = false;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// 1. Clean OLED
	int h = 16;
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	char str[30] = {0};
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	221e      	movs	r2, #30
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f005 fe8c 	bl	800acdc <memset>
	while(h != 46)
 8004fc4:	e022      	b.n	800500c <enter_a_mobile_number+0x68>
	{
		sprintf(str,"%s", "                    ");
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4a62      	ldr	r2, [pc, #392]	; (8005154 <enter_a_mobile_number+0x1b0>)
 8004fcc:	461c      	mov	r4, r3
 8004fce:	4615      	mov	r5, r2
 8004fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004fd8:	6020      	str	r0, [r4, #0]
 8004fda:	3404      	adds	r4, #4
 8004fdc:	7021      	strb	r1, [r4, #0]
		ssd1306_SetCursor(00, h);
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f000 ff07 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004fea:	4a5b      	ldr	r2, [pc, #364]	; (8005158 <enter_a_mobile_number+0x1b4>)
 8004fec:	f107 0008 	add.w	r0, r7, #8
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	ca06      	ldmia	r2, {r1, r2}
 8004ff4:	f000 feda 	bl	8005dac <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	221e      	movs	r2, #30
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f005 fe6b 	bl	800acdc <memset>

		h = h +10;
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	330a      	adds	r3, #10
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(h != 46)
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b2e      	cmp	r3, #46	; 0x2e
 8005010:	d1d9      	bne.n	8004fc6 <enter_a_mobile_number+0x22>
	}
	ssd1306_UpdateScreen();
 8005012:	f000 fdbb 	bl	8005b8c <ssd1306_UpdateScreen>
	HAL_Delay(500);
 8005016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800501a:	f001 fb53 	bl	80066c4 <HAL_Delay>
	//

    // 2. Type numbers
	sprintf(str,"%s", "Enter number:");
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4a4e      	ldr	r2, [pc, #312]	; (800515c <enter_a_mobile_number+0x1b8>)
 8005024:	461c      	mov	r4, r3
 8005026:	4613      	mov	r3, r2
 8005028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800502a:	c407      	stmia	r4!, {r0, r1, r2}
 800502c:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 16);
 800502e:	2110      	movs	r1, #16
 8005030:	2000      	movs	r0, #0
 8005032:	f000 fee1 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8005036:	4a48      	ldr	r2, [pc, #288]	; (8005158 <enter_a_mobile_number+0x1b4>)
 8005038:	f107 0008 	add.w	r0, r7, #8
 800503c:	2301      	movs	r3, #1
 800503e:	ca06      	ldmia	r2, {r1, r2}
 8005040:	f000 feb4 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8005044:	f107 0308 	add.w	r3, r7, #8
 8005048:	221e      	movs	r2, #30
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f005 fe45 	bl	800acdc <memset>

	ssd1306_UpdateScreen();
 8005052:	f000 fd9b 	bl	8005b8c <ssd1306_UpdateScreen>

	uint8_t k = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char sing_number;
	//char number[13]={0};
	do{
		sing_number = read_one_sign_from_keyboard();
 800505c:	f7fe fb98 	bl	8003790 <read_one_sign_from_keyboard>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((sing_number != '\0') && (sing_number != 'D'))  	// Enter one digit
 8005066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800506a:	2b00      	cmp	r3, #0
 800506c:	d029      	beq.n	80050c2 <enter_a_mobile_number+0x11e>
 800506e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005072:	2b44      	cmp	r3, #68	; 0x44
 8005074:	d025      	beq.n	80050c2 <enter_a_mobile_number+0x11e>
		{
			number[k] = sing_number;
 8005076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005082:	701a      	strb	r2, [r3, #0]
			k++;
 8005084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005088:	3301      	adds	r3, #1
 800508a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			// print all mumbers
			sprintf(str,"%s", number);
 800508e:	f107 0308 	add.w	r3, r7, #8
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	f005 ff33 	bl	800af00 <strcpy>
			ssd1306_SetCursor(00, 26);
 800509a:	211a      	movs	r1, #26
 800509c:	2000      	movs	r0, #0
 800509e:	f000 feab 	bl	8005df8 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 80050a2:	4a2d      	ldr	r2, [pc, #180]	; (8005158 <enter_a_mobile_number+0x1b4>)
 80050a4:	f107 0008 	add.w	r0, r7, #8
 80050a8:	2301      	movs	r3, #1
 80050aa:	ca06      	ldmia	r2, {r1, r2}
 80050ac:	f000 fe7e 	bl	8005dac <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	221e      	movs	r2, #30
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f005 fe0f 	bl	800acdc <memset>
			ssd1306_UpdateScreen();
 80050be:	f000 fd65 	bl	8005b8c <ssd1306_UpdateScreen>

		}
		if((sing_number == 'D') && (k >=1))						// Delete one digit
 80050c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050c6:	2b44      	cmp	r3, #68	; 0x44
 80050c8:	d128      	bne.n	800511c <enter_a_mobile_number+0x178>
 80050ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d024      	beq.n	800511c <enter_a_mobile_number+0x178>
		{
			k--;
 80050d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d6:	3b01      	subs	r3, #1
 80050d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			number[k] = ' ';
 80050dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	2220      	movs	r2, #32
 80050e6:	701a      	strb	r2, [r3, #0]

			sprintf(str,"%s", number);
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 ff06 	bl	800af00 <strcpy>
			ssd1306_SetCursor(00, 26);
 80050f4:	211a      	movs	r1, #26
 80050f6:	2000      	movs	r0, #0
 80050f8:	f000 fe7e 	bl	8005df8 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 80050fc:	4a16      	ldr	r2, [pc, #88]	; (8005158 <enter_a_mobile_number+0x1b4>)
 80050fe:	f107 0008 	add.w	r0, r7, #8
 8005102:	2301      	movs	r3, #1
 8005104:	ca06      	ldmia	r2, {r1, r2}
 8005106:	f000 fe51 	bl	8005dac <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	221e      	movs	r2, #30
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f005 fde2 	bl	800acdc <memset>
			ssd1306_UpdateScreen();
 8005118:	f000 fd38 	bl	8005b8c <ssd1306_UpdateScreen>
		}

		if(k == 12)												// If all digits was entered
 800511c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d102      	bne.n	800512a <enter_a_mobile_number+0x186>
		{
			entered_number_status = true;						// Status. All digit entered
 8005124:	2301      	movs	r3, #1
 8005126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			//break;
		}

		HAL_Delay(200);
 800512a:	20c8      	movs	r0, #200	; 0xc8
 800512c:	f001 faca 	bl	80066c4 <HAL_Delay>
	}while ((sing_number != '*') && (entered_number_status != true));
 8005130:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d006      	beq.n	8005146 <enter_a_mobile_number+0x1a2>
 8005138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800513c:	f083 0301 	eor.w	r3, r3, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d18a      	bne.n	800505c <enter_a_mobile_number+0xb8>

	return entered_number_status;
 8005146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800514a:	4618      	mov	r0, r3
 800514c:	3730      	adds	r7, #48	; 0x30
 800514e:	46bd      	mov	sp, r7
 8005150:	bdb0      	pop	{r4, r5, r7, pc}
 8005152:	bf00      	nop
 8005154:	0800edc4 	.word	0x0800edc4
 8005158:	20000054 	.word	0x20000054
 800515c:	0800ee58 	.word	0x0800ee58

08005160 <claen_oled_lines>:
// ----------------------------------------------------------------------------
void claen_oled_lines(bool first, bool second, bool third, bool fourth, bool fifth)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4623      	mov	r3, r4
 8005170:	71fb      	strb	r3, [r7, #7]
 8005172:	4603      	mov	r3, r0
 8005174:	71bb      	strb	r3, [r7, #6]
 8005176:	460b      	mov	r3, r1
 8005178:	717b      	strb	r3, [r7, #5]
 800517a:	4613      	mov	r3, r2
 800517c:	713b      	strb	r3, [r7, #4]
	char str[32] = {0};
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	2220      	movs	r2, #32
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f005 fda8 	bl	800acdc <memset>
	if(first == true)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01f      	beq.n	80051d2 <claen_oled_lines+0x72>
	{
		sprintf(str,"%s", "                          ");
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	4a58      	ldr	r2, [pc, #352]	; (80052f8 <claen_oled_lines+0x198>)
 8005198:	461c      	mov	r4, r3
 800519a:	4615      	mov	r5, r2
 800519c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800519e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051a4:	c403      	stmia	r4!, {r0, r1}
 80051a6:	8022      	strh	r2, [r4, #0]
 80051a8:	3402      	adds	r4, #2
 80051aa:	0c13      	lsrs	r3, r2, #16
 80051ac:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 80051ae:	2100      	movs	r1, #0
 80051b0:	2000      	movs	r0, #0
 80051b2:	f000 fe21 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80051b6:	4a51      	ldr	r2, [pc, #324]	; (80052fc <claen_oled_lines+0x19c>)
 80051b8:	f107 0008 	add.w	r0, r7, #8
 80051bc:	2301      	movs	r3, #1
 80051be:	ca06      	ldmia	r2, {r1, r2}
 80051c0:	f000 fdf4 	bl	8005dac <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 80051c4:	f107 0308 	add.w	r3, r7, #8
 80051c8:	2220      	movs	r2, #32
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f005 fd85 	bl	800acdc <memset>
	}
	if(second == true)
 80051d2:	79bb      	ldrb	r3, [r7, #6]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01f      	beq.n	8005218 <claen_oled_lines+0xb8>
	{
		sprintf(str,"%s", "                          ");
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	4a46      	ldr	r2, [pc, #280]	; (80052f8 <claen_oled_lines+0x198>)
 80051de:	461c      	mov	r4, r3
 80051e0:	4615      	mov	r5, r2
 80051e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051ea:	c403      	stmia	r4!, {r0, r1}
 80051ec:	8022      	strh	r2, [r4, #0]
 80051ee:	3402      	adds	r4, #2
 80051f0:	0c13      	lsrs	r3, r2, #16
 80051f2:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 80051f4:	2110      	movs	r1, #16
 80051f6:	2000      	movs	r0, #0
 80051f8:	f000 fdfe 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80051fc:	4a3f      	ldr	r2, [pc, #252]	; (80052fc <claen_oled_lines+0x19c>)
 80051fe:	f107 0008 	add.w	r0, r7, #8
 8005202:	2301      	movs	r3, #1
 8005204:	ca06      	ldmia	r2, {r1, r2}
 8005206:	f000 fdd1 	bl	8005dac <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 800520a:	f107 0308 	add.w	r3, r7, #8
 800520e:	2220      	movs	r2, #32
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f005 fd62 	bl	800acdc <memset>
	}
	if(third == true)
 8005218:	797b      	ldrb	r3, [r7, #5]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01f      	beq.n	800525e <claen_oled_lines+0xfe>
	{
		sprintf(str,"%s", "                          ");
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4a35      	ldr	r2, [pc, #212]	; (80052f8 <claen_oled_lines+0x198>)
 8005224:	461c      	mov	r4, r3
 8005226:	4615      	mov	r5, r2
 8005228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800522a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800522c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005230:	c403      	stmia	r4!, {r0, r1}
 8005232:	8022      	strh	r2, [r4, #0]
 8005234:	3402      	adds	r4, #2
 8005236:	0c13      	lsrs	r3, r2, #16
 8005238:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 800523a:	211a      	movs	r1, #26
 800523c:	2000      	movs	r0, #0
 800523e:	f000 fddb 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8005242:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <claen_oled_lines+0x19c>)
 8005244:	f107 0008 	add.w	r0, r7, #8
 8005248:	2301      	movs	r3, #1
 800524a:	ca06      	ldmia	r2, {r1, r2}
 800524c:	f000 fdae 	bl	8005dac <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8005250:	f107 0308 	add.w	r3, r7, #8
 8005254:	2220      	movs	r2, #32
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f005 fd3f 	bl	800acdc <memset>
	}
	if(fourth == true)
 800525e:	793b      	ldrb	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01f      	beq.n	80052a4 <claen_oled_lines+0x144>
	{
		sprintf(str,"%s", "                          ");
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <claen_oled_lines+0x198>)
 800526a:	461c      	mov	r4, r3
 800526c:	4615      	mov	r5, r2
 800526e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005276:	c403      	stmia	r4!, {r0, r1}
 8005278:	8022      	strh	r2, [r4, #0]
 800527a:	3402      	adds	r4, #2
 800527c:	0c13      	lsrs	r3, r2, #16
 800527e:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8005280:	2124      	movs	r1, #36	; 0x24
 8005282:	2000      	movs	r0, #0
 8005284:	f000 fdb8 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8005288:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <claen_oled_lines+0x19c>)
 800528a:	f107 0008 	add.w	r0, r7, #8
 800528e:	2301      	movs	r3, #1
 8005290:	ca06      	ldmia	r2, {r1, r2}
 8005292:	f000 fd8b 	bl	8005dac <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	2220      	movs	r2, #32
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f005 fd1c 	bl	800acdc <memset>
	}
	if(fifth == true)
 80052a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01f      	beq.n	80052ec <claen_oled_lines+0x18c>
	{
		sprintf(str,"%s", "                          ");
 80052ac:	f107 0308 	add.w	r3, r7, #8
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <claen_oled_lines+0x198>)
 80052b2:	461c      	mov	r4, r3
 80052b4:	4615      	mov	r5, r2
 80052b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052be:	c403      	stmia	r4!, {r0, r1}
 80052c0:	8022      	strh	r2, [r4, #0]
 80052c2:	3402      	adds	r4, #2
 80052c4:	0c13      	lsrs	r3, r2, #16
 80052c6:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 46);
 80052c8:	212e      	movs	r1, #46	; 0x2e
 80052ca:	2000      	movs	r0, #0
 80052cc:	f000 fd94 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <claen_oled_lines+0x19c>)
 80052d2:	f107 0008 	add.w	r0, r7, #8
 80052d6:	2301      	movs	r3, #1
 80052d8:	ca06      	ldmia	r2, {r1, r2}
 80052da:	f000 fd67 	bl	8005dac <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	2220      	movs	r2, #32
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f005 fcf8 	bl	800acdc <memset>
	}
	ssd1306_UpdateScreen();
 80052ec:	f000 fc4e 	bl	8005b8c <ssd1306_UpdateScreen>
}
 80052f0:	bf00      	nop
 80052f2:	3728      	adds	r7, #40	; 0x28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bdb0      	pop	{r4, r5, r7, pc}
 80052f8:	0800ee68 	.word	0x0800ee68
 80052fc:	20000054 	.word	0x20000054

08005300 <HAL_GPIO_EXTI_Callback>:
 * That STATUS must check timer every 0.5 sec
 * If INCOMMING_RING_OR_SMS_STATUS == true
 * 		turn on "incoming call" function
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d11f      	bne.n	8005350 <HAL_GPIO_EXTI_Callback+0x50>
	{
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET)
 8005310:	2102      	movs	r1, #2
 8005312:	4811      	ldr	r0, [pc, #68]	; (8005358 <HAL_GPIO_EXTI_Callback+0x58>)
 8005314:	f001 fec4 	bl	80070a0 <HAL_GPIO_ReadPin>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d108      	bne.n	8005330 <HAL_GPIO_EXTI_Callback+0x30>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800531e:	2200      	movs	r2, #0
 8005320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005324:	480d      	ldr	r0, [pc, #52]	; (800535c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005326:	f001 fed2 	bl	80070ce <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = true;				// Check it status if it is 'true' we have incoming ring or sms
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_GPIO_EXTI_Callback+0x60>)
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_SET)
 8005330:	2102      	movs	r1, #2
 8005332:	4809      	ldr	r0, [pc, #36]	; (8005358 <HAL_GPIO_EXTI_Callback+0x58>)
 8005334:	f001 feb4 	bl	80070a0 <HAL_GPIO_ReadPin>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d108      	bne.n	8005350 <HAL_GPIO_EXTI_Callback+0x50>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800533e:	2201      	movs	r2, #1
 8005340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005344:	4805      	ldr	r0, [pc, #20]	; (800535c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005346:	f001 fec2 	bl	80070ce <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = false;
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_GPIO_EXTI_Callback+0x60>)
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
		}
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40010800 	.word	0x40010800
 800535c:	40011000 	.word	0x40011000
 8005360:	200002c8 	.word	0x200002c8

08005364 <clearing_buffer>:
// ----------------------------------------------------------------------------


// Clean array function!!!!!!!!!!!
void clearing_buffer(char *array, int size)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	memset(array, 49 , size);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	2131      	movs	r1, #49	; 0x31
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f005 fcb1 	bl	800acdc <memset>

	int test = 9999;
 800537a:	f242 730f 	movw	r3, #9999	; 0x270f
 800537e:	60fb      	str	r3, [r7, #12]
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <test_function>:
// ---------------------------------------
void test_function(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b09c      	sub	sp, #112	; 0x70
 800538c:	af00      	add	r7, sp, #0
	char test_arrey[100] = {0};
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	2264      	movs	r2, #100	; 0x64
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f005 fca1 	bl	800acdc <memset>
	for(int i = 0; i<=100; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800539e:	e009      	b.n	80053b4 <test_function+0x2c>
	{
		test_arrey[i] = i;
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	b2d9      	uxtb	r1, r3
 80053a4:	1d3a      	adds	r2, r7, #4
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	4413      	add	r3, r2
 80053aa:	460a      	mov	r2, r1
 80053ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<=100; i++)
 80053ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b0:	3301      	adds	r3, #1
 80053b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b6:	2b64      	cmp	r3, #100	; 0x64
 80053b8:	ddf2      	ble.n	80053a0 <test_function+0x18>
	}


	clearing_buffer(test_arrey, sizeof(test_arrey));
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	2164      	movs	r1, #100	; 0x64
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ffd0 	bl	8005364 <clearing_buffer>

	ssd1306_SetCursor(00, 00);
 80053c4:	2100      	movs	r1, #0
 80053c6:	2000      	movs	r0, #0
 80053c8:	f000 fd16 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(test_arrey, Font_7x10, White);
 80053cc:	4a07      	ldr	r2, [pc, #28]	; (80053ec <test_function+0x64>)
 80053ce:	1d38      	adds	r0, r7, #4
 80053d0:	2301      	movs	r3, #1
 80053d2:	ca06      	ldmia	r2, {r1, r2}
 80053d4:	f000 fcea 	bl	8005dac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80053d8:	f000 fbd8 	bl	8005b8c <ssd1306_UpdateScreen>

	int test = 9999;
 80053dc:	f242 730f 	movw	r3, #9999	; 0x270f
 80053e0:	66bb      	str	r3, [r7, #104]	; 0x68
//	memset(str_sensors, 0 , sizeof(str_sensors));
//    sprintf(str_sensors,"%s", "1. Run all sensors");
//    ssd1306_SetCursor(00, 00);
//    ssd1306_WriteString(str_sensors, Font_7x10, White);

}
 80053e2:	bf00      	nop
 80053e4:	3770      	adds	r7, #112	; 0x70
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000054 	.word	0x20000054

080053f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <init_oled>:
void print_fingerprint_data(void);


// -----------------------------------------------------------------------------------
void init_oled(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8005400:	f000 fb36 	bl	8005a70 <ssd1306_Init>
	HAL_Delay(500);
 8005404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005408:	f001 f95c 	bl	80066c4 <HAL_Delay>
	ssd1306_Fill(Black);
 800540c:	2000      	movs	r0, #0
 800540e:	f000 fb9b 	bl	8005b48 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8005412:	f000 fbbb 	bl	8005b8c <ssd1306_UpdateScreen>
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <OLED_prinr_all_data>:
		}
	}
}
// -----------------------------------------------------------------------------------
void OLED_prinr_all_data(int  select_print_data)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	switch (select_print_data)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	2b03      	cmp	r3, #3
 800542a:	d817      	bhi.n	800545c <OLED_prinr_all_data+0x40>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <OLED_prinr_all_data+0x18>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005445 	.word	0x08005445
 8005438:	0800544b 	.word	0x0800544b
 800543c:	08005451 	.word	0x08005451
 8005440:	08005457 	.word	0x08005457
	{
		case 1:
			print_GPS_data();
 8005444:	f000 f8a8 	bl	8005598 <print_GPS_data>
			break;
 8005448:	e008      	b.n	800545c <OLED_prinr_all_data+0x40>
		case 2:
			print_GSM_data();
 800544a:	f000 faed 	bl	8005a28 <print_GSM_data>
			break;
 800544e:	e005      	b.n	800545c <OLED_prinr_all_data+0x40>
		case 3:
			print_fingerprint_data();
 8005450:	f000 faf0 	bl	8005a34 <print_fingerprint_data>
			break;
 8005454:	e002      	b.n	800545c <OLED_prinr_all_data+0x40>
		case 4:
			print_all_sensors_data();
 8005456:	f000 fa6f 	bl	8005938 <print_all_sensors_data>
			break;
 800545a:	bf00      	nop
	}

//    // Print all data in OLED
    ssd1306_UpdateScreen();
 800545c:	f000 fb96 	bl	8005b8c <ssd1306_UpdateScreen>
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <print_main_menu>:
// -----------------------------------------------------------------------------------
void print_main_menu(void)
{
 8005468:	b5b0      	push	{r4, r5, r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800546e:	2000      	movs	r0, #0
 8005470:	f000 fb6a 	bl	8005b48 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8005474:	f000 fb8a 	bl	8005b8c <ssd1306_UpdateScreen>

	char str[50]={0};
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	2232      	movs	r2, #50	; 0x32
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f005 fc2c 	bl	800acdc <memset>
	// Print message
	sprintf(str,"%s", " SELECT MODE...");
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	4a3e      	ldr	r2, [pc, #248]	; (8005580 <print_main_menu+0x118>)
 8005488:	461c      	mov	r4, r3
 800548a:	4613      	mov	r3, r2
 800548c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800548e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(00, 00);
 8005492:	2100      	movs	r1, #0
 8005494:	2000      	movs	r0, #0
 8005496:	f000 fcaf 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 800549a:	4a3a      	ldr	r2, [pc, #232]	; (8005584 <print_main_menu+0x11c>)
 800549c:	1d38      	adds	r0, r7, #4
 800549e:	2301      	movs	r3, #1
 80054a0:	ca06      	ldmia	r2, {r1, r2}
 80054a2:	f000 fc83 	bl	8005dac <ssd1306_WriteString>

	sprintf(str,"%s", "1.GSM MODE");
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	4a37      	ldr	r2, [pc, #220]	; (8005588 <print_main_menu+0x120>)
 80054aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80054ac:	c303      	stmia	r3!, {r0, r1}
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	3302      	adds	r3, #2
 80054b2:	0c12      	lsrs	r2, r2, #16
 80054b4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 16);
 80054b6:	2110      	movs	r1, #16
 80054b8:	2000      	movs	r0, #0
 80054ba:	f000 fc9d 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80054be:	4a31      	ldr	r2, [pc, #196]	; (8005584 <print_main_menu+0x11c>)
 80054c0:	1d38      	adds	r0, r7, #4
 80054c2:	2301      	movs	r3, #1
 80054c4:	ca06      	ldmia	r2, {r1, r2}
 80054c6:	f000 fc71 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	2232      	movs	r2, #50	; 0x32
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f005 fc03 	bl	800acdc <memset>

	sprintf(str,"%s", "2.GPS MODE");
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	4a2c      	ldr	r2, [pc, #176]	; (800558c <print_main_menu+0x124>)
 80054da:	ca07      	ldmia	r2, {r0, r1, r2}
 80054dc:	c303      	stmia	r3!, {r0, r1}
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	3302      	adds	r3, #2
 80054e2:	0c12      	lsrs	r2, r2, #16
 80054e4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 26);
 80054e6:	211a      	movs	r1, #26
 80054e8:	2000      	movs	r0, #0
 80054ea:	f000 fc85 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80054ee:	4a25      	ldr	r2, [pc, #148]	; (8005584 <print_main_menu+0x11c>)
 80054f0:	1d38      	adds	r0, r7, #4
 80054f2:	2301      	movs	r3, #1
 80054f4:	ca06      	ldmia	r2, {r1, r2}
 80054f6:	f000 fc59 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	2232      	movs	r2, #50	; 0x32
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f005 fbeb 	bl	800acdc <memset>

	sprintf(str,"%s", "3.FINGERPRINT MODE");
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <print_main_menu+0x128>)
 800550a:	461c      	mov	r4, r3
 800550c:	4615      	mov	r5, r2
 800550e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	8022      	strh	r2, [r4, #0]
 8005518:	3402      	adds	r4, #2
 800551a:	0c1b      	lsrs	r3, r3, #16
 800551c:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 36);
 800551e:	2124      	movs	r1, #36	; 0x24
 8005520:	2000      	movs	r0, #0
 8005522:	f000 fc69 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8005526:	4a17      	ldr	r2, [pc, #92]	; (8005584 <print_main_menu+0x11c>)
 8005528:	1d38      	adds	r0, r7, #4
 800552a:	2301      	movs	r3, #1
 800552c:	ca06      	ldmia	r2, {r1, r2}
 800552e:	f000 fc3d 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	2232      	movs	r2, #50	; 0x32
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f005 fbcf 	bl	800acdc <memset>

	sprintf(str,"%s", "4.SENSORS MODE");
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	4a14      	ldr	r2, [pc, #80]	; (8005594 <print_main_menu+0x12c>)
 8005542:	461c      	mov	r4, r3
 8005544:	4613      	mov	r3, r2
 8005546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005548:	c407      	stmia	r4!, {r0, r1, r2}
 800554a:	8023      	strh	r3, [r4, #0]
 800554c:	3402      	adds	r4, #2
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 46);
 8005552:	212e      	movs	r1, #46	; 0x2e
 8005554:	2000      	movs	r0, #0
 8005556:	f000 fc4f 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 800555a:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <print_main_menu+0x11c>)
 800555c:	1d38      	adds	r0, r7, #4
 800555e:	2301      	movs	r3, #1
 8005560:	ca06      	ldmia	r2, {r1, r2}
 8005562:	f000 fc23 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	2232      	movs	r2, #50	; 0x32
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f005 fbb5 	bl	800acdc <memset>

	ssd1306_UpdateScreen();
 8005572:	f000 fb0b 	bl	8005b8c <ssd1306_UpdateScreen>
}
 8005576:	bf00      	nop
 8005578:	3738      	adds	r7, #56	; 0x38
 800557a:	46bd      	mov	sp, r7
 800557c:	bdb0      	pop	{r4, r5, r7, pc}
 800557e:	bf00      	nop
 8005580:	0800ee90 	.word	0x0800ee90
 8005584:	20000054 	.word	0x20000054
 8005588:	0800eea0 	.word	0x0800eea0
 800558c:	0800eeac 	.word	0x0800eeac
 8005590:	0800eeb8 	.word	0x0800eeb8
 8005594:	0800eecc 	.word	0x0800eecc

08005598 <print_GPS_data>:
// -----------------------------------------------------------------------------------
void print_GPS_data(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b09a      	sub	sp, #104	; 0x68
 800559c:	af00      	add	r7, sp, #0
	// 1. Print Lat and Lon ////////////////////////////////
	char str[50]={0};
 800559e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055a2:	2232      	movs	r2, #50	; 0x32
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f005 fb98 	bl	800acdc <memset>
	memset(str, 0 , sizeof(str));
 80055ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055b0:	2232      	movs	r2, #50	; 0x32
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f005 fb91 	bl	800acdc <memset>

	// Print data from GPS module  ( Lat )
	char lat_str[]="Lat:";
 80055ba:	4ad3      	ldr	r2, [pc, #844]	; (8005908 <print_GPS_data+0x370>)
 80055bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055c4:	6018      	str	r0, [r3, #0]
 80055c6:	3304      	adds	r3, #4
 80055c8:	7019      	strb	r1, [r3, #0]
	memcpy(str, lat_str, sizeof(lat_str));
 80055ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055d6:	6018      	str	r0, [r3, #0]
 80055d8:	3304      	adds	r3, #4
 80055da:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 16);
 80055dc:	2110      	movs	r1, #16
 80055de:	2000      	movs	r0, #0
 80055e0:	f000 fc0a 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80055e4:	4ac9      	ldr	r2, [pc, #804]	; (800590c <print_GPS_data+0x374>)
 80055e6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80055ea:	2301      	movs	r3, #1
 80055ec:	ca06      	ldmia	r2, {r1, r2}
 80055ee:	f000 fbdd 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80055f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055f6:	2232      	movs	r2, #50	; 0x32
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f005 fb6e 	bl	800acdc <memset>
	// Print data
	ssd1306_SetCursor(30, 16);
 8005600:	2110      	movs	r1, #16
 8005602:	201e      	movs	r0, #30
 8005604:	f000 fbf8 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_latitude, Font_7x10, White);
 8005608:	4ac0      	ldr	r2, [pc, #768]	; (800590c <print_GPS_data+0x374>)
 800560a:	2301      	movs	r3, #1
 800560c:	ca06      	ldmia	r2, {r1, r2}
 800560e:	48c0      	ldr	r0, [pc, #768]	; (8005910 <print_GPS_data+0x378>)
 8005610:	f000 fbcc 	bl	8005dac <ssd1306_WriteString>

	// Print data from GPS module  ( Lon )
	char lon_str[]="Lon:";
 8005614:	4abf      	ldr	r2, [pc, #764]	; (8005914 <print_GPS_data+0x37c>)
 8005616:	f107 031c 	add.w	r3, r7, #28
 800561a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800561e:	6018      	str	r0, [r3, #0]
 8005620:	3304      	adds	r3, #4
 8005622:	7019      	strb	r1, [r3, #0]
	memcpy(str, lon_str, sizeof(lon_str));
 8005624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005628:	f107 021c 	add.w	r2, r7, #28
 800562c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005630:	6018      	str	r0, [r3, #0]
 8005632:	3304      	adds	r3, #4
 8005634:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 26);
 8005636:	211a      	movs	r1, #26
 8005638:	2000      	movs	r0, #0
 800563a:	f000 fbdd 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 800563e:	4ab3      	ldr	r2, [pc, #716]	; (800590c <print_GPS_data+0x374>)
 8005640:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8005644:	2301      	movs	r3, #1
 8005646:	ca06      	ldmia	r2, {r1, r2}
 8005648:	f000 fbb0 	bl	8005dac <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 800564c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005650:	2232      	movs	r2, #50	; 0x32
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f005 fb41 	bl	800acdc <memset>

	ssd1306_SetCursor(30, 26);
 800565a:	211a      	movs	r1, #26
 800565c:	201e      	movs	r0, #30
 800565e:	f000 fbcb 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_lontitude, Font_7x10, White);
 8005662:	4aaa      	ldr	r2, [pc, #680]	; (800590c <print_GPS_data+0x374>)
 8005664:	2301      	movs	r3, #1
 8005666:	ca06      	ldmia	r2, {r1, r2}
 8005668:	48ab      	ldr	r0, [pc, #684]	; (8005918 <print_GPS_data+0x380>)
 800566a:	f000 fb9f 	bl	8005dac <ssd1306_WriteString>

	// 2. Print time  ////////////////////////////////
	if (GPGGA_data_is_ready == 1)
 800566e:	4bab      	ldr	r3, [pc, #684]	; (800591c <print_GPS_data+0x384>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	f040 80e3 	bne.w	800583e <print_GPS_data+0x2a6>
	{
		char hours[2]={0};
 8005678:	2300      	movs	r3, #0
 800567a:	813b      	strh	r3, [r7, #8]
		char minutes[2]={0};
 800567c:	2300      	movs	r3, #0
 800567e:	80bb      	strh	r3, [r7, #4]
		char semicolum = ':';
 8005680:	233a      	movs	r3, #58	; 0x3a
 8005682:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		// divide hours and minutes
		uint8_t i=0;
 8005686:	2300      	movs	r3, #0
 8005688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		for(i=0; i<=3; i++)
 800568c:	2300      	movs	r3, #0
 800568e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005692:	e020      	b.n	80056d6 <print_GPS_data+0x13e>
		{
			if(i<=1)
 8005694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005698:	2b01      	cmp	r3, #1
 800569a:	d80b      	bhi.n	80056b4 <print_GPS_data+0x11c>
			{
				hours[i] = gps_time[i];
 800569c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80056a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056a4:	499e      	ldr	r1, [pc, #632]	; (8005920 <print_GPS_data+0x388>)
 80056a6:	5c8a      	ldrb	r2, [r1, r2]
 80056a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80056ac:	440b      	add	r3, r1
 80056ae:	f803 2c60 	strb.w	r2, [r3, #-96]
 80056b2:	e00b      	b.n	80056cc <print_GPS_data+0x134>
			}
			else
			{
				minutes[i-2] = gps_time[i];
 80056b4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80056b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056bc:	3b02      	subs	r3, #2
 80056be:	4998      	ldr	r1, [pc, #608]	; (8005920 <print_GPS_data+0x388>)
 80056c0:	5c8a      	ldrb	r2, [r1, r2]
 80056c2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80056c6:	440b      	add	r3, r1
 80056c8:	f803 2c64 	strb.w	r2, [r3, #-100]
		for(i=0; i<=3; i++)
 80056cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056d0:	3301      	adds	r3, #1
 80056d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80056d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d9da      	bls.n	8005694 <print_GPS_data+0xfc>
			}
		}
		// Add 3 hours
		int int_hours = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t dozens = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t units = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		dozens = hours[0];
 80056ee:	7a3b      	ldrb	r3, [r7, #8]
 80056f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = hours[1];
 80056f4:	7a7b      	ldrb	r3, [r7, #9]
 80056f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		dozens = dozens - 48;
 80056fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fe:	3b30      	subs	r3, #48	; 0x30
 8005700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = units - 48;
 8005704:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8005708:	3b30      	subs	r3, #48	; 0x30
 800570a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		int_hours = units +(dozens *10);
 800570e:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8005712:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	440b      	add	r3, r1
 8005720:	663b      	str	r3, [r7, #96]	; 0x60
		int_hours = int_hours+2;
 8005722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005724:	3302      	adds	r3, #2
 8005726:	663b      	str	r3, [r7, #96]	; 0x60

		dozens = (int_hours/10) + 48;
 8005728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800572a:	4a7e      	ldr	r2, [pc, #504]	; (8005924 <print_GPS_data+0x38c>)
 800572c:	fb82 1203 	smull	r1, r2, r2, r3
 8005730:	1092      	asrs	r2, r2, #2
 8005732:	17db      	asrs	r3, r3, #31
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3330      	adds	r3, #48	; 0x30
 800573a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = (int_hours%10) + 48;
 800573e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005740:	4b78      	ldr	r3, [pc, #480]	; (8005924 <print_GPS_data+0x38c>)
 8005742:	fb83 1302 	smull	r1, r3, r3, r2
 8005746:	1099      	asrs	r1, r3, #2
 8005748:	17d3      	asrs	r3, r2, #31
 800574a:	1ac9      	subs	r1, r1, r3
 800574c:	460b      	mov	r3, r1
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	1ad1      	subs	r1, r2, r3
 8005756:	b2cb      	uxtb	r3, r1
 8005758:	3330      	adds	r3, #48	; 0x30
 800575a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		hours[0] = dozens;
 800575e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005762:	723b      	strb	r3, [r7, #8]
		hours[1] = units;
 8005764:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8005768:	727b      	strb	r3, [r7, #9]

		if(int_hours == 24)
 800576a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576c:	2b18      	cmp	r3, #24
 800576e:	d103      	bne.n	8005778 <print_GPS_data+0x1e0>
		{
			hours[0] = '0';
 8005770:	2330      	movs	r3, #48	; 0x30
 8005772:	723b      	strb	r3, [r7, #8]
			hours[1] = '0';
 8005774:	2330      	movs	r3, #48	; 0x30
 8005776:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 25)
 8005778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577a:	2b19      	cmp	r3, #25
 800577c:	d103      	bne.n	8005786 <print_GPS_data+0x1ee>
		{
			hours[0] = '0';
 800577e:	2330      	movs	r3, #48	; 0x30
 8005780:	723b      	strb	r3, [r7, #8]
			hours[1] = '1';
 8005782:	2331      	movs	r3, #49	; 0x31
 8005784:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 26)
 8005786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005788:	2b1a      	cmp	r3, #26
 800578a:	d103      	bne.n	8005794 <print_GPS_data+0x1fc>
		{
			hours[0] = '0';
 800578c:	2330      	movs	r3, #48	; 0x30
 800578e:	723b      	strb	r3, [r7, #8]
			hours[1] = '2';
 8005790:	2332      	movs	r3, #50	; 0x32
 8005792:	727b      	strb	r3, [r7, #9]
		}

		if((int_hours >=0) && (int_hours<=9))
 8005794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005796:	2b00      	cmp	r3, #0
 8005798:	db09      	blt.n	80057ae <print_GPS_data+0x216>
 800579a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800579c:	2b09      	cmp	r3, #9
 800579e:	dc06      	bgt.n	80057ae <print_GPS_data+0x216>
		{
			hours[0] = '0';
 80057a0:	2330      	movs	r3, #48	; 0x30
 80057a2:	723b      	strb	r3, [r7, #8]
			hours[1] = int_hours +48;
 80057a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3330      	adds	r3, #48	; 0x30
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	727b      	strb	r3, [r7, #9]
		}

		// connect  hours and minutes with colon
		//i=5;
		for(i=0; i<5; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80057b4:	e034      	b.n	8005820 <print_GPS_data+0x288>
		{
			if(i<=1)
 80057b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d80e      	bhi.n	80057dc <print_GPS_data+0x244>
			{
				str[i] = hours[i];
 80057be:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80057c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057c6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80057ca:	440a      	add	r2, r1
 80057cc:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 80057d0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80057d4:	440b      	add	r3, r1
 80057d6:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80057da:	e01c      	b.n	8005816 <print_GPS_data+0x27e>
			}
			else
			{
				if(i==2)
 80057dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d109      	bne.n	80057f8 <print_GPS_data+0x260>
				{
					str[i] = semicolum;
 80057e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80057ec:	4413      	add	r3, r2
 80057ee:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80057f2:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80057f6:	e00e      	b.n	8005816 <print_GPS_data+0x27e>
				}
				else
				{
					str[i]=minutes[i-3];
 80057f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057fc:	1eda      	subs	r2, r3, #3
 80057fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005802:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005806:	440a      	add	r2, r1
 8005808:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 800580c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005810:	440b      	add	r3, r1
 8005812:	f803 2c3c 	strb.w	r2, [r3, #-60]
		for(i=0; i<5; i++)
 8005816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800581a:	3301      	adds	r3, #1
 800581c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005820:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005824:	2b04      	cmp	r3, #4
 8005826:	d9c6      	bls.n	80057b6 <print_GPS_data+0x21e>
				}
			}
		}

		ssd1306_SetCursor(0, 36);
 8005828:	2124      	movs	r1, #36	; 0x24
 800582a:	2000      	movs	r0, #0
 800582c:	f000 fae4 	bl	8005df8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8005830:	4a36      	ldr	r2, [pc, #216]	; (800590c <print_GPS_data+0x374>)
 8005832:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8005836:	2301      	movs	r3, #1
 8005838:	ca06      	ldmia	r2, {r1, r2}
 800583a:	f000 fab7 	bl	8005dac <ssd1306_WriteString>
	}

	// 3. Print number of satalits  ////////////////////////////////
	char numbers_of_satalits_str[]="N:  ";
 800583e:	4a3a      	ldr	r2, [pc, #232]	; (8005928 <print_GPS_data+0x390>)
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005848:	6018      	str	r0, [r3, #0]
 800584a:	3304      	adds	r3, #4
 800584c:	7019      	strb	r1, [r3, #0]
	memcpy(str, numbers_of_satalits_str, sizeof(numbers_of_satalits_str));
 800584e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005852:	f107 0214 	add.w	r2, r7, #20
 8005856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800585a:	6018      	str	r0, [r3, #0]
 800585c:	3304      	adds	r3, #4
 800585e:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(40, 36);
 8005860:	2124      	movs	r1, #36	; 0x24
 8005862:	2028      	movs	r0, #40	; 0x28
 8005864:	f000 fac8 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8005868:	4a28      	ldr	r2, [pc, #160]	; (800590c <print_GPS_data+0x374>)
 800586a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800586e:	2301      	movs	r3, #1
 8005870:	ca06      	ldmia	r2, {r1, r2}
 8005872:	f000 fa9b 	bl	8005dac <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 8005876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800587a:	2232      	movs	r2, #50	; 0x32
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f005 fa2c 	bl	800acdc <memset>
	ssd1306_SetCursor(55, 36);
 8005884:	2124      	movs	r1, #36	; 0x24
 8005886:	2037      	movs	r0, #55	; 0x37
 8005888:	f000 fab6 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_number_of_satellites, Font_7x10, White);
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <print_GPS_data+0x374>)
 800588e:	2301      	movs	r3, #1
 8005890:	ca06      	ldmia	r2, {r1, r2}
 8005892:	4826      	ldr	r0, [pc, #152]	; (800592c <print_GPS_data+0x394>)
 8005894:	f000 fa8a 	bl	8005dac <ssd1306_WriteString>

	// 4. Print number of satalits  ////////////////////////////////
	//gps_speed
	char speed_str[]="S:    ";
 8005898:	4a25      	ldr	r2, [pc, #148]	; (8005930 <print_GPS_data+0x398>)
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a2:	6018      	str	r0, [r3, #0]
 80058a4:	3304      	adds	r3, #4
 80058a6:	8019      	strh	r1, [r3, #0]
 80058a8:	3302      	adds	r3, #2
 80058aa:	0c0a      	lsrs	r2, r1, #16
 80058ac:	701a      	strb	r2, [r3, #0]
	memcpy(str, speed_str, sizeof(speed_str));
 80058ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058b2:	f107 020c 	add.w	r2, r7, #12
 80058b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ba:	6018      	str	r0, [r3, #0]
 80058bc:	3304      	adds	r3, #4
 80058be:	8019      	strh	r1, [r3, #0]
 80058c0:	3302      	adds	r3, #2
 80058c2:	0c0a      	lsrs	r2, r1, #16
 80058c4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(75, 36);
 80058c6:	2124      	movs	r1, #36	; 0x24
 80058c8:	204b      	movs	r0, #75	; 0x4b
 80058ca:	f000 fa95 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80058ce:	4a0f      	ldr	r2, [pc, #60]	; (800590c <print_GPS_data+0x374>)
 80058d0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80058d4:	2301      	movs	r3, #1
 80058d6:	ca06      	ldmia	r2, {r1, r2}
 80058d8:	f000 fa68 	bl	8005dac <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 80058dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058e0:	2232      	movs	r2, #50	; 0x32
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f005 f9f9 	bl	800acdc <memset>
	ssd1306_SetCursor(90, 36);
 80058ea:	2124      	movs	r1, #36	; 0x24
 80058ec:	205a      	movs	r0, #90	; 0x5a
 80058ee:	f000 fa83 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_speed, Font_7x10, White);
 80058f2:	4a06      	ldr	r2, [pc, #24]	; (800590c <print_GPS_data+0x374>)
 80058f4:	2301      	movs	r3, #1
 80058f6:	ca06      	ldmia	r2, {r1, r2}
 80058f8:	480e      	ldr	r0, [pc, #56]	; (8005934 <print_GPS_data+0x39c>)
 80058fa:	f000 fa57 	bl	8005dac <ssd1306_WriteString>
}
 80058fe:	bf00      	nop
 8005900:	3768      	adds	r7, #104	; 0x68
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	0800eedc 	.word	0x0800eedc
 800590c:	20000054 	.word	0x20000054
 8005910:	2000070c 	.word	0x2000070c
 8005914:	0800eee4 	.word	0x0800eee4
 8005918:	20000740 	.word	0x20000740
 800591c:	20000278 	.word	0x20000278
 8005920:	20000738 	.word	0x20000738
 8005924:	66666667 	.word	0x66666667
 8005928:	0800eeec 	.word	0x0800eeec
 800592c:	20000728 	.word	0x20000728
 8005930:	0800eef4 	.word	0x0800eef4
 8005934:	20000704 	.word	0x20000704

08005938 <print_all_sensors_data>:
// -----------------------------------------------------------------------------------
void print_all_sensors_data(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af00      	add	r7, sp, #0
	char str_1[40]={0};
 800593e:	463b      	mov	r3, r7
 8005940:	2228      	movs	r2, #40	; 0x28
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f005 f9c9 	bl	800acdc <memset>

	// 1. Print data from si7021 sensor
	strcpy(str_1, "1.si7021 ");
 800594a:	463b      	mov	r3, r7
 800594c:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <print_all_sensors_data+0xd0>)
 800594e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005950:	c303      	stmia	r3!, {r0, r1}
 8005952:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_si7021);
 8005954:	463b      	mov	r3, r7
 8005956:	492d      	ldr	r1, [pc, #180]	; (8005a0c <print_all_sensors_data+0xd4>)
 8005958:	4618      	mov	r0, r3
 800595a:	f005 fab5 	bl	800aec8 <strcat>
	strcat(str_1, humidity_si7021);
 800595e:	463b      	mov	r3, r7
 8005960:	492b      	ldr	r1, [pc, #172]	; (8005a10 <print_all_sensors_data+0xd8>)
 8005962:	4618      	mov	r0, r3
 8005964:	f005 fab0 	bl	800aec8 <strcat>

	ssd1306_SetCursor(0, 16);
 8005968:	2110      	movs	r1, #16
 800596a:	2000      	movs	r0, #0
 800596c:	f000 fa44 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 8005970:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <print_all_sensors_data+0xdc>)
 8005972:	4638      	mov	r0, r7
 8005974:	2301      	movs	r3, #1
 8005976:	ca06      	ldmia	r2, {r1, r2}
 8005978:	f000 fa18 	bl	8005dac <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 800597c:	463b      	mov	r3, r7
 800597e:	2228      	movs	r2, #40	; 0x28
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f005 f9aa 	bl	800acdc <memset>

	// 2. Print data from AM2302
	strcpy(str_1, "2.AM2302 ");
 8005988:	463b      	mov	r3, r7
 800598a:	4a23      	ldr	r2, [pc, #140]	; (8005a18 <print_all_sensors_data+0xe0>)
 800598c:	ca07      	ldmia	r2, {r0, r1, r2}
 800598e:	c303      	stmia	r3!, {r0, r1}
 8005990:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_am3202);
 8005992:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <print_all_sensors_data+0xe4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	463b      	mov	r3, r7
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f005 fa93 	bl	800aec8 <strcat>
	strcat(str_1, humidity_am3202);
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <print_all_sensors_data+0xe8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	463b      	mov	r3, r7
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f005 fa8b 	bl	800aec8 <strcat>

	ssd1306_SetCursor(0, 26);
 80059b2:	211a      	movs	r1, #26
 80059b4:	2000      	movs	r0, #0
 80059b6:	f000 fa1f 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 80059ba:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <print_all_sensors_data+0xdc>)
 80059bc:	4638      	mov	r0, r7
 80059be:	2301      	movs	r3, #1
 80059c0:	ca06      	ldmia	r2, {r1, r2}
 80059c2:	f000 f9f3 	bl	8005dac <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 80059c6:	463b      	mov	r3, r7
 80059c8:	2228      	movs	r2, #40	; 0x28
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f005 f985 	bl	800acdc <memset>

	// 3. Print data from 9066
	strcpy(str_1, "2.9066 ");
 80059d2:	463b      	mov	r3, r7
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <print_all_sensors_data+0xec>)
 80059d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059da:	e883 0003 	stmia.w	r3, {r0, r1}

	ssd1306_SetCursor(0, 36);
 80059de:	2124      	movs	r1, #36	; 0x24
 80059e0:	2000      	movs	r0, #0
 80059e2:	f000 fa09 	bl	8005df8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 80059e6:	4a0b      	ldr	r2, [pc, #44]	; (8005a14 <print_all_sensors_data+0xdc>)
 80059e8:	4638      	mov	r0, r7
 80059ea:	2301      	movs	r3, #1
 80059ec:	ca06      	ldmia	r2, {r1, r2}
 80059ee:	f000 f9dd 	bl	8005dac <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 80059f2:	463b      	mov	r3, r7
 80059f4:	2228      	movs	r2, #40	; 0x28
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f005 f96f 	bl	800acdc <memset>
}
 80059fe:	bf00      	nop
 8005a00:	3728      	adds	r7, #40	; 0x28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	0800eefc 	.word	0x0800eefc
 8005a0c:	200006f4 	.word	0x200006f4
 8005a10:	200006fc 	.word	0x200006fc
 8005a14:	20000054 	.word	0x20000054
 8005a18:	0800ef08 	.word	0x0800ef08
 8005a1c:	20000718 	.word	0x20000718
 8005a20:	2000074c 	.word	0x2000074c
 8005a24:	0800ef14 	.word	0x0800ef14

08005a28 <print_GSM_data>:
// -----------------------------------------------------------------------------------
void print_GSM_data(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0

}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <print_fingerprint_data>:
// -----------------------------------------------------------------------------------
void print_fingerprint_data(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0

}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af04      	add	r7, sp, #16
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	9302      	str	r3, [sp, #8]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2301      	movs	r3, #1
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2178      	movs	r1, #120	; 0x78
 8005a5c:	4803      	ldr	r0, [pc, #12]	; (8005a6c <ssd1306_WriteCommand+0x2c>)
 8005a5e:	f001 fff7 	bl	8007a50 <HAL_I2C_Mem_Write>
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000854 	.word	0x20000854

08005a70 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8005a74:	2064      	movs	r0, #100	; 0x64
 8005a76:	f000 fe25 	bl	80066c4 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8005a7a:	20ae      	movs	r0, #174	; 0xae
 8005a7c:	f7ff ffe0 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8005a80:	2020      	movs	r0, #32
 8005a82:	f7ff ffdd 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005a86:	2010      	movs	r0, #16
 8005a88:	f7ff ffda 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005a8c:	20b0      	movs	r0, #176	; 0xb0
 8005a8e:	f7ff ffd7 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005a92:	20c8      	movs	r0, #200	; 0xc8
 8005a94:	f7ff ffd4 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8005a98:	2000      	movs	r0, #0
 8005a9a:	f7ff ffd1 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff ffce 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8005aa4:	2040      	movs	r0, #64	; 0x40
 8005aa6:	f7ff ffcb 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8005aaa:	2081      	movs	r0, #129	; 0x81
 8005aac:	f7ff ffc8 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8005ab0:	20ff      	movs	r0, #255	; 0xff
 8005ab2:	f7ff ffc5 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8005ab6:	20a1      	movs	r0, #161	; 0xa1
 8005ab8:	f7ff ffc2 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8005abc:	20a6      	movs	r0, #166	; 0xa6
 8005abe:	f7ff ffbf 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8005ac2:	20a8      	movs	r0, #168	; 0xa8
 8005ac4:	f7ff ffbc 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8005ac8:	203f      	movs	r0, #63	; 0x3f
 8005aca:	f7ff ffb9 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005ace:	20a4      	movs	r0, #164	; 0xa4
 8005ad0:	f7ff ffb6 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8005ad4:	20d3      	movs	r0, #211	; 0xd3
 8005ad6:	f7ff ffb3 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7ff ffb0 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005ae0:	20d5      	movs	r0, #213	; 0xd5
 8005ae2:	f7ff ffad 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005ae6:	20f0      	movs	r0, #240	; 0xf0
 8005ae8:	f7ff ffaa 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005aec:	20d9      	movs	r0, #217	; 0xd9
 8005aee:	f7ff ffa7 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8005af2:	2022      	movs	r0, #34	; 0x22
 8005af4:	f7ff ffa4 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8005af8:	20da      	movs	r0, #218	; 0xda
 8005afa:	f7ff ffa1 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8005afe:	2012      	movs	r0, #18
 8005b00:	f7ff ff9e 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005b04:	20db      	movs	r0, #219	; 0xdb
 8005b06:	f7ff ff9b 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005b0a:	2020      	movs	r0, #32
 8005b0c:	f7ff ff98 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005b10:	208d      	movs	r0, #141	; 0x8d
 8005b12:	f7ff ff95 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8005b16:	2014      	movs	r0, #20
 8005b18:	f7ff ff92 	bl	8005a40 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8005b1c:	20af      	movs	r0, #175	; 0xaf
 8005b1e:	f7ff ff8f 	bl	8005a40 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8005b22:	2000      	movs	r0, #0
 8005b24:	f000 f810 	bl	8005b48 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8005b28:	f000 f830 	bl	8005b8c <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <ssd1306_Init+0xd4>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005b32:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <ssd1306_Init+0xd4>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <ssd1306_Init+0xd4>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8005b3e:	2301      	movs	r3, #1
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	200006cc 	.word	0x200006cc

08005b48 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e00d      	b.n	8005b74 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <ssd1306_Fill+0x1a>
 8005b5e:	2100      	movs	r1, #0
 8005b60:	e000      	b.n	8005b64 <ssd1306_Fill+0x1c>
 8005b62:	21ff      	movs	r1, #255	; 0xff
 8005b64:	4a08      	ldr	r2, [pc, #32]	; (8005b88 <ssd1306_Fill+0x40>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d3ed      	bcc.n	8005b58 <ssd1306_Fill+0x10>
	}
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	200002cc 	.word	0x200002cc

08005b8c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8005b92:	2300      	movs	r3, #0
 8005b94:	71fb      	strb	r3, [r7, #7]
 8005b96:	e01d      	b.n	8005bd4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	3b50      	subs	r3, #80	; 0x50
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff ff4e 	bl	8005a40 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f7ff ff4b 	bl	8005a40 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8005baa:	2010      	movs	r0, #16
 8005bac:	f7ff ff48 	bl	8005a40 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	01db      	lsls	r3, r3, #7
 8005bb4:	4a0b      	ldr	r2, [pc, #44]	; (8005be4 <ssd1306_UpdateScreen+0x58>)
 8005bb6:	4413      	add	r3, r2
 8005bb8:	2264      	movs	r2, #100	; 0x64
 8005bba:	9202      	str	r2, [sp, #8]
 8005bbc:	2280      	movs	r2, #128	; 0x80
 8005bbe:	9201      	str	r2, [sp, #4]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	2240      	movs	r2, #64	; 0x40
 8005bc6:	2178      	movs	r1, #120	; 0x78
 8005bc8:	4807      	ldr	r0, [pc, #28]	; (8005be8 <ssd1306_UpdateScreen+0x5c>)
 8005bca:	f001 ff41 	bl	8007a50 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	71fb      	strb	r3, [r7, #7]
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	2b07      	cmp	r3, #7
 8005bd8:	d9de      	bls.n	8005b98 <ssd1306_UpdateScreen+0xc>
	}
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200002cc 	.word	0x200002cc
 8005be8:	20000854 	.word	0x20000854

08005bec <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	71bb      	strb	r3, [r7, #6]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8005bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	db48      	blt.n	8005c98 <ssd1306_DrawPixel+0xac>
 8005c06:	79bb      	ldrb	r3, [r7, #6]
 8005c08:	2b3f      	cmp	r3, #63	; 0x3f
 8005c0a:	d845      	bhi.n	8005c98 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8005c0c:	4b25      	ldr	r3, [pc, #148]	; (8005ca4 <ssd1306_DrawPixel+0xb8>)
 8005c0e:	791b      	ldrb	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8005c14:	797b      	ldrb	r3, [r7, #5]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8005c22:	797b      	ldrb	r3, [r7, #5]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11a      	bne.n	8005c5e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	79bb      	ldrb	r3, [r7, #6]
 8005c2c:	08db      	lsrs	r3, r3, #3
 8005c2e:	b2d8      	uxtb	r0, r3
 8005c30:	4603      	mov	r3, r0
 8005c32:	01db      	lsls	r3, r3, #7
 8005c34:	4413      	add	r3, r2
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <ssd1306_DrawPixel+0xbc>)
 8005c38:	5cd3      	ldrb	r3, [r2, r3]
 8005c3a:	b25a      	sxtb	r2, r3
 8005c3c:	79bb      	ldrb	r3, [r7, #6]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	2101      	movs	r1, #1
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b259      	sxtb	r1, r3
 8005c4e:	79fa      	ldrb	r2, [r7, #7]
 8005c50:	4603      	mov	r3, r0
 8005c52:	01db      	lsls	r3, r3, #7
 8005c54:	4413      	add	r3, r2
 8005c56:	b2c9      	uxtb	r1, r1
 8005c58:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <ssd1306_DrawPixel+0xbc>)
 8005c5a:	54d1      	strb	r1, [r2, r3]
 8005c5c:	e01d      	b.n	8005c9a <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005c5e:	79fa      	ldrb	r2, [r7, #7]
 8005c60:	79bb      	ldrb	r3, [r7, #6]
 8005c62:	08db      	lsrs	r3, r3, #3
 8005c64:	b2d8      	uxtb	r0, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	01db      	lsls	r3, r3, #7
 8005c6a:	4413      	add	r3, r2
 8005c6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ca8 <ssd1306_DrawPixel+0xbc>)
 8005c6e:	5cd3      	ldrb	r3, [r2, r3]
 8005c70:	b25a      	sxtb	r2, r3
 8005c72:	79bb      	ldrb	r3, [r7, #6]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	2101      	movs	r1, #1
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	4013      	ands	r3, r2
 8005c86:	b259      	sxtb	r1, r3
 8005c88:	79fa      	ldrb	r2, [r7, #7]
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	4413      	add	r3, r2
 8005c90:	b2c9      	uxtb	r1, r1
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <ssd1306_DrawPixel+0xbc>)
 8005c94:	54d1      	strb	r1, [r2, r3]
 8005c96:	e000      	b.n	8005c9a <ssd1306_DrawPixel+0xae>
		return;
 8005c98:	bf00      	nop
	}
}
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	200006cc 	.word	0x200006cc
 8005ca8:	200002cc 	.word	0x200002cc

08005cac <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b089      	sub	sp, #36	; 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	1d38      	adds	r0, r7, #4
 8005cb6:	e880 0006 	stmia.w	r0, {r1, r2}
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	73fb      	strb	r3, [r7, #15]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005cc4:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	793b      	ldrb	r3, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd0:	dc06      	bgt.n	8005ce0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005cd2:	4b35      	ldr	r3, [pc, #212]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005cd4:	885b      	ldrh	r3, [r3, #2]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	797b      	ldrb	r3, [r7, #5]
 8005cda:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8005cde:	dd01      	ble.n	8005ce4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e05d      	b.n	8005da0 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	e04c      	b.n	8005d84 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	3b20      	subs	r3, #32
 8005cf0:	7979      	ldrb	r1, [r7, #5]
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	440b      	add	r3, r1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e034      	b.n	8005d74 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d012      	beq.n	8005d40 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	4413      	add	r3, r2
 8005d26:	b2d8      	uxtb	r0, r3
 8005d28:	4b1f      	ldr	r3, [pc, #124]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005d2a:	885b      	ldrh	r3, [r3, #2]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	7bba      	ldrb	r2, [r7, #14]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f7ff ff57 	bl	8005bec <ssd1306_DrawPixel>
 8005d3e:	e016      	b.n	8005d6e <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	b2d8      	uxtb	r0, r3
 8005d4e:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005d50:	885b      	ldrh	r3, [r3, #2]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	b2d9      	uxtb	r1, r3
 8005d5c:	7bbb      	ldrb	r3, [r7, #14]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f7ff ff3f 	bl	8005bec <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	793b      	ldrb	r3, [r7, #4]
 8005d76:	461a      	mov	r2, r3
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d3c5      	bcc.n	8005d0a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	3301      	adds	r3, #1
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	797b      	ldrb	r3, [r7, #5]
 8005d86:	461a      	mov	r2, r3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d3ad      	bcc.n	8005cea <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005d90:	881a      	ldrh	r2, [r3, #0]
 8005d92:	793b      	ldrb	r3, [r7, #4]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4413      	add	r3, r2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <ssd1306_WriteChar+0xfc>)
 8005d9c:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3724      	adds	r7, #36	; 0x24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}
 8005da8:	200006cc 	.word	0x200006cc

08005dac <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	1d38      	adds	r0, r7, #4
 8005db6:	e880 0006 	stmia.w	r0, {r1, r2}
 8005dba:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8005dbc:	e012      	b.n	8005de4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	7818      	ldrb	r0, [r3, #0]
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	1d3a      	adds	r2, r7, #4
 8005dc6:	ca06      	ldmia	r2, {r1, r2}
 8005dc8:	f7ff ff70 	bl	8005cac <ssd1306_WriteChar>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d002      	beq.n	8005dde <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	e008      	b.n	8005df0 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e8      	bne.n	8005dbe <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	781b      	ldrb	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	460a      	mov	r2, r1
 8005e02:	71fb      	strb	r3, [r7, #7]
 8005e04:	4613      	mov	r3, r2
 8005e06:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <ssd1306_SetCursor+0x2c>)
 8005e0e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8005e10:	79bb      	ldrb	r3, [r7, #6]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <ssd1306_SetCursor+0x2c>)
 8005e16:	805a      	strh	r2, [r3, #2]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200006cc 	.word	0x200006cc

08005e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e2e:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <HAL_MspInit+0x5c>)
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <HAL_MspInit+0x5c>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6193      	str	r3, [r2, #24]
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <HAL_MspInit+0x5c>)
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_MspInit+0x5c>)
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	4a0e      	ldr	r2, [pc, #56]	; (8005e84 <HAL_MspInit+0x5c>)
 8005e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e50:	61d3      	str	r3, [r2, #28]
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <HAL_MspInit+0x5c>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <HAL_MspInit+0x60>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <HAL_MspInit+0x60>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40010000 	.word	0x40010000

08005e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
 8005ea0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <HAL_I2C_MspInit+0x70>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d123      	bne.n	8005ef4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eac:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <HAL_I2C_MspInit+0x74>)
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <HAL_I2C_MspInit+0x74>)
 8005eb2:	f043 0308 	orr.w	r3, r3, #8
 8005eb6:	6193      	str	r3, [r2, #24]
 8005eb8:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <HAL_I2C_MspInit+0x74>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ec4:	23c0      	movs	r3, #192	; 0xc0
 8005ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ec8:	2312      	movs	r3, #18
 8005eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	480b      	ldr	r0, [pc, #44]	; (8005f04 <HAL_I2C_MspInit+0x78>)
 8005ed8:	f000 ff88 	bl	8006dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005edc:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <HAL_I2C_MspInit+0x74>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	4a07      	ldr	r2, [pc, #28]	; (8005f00 <HAL_I2C_MspInit+0x74>)
 8005ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ee6:	61d3      	str	r3, [r2, #28]
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_I2C_MspInit+0x74>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ef4:	bf00      	nop
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40005400 	.word	0x40005400
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40010c00 	.word	0x40010c00

08005f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0310 	add.w	r3, r7, #16
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_SPI_MspInit+0x8c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d131      	bne.n	8005f8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <HAL_SPI_MspInit+0x90>)
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_SPI_MspInit+0x90>)
 8005f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f32:	61d3      	str	r3, [r2, #28]
 8005f34:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_SPI_MspInit+0x90>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f40:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <HAL_SPI_MspInit+0x90>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <HAL_SPI_MspInit+0x90>)
 8005f46:	f043 0308 	orr.w	r3, r3, #8
 8005f4a:	6193      	str	r3, [r2, #24]
 8005f4c:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_SPI_MspInit+0x90>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005f58:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f62:	2303      	movs	r3, #3
 8005f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f66:	f107 0310 	add.w	r3, r7, #16
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	480b      	ldr	r0, [pc, #44]	; (8005f9c <HAL_SPI_MspInit+0x94>)
 8005f6e:	f000 ff3d 	bl	8006dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	4619      	mov	r1, r3
 8005f86:	4805      	ldr	r0, [pc, #20]	; (8005f9c <HAL_SPI_MspInit+0x94>)
 8005f88:	f000 ff30 	bl	8006dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005f8c:	bf00      	nop
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40003800 	.word	0x40003800
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40010c00 	.word	0x40010c00

08005fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <HAL_TIM_Base_MspInit+0x68>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10c      	bne.n	8005fcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fb2:	4b16      	ldr	r3, [pc, #88]	; (800600c <HAL_TIM_Base_MspInit+0x6c>)
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	4a15      	ldr	r2, [pc, #84]	; (800600c <HAL_TIM_Base_MspInit+0x6c>)
 8005fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fbc:	6193      	str	r3, [r2, #24]
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <HAL_TIM_Base_MspInit+0x6c>)
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005fca:	e018      	b.n	8005ffe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d113      	bne.n	8005ffe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <HAL_TIM_Base_MspInit+0x6c>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	4a0c      	ldr	r2, [pc, #48]	; (800600c <HAL_TIM_Base_MspInit+0x6c>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	61d3      	str	r3, [r2, #28]
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_TIM_Base_MspInit+0x6c>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	201c      	movs	r0, #28
 8005ff4:	f000 fc5f 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ff8:	201c      	movs	r0, #28
 8005ffa:	f000 fc78 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40021000 	.word	0x40021000

08006010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006018:	f107 0310 	add.w	r3, r7, #16
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <HAL_TIM_MspPostInit+0x5c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d118      	bne.n	8006062 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <HAL_TIM_MspPostInit+0x60>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	4a0e      	ldr	r2, [pc, #56]	; (8006070 <HAL_TIM_MspPostInit+0x60>)
 8006036:	f043 0304 	orr.w	r3, r3, #4
 800603a:	6193      	str	r3, [r2, #24]
 800603c:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <HAL_TIM_MspPostInit+0x60>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800604c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604e:	2302      	movs	r3, #2
 8006050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006052:	2302      	movs	r3, #2
 8006054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006056:	f107 0310 	add.w	r3, r7, #16
 800605a:	4619      	mov	r1, r3
 800605c:	4805      	ldr	r0, [pc, #20]	; (8006074 <HAL_TIM_MspPostInit+0x64>)
 800605e:	f000 fec5 	bl	8006dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006062:	bf00      	nop
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40021000 	.word	0x40021000
 8006074:	40010800 	.word	0x40010800

08006078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08c      	sub	sp, #48	; 0x30
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006080:	f107 0320 	add.w	r3, r7, #32
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a73      	ldr	r2, [pc, #460]	; (8006260 <HAL_UART_MspInit+0x1e8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d13a      	bne.n	800610e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006098:	4b72      	ldr	r3, [pc, #456]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4a71      	ldr	r2, [pc, #452]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 800609e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060a2:	6193      	str	r3, [r2, #24]
 80060a4:	4b6f      	ldr	r3, [pc, #444]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b0:	4b6c      	ldr	r3, [pc, #432]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	4a6b      	ldr	r2, [pc, #428]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80060b6:	f043 0304 	orr.w	r3, r3, #4
 80060ba:	6193      	str	r3, [r2, #24]
 80060bc:	4b69      	ldr	r3, [pc, #420]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ce:	2302      	movs	r3, #2
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060d2:	2303      	movs	r3, #3
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d6:	f107 0320 	add.w	r3, r7, #32
 80060da:	4619      	mov	r1, r3
 80060dc:	4862      	ldr	r0, [pc, #392]	; (8006268 <HAL_UART_MspInit+0x1f0>)
 80060de:	f000 fe85 	bl	8006dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80060e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f0:	f107 0320 	add.w	r3, r7, #32
 80060f4:	4619      	mov	r1, r3
 80060f6:	485c      	ldr	r0, [pc, #368]	; (8006268 <HAL_UART_MspInit+0x1f0>)
 80060f8:	f000 fe78 	bl	8006dec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80060fc:	2200      	movs	r2, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	2025      	movs	r0, #37	; 0x25
 8006102:	f000 fbd8 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006106:	2025      	movs	r0, #37	; 0x25
 8006108:	f000 fbf1 	bl	80068ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800610c:	e0a3      	b.n	8006256 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a56      	ldr	r2, [pc, #344]	; (800626c <HAL_UART_MspInit+0x1f4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d138      	bne.n	800618a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006118:	4b52      	ldr	r3, [pc, #328]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	4a51      	ldr	r2, [pc, #324]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006122:	61d3      	str	r3, [r2, #28]
 8006124:	4b4f      	ldr	r3, [pc, #316]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006130:	4b4c      	ldr	r3, [pc, #304]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	4a4b      	ldr	r2, [pc, #300]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 8006136:	f043 0304 	orr.w	r3, r3, #4
 800613a:	6193      	str	r3, [r2, #24]
 800613c:	4b49      	ldr	r3, [pc, #292]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006148:	2304      	movs	r3, #4
 800614a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614c:	2302      	movs	r3, #2
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006150:	2303      	movs	r3, #3
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006154:	f107 0320 	add.w	r3, r7, #32
 8006158:	4619      	mov	r1, r3
 800615a:	4843      	ldr	r0, [pc, #268]	; (8006268 <HAL_UART_MspInit+0x1f0>)
 800615c:	f000 fe46 	bl	8006dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006160:	2308      	movs	r3, #8
 8006162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006168:	2300      	movs	r3, #0
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616c:	f107 0320 	add.w	r3, r7, #32
 8006170:	4619      	mov	r1, r3
 8006172:	483d      	ldr	r0, [pc, #244]	; (8006268 <HAL_UART_MspInit+0x1f0>)
 8006174:	f000 fe3a 	bl	8006dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006178:	2200      	movs	r2, #0
 800617a:	2100      	movs	r1, #0
 800617c:	2026      	movs	r0, #38	; 0x26
 800617e:	f000 fb9a 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006182:	2026      	movs	r0, #38	; 0x26
 8006184:	f000 fbb3 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 8006188:	e065      	b.n	8006256 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a38      	ldr	r2, [pc, #224]	; (8006270 <HAL_UART_MspInit+0x1f8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d160      	bne.n	8006256 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006194:	4b33      	ldr	r3, [pc, #204]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4a32      	ldr	r2, [pc, #200]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 800619a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800619e:	61d3      	str	r3, [r2, #28]
 80061a0:	4b30      	ldr	r3, [pc, #192]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ac:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80061b2:	f043 0308 	orr.w	r3, r3, #8
 80061b6:	6193      	str	r3, [r2, #24]
 80061b8:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <HAL_UART_MspInit+0x1ec>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	2302      	movs	r3, #2
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061ce:	2303      	movs	r3, #3
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d2:	f107 0320 	add.w	r3, r7, #32
 80061d6:	4619      	mov	r1, r3
 80061d8:	4826      	ldr	r0, [pc, #152]	; (8006274 <HAL_UART_MspInit+0x1fc>)
 80061da:	f000 fe07 	bl	8006dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80061de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ec:	f107 0320 	add.w	r3, r7, #32
 80061f0:	4619      	mov	r1, r3
 80061f2:	4820      	ldr	r0, [pc, #128]	; (8006274 <HAL_UART_MspInit+0x1fc>)
 80061f4:	f000 fdfa 	bl	8006dec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80061f8:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <HAL_UART_MspInit+0x200>)
 80061fa:	4a20      	ldr	r2, [pc, #128]	; (800627c <HAL_UART_MspInit+0x204>)
 80061fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <HAL_UART_MspInit+0x200>)
 8006200:	2200      	movs	r2, #0
 8006202:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <HAL_UART_MspInit+0x200>)
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_UART_MspInit+0x200>)
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006210:	4b19      	ldr	r3, [pc, #100]	; (8006278 <HAL_UART_MspInit+0x200>)
 8006212:	2200      	movs	r2, #0
 8006214:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006216:	4b18      	ldr	r3, [pc, #96]	; (8006278 <HAL_UART_MspInit+0x200>)
 8006218:	2200      	movs	r2, #0
 800621a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <HAL_UART_MspInit+0x200>)
 800621e:	2220      	movs	r2, #32
 8006220:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006222:	4b15      	ldr	r3, [pc, #84]	; (8006278 <HAL_UART_MspInit+0x200>)
 8006224:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006228:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800622a:	4813      	ldr	r0, [pc, #76]	; (8006278 <HAL_UART_MspInit+0x200>)
 800622c:	f000 fb7a 	bl	8006924 <HAL_DMA_Init>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8006236:	f7ff f8db 	bl	80053f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a0e      	ldr	r2, [pc, #56]	; (8006278 <HAL_UART_MspInit+0x200>)
 800623e:	635a      	str	r2, [r3, #52]	; 0x34
 8006240:	4a0d      	ldr	r2, [pc, #52]	; (8006278 <HAL_UART_MspInit+0x200>)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	2027      	movs	r0, #39	; 0x27
 800624c:	f000 fb33 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006250:	2027      	movs	r0, #39	; 0x27
 8006252:	f000 fb4c 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 8006256:	bf00      	nop
 8006258:	3730      	adds	r7, #48	; 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40013800 	.word	0x40013800
 8006264:	40021000 	.word	0x40021000
 8006268:	40010800 	.word	0x40010800
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	40010c00 	.word	0x40010c00
 8006278:	200007d0 	.word	0x200007d0
 800627c:	40020030 	.word	0x40020030

08006280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006290:	e7fe      	b.n	8006290 <HardFault_Handler+0x4>

08006292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006292:	b480      	push	{r7}
 8006294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006296:	e7fe      	b.n	8006296 <MemManage_Handler+0x4>

08006298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800629c:	e7fe      	b.n	800629c <BusFault_Handler+0x4>

0800629e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800629e:	b480      	push	{r7}
 80062a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062a2:	e7fe      	b.n	80062a2 <UsageFault_Handler+0x4>

080062a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr

080062b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062c0:	bf00      	nop
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062cc:	f000 f9de 	bl	800668c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80062d8:	2002      	movs	r0, #2
 80062da:	f000 ff11 	bl	8007100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80062e8:	4802      	ldr	r0, [pc, #8]	; (80062f4 <DMA1_Channel3_IRQHandler+0x10>)
 80062ea:	f000 fc4b 	bl	8006b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80062ee:	bf00      	nop
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200007d0 	.word	0x200007d0

080062f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80062fc:	4802      	ldr	r0, [pc, #8]	; (8006308 <TIM2_IRQHandler+0x10>)
 80062fe:	f003 f8ac 	bl	800945a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006302:	bf00      	nop
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000b28 	.word	0x20000b28

0800630c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 8006312:	4b1a      	ldr	r3, [pc, #104]	; (800637c <USART1_IRQHandler+0x70>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b0d      	cmp	r3, #13
 800631c:	d013      	beq.n	8006346 <USART1_IRQHandler+0x3a>
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	2b0a      	cmp	r3, #10
 8006322:	d010      	beq.n	8006346 <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8006324:	4b16      	ldr	r3, [pc, #88]	; (8006380 <USART1_IRQHandler+0x74>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d920      	bls.n	800636e <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 800632c:	4b15      	ldr	r3, [pc, #84]	; (8006384 <USART1_IRQHandler+0x78>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4619      	mov	r1, r3
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <USART1_IRQHandler+0x7c>)
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8006338:	4b12      	ldr	r3, [pc, #72]	; (8006384 <USART1_IRQHandler+0x78>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	3301      	adds	r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	4b10      	ldr	r3, [pc, #64]	; (8006384 <USART1_IRQHandler+0x78>)
 8006342:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8006344:	e013      	b.n	800636e <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <USART1_IRQHandler+0x78>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <USART1_IRQHandler+0x78>)
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <USART1_IRQHandler+0x80>)
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e002      	b.n	8006362 <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <USART1_IRQHandler+0x78>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <USART1_IRQHandler+0x74>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <USART1_IRQHandler+0x74>)
 800636c:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800636e:	4808      	ldr	r0, [pc, #32]	; (8006390 <USART1_IRQHandler+0x84>)
 8006370:	f004 f852 	bl	800a418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40013800 	.word	0x40013800
 8006380:	200002bd 	.word	0x200002bd
 8006384:	200006d2 	.word	0x200006d2
 8006388:	20000280 	.word	0x20000280
 800638c:	200002bc 	.word	0x200002bc
 8006390:	20000aa8 	.word	0x20000aa8

08006394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  uint8_t data = USART2->DR;
 800639a:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <USART2_IRQHandler+0x50>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	71fb      	strb	r3, [r7, #7]

//  if(data != '\0')
//  {

	  if(fingerprint_count_bytes >= 11)  // 11  // 5
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <USART2_IRQHandler+0x54>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b0a      	cmp	r3, #10
 80063a6:	d906      	bls.n	80063b6 <USART2_IRQHandler+0x22>
	  {
		  fingerprint_count_bytes = 0;
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <USART2_IRQHandler+0x54>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
		  data_from_fingerprint_module = 1;
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <USART2_IRQHandler+0x58>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e00e      	b.n	80063d4 <USART2_IRQHandler+0x40>

		  //memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
	  }
	  else
	  {
		  response_packet[fingerprint_count_bytes] = data;
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <USART2_IRQHandler+0x54>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <USART2_IRQHandler+0x5c>)
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	5453      	strb	r3, [r2, r1]
		  data_from_fingerprint_module = 0;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <USART2_IRQHandler+0x58>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
		  fingerprint_count_bytes ++;
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <USART2_IRQHandler+0x54>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <USART2_IRQHandler+0x54>)
 80063d2:	701a      	strb	r2, [r3, #0]
	  }
//  }


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063d4:	4807      	ldr	r0, [pc, #28]	; (80063f4 <USART2_IRQHandler+0x60>)
 80063d6:	f004 f81f 	bl	800a418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40004400 	.word	0x40004400
 80063e8:	20000274 	.word	0x20000274
 80063ec:	20000275 	.word	0x20000275
 80063f0:	200006d4 	.word	0x200006d4
 80063f4:	20000b68 	.word	0x20000b68

080063f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80063fc:	4802      	ldr	r0, [pc, #8]	; (8006408 <USART3_IRQHandler+0x10>)
 80063fe:	f004 f80b 	bl	800a418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000814 	.word	0x20000814

0800640c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e00a      	b.n	8006434 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800641e:	f3af 8000 	nop.w
 8006422:	4601      	mov	r1, r0
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	60ba      	str	r2, [r7, #8]
 800642a:	b2ca      	uxtb	r2, r1
 800642c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3301      	adds	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	dbf0      	blt.n	800641e <_read+0x12>
	}

return len;
 800643c:	687b      	ldr	r3, [r7, #4]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e009      	b.n	800646c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	60ba      	str	r2, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	3301      	adds	r3, #1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	dbf1      	blt.n	8006458 <_write+0x12>
	}
	return len;
 8006474:	687b      	ldr	r3, [r7, #4]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <_close>:

int _close(int file)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
	return -1;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064a4:	605a      	str	r2, [r3, #4]
	return 0;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr

080064b2 <_isatty>:

int _isatty(int file)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
	return 1;
 80064ba:	2301      	movs	r3, #1
}
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
	return 0;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr
	...

080064e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064e8:	4a14      	ldr	r2, [pc, #80]	; (800653c <_sbrk+0x5c>)
 80064ea:	4b15      	ldr	r3, [pc, #84]	; (8006540 <_sbrk+0x60>)
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064f4:	4b13      	ldr	r3, [pc, #76]	; (8006544 <_sbrk+0x64>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064fc:	4b11      	ldr	r3, [pc, #68]	; (8006544 <_sbrk+0x64>)
 80064fe:	4a12      	ldr	r2, [pc, #72]	; (8006548 <_sbrk+0x68>)
 8006500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <_sbrk+0x64>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	429a      	cmp	r2, r3
 800650e:	d207      	bcs.n	8006520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006510:	f004 fbaa 	bl	800ac68 <__errno>
 8006514:	4602      	mov	r2, r0
 8006516:	230c      	movs	r3, #12
 8006518:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800651e:	e009      	b.n	8006534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <_sbrk+0x64>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <_sbrk+0x64>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	4a05      	ldr	r2, [pc, #20]	; (8006544 <_sbrk+0x64>)
 8006530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20005000 	.word	0x20005000
 8006540:	00000400 	.word	0x00000400
 8006544:	200006e0 	.word	0x200006e0
 8006548:	20000bb0 	.word	0x20000bb0

0800654c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006550:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <SystemInit+0x5c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <SystemInit+0x5c>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800655c:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <SystemInit+0x5c>)
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4911      	ldr	r1, [pc, #68]	; (80065a8 <SystemInit+0x5c>)
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <SystemInit+0x60>)
 8006564:	4013      	ands	r3, r2
 8006566:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <SystemInit+0x5c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0e      	ldr	r2, [pc, #56]	; (80065a8 <SystemInit+0x5c>)
 800656e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006576:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <SystemInit+0x5c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <SystemInit+0x5c>)
 800657e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006582:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <SystemInit+0x5c>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a07      	ldr	r2, [pc, #28]	; (80065a8 <SystemInit+0x5c>)
 800658a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800658e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <SystemInit+0x5c>)
 8006592:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006596:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <SystemInit+0x64>)
 800659a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800659e:	609a      	str	r2, [r3, #8]
#endif 
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	40021000 	.word	0x40021000
 80065ac:	f8ff0000 	.word	0xf8ff0000
 80065b0:	e000ed00 	.word	0xe000ed00

080065b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80065b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80065b6:	e003      	b.n	80065c0 <LoopCopyDataInit>

080065b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80065b8:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80065ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80065bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80065be:	3104      	adds	r1, #4

080065c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80065c0:	480a      	ldr	r0, [pc, #40]	; (80065ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80065c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80065c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80065c8:	d3f6      	bcc.n	80065b8 <CopyDataInit>
  ldr r2, =_sbss
 80065ca:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80065cc:	e002      	b.n	80065d4 <LoopFillZerobss>

080065ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80065ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80065d0:	f842 3b04 	str.w	r3, [r2], #4

080065d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80065d4:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80065d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80065d8:	d3f9      	bcc.n	80065ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80065da:	f7ff ffb7 	bl	800654c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065de:	f004 fb49 	bl	800ac74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80065e2:	f7fc fd1b 	bl	800301c <main>
  bx lr
 80065e6:	4770      	bx	lr
  ldr r3, =_sidata
 80065e8:	0800f9c8 	.word	0x0800f9c8
  ldr r0, =_sdata
 80065ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80065f0:	20000240 	.word	0x20000240
  ldr r2, =_sbss
 80065f4:	20000240 	.word	0x20000240
  ldr r3, = _ebss
 80065f8:	20000bb0 	.word	0x20000bb0

080065fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80065fc:	e7fe      	b.n	80065fc <ADC1_2_IRQHandler>
	...

08006600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006604:	4b08      	ldr	r3, [pc, #32]	; (8006628 <HAL_Init+0x28>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a07      	ldr	r2, [pc, #28]	; (8006628 <HAL_Init+0x28>)
 800660a:	f043 0310 	orr.w	r3, r3, #16
 800660e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006610:	2003      	movs	r0, #3
 8006612:	f000 f945 	bl	80068a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006616:	2000      	movs	r0, #0
 8006618:	f000 f808 	bl	800662c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800661c:	f7ff fc04 	bl	8005e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40022000 	.word	0x40022000

0800662c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <HAL_InitTick+0x54>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_InitTick+0x58>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	4619      	mov	r1, r3
 800663e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006642:	fbb3 f3f1 	udiv	r3, r3, r1
 8006646:	fbb2 f3f3 	udiv	r3, r2, r3
 800664a:	4618      	mov	r0, r3
 800664c:	f000 f95d 	bl	800690a <HAL_SYSTICK_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e00e      	b.n	8006678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b0f      	cmp	r3, #15
 800665e:	d80a      	bhi.n	8006676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006660:	2200      	movs	r2, #0
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006668:	f000 f925 	bl	80068b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800666c:	4a06      	ldr	r2, [pc, #24]	; (8006688 <HAL_InitTick+0x5c>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000064 	.word	0x20000064
 8006684:	2000006c 	.word	0x2000006c
 8006688:	20000068 	.word	0x20000068

0800668c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_IncTick+0x1c>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_IncTick+0x20>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4413      	add	r3, r2
 800669c:	4a03      	ldr	r2, [pc, #12]	; (80066ac <HAL_IncTick+0x20>)
 800669e:	6013      	str	r3, [r2, #0]
}
 80066a0:	bf00      	nop
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	2000006c 	.word	0x2000006c
 80066ac:	20000ba8 	.word	0x20000ba8

080066b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return uwTick;
 80066b4:	4b02      	ldr	r3, [pc, #8]	; (80066c0 <HAL_GetTick+0x10>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr
 80066c0:	20000ba8 	.word	0x20000ba8

080066c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066cc:	f7ff fff0 	bl	80066b0 <HAL_GetTick>
 80066d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066dc:	d005      	beq.n	80066ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <HAL_Delay+0x40>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066ea:	bf00      	nop
 80066ec:	f7ff ffe0 	bl	80066b0 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d8f7      	bhi.n	80066ec <HAL_Delay+0x28>
  {
  }
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	2000006c 	.word	0x2000006c

08006708 <__NVIC_SetPriorityGrouping>:
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <__NVIC_SetPriorityGrouping+0x44>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006724:	4013      	ands	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800673a:	4a04      	ldr	r2, [pc, #16]	; (800674c <__NVIC_SetPriorityGrouping+0x44>)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	60d3      	str	r3, [r2, #12]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000ed00 	.word	0xe000ed00

08006750 <__NVIC_GetPriorityGrouping>:
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__NVIC_GetPriorityGrouping+0x18>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	f003 0307 	and.w	r3, r3, #7
}
 800675e:	4618      	mov	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	e000ed00 	.word	0xe000ed00

0800676c <__NVIC_EnableIRQ>:
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677a:	2b00      	cmp	r3, #0
 800677c:	db0b      	blt.n	8006796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	f003 021f 	and.w	r2, r3, #31
 8006784:	4906      	ldr	r1, [pc, #24]	; (80067a0 <__NVIC_EnableIRQ+0x34>)
 8006786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2001      	movs	r0, #1
 800678e:	fa00 f202 	lsl.w	r2, r0, r2
 8006792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr
 80067a0:	e000e100 	.word	0xe000e100

080067a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db0a      	blt.n	80067ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	490c      	ldr	r1, [pc, #48]	; (80067f0 <__NVIC_SetPriority+0x4c>)
 80067be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c2:	0112      	lsls	r2, r2, #4
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	440b      	add	r3, r1
 80067c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067cc:	e00a      	b.n	80067e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4908      	ldr	r1, [pc, #32]	; (80067f4 <__NVIC_SetPriority+0x50>)
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	3b04      	subs	r3, #4
 80067dc:	0112      	lsls	r2, r2, #4
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	440b      	add	r3, r1
 80067e2:	761a      	strb	r2, [r3, #24]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	e000e100 	.word	0xe000e100
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b089      	sub	sp, #36	; 0x24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f1c3 0307 	rsb	r3, r3, #7
 8006812:	2b04      	cmp	r3, #4
 8006814:	bf28      	it	cs
 8006816:	2304      	movcs	r3, #4
 8006818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3304      	adds	r3, #4
 800681e:	2b06      	cmp	r3, #6
 8006820:	d902      	bls.n	8006828 <NVIC_EncodePriority+0x30>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	3b03      	subs	r3, #3
 8006826:	e000      	b.n	800682a <NVIC_EncodePriority+0x32>
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800682c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	401a      	ands	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	43d9      	mvns	r1, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006850:	4313      	orrs	r3, r2
         );
}
 8006852:	4618      	mov	r0, r3
 8006854:	3724      	adds	r7, #36	; 0x24
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr

0800685c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3b01      	subs	r3, #1
 8006868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800686c:	d301      	bcc.n	8006872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800686e:	2301      	movs	r3, #1
 8006870:	e00f      	b.n	8006892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <SysTick_Config+0x40>)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3b01      	subs	r3, #1
 8006878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800687a:	210f      	movs	r1, #15
 800687c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006880:	f7ff ff90 	bl	80067a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <SysTick_Config+0x40>)
 8006886:	2200      	movs	r2, #0
 8006888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800688a:	4b04      	ldr	r3, [pc, #16]	; (800689c <SysTick_Config+0x40>)
 800688c:	2207      	movs	r2, #7
 800688e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	e000e010 	.word	0xe000e010

080068a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff ff2d 	bl	8006708 <__NVIC_SetPriorityGrouping>
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	4603      	mov	r3, r0
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068c8:	f7ff ff42 	bl	8006750 <__NVIC_GetPriorityGrouping>
 80068cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	6978      	ldr	r0, [r7, #20]
 80068d4:	f7ff ff90 	bl	80067f8 <NVIC_EncodePriority>
 80068d8:	4602      	mov	r2, r0
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ff5f 	bl	80067a4 <__NVIC_SetPriority>
}
 80068e6:	bf00      	nop
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	4603      	mov	r3, r0
 80068f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff35 	bl	800676c <__NVIC_EnableIRQ>
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ffa2 	bl	800685c <SysTick_Config>
 8006918:	4603      	mov	r3, r0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e043      	b.n	80069c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	4b22      	ldr	r3, [pc, #136]	; (80069cc <HAL_DMA_Init+0xa8>)
 8006942:	4413      	add	r3, r2
 8006944:	4a22      	ldr	r2, [pc, #136]	; (80069d0 <HAL_DMA_Init+0xac>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	091b      	lsrs	r3, r3, #4
 800694c:	009a      	lsls	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1f      	ldr	r2, [pc, #124]	; (80069d4 <HAL_DMA_Init+0xb0>)
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800696e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800697c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr
 80069cc:	bffdfff8 	.word	0xbffdfff8
 80069d0:	cccccccd 	.word	0xcccccccd
 80069d4:	40020000 	.word	0x40020000

080069d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_DMA_Start_IT+0x20>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e04a      	b.n	8006a8e <HAL_DMA_Start_IT+0xb6>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d13a      	bne.n	8006a80 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f9ae 	bl	8006d90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 020e 	orr.w	r2, r2, #14
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e00f      	b.n	8006a6e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0204 	bic.w	r2, r2, #4
 8006a5c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 020a 	orr.w	r2, r2, #10
 8006a6c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0201 	orr.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e005      	b.n	8006a8c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d005      	beq.n	8006aba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	73fb      	strb	r3, [r7, #15]
 8006ab8:	e051      	b.n	8006b5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 020e 	bic.w	r2, r2, #14
 8006ac8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_DMA_Abort_IT+0xd0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d029      	beq.n	8006b38 <HAL_DMA_Abort_IT+0xa0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <HAL_DMA_Abort_IT+0xd4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d022      	beq.n	8006b34 <HAL_DMA_Abort_IT+0x9c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <HAL_DMA_Abort_IT+0xd8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d01a      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x96>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_DMA_Abort_IT+0xdc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d012      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x90>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <HAL_DMA_Abort_IT+0xe0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00a      	beq.n	8006b22 <HAL_DMA_Abort_IT+0x8a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1a      	ldr	r2, [pc, #104]	; (8006b7c <HAL_DMA_Abort_IT+0xe4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d102      	bne.n	8006b1c <HAL_DMA_Abort_IT+0x84>
 8006b16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b1a:	e00e      	b.n	8006b3a <HAL_DMA_Abort_IT+0xa2>
 8006b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b20:	e00b      	b.n	8006b3a <HAL_DMA_Abort_IT+0xa2>
 8006b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b26:	e008      	b.n	8006b3a <HAL_DMA_Abort_IT+0xa2>
 8006b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b2c:	e005      	b.n	8006b3a <HAL_DMA_Abort_IT+0xa2>
 8006b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b32:	e002      	b.n	8006b3a <HAL_DMA_Abort_IT+0xa2>
 8006b34:	2310      	movs	r3, #16
 8006b36:	e000      	b.n	8006b3a <HAL_DMA_Abort_IT+0xa2>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4a11      	ldr	r2, [pc, #68]	; (8006b80 <HAL_DMA_Abort_IT+0xe8>)
 8006b3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
    } 
  }
  return status;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40020008 	.word	0x40020008
 8006b6c:	4002001c 	.word	0x4002001c
 8006b70:	40020030 	.word	0x40020030
 8006b74:	40020044 	.word	0x40020044
 8006b78:	40020058 	.word	0x40020058
 8006b7c:	4002006c 	.word	0x4002006c
 8006b80:	40020000 	.word	0x40020000

08006b84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04f      	beq.n	8006c4c <HAL_DMA_IRQHandler+0xc8>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d04a      	beq.n	8006c4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d107      	bne.n	8006bd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0204 	bic.w	r2, r2, #4
 8006bd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a66      	ldr	r2, [pc, #408]	; (8006d74 <HAL_DMA_IRQHandler+0x1f0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d029      	beq.n	8006c32 <HAL_DMA_IRQHandler+0xae>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a65      	ldr	r2, [pc, #404]	; (8006d78 <HAL_DMA_IRQHandler+0x1f4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d022      	beq.n	8006c2e <HAL_DMA_IRQHandler+0xaa>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a63      	ldr	r2, [pc, #396]	; (8006d7c <HAL_DMA_IRQHandler+0x1f8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01a      	beq.n	8006c28 <HAL_DMA_IRQHandler+0xa4>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a62      	ldr	r2, [pc, #392]	; (8006d80 <HAL_DMA_IRQHandler+0x1fc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d012      	beq.n	8006c22 <HAL_DMA_IRQHandler+0x9e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a60      	ldr	r2, [pc, #384]	; (8006d84 <HAL_DMA_IRQHandler+0x200>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00a      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x98>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a5f      	ldr	r2, [pc, #380]	; (8006d88 <HAL_DMA_IRQHandler+0x204>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d102      	bne.n	8006c16 <HAL_DMA_IRQHandler+0x92>
 8006c10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c14:	e00e      	b.n	8006c34 <HAL_DMA_IRQHandler+0xb0>
 8006c16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c1a:	e00b      	b.n	8006c34 <HAL_DMA_IRQHandler+0xb0>
 8006c1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c20:	e008      	b.n	8006c34 <HAL_DMA_IRQHandler+0xb0>
 8006c22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c26:	e005      	b.n	8006c34 <HAL_DMA_IRQHandler+0xb0>
 8006c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2c:	e002      	b.n	8006c34 <HAL_DMA_IRQHandler+0xb0>
 8006c2e:	2340      	movs	r3, #64	; 0x40
 8006c30:	e000      	b.n	8006c34 <HAL_DMA_IRQHandler+0xb0>
 8006c32:	2304      	movs	r3, #4
 8006c34:	4a55      	ldr	r2, [pc, #340]	; (8006d8c <HAL_DMA_IRQHandler+0x208>)
 8006c36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8094 	beq.w	8006d6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006c4a:	e08e      	b.n	8006d6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2202      	movs	r2, #2
 8006c52:	409a      	lsls	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d056      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x186>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d051      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 020a 	bic.w	r2, r2, #10
 8006c82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <HAL_DMA_IRQHandler+0x1f0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d029      	beq.n	8006cea <HAL_DMA_IRQHandler+0x166>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a37      	ldr	r2, [pc, #220]	; (8006d78 <HAL_DMA_IRQHandler+0x1f4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x162>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a35      	ldr	r2, [pc, #212]	; (8006d7c <HAL_DMA_IRQHandler+0x1f8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01a      	beq.n	8006ce0 <HAL_DMA_IRQHandler+0x15c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a34      	ldr	r2, [pc, #208]	; (8006d80 <HAL_DMA_IRQHandler+0x1fc>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d012      	beq.n	8006cda <HAL_DMA_IRQHandler+0x156>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a32      	ldr	r2, [pc, #200]	; (8006d84 <HAL_DMA_IRQHandler+0x200>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x150>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a31      	ldr	r2, [pc, #196]	; (8006d88 <HAL_DMA_IRQHandler+0x204>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d102      	bne.n	8006cce <HAL_DMA_IRQHandler+0x14a>
 8006cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ccc:	e00e      	b.n	8006cec <HAL_DMA_IRQHandler+0x168>
 8006cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cd2:	e00b      	b.n	8006cec <HAL_DMA_IRQHandler+0x168>
 8006cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cd8:	e008      	b.n	8006cec <HAL_DMA_IRQHandler+0x168>
 8006cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cde:	e005      	b.n	8006cec <HAL_DMA_IRQHandler+0x168>
 8006ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce4:	e002      	b.n	8006cec <HAL_DMA_IRQHandler+0x168>
 8006ce6:	2320      	movs	r3, #32
 8006ce8:	e000      	b.n	8006cec <HAL_DMA_IRQHandler+0x168>
 8006cea:	2302      	movs	r3, #2
 8006cec:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <HAL_DMA_IRQHandler+0x208>)
 8006cee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d034      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d08:	e02f      	b.n	8006d6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2208      	movs	r2, #8
 8006d10:	409a      	lsls	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4013      	ands	r3, r2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d028      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x1e8>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d023      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 020e 	bic.w	r2, r2, #14
 8006d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
    }
  }
  return;
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
}
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40020008 	.word	0x40020008
 8006d78:	4002001c 	.word	0x4002001c
 8006d7c:	40020030 	.word	0x40020030
 8006d80:	40020044 	.word	0x40020044
 8006d84:	40020058 	.word	0x40020058
 8006d88:	4002006c 	.word	0x4002006c
 8006d8c:	40020000 	.word	0x40020000

08006d90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	2101      	movs	r1, #1
 8006da8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d108      	bne.n	8006dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006dce:	e007      	b.n	8006de0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	60da      	str	r2, [r3, #12]
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
	...

08006dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b08b      	sub	sp, #44	; 0x2c
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dfe:	e127      	b.n	8007050 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006e00:	2201      	movs	r2, #1
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	4013      	ands	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	f040 8116 	bne.w	800704a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b12      	cmp	r3, #18
 8006e24:	d034      	beq.n	8006e90 <HAL_GPIO_Init+0xa4>
 8006e26:	2b12      	cmp	r3, #18
 8006e28:	d80d      	bhi.n	8006e46 <HAL_GPIO_Init+0x5a>
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d02b      	beq.n	8006e86 <HAL_GPIO_Init+0x9a>
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d804      	bhi.n	8006e3c <HAL_GPIO_Init+0x50>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d031      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d01c      	beq.n	8006e74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006e3a:	e048      	b.n	8006ece <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d043      	beq.n	8006ec8 <HAL_GPIO_Init+0xdc>
 8006e40:	2b11      	cmp	r3, #17
 8006e42:	d01b      	beq.n	8006e7c <HAL_GPIO_Init+0x90>
          break;
 8006e44:	e043      	b.n	8006ece <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006e46:	4a89      	ldr	r2, [pc, #548]	; (800706c <HAL_GPIO_Init+0x280>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d026      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
 8006e4c:	4a87      	ldr	r2, [pc, #540]	; (800706c <HAL_GPIO_Init+0x280>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d806      	bhi.n	8006e60 <HAL_GPIO_Init+0x74>
 8006e52:	4a87      	ldr	r2, [pc, #540]	; (8007070 <HAL_GPIO_Init+0x284>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d020      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
 8006e58:	4a86      	ldr	r2, [pc, #536]	; (8007074 <HAL_GPIO_Init+0x288>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01d      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
          break;
 8006e5e:	e036      	b.n	8006ece <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006e60:	4a85      	ldr	r2, [pc, #532]	; (8007078 <HAL_GPIO_Init+0x28c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d019      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
 8006e66:	4a85      	ldr	r2, [pc, #532]	; (800707c <HAL_GPIO_Init+0x290>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d016      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
 8006e6c:	4a84      	ldr	r2, [pc, #528]	; (8007080 <HAL_GPIO_Init+0x294>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_GPIO_Init+0xae>
          break;
 8006e72:	e02c      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	623b      	str	r3, [r7, #32]
          break;
 8006e7a:	e028      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	3304      	adds	r3, #4
 8006e82:	623b      	str	r3, [r7, #32]
          break;
 8006e84:	e023      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	623b      	str	r3, [r7, #32]
          break;
 8006e8e:	e01e      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	330c      	adds	r3, #12
 8006e96:	623b      	str	r3, [r7, #32]
          break;
 8006e98:	e019      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	623b      	str	r3, [r7, #32]
          break;
 8006ea6:	e012      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d105      	bne.n	8006ebc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	611a      	str	r2, [r3, #16]
          break;
 8006eba:	e008      	b.n	8006ece <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	615a      	str	r2, [r3, #20]
          break;
 8006ec6:	e002      	b.n	8006ece <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	623b      	str	r3, [r7, #32]
          break;
 8006ecc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2bff      	cmp	r3, #255	; 0xff
 8006ed2:	d801      	bhi.n	8006ed8 <HAL_GPIO_Init+0xec>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	e001      	b.n	8006edc <HAL_GPIO_Init+0xf0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3304      	adds	r3, #4
 8006edc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2bff      	cmp	r3, #255	; 0xff
 8006ee2:	d802      	bhi.n	8006eea <HAL_GPIO_Init+0xfe>
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	e002      	b.n	8006ef0 <HAL_GPIO_Init+0x104>
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	3b08      	subs	r3, #8
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	210f      	movs	r1, #15
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	43db      	mvns	r3, r3
 8006f00:	401a      	ands	r2, r3
 8006f02:	6a39      	ldr	r1, [r7, #32]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8096 	beq.w	800704a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006f1e:	4b59      	ldr	r3, [pc, #356]	; (8007084 <HAL_GPIO_Init+0x298>)
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	4a58      	ldr	r2, [pc, #352]	; (8007084 <HAL_GPIO_Init+0x298>)
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	6193      	str	r3, [r2, #24]
 8006f2a:	4b56      	ldr	r3, [pc, #344]	; (8007084 <HAL_GPIO_Init+0x298>)
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006f36:	4a54      	ldr	r2, [pc, #336]	; (8007088 <HAL_GPIO_Init+0x29c>)
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	089b      	lsrs	r3, r3, #2
 8006f3c:	3302      	adds	r3, #2
 8006f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	220f      	movs	r2, #15
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43db      	mvns	r3, r3
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a4b      	ldr	r2, [pc, #300]	; (800708c <HAL_GPIO_Init+0x2a0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_GPIO_Init+0x19e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a4a      	ldr	r2, [pc, #296]	; (8007090 <HAL_GPIO_Init+0x2a4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00d      	beq.n	8006f86 <HAL_GPIO_Init+0x19a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a49      	ldr	r2, [pc, #292]	; (8007094 <HAL_GPIO_Init+0x2a8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <HAL_GPIO_Init+0x196>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a48      	ldr	r2, [pc, #288]	; (8007098 <HAL_GPIO_Init+0x2ac>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <HAL_GPIO_Init+0x192>
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e006      	b.n	8006f8c <HAL_GPIO_Init+0x1a0>
 8006f7e:	2304      	movs	r3, #4
 8006f80:	e004      	b.n	8006f8c <HAL_GPIO_Init+0x1a0>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e002      	b.n	8006f8c <HAL_GPIO_Init+0x1a0>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <HAL_GPIO_Init+0x1a0>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	f002 0203 	and.w	r2, r2, #3
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	4093      	lsls	r3, r2
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006f9c:	493a      	ldr	r1, [pc, #232]	; (8007088 <HAL_GPIO_Init+0x29c>)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	089b      	lsrs	r3, r3, #2
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006fb6:	4b39      	ldr	r3, [pc, #228]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4938      	ldr	r1, [pc, #224]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	600b      	str	r3, [r1, #0]
 8006fc2:	e006      	b.n	8006fd2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006fc4:	4b35      	ldr	r3, [pc, #212]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	4933      	ldr	r1, [pc, #204]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d006      	beq.n	8006fec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006fde:	4b2f      	ldr	r3, [pc, #188]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	492e      	ldr	r1, [pc, #184]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	604b      	str	r3, [r1, #4]
 8006fea:	e006      	b.n	8006ffa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006fec:	4b2b      	ldr	r3, [pc, #172]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	4929      	ldr	r1, [pc, #164]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007006:	4b25      	ldr	r3, [pc, #148]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	4924      	ldr	r1, [pc, #144]	; (800709c <HAL_GPIO_Init+0x2b0>)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
 8007012:	e006      	b.n	8007022 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007014:	4b21      	ldr	r3, [pc, #132]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	43db      	mvns	r3, r3
 800701c:	491f      	ldr	r1, [pc, #124]	; (800709c <HAL_GPIO_Init+0x2b0>)
 800701e:	4013      	ands	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800702e:	4b1b      	ldr	r3, [pc, #108]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	491a      	ldr	r1, [pc, #104]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	4313      	orrs	r3, r2
 8007038:	60cb      	str	r3, [r1, #12]
 800703a:	e006      	b.n	800704a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800703c:	4b17      	ldr	r3, [pc, #92]	; (800709c <HAL_GPIO_Init+0x2b0>)
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	43db      	mvns	r3, r3
 8007044:	4915      	ldr	r1, [pc, #84]	; (800709c <HAL_GPIO_Init+0x2b0>)
 8007046:	4013      	ands	r3, r2
 8007048:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	3301      	adds	r3, #1
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	f47f aed0 	bne.w	8006e00 <HAL_GPIO_Init+0x14>
  }
}
 8007060:	bf00      	nop
 8007062:	372c      	adds	r7, #44	; 0x2c
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	10210000 	.word	0x10210000
 8007070:	10110000 	.word	0x10110000
 8007074:	10120000 	.word	0x10120000
 8007078:	10310000 	.word	0x10310000
 800707c:	10320000 	.word	0x10320000
 8007080:	10220000 	.word	0x10220000
 8007084:	40021000 	.word	0x40021000
 8007088:	40010000 	.word	0x40010000
 800708c:	40010800 	.word	0x40010800
 8007090:	40010c00 	.word	0x40010c00
 8007094:	40011000 	.word	0x40011000
 8007098:	40011400 	.word	0x40011400
 800709c:	40010400 	.word	0x40010400

080070a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
 80070bc:	e001      	b.n	80070c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	807b      	strh	r3, [r7, #2]
 80070da:	4613      	mov	r3, r2
 80070dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070de:	787b      	ldrb	r3, [r7, #1]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070e4:	887a      	ldrh	r2, [r7, #2]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80070ea:	e003      	b.n	80070f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80070ec:	887b      	ldrh	r3, [r7, #2]
 80070ee:	041a      	lsls	r2, r3, #16
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	611a      	str	r2, [r3, #16]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800710a:	4b08      	ldr	r3, [pc, #32]	; (800712c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007116:	4a05      	ldr	r2, [pc, #20]	; (800712c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe f8ee 	bl	8005300 <HAL_GPIO_EXTI_Callback>
  }
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40010400 	.word	0x40010400

08007130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e11f      	b.n	8007382 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fe fe98 	bl	8005e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2224      	movs	r2, #36	; 0x24
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007194:	f002 f838 	bl	8009208 <HAL_RCC_GetPCLK1Freq>
 8007198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4a7b      	ldr	r2, [pc, #492]	; (800738c <HAL_I2C_Init+0x25c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d807      	bhi.n	80071b4 <HAL_I2C_Init+0x84>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a7a      	ldr	r2, [pc, #488]	; (8007390 <HAL_I2C_Init+0x260>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	bf94      	ite	ls
 80071ac:	2301      	movls	r3, #1
 80071ae:	2300      	movhi	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	e006      	b.n	80071c2 <HAL_I2C_Init+0x92>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a77      	ldr	r2, [pc, #476]	; (8007394 <HAL_I2C_Init+0x264>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf94      	ite	ls
 80071bc:	2301      	movls	r3, #1
 80071be:	2300      	movhi	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e0db      	b.n	8007382 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a72      	ldr	r2, [pc, #456]	; (8007398 <HAL_I2C_Init+0x268>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	0c9b      	lsrs	r3, r3, #18
 80071d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4a64      	ldr	r2, [pc, #400]	; (800738c <HAL_I2C_Init+0x25c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d802      	bhi.n	8007204 <HAL_I2C_Init+0xd4>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3301      	adds	r3, #1
 8007202:	e009      	b.n	8007218 <HAL_I2C_Init+0xe8>
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	4a63      	ldr	r2, [pc, #396]	; (800739c <HAL_I2C_Init+0x26c>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	3301      	adds	r3, #1
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	430b      	orrs	r3, r1
 800721e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800722a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	4956      	ldr	r1, [pc, #344]	; (800738c <HAL_I2C_Init+0x25c>)
 8007234:	428b      	cmp	r3, r1
 8007236:	d80d      	bhi.n	8007254 <HAL_I2C_Init+0x124>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	1e59      	subs	r1, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	fbb1 f3f3 	udiv	r3, r1, r3
 8007246:	3301      	adds	r3, #1
 8007248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800724c:	2b04      	cmp	r3, #4
 800724e:	bf38      	it	cc
 8007250:	2304      	movcc	r3, #4
 8007252:	e04f      	b.n	80072f4 <HAL_I2C_Init+0x1c4>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d111      	bne.n	8007280 <HAL_I2C_Init+0x150>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	1e58      	subs	r0, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6859      	ldr	r1, [r3, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	440b      	add	r3, r1
 800726a:	fbb0 f3f3 	udiv	r3, r0, r3
 800726e:	3301      	adds	r3, #1
 8007270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e012      	b.n	80072a6 <HAL_I2C_Init+0x176>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1e58      	subs	r0, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6859      	ldr	r1, [r3, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	0099      	lsls	r1, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	fbb0 f3f3 	udiv	r3, r0, r3
 8007296:	3301      	adds	r3, #1
 8007298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_I2C_Init+0x17e>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e022      	b.n	80072f4 <HAL_I2C_Init+0x1c4>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10e      	bne.n	80072d4 <HAL_I2C_Init+0x1a4>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1e58      	subs	r0, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6859      	ldr	r1, [r3, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	440b      	add	r3, r1
 80072c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80072c8:	3301      	adds	r3, #1
 80072ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d2:	e00f      	b.n	80072f4 <HAL_I2C_Init+0x1c4>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	1e58      	subs	r0, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6859      	ldr	r1, [r3, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	0099      	lsls	r1, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ea:	3301      	adds	r3, #1
 80072ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	6809      	ldr	r1, [r1, #0]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69da      	ldr	r2, [r3, #28]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6911      	ldr	r1, [r2, #16]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68d2      	ldr	r2, [r2, #12]
 800732e:	4311      	orrs	r1, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	430b      	orrs	r3, r1
 8007336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	000186a0 	.word	0x000186a0
 8007390:	001e847f 	.word	0x001e847f
 8007394:	003d08ff 	.word	0x003d08ff
 8007398:	431bde83 	.word	0x431bde83
 800739c:	10624dd3 	.word	0x10624dd3

080073a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	461a      	mov	r2, r3
 80073ac:	460b      	mov	r3, r1
 80073ae:	817b      	strh	r3, [r7, #10]
 80073b0:	4613      	mov	r3, r2
 80073b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073b4:	f7ff f97c 	bl	80066b0 <HAL_GetTick>
 80073b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	f040 80e0 	bne.w	8007588 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	2319      	movs	r3, #25
 80073ce:	2201      	movs	r2, #1
 80073d0:	4970      	ldr	r1, [pc, #448]	; (8007594 <HAL_I2C_Master_Transmit+0x1f4>)
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 f966 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
 80073e0:	e0d3      	b.n	800758a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_I2C_Master_Transmit+0x50>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e0cc      	b.n	800758a <HAL_I2C_Master_Transmit+0x1ea>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b01      	cmp	r3, #1
 8007404:	d007      	beq.n	8007416 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0201 	orr.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2221      	movs	r2, #33	; 0x21
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2210      	movs	r2, #16
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	893a      	ldrh	r2, [r7, #8]
 8007446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a50      	ldr	r2, [pc, #320]	; (8007598 <HAL_I2C_Master_Transmit+0x1f8>)
 8007456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007458:	8979      	ldrh	r1, [r7, #10]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fe52 	bl	8008108 <I2C_MasterRequestWrite>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e08d      	b.n	800758a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007484:	e066      	b.n	8007554 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	6a39      	ldr	r1, [r7, #32]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f001 f9e0 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	2b04      	cmp	r3, #4
 800749c:	d107      	bne.n	80074ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e06b      	b.n	800758a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d11b      	bne.n	8007528 <HAL_I2C_Master_Transmit+0x188>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d017      	beq.n	8007528 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007512:	b29b      	uxth	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	6a39      	ldr	r1, [r7, #32]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f001 f9d0 	bl	80088d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	2b04      	cmp	r3, #4
 800753e:	d107      	bne.n	8007550 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800754e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e01a      	b.n	800758a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	2b00      	cmp	r3, #0
 800755a:	d194      	bne.n	8007486 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800756a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	e000      	b.n	800758a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007588:	2302      	movs	r3, #2
  }
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	00100002 	.word	0x00100002
 8007598:	ffff0000 	.word	0xffff0000

0800759c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	; 0x30
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	461a      	mov	r2, r3
 80075a8:	460b      	mov	r3, r1
 80075aa:	817b      	strh	r3, [r7, #10]
 80075ac:	4613      	mov	r3, r2
 80075ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075b4:	f7ff f87c 	bl	80066b0 <HAL_GetTick>
 80075b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	f040 8238 	bne.w	8007a38 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2319      	movs	r3, #25
 80075ce:	2201      	movs	r2, #1
 80075d0:	497e      	ldr	r1, [pc, #504]	; (80077cc <HAL_I2C_Master_Receive+0x230>)
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f001 f866 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
 80075e0:	e22b      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_I2C_Master_Receive+0x54>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e224      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b01      	cmp	r3, #1
 8007604:	d007      	beq.n	8007616 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2222      	movs	r2, #34	; 0x22
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2210      	movs	r2, #16
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	893a      	ldrh	r2, [r7, #8]
 8007646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4a5e      	ldr	r2, [pc, #376]	; (80077d0 <HAL_I2C_Master_Receive+0x234>)
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007658:	8979      	ldrh	r1, [r7, #10]
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 fdd4 	bl	800820c <I2C_MasterRequestRead>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e1e5      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d113      	bne.n	800769e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e1b9      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d11d      	bne.n	80076e2 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076b6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076de:	b662      	cpsie	i
 80076e0:	e197      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d11d      	bne.n	8007726 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80076fa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007722:	b662      	cpsie	i
 8007724:	e175      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800774c:	e161      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007752:	2b03      	cmp	r3, #3
 8007754:	f200 811a 	bhi.w	800798c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775c:	2b01      	cmp	r3, #1
 800775e:	d123      	bne.n	80077a8 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f001 f8f5 	bl	8008954 <I2C_WaitOnRXNEFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e162      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077a6:	e134      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d150      	bne.n	8007852 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	2200      	movs	r2, #0
 80077b8:	4906      	ldr	r1, [pc, #24]	; (80077d4 <HAL_I2C_Master_Receive+0x238>)
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 ff72 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d008      	beq.n	80077d8 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e137      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
 80077ca:	bf00      	nop
 80077cc:	00100002 	.word	0x00100002
 80077d0:	ffff0000 	.word	0xffff0000
 80077d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80077d8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800781c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007850:	e0df      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	497a      	ldr	r1, [pc, #488]	; (8007a44 <HAL_I2C_Master_Receive+0x4a8>)
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 ff21 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e0e6      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800787c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80078b0:	4b65      	ldr	r3, [pc, #404]	; (8007a48 <HAL_I2C_Master_Receive+0x4ac>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	08db      	lsrs	r3, r3, #3
 80078b6:	4a65      	ldr	r2, [pc, #404]	; (8007a4c <HAL_I2C_Master_Receive+0x4b0>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	0a1a      	lsrs	r2, r3, #8
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	00da      	lsls	r2, r3, #3
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d117      	bne.n	8007906 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80078f8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e099      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b04      	cmp	r3, #4
 8007912:	d1da      	bne.n	80078ca <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007956:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800798a:	e042      	b.n	8007a12 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 ffdf 	bl	8008954 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e04c      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d118      	bne.n	8007a12 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f47f ae99 	bne.w	800774e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e000      	b.n	8007a3a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3728      	adds	r7, #40	; 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	00010004 	.word	0x00010004
 8007a48:	20000064 	.word	0x20000064
 8007a4c:	14f8b589 	.word	0x14f8b589

08007a50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	817b      	strh	r3, [r7, #10]
 8007a62:	460b      	mov	r3, r1
 8007a64:	813b      	strh	r3, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a6a:	f7fe fe21 	bl	80066b0 <HAL_GetTick>
 8007a6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	f040 80d9 	bne.w	8007c30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	2319      	movs	r3, #25
 8007a84:	2201      	movs	r2, #1
 8007a86:	496d      	ldr	r1, [pc, #436]	; (8007c3c <HAL_I2C_Mem_Write+0x1ec>)
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fe0b 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
 8007a96:	e0cc      	b.n	8007c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_I2C_Mem_Write+0x56>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e0c5      	b.n	8007c32 <HAL_I2C_Mem_Write+0x1e2>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d007      	beq.n	8007acc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2221      	movs	r2, #33	; 0x21
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2240      	movs	r2, #64	; 0x40
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a3a      	ldr	r2, [r7, #32]
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a4d      	ldr	r2, [pc, #308]	; (8007c40 <HAL_I2C_Mem_Write+0x1f0>)
 8007b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b0e:	88f8      	ldrh	r0, [r7, #6]
 8007b10:	893a      	ldrh	r2, [r7, #8]
 8007b12:	8979      	ldrh	r1, [r7, #10]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 fc42 	bl	80083a8 <I2C_RequestMemoryWrite>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d052      	beq.n	8007bd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e081      	b.n	8007c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fe8c 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d107      	bne.n	8007b56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e06b      	b.n	8007c32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d11b      	bne.n	8007bd0 <HAL_I2C_Mem_Write+0x180>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d017      	beq.n	8007bd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1aa      	bne.n	8007b2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fe78 	bl	80088d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00d      	beq.n	8007c04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d107      	bne.n	8007c00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e016      	b.n	8007c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e000      	b.n	8007c32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007c30:	2302      	movs	r3, #2
  }
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	00100002 	.word	0x00100002
 8007c40:	ffff0000 	.word	0xffff0000

08007c44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	; 0x30
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	817b      	strh	r3, [r7, #10]
 8007c56:	460b      	mov	r3, r1
 8007c58:	813b      	strh	r3, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c62:	f7fe fd25 	bl	80066b0 <HAL_GetTick>
 8007c66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	f040 823d 	bne.w	80080f0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	2319      	movs	r3, #25
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4981      	ldr	r1, [pc, #516]	; (8007e84 <HAL_I2C_Mem_Read+0x240>)
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fd0f 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e230      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_I2C_Mem_Read+0x5a>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e229      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d007      	beq.n	8007cc4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2222      	movs	r2, #34	; 0x22
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2240      	movs	r2, #64	; 0x40
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4a61      	ldr	r2, [pc, #388]	; (8007e88 <HAL_I2C_Mem_Read+0x244>)
 8007d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d06:	88f8      	ldrh	r0, [r7, #6]
 8007d08:	893a      	ldrh	r2, [r7, #8]
 8007d0a:	8979      	ldrh	r1, [r7, #10]
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4603      	mov	r3, r0
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fbdc 	bl	80084d4 <I2C_RequestMemoryRead>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e1e5      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d113      	bne.n	8007d56 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	e1b9      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d11d      	bne.n	8007d9a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d6e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d70:	2300      	movs	r3, #0
 8007d72:	61bb      	str	r3, [r7, #24]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007d96:	b662      	cpsie	i
 8007d98:	e197      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d11d      	bne.n	8007dde <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007db0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007db2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007dda:	b662      	cpsie	i
 8007ddc:	e175      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007e04:	e161      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	f200 811a 	bhi.w	8008044 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d123      	bne.n	8007e60 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fd99 	bl	8008954 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e162      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e5e:	e134      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d150      	bne.n	8007f0a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	2200      	movs	r2, #0
 8007e70:	4906      	ldr	r1, [pc, #24]	; (8007e8c <HAL_I2C_Mem_Read+0x248>)
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fc16 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e137      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
 8007e82:	bf00      	nop
 8007e84:	00100002 	.word	0x00100002
 8007e88:	ffff0000 	.word	0xffff0000
 8007e8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007e90:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007ed4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f08:	e0df      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	2200      	movs	r2, #0
 8007f12:	497a      	ldr	r1, [pc, #488]	; (80080fc <HAL_I2C_Mem_Read+0x4b8>)
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fbc5 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e0e6      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f34:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f68:	4b65      	ldr	r3, [pc, #404]	; (8008100 <HAL_I2C_Mem_Read+0x4bc>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	08db      	lsrs	r3, r3, #3
 8007f6e:	4a65      	ldr	r2, [pc, #404]	; (8008104 <HAL_I2C_Mem_Read+0x4c0>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0a1a      	lsrs	r2, r3, #8
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	00da      	lsls	r2, r3, #3
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d117      	bne.n	8007fbe <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007fb0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e099      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d1da      	bne.n	8007f82 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800800e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008042:	e042      	b.n	80080ca <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fc83 	bl	8008954 <I2C_WaitOnRXNEFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e04c      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b04      	cmp	r3, #4
 8008096:	d118      	bne.n	80080ca <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f47f ae99 	bne.w	8007e06 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	e000      	b.n	80080f2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80080f0:	2302      	movs	r3, #2
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3728      	adds	r7, #40	; 0x28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	00010004 	.word	0x00010004
 8008100:	20000064 	.word	0x20000064
 8008104:	14f8b589 	.word	0x14f8b589

08008108 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af02      	add	r7, sp, #8
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	460b      	mov	r3, r1
 8008116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2b08      	cmp	r3, #8
 8008122:	d006      	beq.n	8008132 <I2C_MasterRequestWrite+0x2a>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d003      	beq.n	8008132 <I2C_MasterRequestWrite+0x2a>
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008130:	d108      	bne.n	8008144 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	e00b      	b.n	800815c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	2b12      	cmp	r3, #18
 800814a:	d107      	bne.n	800815c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800815a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fa9b 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00d      	beq.n	8008190 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008182:	d103      	bne.n	800818c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800818a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e035      	b.n	80081fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008198:	d108      	bne.n	80081ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800819a:	897b      	ldrh	r3, [r7, #10]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081a8:	611a      	str	r2, [r3, #16]
 80081aa:	e01b      	b.n	80081e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081ac:	897b      	ldrh	r3, [r7, #10]
 80081ae:	11db      	asrs	r3, r3, #7
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0306 	and.w	r3, r3, #6
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f063 030f 	orn	r3, r3, #15
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	490e      	ldr	r1, [pc, #56]	; (8008204 <I2C_MasterRequestWrite+0xfc>)
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fac1 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e010      	b.n	80081fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081da:	897b      	ldrh	r3, [r7, #10]
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4907      	ldr	r1, [pc, #28]	; (8008208 <I2C_MasterRequestWrite+0x100>)
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fab1 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	00010008 	.word	0x00010008
 8008208:	00010002 	.word	0x00010002

0800820c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af02      	add	r7, sp, #8
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	460b      	mov	r3, r1
 800821a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008230:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d006      	beq.n	8008246 <I2C_MasterRequestRead+0x3a>
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d003      	beq.n	8008246 <I2C_MasterRequestRead+0x3a>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008244:	d108      	bne.n	8008258 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	e00b      	b.n	8008270 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	2b11      	cmp	r3, #17
 800825e:	d107      	bne.n	8008270 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 fa11 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00d      	beq.n	80082a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008296:	d103      	bne.n	80082a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800829e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e079      	b.n	8008398 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ac:	d108      	bne.n	80082c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082ae:	897b      	ldrh	r3, [r7, #10]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	f043 0301 	orr.w	r3, r3, #1
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	611a      	str	r2, [r3, #16]
 80082be:	e05f      	b.n	8008380 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80082c0:	897b      	ldrh	r3, [r7, #10]
 80082c2:	11db      	asrs	r3, r3, #7
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f003 0306 	and.w	r3, r3, #6
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f063 030f 	orn	r3, r3, #15
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	4930      	ldr	r1, [pc, #192]	; (80083a0 <I2C_MasterRequestRead+0x194>)
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fa37 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e054      	b.n	8008398 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082ee:	897b      	ldrh	r3, [r7, #10]
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	4929      	ldr	r1, [pc, #164]	; (80083a4 <I2C_MasterRequestRead+0x198>)
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fa27 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e044      	b.n	8008398 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	613b      	str	r3, [r7, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	613b      	str	r3, [r7, #16]
 8008322:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008332:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 f9af 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00d      	beq.n	8008368 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835a:	d103      	bne.n	8008364 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008362:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e017      	b.n	8008398 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008368:	897b      	ldrh	r3, [r7, #10]
 800836a:	11db      	asrs	r3, r3, #7
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 0306 	and.w	r3, r3, #6
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f063 030e 	orn	r3, r3, #14
 8008378:	b2da      	uxtb	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	4907      	ldr	r1, [pc, #28]	; (80083a4 <I2C_MasterRequestRead+0x198>)
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 f9e3 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	00010008 	.word	0x00010008
 80083a4:	00010002 	.word	0x00010002

080083a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	817b      	strh	r3, [r7, #10]
 80083ba:	460b      	mov	r3, r1
 80083bc:	813b      	strh	r3, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	2200      	movs	r2, #0
 80083da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f960 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f8:	d103      	bne.n	8008402 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008400:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e05f      	b.n	80084c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008406:	897b      	ldrh	r3, [r7, #10]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008414:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	6a3a      	ldr	r2, [r7, #32]
 800841a:	492d      	ldr	r1, [pc, #180]	; (80084d0 <I2C_RequestMemoryWrite+0x128>)
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f998 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e04c      	b.n	80084c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	6a39      	ldr	r1, [r7, #32]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fa02 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00d      	beq.n	800846e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	2b04      	cmp	r3, #4
 8008458:	d107      	bne.n	800846a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008468:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e02b      	b.n	80084c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800846e:	88fb      	ldrh	r3, [r7, #6]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d105      	bne.n	8008480 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008474:	893b      	ldrh	r3, [r7, #8]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	611a      	str	r2, [r3, #16]
 800847e:	e021      	b.n	80084c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008480:	893b      	ldrh	r3, [r7, #8]
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	b29b      	uxth	r3, r3
 8008486:	b2da      	uxtb	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800848e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008490:	6a39      	ldr	r1, [r7, #32]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f9dc 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d107      	bne.n	80084b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e005      	b.n	80084c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084ba:	893b      	ldrh	r3, [r7, #8]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	00010002 	.word	0x00010002

080084d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af02      	add	r7, sp, #8
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	4608      	mov	r0, r1
 80084de:	4611      	mov	r1, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	4603      	mov	r3, r0
 80084e4:	817b      	strh	r3, [r7, #10]
 80084e6:	460b      	mov	r3, r1
 80084e8:	813b      	strh	r3, [r7, #8]
 80084ea:	4613      	mov	r3, r2
 80084ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800850c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	2200      	movs	r2, #0
 8008516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f8c2 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008534:	d103      	bne.n	800853e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800853c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e0aa      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008542:	897b      	ldrh	r3, [r7, #10]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	6a3a      	ldr	r2, [r7, #32]
 8008556:	4952      	ldr	r1, [pc, #328]	; (80086a0 <I2C_RequestMemoryRead+0x1cc>)
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f8fa 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e097      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008580:	6a39      	ldr	r1, [r7, #32]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f964 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00d      	beq.n	80085aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	2b04      	cmp	r3, #4
 8008594:	d107      	bne.n	80085a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e076      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d105      	bne.n	80085bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085b0:	893b      	ldrh	r3, [r7, #8]
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	611a      	str	r2, [r3, #16]
 80085ba:	e021      	b.n	8008600 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085cc:	6a39      	ldr	r1, [r7, #32]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f93e 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d107      	bne.n	80085f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e050      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085f6:	893b      	ldrh	r3, [r7, #8]
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008602:	6a39      	ldr	r1, [r7, #32]
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f923 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00d      	beq.n	800862c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	2b04      	cmp	r3, #4
 8008616:	d107      	bne.n	8008628 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008626:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e035      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800863a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	2200      	movs	r2, #0
 8008644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f82b 	bl	80086a4 <I2C_WaitOnFlagUntilTimeout>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00d      	beq.n	8008670 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008662:	d103      	bne.n	800866c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e013      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008670:	897b      	ldrh	r3, [r7, #10]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f043 0301 	orr.w	r3, r3, #1
 8008678:	b2da      	uxtb	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	6a3a      	ldr	r2, [r7, #32]
 8008684:	4906      	ldr	r1, [pc, #24]	; (80086a0 <I2C_RequestMemoryRead+0x1cc>)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f863 	bl	8008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e000      	b.n	8008698 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	00010002 	.word	0x00010002

080086a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4613      	mov	r3, r2
 80086b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086b4:	e025      	b.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086bc:	d021      	beq.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086be:	f7fd fff7 	bl	80066b0 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d302      	bcc.n	80086d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d116      	bne.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f043 0220 	orr.w	r2, r3, #32
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e023      	b.n	800874a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	0c1b      	lsrs	r3, r3, #16
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b01      	cmp	r3, #1
 800870a:	d10d      	bne.n	8008728 <I2C_WaitOnFlagUntilTimeout+0x84>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	43da      	mvns	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4013      	ands	r3, r2
 8008718:	b29b      	uxth	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	bf0c      	ite	eq
 800871e:	2301      	moveq	r3, #1
 8008720:	2300      	movne	r3, #0
 8008722:	b2db      	uxtb	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	e00c      	b.n	8008742 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	43da      	mvns	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4013      	ands	r3, r2
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	bf0c      	ite	eq
 800873a:	2301      	moveq	r3, #1
 800873c:	2300      	movne	r3, #0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	429a      	cmp	r2, r3
 8008746:	d0b6      	beq.n	80086b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008760:	e051      	b.n	8008806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800876c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008770:	d123      	bne.n	80087ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008780:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800878a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2220      	movs	r2, #32
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f043 0204 	orr.w	r2, r3, #4
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e046      	b.n	8008848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c0:	d021      	beq.n	8008806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c2:	f7fd ff75 	bl	80066b0 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d302      	bcc.n	80087d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d116      	bne.n	8008806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f043 0220 	orr.w	r2, r3, #32
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e020      	b.n	8008848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	0c1b      	lsrs	r3, r3, #16
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d10c      	bne.n	800882a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	43da      	mvns	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4013      	ands	r3, r2
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	bf14      	ite	ne
 8008822:	2301      	movne	r3, #1
 8008824:	2300      	moveq	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	e00b      	b.n	8008842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	43da      	mvns	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4013      	ands	r3, r2
 8008836:	b29b      	uxth	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d18d      	bne.n	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800885c:	e02d      	b.n	80088ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f8ce 	bl	8008a00 <I2C_IsAcknowledgeFailed>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e02d      	b.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008874:	d021      	beq.n	80088ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008876:	f7fd ff1b 	bl	80066b0 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d302      	bcc.n	800888c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d116      	bne.n	80088ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f043 0220 	orr.w	r2, r3, #32
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e007      	b.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c4:	2b80      	cmp	r3, #128	; 0x80
 80088c6:	d1ca      	bne.n	800885e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088de:	e02d      	b.n	800893c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f88d 	bl	8008a00 <I2C_IsAcknowledgeFailed>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e02d      	b.n	800894c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088f6:	d021      	beq.n	800893c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f8:	f7fd feda 	bl	80066b0 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	429a      	cmp	r2, r3
 8008906:	d302      	bcc.n	800890e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d116      	bne.n	800893c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	f043 0220 	orr.w	r2, r3, #32
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e007      	b.n	800894c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b04      	cmp	r3, #4
 8008948:	d1ca      	bne.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008960:	e042      	b.n	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b10      	cmp	r3, #16
 800896e:	d119      	bne.n	80089a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0210 	mvn.w	r2, #16
 8008978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e029      	b.n	80089f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a4:	f7fd fe84 	bl	80066b0 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d116      	bne.n	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	f043 0220 	orr.w	r2, r3, #32
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e007      	b.n	80089f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f2:	2b40      	cmp	r3, #64	; 0x40
 80089f4:	d1b5      	bne.n	8008962 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a16:	d11b      	bne.n	8008a50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	f043 0204 	orr.w	r2, r3, #4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e000      	b.n	8008a52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr

08008a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e26c      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8087 	beq.w	8008b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a7c:	4b92      	ldr	r3, [pc, #584]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f003 030c 	and.w	r3, r3, #12
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d00c      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a88:	4b8f      	ldr	r3, [pc, #572]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f003 030c 	and.w	r3, r3, #12
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d112      	bne.n	8008aba <HAL_RCC_OscConfig+0x5e>
 8008a94:	4b8c      	ldr	r3, [pc, #560]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d10b      	bne.n	8008aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa2:	4b89      	ldr	r3, [pc, #548]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d06c      	beq.n	8008b88 <HAL_RCC_OscConfig+0x12c>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d168      	bne.n	8008b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e246      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac2:	d106      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x76>
 8008ac4:	4b80      	ldr	r3, [pc, #512]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a7f      	ldr	r2, [pc, #508]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	e02e      	b.n	8008b30 <HAL_RCC_OscConfig+0xd4>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x98>
 8008ada:	4b7b      	ldr	r3, [pc, #492]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a7a      	ldr	r2, [pc, #488]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	4b78      	ldr	r3, [pc, #480]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a77      	ldr	r2, [pc, #476]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	e01d      	b.n	8008b30 <HAL_RCC_OscConfig+0xd4>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008afc:	d10c      	bne.n	8008b18 <HAL_RCC_OscConfig+0xbc>
 8008afe:	4b72      	ldr	r3, [pc, #456]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a71      	ldr	r2, [pc, #452]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	4b6f      	ldr	r3, [pc, #444]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a6e      	ldr	r2, [pc, #440]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e00b      	b.n	8008b30 <HAL_RCC_OscConfig+0xd4>
 8008b18:	4b6b      	ldr	r3, [pc, #428]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a6a      	ldr	r2, [pc, #424]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	4b68      	ldr	r3, [pc, #416]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a67      	ldr	r2, [pc, #412]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d013      	beq.n	8008b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b38:	f7fd fdba 	bl	80066b0 <HAL_GetTick>
 8008b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b40:	f7fd fdb6 	bl	80066b0 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b64      	cmp	r3, #100	; 0x64
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e1fa      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b52:	4b5d      	ldr	r3, [pc, #372]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0f0      	beq.n	8008b40 <HAL_RCC_OscConfig+0xe4>
 8008b5e:	e014      	b.n	8008b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b60:	f7fd fda6 	bl	80066b0 <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b68:	f7fd fda2 	bl	80066b0 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b64      	cmp	r3, #100	; 0x64
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e1e6      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b7a:	4b53      	ldr	r3, [pc, #332]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x10c>
 8008b86:	e000      	b.n	8008b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d063      	beq.n	8008c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b96:	4b4c      	ldr	r3, [pc, #304]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008ba2:	4b49      	ldr	r3, [pc, #292]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f003 030c 	and.w	r3, r3, #12
 8008baa:	2b08      	cmp	r3, #8
 8008bac:	d11c      	bne.n	8008be8 <HAL_RCC_OscConfig+0x18c>
 8008bae:	4b46      	ldr	r3, [pc, #280]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d116      	bne.n	8008be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bba:	4b43      	ldr	r3, [pc, #268]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x176>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d001      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e1ba      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd2:	4b3d      	ldr	r3, [pc, #244]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	4939      	ldr	r1, [pc, #228]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008be6:	e03a      	b.n	8008c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d020      	beq.n	8008c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf0:	4b36      	ldr	r3, [pc, #216]	; (8008ccc <HAL_RCC_OscConfig+0x270>)
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf6:	f7fd fd5b 	bl	80066b0 <HAL_GetTick>
 8008bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bfc:	e008      	b.n	8008c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bfe:	f7fd fd57 	bl	80066b0 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e19b      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c10:	4b2d      	ldr	r3, [pc, #180]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f0      	beq.n	8008bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c1c:	4b2a      	ldr	r3, [pc, #168]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4927      	ldr	r1, [pc, #156]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	600b      	str	r3, [r1, #0]
 8008c30:	e015      	b.n	8008c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c32:	4b26      	ldr	r3, [pc, #152]	; (8008ccc <HAL_RCC_OscConfig+0x270>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c38:	f7fd fd3a 	bl	80066b0 <HAL_GetTick>
 8008c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c3e:	e008      	b.n	8008c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c40:	f7fd fd36 	bl	80066b0 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d901      	bls.n	8008c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e17a      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1f0      	bne.n	8008c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d03a      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d019      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c72:	4b17      	ldr	r3, [pc, #92]	; (8008cd0 <HAL_RCC_OscConfig+0x274>)
 8008c74:	2201      	movs	r2, #1
 8008c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c78:	f7fd fd1a 	bl	80066b0 <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c80:	f7fd fd16 	bl	80066b0 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e15a      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c92:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <HAL_RCC_OscConfig+0x26c>)
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f0      	beq.n	8008c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	f000 fada 	bl	8009258 <RCC_Delay>
 8008ca4:	e01c      	b.n	8008ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <HAL_RCC_OscConfig+0x274>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cac:	f7fd fd00 	bl	80066b0 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cb2:	e00f      	b.n	8008cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cb4:	f7fd fcfc 	bl	80066b0 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d908      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e140      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
 8008cc6:	bf00      	nop
 8008cc8:	40021000 	.word	0x40021000
 8008ccc:	42420000 	.word	0x42420000
 8008cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cd4:	4b9e      	ldr	r3, [pc, #632]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e9      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 80a6 	beq.w	8008e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cf2:	4b97      	ldr	r3, [pc, #604]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10d      	bne.n	8008d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cfe:	4b94      	ldr	r3, [pc, #592]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	4a93      	ldr	r2, [pc, #588]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d08:	61d3      	str	r3, [r2, #28]
 8008d0a:	4b91      	ldr	r3, [pc, #580]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d12:	60bb      	str	r3, [r7, #8]
 8008d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d16:	2301      	movs	r3, #1
 8008d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1a:	4b8e      	ldr	r3, [pc, #568]	; (8008f54 <HAL_RCC_OscConfig+0x4f8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d118      	bne.n	8008d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d26:	4b8b      	ldr	r3, [pc, #556]	; (8008f54 <HAL_RCC_OscConfig+0x4f8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a8a      	ldr	r2, [pc, #552]	; (8008f54 <HAL_RCC_OscConfig+0x4f8>)
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d32:	f7fd fcbd 	bl	80066b0 <HAL_GetTick>
 8008d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d38:	e008      	b.n	8008d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d3a:	f7fd fcb9 	bl	80066b0 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	2b64      	cmp	r3, #100	; 0x64
 8008d46:	d901      	bls.n	8008d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e0fd      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d4c:	4b81      	ldr	r3, [pc, #516]	; (8008f54 <HAL_RCC_OscConfig+0x4f8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d0f0      	beq.n	8008d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d106      	bne.n	8008d6e <HAL_RCC_OscConfig+0x312>
 8008d60:	4b7b      	ldr	r3, [pc, #492]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	4a7a      	ldr	r2, [pc, #488]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	6213      	str	r3, [r2, #32]
 8008d6c:	e02d      	b.n	8008dca <HAL_RCC_OscConfig+0x36e>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10c      	bne.n	8008d90 <HAL_RCC_OscConfig+0x334>
 8008d76:	4b76      	ldr	r3, [pc, #472]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	4a75      	ldr	r2, [pc, #468]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	6213      	str	r3, [r2, #32]
 8008d82:	4b73      	ldr	r3, [pc, #460]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	4a72      	ldr	r2, [pc, #456]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d88:	f023 0304 	bic.w	r3, r3, #4
 8008d8c:	6213      	str	r3, [r2, #32]
 8008d8e:	e01c      	b.n	8008dca <HAL_RCC_OscConfig+0x36e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b05      	cmp	r3, #5
 8008d96:	d10c      	bne.n	8008db2 <HAL_RCC_OscConfig+0x356>
 8008d98:	4b6d      	ldr	r3, [pc, #436]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	4a6c      	ldr	r2, [pc, #432]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d9e:	f043 0304 	orr.w	r3, r3, #4
 8008da2:	6213      	str	r3, [r2, #32]
 8008da4:	4b6a      	ldr	r3, [pc, #424]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	4a69      	ldr	r2, [pc, #420]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008daa:	f043 0301 	orr.w	r3, r3, #1
 8008dae:	6213      	str	r3, [r2, #32]
 8008db0:	e00b      	b.n	8008dca <HAL_RCC_OscConfig+0x36e>
 8008db2:	4b67      	ldr	r3, [pc, #412]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	4a66      	ldr	r2, [pc, #408]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008db8:	f023 0301 	bic.w	r3, r3, #1
 8008dbc:	6213      	str	r3, [r2, #32]
 8008dbe:	4b64      	ldr	r3, [pc, #400]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	4a63      	ldr	r2, [pc, #396]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008dc4:	f023 0304 	bic.w	r3, r3, #4
 8008dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d015      	beq.n	8008dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dd2:	f7fd fc6d 	bl	80066b0 <HAL_GetTick>
 8008dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dd8:	e00a      	b.n	8008df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dda:	f7fd fc69 	bl	80066b0 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d901      	bls.n	8008df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e0ab      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df0:	4b57      	ldr	r3, [pc, #348]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0ee      	beq.n	8008dda <HAL_RCC_OscConfig+0x37e>
 8008dfc:	e014      	b.n	8008e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dfe:	f7fd fc57 	bl	80066b0 <HAL_GetTick>
 8008e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e04:	e00a      	b.n	8008e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e06:	f7fd fc53 	bl	80066b0 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e095      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e1c:	4b4c      	ldr	r3, [pc, #304]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1ee      	bne.n	8008e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d105      	bne.n	8008e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e2e:	4b48      	ldr	r3, [pc, #288]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	4a47      	ldr	r2, [pc, #284]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 8081 	beq.w	8008f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e44:	4b42      	ldr	r3, [pc, #264]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f003 030c 	and.w	r3, r3, #12
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d061      	beq.n	8008f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d146      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e58:	4b3f      	ldr	r3, [pc, #252]	; (8008f58 <HAL_RCC_OscConfig+0x4fc>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e5e:	f7fd fc27 	bl	80066b0 <HAL_GetTick>
 8008e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e64:	e008      	b.n	8008e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e66:	f7fd fc23 	bl	80066b0 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e067      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e78:	4b35      	ldr	r3, [pc, #212]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1f0      	bne.n	8008e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8c:	d108      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e8e:	4b30      	ldr	r3, [pc, #192]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	492d      	ldr	r1, [pc, #180]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ea0:	4b2b      	ldr	r3, [pc, #172]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a19      	ldr	r1, [r3, #32]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	4927      	ldr	r1, [pc, #156]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008eb8:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <HAL_RCC_OscConfig+0x4fc>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ebe:	f7fd fbf7 	bl	80066b0 <HAL_GetTick>
 8008ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ec4:	e008      	b.n	8008ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ec6:	f7fd fbf3 	bl	80066b0 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e037      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ed8:	4b1d      	ldr	r3, [pc, #116]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0f0      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x46a>
 8008ee4:	e02f      	b.n	8008f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ee6:	4b1c      	ldr	r3, [pc, #112]	; (8008f58 <HAL_RCC_OscConfig+0x4fc>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eec:	f7fd fbe0 	bl	80066b0 <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef4:	f7fd fbdc 	bl	80066b0 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e020      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f06:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f0      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x498>
 8008f12:	e018      	b.n	8008f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d101      	bne.n	8008f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e013      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008f20:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d106      	bne.n	8008f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d001      	beq.n	8008f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40021000 	.word	0x40021000
 8008f54:	40007000 	.word	0x40007000
 8008f58:	42420060 	.word	0x42420060

08008f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e0d0      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f70:	4b6a      	ldr	r3, [pc, #424]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d910      	bls.n	8008fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7e:	4b67      	ldr	r3, [pc, #412]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f023 0207 	bic.w	r2, r3, #7
 8008f86:	4965      	ldr	r1, [pc, #404]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8e:	4b63      	ldr	r3, [pc, #396]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d001      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e0b8      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d020      	beq.n	8008fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fb8:	4b59      	ldr	r3, [pc, #356]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a58      	ldr	r2, [pc, #352]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8008fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d005      	beq.n	8008fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fd0:	4b53      	ldr	r3, [pc, #332]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4a52      	ldr	r2, [pc, #328]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fdc:	4b50      	ldr	r3, [pc, #320]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	494d      	ldr	r1, [pc, #308]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d040      	beq.n	800907c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d107      	bne.n	8009012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009002:	4b47      	ldr	r3, [pc, #284]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d115      	bne.n	800903a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e07f      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d107      	bne.n	800902a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800901a:	4b41      	ldr	r3, [pc, #260]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e073      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800902a:	4b3d      	ldr	r3, [pc, #244]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e06b      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800903a:	4b39      	ldr	r3, [pc, #228]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f023 0203 	bic.w	r2, r3, #3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4936      	ldr	r1, [pc, #216]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 8009048:	4313      	orrs	r3, r2
 800904a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800904c:	f7fd fb30 	bl	80066b0 <HAL_GetTick>
 8009050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009052:	e00a      	b.n	800906a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009054:	f7fd fb2c 	bl	80066b0 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009062:	4293      	cmp	r3, r2
 8009064:	d901      	bls.n	800906a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e053      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800906a:	4b2d      	ldr	r3, [pc, #180]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f003 020c 	and.w	r2, r3, #12
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	429a      	cmp	r2, r3
 800907a:	d1eb      	bne.n	8009054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800907c:	4b27      	ldr	r3, [pc, #156]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d210      	bcs.n	80090ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f023 0207 	bic.w	r2, r3, #7
 8009092:	4922      	ldr	r1, [pc, #136]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	4313      	orrs	r3, r2
 8009098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800909a:	4b20      	ldr	r3, [pc, #128]	; (800911c <HAL_RCC_ClockConfig+0x1c0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d001      	beq.n	80090ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e032      	b.n	8009112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d008      	beq.n	80090ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090b8:	4b19      	ldr	r3, [pc, #100]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	4916      	ldr	r1, [pc, #88]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d009      	beq.n	80090ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80090d6:	4b12      	ldr	r3, [pc, #72]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	490e      	ldr	r1, [pc, #56]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090ea:	f000 f821 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 80090ee:	4601      	mov	r1, r0
 80090f0:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <HAL_RCC_ClockConfig+0x1c4>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	091b      	lsrs	r3, r3, #4
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	4a0a      	ldr	r2, [pc, #40]	; (8009124 <HAL_RCC_ClockConfig+0x1c8>)
 80090fc:	5cd3      	ldrb	r3, [r2, r3]
 80090fe:	fa21 f303 	lsr.w	r3, r1, r3
 8009102:	4a09      	ldr	r2, [pc, #36]	; (8009128 <HAL_RCC_ClockConfig+0x1cc>)
 8009104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009106:	4b09      	ldr	r3, [pc, #36]	; (800912c <HAL_RCC_ClockConfig+0x1d0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd fa8e 	bl	800662c <HAL_InitTick>

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	40022000 	.word	0x40022000
 8009120:	40021000 	.word	0x40021000
 8009124:	0800f69c 	.word	0x0800f69c
 8009128:	20000064 	.word	0x20000064
 800912c:	20000068 	.word	0x20000068

08009130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009130:	b490      	push	{r4, r7}
 8009132:	b08a      	sub	sp, #40	; 0x28
 8009134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009136:	4b2a      	ldr	r3, [pc, #168]	; (80091e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009138:	1d3c      	adds	r4, r7, #4
 800913a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800913c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009140:	4b28      	ldr	r3, [pc, #160]	; (80091e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	2300      	movs	r3, #0
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	2300      	movs	r3, #0
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800915a:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f003 030c 	and.w	r3, r3, #12
 8009166:	2b04      	cmp	r3, #4
 8009168:	d002      	beq.n	8009170 <HAL_RCC_GetSysClockFreq+0x40>
 800916a:	2b08      	cmp	r3, #8
 800916c:	d003      	beq.n	8009176 <HAL_RCC_GetSysClockFreq+0x46>
 800916e:	e02d      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009170:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8009172:	623b      	str	r3, [r7, #32]
      break;
 8009174:	e02d      	b.n	80091d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	0c9b      	lsrs	r3, r3, #18
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009182:	4413      	add	r3, r2
 8009184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009188:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d013      	beq.n	80091bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009194:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	0c5b      	lsrs	r3, r3, #17
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80091a2:	4413      	add	r3, r2
 80091a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80091a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	4a0f      	ldr	r2, [pc, #60]	; (80091ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80091ae:	fb02 f203 	mul.w	r2, r2, r3
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
 80091ba:	e004      	b.n	80091c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	4a0c      	ldr	r2, [pc, #48]	; (80091f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	623b      	str	r3, [r7, #32]
      break;
 80091ca:	e002      	b.n	80091d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80091cc:	4b07      	ldr	r3, [pc, #28]	; (80091ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80091ce:	623b      	str	r3, [r7, #32]
      break;
 80091d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091d2:	6a3b      	ldr	r3, [r7, #32]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3728      	adds	r7, #40	; 0x28
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc90      	pop	{r4, r7}
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	0800ef1c 	.word	0x0800ef1c
 80091e4:	0800ef2c 	.word	0x0800ef2c
 80091e8:	40021000 	.word	0x40021000
 80091ec:	007a1200 	.word	0x007a1200
 80091f0:	003d0900 	.word	0x003d0900

080091f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091f8:	4b02      	ldr	r3, [pc, #8]	; (8009204 <HAL_RCC_GetHCLKFreq+0x10>)
 80091fa:	681b      	ldr	r3, [r3, #0]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr
 8009204:	20000064 	.word	0x20000064

08009208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800920c:	f7ff fff2 	bl	80091f4 <HAL_RCC_GetHCLKFreq>
 8009210:	4601      	mov	r1, r0
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	0a1b      	lsrs	r3, r3, #8
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	4a03      	ldr	r2, [pc, #12]	; (800922c <HAL_RCC_GetPCLK1Freq+0x24>)
 800921e:	5cd3      	ldrb	r3, [r2, r3]
 8009220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40021000 	.word	0x40021000
 800922c:	0800f6ac 	.word	0x0800f6ac

08009230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009234:	f7ff ffde 	bl	80091f4 <HAL_RCC_GetHCLKFreq>
 8009238:	4601      	mov	r1, r0
 800923a:	4b05      	ldr	r3, [pc, #20]	; (8009250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	0adb      	lsrs	r3, r3, #11
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	4a03      	ldr	r2, [pc, #12]	; (8009254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800924c:	4618      	mov	r0, r3
 800924e:	bd80      	pop	{r7, pc}
 8009250:	40021000 	.word	0x40021000
 8009254:	0800f6ac 	.word	0x0800f6ac

08009258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009260:	4b0a      	ldr	r3, [pc, #40]	; (800928c <RCC_Delay+0x34>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <RCC_Delay+0x38>)
 8009266:	fba2 2303 	umull	r2, r3, r2, r3
 800926a:	0a5b      	lsrs	r3, r3, #9
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009274:	bf00      	nop
  }
  while (Delay --);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	60fa      	str	r2, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1f9      	bne.n	8009274 <RCC_Delay+0x1c>
}
 8009280:	bf00      	nop
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000064 	.word	0x20000064
 8009290:	10624dd3 	.word	0x10624dd3

08009294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e053      	b.n	800934e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7fc fe21 	bl	8005f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2202      	movs	r2, #2
 80092ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	ea42 0103 	orr.w	r1, r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	0c1a      	lsrs	r2, r3, #16
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f002 0204 	and.w	r2, r2, #4
 800932c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800933c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e01d      	b.n	80093a4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7fc fe0f 	bl	8005fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2202      	movs	r2, #2
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3304      	adds	r3, #4
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f000 fb0b 	bl	80099b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b06      	cmp	r3, #6
 80093d4:	d007      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0201 	orr.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr

080093f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e01d      	b.n	8009440 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d106      	bne.n	800941e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f815 	bl	8009448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f000 fabd 	bl	80099b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr

0800945a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b02      	cmp	r3, #2
 800946e:	d122      	bne.n	80094b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b02      	cmp	r3, #2
 800947c:	d11b      	bne.n	80094b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f06f 0202 	mvn.w	r2, #2
 8009486:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	f003 0303 	and.w	r3, r3, #3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fa6b 	bl	8009978 <HAL_TIM_IC_CaptureCallback>
 80094a2:	e005      	b.n	80094b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa5e 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa6d 	bl	800998a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d122      	bne.n	800950a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d11b      	bne.n	800950a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f06f 0204 	mvn.w	r2, #4
 80094da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa41 	bl	8009978 <HAL_TIM_IC_CaptureCallback>
 80094f6:	e005      	b.n	8009504 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa34 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa43 	bl	800998a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b08      	cmp	r3, #8
 8009516:	d122      	bne.n	800955e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f003 0308 	and.w	r3, r3, #8
 8009522:	2b08      	cmp	r3, #8
 8009524:	d11b      	bne.n	800955e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f06f 0208 	mvn.w	r2, #8
 800952e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2204      	movs	r2, #4
 8009534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa17 	bl	8009978 <HAL_TIM_IC_CaptureCallback>
 800954a:	e005      	b.n	8009558 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fa0a 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fa19 	bl	800998a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	f003 0310 	and.w	r3, r3, #16
 8009568:	2b10      	cmp	r3, #16
 800956a:	d122      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b10      	cmp	r3, #16
 8009578:	d11b      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f06f 0210 	mvn.w	r2, #16
 8009582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2208      	movs	r2, #8
 8009588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f9ed 	bl	8009978 <HAL_TIM_IC_CaptureCallback>
 800959e:	e005      	b.n	80095ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9e0 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f9ef 	bl	800998a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d10e      	bne.n	80095de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d107      	bne.n	80095de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f06f 0201 	mvn.w	r2, #1
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7fa f8c5 	bl	8003768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e8:	2b80      	cmp	r3, #128	; 0x80
 80095ea:	d10e      	bne.n	800960a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f6:	2b80      	cmp	r3, #128	; 0x80
 80095f8:	d107      	bne.n	800960a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fcf1 	bl	8009fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	d10e      	bne.n	8009636 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009622:	2b40      	cmp	r3, #64	; 0x40
 8009624:	d107      	bne.n	8009636 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800962e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f9b3 	bl	800999c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b20      	cmp	r3, #32
 8009642:	d10e      	bne.n	8009662 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f003 0320 	and.w	r3, r3, #32
 800964e:	2b20      	cmp	r3, #32
 8009650:	d107      	bne.n	8009662 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f06f 0220 	mvn.w	r2, #32
 800965a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fcbc 	bl	8009fda <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009682:	2302      	movs	r3, #2
 8009684:	e0b4      	b.n	80097f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	f200 809f 	bhi.w	80097dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800969e:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096d9 	.word	0x080096d9
 80096a8:	080097dd 	.word	0x080097dd
 80096ac:	080097dd 	.word	0x080097dd
 80096b0:	080097dd 	.word	0x080097dd
 80096b4:	08009719 	.word	0x08009719
 80096b8:	080097dd 	.word	0x080097dd
 80096bc:	080097dd 	.word	0x080097dd
 80096c0:	080097dd 	.word	0x080097dd
 80096c4:	0800975b 	.word	0x0800975b
 80096c8:	080097dd 	.word	0x080097dd
 80096cc:	080097dd 	.word	0x080097dd
 80096d0:	080097dd 	.word	0x080097dd
 80096d4:	0800979b 	.word	0x0800979b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f9c8 	bl	8009a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0208 	orr.w	r2, r2, #8
 80096f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0204 	bic.w	r2, r2, #4
 8009702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6999      	ldr	r1, [r3, #24]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691a      	ldr	r2, [r3, #16]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	619a      	str	r2, [r3, #24]
      break;
 8009716:	e062      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fa0e 	bl	8009b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6999      	ldr	r1, [r3, #24]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	021a      	lsls	r2, r3, #8
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	619a      	str	r2, [r3, #24]
      break;
 8009758:	e041      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fa57 	bl	8009c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0208 	orr.w	r2, r2, #8
 8009774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0204 	bic.w	r2, r2, #4
 8009784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69d9      	ldr	r1, [r3, #28]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	61da      	str	r2, [r3, #28]
      break;
 8009798:	e021      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 faa1 	bl	8009ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69d9      	ldr	r1, [r3, #28]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	021a      	lsls	r2, r3, #8
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	61da      	str	r2, [r3, #28]
      break;
 80097da:	e000      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80097dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009808:	2b01      	cmp	r3, #1
 800980a:	d101      	bne.n	8009810 <HAL_TIM_ConfigClockSource+0x18>
 800980c:	2302      	movs	r3, #2
 800980e:	e0a6      	b.n	800995e <HAL_TIM_ConfigClockSource+0x166>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800982e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b40      	cmp	r3, #64	; 0x40
 8009846:	d067      	beq.n	8009918 <HAL_TIM_ConfigClockSource+0x120>
 8009848:	2b40      	cmp	r3, #64	; 0x40
 800984a:	d80b      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x6c>
 800984c:	2b10      	cmp	r3, #16
 800984e:	d073      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
 8009850:	2b10      	cmp	r3, #16
 8009852:	d802      	bhi.n	800985a <HAL_TIM_ConfigClockSource+0x62>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d06f      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009858:	e078      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800985a:	2b20      	cmp	r3, #32
 800985c:	d06c      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
 800985e:	2b30      	cmp	r3, #48	; 0x30
 8009860:	d06a      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009862:	e073      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009864:	2b70      	cmp	r3, #112	; 0x70
 8009866:	d00d      	beq.n	8009884 <HAL_TIM_ConfigClockSource+0x8c>
 8009868:	2b70      	cmp	r3, #112	; 0x70
 800986a:	d804      	bhi.n	8009876 <HAL_TIM_ConfigClockSource+0x7e>
 800986c:	2b50      	cmp	r3, #80	; 0x50
 800986e:	d033      	beq.n	80098d8 <HAL_TIM_ConfigClockSource+0xe0>
 8009870:	2b60      	cmp	r3, #96	; 0x60
 8009872:	d041      	beq.n	80098f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009874:	e06a      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987a:	d066      	beq.n	800994a <HAL_TIM_ConfigClockSource+0x152>
 800987c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009880:	d017      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009882:	e063      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6899      	ldr	r1, [r3, #8]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f000 faed 	bl	8009e72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	609a      	str	r2, [r3, #8]
      break;
 80098b0:	e04c      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	6899      	ldr	r1, [r3, #8]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f000 fad6 	bl	8009e72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098d4:	609a      	str	r2, [r3, #8]
      break;
 80098d6:	e039      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6859      	ldr	r1, [r3, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f000 fa4d 	bl	8009d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2150      	movs	r1, #80	; 0x50
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 faa4 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 80098f6:	e029      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	6859      	ldr	r1, [r3, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	461a      	mov	r2, r3
 8009906:	f000 fa6b 	bl	8009de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2160      	movs	r1, #96	; 0x60
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fa94 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 8009916:	e019      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6859      	ldr	r1, [r3, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	461a      	mov	r2, r3
 8009926:	f000 fa2d 	bl	8009d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2140      	movs	r1, #64	; 0x40
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fa84 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 8009936:	e009      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f000 fa7b 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 8009948:	e000      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800994a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	bc80      	pop	{r7}
 8009976:	4770      	bx	lr

08009978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	bc80      	pop	{r7}
 8009988:	4770      	bx	lr

0800998a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
	...

080099b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a29      	ldr	r2, [pc, #164]	; (8009a68 <TIM_Base_SetConfig+0xb8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00b      	beq.n	80099e0 <TIM_Base_SetConfig+0x30>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ce:	d007      	beq.n	80099e0 <TIM_Base_SetConfig+0x30>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a26      	ldr	r2, [pc, #152]	; (8009a6c <TIM_Base_SetConfig+0xbc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_Base_SetConfig+0x30>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a25      	ldr	r2, [pc, #148]	; (8009a70 <TIM_Base_SetConfig+0xc0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d108      	bne.n	80099f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a1c      	ldr	r2, [pc, #112]	; (8009a68 <TIM_Base_SetConfig+0xb8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00b      	beq.n	8009a12 <TIM_Base_SetConfig+0x62>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a00:	d007      	beq.n	8009a12 <TIM_Base_SetConfig+0x62>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a19      	ldr	r2, [pc, #100]	; (8009a6c <TIM_Base_SetConfig+0xbc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d003      	beq.n	8009a12 <TIM_Base_SetConfig+0x62>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a18      	ldr	r2, [pc, #96]	; (8009a70 <TIM_Base_SetConfig+0xc0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d108      	bne.n	8009a24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a07      	ldr	r2, [pc, #28]	; (8009a68 <TIM_Base_SetConfig+0xb8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d103      	bne.n	8009a58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	615a      	str	r2, [r3, #20]
}
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bc80      	pop	{r7}
 8009a66:	4770      	bx	lr
 8009a68:	40012c00 	.word	0x40012c00
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800

08009a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	f023 0201 	bic.w	r2, r3, #1
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0303 	bic.w	r3, r3, #3
 8009aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f023 0302 	bic.w	r3, r3, #2
 8009abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a1c      	ldr	r2, [pc, #112]	; (8009b3c <TIM_OC1_SetConfig+0xc8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d10c      	bne.n	8009aea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f023 0308 	bic.w	r3, r3, #8
 8009ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f023 0304 	bic.w	r3, r3, #4
 8009ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a13      	ldr	r2, [pc, #76]	; (8009b3c <TIM_OC1_SetConfig+0xc8>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d111      	bne.n	8009b16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	621a      	str	r2, [r3, #32]
}
 8009b30:	bf00      	nop
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bc80      	pop	{r7}
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40012c00 	.word	0x40012c00

08009b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	f023 0210 	bic.w	r2, r3, #16
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	021b      	lsls	r3, r3, #8
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f023 0320 	bic.w	r3, r3, #32
 8009b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a1d      	ldr	r2, [pc, #116]	; (8009c10 <TIM_OC2_SetConfig+0xd0>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10d      	bne.n	8009bbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a14      	ldr	r2, [pc, #80]	; (8009c10 <TIM_OC2_SetConfig+0xd0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d113      	bne.n	8009bec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bc80      	pop	{r7}
 8009c0e:	4770      	bx	lr
 8009c10:	40012c00 	.word	0x40012c00

08009c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0303 	bic.w	r3, r3, #3
 8009c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ce4 <TIM_OC3_SetConfig+0xd0>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d10d      	bne.n	8009c8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	021b      	lsls	r3, r3, #8
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a14      	ldr	r2, [pc, #80]	; (8009ce4 <TIM_OC3_SetConfig+0xd0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d113      	bne.n	8009cbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	621a      	str	r2, [r3, #32]
}
 8009cd8:	bf00      	nop
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bc80      	pop	{r7}
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	40012c00 	.word	0x40012c00

08009ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	031b      	lsls	r3, r3, #12
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <TIM_OC4_SetConfig+0x98>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d109      	bne.n	8009d5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	019b      	lsls	r3, r3, #6
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	621a      	str	r2, [r3, #32]
}
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr
 8009d80:	40012c00 	.word	0x40012c00

08009d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	f023 0201 	bic.w	r2, r3, #1
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f023 030a 	bic.w	r3, r3, #10
 8009dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr

08009de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	f023 0210 	bic.w	r2, r3, #16
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	031b      	lsls	r3, r3, #12
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	011b      	lsls	r3, r3, #4
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	621a      	str	r2, [r3, #32]
}
 8009e34:	bf00      	nop
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr

08009e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f043 0307 	orr.w	r3, r3, #7
 8009e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	609a      	str	r2, [r3, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b087      	sub	sp, #28
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	021a      	lsls	r2, r3, #8
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	431a      	orrs	r2, r3
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	609a      	str	r2, [r3, #8]
}
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d101      	bne.n	8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e032      	b.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bc80      	pop	{r7}
 8009f36:	4770      	bx	lr

08009f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d101      	bne.n	8009f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f50:	2302      	movs	r3, #2
 8009f52:	e03d      	b.n	8009fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr

08009fda <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b083      	sub	sp, #12
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe2:	bf00      	nop
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr

08009fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc80      	pop	{r7}
 8009ffc:	4770      	bx	lr

08009ffe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b082      	sub	sp, #8
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e03f      	b.n	800a090 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d106      	bne.n	800a02a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fc f827 	bl	8006078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2224      	movs	r2, #36	; 0x24
 800a02e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a040:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fd0a 	bl	800aa5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a056:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695a      	ldr	r2, [r3, #20]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a066:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a076:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2220      	movs	r2, #32
 800a08a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b20      	cmp	r3, #32
 800a0b6:	f040 8083 	bne.w	800a1c0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <HAL_UART_Transmit+0x2e>
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e07b      	b.n	800a1c2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_UART_Transmit+0x40>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e074      	b.n	800a1c2 <HAL_UART_Transmit+0x12a>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2221      	movs	r2, #33	; 0x21
 800a0ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a0ee:	f7fc fadf 	bl	80066b0 <HAL_GetTick>
 800a0f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	88fa      	ldrh	r2, [r7, #6]
 800a0f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	88fa      	ldrh	r2, [r7, #6]
 800a0fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a100:	e042      	b.n	800a188 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a106:	b29b      	uxth	r3, r3
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a118:	d122      	bne.n	800a160 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2200      	movs	r2, #0
 800a122:	2180      	movs	r1, #128	; 0x80
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fb1a 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e046      	b.n	800a1c2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a146:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d103      	bne.n	800a158 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	3302      	adds	r3, #2
 800a154:	60bb      	str	r3, [r7, #8]
 800a156:	e017      	b.n	800a188 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	3301      	adds	r3, #1
 800a15c:	60bb      	str	r3, [r7, #8]
 800a15e:	e013      	b.n	800a188 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2200      	movs	r2, #0
 800a168:	2180      	movs	r1, #128	; 0x80
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 faf7 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e023      	b.n	800a1c2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	60ba      	str	r2, [r7, #8]
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1b7      	bne.n	800a102 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2200      	movs	r2, #0
 800a19a:	2140      	movs	r1, #64	; 0x40
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fade 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e00a      	b.n	800a1c2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e000      	b.n	800a1c2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a1c0:	2302      	movs	r3, #2
  }
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b088      	sub	sp, #32
 800a1ce:	af02      	add	r7, sp, #8
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	603b      	str	r3, [r7, #0]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	f040 8090 	bne.w	800a30c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <HAL_UART_Receive+0x2e>
 800a1f2:	88fb      	ldrh	r3, [r7, #6]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e088      	b.n	800a30e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a202:	2b01      	cmp	r3, #1
 800a204:	d101      	bne.n	800a20a <HAL_UART_Receive+0x40>
 800a206:	2302      	movs	r3, #2
 800a208:	e081      	b.n	800a30e <HAL_UART_Receive+0x144>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2222      	movs	r2, #34	; 0x22
 800a21c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a220:	f7fc fa46 	bl	80066b0 <HAL_GetTick>
 800a224:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	88fa      	ldrh	r2, [r7, #6]
 800a22a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	88fa      	ldrh	r2, [r7, #6]
 800a230:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a232:	e05c      	b.n	800a2ee <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a238:	b29b      	uxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24a:	d12b      	bne.n	800a2a4 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2200      	movs	r2, #0
 800a254:	2120      	movs	r1, #32
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fa81 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e053      	b.n	800a30e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10c      	bne.n	800a28c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27e:	b29a      	uxth	r2, r3
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	3302      	adds	r3, #2
 800a288:	60bb      	str	r3, [r7, #8]
 800a28a:	e030      	b.n	800a2ee <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	b29b      	uxth	r3, r3
 800a294:	b2db      	uxtb	r3, r3
 800a296:	b29a      	uxth	r2, r3
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	60bb      	str	r3, [r7, #8]
 800a2a2:	e024      	b.n	800a2ee <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2120      	movs	r1, #32
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 fa55 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e027      	b.n	800a30e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d108      	bne.n	800a2d8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6859      	ldr	r1, [r3, #4]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	60ba      	str	r2, [r7, #8]
 800a2d2:	b2ca      	uxtb	r2, r1
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e00a      	b.n	800a2ee <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	1c59      	adds	r1, r3, #1
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a2ea:	b2d2      	uxtb	r2, r2
 800a2ec:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d19d      	bne.n	800a234 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	e000      	b.n	800a30e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a30c:	2302      	movs	r3, #2
  }
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d166      	bne.n	800a400 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <HAL_UART_Receive_DMA+0x26>
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e05f      	b.n	800a402 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_UART_Receive_DMA+0x38>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e058      	b.n	800a402 <HAL_UART_Receive_DMA+0xea>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2222      	movs	r2, #34	; 0x22
 800a36e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	4a25      	ldr	r2, [pc, #148]	; (800a40c <HAL_UART_Receive_DMA+0xf4>)
 800a378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	4a24      	ldr	r2, [pc, #144]	; (800a410 <HAL_UART_Receive_DMA+0xf8>)
 800a380:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a386:	4a23      	ldr	r2, [pc, #140]	; (800a414 <HAL_UART_Receive_DMA+0xfc>)
 800a388:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	2200      	movs	r2, #0
 800a390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800a392:	f107 0308 	add.w	r3, r7, #8
 800a396:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	f7fc fb15 	bl	80069d8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	613b      	str	r3, [r7, #16]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	613b      	str	r3, [r7, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	613b      	str	r3, [r7, #16]
 800a3c2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695a      	ldr	r2, [r3, #20]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0201 	orr.w	r2, r2, #1
 800a3ea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695a      	ldr	r2, [r3, #20]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3fa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e000      	b.n	800a402 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a400:	2302      	movs	r3, #2
  }
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	0800a647 	.word	0x0800a647
 800a410:	0800a6af 	.word	0x0800a6af
 800a414:	0800a6cb 	.word	0x0800a6cb

0800a418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	f003 030f 	and.w	r3, r3, #15
 800a446:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10d      	bne.n	800a46a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_UART_IRQHandler+0x52>
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa78 	bl	800a958 <UART_Receive_IT>
      return;
 800a468:	e0cc      	b.n	800a604 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80ab 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x1b0>
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d105      	bne.n	800a488 <HAL_UART_IRQHandler+0x70>
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 80a0 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_UART_IRQHandler+0x90>
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a0:	f043 0201 	orr.w	r2, r3, #1
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	f003 0304 	and.w	r3, r3, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <HAL_UART_IRQHandler+0xb0>
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	f043 0202 	orr.w	r2, r3, #2
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00a      	beq.n	800a4e8 <HAL_UART_IRQHandler+0xd0>
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e0:	f043 0204 	orr.w	r2, r3, #4
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <HAL_UART_IRQHandler+0xf0>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d005      	beq.n	800a508 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a500:	f043 0208 	orr.w	r2, r3, #8
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d078      	beq.n	800a602 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <HAL_UART_IRQHandler+0x112>
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	f003 0320 	and.w	r3, r3, #32
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fa17 	bl	800a958 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a534:	2b00      	cmp	r3, #0
 800a536:	bf14      	ite	ne
 800a538:	2301      	movne	r3, #1
 800a53a:	2300      	moveq	r3, #0
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <HAL_UART_IRQHandler+0x13a>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d031      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f962 	bl	800a81c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d023      	beq.n	800a5ae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695a      	ldr	r2, [r3, #20]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a574:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d013      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a582:	4a22      	ldr	r2, [pc, #136]	; (800a60c <HAL_UART_IRQHandler+0x1f4>)
 800a584:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fc fa84 	bl	8006a98 <HAL_DMA_Abort_IT>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d016      	beq.n	800a5c4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a4:	e00e      	b.n	800a5c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f844 	bl	800a634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ac:	e00a      	b.n	800a5c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f840 	bl	800a634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b4:	e006      	b.n	800a5c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f83c 	bl	800a634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a5c2:	e01e      	b.n	800a602 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	bf00      	nop
    return;
 800a5c6:	e01c      	b.n	800a602 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d008      	beq.n	800a5e4 <HAL_UART_IRQHandler+0x1cc>
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f94e 	bl	800a87e <UART_Transmit_IT>
    return;
 800a5e2:	e00f      	b.n	800a604 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <HAL_UART_IRQHandler+0x1ec>
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f995 	bl	800a928 <UART_EndTransmit_IT>
    return;
 800a5fe:	bf00      	nop
 800a600:	e000      	b.n	800a604 <HAL_UART_IRQHandler+0x1ec>
    return;
 800a602:	bf00      	nop
  }
}
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	0800a857 	.word	0x0800a857

0800a610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bc80      	pop	{r7}
 800a620:	4770      	bx	lr

0800a622 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	bc80      	pop	{r7}
 800a644:	4770      	bx	lr

0800a646 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0320 	and.w	r3, r3, #32
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11e      	bne.n	800a6a0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a676:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 0201 	bic.w	r2, r2, #1
 800a686:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695a      	ldr	r2, [r3, #20]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a696:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f7f8 fcad 	bl	8003000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6a6:	bf00      	nop
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff ffb0 	bl	800a622 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bf14      	ite	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	2300      	moveq	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b21      	cmp	r3, #33	; 0x21
 800a6fc:	d108      	bne.n	800a710 <UART_DMAError+0x46>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f000 f871 	bl	800a7f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2301      	movne	r3, #1
 800a720:	2300      	moveq	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b22      	cmp	r3, #34	; 0x22
 800a730:	d108      	bne.n	800a744 <UART_DMAError+0x7a>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2200      	movs	r2, #0
 800a73c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a73e:	68b8      	ldr	r0, [r7, #8]
 800a740:	f000 f86c 	bl	800a81c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a748:	f043 0210 	orr.w	r2, r3, #16
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a750:	68b8      	ldr	r0, [r7, #8]
 800a752:	f7ff ff6f 	bl	800a634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	603b      	str	r3, [r7, #0]
 800a76a:	4613      	mov	r3, r2
 800a76c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a76e:	e02c      	b.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a776:	d028      	beq.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <UART_WaitOnFlagUntilTimeout+0x30>
 800a77e:	f7fb ff97 	bl	80066b0 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d21d      	bcs.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a79c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	695a      	ldr	r2, [r3, #20]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0201 	bic.w	r2, r2, #1
 800a7ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e00f      	b.n	800a7ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	bf0c      	ite	eq
 800a7da:	2301      	moveq	r3, #1
 800a7dc:	2300      	movne	r3, #0
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d0c3      	beq.n	800a770 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a808:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a812:	bf00      	nop
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr

0800a81c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68da      	ldr	r2, [r3, #12]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	695a      	ldr	r2, [r3, #20]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f022 0201 	bic.w	r2, r2, #1
 800a842:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2220      	movs	r2, #32
 800a848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	bc80      	pop	{r7}
 800a854:	4770      	bx	lr

0800a856 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7ff fedf 	bl	800a634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b21      	cmp	r3, #33	; 0x21
 800a890:	d144      	bne.n	800a91c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a89a:	d11a      	bne.n	800a8d2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8b0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	1c9a      	adds	r2, r3, #2
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	621a      	str	r2, [r3, #32]
 800a8c4:	e00e      	b.n	800a8e4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	621a      	str	r2, [r3, #32]
 800a8d0:	e008      	b.n	800a8e4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	1c59      	adds	r1, r3, #1
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6211      	str	r1, [r2, #32]
 800a8dc:	781a      	ldrb	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10f      	bne.n	800a918 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	e000      	b.n	800a91e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a91c:	2302      	movs	r3, #2
  }
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a93e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fe61 	bl	800a610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b22      	cmp	r3, #34	; 0x22
 800a96a:	d171      	bne.n	800aa50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a974:	d123      	bne.n	800a9be <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10e      	bne.n	800a9a2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a990:	b29a      	uxth	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99a:	1c9a      	adds	r2, r3, #2
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28
 800a9a0:	e029      	b.n	800a9f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28
 800a9bc:	e01b      	b.n	800a9f6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10a      	bne.n	800a9dc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6858      	ldr	r0, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	1c59      	adds	r1, r3, #1
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	6291      	str	r1, [r2, #40]	; 0x28
 800a9d6:	b2c2      	uxtb	r2, r0
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	e00c      	b.n	800a9f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e8:	1c58      	adds	r0, r3, #1
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	6288      	str	r0, [r1, #40]	; 0x28
 800a9ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	4619      	mov	r1, r3
 800aa04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d120      	bne.n	800aa4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68da      	ldr	r2, [r3, #12]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 0220 	bic.w	r2, r2, #32
 800aa18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	695a      	ldr	r2, [r3, #20]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f022 0201 	bic.w	r2, r2, #1
 800aa38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7f8 fadc 	bl	8003000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e002      	b.n	800aa52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	e000      	b.n	800aa52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800aa50:	2302      	movs	r3, #2
  }
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	431a      	orrs	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800aa96:	f023 030c 	bic.w	r3, r3, #12
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6812      	ldr	r2, [r2, #0]
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	430b      	orrs	r3, r1
 800aaa2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	699a      	ldr	r2, [r3, #24]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	430a      	orrs	r2, r1
 800aab8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a52      	ldr	r2, [pc, #328]	; (800ac08 <UART_SetConfig+0x1ac>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d14e      	bne.n	800ab62 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800aac4:	f7fe fbb4 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800aac8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	4613      	mov	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	009a      	lsls	r2, r3, #2
 800aad4:	441a      	add	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae0:	4a4a      	ldr	r2, [pc, #296]	; (800ac0c <UART_SetConfig+0x1b0>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	095b      	lsrs	r3, r3, #5
 800aae8:	0119      	lsls	r1, r3, #4
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009a      	lsls	r2, r3, #2
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab00:	4b42      	ldr	r3, [pc, #264]	; (800ac0c <UART_SetConfig+0x1b0>)
 800ab02:	fba3 0302 	umull	r0, r3, r3, r2
 800ab06:	095b      	lsrs	r3, r3, #5
 800ab08:	2064      	movs	r0, #100	; 0x64
 800ab0a:	fb00 f303 	mul.w	r3, r0, r3
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	011b      	lsls	r3, r3, #4
 800ab12:	3332      	adds	r3, #50	; 0x32
 800ab14:	4a3d      	ldr	r2, [pc, #244]	; (800ac0c <UART_SetConfig+0x1b0>)
 800ab16:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1a:	095b      	lsrs	r3, r3, #5
 800ab1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab20:	4419      	add	r1, r3
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009a      	lsls	r2, r3, #2
 800ab2c:	441a      	add	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab38:	4b34      	ldr	r3, [pc, #208]	; (800ac0c <UART_SetConfig+0x1b0>)
 800ab3a:	fba3 0302 	umull	r0, r3, r3, r2
 800ab3e:	095b      	lsrs	r3, r3, #5
 800ab40:	2064      	movs	r0, #100	; 0x64
 800ab42:	fb00 f303 	mul.w	r3, r0, r3
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	011b      	lsls	r3, r3, #4
 800ab4a:	3332      	adds	r3, #50	; 0x32
 800ab4c:	4a2f      	ldr	r2, [pc, #188]	; (800ac0c <UART_SetConfig+0x1b0>)
 800ab4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab52:	095b      	lsrs	r3, r3, #5
 800ab54:	f003 020f 	and.w	r2, r3, #15
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	440a      	add	r2, r1
 800ab5e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800ab60:	e04d      	b.n	800abfe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800ab62:	f7fe fb51 	bl	8009208 <HAL_RCC_GetPCLK1Freq>
 800ab66:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	009a      	lsls	r2, r3, #2
 800ab72:	441a      	add	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7e:	4a23      	ldr	r2, [pc, #140]	; (800ac0c <UART_SetConfig+0x1b0>)
 800ab80:	fba2 2303 	umull	r2, r3, r2, r3
 800ab84:	095b      	lsrs	r3, r3, #5
 800ab86:	0119      	lsls	r1, r3, #4
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009a      	lsls	r2, r3, #2
 800ab92:	441a      	add	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab9e:	4b1b      	ldr	r3, [pc, #108]	; (800ac0c <UART_SetConfig+0x1b0>)
 800aba0:	fba3 0302 	umull	r0, r3, r3, r2
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	2064      	movs	r0, #100	; 0x64
 800aba8:	fb00 f303 	mul.w	r3, r0, r3
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	3332      	adds	r3, #50	; 0x32
 800abb2:	4a16      	ldr	r2, [pc, #88]	; (800ac0c <UART_SetConfig+0x1b0>)
 800abb4:	fba2 2303 	umull	r2, r3, r2, r3
 800abb8:	095b      	lsrs	r3, r3, #5
 800abba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abbe:	4419      	add	r1, r3
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009a      	lsls	r2, r3, #2
 800abca:	441a      	add	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	fbb2 f2f3 	udiv	r2, r2, r3
 800abd6:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <UART_SetConfig+0x1b0>)
 800abd8:	fba3 0302 	umull	r0, r3, r3, r2
 800abdc:	095b      	lsrs	r3, r3, #5
 800abde:	2064      	movs	r0, #100	; 0x64
 800abe0:	fb00 f303 	mul.w	r3, r0, r3
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	3332      	adds	r3, #50	; 0x32
 800abea:	4a08      	ldr	r2, [pc, #32]	; (800ac0c <UART_SetConfig+0x1b0>)
 800abec:	fba2 2303 	umull	r2, r3, r2, r3
 800abf0:	095b      	lsrs	r3, r3, #5
 800abf2:	f003 020f 	and.w	r2, r3, #15
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	440a      	add	r2, r1
 800abfc:	609a      	str	r2, [r3, #8]
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	40013800 	.word	0x40013800
 800ac0c:	51eb851f 	.word	0x51eb851f

0800ac10 <atof>:
 800ac10:	2100      	movs	r1, #0
 800ac12:	f000 bfb9 	b.w	800bb88 <strtod>

0800ac16 <atoi>:
 800ac16:	220a      	movs	r2, #10
 800ac18:	2100      	movs	r1, #0
 800ac1a:	f001 b843 	b.w	800bca4 <strtol>
	...

0800ac20 <gcvt>:
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	461c      	mov	r4, r3
 800ac24:	b085      	sub	sp, #20
 800ac26:	2300      	movs	r3, #0
 800ac28:	4615      	mov	r5, r2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	f7f5 fec4 	bl	80009bc <__aeabi_dcmplt>
 800ac34:	4623      	mov	r3, r4
 800ac36:	b118      	cbz	r0, 800ac40 <gcvt+0x20>
 800ac38:	222d      	movs	r2, #45	; 0x2d
 800ac3a:	3d01      	subs	r5, #1
 800ac3c:	f803 2b01 	strb.w	r2, [r3], #1
 800ac40:	2267      	movs	r2, #103	; 0x67
 800ac42:	2100      	movs	r1, #0
 800ac44:	e9cd 5300 	strd	r5, r3, [sp]
 800ac48:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ac4c:	4905      	ldr	r1, [pc, #20]	; (800ac64 <gcvt+0x44>)
 800ac4e:	4632      	mov	r2, r6
 800ac50:	463b      	mov	r3, r7
 800ac52:	6808      	ldr	r0, [r1, #0]
 800ac54:	f001 f8b0 	bl	800bdb8 <_gcvt>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	bf14      	ite	ne
 800ac5c:	4620      	movne	r0, r4
 800ac5e:	2000      	moveq	r0, #0
 800ac60:	b005      	add	sp, #20
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	20000070 	.word	0x20000070

0800ac68 <__errno>:
 800ac68:	4b01      	ldr	r3, [pc, #4]	; (800ac70 <__errno+0x8>)
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20000070 	.word	0x20000070

0800ac74 <__libc_init_array>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	2500      	movs	r5, #0
 800ac78:	4e0c      	ldr	r6, [pc, #48]	; (800acac <__libc_init_array+0x38>)
 800ac7a:	4c0d      	ldr	r4, [pc, #52]	; (800acb0 <__libc_init_array+0x3c>)
 800ac7c:	1ba4      	subs	r4, r4, r6
 800ac7e:	10a4      	asrs	r4, r4, #2
 800ac80:	42a5      	cmp	r5, r4
 800ac82:	d109      	bne.n	800ac98 <__libc_init_array+0x24>
 800ac84:	f003 ff22 	bl	800eacc <_init>
 800ac88:	2500      	movs	r5, #0
 800ac8a:	4e0a      	ldr	r6, [pc, #40]	; (800acb4 <__libc_init_array+0x40>)
 800ac8c:	4c0a      	ldr	r4, [pc, #40]	; (800acb8 <__libc_init_array+0x44>)
 800ac8e:	1ba4      	subs	r4, r4, r6
 800ac90:	10a4      	asrs	r4, r4, #2
 800ac92:	42a5      	cmp	r5, r4
 800ac94:	d105      	bne.n	800aca2 <__libc_init_array+0x2e>
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac9c:	4798      	blx	r3
 800ac9e:	3501      	adds	r5, #1
 800aca0:	e7ee      	b.n	800ac80 <__libc_init_array+0xc>
 800aca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aca6:	4798      	blx	r3
 800aca8:	3501      	adds	r5, #1
 800acaa:	e7f2      	b.n	800ac92 <__libc_init_array+0x1e>
 800acac:	0800f9c0 	.word	0x0800f9c0
 800acb0:	0800f9c0 	.word	0x0800f9c0
 800acb4:	0800f9c0 	.word	0x0800f9c0
 800acb8:	0800f9c4 	.word	0x0800f9c4

0800acbc <malloc>:
 800acbc:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <malloc+0xc>)
 800acbe:	4601      	mov	r1, r0
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	f000 b85f 	b.w	800ad84 <_malloc_r>
 800acc6:	bf00      	nop
 800acc8:	20000070 	.word	0x20000070

0800accc <free>:
 800accc:	4b02      	ldr	r3, [pc, #8]	; (800acd8 <free+0xc>)
 800acce:	4601      	mov	r1, r0
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	f000 b80b 	b.w	800acec <_free_r>
 800acd6:	bf00      	nop
 800acd8:	20000070 	.word	0x20000070

0800acdc <memset>:
 800acdc:	4603      	mov	r3, r0
 800acde:	4402      	add	r2, r0
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d100      	bne.n	800ace6 <memset+0xa>
 800ace4:	4770      	bx	lr
 800ace6:	f803 1b01 	strb.w	r1, [r3], #1
 800acea:	e7f9      	b.n	800ace0 <memset+0x4>

0800acec <_free_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4605      	mov	r5, r0
 800acf0:	2900      	cmp	r1, #0
 800acf2:	d043      	beq.n	800ad7c <_free_r+0x90>
 800acf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf8:	1f0c      	subs	r4, r1, #4
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bfb8      	it	lt
 800acfe:	18e4      	addlt	r4, r4, r3
 800ad00:	f001 fd3c 	bl	800c77c <__malloc_lock>
 800ad04:	4a1e      	ldr	r2, [pc, #120]	; (800ad80 <_free_r+0x94>)
 800ad06:	6813      	ldr	r3, [r2, #0]
 800ad08:	4610      	mov	r0, r2
 800ad0a:	b933      	cbnz	r3, 800ad1a <_free_r+0x2e>
 800ad0c:	6063      	str	r3, [r4, #4]
 800ad0e:	6014      	str	r4, [r2, #0]
 800ad10:	4628      	mov	r0, r5
 800ad12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad16:	f001 bd32 	b.w	800c77e <__malloc_unlock>
 800ad1a:	42a3      	cmp	r3, r4
 800ad1c:	d90b      	bls.n	800ad36 <_free_r+0x4a>
 800ad1e:	6821      	ldr	r1, [r4, #0]
 800ad20:	1862      	adds	r2, r4, r1
 800ad22:	4293      	cmp	r3, r2
 800ad24:	bf01      	itttt	eq
 800ad26:	681a      	ldreq	r2, [r3, #0]
 800ad28:	685b      	ldreq	r3, [r3, #4]
 800ad2a:	1852      	addeq	r2, r2, r1
 800ad2c:	6022      	streq	r2, [r4, #0]
 800ad2e:	6063      	str	r3, [r4, #4]
 800ad30:	6004      	str	r4, [r0, #0]
 800ad32:	e7ed      	b.n	800ad10 <_free_r+0x24>
 800ad34:	4613      	mov	r3, r2
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	b10a      	cbz	r2, 800ad3e <_free_r+0x52>
 800ad3a:	42a2      	cmp	r2, r4
 800ad3c:	d9fa      	bls.n	800ad34 <_free_r+0x48>
 800ad3e:	6819      	ldr	r1, [r3, #0]
 800ad40:	1858      	adds	r0, r3, r1
 800ad42:	42a0      	cmp	r0, r4
 800ad44:	d10b      	bne.n	800ad5e <_free_r+0x72>
 800ad46:	6820      	ldr	r0, [r4, #0]
 800ad48:	4401      	add	r1, r0
 800ad4a:	1858      	adds	r0, r3, r1
 800ad4c:	4282      	cmp	r2, r0
 800ad4e:	6019      	str	r1, [r3, #0]
 800ad50:	d1de      	bne.n	800ad10 <_free_r+0x24>
 800ad52:	6810      	ldr	r0, [r2, #0]
 800ad54:	6852      	ldr	r2, [r2, #4]
 800ad56:	4401      	add	r1, r0
 800ad58:	6019      	str	r1, [r3, #0]
 800ad5a:	605a      	str	r2, [r3, #4]
 800ad5c:	e7d8      	b.n	800ad10 <_free_r+0x24>
 800ad5e:	d902      	bls.n	800ad66 <_free_r+0x7a>
 800ad60:	230c      	movs	r3, #12
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	e7d4      	b.n	800ad10 <_free_r+0x24>
 800ad66:	6820      	ldr	r0, [r4, #0]
 800ad68:	1821      	adds	r1, r4, r0
 800ad6a:	428a      	cmp	r2, r1
 800ad6c:	bf01      	itttt	eq
 800ad6e:	6811      	ldreq	r1, [r2, #0]
 800ad70:	6852      	ldreq	r2, [r2, #4]
 800ad72:	1809      	addeq	r1, r1, r0
 800ad74:	6021      	streq	r1, [r4, #0]
 800ad76:	6062      	str	r2, [r4, #4]
 800ad78:	605c      	str	r4, [r3, #4]
 800ad7a:	e7c9      	b.n	800ad10 <_free_r+0x24>
 800ad7c:	bd38      	pop	{r3, r4, r5, pc}
 800ad7e:	bf00      	nop
 800ad80:	200006e4 	.word	0x200006e4

0800ad84 <_malloc_r>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	1ccd      	adds	r5, r1, #3
 800ad88:	f025 0503 	bic.w	r5, r5, #3
 800ad8c:	3508      	adds	r5, #8
 800ad8e:	2d0c      	cmp	r5, #12
 800ad90:	bf38      	it	cc
 800ad92:	250c      	movcc	r5, #12
 800ad94:	2d00      	cmp	r5, #0
 800ad96:	4606      	mov	r6, r0
 800ad98:	db01      	blt.n	800ad9e <_malloc_r+0x1a>
 800ad9a:	42a9      	cmp	r1, r5
 800ad9c:	d903      	bls.n	800ada6 <_malloc_r+0x22>
 800ad9e:	230c      	movs	r3, #12
 800ada0:	6033      	str	r3, [r6, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
 800ada6:	f001 fce9 	bl	800c77c <__malloc_lock>
 800adaa:	4a21      	ldr	r2, [pc, #132]	; (800ae30 <_malloc_r+0xac>)
 800adac:	6814      	ldr	r4, [r2, #0]
 800adae:	4621      	mov	r1, r4
 800adb0:	b991      	cbnz	r1, 800add8 <_malloc_r+0x54>
 800adb2:	4c20      	ldr	r4, [pc, #128]	; (800ae34 <_malloc_r+0xb0>)
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	b91b      	cbnz	r3, 800adc0 <_malloc_r+0x3c>
 800adb8:	4630      	mov	r0, r6
 800adba:	f000 f855 	bl	800ae68 <_sbrk_r>
 800adbe:	6020      	str	r0, [r4, #0]
 800adc0:	4629      	mov	r1, r5
 800adc2:	4630      	mov	r0, r6
 800adc4:	f000 f850 	bl	800ae68 <_sbrk_r>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d124      	bne.n	800ae16 <_malloc_r+0x92>
 800adcc:	230c      	movs	r3, #12
 800adce:	4630      	mov	r0, r6
 800add0:	6033      	str	r3, [r6, #0]
 800add2:	f001 fcd4 	bl	800c77e <__malloc_unlock>
 800add6:	e7e4      	b.n	800ada2 <_malloc_r+0x1e>
 800add8:	680b      	ldr	r3, [r1, #0]
 800adda:	1b5b      	subs	r3, r3, r5
 800addc:	d418      	bmi.n	800ae10 <_malloc_r+0x8c>
 800adde:	2b0b      	cmp	r3, #11
 800ade0:	d90f      	bls.n	800ae02 <_malloc_r+0x7e>
 800ade2:	600b      	str	r3, [r1, #0]
 800ade4:	18cc      	adds	r4, r1, r3
 800ade6:	50cd      	str	r5, [r1, r3]
 800ade8:	4630      	mov	r0, r6
 800adea:	f001 fcc8 	bl	800c77e <__malloc_unlock>
 800adee:	f104 000b 	add.w	r0, r4, #11
 800adf2:	1d23      	adds	r3, r4, #4
 800adf4:	f020 0007 	bic.w	r0, r0, #7
 800adf8:	1ac3      	subs	r3, r0, r3
 800adfa:	d0d3      	beq.n	800ada4 <_malloc_r+0x20>
 800adfc:	425a      	negs	r2, r3
 800adfe:	50e2      	str	r2, [r4, r3]
 800ae00:	e7d0      	b.n	800ada4 <_malloc_r+0x20>
 800ae02:	684b      	ldr	r3, [r1, #4]
 800ae04:	428c      	cmp	r4, r1
 800ae06:	bf16      	itet	ne
 800ae08:	6063      	strne	r3, [r4, #4]
 800ae0a:	6013      	streq	r3, [r2, #0]
 800ae0c:	460c      	movne	r4, r1
 800ae0e:	e7eb      	b.n	800ade8 <_malloc_r+0x64>
 800ae10:	460c      	mov	r4, r1
 800ae12:	6849      	ldr	r1, [r1, #4]
 800ae14:	e7cc      	b.n	800adb0 <_malloc_r+0x2c>
 800ae16:	1cc4      	adds	r4, r0, #3
 800ae18:	f024 0403 	bic.w	r4, r4, #3
 800ae1c:	42a0      	cmp	r0, r4
 800ae1e:	d005      	beq.n	800ae2c <_malloc_r+0xa8>
 800ae20:	1a21      	subs	r1, r4, r0
 800ae22:	4630      	mov	r0, r6
 800ae24:	f000 f820 	bl	800ae68 <_sbrk_r>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d0cf      	beq.n	800adcc <_malloc_r+0x48>
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	e7db      	b.n	800ade8 <_malloc_r+0x64>
 800ae30:	200006e4 	.word	0x200006e4
 800ae34:	200006e8 	.word	0x200006e8

0800ae38 <iprintf>:
 800ae38:	b40f      	push	{r0, r1, r2, r3}
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <iprintf+0x2c>)
 800ae3c:	b513      	push	{r0, r1, r4, lr}
 800ae3e:	681c      	ldr	r4, [r3, #0]
 800ae40:	b124      	cbz	r4, 800ae4c <iprintf+0x14>
 800ae42:	69a3      	ldr	r3, [r4, #24]
 800ae44:	b913      	cbnz	r3, 800ae4c <iprintf+0x14>
 800ae46:	4620      	mov	r0, r4
 800ae48:	f001 f8c4 	bl	800bfd4 <__sinit>
 800ae4c:	ab05      	add	r3, sp, #20
 800ae4e:	9a04      	ldr	r2, [sp, #16]
 800ae50:	68a1      	ldr	r1, [r4, #8]
 800ae52:	4620      	mov	r0, r4
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	f002 fa57 	bl	800d308 <_vfiprintf_r>
 800ae5a:	b002      	add	sp, #8
 800ae5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae60:	b004      	add	sp, #16
 800ae62:	4770      	bx	lr
 800ae64:	20000070 	.word	0x20000070

0800ae68 <_sbrk_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4c05      	ldr	r4, [pc, #20]	; (800ae84 <_sbrk_r+0x1c>)
 800ae6e:	4605      	mov	r5, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	f7fb fb34 	bl	80064e0 <_sbrk>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_sbrk_r+0x1a>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_sbrk_r+0x1a>
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20000bac 	.word	0x20000bac

0800ae88 <siprintf>:
 800ae88:	b40e      	push	{r1, r2, r3}
 800ae8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae8e:	b500      	push	{lr}
 800ae90:	b09c      	sub	sp, #112	; 0x70
 800ae92:	ab1d      	add	r3, sp, #116	; 0x74
 800ae94:	9002      	str	r0, [sp, #8]
 800ae96:	9006      	str	r0, [sp, #24]
 800ae98:	9107      	str	r1, [sp, #28]
 800ae9a:	9104      	str	r1, [sp, #16]
 800ae9c:	4808      	ldr	r0, [pc, #32]	; (800aec0 <siprintf+0x38>)
 800ae9e:	4909      	ldr	r1, [pc, #36]	; (800aec4 <siprintf+0x3c>)
 800aea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea4:	9105      	str	r1, [sp, #20]
 800aea6:	6800      	ldr	r0, [r0, #0]
 800aea8:	a902      	add	r1, sp, #8
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	f002 f90c 	bl	800d0c8 <_svfiprintf_r>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	9b02      	ldr	r3, [sp, #8]
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	b01c      	add	sp, #112	; 0x70
 800aeb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aebc:	b003      	add	sp, #12
 800aebe:	4770      	bx	lr
 800aec0:	20000070 	.word	0x20000070
 800aec4:	ffff0208 	.word	0xffff0208

0800aec8 <strcat>:
 800aec8:	4603      	mov	r3, r0
 800aeca:	b510      	push	{r4, lr}
 800aecc:	781a      	ldrb	r2, [r3, #0]
 800aece:	1c5c      	adds	r4, r3, #1
 800aed0:	b93a      	cbnz	r2, 800aee2 <strcat+0x1a>
 800aed2:	3b01      	subs	r3, #1
 800aed4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aed8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aedc:	2a00      	cmp	r2, #0
 800aede:	d1f9      	bne.n	800aed4 <strcat+0xc>
 800aee0:	bd10      	pop	{r4, pc}
 800aee2:	4623      	mov	r3, r4
 800aee4:	e7f2      	b.n	800aecc <strcat+0x4>

0800aee6 <strchr>:
 800aee6:	b2c9      	uxtb	r1, r1
 800aee8:	4603      	mov	r3, r0
 800aeea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeee:	b11a      	cbz	r2, 800aef8 <strchr+0x12>
 800aef0:	428a      	cmp	r2, r1
 800aef2:	d1f9      	bne.n	800aee8 <strchr+0x2>
 800aef4:	4618      	mov	r0, r3
 800aef6:	4770      	bx	lr
 800aef8:	2900      	cmp	r1, #0
 800aefa:	bf18      	it	ne
 800aefc:	2300      	movne	r3, #0
 800aefe:	e7f9      	b.n	800aef4 <strchr+0xe>

0800af00 <strcpy>:
 800af00:	4603      	mov	r3, r0
 800af02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af06:	f803 2b01 	strb.w	r2, [r3], #1
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	d1f9      	bne.n	800af02 <strcpy+0x2>
 800af0e:	4770      	bx	lr

0800af10 <strstr>:
 800af10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af12:	7803      	ldrb	r3, [r0, #0]
 800af14:	b17b      	cbz	r3, 800af36 <strstr+0x26>
 800af16:	4604      	mov	r4, r0
 800af18:	7823      	ldrb	r3, [r4, #0]
 800af1a:	4620      	mov	r0, r4
 800af1c:	1c66      	adds	r6, r4, #1
 800af1e:	b17b      	cbz	r3, 800af40 <strstr+0x30>
 800af20:	1e4a      	subs	r2, r1, #1
 800af22:	1e63      	subs	r3, r4, #1
 800af24:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800af28:	b14d      	cbz	r5, 800af3e <strstr+0x2e>
 800af2a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800af2e:	4634      	mov	r4, r6
 800af30:	42af      	cmp	r7, r5
 800af32:	d0f7      	beq.n	800af24 <strstr+0x14>
 800af34:	e7f0      	b.n	800af18 <strstr+0x8>
 800af36:	780b      	ldrb	r3, [r1, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bf18      	it	ne
 800af3c:	2000      	movne	r0, #0
 800af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af40:	4618      	mov	r0, r3
 800af42:	e7fc      	b.n	800af3e <strstr+0x2e>

0800af44 <sulp>:
 800af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af48:	460f      	mov	r7, r1
 800af4a:	4690      	mov	r8, r2
 800af4c:	f001 fee2 	bl	800cd14 <__ulp>
 800af50:	4604      	mov	r4, r0
 800af52:	460d      	mov	r5, r1
 800af54:	f1b8 0f00 	cmp.w	r8, #0
 800af58:	d011      	beq.n	800af7e <sulp+0x3a>
 800af5a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800af5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af62:	2b00      	cmp	r3, #0
 800af64:	dd0b      	ble.n	800af7e <sulp+0x3a>
 800af66:	2400      	movs	r4, #0
 800af68:	051b      	lsls	r3, r3, #20
 800af6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800af6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	f7f5 faaf 	bl	80004d8 <__aeabi_dmul>
 800af7a:	4604      	mov	r4, r0
 800af7c:	460d      	mov	r5, r1
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800af88 <_strtod_l>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	461f      	mov	r7, r3
 800af8e:	2300      	movs	r3, #0
 800af90:	b0a1      	sub	sp, #132	; 0x84
 800af92:	4683      	mov	fp, r0
 800af94:	4638      	mov	r0, r7
 800af96:	460e      	mov	r6, r1
 800af98:	9217      	str	r2, [sp, #92]	; 0x5c
 800af9a:	931c      	str	r3, [sp, #112]	; 0x70
 800af9c:	f001 fbcf 	bl	800c73e <__localeconv_l>
 800afa0:	4680      	mov	r8, r0
 800afa2:	6800      	ldr	r0, [r0, #0]
 800afa4:	f7f5 f8d4 	bl	8000150 <strlen>
 800afa8:	f04f 0900 	mov.w	r9, #0
 800afac:	4604      	mov	r4, r0
 800afae:	f04f 0a00 	mov.w	sl, #0
 800afb2:	961b      	str	r6, [sp, #108]	; 0x6c
 800afb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afb6:	781a      	ldrb	r2, [r3, #0]
 800afb8:	2a0d      	cmp	r2, #13
 800afba:	d832      	bhi.n	800b022 <_strtod_l+0x9a>
 800afbc:	2a09      	cmp	r2, #9
 800afbe:	d236      	bcs.n	800b02e <_strtod_l+0xa6>
 800afc0:	2a00      	cmp	r2, #0
 800afc2:	d03e      	beq.n	800b042 <_strtod_l+0xba>
 800afc4:	2300      	movs	r3, #0
 800afc6:	930d      	str	r3, [sp, #52]	; 0x34
 800afc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800afca:	782b      	ldrb	r3, [r5, #0]
 800afcc:	2b30      	cmp	r3, #48	; 0x30
 800afce:	f040 80ac 	bne.w	800b12a <_strtod_l+0x1a2>
 800afd2:	786b      	ldrb	r3, [r5, #1]
 800afd4:	2b58      	cmp	r3, #88	; 0x58
 800afd6:	d001      	beq.n	800afdc <_strtod_l+0x54>
 800afd8:	2b78      	cmp	r3, #120	; 0x78
 800afda:	d167      	bne.n	800b0ac <_strtod_l+0x124>
 800afdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afde:	9702      	str	r7, [sp, #8]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	ab1c      	add	r3, sp, #112	; 0x70
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	4a89      	ldr	r2, [pc, #548]	; (800b20c <_strtod_l+0x284>)
 800afe8:	ab1d      	add	r3, sp, #116	; 0x74
 800afea:	a91b      	add	r1, sp, #108	; 0x6c
 800afec:	4658      	mov	r0, fp
 800afee:	f001 f8cb 	bl	800c188 <__gethex>
 800aff2:	f010 0407 	ands.w	r4, r0, #7
 800aff6:	4606      	mov	r6, r0
 800aff8:	d005      	beq.n	800b006 <_strtod_l+0x7e>
 800affa:	2c06      	cmp	r4, #6
 800affc:	d12b      	bne.n	800b056 <_strtod_l+0xce>
 800affe:	2300      	movs	r3, #0
 800b000:	3501      	adds	r5, #1
 800b002:	951b      	str	r5, [sp, #108]	; 0x6c
 800b004:	930d      	str	r3, [sp, #52]	; 0x34
 800b006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f040 85a6 	bne.w	800bb5a <_strtod_l+0xbd2>
 800b00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b010:	b1e3      	cbz	r3, 800b04c <_strtod_l+0xc4>
 800b012:	464a      	mov	r2, r9
 800b014:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b018:	4610      	mov	r0, r2
 800b01a:	4619      	mov	r1, r3
 800b01c:	b021      	add	sp, #132	; 0x84
 800b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b022:	2a2b      	cmp	r2, #43	; 0x2b
 800b024:	d015      	beq.n	800b052 <_strtod_l+0xca>
 800b026:	2a2d      	cmp	r2, #45	; 0x2d
 800b028:	d004      	beq.n	800b034 <_strtod_l+0xac>
 800b02a:	2a20      	cmp	r2, #32
 800b02c:	d1ca      	bne.n	800afc4 <_strtod_l+0x3c>
 800b02e:	3301      	adds	r3, #1
 800b030:	931b      	str	r3, [sp, #108]	; 0x6c
 800b032:	e7bf      	b.n	800afb4 <_strtod_l+0x2c>
 800b034:	2201      	movs	r2, #1
 800b036:	920d      	str	r2, [sp, #52]	; 0x34
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1c2      	bne.n	800afc8 <_strtod_l+0x40>
 800b042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b044:	961b      	str	r6, [sp, #108]	; 0x6c
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 8585 	bne.w	800bb56 <_strtod_l+0xbce>
 800b04c:	464a      	mov	r2, r9
 800b04e:	4653      	mov	r3, sl
 800b050:	e7e2      	b.n	800b018 <_strtod_l+0x90>
 800b052:	2200      	movs	r2, #0
 800b054:	e7ef      	b.n	800b036 <_strtod_l+0xae>
 800b056:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b058:	b13a      	cbz	r2, 800b06a <_strtod_l+0xe2>
 800b05a:	2135      	movs	r1, #53	; 0x35
 800b05c:	a81e      	add	r0, sp, #120	; 0x78
 800b05e:	f001 ff69 	bl	800cf34 <__copybits>
 800b062:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b064:	4658      	mov	r0, fp
 800b066:	f001 fbbf 	bl	800c7e8 <_Bfree>
 800b06a:	3c01      	subs	r4, #1
 800b06c:	2c04      	cmp	r4, #4
 800b06e:	d806      	bhi.n	800b07e <_strtod_l+0xf6>
 800b070:	e8df f004 	tbb	[pc, r4]
 800b074:	1714030a 	.word	0x1714030a
 800b078:	0a          	.byte	0x0a
 800b079:	00          	.byte	0x00
 800b07a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800b07e:	0731      	lsls	r1, r6, #28
 800b080:	d5c1      	bpl.n	800b006 <_strtod_l+0x7e>
 800b082:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800b086:	e7be      	b.n	800b006 <_strtod_l+0x7e>
 800b088:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b08a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800b08e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b096:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800b09a:	e7f0      	b.n	800b07e <_strtod_l+0xf6>
 800b09c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800b210 <_strtod_l+0x288>
 800b0a0:	e7ed      	b.n	800b07e <_strtod_l+0xf6>
 800b0a2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800b0a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b0aa:	e7e8      	b.n	800b07e <_strtod_l+0xf6>
 800b0ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0b2:	785b      	ldrb	r3, [r3, #1]
 800b0b4:	2b30      	cmp	r3, #48	; 0x30
 800b0b6:	d0f9      	beq.n	800b0ac <_strtod_l+0x124>
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0a4      	beq.n	800b006 <_strtod_l+0x7e>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	2500      	movs	r5, #0
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	9307      	str	r3, [sp, #28]
 800b0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0c6:	9506      	str	r5, [sp, #24]
 800b0c8:	9308      	str	r3, [sp, #32]
 800b0ca:	9504      	str	r5, [sp, #16]
 800b0cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b0ce:	7807      	ldrb	r7, [r0, #0]
 800b0d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b0d4:	b2d9      	uxtb	r1, r3
 800b0d6:	2909      	cmp	r1, #9
 800b0d8:	d929      	bls.n	800b12e <_strtod_l+0x1a6>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	f8d8 1000 	ldr.w	r1, [r8]
 800b0e0:	f002 fbf3 	bl	800d8ca <strncmp>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d031      	beq.n	800b14c <_strtod_l+0x1c4>
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	9c04      	ldr	r4, [sp, #16]
 800b0f0:	9005      	str	r0, [sp, #20]
 800b0f2:	2b65      	cmp	r3, #101	; 0x65
 800b0f4:	d001      	beq.n	800b0fa <_strtod_l+0x172>
 800b0f6:	2b45      	cmp	r3, #69	; 0x45
 800b0f8:	d114      	bne.n	800b124 <_strtod_l+0x19c>
 800b0fa:	b924      	cbnz	r4, 800b106 <_strtod_l+0x17e>
 800b0fc:	b910      	cbnz	r0, 800b104 <_strtod_l+0x17c>
 800b0fe:	9b07      	ldr	r3, [sp, #28]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d09e      	beq.n	800b042 <_strtod_l+0xba>
 800b104:	2400      	movs	r4, #0
 800b106:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b108:	1c73      	adds	r3, r6, #1
 800b10a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b10c:	7873      	ldrb	r3, [r6, #1]
 800b10e:	2b2b      	cmp	r3, #43	; 0x2b
 800b110:	d078      	beq.n	800b204 <_strtod_l+0x27c>
 800b112:	2b2d      	cmp	r3, #45	; 0x2d
 800b114:	d070      	beq.n	800b1f8 <_strtod_l+0x270>
 800b116:	f04f 0c00 	mov.w	ip, #0
 800b11a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b11e:	2f09      	cmp	r7, #9
 800b120:	d97c      	bls.n	800b21c <_strtod_l+0x294>
 800b122:	961b      	str	r6, [sp, #108]	; 0x6c
 800b124:	f04f 0e00 	mov.w	lr, #0
 800b128:	e09a      	b.n	800b260 <_strtod_l+0x2d8>
 800b12a:	2300      	movs	r3, #0
 800b12c:	e7c7      	b.n	800b0be <_strtod_l+0x136>
 800b12e:	9904      	ldr	r1, [sp, #16]
 800b130:	3001      	adds	r0, #1
 800b132:	2908      	cmp	r1, #8
 800b134:	bfd7      	itett	le
 800b136:	9906      	ldrle	r1, [sp, #24]
 800b138:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b13c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b140:	9306      	strle	r3, [sp, #24]
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	901b      	str	r0, [sp, #108]	; 0x6c
 800b146:	3301      	adds	r3, #1
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	e7bf      	b.n	800b0cc <_strtod_l+0x144>
 800b14c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b14e:	191a      	adds	r2, r3, r4
 800b150:	921b      	str	r2, [sp, #108]	; 0x6c
 800b152:	9a04      	ldr	r2, [sp, #16]
 800b154:	5d1b      	ldrb	r3, [r3, r4]
 800b156:	2a00      	cmp	r2, #0
 800b158:	d037      	beq.n	800b1ca <_strtod_l+0x242>
 800b15a:	4602      	mov	r2, r0
 800b15c:	9c04      	ldr	r4, [sp, #16]
 800b15e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b162:	2909      	cmp	r1, #9
 800b164:	d913      	bls.n	800b18e <_strtod_l+0x206>
 800b166:	2101      	movs	r1, #1
 800b168:	9105      	str	r1, [sp, #20]
 800b16a:	e7c2      	b.n	800b0f2 <_strtod_l+0x16a>
 800b16c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b16e:	3001      	adds	r0, #1
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	921b      	str	r2, [sp, #108]	; 0x6c
 800b174:	785b      	ldrb	r3, [r3, #1]
 800b176:	2b30      	cmp	r3, #48	; 0x30
 800b178:	d0f8      	beq.n	800b16c <_strtod_l+0x1e4>
 800b17a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b17e:	2a08      	cmp	r2, #8
 800b180:	f200 84f0 	bhi.w	800bb64 <_strtod_l+0xbdc>
 800b184:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b186:	9208      	str	r2, [sp, #32]
 800b188:	4602      	mov	r2, r0
 800b18a:	2000      	movs	r0, #0
 800b18c:	4604      	mov	r4, r0
 800b18e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b192:	f100 0101 	add.w	r1, r0, #1
 800b196:	d012      	beq.n	800b1be <_strtod_l+0x236>
 800b198:	440a      	add	r2, r1
 800b19a:	270a      	movs	r7, #10
 800b19c:	4621      	mov	r1, r4
 800b19e:	eb00 0c04 	add.w	ip, r0, r4
 800b1a2:	458c      	cmp	ip, r1
 800b1a4:	d113      	bne.n	800b1ce <_strtod_l+0x246>
 800b1a6:	1821      	adds	r1, r4, r0
 800b1a8:	2908      	cmp	r1, #8
 800b1aa:	f104 0401 	add.w	r4, r4, #1
 800b1ae:	4404      	add	r4, r0
 800b1b0:	dc19      	bgt.n	800b1e6 <_strtod_l+0x25e>
 800b1b2:	210a      	movs	r1, #10
 800b1b4:	9b06      	ldr	r3, [sp, #24]
 800b1b6:	fb01 e303 	mla	r3, r1, r3, lr
 800b1ba:	9306      	str	r3, [sp, #24]
 800b1bc:	2100      	movs	r1, #0
 800b1be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1c0:	1c58      	adds	r0, r3, #1
 800b1c2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b1c4:	785b      	ldrb	r3, [r3, #1]
 800b1c6:	4608      	mov	r0, r1
 800b1c8:	e7c9      	b.n	800b15e <_strtod_l+0x1d6>
 800b1ca:	9804      	ldr	r0, [sp, #16]
 800b1cc:	e7d3      	b.n	800b176 <_strtod_l+0x1ee>
 800b1ce:	2908      	cmp	r1, #8
 800b1d0:	f101 0101 	add.w	r1, r1, #1
 800b1d4:	dc03      	bgt.n	800b1de <_strtod_l+0x256>
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	437b      	muls	r3, r7
 800b1da:	9306      	str	r3, [sp, #24]
 800b1dc:	e7e1      	b.n	800b1a2 <_strtod_l+0x21a>
 800b1de:	2910      	cmp	r1, #16
 800b1e0:	bfd8      	it	le
 800b1e2:	437d      	mulle	r5, r7
 800b1e4:	e7dd      	b.n	800b1a2 <_strtod_l+0x21a>
 800b1e6:	2c10      	cmp	r4, #16
 800b1e8:	bfdc      	itt	le
 800b1ea:	210a      	movle	r1, #10
 800b1ec:	fb01 e505 	mlale	r5, r1, r5, lr
 800b1f0:	e7e4      	b.n	800b1bc <_strtod_l+0x234>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	9305      	str	r3, [sp, #20]
 800b1f6:	e781      	b.n	800b0fc <_strtod_l+0x174>
 800b1f8:	f04f 0c01 	mov.w	ip, #1
 800b1fc:	1cb3      	adds	r3, r6, #2
 800b1fe:	931b      	str	r3, [sp, #108]	; 0x6c
 800b200:	78b3      	ldrb	r3, [r6, #2]
 800b202:	e78a      	b.n	800b11a <_strtod_l+0x192>
 800b204:	f04f 0c00 	mov.w	ip, #0
 800b208:	e7f8      	b.n	800b1fc <_strtod_l+0x274>
 800b20a:	bf00      	nop
 800b20c:	0800f6c0 	.word	0x0800f6c0
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b216:	1c5f      	adds	r7, r3, #1
 800b218:	971b      	str	r7, [sp, #108]	; 0x6c
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	2b30      	cmp	r3, #48	; 0x30
 800b21e:	d0f9      	beq.n	800b214 <_strtod_l+0x28c>
 800b220:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b224:	2f08      	cmp	r7, #8
 800b226:	f63f af7d 	bhi.w	800b124 <_strtod_l+0x19c>
 800b22a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b22e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b230:	9309      	str	r3, [sp, #36]	; 0x24
 800b232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b234:	1c5f      	adds	r7, r3, #1
 800b236:	971b      	str	r7, [sp, #108]	; 0x6c
 800b238:	785b      	ldrb	r3, [r3, #1]
 800b23a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b23e:	f1b8 0f09 	cmp.w	r8, #9
 800b242:	d937      	bls.n	800b2b4 <_strtod_l+0x32c>
 800b244:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b246:	1a7f      	subs	r7, r7, r1
 800b248:	2f08      	cmp	r7, #8
 800b24a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b24e:	dc37      	bgt.n	800b2c0 <_strtod_l+0x338>
 800b250:	45be      	cmp	lr, r7
 800b252:	bfa8      	it	ge
 800b254:	46be      	movge	lr, r7
 800b256:	f1bc 0f00 	cmp.w	ip, #0
 800b25a:	d001      	beq.n	800b260 <_strtod_l+0x2d8>
 800b25c:	f1ce 0e00 	rsb	lr, lr, #0
 800b260:	2c00      	cmp	r4, #0
 800b262:	d151      	bne.n	800b308 <_strtod_l+0x380>
 800b264:	2800      	cmp	r0, #0
 800b266:	f47f aece 	bne.w	800b006 <_strtod_l+0x7e>
 800b26a:	9a07      	ldr	r2, [sp, #28]
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	f47f aeca 	bne.w	800b006 <_strtod_l+0x7e>
 800b272:	9a05      	ldr	r2, [sp, #20]
 800b274:	2a00      	cmp	r2, #0
 800b276:	f47f aee4 	bne.w	800b042 <_strtod_l+0xba>
 800b27a:	2b4e      	cmp	r3, #78	; 0x4e
 800b27c:	d027      	beq.n	800b2ce <_strtod_l+0x346>
 800b27e:	dc21      	bgt.n	800b2c4 <_strtod_l+0x33c>
 800b280:	2b49      	cmp	r3, #73	; 0x49
 800b282:	f47f aede 	bne.w	800b042 <_strtod_l+0xba>
 800b286:	49a4      	ldr	r1, [pc, #656]	; (800b518 <_strtod_l+0x590>)
 800b288:	a81b      	add	r0, sp, #108	; 0x6c
 800b28a:	f001 f9b1 	bl	800c5f0 <__match>
 800b28e:	2800      	cmp	r0, #0
 800b290:	f43f aed7 	beq.w	800b042 <_strtod_l+0xba>
 800b294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b296:	49a1      	ldr	r1, [pc, #644]	; (800b51c <_strtod_l+0x594>)
 800b298:	3b01      	subs	r3, #1
 800b29a:	a81b      	add	r0, sp, #108	; 0x6c
 800b29c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b29e:	f001 f9a7 	bl	800c5f0 <__match>
 800b2a2:	b910      	cbnz	r0, 800b2aa <_strtod_l+0x322>
 800b2a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2aa:	f8df a284 	ldr.w	sl, [pc, #644]	; 800b530 <_strtod_l+0x5a8>
 800b2ae:	f04f 0900 	mov.w	r9, #0
 800b2b2:	e6a8      	b.n	800b006 <_strtod_l+0x7e>
 800b2b4:	210a      	movs	r1, #10
 800b2b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b2ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b2be:	e7b8      	b.n	800b232 <_strtod_l+0x2aa>
 800b2c0:	46be      	mov	lr, r7
 800b2c2:	e7c8      	b.n	800b256 <_strtod_l+0x2ce>
 800b2c4:	2b69      	cmp	r3, #105	; 0x69
 800b2c6:	d0de      	beq.n	800b286 <_strtod_l+0x2fe>
 800b2c8:	2b6e      	cmp	r3, #110	; 0x6e
 800b2ca:	f47f aeba 	bne.w	800b042 <_strtod_l+0xba>
 800b2ce:	4994      	ldr	r1, [pc, #592]	; (800b520 <_strtod_l+0x598>)
 800b2d0:	a81b      	add	r0, sp, #108	; 0x6c
 800b2d2:	f001 f98d 	bl	800c5f0 <__match>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f aeb3 	beq.w	800b042 <_strtod_l+0xba>
 800b2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b28      	cmp	r3, #40	; 0x28
 800b2e2:	d10e      	bne.n	800b302 <_strtod_l+0x37a>
 800b2e4:	aa1e      	add	r2, sp, #120	; 0x78
 800b2e6:	498f      	ldr	r1, [pc, #572]	; (800b524 <_strtod_l+0x59c>)
 800b2e8:	a81b      	add	r0, sp, #108	; 0x6c
 800b2ea:	f001 f995 	bl	800c618 <__hexnan>
 800b2ee:	2805      	cmp	r0, #5
 800b2f0:	d107      	bne.n	800b302 <_strtod_l+0x37a>
 800b2f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b2f4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800b2f8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800b2fc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800b300:	e681      	b.n	800b006 <_strtod_l+0x7e>
 800b302:	f8df a234 	ldr.w	sl, [pc, #564]	; 800b538 <_strtod_l+0x5b0>
 800b306:	e7d2      	b.n	800b2ae <_strtod_l+0x326>
 800b308:	ebae 0302 	sub.w	r3, lr, r2
 800b30c:	9307      	str	r3, [sp, #28]
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	9806      	ldr	r0, [sp, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	bf08      	it	eq
 800b316:	4623      	moveq	r3, r4
 800b318:	2c10      	cmp	r4, #16
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	46a0      	mov	r8, r4
 800b31e:	bfa8      	it	ge
 800b320:	f04f 0810 	movge.w	r8, #16
 800b324:	f7f5 f85e 	bl	80003e4 <__aeabi_ui2d>
 800b328:	2c09      	cmp	r4, #9
 800b32a:	4681      	mov	r9, r0
 800b32c:	468a      	mov	sl, r1
 800b32e:	dc13      	bgt.n	800b358 <_strtod_l+0x3d0>
 800b330:	9b07      	ldr	r3, [sp, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	f43f ae67 	beq.w	800b006 <_strtod_l+0x7e>
 800b338:	9b07      	ldr	r3, [sp, #28]
 800b33a:	dd7e      	ble.n	800b43a <_strtod_l+0x4b2>
 800b33c:	2b16      	cmp	r3, #22
 800b33e:	dc65      	bgt.n	800b40c <_strtod_l+0x484>
 800b340:	4a79      	ldr	r2, [pc, #484]	; (800b528 <_strtod_l+0x5a0>)
 800b342:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b346:	464a      	mov	r2, r9
 800b348:	e9de 0100 	ldrd	r0, r1, [lr]
 800b34c:	4653      	mov	r3, sl
 800b34e:	f7f5 f8c3 	bl	80004d8 <__aeabi_dmul>
 800b352:	4681      	mov	r9, r0
 800b354:	468a      	mov	sl, r1
 800b356:	e656      	b.n	800b006 <_strtod_l+0x7e>
 800b358:	4b73      	ldr	r3, [pc, #460]	; (800b528 <_strtod_l+0x5a0>)
 800b35a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b35e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b362:	f7f5 f8b9 	bl	80004d8 <__aeabi_dmul>
 800b366:	4606      	mov	r6, r0
 800b368:	4628      	mov	r0, r5
 800b36a:	460f      	mov	r7, r1
 800b36c:	f7f5 f83a 	bl	80003e4 <__aeabi_ui2d>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f4 fef8 	bl	800016c <__adddf3>
 800b37c:	2c0f      	cmp	r4, #15
 800b37e:	4681      	mov	r9, r0
 800b380:	468a      	mov	sl, r1
 800b382:	ddd5      	ble.n	800b330 <_strtod_l+0x3a8>
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	eba4 0808 	sub.w	r8, r4, r8
 800b38a:	4498      	add	r8, r3
 800b38c:	f1b8 0f00 	cmp.w	r8, #0
 800b390:	f340 809a 	ble.w	800b4c8 <_strtod_l+0x540>
 800b394:	f018 030f 	ands.w	r3, r8, #15
 800b398:	d00a      	beq.n	800b3b0 <_strtod_l+0x428>
 800b39a:	4963      	ldr	r1, [pc, #396]	; (800b528 <_strtod_l+0x5a0>)
 800b39c:	464a      	mov	r2, r9
 800b39e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3a6:	4653      	mov	r3, sl
 800b3a8:	f7f5 f896 	bl	80004d8 <__aeabi_dmul>
 800b3ac:	4681      	mov	r9, r0
 800b3ae:	468a      	mov	sl, r1
 800b3b0:	f038 080f 	bics.w	r8, r8, #15
 800b3b4:	d077      	beq.n	800b4a6 <_strtod_l+0x51e>
 800b3b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b3ba:	dd4b      	ble.n	800b454 <_strtod_l+0x4cc>
 800b3bc:	f04f 0800 	mov.w	r8, #0
 800b3c0:	f8cd 8010 	str.w	r8, [sp, #16]
 800b3c4:	f8cd 8020 	str.w	r8, [sp, #32]
 800b3c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3cc:	2322      	movs	r3, #34	; 0x22
 800b3ce:	f04f 0900 	mov.w	r9, #0
 800b3d2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800b530 <_strtod_l+0x5a8>
 800b3d6:	f8cb 3000 	str.w	r3, [fp]
 800b3da:	9b08      	ldr	r3, [sp, #32]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f43f ae12 	beq.w	800b006 <_strtod_l+0x7e>
 800b3e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3e4:	4658      	mov	r0, fp
 800b3e6:	f001 f9ff 	bl	800c7e8 <_Bfree>
 800b3ea:	9906      	ldr	r1, [sp, #24]
 800b3ec:	4658      	mov	r0, fp
 800b3ee:	f001 f9fb 	bl	800c7e8 <_Bfree>
 800b3f2:	9904      	ldr	r1, [sp, #16]
 800b3f4:	4658      	mov	r0, fp
 800b3f6:	f001 f9f7 	bl	800c7e8 <_Bfree>
 800b3fa:	9908      	ldr	r1, [sp, #32]
 800b3fc:	4658      	mov	r0, fp
 800b3fe:	f001 f9f3 	bl	800c7e8 <_Bfree>
 800b402:	4641      	mov	r1, r8
 800b404:	4658      	mov	r0, fp
 800b406:	f001 f9ef 	bl	800c7e8 <_Bfree>
 800b40a:	e5fc      	b.n	800b006 <_strtod_l+0x7e>
 800b40c:	9a07      	ldr	r2, [sp, #28]
 800b40e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b412:	4293      	cmp	r3, r2
 800b414:	dbb6      	blt.n	800b384 <_strtod_l+0x3fc>
 800b416:	4d44      	ldr	r5, [pc, #272]	; (800b528 <_strtod_l+0x5a0>)
 800b418:	f1c4 040f 	rsb	r4, r4, #15
 800b41c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b420:	464a      	mov	r2, r9
 800b422:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b426:	4653      	mov	r3, sl
 800b428:	f7f5 f856 	bl	80004d8 <__aeabi_dmul>
 800b42c:	9b07      	ldr	r3, [sp, #28]
 800b42e:	1b1c      	subs	r4, r3, r4
 800b430:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b434:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b438:	e789      	b.n	800b34e <_strtod_l+0x3c6>
 800b43a:	f113 0f16 	cmn.w	r3, #22
 800b43e:	dba1      	blt.n	800b384 <_strtod_l+0x3fc>
 800b440:	4a39      	ldr	r2, [pc, #228]	; (800b528 <_strtod_l+0x5a0>)
 800b442:	4648      	mov	r0, r9
 800b444:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b448:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b44c:	4651      	mov	r1, sl
 800b44e:	f7f5 f96d 	bl	800072c <__aeabi_ddiv>
 800b452:	e77e      	b.n	800b352 <_strtod_l+0x3ca>
 800b454:	2300      	movs	r3, #0
 800b456:	4648      	mov	r0, r9
 800b458:	4651      	mov	r1, sl
 800b45a:	461d      	mov	r5, r3
 800b45c:	4e33      	ldr	r6, [pc, #204]	; (800b52c <_strtod_l+0x5a4>)
 800b45e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b462:	f1b8 0f01 	cmp.w	r8, #1
 800b466:	dc21      	bgt.n	800b4ac <_strtod_l+0x524>
 800b468:	b10b      	cbz	r3, 800b46e <_strtod_l+0x4e6>
 800b46a:	4681      	mov	r9, r0
 800b46c:	468a      	mov	sl, r1
 800b46e:	4b2f      	ldr	r3, [pc, #188]	; (800b52c <_strtod_l+0x5a4>)
 800b470:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800b474:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b478:	464a      	mov	r2, r9
 800b47a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b47e:	4653      	mov	r3, sl
 800b480:	f7f5 f82a 	bl	80004d8 <__aeabi_dmul>
 800b484:	4b2a      	ldr	r3, [pc, #168]	; (800b530 <_strtod_l+0x5a8>)
 800b486:	460a      	mov	r2, r1
 800b488:	400b      	ands	r3, r1
 800b48a:	492a      	ldr	r1, [pc, #168]	; (800b534 <_strtod_l+0x5ac>)
 800b48c:	4681      	mov	r9, r0
 800b48e:	428b      	cmp	r3, r1
 800b490:	d894      	bhi.n	800b3bc <_strtod_l+0x434>
 800b492:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b496:	428b      	cmp	r3, r1
 800b498:	bf86      	itte	hi
 800b49a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800b49e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800b53c <_strtod_l+0x5b4>
 800b4a2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	e07b      	b.n	800b5a4 <_strtod_l+0x61c>
 800b4ac:	f018 0f01 	tst.w	r8, #1
 800b4b0:	d006      	beq.n	800b4c0 <_strtod_l+0x538>
 800b4b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7f5 f80d 	bl	80004d8 <__aeabi_dmul>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4c6:	e7cc      	b.n	800b462 <_strtod_l+0x4da>
 800b4c8:	d0ed      	beq.n	800b4a6 <_strtod_l+0x51e>
 800b4ca:	f1c8 0800 	rsb	r8, r8, #0
 800b4ce:	f018 020f 	ands.w	r2, r8, #15
 800b4d2:	d00a      	beq.n	800b4ea <_strtod_l+0x562>
 800b4d4:	4b14      	ldr	r3, [pc, #80]	; (800b528 <_strtod_l+0x5a0>)
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4dc:	4651      	mov	r1, sl
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f5 f923 	bl	800072c <__aeabi_ddiv>
 800b4e6:	4681      	mov	r9, r0
 800b4e8:	468a      	mov	sl, r1
 800b4ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b4ee:	d0da      	beq.n	800b4a6 <_strtod_l+0x51e>
 800b4f0:	f1b8 0f1f 	cmp.w	r8, #31
 800b4f4:	dd24      	ble.n	800b540 <_strtod_l+0x5b8>
 800b4f6:	f04f 0800 	mov.w	r8, #0
 800b4fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800b4fe:	f8cd 8020 	str.w	r8, [sp, #32]
 800b502:	f8cd 8018 	str.w	r8, [sp, #24]
 800b506:	2322      	movs	r3, #34	; 0x22
 800b508:	f04f 0900 	mov.w	r9, #0
 800b50c:	f04f 0a00 	mov.w	sl, #0
 800b510:	f8cb 3000 	str.w	r3, [fp]
 800b514:	e761      	b.n	800b3da <_strtod_l+0x452>
 800b516:	bf00      	nop
 800b518:	0800f6b8 	.word	0x0800f6b8
 800b51c:	0800f9b3 	.word	0x0800f9b3
 800b520:	0800f6bb 	.word	0x0800f6bb
 800b524:	0800f6d4 	.word	0x0800f6d4
 800b528:	0800f7a8 	.word	0x0800f7a8
 800b52c:	0800f780 	.word	0x0800f780
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	7ca00000 	.word	0x7ca00000
 800b538:	fff80000 	.word	0xfff80000
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	f018 0310 	ands.w	r3, r8, #16
 800b544:	bf18      	it	ne
 800b546:	236a      	movne	r3, #106	; 0x6a
 800b548:	4648      	mov	r0, r9
 800b54a:	9305      	str	r3, [sp, #20]
 800b54c:	4651      	mov	r1, sl
 800b54e:	2300      	movs	r3, #0
 800b550:	4da1      	ldr	r5, [pc, #644]	; (800b7d8 <_strtod_l+0x850>)
 800b552:	f1b8 0f00 	cmp.w	r8, #0
 800b556:	f300 8113 	bgt.w	800b780 <_strtod_l+0x7f8>
 800b55a:	b10b      	cbz	r3, 800b560 <_strtod_l+0x5d8>
 800b55c:	4681      	mov	r9, r0
 800b55e:	468a      	mov	sl, r1
 800b560:	9b05      	ldr	r3, [sp, #20]
 800b562:	b1bb      	cbz	r3, 800b594 <_strtod_l+0x60c>
 800b564:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800b568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	4651      	mov	r1, sl
 800b570:	dd10      	ble.n	800b594 <_strtod_l+0x60c>
 800b572:	2b1f      	cmp	r3, #31
 800b574:	f340 8110 	ble.w	800b798 <_strtod_l+0x810>
 800b578:	2b34      	cmp	r3, #52	; 0x34
 800b57a:	bfd8      	it	le
 800b57c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b580:	f04f 0900 	mov.w	r9, #0
 800b584:	bfcf      	iteee	gt
 800b586:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800b58a:	3b20      	suble	r3, #32
 800b58c:	fa02 f303 	lslle.w	r3, r2, r3
 800b590:	ea03 0a01 	andle.w	sl, r3, r1
 800b594:	2200      	movs	r2, #0
 800b596:	2300      	movs	r3, #0
 800b598:	4648      	mov	r0, r9
 800b59a:	4651      	mov	r1, sl
 800b59c:	f7f5 fa04 	bl	80009a8 <__aeabi_dcmpeq>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d1a8      	bne.n	800b4f6 <_strtod_l+0x56e>
 800b5a4:	9b06      	ldr	r3, [sp, #24]
 800b5a6:	9a04      	ldr	r2, [sp, #16]
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	9908      	ldr	r1, [sp, #32]
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	f001 f96c 	bl	800c88c <__s2b>
 800b5b4:	9008      	str	r0, [sp, #32]
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f43f af00 	beq.w	800b3bc <_strtod_l+0x434>
 800b5bc:	9a07      	ldr	r2, [sp, #28]
 800b5be:	9b07      	ldr	r3, [sp, #28]
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	f1c3 0300 	rsb	r3, r3, #0
 800b5c6:	bfa8      	it	ge
 800b5c8:	2300      	movge	r3, #0
 800b5ca:	f04f 0800 	mov.w	r8, #0
 800b5ce:	930e      	str	r3, [sp, #56]	; 0x38
 800b5d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b5d4:	9316      	str	r3, [sp, #88]	; 0x58
 800b5d6:	f8cd 8010 	str.w	r8, [sp, #16]
 800b5da:	9b08      	ldr	r3, [sp, #32]
 800b5dc:	4658      	mov	r0, fp
 800b5de:	6859      	ldr	r1, [r3, #4]
 800b5e0:	f001 f8ce 	bl	800c780 <_Balloc>
 800b5e4:	9006      	str	r0, [sp, #24]
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f43f aef0 	beq.w	800b3cc <_strtod_l+0x444>
 800b5ec:	9b08      	ldr	r3, [sp, #32]
 800b5ee:	300c      	adds	r0, #12
 800b5f0:	691a      	ldr	r2, [r3, #16]
 800b5f2:	f103 010c 	add.w	r1, r3, #12
 800b5f6:	3202      	adds	r2, #2
 800b5f8:	0092      	lsls	r2, r2, #2
 800b5fa:	f001 f8b4 	bl	800c766 <memcpy>
 800b5fe:	ab1e      	add	r3, sp, #120	; 0x78
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	ab1d      	add	r3, sp, #116	; 0x74
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	464a      	mov	r2, r9
 800b608:	4653      	mov	r3, sl
 800b60a:	4658      	mov	r0, fp
 800b60c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800b610:	f001 fbf6 	bl	800ce00 <__d2b>
 800b614:	901c      	str	r0, [sp, #112]	; 0x70
 800b616:	2800      	cmp	r0, #0
 800b618:	f43f aed8 	beq.w	800b3cc <_strtod_l+0x444>
 800b61c:	2101      	movs	r1, #1
 800b61e:	4658      	mov	r0, fp
 800b620:	f001 f9c0 	bl	800c9a4 <__i2b>
 800b624:	9004      	str	r0, [sp, #16]
 800b626:	4603      	mov	r3, r0
 800b628:	2800      	cmp	r0, #0
 800b62a:	f43f aecf 	beq.w	800b3cc <_strtod_l+0x444>
 800b62e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b630:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b632:	2d00      	cmp	r5, #0
 800b634:	bfab      	itete	ge
 800b636:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b638:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b63a:	18ee      	addge	r6, r5, r3
 800b63c:	1b5c      	sublt	r4, r3, r5
 800b63e:	9b05      	ldr	r3, [sp, #20]
 800b640:	bfa8      	it	ge
 800b642:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800b644:	eba5 0503 	sub.w	r5, r5, r3
 800b648:	4415      	add	r5, r2
 800b64a:	4b64      	ldr	r3, [pc, #400]	; (800b7dc <_strtod_l+0x854>)
 800b64c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800b650:	bfb8      	it	lt
 800b652:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b654:	429d      	cmp	r5, r3
 800b656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b65a:	f280 80af 	bge.w	800b7bc <_strtod_l+0x834>
 800b65e:	1b5b      	subs	r3, r3, r5
 800b660:	2b1f      	cmp	r3, #31
 800b662:	eba2 0203 	sub.w	r2, r2, r3
 800b666:	f04f 0701 	mov.w	r7, #1
 800b66a:	f300 809c 	bgt.w	800b7a6 <_strtod_l+0x81e>
 800b66e:	2500      	movs	r5, #0
 800b670:	fa07 f303 	lsl.w	r3, r7, r3
 800b674:	930f      	str	r3, [sp, #60]	; 0x3c
 800b676:	18b7      	adds	r7, r6, r2
 800b678:	9b05      	ldr	r3, [sp, #20]
 800b67a:	42be      	cmp	r6, r7
 800b67c:	4414      	add	r4, r2
 800b67e:	441c      	add	r4, r3
 800b680:	4633      	mov	r3, r6
 800b682:	bfa8      	it	ge
 800b684:	463b      	movge	r3, r7
 800b686:	42a3      	cmp	r3, r4
 800b688:	bfa8      	it	ge
 800b68a:	4623      	movge	r3, r4
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bfc2      	ittt	gt
 800b690:	1aff      	subgt	r7, r7, r3
 800b692:	1ae4      	subgt	r4, r4, r3
 800b694:	1af6      	subgt	r6, r6, r3
 800b696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b698:	b1bb      	cbz	r3, 800b6ca <_strtod_l+0x742>
 800b69a:	461a      	mov	r2, r3
 800b69c:	9904      	ldr	r1, [sp, #16]
 800b69e:	4658      	mov	r0, fp
 800b6a0:	f001 fa1e 	bl	800cae0 <__pow5mult>
 800b6a4:	9004      	str	r0, [sp, #16]
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f43f ae90 	beq.w	800b3cc <_strtod_l+0x444>
 800b6ac:	4601      	mov	r1, r0
 800b6ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b6b0:	4658      	mov	r0, fp
 800b6b2:	f001 f980 	bl	800c9b6 <__multiply>
 800b6b6:	9009      	str	r0, [sp, #36]	; 0x24
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f43f ae87 	beq.w	800b3cc <_strtod_l+0x444>
 800b6be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6c0:	4658      	mov	r0, fp
 800b6c2:	f001 f891 	bl	800c7e8 <_Bfree>
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	931c      	str	r3, [sp, #112]	; 0x70
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	dc7a      	bgt.n	800b7c4 <_strtod_l+0x83c>
 800b6ce:	9b07      	ldr	r3, [sp, #28]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dd08      	ble.n	800b6e6 <_strtod_l+0x75e>
 800b6d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6d6:	9906      	ldr	r1, [sp, #24]
 800b6d8:	4658      	mov	r0, fp
 800b6da:	f001 fa01 	bl	800cae0 <__pow5mult>
 800b6de:	9006      	str	r0, [sp, #24]
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	f43f ae73 	beq.w	800b3cc <_strtod_l+0x444>
 800b6e6:	2c00      	cmp	r4, #0
 800b6e8:	dd08      	ble.n	800b6fc <_strtod_l+0x774>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	9906      	ldr	r1, [sp, #24]
 800b6ee:	4658      	mov	r0, fp
 800b6f0:	f001 fa44 	bl	800cb7c <__lshift>
 800b6f4:	9006      	str	r0, [sp, #24]
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f43f ae68 	beq.w	800b3cc <_strtod_l+0x444>
 800b6fc:	2e00      	cmp	r6, #0
 800b6fe:	dd08      	ble.n	800b712 <_strtod_l+0x78a>
 800b700:	4632      	mov	r2, r6
 800b702:	9904      	ldr	r1, [sp, #16]
 800b704:	4658      	mov	r0, fp
 800b706:	f001 fa39 	bl	800cb7c <__lshift>
 800b70a:	9004      	str	r0, [sp, #16]
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f43f ae5d 	beq.w	800b3cc <_strtod_l+0x444>
 800b712:	9a06      	ldr	r2, [sp, #24]
 800b714:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b716:	4658      	mov	r0, fp
 800b718:	f001 fa9e 	bl	800cc58 <__mdiff>
 800b71c:	4680      	mov	r8, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	f43f ae54 	beq.w	800b3cc <_strtod_l+0x444>
 800b724:	2400      	movs	r4, #0
 800b726:	68c3      	ldr	r3, [r0, #12]
 800b728:	9904      	ldr	r1, [sp, #16]
 800b72a:	60c4      	str	r4, [r0, #12]
 800b72c:	930c      	str	r3, [sp, #48]	; 0x30
 800b72e:	f001 fa79 	bl	800cc24 <__mcmp>
 800b732:	42a0      	cmp	r0, r4
 800b734:	da54      	bge.n	800b7e0 <_strtod_l+0x858>
 800b736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b738:	b9f3      	cbnz	r3, 800b778 <_strtod_l+0x7f0>
 800b73a:	f1b9 0f00 	cmp.w	r9, #0
 800b73e:	d11b      	bne.n	800b778 <_strtod_l+0x7f0>
 800b740:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b744:	b9c3      	cbnz	r3, 800b778 <_strtod_l+0x7f0>
 800b746:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b74a:	0d1b      	lsrs	r3, r3, #20
 800b74c:	051b      	lsls	r3, r3, #20
 800b74e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b752:	d911      	bls.n	800b778 <_strtod_l+0x7f0>
 800b754:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b758:	b91b      	cbnz	r3, 800b762 <_strtod_l+0x7da>
 800b75a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	dd0a      	ble.n	800b778 <_strtod_l+0x7f0>
 800b762:	4641      	mov	r1, r8
 800b764:	2201      	movs	r2, #1
 800b766:	4658      	mov	r0, fp
 800b768:	f001 fa08 	bl	800cb7c <__lshift>
 800b76c:	9904      	ldr	r1, [sp, #16]
 800b76e:	4680      	mov	r8, r0
 800b770:	f001 fa58 	bl	800cc24 <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	dc68      	bgt.n	800b84a <_strtod_l+0x8c2>
 800b778:	9b05      	ldr	r3, [sp, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d172      	bne.n	800b864 <_strtod_l+0x8dc>
 800b77e:	e630      	b.n	800b3e2 <_strtod_l+0x45a>
 800b780:	f018 0f01 	tst.w	r8, #1
 800b784:	d004      	beq.n	800b790 <_strtod_l+0x808>
 800b786:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b78a:	f7f4 fea5 	bl	80004d8 <__aeabi_dmul>
 800b78e:	2301      	movs	r3, #1
 800b790:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b794:	3508      	adds	r5, #8
 800b796:	e6dc      	b.n	800b552 <_strtod_l+0x5ca>
 800b798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	ea03 0909 	and.w	r9, r3, r9
 800b7a4:	e6f6      	b.n	800b594 <_strtod_l+0x60c>
 800b7a6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b7aa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b7ae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b7b2:	35e2      	adds	r5, #226	; 0xe2
 800b7b4:	fa07 f505 	lsl.w	r5, r7, r5
 800b7b8:	970f      	str	r7, [sp, #60]	; 0x3c
 800b7ba:	e75c      	b.n	800b676 <_strtod_l+0x6ee>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	2500      	movs	r5, #0
 800b7c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7c2:	e758      	b.n	800b676 <_strtod_l+0x6ee>
 800b7c4:	463a      	mov	r2, r7
 800b7c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7c8:	4658      	mov	r0, fp
 800b7ca:	f001 f9d7 	bl	800cb7c <__lshift>
 800b7ce:	901c      	str	r0, [sp, #112]	; 0x70
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f47f af7c 	bne.w	800b6ce <_strtod_l+0x746>
 800b7d6:	e5f9      	b.n	800b3cc <_strtod_l+0x444>
 800b7d8:	0800f6e8 	.word	0x0800f6e8
 800b7dc:	fffffc02 	.word	0xfffffc02
 800b7e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b7e4:	f040 8089 	bne.w	800b8fa <_strtod_l+0x972>
 800b7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ea:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b7ee:	b342      	cbz	r2, 800b842 <_strtod_l+0x8ba>
 800b7f0:	4aaf      	ldr	r2, [pc, #700]	; (800bab0 <_strtod_l+0xb28>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d156      	bne.n	800b8a4 <_strtod_l+0x91c>
 800b7f6:	9b05      	ldr	r3, [sp, #20]
 800b7f8:	4648      	mov	r0, r9
 800b7fa:	b1eb      	cbz	r3, 800b838 <_strtod_l+0x8b0>
 800b7fc:	4653      	mov	r3, sl
 800b7fe:	4aad      	ldr	r2, [pc, #692]	; (800bab4 <_strtod_l+0xb2c>)
 800b800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b804:	401a      	ands	r2, r3
 800b806:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b80a:	d818      	bhi.n	800b83e <_strtod_l+0x8b6>
 800b80c:	0d12      	lsrs	r2, r2, #20
 800b80e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b812:	fa01 f303 	lsl.w	r3, r1, r3
 800b816:	4298      	cmp	r0, r3
 800b818:	d144      	bne.n	800b8a4 <_strtod_l+0x91c>
 800b81a:	4ba7      	ldr	r3, [pc, #668]	; (800bab8 <_strtod_l+0xb30>)
 800b81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b81e:	429a      	cmp	r2, r3
 800b820:	d102      	bne.n	800b828 <_strtod_l+0x8a0>
 800b822:	3001      	adds	r0, #1
 800b824:	f43f add2 	beq.w	800b3cc <_strtod_l+0x444>
 800b828:	4ba2      	ldr	r3, [pc, #648]	; (800bab4 <_strtod_l+0xb2c>)
 800b82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b82c:	f04f 0900 	mov.w	r9, #0
 800b830:	401a      	ands	r2, r3
 800b832:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800b836:	e79f      	b.n	800b778 <_strtod_l+0x7f0>
 800b838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b83c:	e7eb      	b.n	800b816 <_strtod_l+0x88e>
 800b83e:	460b      	mov	r3, r1
 800b840:	e7e9      	b.n	800b816 <_strtod_l+0x88e>
 800b842:	bb7b      	cbnz	r3, 800b8a4 <_strtod_l+0x91c>
 800b844:	f1b9 0f00 	cmp.w	r9, #0
 800b848:	d12c      	bne.n	800b8a4 <_strtod_l+0x91c>
 800b84a:	9905      	ldr	r1, [sp, #20]
 800b84c:	4653      	mov	r3, sl
 800b84e:	4a99      	ldr	r2, [pc, #612]	; (800bab4 <_strtod_l+0xb2c>)
 800b850:	b1f1      	cbz	r1, 800b890 <_strtod_l+0x908>
 800b852:	ea02 010a 	and.w	r1, r2, sl
 800b856:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b85a:	dc19      	bgt.n	800b890 <_strtod_l+0x908>
 800b85c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b860:	f77f ae51 	ble.w	800b506 <_strtod_l+0x57e>
 800b864:	2300      	movs	r3, #0
 800b866:	4a95      	ldr	r2, [pc, #596]	; (800babc <_strtod_l+0xb34>)
 800b868:	4648      	mov	r0, r9
 800b86a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b86e:	4651      	mov	r1, sl
 800b870:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b874:	f7f4 fe30 	bl	80004d8 <__aeabi_dmul>
 800b878:	4681      	mov	r9, r0
 800b87a:	468a      	mov	sl, r1
 800b87c:	2900      	cmp	r1, #0
 800b87e:	f47f adb0 	bne.w	800b3e2 <_strtod_l+0x45a>
 800b882:	2800      	cmp	r0, #0
 800b884:	f47f adad 	bne.w	800b3e2 <_strtod_l+0x45a>
 800b888:	2322      	movs	r3, #34	; 0x22
 800b88a:	f8cb 3000 	str.w	r3, [fp]
 800b88e:	e5a8      	b.n	800b3e2 <_strtod_l+0x45a>
 800b890:	4013      	ands	r3, r2
 800b892:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b896:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800b89a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b89e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800b8a2:	e769      	b.n	800b778 <_strtod_l+0x7f0>
 800b8a4:	b19d      	cbz	r5, 800b8ce <_strtod_l+0x946>
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	421d      	tst	r5, r3
 800b8aa:	f43f af65 	beq.w	800b778 <_strtod_l+0x7f0>
 800b8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8b0:	9a05      	ldr	r2, [sp, #20]
 800b8b2:	4648      	mov	r0, r9
 800b8b4:	4651      	mov	r1, sl
 800b8b6:	b173      	cbz	r3, 800b8d6 <_strtod_l+0x94e>
 800b8b8:	f7ff fb44 	bl	800af44 <sulp>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8c4:	f7f4 fc52 	bl	800016c <__adddf3>
 800b8c8:	4681      	mov	r9, r0
 800b8ca:	468a      	mov	sl, r1
 800b8cc:	e754      	b.n	800b778 <_strtod_l+0x7f0>
 800b8ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8d0:	ea13 0f09 	tst.w	r3, r9
 800b8d4:	e7e9      	b.n	800b8aa <_strtod_l+0x922>
 800b8d6:	f7ff fb35 	bl	800af44 <sulp>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8e2:	f7f4 fc41 	bl	8000168 <__aeabi_dsub>
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4681      	mov	r9, r0
 800b8ec:	468a      	mov	sl, r1
 800b8ee:	f7f5 f85b 	bl	80009a8 <__aeabi_dcmpeq>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f47f ae07 	bne.w	800b506 <_strtod_l+0x57e>
 800b8f8:	e73e      	b.n	800b778 <_strtod_l+0x7f0>
 800b8fa:	9904      	ldr	r1, [sp, #16]
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	f001 face 	bl	800ce9e <__ratio>
 800b902:	2200      	movs	r2, #0
 800b904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b908:	4606      	mov	r6, r0
 800b90a:	460f      	mov	r7, r1
 800b90c:	f7f5 f860 	bl	80009d0 <__aeabi_dcmple>
 800b910:	2800      	cmp	r0, #0
 800b912:	d075      	beq.n	800ba00 <_strtod_l+0xa78>
 800b914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b916:	2b00      	cmp	r3, #0
 800b918:	d047      	beq.n	800b9aa <_strtod_l+0xa22>
 800b91a:	2600      	movs	r6, #0
 800b91c:	4f68      	ldr	r7, [pc, #416]	; (800bac0 <_strtod_l+0xb38>)
 800b91e:	4d68      	ldr	r5, [pc, #416]	; (800bac0 <_strtod_l+0xb38>)
 800b920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b926:	0d1b      	lsrs	r3, r3, #20
 800b928:	051b      	lsls	r3, r3, #20
 800b92a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b92c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b92e:	4b65      	ldr	r3, [pc, #404]	; (800bac4 <_strtod_l+0xb3c>)
 800b930:	429a      	cmp	r2, r3
 800b932:	f040 80cf 	bne.w	800bad4 <_strtod_l+0xb4c>
 800b936:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b93a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b940:	4648      	mov	r0, r9
 800b942:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800b946:	4651      	mov	r1, sl
 800b948:	f001 f9e4 	bl	800cd14 <__ulp>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f4 fdc0 	bl	80004d8 <__aeabi_dmul>
 800b958:	464a      	mov	r2, r9
 800b95a:	4653      	mov	r3, sl
 800b95c:	f7f4 fc06 	bl	800016c <__adddf3>
 800b960:	460b      	mov	r3, r1
 800b962:	4954      	ldr	r1, [pc, #336]	; (800bab4 <_strtod_l+0xb2c>)
 800b964:	4a58      	ldr	r2, [pc, #352]	; (800bac8 <_strtod_l+0xb40>)
 800b966:	4019      	ands	r1, r3
 800b968:	4291      	cmp	r1, r2
 800b96a:	4681      	mov	r9, r0
 800b96c:	d95e      	bls.n	800ba2c <_strtod_l+0xaa4>
 800b96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b970:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b974:	4293      	cmp	r3, r2
 800b976:	d103      	bne.n	800b980 <_strtod_l+0x9f8>
 800b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b97a:	3301      	adds	r3, #1
 800b97c:	f43f ad26 	beq.w	800b3cc <_strtod_l+0x444>
 800b980:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b984:	f8df a130 	ldr.w	sl, [pc, #304]	; 800bab8 <_strtod_l+0xb30>
 800b988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b98a:	4658      	mov	r0, fp
 800b98c:	f000 ff2c 	bl	800c7e8 <_Bfree>
 800b990:	9906      	ldr	r1, [sp, #24]
 800b992:	4658      	mov	r0, fp
 800b994:	f000 ff28 	bl	800c7e8 <_Bfree>
 800b998:	9904      	ldr	r1, [sp, #16]
 800b99a:	4658      	mov	r0, fp
 800b99c:	f000 ff24 	bl	800c7e8 <_Bfree>
 800b9a0:	4641      	mov	r1, r8
 800b9a2:	4658      	mov	r0, fp
 800b9a4:	f000 ff20 	bl	800c7e8 <_Bfree>
 800b9a8:	e617      	b.n	800b5da <_strtod_l+0x652>
 800b9aa:	f1b9 0f00 	cmp.w	r9, #0
 800b9ae:	d119      	bne.n	800b9e4 <_strtod_l+0xa5c>
 800b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b6:	b9e3      	cbnz	r3, 800b9f2 <_strtod_l+0xa6a>
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4b41      	ldr	r3, [pc, #260]	; (800bac0 <_strtod_l+0xb38>)
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4639      	mov	r1, r7
 800b9c0:	f7f4 fffc 	bl	80009bc <__aeabi_dcmplt>
 800b9c4:	b9c8      	cbnz	r0, 800b9fa <_strtod_l+0xa72>
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	4b40      	ldr	r3, [pc, #256]	; (800bacc <_strtod_l+0xb44>)
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	4639      	mov	r1, r7
 800b9ce:	f7f4 fd83 	bl	80004d8 <__aeabi_dmul>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b9da:	9418      	str	r4, [sp, #96]	; 0x60
 800b9dc:	9319      	str	r3, [sp, #100]	; 0x64
 800b9de:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b9e2:	e79d      	b.n	800b920 <_strtod_l+0x998>
 800b9e4:	f1b9 0f01 	cmp.w	r9, #1
 800b9e8:	d103      	bne.n	800b9f2 <_strtod_l+0xa6a>
 800b9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f43f ad8a 	beq.w	800b506 <_strtod_l+0x57e>
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	4f36      	ldr	r7, [pc, #216]	; (800bad0 <_strtod_l+0xb48>)
 800b9f6:	2400      	movs	r4, #0
 800b9f8:	e791      	b.n	800b91e <_strtod_l+0x996>
 800b9fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b9fc:	4d33      	ldr	r5, [pc, #204]	; (800bacc <_strtod_l+0xb44>)
 800b9fe:	e7ea      	b.n	800b9d6 <_strtod_l+0xa4e>
 800ba00:	4b32      	ldr	r3, [pc, #200]	; (800bacc <_strtod_l+0xb44>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f4 fd66 	bl	80004d8 <__aeabi_dmul>
 800ba0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	b933      	cbnz	r3, 800ba22 <_strtod_l+0xa9a>
 800ba14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba18:	9010      	str	r0, [sp, #64]	; 0x40
 800ba1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ba1c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ba20:	e77e      	b.n	800b920 <_strtod_l+0x998>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ba2a:	e7f7      	b.n	800ba1c <_strtod_l+0xa94>
 800ba2c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ba30:	9b05      	ldr	r3, [sp, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1a8      	bne.n	800b988 <_strtod_l+0xa00>
 800ba36:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ba3a:	0d1b      	lsrs	r3, r3, #20
 800ba3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba3e:	051b      	lsls	r3, r3, #20
 800ba40:	429a      	cmp	r2, r3
 800ba42:	4656      	mov	r6, sl
 800ba44:	d1a0      	bne.n	800b988 <_strtod_l+0xa00>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f7f4 ffdf 	bl	8000a0c <__aeabi_d2iz>
 800ba4e:	f7f4 fcd9 	bl	8000404 <__aeabi_i2d>
 800ba52:	460b      	mov	r3, r1
 800ba54:	4602      	mov	r2, r0
 800ba56:	4629      	mov	r1, r5
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f7f4 fb85 	bl	8000168 <__aeabi_dsub>
 800ba5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba60:	4604      	mov	r4, r0
 800ba62:	460d      	mov	r5, r1
 800ba64:	b933      	cbnz	r3, 800ba74 <_strtod_l+0xaec>
 800ba66:	f1b9 0f00 	cmp.w	r9, #0
 800ba6a:	d103      	bne.n	800ba74 <_strtod_l+0xaec>
 800ba6c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800ba70:	2e00      	cmp	r6, #0
 800ba72:	d06a      	beq.n	800bb4a <_strtod_l+0xbc2>
 800ba74:	a30a      	add	r3, pc, #40	; (adr r3, 800baa0 <_strtod_l+0xb18>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f4 ff9d 	bl	80009bc <__aeabi_dcmplt>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f47f acad 	bne.w	800b3e2 <_strtod_l+0x45a>
 800ba88:	a307      	add	r3, pc, #28	; (adr r3, 800baa8 <_strtod_l+0xb20>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	f7f4 ffb1 	bl	80009f8 <__aeabi_dcmpgt>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f af76 	beq.w	800b988 <_strtod_l+0xa00>
 800ba9c:	e4a1      	b.n	800b3e2 <_strtod_l+0x45a>
 800ba9e:	bf00      	nop
 800baa0:	94a03595 	.word	0x94a03595
 800baa4:	3fdfffff 	.word	0x3fdfffff
 800baa8:	35afe535 	.word	0x35afe535
 800baac:	3fe00000 	.word	0x3fe00000
 800bab0:	000fffff 	.word	0x000fffff
 800bab4:	7ff00000 	.word	0x7ff00000
 800bab8:	7fefffff 	.word	0x7fefffff
 800babc:	39500000 	.word	0x39500000
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	7fe00000 	.word	0x7fe00000
 800bac8:	7c9fffff 	.word	0x7c9fffff
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	bff00000 	.word	0xbff00000
 800bad4:	9b05      	ldr	r3, [sp, #20]
 800bad6:	b313      	cbz	r3, 800bb1e <_strtod_l+0xb96>
 800bad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bada:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bade:	d81e      	bhi.n	800bb1e <_strtod_l+0xb96>
 800bae0:	a325      	add	r3, pc, #148	; (adr r3, 800bb78 <_strtod_l+0xbf0>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 ff71 	bl	80009d0 <__aeabi_dcmple>
 800baee:	b190      	cbz	r0, 800bb16 <_strtod_l+0xb8e>
 800baf0:	4629      	mov	r1, r5
 800baf2:	4620      	mov	r0, r4
 800baf4:	f7f4 ffb2 	bl	8000a5c <__aeabi_d2uiz>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	bf08      	it	eq
 800bafc:	2001      	moveq	r0, #1
 800bafe:	f7f4 fc71 	bl	80003e4 <__aeabi_ui2d>
 800bb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	b9d3      	cbnz	r3, 800bb40 <_strtod_l+0xbb8>
 800bb0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb0e:	9012      	str	r0, [sp, #72]	; 0x48
 800bb10:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb12:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800bb16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb18:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800bb1c:	1a9f      	subs	r7, r3, r2
 800bb1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb22:	f001 f8f7 	bl	800cd14 <__ulp>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	f7f4 fcd3 	bl	80004d8 <__aeabi_dmul>
 800bb32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb36:	f7f4 fb19 	bl	800016c <__adddf3>
 800bb3a:	4681      	mov	r9, r0
 800bb3c:	468a      	mov	sl, r1
 800bb3e:	e777      	b.n	800ba30 <_strtod_l+0xaa8>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800bb48:	e7e3      	b.n	800bb12 <_strtod_l+0xb8a>
 800bb4a:	a30d      	add	r3, pc, #52	; (adr r3, 800bb80 <_strtod_l+0xbf8>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 ff34 	bl	80009bc <__aeabi_dcmplt>
 800bb54:	e79f      	b.n	800ba96 <_strtod_l+0xb0e>
 800bb56:	2300      	movs	r3, #0
 800bb58:	930d      	str	r3, [sp, #52]	; 0x34
 800bb5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	f7ff ba55 	b.w	800b00e <_strtod_l+0x86>
 800bb64:	2b65      	cmp	r3, #101	; 0x65
 800bb66:	f04f 0200 	mov.w	r2, #0
 800bb6a:	f43f ab42 	beq.w	800b1f2 <_strtod_l+0x26a>
 800bb6e:	2101      	movs	r1, #1
 800bb70:	4614      	mov	r4, r2
 800bb72:	9105      	str	r1, [sp, #20]
 800bb74:	f7ff babf 	b.w	800b0f6 <_strtod_l+0x16e>
 800bb78:	ffc00000 	.word	0xffc00000
 800bb7c:	41dfffff 	.word	0x41dfffff
 800bb80:	94a03595 	.word	0x94a03595
 800bb84:	3fcfffff 	.word	0x3fcfffff

0800bb88 <strtod>:
 800bb88:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <strtod+0x1c>)
 800bb8a:	b410      	push	{r4}
 800bb8c:	681c      	ldr	r4, [r3, #0]
 800bb8e:	4a06      	ldr	r2, [pc, #24]	; (800bba8 <strtod+0x20>)
 800bb90:	6a23      	ldr	r3, [r4, #32]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bf08      	it	eq
 800bb96:	4613      	moveq	r3, r2
 800bb98:	460a      	mov	r2, r1
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bc10      	pop	{r4}
 800bba0:	f7ff b9f2 	b.w	800af88 <_strtod_l>
 800bba4:	20000070 	.word	0x20000070
 800bba8:	200000d4 	.word	0x200000d4

0800bbac <_strtol_l.isra.0>:
 800bbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb0:	4680      	mov	r8, r0
 800bbb2:	4689      	mov	r9, r1
 800bbb4:	4692      	mov	sl, r2
 800bbb6:	461e      	mov	r6, r3
 800bbb8:	460f      	mov	r7, r1
 800bbba:	463d      	mov	r5, r7
 800bbbc:	9808      	ldr	r0, [sp, #32]
 800bbbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbc2:	f000 fdb9 	bl	800c738 <__locale_ctype_ptr_l>
 800bbc6:	4420      	add	r0, r4
 800bbc8:	7843      	ldrb	r3, [r0, #1]
 800bbca:	f013 0308 	ands.w	r3, r3, #8
 800bbce:	d132      	bne.n	800bc36 <_strtol_l.isra.0+0x8a>
 800bbd0:	2c2d      	cmp	r4, #45	; 0x2d
 800bbd2:	d132      	bne.n	800bc3a <_strtol_l.isra.0+0x8e>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	787c      	ldrb	r4, [r7, #1]
 800bbd8:	1cbd      	adds	r5, r7, #2
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	d05d      	beq.n	800bc9a <_strtol_l.isra.0+0xee>
 800bbde:	2e10      	cmp	r6, #16
 800bbe0:	d109      	bne.n	800bbf6 <_strtol_l.isra.0+0x4a>
 800bbe2:	2c30      	cmp	r4, #48	; 0x30
 800bbe4:	d107      	bne.n	800bbf6 <_strtol_l.isra.0+0x4a>
 800bbe6:	782b      	ldrb	r3, [r5, #0]
 800bbe8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbec:	2b58      	cmp	r3, #88	; 0x58
 800bbee:	d14f      	bne.n	800bc90 <_strtol_l.isra.0+0xe4>
 800bbf0:	2610      	movs	r6, #16
 800bbf2:	786c      	ldrb	r4, [r5, #1]
 800bbf4:	3502      	adds	r5, #2
 800bbf6:	2a00      	cmp	r2, #0
 800bbf8:	bf14      	ite	ne
 800bbfa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bbfe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bc02:	2700      	movs	r7, #0
 800bc04:	fbb1 fcf6 	udiv	ip, r1, r6
 800bc08:	4638      	mov	r0, r7
 800bc0a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bc0e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bc12:	2b09      	cmp	r3, #9
 800bc14:	d817      	bhi.n	800bc46 <_strtol_l.isra.0+0x9a>
 800bc16:	461c      	mov	r4, r3
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	dd23      	ble.n	800bc64 <_strtol_l.isra.0+0xb8>
 800bc1c:	1c7b      	adds	r3, r7, #1
 800bc1e:	d007      	beq.n	800bc30 <_strtol_l.isra.0+0x84>
 800bc20:	4584      	cmp	ip, r0
 800bc22:	d31c      	bcc.n	800bc5e <_strtol_l.isra.0+0xb2>
 800bc24:	d101      	bne.n	800bc2a <_strtol_l.isra.0+0x7e>
 800bc26:	45a6      	cmp	lr, r4
 800bc28:	db19      	blt.n	800bc5e <_strtol_l.isra.0+0xb2>
 800bc2a:	2701      	movs	r7, #1
 800bc2c:	fb00 4006 	mla	r0, r0, r6, r4
 800bc30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc34:	e7eb      	b.n	800bc0e <_strtol_l.isra.0+0x62>
 800bc36:	462f      	mov	r7, r5
 800bc38:	e7bf      	b.n	800bbba <_strtol_l.isra.0+0xe>
 800bc3a:	2c2b      	cmp	r4, #43	; 0x2b
 800bc3c:	bf04      	itt	eq
 800bc3e:	1cbd      	addeq	r5, r7, #2
 800bc40:	787c      	ldrbeq	r4, [r7, #1]
 800bc42:	461a      	mov	r2, r3
 800bc44:	e7c9      	b.n	800bbda <_strtol_l.isra.0+0x2e>
 800bc46:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bc4a:	2b19      	cmp	r3, #25
 800bc4c:	d801      	bhi.n	800bc52 <_strtol_l.isra.0+0xa6>
 800bc4e:	3c37      	subs	r4, #55	; 0x37
 800bc50:	e7e2      	b.n	800bc18 <_strtol_l.isra.0+0x6c>
 800bc52:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bc56:	2b19      	cmp	r3, #25
 800bc58:	d804      	bhi.n	800bc64 <_strtol_l.isra.0+0xb8>
 800bc5a:	3c57      	subs	r4, #87	; 0x57
 800bc5c:	e7dc      	b.n	800bc18 <_strtol_l.isra.0+0x6c>
 800bc5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc62:	e7e5      	b.n	800bc30 <_strtol_l.isra.0+0x84>
 800bc64:	1c7b      	adds	r3, r7, #1
 800bc66:	d108      	bne.n	800bc7a <_strtol_l.isra.0+0xce>
 800bc68:	2322      	movs	r3, #34	; 0x22
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	f8c8 3000 	str.w	r3, [r8]
 800bc70:	f1ba 0f00 	cmp.w	sl, #0
 800bc74:	d107      	bne.n	800bc86 <_strtol_l.isra.0+0xda>
 800bc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7a:	b102      	cbz	r2, 800bc7e <_strtol_l.isra.0+0xd2>
 800bc7c:	4240      	negs	r0, r0
 800bc7e:	f1ba 0f00 	cmp.w	sl, #0
 800bc82:	d0f8      	beq.n	800bc76 <_strtol_l.isra.0+0xca>
 800bc84:	b10f      	cbz	r7, 800bc8a <_strtol_l.isra.0+0xde>
 800bc86:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800bc8a:	f8ca 9000 	str.w	r9, [sl]
 800bc8e:	e7f2      	b.n	800bc76 <_strtol_l.isra.0+0xca>
 800bc90:	2430      	movs	r4, #48	; 0x30
 800bc92:	2e00      	cmp	r6, #0
 800bc94:	d1af      	bne.n	800bbf6 <_strtol_l.isra.0+0x4a>
 800bc96:	2608      	movs	r6, #8
 800bc98:	e7ad      	b.n	800bbf6 <_strtol_l.isra.0+0x4a>
 800bc9a:	2c30      	cmp	r4, #48	; 0x30
 800bc9c:	d0a3      	beq.n	800bbe6 <_strtol_l.isra.0+0x3a>
 800bc9e:	260a      	movs	r6, #10
 800bca0:	e7a9      	b.n	800bbf6 <_strtol_l.isra.0+0x4a>
	...

0800bca4 <strtol>:
 800bca4:	4b08      	ldr	r3, [pc, #32]	; (800bcc8 <strtol+0x24>)
 800bca6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bca8:	681c      	ldr	r4, [r3, #0]
 800bcaa:	4d08      	ldr	r5, [pc, #32]	; (800bccc <strtol+0x28>)
 800bcac:	6a23      	ldr	r3, [r4, #32]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bf08      	it	eq
 800bcb2:	462b      	moveq	r3, r5
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	460a      	mov	r2, r1
 800bcba:	4601      	mov	r1, r0
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7ff ff75 	bl	800bbac <_strtol_l.isra.0>
 800bcc2:	b003      	add	sp, #12
 800bcc4:	bd30      	pop	{r4, r5, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20000070 	.word	0x20000070
 800bccc:	200000d4 	.word	0x200000d4

0800bcd0 <print_e>:
 800bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd2:	b08b      	sub	sp, #44	; 0x2c
 800bcd4:	460f      	mov	r7, r1
 800bcd6:	a908      	add	r1, sp, #32
 800bcd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bcda:	9104      	str	r1, [sp, #16]
 800bcdc:	a907      	add	r1, sp, #28
 800bcde:	9103      	str	r1, [sp, #12]
 800bce0:	a909      	add	r1, sp, #36	; 0x24
 800bce2:	9102      	str	r1, [sp, #8]
 800bce4:	1c61      	adds	r1, r4, #1
 800bce6:	9101      	str	r1, [sp, #4]
 800bce8:	2102      	movs	r1, #2
 800bcea:	9100      	str	r1, [sp, #0]
 800bcec:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 800bcf0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bcf2:	f001 ff7d 	bl	800dbf0 <_dtoa_r>
 800bcf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcfe:	4298      	cmp	r0, r3
 800bd00:	d104      	bne.n	800bd0c <print_e+0x3c>
 800bd02:	4638      	mov	r0, r7
 800bd04:	f7ff f8fc 	bl	800af00 <strcpy>
 800bd08:	b00b      	add	sp, #44	; 0x2c
 800bd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd0c:	780b      	ldrb	r3, [r1, #0]
 800bd0e:	703b      	strb	r3, [r7, #0]
 800bd10:	2d00      	cmp	r5, #0
 800bd12:	d142      	bne.n	800bd9a <print_e+0xca>
 800bd14:	2c00      	cmp	r4, #0
 800bd16:	d140      	bne.n	800bd9a <print_e+0xca>
 800bd18:	1c7b      	adds	r3, r7, #1
 800bd1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd1e:	b10a      	cbz	r2, 800bd24 <print_e+0x54>
 800bd20:	2c00      	cmp	r4, #0
 800bd22:	dc3e      	bgt.n	800bda2 <print_e+0xd2>
 800bd24:	2e67      	cmp	r6, #103	; 0x67
 800bd26:	d043      	beq.n	800bdb0 <print_e+0xe0>
 800bd28:	2e47      	cmp	r6, #71	; 0x47
 800bd2a:	d043      	beq.n	800bdb4 <print_e+0xe4>
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	2730      	movs	r7, #48	; 0x30
 800bd30:	191d      	adds	r5, r3, r4
 800bd32:	1aa9      	subs	r1, r5, r2
 800bd34:	2900      	cmp	r1, #0
 800bd36:	dc38      	bgt.n	800bdaa <print_e+0xda>
 800bd38:	2c00      	cmp	r4, #0
 800bd3a:	bfa8      	it	ge
 800bd3c:	191b      	addge	r3, r3, r4
 800bd3e:	1e41      	subs	r1, r0, #1
 800bd40:	2900      	cmp	r1, #0
 800bd42:	9109      	str	r1, [sp, #36]	; 0x24
 800bd44:	461a      	mov	r2, r3
 800bd46:	bfb7      	itett	lt
 800bd48:	212d      	movlt	r1, #45	; 0x2d
 800bd4a:	212b      	movge	r1, #43	; 0x2b
 800bd4c:	f1c0 0001 	rsblt	r0, r0, #1
 800bd50:	9009      	strlt	r0, [sp, #36]	; 0x24
 800bd52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd54:	f802 6b02 	strb.w	r6, [r2], #2
 800bd58:	bfb4      	ite	lt
 800bd5a:	7059      	strblt	r1, [r3, #1]
 800bd5c:	7059      	strbge	r1, [r3, #1]
 800bd5e:	2863      	cmp	r0, #99	; 0x63
 800bd60:	dd0b      	ble.n	800bd7a <print_e+0xaa>
 800bd62:	2164      	movs	r1, #100	; 0x64
 800bd64:	fb90 f1f1 	sdiv	r1, r0, r1
 800bd68:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800bd6c:	1cda      	adds	r2, r3, #3
 800bd6e:	709c      	strb	r4, [r3, #2]
 800bd70:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800bd74:	fb03 0101 	mla	r1, r3, r1, r0
 800bd78:	9109      	str	r1, [sp, #36]	; 0x24
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd7e:	fb91 f3f3 	sdiv	r3, r1, r3
 800bd82:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bd86:	7010      	strb	r0, [r2, #0]
 800bd88:	f06f 0009 	mvn.w	r0, #9
 800bd8c:	fb00 1303 	mla	r3, r0, r3, r1
 800bd90:	3330      	adds	r3, #48	; 0x30
 800bd92:	7053      	strb	r3, [r2, #1]
 800bd94:	2300      	movs	r3, #0
 800bd96:	7093      	strb	r3, [r2, #2]
 800bd98:	e7b6      	b.n	800bd08 <print_e+0x38>
 800bd9a:	222e      	movs	r2, #46	; 0x2e
 800bd9c:	1cbb      	adds	r3, r7, #2
 800bd9e:	707a      	strb	r2, [r7, #1]
 800bda0:	e7bb      	b.n	800bd1a <print_e+0x4a>
 800bda2:	f803 2b01 	strb.w	r2, [r3], #1
 800bda6:	3c01      	subs	r4, #1
 800bda8:	e7b7      	b.n	800bd1a <print_e+0x4a>
 800bdaa:	f802 7b01 	strb.w	r7, [r2], #1
 800bdae:	e7c0      	b.n	800bd32 <print_e+0x62>
 800bdb0:	2665      	movs	r6, #101	; 0x65
 800bdb2:	e7c4      	b.n	800bd3e <print_e+0x6e>
 800bdb4:	2645      	movs	r6, #69	; 0x45
 800bdb6:	e7c2      	b.n	800bd3e <print_e+0x6e>

0800bdb8 <_gcvt>:
 800bdb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdbc:	4617      	mov	r7, r2
 800bdbe:	461d      	mov	r5, r3
 800bdc0:	b08b      	sub	sp, #44	; 0x2c
 800bdc2:	4681      	mov	r9, r0
 800bdc4:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4638      	mov	r0, r7
 800bdce:	4629      	mov	r1, r5
 800bdd0:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800bdd4:	f7f4 fdf2 	bl	80009bc <__aeabi_dcmplt>
 800bdd8:	b108      	cbz	r0, 800bdde <_gcvt+0x26>
 800bdda:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800bdde:	2200      	movs	r2, #0
 800bde0:	2300      	movs	r3, #0
 800bde2:	4638      	mov	r0, r7
 800bde4:	4629      	mov	r1, r5
 800bde6:	f7f4 fddf 	bl	80009a8 <__aeabi_dcmpeq>
 800bdea:	b138      	cbz	r0, 800bdfc <_gcvt+0x44>
 800bdec:	2330      	movs	r3, #48	; 0x30
 800bdee:	7023      	strb	r3, [r4, #0]
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	7063      	strb	r3, [r4, #1]
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	b00b      	add	sp, #44	; 0x2c
 800bdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdfc:	a352      	add	r3, pc, #328	; (adr r3, 800bf48 <_gcvt+0x190>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	4638      	mov	r0, r7
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 fde3 	bl	80009d0 <__aeabi_dcmple>
 800be0a:	b168      	cbz	r0, 800be28 <_gcvt+0x70>
 800be0c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800be10:	3e01      	subs	r6, #1
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	f8cd 8008 	str.w	r8, [sp, #8]
 800be18:	9600      	str	r6, [sp, #0]
 800be1a:	463a      	mov	r2, r7
 800be1c:	462b      	mov	r3, r5
 800be1e:	4621      	mov	r1, r4
 800be20:	4648      	mov	r0, r9
 800be22:	f7ff ff55 	bl	800bcd0 <print_e>
 800be26:	e7e5      	b.n	800bdf4 <_gcvt+0x3c>
 800be28:	4630      	mov	r0, r6
 800be2a:	f001 f867 	bl	800cefc <_mprec_log10>
 800be2e:	463a      	mov	r2, r7
 800be30:	462b      	mov	r3, r5
 800be32:	f7f4 fdcd 	bl	80009d0 <__aeabi_dcmple>
 800be36:	2800      	cmp	r0, #0
 800be38:	d1e8      	bne.n	800be0c <_gcvt+0x54>
 800be3a:	2200      	movs	r2, #0
 800be3c:	4b44      	ldr	r3, [pc, #272]	; (800bf50 <_gcvt+0x198>)
 800be3e:	4629      	mov	r1, r5
 800be40:	4638      	mov	r0, r7
 800be42:	f7f4 fdbb 	bl	80009bc <__aeabi_dcmplt>
 800be46:	a909      	add	r1, sp, #36	; 0x24
 800be48:	aa08      	add	r2, sp, #32
 800be4a:	ab07      	add	r3, sp, #28
 800be4c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800be50:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800be54:	b388      	cbz	r0, 800beba <_gcvt+0x102>
 800be56:	2303      	movs	r3, #3
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	463a      	mov	r2, r7
 800be5c:	462b      	mov	r3, r5
 800be5e:	4648      	mov	r0, r9
 800be60:	f001 fec6 	bl	800dbf0 <_dtoa_r>
 800be64:	f242 730f 	movw	r3, #9999	; 0x270f
 800be68:	9a07      	ldr	r2, [sp, #28]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d027      	beq.n	800bebe <_gcvt+0x106>
 800be6e:	4623      	mov	r3, r4
 800be70:	4426      	add	r6, r4
 800be72:	4607      	mov	r7, r0
 800be74:	f810 1b01 	ldrb.w	r1, [r0], #1
 800be78:	1af2      	subs	r2, r6, r3
 800be7a:	9d07      	ldr	r5, [sp, #28]
 800be7c:	b349      	cbz	r1, 800bed2 <_gcvt+0x11a>
 800be7e:	2d00      	cmp	r5, #0
 800be80:	dc22      	bgt.n	800bec8 <_gcvt+0x110>
 800be82:	f1b8 0f00 	cmp.w	r8, #0
 800be86:	d102      	bne.n	800be8e <_gcvt+0xd6>
 800be88:	7839      	ldrb	r1, [r7, #0]
 800be8a:	2900      	cmp	r1, #0
 800be8c:	d049      	beq.n	800bf22 <_gcvt+0x16a>
 800be8e:	429c      	cmp	r4, r3
 800be90:	bf04      	itt	eq
 800be92:	2130      	moveq	r1, #48	; 0x30
 800be94:	7021      	strbeq	r1, [r4, #0]
 800be96:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800be9a:	f04f 0000 	mov.w	r0, #0
 800be9e:	f04f 0630 	mov.w	r6, #48	; 0x30
 800bea2:	bf08      	it	eq
 800bea4:	1c63      	addeq	r3, r4, #1
 800bea6:	7019      	strb	r1, [r3, #0]
 800bea8:	9907      	ldr	r1, [sp, #28]
 800beaa:	3301      	adds	r3, #1
 800beac:	2900      	cmp	r1, #0
 800beae:	460d      	mov	r5, r1
 800beb0:	db24      	blt.n	800befc <_gcvt+0x144>
 800beb2:	b100      	cbz	r0, 800beb6 <_gcvt+0xfe>
 800beb4:	9107      	str	r1, [sp, #28]
 800beb6:	1e79      	subs	r1, r7, #1
 800beb8:	e02b      	b.n	800bf12 <_gcvt+0x15a>
 800beba:	2302      	movs	r3, #2
 800bebc:	e7cc      	b.n	800be58 <_gcvt+0xa0>
 800bebe:	4601      	mov	r1, r0
 800bec0:	4620      	mov	r0, r4
 800bec2:	f7ff f81d 	bl	800af00 <strcpy>
 800bec6:	e795      	b.n	800bdf4 <_gcvt+0x3c>
 800bec8:	3d01      	subs	r5, #1
 800beca:	f803 1b01 	strb.w	r1, [r3], #1
 800bece:	9507      	str	r5, [sp, #28]
 800bed0:	e7cf      	b.n	800be72 <_gcvt+0xba>
 800bed2:	1aad      	subs	r5, r5, r2
 800bed4:	2630      	movs	r6, #48	; 0x30
 800bed6:	e005      	b.n	800bee4 <_gcvt+0x12c>
 800bed8:	2a00      	cmp	r2, #0
 800beda:	dd06      	ble.n	800beea <_gcvt+0x132>
 800bedc:	2101      	movs	r1, #1
 800bede:	f803 6b01 	strb.w	r6, [r3], #1
 800bee2:	3a01      	subs	r2, #1
 800bee4:	18a8      	adds	r0, r5, r2
 800bee6:	2800      	cmp	r0, #0
 800bee8:	dcf6      	bgt.n	800bed8 <_gcvt+0x120>
 800beea:	2900      	cmp	r1, #0
 800beec:	d0c9      	beq.n	800be82 <_gcvt+0xca>
 800beee:	9007      	str	r0, [sp, #28]
 800bef0:	e7c7      	b.n	800be82 <_gcvt+0xca>
 800bef2:	f803 6b01 	strb.w	r6, [r3], #1
 800bef6:	3a01      	subs	r2, #1
 800bef8:	2001      	movs	r0, #1
 800befa:	e7d7      	b.n	800beac <_gcvt+0xf4>
 800befc:	2a00      	cmp	r2, #0
 800befe:	f101 0101 	add.w	r1, r1, #1
 800bf02:	dcf6      	bgt.n	800bef2 <_gcvt+0x13a>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d0d6      	beq.n	800beb6 <_gcvt+0xfe>
 800bf08:	9507      	str	r5, [sp, #28]
 800bf0a:	e7d4      	b.n	800beb6 <_gcvt+0xfe>
 800bf0c:	f803 0b01 	strb.w	r0, [r3], #1
 800bf10:	3a01      	subs	r2, #1
 800bf12:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf16:	b108      	cbz	r0, 800bf1c <_gcvt+0x164>
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	dcf7      	bgt.n	800bf0c <_gcvt+0x154>
 800bf1c:	f1b8 0f00 	cmp.w	r8, #0
 800bf20:	d10b      	bne.n	800bf3a <_gcvt+0x182>
 800bf22:	2200      	movs	r2, #0
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e765      	b.n	800bdf4 <_gcvt+0x3c>
 800bf28:	f801 6b01 	strb.w	r6, [r1], #1
 800bf2c:	1a68      	subs	r0, r5, r1
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	dcfa      	bgt.n	800bf28 <_gcvt+0x170>
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	bfa8      	it	ge
 800bf36:	189b      	addge	r3, r3, r2
 800bf38:	e7f3      	b.n	800bf22 <_gcvt+0x16a>
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	189d      	adds	r5, r3, r2
 800bf3e:	2630      	movs	r6, #48	; 0x30
 800bf40:	e7f4      	b.n	800bf2c <_gcvt+0x174>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	eb1c432d 	.word	0xeb1c432d
 800bf4c:	3f1a36e2 	.word	0x3f1a36e2
 800bf50:	3ff00000 	.word	0x3ff00000

0800bf54 <std>:
 800bf54:	2300      	movs	r3, #0
 800bf56:	b510      	push	{r4, lr}
 800bf58:	4604      	mov	r4, r0
 800bf5a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf5e:	6083      	str	r3, [r0, #8]
 800bf60:	8181      	strh	r1, [r0, #12]
 800bf62:	6643      	str	r3, [r0, #100]	; 0x64
 800bf64:	81c2      	strh	r2, [r0, #14]
 800bf66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf6a:	6183      	str	r3, [r0, #24]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	2208      	movs	r2, #8
 800bf70:	305c      	adds	r0, #92	; 0x5c
 800bf72:	f7fe feb3 	bl	800acdc <memset>
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <std+0x38>)
 800bf78:	6224      	str	r4, [r4, #32]
 800bf7a:	6263      	str	r3, [r4, #36]	; 0x24
 800bf7c:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <std+0x3c>)
 800bf7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf80:	4b04      	ldr	r3, [pc, #16]	; (800bf94 <std+0x40>)
 800bf82:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <std+0x44>)
 800bf86:	6323      	str	r3, [r4, #48]	; 0x30
 800bf88:	bd10      	pop	{r4, pc}
 800bf8a:	bf00      	nop
 800bf8c:	0800d845 	.word	0x0800d845
 800bf90:	0800d867 	.word	0x0800d867
 800bf94:	0800d89f 	.word	0x0800d89f
 800bf98:	0800d8c3 	.word	0x0800d8c3

0800bf9c <_cleanup_r>:
 800bf9c:	4901      	ldr	r1, [pc, #4]	; (800bfa4 <_cleanup_r+0x8>)
 800bf9e:	f000 b885 	b.w	800c0ac <_fwalk_reent>
 800bfa2:	bf00      	nop
 800bfa4:	0800e865 	.word	0x0800e865

0800bfa8 <__sfmoreglue>:
 800bfa8:	b570      	push	{r4, r5, r6, lr}
 800bfaa:	2568      	movs	r5, #104	; 0x68
 800bfac:	1e4a      	subs	r2, r1, #1
 800bfae:	4355      	muls	r5, r2
 800bfb0:	460e      	mov	r6, r1
 800bfb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfb6:	f7fe fee5 	bl	800ad84 <_malloc_r>
 800bfba:	4604      	mov	r4, r0
 800bfbc:	b140      	cbz	r0, 800bfd0 <__sfmoreglue+0x28>
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	e9c0 1600 	strd	r1, r6, [r0]
 800bfc4:	300c      	adds	r0, #12
 800bfc6:	60a0      	str	r0, [r4, #8]
 800bfc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfcc:	f7fe fe86 	bl	800acdc <memset>
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}

0800bfd4 <__sinit>:
 800bfd4:	6983      	ldr	r3, [r0, #24]
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	4604      	mov	r4, r0
 800bfda:	bb33      	cbnz	r3, 800c02a <__sinit+0x56>
 800bfdc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bfe0:	6503      	str	r3, [r0, #80]	; 0x50
 800bfe2:	4b12      	ldr	r3, [pc, #72]	; (800c02c <__sinit+0x58>)
 800bfe4:	4a12      	ldr	r2, [pc, #72]	; (800c030 <__sinit+0x5c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6282      	str	r2, [r0, #40]	; 0x28
 800bfea:	4298      	cmp	r0, r3
 800bfec:	bf04      	itt	eq
 800bfee:	2301      	moveq	r3, #1
 800bff0:	6183      	streq	r3, [r0, #24]
 800bff2:	f000 f81f 	bl	800c034 <__sfp>
 800bff6:	6060      	str	r0, [r4, #4]
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 f81b 	bl	800c034 <__sfp>
 800bffe:	60a0      	str	r0, [r4, #8]
 800c000:	4620      	mov	r0, r4
 800c002:	f000 f817 	bl	800c034 <__sfp>
 800c006:	2200      	movs	r2, #0
 800c008:	60e0      	str	r0, [r4, #12]
 800c00a:	2104      	movs	r1, #4
 800c00c:	6860      	ldr	r0, [r4, #4]
 800c00e:	f7ff ffa1 	bl	800bf54 <std>
 800c012:	2201      	movs	r2, #1
 800c014:	2109      	movs	r1, #9
 800c016:	68a0      	ldr	r0, [r4, #8]
 800c018:	f7ff ff9c 	bl	800bf54 <std>
 800c01c:	2202      	movs	r2, #2
 800c01e:	2112      	movs	r1, #18
 800c020:	68e0      	ldr	r0, [r4, #12]
 800c022:	f7ff ff97 	bl	800bf54 <std>
 800c026:	2301      	movs	r3, #1
 800c028:	61a3      	str	r3, [r4, #24]
 800c02a:	bd10      	pop	{r4, pc}
 800c02c:	0800f6b4 	.word	0x0800f6b4
 800c030:	0800bf9d 	.word	0x0800bf9d

0800c034 <__sfp>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	4b1b      	ldr	r3, [pc, #108]	; (800c0a4 <__sfp+0x70>)
 800c038:	4607      	mov	r7, r0
 800c03a:	681e      	ldr	r6, [r3, #0]
 800c03c:	69b3      	ldr	r3, [r6, #24]
 800c03e:	b913      	cbnz	r3, 800c046 <__sfp+0x12>
 800c040:	4630      	mov	r0, r6
 800c042:	f7ff ffc7 	bl	800bfd4 <__sinit>
 800c046:	3648      	adds	r6, #72	; 0x48
 800c048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	d503      	bpl.n	800c058 <__sfp+0x24>
 800c050:	6833      	ldr	r3, [r6, #0]
 800c052:	b133      	cbz	r3, 800c062 <__sfp+0x2e>
 800c054:	6836      	ldr	r6, [r6, #0]
 800c056:	e7f7      	b.n	800c048 <__sfp+0x14>
 800c058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c05c:	b16d      	cbz	r5, 800c07a <__sfp+0x46>
 800c05e:	3468      	adds	r4, #104	; 0x68
 800c060:	e7f4      	b.n	800c04c <__sfp+0x18>
 800c062:	2104      	movs	r1, #4
 800c064:	4638      	mov	r0, r7
 800c066:	f7ff ff9f 	bl	800bfa8 <__sfmoreglue>
 800c06a:	6030      	str	r0, [r6, #0]
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d1f1      	bne.n	800c054 <__sfp+0x20>
 800c070:	230c      	movs	r3, #12
 800c072:	4604      	mov	r4, r0
 800c074:	603b      	str	r3, [r7, #0]
 800c076:	4620      	mov	r0, r4
 800c078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c07a:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <__sfp+0x74>)
 800c07c:	6665      	str	r5, [r4, #100]	; 0x64
 800c07e:	e9c4 5500 	strd	r5, r5, [r4]
 800c082:	60a5      	str	r5, [r4, #8]
 800c084:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c088:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c08c:	2208      	movs	r2, #8
 800c08e:	4629      	mov	r1, r5
 800c090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c094:	f7fe fe22 	bl	800acdc <memset>
 800c098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0a0:	e7e9      	b.n	800c076 <__sfp+0x42>
 800c0a2:	bf00      	nop
 800c0a4:	0800f6b4 	.word	0x0800f6b4
 800c0a8:	ffff0001 	.word	0xffff0001

0800c0ac <_fwalk_reent>:
 800c0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	4689      	mov	r9, r1
 800c0b4:	2600      	movs	r6, #0
 800c0b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0ba:	b914      	cbnz	r4, 800c0c2 <_fwalk_reent+0x16>
 800c0bc:	4630      	mov	r0, r6
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c0c6:	3f01      	subs	r7, #1
 800c0c8:	d501      	bpl.n	800c0ce <_fwalk_reent+0x22>
 800c0ca:	6824      	ldr	r4, [r4, #0]
 800c0cc:	e7f5      	b.n	800c0ba <_fwalk_reent+0xe>
 800c0ce:	89ab      	ldrh	r3, [r5, #12]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d907      	bls.n	800c0e4 <_fwalk_reent+0x38>
 800c0d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	d003      	beq.n	800c0e4 <_fwalk_reent+0x38>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4640      	mov	r0, r8
 800c0e0:	47c8      	blx	r9
 800c0e2:	4306      	orrs	r6, r0
 800c0e4:	3568      	adds	r5, #104	; 0x68
 800c0e6:	e7ee      	b.n	800c0c6 <_fwalk_reent+0x1a>

0800c0e8 <rshift>:
 800c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ea:	6906      	ldr	r6, [r0, #16]
 800c0ec:	114b      	asrs	r3, r1, #5
 800c0ee:	429e      	cmp	r6, r3
 800c0f0:	f100 0414 	add.w	r4, r0, #20
 800c0f4:	dd31      	ble.n	800c15a <rshift+0x72>
 800c0f6:	f011 011f 	ands.w	r1, r1, #31
 800c0fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c0fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c102:	d108      	bne.n	800c116 <rshift+0x2e>
 800c104:	4621      	mov	r1, r4
 800c106:	42b2      	cmp	r2, r6
 800c108:	460b      	mov	r3, r1
 800c10a:	d211      	bcs.n	800c130 <rshift+0x48>
 800c10c:	f852 3b04 	ldr.w	r3, [r2], #4
 800c110:	f841 3b04 	str.w	r3, [r1], #4
 800c114:	e7f7      	b.n	800c106 <rshift+0x1e>
 800c116:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c11a:	4623      	mov	r3, r4
 800c11c:	f1c1 0c20 	rsb	ip, r1, #32
 800c120:	40cd      	lsrs	r5, r1
 800c122:	3204      	adds	r2, #4
 800c124:	42b2      	cmp	r2, r6
 800c126:	4617      	mov	r7, r2
 800c128:	d30d      	bcc.n	800c146 <rshift+0x5e>
 800c12a:	601d      	str	r5, [r3, #0]
 800c12c:	b105      	cbz	r5, 800c130 <rshift+0x48>
 800c12e:	3304      	adds	r3, #4
 800c130:	42a3      	cmp	r3, r4
 800c132:	eba3 0204 	sub.w	r2, r3, r4
 800c136:	bf08      	it	eq
 800c138:	2300      	moveq	r3, #0
 800c13a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c13e:	6102      	str	r2, [r0, #16]
 800c140:	bf08      	it	eq
 800c142:	6143      	streq	r3, [r0, #20]
 800c144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c146:	683f      	ldr	r7, [r7, #0]
 800c148:	fa07 f70c 	lsl.w	r7, r7, ip
 800c14c:	433d      	orrs	r5, r7
 800c14e:	f843 5b04 	str.w	r5, [r3], #4
 800c152:	f852 5b04 	ldr.w	r5, [r2], #4
 800c156:	40cd      	lsrs	r5, r1
 800c158:	e7e4      	b.n	800c124 <rshift+0x3c>
 800c15a:	4623      	mov	r3, r4
 800c15c:	e7e8      	b.n	800c130 <rshift+0x48>

0800c15e <__hexdig_fun>:
 800c15e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c162:	2b09      	cmp	r3, #9
 800c164:	d802      	bhi.n	800c16c <__hexdig_fun+0xe>
 800c166:	3820      	subs	r0, #32
 800c168:	b2c0      	uxtb	r0, r0
 800c16a:	4770      	bx	lr
 800c16c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c170:	2b05      	cmp	r3, #5
 800c172:	d801      	bhi.n	800c178 <__hexdig_fun+0x1a>
 800c174:	3847      	subs	r0, #71	; 0x47
 800c176:	e7f7      	b.n	800c168 <__hexdig_fun+0xa>
 800c178:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c17c:	2b05      	cmp	r3, #5
 800c17e:	d801      	bhi.n	800c184 <__hexdig_fun+0x26>
 800c180:	3827      	subs	r0, #39	; 0x27
 800c182:	e7f1      	b.n	800c168 <__hexdig_fun+0xa>
 800c184:	2000      	movs	r0, #0
 800c186:	4770      	bx	lr

0800c188 <__gethex>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	b08b      	sub	sp, #44	; 0x2c
 800c18e:	9002      	str	r0, [sp, #8]
 800c190:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c192:	468a      	mov	sl, r1
 800c194:	4690      	mov	r8, r2
 800c196:	9306      	str	r3, [sp, #24]
 800c198:	f000 fad1 	bl	800c73e <__localeconv_l>
 800c19c:	6803      	ldr	r3, [r0, #0]
 800c19e:	f04f 0b00 	mov.w	fp, #0
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	f7f3 ffd3 	bl	8000150 <strlen>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	9001      	str	r0, [sp, #4]
 800c1ae:	4403      	add	r3, r0
 800c1b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c1b4:	9307      	str	r3, [sp, #28]
 800c1b6:	f8da 3000 	ldr.w	r3, [sl]
 800c1ba:	3302      	adds	r3, #2
 800c1bc:	461f      	mov	r7, r3
 800c1be:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1c2:	2830      	cmp	r0, #48	; 0x30
 800c1c4:	d06c      	beq.n	800c2a0 <__gethex+0x118>
 800c1c6:	f7ff ffca 	bl	800c15e <__hexdig_fun>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d16a      	bne.n	800c2a6 <__gethex+0x11e>
 800c1d0:	9a01      	ldr	r2, [sp, #4]
 800c1d2:	9903      	ldr	r1, [sp, #12]
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	f001 fb78 	bl	800d8ca <strncmp>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d166      	bne.n	800c2ac <__gethex+0x124>
 800c1de:	9b01      	ldr	r3, [sp, #4]
 800c1e0:	5cf8      	ldrb	r0, [r7, r3]
 800c1e2:	18fe      	adds	r6, r7, r3
 800c1e4:	f7ff ffbb 	bl	800c15e <__hexdig_fun>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d062      	beq.n	800c2b2 <__gethex+0x12a>
 800c1ec:	4633      	mov	r3, r6
 800c1ee:	7818      	ldrb	r0, [r3, #0]
 800c1f0:	461f      	mov	r7, r3
 800c1f2:	2830      	cmp	r0, #48	; 0x30
 800c1f4:	f103 0301 	add.w	r3, r3, #1
 800c1f8:	d0f9      	beq.n	800c1ee <__gethex+0x66>
 800c1fa:	f7ff ffb0 	bl	800c15e <__hexdig_fun>
 800c1fe:	fab0 f580 	clz	r5, r0
 800c202:	4634      	mov	r4, r6
 800c204:	f04f 0b01 	mov.w	fp, #1
 800c208:	096d      	lsrs	r5, r5, #5
 800c20a:	463a      	mov	r2, r7
 800c20c:	4616      	mov	r6, r2
 800c20e:	7830      	ldrb	r0, [r6, #0]
 800c210:	3201      	adds	r2, #1
 800c212:	f7ff ffa4 	bl	800c15e <__hexdig_fun>
 800c216:	2800      	cmp	r0, #0
 800c218:	d1f8      	bne.n	800c20c <__gethex+0x84>
 800c21a:	9a01      	ldr	r2, [sp, #4]
 800c21c:	9903      	ldr	r1, [sp, #12]
 800c21e:	4630      	mov	r0, r6
 800c220:	f001 fb53 	bl	800d8ca <strncmp>
 800c224:	b950      	cbnz	r0, 800c23c <__gethex+0xb4>
 800c226:	b954      	cbnz	r4, 800c23e <__gethex+0xb6>
 800c228:	9b01      	ldr	r3, [sp, #4]
 800c22a:	18f4      	adds	r4, r6, r3
 800c22c:	4622      	mov	r2, r4
 800c22e:	4616      	mov	r6, r2
 800c230:	7830      	ldrb	r0, [r6, #0]
 800c232:	3201      	adds	r2, #1
 800c234:	f7ff ff93 	bl	800c15e <__hexdig_fun>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d1f8      	bne.n	800c22e <__gethex+0xa6>
 800c23c:	b10c      	cbz	r4, 800c242 <__gethex+0xba>
 800c23e:	1ba4      	subs	r4, r4, r6
 800c240:	00a4      	lsls	r4, r4, #2
 800c242:	7833      	ldrb	r3, [r6, #0]
 800c244:	2b50      	cmp	r3, #80	; 0x50
 800c246:	d001      	beq.n	800c24c <__gethex+0xc4>
 800c248:	2b70      	cmp	r3, #112	; 0x70
 800c24a:	d140      	bne.n	800c2ce <__gethex+0x146>
 800c24c:	7873      	ldrb	r3, [r6, #1]
 800c24e:	2b2b      	cmp	r3, #43	; 0x2b
 800c250:	d031      	beq.n	800c2b6 <__gethex+0x12e>
 800c252:	2b2d      	cmp	r3, #45	; 0x2d
 800c254:	d033      	beq.n	800c2be <__gethex+0x136>
 800c256:	f04f 0900 	mov.w	r9, #0
 800c25a:	1c71      	adds	r1, r6, #1
 800c25c:	7808      	ldrb	r0, [r1, #0]
 800c25e:	f7ff ff7e 	bl	800c15e <__hexdig_fun>
 800c262:	1e43      	subs	r3, r0, #1
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b18      	cmp	r3, #24
 800c268:	d831      	bhi.n	800c2ce <__gethex+0x146>
 800c26a:	f1a0 0210 	sub.w	r2, r0, #16
 800c26e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c272:	f7ff ff74 	bl	800c15e <__hexdig_fun>
 800c276:	1e43      	subs	r3, r0, #1
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b18      	cmp	r3, #24
 800c27c:	d922      	bls.n	800c2c4 <__gethex+0x13c>
 800c27e:	f1b9 0f00 	cmp.w	r9, #0
 800c282:	d000      	beq.n	800c286 <__gethex+0xfe>
 800c284:	4252      	negs	r2, r2
 800c286:	4414      	add	r4, r2
 800c288:	f8ca 1000 	str.w	r1, [sl]
 800c28c:	b30d      	cbz	r5, 800c2d2 <__gethex+0x14a>
 800c28e:	f1bb 0f00 	cmp.w	fp, #0
 800c292:	bf0c      	ite	eq
 800c294:	2706      	moveq	r7, #6
 800c296:	2700      	movne	r7, #0
 800c298:	4638      	mov	r0, r7
 800c29a:	b00b      	add	sp, #44	; 0x2c
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a0:	f10b 0b01 	add.w	fp, fp, #1
 800c2a4:	e78a      	b.n	800c1bc <__gethex+0x34>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	462c      	mov	r4, r5
 800c2aa:	e7ae      	b.n	800c20a <__gethex+0x82>
 800c2ac:	463e      	mov	r6, r7
 800c2ae:	2501      	movs	r5, #1
 800c2b0:	e7c7      	b.n	800c242 <__gethex+0xba>
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	e7fb      	b.n	800c2ae <__gethex+0x126>
 800c2b6:	f04f 0900 	mov.w	r9, #0
 800c2ba:	1cb1      	adds	r1, r6, #2
 800c2bc:	e7ce      	b.n	800c25c <__gethex+0xd4>
 800c2be:	f04f 0901 	mov.w	r9, #1
 800c2c2:	e7fa      	b.n	800c2ba <__gethex+0x132>
 800c2c4:	230a      	movs	r3, #10
 800c2c6:	fb03 0202 	mla	r2, r3, r2, r0
 800c2ca:	3a10      	subs	r2, #16
 800c2cc:	e7cf      	b.n	800c26e <__gethex+0xe6>
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	e7da      	b.n	800c288 <__gethex+0x100>
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	1bf3      	subs	r3, r6, r7
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	2b07      	cmp	r3, #7
 800c2da:	dc49      	bgt.n	800c370 <__gethex+0x1e8>
 800c2dc:	9802      	ldr	r0, [sp, #8]
 800c2de:	f000 fa4f 	bl	800c780 <_Balloc>
 800c2e2:	f04f 0b00 	mov.w	fp, #0
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	46da      	mov	sl, fp
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	f100 0914 	add.w	r9, r0, #20
 800c2f0:	f1c3 0301 	rsb	r3, r3, #1
 800c2f4:	f8cd 9010 	str.w	r9, [sp, #16]
 800c2f8:	9308      	str	r3, [sp, #32]
 800c2fa:	42b7      	cmp	r7, r6
 800c2fc:	d33b      	bcc.n	800c376 <__gethex+0x1ee>
 800c2fe:	9804      	ldr	r0, [sp, #16]
 800c300:	f840 ab04 	str.w	sl, [r0], #4
 800c304:	eba0 0009 	sub.w	r0, r0, r9
 800c308:	1080      	asrs	r0, r0, #2
 800c30a:	6128      	str	r0, [r5, #16]
 800c30c:	0147      	lsls	r7, r0, #5
 800c30e:	4650      	mov	r0, sl
 800c310:	f000 fafa 	bl	800c908 <__hi0bits>
 800c314:	f8d8 6000 	ldr.w	r6, [r8]
 800c318:	1a3f      	subs	r7, r7, r0
 800c31a:	42b7      	cmp	r7, r6
 800c31c:	dd64      	ble.n	800c3e8 <__gethex+0x260>
 800c31e:	1bbf      	subs	r7, r7, r6
 800c320:	4639      	mov	r1, r7
 800c322:	4628      	mov	r0, r5
 800c324:	f000 fe20 	bl	800cf68 <__any_on>
 800c328:	4682      	mov	sl, r0
 800c32a:	b178      	cbz	r0, 800c34c <__gethex+0x1c4>
 800c32c:	f04f 0a01 	mov.w	sl, #1
 800c330:	1e7b      	subs	r3, r7, #1
 800c332:	1159      	asrs	r1, r3, #5
 800c334:	f003 021f 	and.w	r2, r3, #31
 800c338:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c33c:	fa0a f202 	lsl.w	r2, sl, r2
 800c340:	420a      	tst	r2, r1
 800c342:	d003      	beq.n	800c34c <__gethex+0x1c4>
 800c344:	4553      	cmp	r3, sl
 800c346:	dc46      	bgt.n	800c3d6 <__gethex+0x24e>
 800c348:	f04f 0a02 	mov.w	sl, #2
 800c34c:	4639      	mov	r1, r7
 800c34e:	4628      	mov	r0, r5
 800c350:	f7ff feca 	bl	800c0e8 <rshift>
 800c354:	443c      	add	r4, r7
 800c356:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c35a:	42a3      	cmp	r3, r4
 800c35c:	da52      	bge.n	800c404 <__gethex+0x27c>
 800c35e:	4629      	mov	r1, r5
 800c360:	9802      	ldr	r0, [sp, #8]
 800c362:	f000 fa41 	bl	800c7e8 <_Bfree>
 800c366:	2300      	movs	r3, #0
 800c368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c36a:	27a3      	movs	r7, #163	; 0xa3
 800c36c:	6013      	str	r3, [r2, #0]
 800c36e:	e793      	b.n	800c298 <__gethex+0x110>
 800c370:	3101      	adds	r1, #1
 800c372:	105b      	asrs	r3, r3, #1
 800c374:	e7b0      	b.n	800c2d8 <__gethex+0x150>
 800c376:	1e73      	subs	r3, r6, #1
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	9a07      	ldr	r2, [sp, #28]
 800c37c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c380:	4293      	cmp	r3, r2
 800c382:	d018      	beq.n	800c3b6 <__gethex+0x22e>
 800c384:	f1bb 0f20 	cmp.w	fp, #32
 800c388:	d107      	bne.n	800c39a <__gethex+0x212>
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	f8c3 a000 	str.w	sl, [r3]
 800c390:	f04f 0a00 	mov.w	sl, #0
 800c394:	46d3      	mov	fp, sl
 800c396:	3304      	adds	r3, #4
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c39e:	f7ff fede 	bl	800c15e <__hexdig_fun>
 800c3a2:	f000 000f 	and.w	r0, r0, #15
 800c3a6:	fa00 f00b 	lsl.w	r0, r0, fp
 800c3aa:	ea4a 0a00 	orr.w	sl, sl, r0
 800c3ae:	f10b 0b04 	add.w	fp, fp, #4
 800c3b2:	9b05      	ldr	r3, [sp, #20]
 800c3b4:	e00d      	b.n	800c3d2 <__gethex+0x24a>
 800c3b6:	9b05      	ldr	r3, [sp, #20]
 800c3b8:	9a08      	ldr	r2, [sp, #32]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	42bb      	cmp	r3, r7
 800c3be:	d3e1      	bcc.n	800c384 <__gethex+0x1fc>
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	9a01      	ldr	r2, [sp, #4]
 800c3c4:	9903      	ldr	r1, [sp, #12]
 800c3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c8:	f001 fa7f 	bl	800d8ca <strncmp>
 800c3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d1d8      	bne.n	800c384 <__gethex+0x1fc>
 800c3d2:	461e      	mov	r6, r3
 800c3d4:	e791      	b.n	800c2fa <__gethex+0x172>
 800c3d6:	1eb9      	subs	r1, r7, #2
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f000 fdc5 	bl	800cf68 <__any_on>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d0b2      	beq.n	800c348 <__gethex+0x1c0>
 800c3e2:	f04f 0a03 	mov.w	sl, #3
 800c3e6:	e7b1      	b.n	800c34c <__gethex+0x1c4>
 800c3e8:	da09      	bge.n	800c3fe <__gethex+0x276>
 800c3ea:	1bf7      	subs	r7, r6, r7
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	463a      	mov	r2, r7
 800c3f0:	9802      	ldr	r0, [sp, #8]
 800c3f2:	f000 fbc3 	bl	800cb7c <__lshift>
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	1be4      	subs	r4, r4, r7
 800c3fa:	f100 0914 	add.w	r9, r0, #20
 800c3fe:	f04f 0a00 	mov.w	sl, #0
 800c402:	e7a8      	b.n	800c356 <__gethex+0x1ce>
 800c404:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c408:	42a0      	cmp	r0, r4
 800c40a:	dd6b      	ble.n	800c4e4 <__gethex+0x35c>
 800c40c:	1b04      	subs	r4, r0, r4
 800c40e:	42a6      	cmp	r6, r4
 800c410:	dc2e      	bgt.n	800c470 <__gethex+0x2e8>
 800c412:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c416:	2b02      	cmp	r3, #2
 800c418:	d022      	beq.n	800c460 <__gethex+0x2d8>
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d024      	beq.n	800c468 <__gethex+0x2e0>
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d115      	bne.n	800c44e <__gethex+0x2c6>
 800c422:	42a6      	cmp	r6, r4
 800c424:	d113      	bne.n	800c44e <__gethex+0x2c6>
 800c426:	2e01      	cmp	r6, #1
 800c428:	dc0b      	bgt.n	800c442 <__gethex+0x2ba>
 800c42a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c42e:	9a06      	ldr	r2, [sp, #24]
 800c430:	2762      	movs	r7, #98	; 0x62
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	2301      	movs	r3, #1
 800c436:	612b      	str	r3, [r5, #16]
 800c438:	f8c9 3000 	str.w	r3, [r9]
 800c43c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c43e:	601d      	str	r5, [r3, #0]
 800c440:	e72a      	b.n	800c298 <__gethex+0x110>
 800c442:	1e71      	subs	r1, r6, #1
 800c444:	4628      	mov	r0, r5
 800c446:	f000 fd8f 	bl	800cf68 <__any_on>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d1ed      	bne.n	800c42a <__gethex+0x2a2>
 800c44e:	4629      	mov	r1, r5
 800c450:	9802      	ldr	r0, [sp, #8]
 800c452:	f000 f9c9 	bl	800c7e8 <_Bfree>
 800c456:	2300      	movs	r3, #0
 800c458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c45a:	2750      	movs	r7, #80	; 0x50
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	e71b      	b.n	800c298 <__gethex+0x110>
 800c460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0e1      	beq.n	800c42a <__gethex+0x2a2>
 800c466:	e7f2      	b.n	800c44e <__gethex+0x2c6>
 800c468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1dd      	bne.n	800c42a <__gethex+0x2a2>
 800c46e:	e7ee      	b.n	800c44e <__gethex+0x2c6>
 800c470:	1e67      	subs	r7, r4, #1
 800c472:	f1ba 0f00 	cmp.w	sl, #0
 800c476:	d132      	bne.n	800c4de <__gethex+0x356>
 800c478:	b127      	cbz	r7, 800c484 <__gethex+0x2fc>
 800c47a:	4639      	mov	r1, r7
 800c47c:	4628      	mov	r0, r5
 800c47e:	f000 fd73 	bl	800cf68 <__any_on>
 800c482:	4682      	mov	sl, r0
 800c484:	2301      	movs	r3, #1
 800c486:	117a      	asrs	r2, r7, #5
 800c488:	f007 071f 	and.w	r7, r7, #31
 800c48c:	fa03 f707 	lsl.w	r7, r3, r7
 800c490:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c494:	4621      	mov	r1, r4
 800c496:	421f      	tst	r7, r3
 800c498:	f04f 0702 	mov.w	r7, #2
 800c49c:	4628      	mov	r0, r5
 800c49e:	bf18      	it	ne
 800c4a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c4a4:	1b36      	subs	r6, r6, r4
 800c4a6:	f7ff fe1f 	bl	800c0e8 <rshift>
 800c4aa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c4ae:	f1ba 0f00 	cmp.w	sl, #0
 800c4b2:	d048      	beq.n	800c546 <__gethex+0x3be>
 800c4b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d015      	beq.n	800c4e8 <__gethex+0x360>
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d017      	beq.n	800c4f0 <__gethex+0x368>
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d109      	bne.n	800c4d8 <__gethex+0x350>
 800c4c4:	f01a 0f02 	tst.w	sl, #2
 800c4c8:	d006      	beq.n	800c4d8 <__gethex+0x350>
 800c4ca:	f8d9 3000 	ldr.w	r3, [r9]
 800c4ce:	ea4a 0a03 	orr.w	sl, sl, r3
 800c4d2:	f01a 0f01 	tst.w	sl, #1
 800c4d6:	d10e      	bne.n	800c4f6 <__gethex+0x36e>
 800c4d8:	f047 0710 	orr.w	r7, r7, #16
 800c4dc:	e033      	b.n	800c546 <__gethex+0x3be>
 800c4de:	f04f 0a01 	mov.w	sl, #1
 800c4e2:	e7cf      	b.n	800c484 <__gethex+0x2fc>
 800c4e4:	2701      	movs	r7, #1
 800c4e6:	e7e2      	b.n	800c4ae <__gethex+0x326>
 800c4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4ea:	f1c3 0301 	rsb	r3, r3, #1
 800c4ee:	9315      	str	r3, [sp, #84]	; 0x54
 800c4f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0f0      	beq.n	800c4d8 <__gethex+0x350>
 800c4f6:	f04f 0c00 	mov.w	ip, #0
 800c4fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c4fe:	f105 0314 	add.w	r3, r5, #20
 800c502:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c506:	eb03 010a 	add.w	r1, r3, sl
 800c50a:	4618      	mov	r0, r3
 800c50c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c510:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c514:	d01c      	beq.n	800c550 <__gethex+0x3c8>
 800c516:	3201      	adds	r2, #1
 800c518:	6002      	str	r2, [r0, #0]
 800c51a:	2f02      	cmp	r7, #2
 800c51c:	f105 0314 	add.w	r3, r5, #20
 800c520:	d138      	bne.n	800c594 <__gethex+0x40c>
 800c522:	f8d8 2000 	ldr.w	r2, [r8]
 800c526:	3a01      	subs	r2, #1
 800c528:	42b2      	cmp	r2, r6
 800c52a:	d10a      	bne.n	800c542 <__gethex+0x3ba>
 800c52c:	2201      	movs	r2, #1
 800c52e:	1171      	asrs	r1, r6, #5
 800c530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c534:	f006 061f 	and.w	r6, r6, #31
 800c538:	fa02 f606 	lsl.w	r6, r2, r6
 800c53c:	421e      	tst	r6, r3
 800c53e:	bf18      	it	ne
 800c540:	4617      	movne	r7, r2
 800c542:	f047 0720 	orr.w	r7, r7, #32
 800c546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c548:	601d      	str	r5, [r3, #0]
 800c54a:	9b06      	ldr	r3, [sp, #24]
 800c54c:	601c      	str	r4, [r3, #0]
 800c54e:	e6a3      	b.n	800c298 <__gethex+0x110>
 800c550:	4299      	cmp	r1, r3
 800c552:	f843 cc04 	str.w	ip, [r3, #-4]
 800c556:	d8d8      	bhi.n	800c50a <__gethex+0x382>
 800c558:	68ab      	ldr	r3, [r5, #8]
 800c55a:	4599      	cmp	r9, r3
 800c55c:	db12      	blt.n	800c584 <__gethex+0x3fc>
 800c55e:	6869      	ldr	r1, [r5, #4]
 800c560:	9802      	ldr	r0, [sp, #8]
 800c562:	3101      	adds	r1, #1
 800c564:	f000 f90c 	bl	800c780 <_Balloc>
 800c568:	4683      	mov	fp, r0
 800c56a:	692a      	ldr	r2, [r5, #16]
 800c56c:	f105 010c 	add.w	r1, r5, #12
 800c570:	3202      	adds	r2, #2
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	300c      	adds	r0, #12
 800c576:	f000 f8f6 	bl	800c766 <memcpy>
 800c57a:	4629      	mov	r1, r5
 800c57c:	9802      	ldr	r0, [sp, #8]
 800c57e:	f000 f933 	bl	800c7e8 <_Bfree>
 800c582:	465d      	mov	r5, fp
 800c584:	692b      	ldr	r3, [r5, #16]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	612a      	str	r2, [r5, #16]
 800c58a:	2201      	movs	r2, #1
 800c58c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c590:	615a      	str	r2, [r3, #20]
 800c592:	e7c2      	b.n	800c51a <__gethex+0x392>
 800c594:	692a      	ldr	r2, [r5, #16]
 800c596:	454a      	cmp	r2, r9
 800c598:	dd0b      	ble.n	800c5b2 <__gethex+0x42a>
 800c59a:	2101      	movs	r1, #1
 800c59c:	4628      	mov	r0, r5
 800c59e:	f7ff fda3 	bl	800c0e8 <rshift>
 800c5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5a6:	3401      	adds	r4, #1
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	f6ff aed8 	blt.w	800c35e <__gethex+0x1d6>
 800c5ae:	2701      	movs	r7, #1
 800c5b0:	e7c7      	b.n	800c542 <__gethex+0x3ba>
 800c5b2:	f016 061f 	ands.w	r6, r6, #31
 800c5b6:	d0fa      	beq.n	800c5ae <__gethex+0x426>
 800c5b8:	449a      	add	sl, r3
 800c5ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c5be:	f000 f9a3 	bl	800c908 <__hi0bits>
 800c5c2:	f1c6 0620 	rsb	r6, r6, #32
 800c5c6:	42b0      	cmp	r0, r6
 800c5c8:	dbe7      	blt.n	800c59a <__gethex+0x412>
 800c5ca:	e7f0      	b.n	800c5ae <__gethex+0x426>

0800c5cc <L_shift>:
 800c5cc:	f1c2 0208 	rsb	r2, r2, #8
 800c5d0:	0092      	lsls	r2, r2, #2
 800c5d2:	b570      	push	{r4, r5, r6, lr}
 800c5d4:	f1c2 0620 	rsb	r6, r2, #32
 800c5d8:	6843      	ldr	r3, [r0, #4]
 800c5da:	6804      	ldr	r4, [r0, #0]
 800c5dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c5e0:	432c      	orrs	r4, r5
 800c5e2:	40d3      	lsrs	r3, r2
 800c5e4:	6004      	str	r4, [r0, #0]
 800c5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5ea:	4288      	cmp	r0, r1
 800c5ec:	d3f4      	bcc.n	800c5d8 <L_shift+0xc>
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}

0800c5f0 <__match>:
 800c5f0:	b530      	push	{r4, r5, lr}
 800c5f2:	6803      	ldr	r3, [r0, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5fa:	b914      	cbnz	r4, 800c602 <__match+0x12>
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	2001      	movs	r0, #1
 800c600:	bd30      	pop	{r4, r5, pc}
 800c602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c60a:	2d19      	cmp	r5, #25
 800c60c:	bf98      	it	ls
 800c60e:	3220      	addls	r2, #32
 800c610:	42a2      	cmp	r2, r4
 800c612:	d0f0      	beq.n	800c5f6 <__match+0x6>
 800c614:	2000      	movs	r0, #0
 800c616:	e7f3      	b.n	800c600 <__match+0x10>

0800c618 <__hexnan>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	2500      	movs	r5, #0
 800c61e:	680b      	ldr	r3, [r1, #0]
 800c620:	4682      	mov	sl, r0
 800c622:	115f      	asrs	r7, r3, #5
 800c624:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c628:	f013 031f 	ands.w	r3, r3, #31
 800c62c:	bf18      	it	ne
 800c62e:	3704      	addne	r7, #4
 800c630:	1f3e      	subs	r6, r7, #4
 800c632:	4690      	mov	r8, r2
 800c634:	46b1      	mov	r9, r6
 800c636:	4634      	mov	r4, r6
 800c638:	46ab      	mov	fp, r5
 800c63a:	b087      	sub	sp, #28
 800c63c:	6801      	ldr	r1, [r0, #0]
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	f847 5c04 	str.w	r5, [r7, #-4]
 800c644:	9502      	str	r5, [sp, #8]
 800c646:	784a      	ldrb	r2, [r1, #1]
 800c648:	1c4b      	adds	r3, r1, #1
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	b342      	cbz	r2, 800c6a0 <__hexnan+0x88>
 800c64e:	4610      	mov	r0, r2
 800c650:	9105      	str	r1, [sp, #20]
 800c652:	9204      	str	r2, [sp, #16]
 800c654:	f7ff fd83 	bl	800c15e <__hexdig_fun>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d143      	bne.n	800c6e4 <__hexnan+0xcc>
 800c65c:	9a04      	ldr	r2, [sp, #16]
 800c65e:	9905      	ldr	r1, [sp, #20]
 800c660:	2a20      	cmp	r2, #32
 800c662:	d818      	bhi.n	800c696 <__hexnan+0x7e>
 800c664:	9b02      	ldr	r3, [sp, #8]
 800c666:	459b      	cmp	fp, r3
 800c668:	dd13      	ble.n	800c692 <__hexnan+0x7a>
 800c66a:	454c      	cmp	r4, r9
 800c66c:	d206      	bcs.n	800c67c <__hexnan+0x64>
 800c66e:	2d07      	cmp	r5, #7
 800c670:	dc04      	bgt.n	800c67c <__hexnan+0x64>
 800c672:	462a      	mov	r2, r5
 800c674:	4649      	mov	r1, r9
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff ffa8 	bl	800c5cc <L_shift>
 800c67c:	4544      	cmp	r4, r8
 800c67e:	d944      	bls.n	800c70a <__hexnan+0xf2>
 800c680:	2300      	movs	r3, #0
 800c682:	f1a4 0904 	sub.w	r9, r4, #4
 800c686:	f844 3c04 	str.w	r3, [r4, #-4]
 800c68a:	461d      	mov	r5, r3
 800c68c:	464c      	mov	r4, r9
 800c68e:	f8cd b008 	str.w	fp, [sp, #8]
 800c692:	9903      	ldr	r1, [sp, #12]
 800c694:	e7d7      	b.n	800c646 <__hexnan+0x2e>
 800c696:	2a29      	cmp	r2, #41	; 0x29
 800c698:	d14a      	bne.n	800c730 <__hexnan+0x118>
 800c69a:	3102      	adds	r1, #2
 800c69c:	f8ca 1000 	str.w	r1, [sl]
 800c6a0:	f1bb 0f00 	cmp.w	fp, #0
 800c6a4:	d044      	beq.n	800c730 <__hexnan+0x118>
 800c6a6:	454c      	cmp	r4, r9
 800c6a8:	d206      	bcs.n	800c6b8 <__hexnan+0xa0>
 800c6aa:	2d07      	cmp	r5, #7
 800c6ac:	dc04      	bgt.n	800c6b8 <__hexnan+0xa0>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff ff8a 	bl	800c5cc <L_shift>
 800c6b8:	4544      	cmp	r4, r8
 800c6ba:	d928      	bls.n	800c70e <__hexnan+0xf6>
 800c6bc:	4643      	mov	r3, r8
 800c6be:	f854 2b04 	ldr.w	r2, [r4], #4
 800c6c2:	42a6      	cmp	r6, r4
 800c6c4:	f843 2b04 	str.w	r2, [r3], #4
 800c6c8:	d2f9      	bcs.n	800c6be <__hexnan+0xa6>
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f843 2b04 	str.w	r2, [r3], #4
 800c6d0:	429e      	cmp	r6, r3
 800c6d2:	d2fb      	bcs.n	800c6cc <__hexnan+0xb4>
 800c6d4:	6833      	ldr	r3, [r6, #0]
 800c6d6:	b91b      	cbnz	r3, 800c6e0 <__hexnan+0xc8>
 800c6d8:	4546      	cmp	r6, r8
 800c6da:	d127      	bne.n	800c72c <__hexnan+0x114>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	6033      	str	r3, [r6, #0]
 800c6e0:	2005      	movs	r0, #5
 800c6e2:	e026      	b.n	800c732 <__hexnan+0x11a>
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	2d08      	cmp	r5, #8
 800c6e8:	f10b 0b01 	add.w	fp, fp, #1
 800c6ec:	dd06      	ble.n	800c6fc <__hexnan+0xe4>
 800c6ee:	4544      	cmp	r4, r8
 800c6f0:	d9cf      	bls.n	800c692 <__hexnan+0x7a>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2501      	movs	r5, #1
 800c6f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6fa:	3c04      	subs	r4, #4
 800c6fc:	6822      	ldr	r2, [r4, #0]
 800c6fe:	f000 000f 	and.w	r0, r0, #15
 800c702:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c706:	6020      	str	r0, [r4, #0]
 800c708:	e7c3      	b.n	800c692 <__hexnan+0x7a>
 800c70a:	2508      	movs	r5, #8
 800c70c:	e7c1      	b.n	800c692 <__hexnan+0x7a>
 800c70e:	9b01      	ldr	r3, [sp, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d0df      	beq.n	800c6d4 <__hexnan+0xbc>
 800c714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c718:	f1c3 0320 	rsb	r3, r3, #32
 800c71c:	fa22 f303 	lsr.w	r3, r2, r3
 800c720:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c724:	401a      	ands	r2, r3
 800c726:	f847 2c04 	str.w	r2, [r7, #-4]
 800c72a:	e7d3      	b.n	800c6d4 <__hexnan+0xbc>
 800c72c:	3e04      	subs	r6, #4
 800c72e:	e7d1      	b.n	800c6d4 <__hexnan+0xbc>
 800c730:	2004      	movs	r0, #4
 800c732:	b007      	add	sp, #28
 800c734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c738 <__locale_ctype_ptr_l>:
 800c738:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c73c:	4770      	bx	lr

0800c73e <__localeconv_l>:
 800c73e:	30f0      	adds	r0, #240	; 0xf0
 800c740:	4770      	bx	lr

0800c742 <__ascii_mbtowc>:
 800c742:	b082      	sub	sp, #8
 800c744:	b901      	cbnz	r1, 800c748 <__ascii_mbtowc+0x6>
 800c746:	a901      	add	r1, sp, #4
 800c748:	b142      	cbz	r2, 800c75c <__ascii_mbtowc+0x1a>
 800c74a:	b14b      	cbz	r3, 800c760 <__ascii_mbtowc+0x1e>
 800c74c:	7813      	ldrb	r3, [r2, #0]
 800c74e:	600b      	str	r3, [r1, #0]
 800c750:	7812      	ldrb	r2, [r2, #0]
 800c752:	1c10      	adds	r0, r2, #0
 800c754:	bf18      	it	ne
 800c756:	2001      	movne	r0, #1
 800c758:	b002      	add	sp, #8
 800c75a:	4770      	bx	lr
 800c75c:	4610      	mov	r0, r2
 800c75e:	e7fb      	b.n	800c758 <__ascii_mbtowc+0x16>
 800c760:	f06f 0001 	mvn.w	r0, #1
 800c764:	e7f8      	b.n	800c758 <__ascii_mbtowc+0x16>

0800c766 <memcpy>:
 800c766:	b510      	push	{r4, lr}
 800c768:	1e43      	subs	r3, r0, #1
 800c76a:	440a      	add	r2, r1
 800c76c:	4291      	cmp	r1, r2
 800c76e:	d100      	bne.n	800c772 <memcpy+0xc>
 800c770:	bd10      	pop	{r4, pc}
 800c772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c77a:	e7f7      	b.n	800c76c <memcpy+0x6>

0800c77c <__malloc_lock>:
 800c77c:	4770      	bx	lr

0800c77e <__malloc_unlock>:
 800c77e:	4770      	bx	lr

0800c780 <_Balloc>:
 800c780:	b570      	push	{r4, r5, r6, lr}
 800c782:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c784:	4604      	mov	r4, r0
 800c786:	460e      	mov	r6, r1
 800c788:	b93d      	cbnz	r5, 800c79a <_Balloc+0x1a>
 800c78a:	2010      	movs	r0, #16
 800c78c:	f7fe fa96 	bl	800acbc <malloc>
 800c790:	6260      	str	r0, [r4, #36]	; 0x24
 800c792:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c796:	6005      	str	r5, [r0, #0]
 800c798:	60c5      	str	r5, [r0, #12]
 800c79a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c79c:	68eb      	ldr	r3, [r5, #12]
 800c79e:	b183      	cbz	r3, 800c7c2 <_Balloc+0x42>
 800c7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c7a8:	b9b8      	cbnz	r0, 800c7da <_Balloc+0x5a>
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	fa01 f506 	lsl.w	r5, r1, r6
 800c7b0:	1d6a      	adds	r2, r5, #5
 800c7b2:	0092      	lsls	r2, r2, #2
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 fbf8 	bl	800cfaa <_calloc_r>
 800c7ba:	b160      	cbz	r0, 800c7d6 <_Balloc+0x56>
 800c7bc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c7c0:	e00e      	b.n	800c7e0 <_Balloc+0x60>
 800c7c2:	2221      	movs	r2, #33	; 0x21
 800c7c4:	2104      	movs	r1, #4
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 fbef 	bl	800cfaa <_calloc_r>
 800c7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ce:	60e8      	str	r0, [r5, #12]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e4      	bne.n	800c7a0 <_Balloc+0x20>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
 800c7da:	6802      	ldr	r2, [r0, #0]
 800c7dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7e6:	e7f7      	b.n	800c7d8 <_Balloc+0x58>

0800c7e8 <_Bfree>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	b93c      	cbnz	r4, 800c802 <_Bfree+0x1a>
 800c7f2:	2010      	movs	r0, #16
 800c7f4:	f7fe fa62 	bl	800acbc <malloc>
 800c7f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c7fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7fe:	6004      	str	r4, [r0, #0]
 800c800:	60c4      	str	r4, [r0, #12]
 800c802:	b13d      	cbz	r5, 800c814 <_Bfree+0x2c>
 800c804:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c806:	686a      	ldr	r2, [r5, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c80e:	6029      	str	r1, [r5, #0]
 800c810:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c814:	bd70      	pop	{r4, r5, r6, pc}

0800c816 <__multadd>:
 800c816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81a:	461f      	mov	r7, r3
 800c81c:	4606      	mov	r6, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	2300      	movs	r3, #0
 800c822:	690d      	ldr	r5, [r1, #16]
 800c824:	f101 0c14 	add.w	ip, r1, #20
 800c828:	f8dc 0000 	ldr.w	r0, [ip]
 800c82c:	3301      	adds	r3, #1
 800c82e:	b281      	uxth	r1, r0
 800c830:	fb02 7101 	mla	r1, r2, r1, r7
 800c834:	0c00      	lsrs	r0, r0, #16
 800c836:	0c0f      	lsrs	r7, r1, #16
 800c838:	fb02 7000 	mla	r0, r2, r0, r7
 800c83c:	b289      	uxth	r1, r1
 800c83e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c842:	429d      	cmp	r5, r3
 800c844:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c848:	f84c 1b04 	str.w	r1, [ip], #4
 800c84c:	dcec      	bgt.n	800c828 <__multadd+0x12>
 800c84e:	b1d7      	cbz	r7, 800c886 <__multadd+0x70>
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	42ab      	cmp	r3, r5
 800c854:	dc12      	bgt.n	800c87c <__multadd+0x66>
 800c856:	6861      	ldr	r1, [r4, #4]
 800c858:	4630      	mov	r0, r6
 800c85a:	3101      	adds	r1, #1
 800c85c:	f7ff ff90 	bl	800c780 <_Balloc>
 800c860:	4680      	mov	r8, r0
 800c862:	6922      	ldr	r2, [r4, #16]
 800c864:	f104 010c 	add.w	r1, r4, #12
 800c868:	3202      	adds	r2, #2
 800c86a:	0092      	lsls	r2, r2, #2
 800c86c:	300c      	adds	r0, #12
 800c86e:	f7ff ff7a 	bl	800c766 <memcpy>
 800c872:	4621      	mov	r1, r4
 800c874:	4630      	mov	r0, r6
 800c876:	f7ff ffb7 	bl	800c7e8 <_Bfree>
 800c87a:	4644      	mov	r4, r8
 800c87c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c880:	3501      	adds	r5, #1
 800c882:	615f      	str	r7, [r3, #20]
 800c884:	6125      	str	r5, [r4, #16]
 800c886:	4620      	mov	r0, r4
 800c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c88c <__s2b>:
 800c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c890:	4615      	mov	r5, r2
 800c892:	2209      	movs	r2, #9
 800c894:	461f      	mov	r7, r3
 800c896:	3308      	adds	r3, #8
 800c898:	460c      	mov	r4, r1
 800c89a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c89e:	4606      	mov	r6, r0
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	db20      	blt.n	800c8ea <__s2b+0x5e>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7ff ff69 	bl	800c780 <_Balloc>
 800c8ae:	9b08      	ldr	r3, [sp, #32]
 800c8b0:	2d09      	cmp	r5, #9
 800c8b2:	6143      	str	r3, [r0, #20]
 800c8b4:	f04f 0301 	mov.w	r3, #1
 800c8b8:	6103      	str	r3, [r0, #16]
 800c8ba:	dd19      	ble.n	800c8f0 <__s2b+0x64>
 800c8bc:	f104 0809 	add.w	r8, r4, #9
 800c8c0:	46c1      	mov	r9, r8
 800c8c2:	442c      	add	r4, r5
 800c8c4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	3b30      	subs	r3, #48	; 0x30
 800c8cc:	220a      	movs	r2, #10
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7ff ffa1 	bl	800c816 <__multadd>
 800c8d4:	45a1      	cmp	r9, r4
 800c8d6:	d1f5      	bne.n	800c8c4 <__s2b+0x38>
 800c8d8:	eb08 0405 	add.w	r4, r8, r5
 800c8dc:	3c08      	subs	r4, #8
 800c8de:	1b2d      	subs	r5, r5, r4
 800c8e0:	1963      	adds	r3, r4, r5
 800c8e2:	42bb      	cmp	r3, r7
 800c8e4:	db07      	blt.n	800c8f6 <__s2b+0x6a>
 800c8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ea:	0052      	lsls	r2, r2, #1
 800c8ec:	3101      	adds	r1, #1
 800c8ee:	e7d9      	b.n	800c8a4 <__s2b+0x18>
 800c8f0:	340a      	adds	r4, #10
 800c8f2:	2509      	movs	r5, #9
 800c8f4:	e7f3      	b.n	800c8de <__s2b+0x52>
 800c8f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	3b30      	subs	r3, #48	; 0x30
 800c8fe:	220a      	movs	r2, #10
 800c900:	4630      	mov	r0, r6
 800c902:	f7ff ff88 	bl	800c816 <__multadd>
 800c906:	e7eb      	b.n	800c8e0 <__s2b+0x54>

0800c908 <__hi0bits>:
 800c908:	0c02      	lsrs	r2, r0, #16
 800c90a:	0412      	lsls	r2, r2, #16
 800c90c:	4603      	mov	r3, r0
 800c90e:	b9b2      	cbnz	r2, 800c93e <__hi0bits+0x36>
 800c910:	0403      	lsls	r3, r0, #16
 800c912:	2010      	movs	r0, #16
 800c914:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c918:	bf04      	itt	eq
 800c91a:	021b      	lsleq	r3, r3, #8
 800c91c:	3008      	addeq	r0, #8
 800c91e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c922:	bf04      	itt	eq
 800c924:	011b      	lsleq	r3, r3, #4
 800c926:	3004      	addeq	r0, #4
 800c928:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c92c:	bf04      	itt	eq
 800c92e:	009b      	lsleq	r3, r3, #2
 800c930:	3002      	addeq	r0, #2
 800c932:	2b00      	cmp	r3, #0
 800c934:	db06      	blt.n	800c944 <__hi0bits+0x3c>
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	d503      	bpl.n	800c942 <__hi0bits+0x3a>
 800c93a:	3001      	adds	r0, #1
 800c93c:	4770      	bx	lr
 800c93e:	2000      	movs	r0, #0
 800c940:	e7e8      	b.n	800c914 <__hi0bits+0xc>
 800c942:	2020      	movs	r0, #32
 800c944:	4770      	bx	lr

0800c946 <__lo0bits>:
 800c946:	6803      	ldr	r3, [r0, #0]
 800c948:	4601      	mov	r1, r0
 800c94a:	f013 0207 	ands.w	r2, r3, #7
 800c94e:	d00b      	beq.n	800c968 <__lo0bits+0x22>
 800c950:	07da      	lsls	r2, r3, #31
 800c952:	d423      	bmi.n	800c99c <__lo0bits+0x56>
 800c954:	0798      	lsls	r0, r3, #30
 800c956:	bf49      	itett	mi
 800c958:	085b      	lsrmi	r3, r3, #1
 800c95a:	089b      	lsrpl	r3, r3, #2
 800c95c:	2001      	movmi	r0, #1
 800c95e:	600b      	strmi	r3, [r1, #0]
 800c960:	bf5c      	itt	pl
 800c962:	600b      	strpl	r3, [r1, #0]
 800c964:	2002      	movpl	r0, #2
 800c966:	4770      	bx	lr
 800c968:	b298      	uxth	r0, r3
 800c96a:	b9a8      	cbnz	r0, 800c998 <__lo0bits+0x52>
 800c96c:	2010      	movs	r0, #16
 800c96e:	0c1b      	lsrs	r3, r3, #16
 800c970:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c974:	bf04      	itt	eq
 800c976:	0a1b      	lsreq	r3, r3, #8
 800c978:	3008      	addeq	r0, #8
 800c97a:	071a      	lsls	r2, r3, #28
 800c97c:	bf04      	itt	eq
 800c97e:	091b      	lsreq	r3, r3, #4
 800c980:	3004      	addeq	r0, #4
 800c982:	079a      	lsls	r2, r3, #30
 800c984:	bf04      	itt	eq
 800c986:	089b      	lsreq	r3, r3, #2
 800c988:	3002      	addeq	r0, #2
 800c98a:	07da      	lsls	r2, r3, #31
 800c98c:	d402      	bmi.n	800c994 <__lo0bits+0x4e>
 800c98e:	085b      	lsrs	r3, r3, #1
 800c990:	d006      	beq.n	800c9a0 <__lo0bits+0x5a>
 800c992:	3001      	adds	r0, #1
 800c994:	600b      	str	r3, [r1, #0]
 800c996:	4770      	bx	lr
 800c998:	4610      	mov	r0, r2
 800c99a:	e7e9      	b.n	800c970 <__lo0bits+0x2a>
 800c99c:	2000      	movs	r0, #0
 800c99e:	4770      	bx	lr
 800c9a0:	2020      	movs	r0, #32
 800c9a2:	4770      	bx	lr

0800c9a4 <__i2b>:
 800c9a4:	b510      	push	{r4, lr}
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	f7ff fee9 	bl	800c780 <_Balloc>
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	6144      	str	r4, [r0, #20]
 800c9b2:	6102      	str	r2, [r0, #16]
 800c9b4:	bd10      	pop	{r4, pc}

0800c9b6 <__multiply>:
 800c9b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ba:	4614      	mov	r4, r2
 800c9bc:	690a      	ldr	r2, [r1, #16]
 800c9be:	6923      	ldr	r3, [r4, #16]
 800c9c0:	4688      	mov	r8, r1
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	bfbe      	ittt	lt
 800c9c6:	460b      	movlt	r3, r1
 800c9c8:	46a0      	movlt	r8, r4
 800c9ca:	461c      	movlt	r4, r3
 800c9cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c9d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9dc:	eb07 0609 	add.w	r6, r7, r9
 800c9e0:	42b3      	cmp	r3, r6
 800c9e2:	bfb8      	it	lt
 800c9e4:	3101      	addlt	r1, #1
 800c9e6:	f7ff fecb 	bl	800c780 <_Balloc>
 800c9ea:	f100 0514 	add.w	r5, r0, #20
 800c9ee:	462b      	mov	r3, r5
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c9f6:	4573      	cmp	r3, lr
 800c9f8:	d316      	bcc.n	800ca28 <__multiply+0x72>
 800c9fa:	f104 0214 	add.w	r2, r4, #20
 800c9fe:	f108 0114 	add.w	r1, r8, #20
 800ca02:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ca06:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	9b00      	ldr	r3, [sp, #0]
 800ca0e:	9201      	str	r2, [sp, #4]
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d80c      	bhi.n	800ca2e <__multiply+0x78>
 800ca14:	2e00      	cmp	r6, #0
 800ca16:	dd03      	ble.n	800ca20 <__multiply+0x6a>
 800ca18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d05d      	beq.n	800cadc <__multiply+0x126>
 800ca20:	6106      	str	r6, [r0, #16]
 800ca22:	b003      	add	sp, #12
 800ca24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca28:	f843 2b04 	str.w	r2, [r3], #4
 800ca2c:	e7e3      	b.n	800c9f6 <__multiply+0x40>
 800ca2e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ca32:	f1bb 0f00 	cmp.w	fp, #0
 800ca36:	d023      	beq.n	800ca80 <__multiply+0xca>
 800ca38:	4689      	mov	r9, r1
 800ca3a:	46ac      	mov	ip, r5
 800ca3c:	f04f 0800 	mov.w	r8, #0
 800ca40:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca44:	f8dc a000 	ldr.w	sl, [ip]
 800ca48:	b2a3      	uxth	r3, r4
 800ca4a:	fa1f fa8a 	uxth.w	sl, sl
 800ca4e:	fb0b a303 	mla	r3, fp, r3, sl
 800ca52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca56:	f8dc 4000 	ldr.w	r4, [ip]
 800ca5a:	4443      	add	r3, r8
 800ca5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ca60:	fb0b 840a 	mla	r4, fp, sl, r8
 800ca64:	46e2      	mov	sl, ip
 800ca66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ca70:	454f      	cmp	r7, r9
 800ca72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ca76:	f84a 3b04 	str.w	r3, [sl], #4
 800ca7a:	d82b      	bhi.n	800cad4 <__multiply+0x11e>
 800ca7c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	3204      	adds	r2, #4
 800ca84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ca88:	f1ba 0f00 	cmp.w	sl, #0
 800ca8c:	d020      	beq.n	800cad0 <__multiply+0x11a>
 800ca8e:	4689      	mov	r9, r1
 800ca90:	46a8      	mov	r8, r5
 800ca92:	f04f 0b00 	mov.w	fp, #0
 800ca96:	682b      	ldr	r3, [r5, #0]
 800ca98:	f8b9 c000 	ldrh.w	ip, [r9]
 800ca9c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	fb0a 440c 	mla	r4, sl, ip, r4
 800caa6:	46c4      	mov	ip, r8
 800caa8:	445c      	add	r4, fp
 800caaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800caae:	f84c 3b04 	str.w	r3, [ip], #4
 800cab2:	f859 3b04 	ldr.w	r3, [r9], #4
 800cab6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800caba:	0c1b      	lsrs	r3, r3, #16
 800cabc:	fb0a b303 	mla	r3, sl, r3, fp
 800cac0:	454f      	cmp	r7, r9
 800cac2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cac6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800caca:	d805      	bhi.n	800cad8 <__multiply+0x122>
 800cacc:	f8c8 3004 	str.w	r3, [r8, #4]
 800cad0:	3504      	adds	r5, #4
 800cad2:	e79b      	b.n	800ca0c <__multiply+0x56>
 800cad4:	46d4      	mov	ip, sl
 800cad6:	e7b3      	b.n	800ca40 <__multiply+0x8a>
 800cad8:	46e0      	mov	r8, ip
 800cada:	e7dd      	b.n	800ca98 <__multiply+0xe2>
 800cadc:	3e01      	subs	r6, #1
 800cade:	e799      	b.n	800ca14 <__multiply+0x5e>

0800cae0 <__pow5mult>:
 800cae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae4:	4615      	mov	r5, r2
 800cae6:	f012 0203 	ands.w	r2, r2, #3
 800caea:	4606      	mov	r6, r0
 800caec:	460f      	mov	r7, r1
 800caee:	d007      	beq.n	800cb00 <__pow5mult+0x20>
 800caf0:	4c21      	ldr	r4, [pc, #132]	; (800cb78 <__pow5mult+0x98>)
 800caf2:	3a01      	subs	r2, #1
 800caf4:	2300      	movs	r3, #0
 800caf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cafa:	f7ff fe8c 	bl	800c816 <__multadd>
 800cafe:	4607      	mov	r7, r0
 800cb00:	10ad      	asrs	r5, r5, #2
 800cb02:	d035      	beq.n	800cb70 <__pow5mult+0x90>
 800cb04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb06:	b93c      	cbnz	r4, 800cb18 <__pow5mult+0x38>
 800cb08:	2010      	movs	r0, #16
 800cb0a:	f7fe f8d7 	bl	800acbc <malloc>
 800cb0e:	6270      	str	r0, [r6, #36]	; 0x24
 800cb10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb14:	6004      	str	r4, [r0, #0]
 800cb16:	60c4      	str	r4, [r0, #12]
 800cb18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb20:	b94c      	cbnz	r4, 800cb36 <__pow5mult+0x56>
 800cb22:	f240 2171 	movw	r1, #625	; 0x271
 800cb26:	4630      	mov	r0, r6
 800cb28:	f7ff ff3c 	bl	800c9a4 <__i2b>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	4604      	mov	r4, r0
 800cb30:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb34:	6003      	str	r3, [r0, #0]
 800cb36:	f04f 0800 	mov.w	r8, #0
 800cb3a:	07eb      	lsls	r3, r5, #31
 800cb3c:	d50a      	bpl.n	800cb54 <__pow5mult+0x74>
 800cb3e:	4639      	mov	r1, r7
 800cb40:	4622      	mov	r2, r4
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7ff ff37 	bl	800c9b6 <__multiply>
 800cb48:	4681      	mov	r9, r0
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f7ff fe4b 	bl	800c7e8 <_Bfree>
 800cb52:	464f      	mov	r7, r9
 800cb54:	106d      	asrs	r5, r5, #1
 800cb56:	d00b      	beq.n	800cb70 <__pow5mult+0x90>
 800cb58:	6820      	ldr	r0, [r4, #0]
 800cb5a:	b938      	cbnz	r0, 800cb6c <__pow5mult+0x8c>
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff ff28 	bl	800c9b6 <__multiply>
 800cb66:	6020      	str	r0, [r4, #0]
 800cb68:	f8c0 8000 	str.w	r8, [r0]
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	e7e4      	b.n	800cb3a <__pow5mult+0x5a>
 800cb70:	4638      	mov	r0, r7
 800cb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb76:	bf00      	nop
 800cb78:	0800f870 	.word	0x0800f870

0800cb7c <__lshift>:
 800cb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb80:	460c      	mov	r4, r1
 800cb82:	4607      	mov	r7, r0
 800cb84:	4616      	mov	r6, r2
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb8c:	eb0a 0903 	add.w	r9, sl, r3
 800cb90:	6849      	ldr	r1, [r1, #4]
 800cb92:	68a3      	ldr	r3, [r4, #8]
 800cb94:	f109 0501 	add.w	r5, r9, #1
 800cb98:	42ab      	cmp	r3, r5
 800cb9a:	db32      	blt.n	800cc02 <__lshift+0x86>
 800cb9c:	4638      	mov	r0, r7
 800cb9e:	f7ff fdef 	bl	800c780 <_Balloc>
 800cba2:	2300      	movs	r3, #0
 800cba4:	4680      	mov	r8, r0
 800cba6:	461a      	mov	r2, r3
 800cba8:	f100 0114 	add.w	r1, r0, #20
 800cbac:	4553      	cmp	r3, sl
 800cbae:	db2b      	blt.n	800cc08 <__lshift+0x8c>
 800cbb0:	6920      	ldr	r0, [r4, #16]
 800cbb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbb6:	f104 0314 	add.w	r3, r4, #20
 800cbba:	f016 021f 	ands.w	r2, r6, #31
 800cbbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbc6:	d025      	beq.n	800cc14 <__lshift+0x98>
 800cbc8:	2000      	movs	r0, #0
 800cbca:	f1c2 0e20 	rsb	lr, r2, #32
 800cbce:	468a      	mov	sl, r1
 800cbd0:	681e      	ldr	r6, [r3, #0]
 800cbd2:	4096      	lsls	r6, r2
 800cbd4:	4330      	orrs	r0, r6
 800cbd6:	f84a 0b04 	str.w	r0, [sl], #4
 800cbda:	f853 0b04 	ldr.w	r0, [r3], #4
 800cbde:	459c      	cmp	ip, r3
 800cbe0:	fa20 f00e 	lsr.w	r0, r0, lr
 800cbe4:	d814      	bhi.n	800cc10 <__lshift+0x94>
 800cbe6:	6048      	str	r0, [r1, #4]
 800cbe8:	b108      	cbz	r0, 800cbee <__lshift+0x72>
 800cbea:	f109 0502 	add.w	r5, r9, #2
 800cbee:	3d01      	subs	r5, #1
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f8c8 5010 	str.w	r5, [r8, #16]
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	f7ff fdf6 	bl	800c7e8 <_Bfree>
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc02:	3101      	adds	r1, #1
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	e7c7      	b.n	800cb98 <__lshift+0x1c>
 800cc08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	e7cd      	b.n	800cbac <__lshift+0x30>
 800cc10:	4651      	mov	r1, sl
 800cc12:	e7dc      	b.n	800cbce <__lshift+0x52>
 800cc14:	3904      	subs	r1, #4
 800cc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1a:	459c      	cmp	ip, r3
 800cc1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc20:	d8f9      	bhi.n	800cc16 <__lshift+0x9a>
 800cc22:	e7e4      	b.n	800cbee <__lshift+0x72>

0800cc24 <__mcmp>:
 800cc24:	6903      	ldr	r3, [r0, #16]
 800cc26:	690a      	ldr	r2, [r1, #16]
 800cc28:	b530      	push	{r4, r5, lr}
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	d10c      	bne.n	800cc48 <__mcmp+0x24>
 800cc2e:	0092      	lsls	r2, r2, #2
 800cc30:	3014      	adds	r0, #20
 800cc32:	3114      	adds	r1, #20
 800cc34:	1884      	adds	r4, r0, r2
 800cc36:	4411      	add	r1, r2
 800cc38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc40:	4295      	cmp	r5, r2
 800cc42:	d003      	beq.n	800cc4c <__mcmp+0x28>
 800cc44:	d305      	bcc.n	800cc52 <__mcmp+0x2e>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4618      	mov	r0, r3
 800cc4a:	bd30      	pop	{r4, r5, pc}
 800cc4c:	42a0      	cmp	r0, r4
 800cc4e:	d3f3      	bcc.n	800cc38 <__mcmp+0x14>
 800cc50:	e7fa      	b.n	800cc48 <__mcmp+0x24>
 800cc52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc56:	e7f7      	b.n	800cc48 <__mcmp+0x24>

0800cc58 <__mdiff>:
 800cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc5c:	460d      	mov	r5, r1
 800cc5e:	4607      	mov	r7, r0
 800cc60:	4611      	mov	r1, r2
 800cc62:	4628      	mov	r0, r5
 800cc64:	4614      	mov	r4, r2
 800cc66:	f7ff ffdd 	bl	800cc24 <__mcmp>
 800cc6a:	1e06      	subs	r6, r0, #0
 800cc6c:	d108      	bne.n	800cc80 <__mdiff+0x28>
 800cc6e:	4631      	mov	r1, r6
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7ff fd85 	bl	800c780 <_Balloc>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc80:	bfa4      	itt	ge
 800cc82:	4623      	movge	r3, r4
 800cc84:	462c      	movge	r4, r5
 800cc86:	4638      	mov	r0, r7
 800cc88:	6861      	ldr	r1, [r4, #4]
 800cc8a:	bfa6      	itte	ge
 800cc8c:	461d      	movge	r5, r3
 800cc8e:	2600      	movge	r6, #0
 800cc90:	2601      	movlt	r6, #1
 800cc92:	f7ff fd75 	bl	800c780 <_Balloc>
 800cc96:	f04f 0e00 	mov.w	lr, #0
 800cc9a:	60c6      	str	r6, [r0, #12]
 800cc9c:	692b      	ldr	r3, [r5, #16]
 800cc9e:	6926      	ldr	r6, [r4, #16]
 800cca0:	f104 0214 	add.w	r2, r4, #20
 800cca4:	f105 0914 	add.w	r9, r5, #20
 800cca8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ccac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ccb0:	f100 0114 	add.w	r1, r0, #20
 800ccb4:	f852 ab04 	ldr.w	sl, [r2], #4
 800ccb8:	f859 5b04 	ldr.w	r5, [r9], #4
 800ccbc:	fa1f f38a 	uxth.w	r3, sl
 800ccc0:	4473      	add	r3, lr
 800ccc2:	b2ac      	uxth	r4, r5
 800ccc4:	1b1b      	subs	r3, r3, r4
 800ccc6:	0c2c      	lsrs	r4, r5, #16
 800ccc8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800cccc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ccd6:	45c8      	cmp	r8, r9
 800ccd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ccdc:	4694      	mov	ip, r2
 800ccde:	f841 4b04 	str.w	r4, [r1], #4
 800cce2:	d8e7      	bhi.n	800ccb4 <__mdiff+0x5c>
 800cce4:	45bc      	cmp	ip, r7
 800cce6:	d304      	bcc.n	800ccf2 <__mdiff+0x9a>
 800cce8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ccec:	b183      	cbz	r3, 800cd10 <__mdiff+0xb8>
 800ccee:	6106      	str	r6, [r0, #16]
 800ccf0:	e7c4      	b.n	800cc7c <__mdiff+0x24>
 800ccf2:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ccf6:	b2a2      	uxth	r2, r4
 800ccf8:	4472      	add	r2, lr
 800ccfa:	1413      	asrs	r3, r2, #16
 800ccfc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cd00:	b292      	uxth	r2, r2
 800cd02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cd06:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cd0a:	f841 2b04 	str.w	r2, [r1], #4
 800cd0e:	e7e9      	b.n	800cce4 <__mdiff+0x8c>
 800cd10:	3e01      	subs	r6, #1
 800cd12:	e7e9      	b.n	800cce8 <__mdiff+0x90>

0800cd14 <__ulp>:
 800cd14:	4b10      	ldr	r3, [pc, #64]	; (800cd58 <__ulp+0x44>)
 800cd16:	400b      	ands	r3, r1
 800cd18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dd02      	ble.n	800cd26 <__ulp+0x12>
 800cd20:	2000      	movs	r0, #0
 800cd22:	4619      	mov	r1, r3
 800cd24:	4770      	bx	lr
 800cd26:	425b      	negs	r3, r3
 800cd28:	151b      	asrs	r3, r3, #20
 800cd2a:	2b13      	cmp	r3, #19
 800cd2c:	f04f 0000 	mov.w	r0, #0
 800cd30:	f04f 0100 	mov.w	r1, #0
 800cd34:	dc04      	bgt.n	800cd40 <__ulp+0x2c>
 800cd36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cd3a:	fa42 f103 	asr.w	r1, r2, r3
 800cd3e:	4770      	bx	lr
 800cd40:	2201      	movs	r2, #1
 800cd42:	3b14      	subs	r3, #20
 800cd44:	2b1e      	cmp	r3, #30
 800cd46:	bfce      	itee	gt
 800cd48:	4613      	movgt	r3, r2
 800cd4a:	f1c3 031f 	rsble	r3, r3, #31
 800cd4e:	fa02 f303 	lslle.w	r3, r2, r3
 800cd52:	4618      	mov	r0, r3
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	7ff00000 	.word	0x7ff00000

0800cd5c <__b2d>:
 800cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd60:	6907      	ldr	r7, [r0, #16]
 800cd62:	f100 0914 	add.w	r9, r0, #20
 800cd66:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cd6a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cd6e:	f1a7 0804 	sub.w	r8, r7, #4
 800cd72:	4630      	mov	r0, r6
 800cd74:	f7ff fdc8 	bl	800c908 <__hi0bits>
 800cd78:	f1c0 0320 	rsb	r3, r0, #32
 800cd7c:	280a      	cmp	r0, #10
 800cd7e:	600b      	str	r3, [r1, #0]
 800cd80:	491e      	ldr	r1, [pc, #120]	; (800cdfc <__b2d+0xa0>)
 800cd82:	dc17      	bgt.n	800cdb4 <__b2d+0x58>
 800cd84:	45c1      	cmp	r9, r8
 800cd86:	bf28      	it	cs
 800cd88:	2200      	movcs	r2, #0
 800cd8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cd8e:	fa26 f30c 	lsr.w	r3, r6, ip
 800cd92:	bf38      	it	cc
 800cd94:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cd98:	ea43 0501 	orr.w	r5, r3, r1
 800cd9c:	f100 0315 	add.w	r3, r0, #21
 800cda0:	fa06 f303 	lsl.w	r3, r6, r3
 800cda4:	fa22 f20c 	lsr.w	r2, r2, ip
 800cda8:	ea43 0402 	orr.w	r4, r3, r2
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdb4:	45c1      	cmp	r9, r8
 800cdb6:	bf3a      	itte	cc
 800cdb8:	f1a7 0808 	subcc.w	r8, r7, #8
 800cdbc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cdc0:	2200      	movcs	r2, #0
 800cdc2:	f1b0 030b 	subs.w	r3, r0, #11
 800cdc6:	d015      	beq.n	800cdf4 <__b2d+0x98>
 800cdc8:	409e      	lsls	r6, r3
 800cdca:	f1c3 0720 	rsb	r7, r3, #32
 800cdce:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800cdd2:	fa22 f107 	lsr.w	r1, r2, r7
 800cdd6:	45c8      	cmp	r8, r9
 800cdd8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800cddc:	ea46 0501 	orr.w	r5, r6, r1
 800cde0:	bf94      	ite	ls
 800cde2:	2100      	movls	r1, #0
 800cde4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cde8:	fa02 f003 	lsl.w	r0, r2, r3
 800cdec:	40f9      	lsrs	r1, r7
 800cdee:	ea40 0401 	orr.w	r4, r0, r1
 800cdf2:	e7db      	b.n	800cdac <__b2d+0x50>
 800cdf4:	ea46 0501 	orr.w	r5, r6, r1
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	e7d7      	b.n	800cdac <__b2d+0x50>
 800cdfc:	3ff00000 	.word	0x3ff00000

0800ce00 <__d2b>:
 800ce00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ce04:	461c      	mov	r4, r3
 800ce06:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ce0a:	2101      	movs	r1, #1
 800ce0c:	4690      	mov	r8, r2
 800ce0e:	f7ff fcb7 	bl	800c780 <_Balloc>
 800ce12:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ce16:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ce1a:	4607      	mov	r7, r0
 800ce1c:	bb34      	cbnz	r4, 800ce6c <__d2b+0x6c>
 800ce1e:	9201      	str	r2, [sp, #4]
 800ce20:	f1b8 0200 	subs.w	r2, r8, #0
 800ce24:	d027      	beq.n	800ce76 <__d2b+0x76>
 800ce26:	a802      	add	r0, sp, #8
 800ce28:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ce2c:	f7ff fd8b 	bl	800c946 <__lo0bits>
 800ce30:	9900      	ldr	r1, [sp, #0]
 800ce32:	b1f0      	cbz	r0, 800ce72 <__d2b+0x72>
 800ce34:	9a01      	ldr	r2, [sp, #4]
 800ce36:	f1c0 0320 	rsb	r3, r0, #32
 800ce3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3e:	430b      	orrs	r3, r1
 800ce40:	40c2      	lsrs	r2, r0
 800ce42:	617b      	str	r3, [r7, #20]
 800ce44:	9201      	str	r2, [sp, #4]
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bf14      	ite	ne
 800ce4c:	2102      	movne	r1, #2
 800ce4e:	2101      	moveq	r1, #1
 800ce50:	61bb      	str	r3, [r7, #24]
 800ce52:	6139      	str	r1, [r7, #16]
 800ce54:	b1c4      	cbz	r4, 800ce88 <__d2b+0x88>
 800ce56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ce5a:	4404      	add	r4, r0
 800ce5c:	6034      	str	r4, [r6, #0]
 800ce5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce62:	6028      	str	r0, [r5, #0]
 800ce64:	4638      	mov	r0, r7
 800ce66:	b002      	add	sp, #8
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ce70:	e7d5      	b.n	800ce1e <__d2b+0x1e>
 800ce72:	6179      	str	r1, [r7, #20]
 800ce74:	e7e7      	b.n	800ce46 <__d2b+0x46>
 800ce76:	a801      	add	r0, sp, #4
 800ce78:	f7ff fd65 	bl	800c946 <__lo0bits>
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	6139      	str	r1, [r7, #16]
 800ce82:	617b      	str	r3, [r7, #20]
 800ce84:	3020      	adds	r0, #32
 800ce86:	e7e5      	b.n	800ce54 <__d2b+0x54>
 800ce88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ce90:	6030      	str	r0, [r6, #0]
 800ce92:	6918      	ldr	r0, [r3, #16]
 800ce94:	f7ff fd38 	bl	800c908 <__hi0bits>
 800ce98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ce9c:	e7e1      	b.n	800ce62 <__d2b+0x62>

0800ce9e <__ratio>:
 800ce9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea2:	4688      	mov	r8, r1
 800cea4:	4669      	mov	r1, sp
 800cea6:	4681      	mov	r9, r0
 800cea8:	f7ff ff58 	bl	800cd5c <__b2d>
 800ceac:	468b      	mov	fp, r1
 800ceae:	4606      	mov	r6, r0
 800ceb0:	460f      	mov	r7, r1
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	a901      	add	r1, sp, #4
 800ceb6:	f7ff ff51 	bl	800cd5c <__b2d>
 800ceba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cebe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cec2:	460d      	mov	r5, r1
 800cec4:	eba3 0c02 	sub.w	ip, r3, r2
 800cec8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	bfd5      	itete	le
 800ced6:	460a      	movle	r2, r1
 800ced8:	463a      	movgt	r2, r7
 800ceda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cede:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cee2:	bfd8      	it	le
 800cee4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800cee8:	462b      	mov	r3, r5
 800ceea:	4602      	mov	r2, r0
 800ceec:	4659      	mov	r1, fp
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7f3 fc1c 	bl	800072c <__aeabi_ddiv>
 800cef4:	b003      	add	sp, #12
 800cef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cefc <_mprec_log10>:
 800cefc:	2817      	cmp	r0, #23
 800cefe:	b5d0      	push	{r4, r6, r7, lr}
 800cf00:	4604      	mov	r4, r0
 800cf02:	dc05      	bgt.n	800cf10 <_mprec_log10+0x14>
 800cf04:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <_mprec_log10+0x2c>)
 800cf06:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800cf0a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cf0e:	bdd0      	pop	{r4, r6, r7, pc}
 800cf10:	2000      	movs	r0, #0
 800cf12:	2600      	movs	r6, #0
 800cf14:	4905      	ldr	r1, [pc, #20]	; (800cf2c <_mprec_log10+0x30>)
 800cf16:	4f06      	ldr	r7, [pc, #24]	; (800cf30 <_mprec_log10+0x34>)
 800cf18:	4632      	mov	r2, r6
 800cf1a:	463b      	mov	r3, r7
 800cf1c:	f7f3 fadc 	bl	80004d8 <__aeabi_dmul>
 800cf20:	3c01      	subs	r4, #1
 800cf22:	d1f9      	bne.n	800cf18 <_mprec_log10+0x1c>
 800cf24:	e7f3      	b.n	800cf0e <_mprec_log10+0x12>
 800cf26:	bf00      	nop
 800cf28:	0800f7a8 	.word	0x0800f7a8
 800cf2c:	3ff00000 	.word	0x3ff00000
 800cf30:	40240000 	.word	0x40240000

0800cf34 <__copybits>:
 800cf34:	3901      	subs	r1, #1
 800cf36:	b510      	push	{r4, lr}
 800cf38:	1149      	asrs	r1, r1, #5
 800cf3a:	6914      	ldr	r4, [r2, #16]
 800cf3c:	3101      	adds	r1, #1
 800cf3e:	f102 0314 	add.w	r3, r2, #20
 800cf42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf4a:	42a3      	cmp	r3, r4
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	d303      	bcc.n	800cf58 <__copybits+0x24>
 800cf50:	2300      	movs	r3, #0
 800cf52:	428a      	cmp	r2, r1
 800cf54:	d305      	bcc.n	800cf62 <__copybits+0x2e>
 800cf56:	bd10      	pop	{r4, pc}
 800cf58:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf5c:	f840 2b04 	str.w	r2, [r0], #4
 800cf60:	e7f3      	b.n	800cf4a <__copybits+0x16>
 800cf62:	f842 3b04 	str.w	r3, [r2], #4
 800cf66:	e7f4      	b.n	800cf52 <__copybits+0x1e>

0800cf68 <__any_on>:
 800cf68:	f100 0214 	add.w	r2, r0, #20
 800cf6c:	6900      	ldr	r0, [r0, #16]
 800cf6e:	114b      	asrs	r3, r1, #5
 800cf70:	4298      	cmp	r0, r3
 800cf72:	b510      	push	{r4, lr}
 800cf74:	db11      	blt.n	800cf9a <__any_on+0x32>
 800cf76:	dd0a      	ble.n	800cf8e <__any_on+0x26>
 800cf78:	f011 011f 	ands.w	r1, r1, #31
 800cf7c:	d007      	beq.n	800cf8e <__any_on+0x26>
 800cf7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf82:	fa24 f001 	lsr.w	r0, r4, r1
 800cf86:	fa00 f101 	lsl.w	r1, r0, r1
 800cf8a:	428c      	cmp	r4, r1
 800cf8c:	d10b      	bne.n	800cfa6 <__any_on+0x3e>
 800cf8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d803      	bhi.n	800cf9e <__any_on+0x36>
 800cf96:	2000      	movs	r0, #0
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	e7f7      	b.n	800cf8e <__any_on+0x26>
 800cf9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfa2:	2900      	cmp	r1, #0
 800cfa4:	d0f5      	beq.n	800cf92 <__any_on+0x2a>
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e7f6      	b.n	800cf98 <__any_on+0x30>

0800cfaa <_calloc_r>:
 800cfaa:	b538      	push	{r3, r4, r5, lr}
 800cfac:	fb02 f401 	mul.w	r4, r2, r1
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	f7fd fee7 	bl	800ad84 <_malloc_r>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	b118      	cbz	r0, 800cfc2 <_calloc_r+0x18>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	f7fd fe8d 	bl	800acdc <memset>
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	bd38      	pop	{r3, r4, r5, pc}

0800cfc6 <_realloc_r>:
 800cfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc8:	4607      	mov	r7, r0
 800cfca:	4614      	mov	r4, r2
 800cfcc:	460e      	mov	r6, r1
 800cfce:	b921      	cbnz	r1, 800cfda <_realloc_r+0x14>
 800cfd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	f7fd bed5 	b.w	800ad84 <_malloc_r>
 800cfda:	b922      	cbnz	r2, 800cfe6 <_realloc_r+0x20>
 800cfdc:	f7fd fe86 	bl	800acec <_free_r>
 800cfe0:	4625      	mov	r5, r4
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfe6:	f001 fd04 	bl	800e9f2 <_malloc_usable_size_r>
 800cfea:	42a0      	cmp	r0, r4
 800cfec:	d20f      	bcs.n	800d00e <_realloc_r+0x48>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7fd fec7 	bl	800ad84 <_malloc_r>
 800cff6:	4605      	mov	r5, r0
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d0f2      	beq.n	800cfe2 <_realloc_r+0x1c>
 800cffc:	4631      	mov	r1, r6
 800cffe:	4622      	mov	r2, r4
 800d000:	f7ff fbb1 	bl	800c766 <memcpy>
 800d004:	4631      	mov	r1, r6
 800d006:	4638      	mov	r0, r7
 800d008:	f7fd fe70 	bl	800acec <_free_r>
 800d00c:	e7e9      	b.n	800cfe2 <_realloc_r+0x1c>
 800d00e:	4635      	mov	r5, r6
 800d010:	e7e7      	b.n	800cfe2 <_realloc_r+0x1c>

0800d012 <__ssputs_r>:
 800d012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d016:	688e      	ldr	r6, [r1, #8]
 800d018:	4682      	mov	sl, r0
 800d01a:	429e      	cmp	r6, r3
 800d01c:	460c      	mov	r4, r1
 800d01e:	4690      	mov	r8, r2
 800d020:	4699      	mov	r9, r3
 800d022:	d837      	bhi.n	800d094 <__ssputs_r+0x82>
 800d024:	898a      	ldrh	r2, [r1, #12]
 800d026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d02a:	d031      	beq.n	800d090 <__ssputs_r+0x7e>
 800d02c:	2302      	movs	r3, #2
 800d02e:	6825      	ldr	r5, [r4, #0]
 800d030:	6909      	ldr	r1, [r1, #16]
 800d032:	1a6f      	subs	r7, r5, r1
 800d034:	6965      	ldr	r5, [r4, #20]
 800d036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d03a:	fb95 f5f3 	sdiv	r5, r5, r3
 800d03e:	f109 0301 	add.w	r3, r9, #1
 800d042:	443b      	add	r3, r7
 800d044:	429d      	cmp	r5, r3
 800d046:	bf38      	it	cc
 800d048:	461d      	movcc	r5, r3
 800d04a:	0553      	lsls	r3, r2, #21
 800d04c:	d530      	bpl.n	800d0b0 <__ssputs_r+0x9e>
 800d04e:	4629      	mov	r1, r5
 800d050:	f7fd fe98 	bl	800ad84 <_malloc_r>
 800d054:	4606      	mov	r6, r0
 800d056:	b950      	cbnz	r0, 800d06e <__ssputs_r+0x5c>
 800d058:	230c      	movs	r3, #12
 800d05a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d05e:	f8ca 3000 	str.w	r3, [sl]
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d068:	81a3      	strh	r3, [r4, #12]
 800d06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06e:	463a      	mov	r2, r7
 800d070:	6921      	ldr	r1, [r4, #16]
 800d072:	f7ff fb78 	bl	800c766 <memcpy>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d080:	81a3      	strh	r3, [r4, #12]
 800d082:	6126      	str	r6, [r4, #16]
 800d084:	443e      	add	r6, r7
 800d086:	6026      	str	r6, [r4, #0]
 800d088:	464e      	mov	r6, r9
 800d08a:	6165      	str	r5, [r4, #20]
 800d08c:	1bed      	subs	r5, r5, r7
 800d08e:	60a5      	str	r5, [r4, #8]
 800d090:	454e      	cmp	r6, r9
 800d092:	d900      	bls.n	800d096 <__ssputs_r+0x84>
 800d094:	464e      	mov	r6, r9
 800d096:	4632      	mov	r2, r6
 800d098:	4641      	mov	r1, r8
 800d09a:	6820      	ldr	r0, [r4, #0]
 800d09c:	f001 fc90 	bl	800e9c0 <memmove>
 800d0a0:	68a3      	ldr	r3, [r4, #8]
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	1b9b      	subs	r3, r3, r6
 800d0a6:	60a3      	str	r3, [r4, #8]
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	441e      	add	r6, r3
 800d0ac:	6026      	str	r6, [r4, #0]
 800d0ae:	e7dc      	b.n	800d06a <__ssputs_r+0x58>
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	f7ff ff88 	bl	800cfc6 <_realloc_r>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d1e2      	bne.n	800d082 <__ssputs_r+0x70>
 800d0bc:	6921      	ldr	r1, [r4, #16]
 800d0be:	4650      	mov	r0, sl
 800d0c0:	f7fd fe14 	bl	800acec <_free_r>
 800d0c4:	e7c8      	b.n	800d058 <__ssputs_r+0x46>
	...

0800d0c8 <_svfiprintf_r>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	461d      	mov	r5, r3
 800d0ce:	898b      	ldrh	r3, [r1, #12]
 800d0d0:	b09d      	sub	sp, #116	; 0x74
 800d0d2:	061f      	lsls	r7, r3, #24
 800d0d4:	4680      	mov	r8, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	4616      	mov	r6, r2
 800d0da:	d50f      	bpl.n	800d0fc <_svfiprintf_r+0x34>
 800d0dc:	690b      	ldr	r3, [r1, #16]
 800d0de:	b96b      	cbnz	r3, 800d0fc <_svfiprintf_r+0x34>
 800d0e0:	2140      	movs	r1, #64	; 0x40
 800d0e2:	f7fd fe4f 	bl	800ad84 <_malloc_r>
 800d0e6:	6020      	str	r0, [r4, #0]
 800d0e8:	6120      	str	r0, [r4, #16]
 800d0ea:	b928      	cbnz	r0, 800d0f8 <_svfiprintf_r+0x30>
 800d0ec:	230c      	movs	r3, #12
 800d0ee:	f8c8 3000 	str.w	r3, [r8]
 800d0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f6:	e0c8      	b.n	800d28a <_svfiprintf_r+0x1c2>
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	6163      	str	r3, [r4, #20]
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d100:	2320      	movs	r3, #32
 800d102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d106:	2330      	movs	r3, #48	; 0x30
 800d108:	f04f 0b01 	mov.w	fp, #1
 800d10c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d110:	9503      	str	r5, [sp, #12]
 800d112:	4637      	mov	r7, r6
 800d114:	463d      	mov	r5, r7
 800d116:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d11a:	b10b      	cbz	r3, 800d120 <_svfiprintf_r+0x58>
 800d11c:	2b25      	cmp	r3, #37	; 0x25
 800d11e:	d13e      	bne.n	800d19e <_svfiprintf_r+0xd6>
 800d120:	ebb7 0a06 	subs.w	sl, r7, r6
 800d124:	d00b      	beq.n	800d13e <_svfiprintf_r+0x76>
 800d126:	4653      	mov	r3, sl
 800d128:	4632      	mov	r2, r6
 800d12a:	4621      	mov	r1, r4
 800d12c:	4640      	mov	r0, r8
 800d12e:	f7ff ff70 	bl	800d012 <__ssputs_r>
 800d132:	3001      	adds	r0, #1
 800d134:	f000 80a4 	beq.w	800d280 <_svfiprintf_r+0x1b8>
 800d138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13a:	4453      	add	r3, sl
 800d13c:	9309      	str	r3, [sp, #36]	; 0x24
 800d13e:	783b      	ldrb	r3, [r7, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 809d 	beq.w	800d280 <_svfiprintf_r+0x1b8>
 800d146:	2300      	movs	r3, #0
 800d148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d150:	9304      	str	r3, [sp, #16]
 800d152:	9307      	str	r3, [sp, #28]
 800d154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d158:	931a      	str	r3, [sp, #104]	; 0x68
 800d15a:	462f      	mov	r7, r5
 800d15c:	2205      	movs	r2, #5
 800d15e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d162:	4850      	ldr	r0, [pc, #320]	; (800d2a4 <_svfiprintf_r+0x1dc>)
 800d164:	f001 fc1e 	bl	800e9a4 <memchr>
 800d168:	9b04      	ldr	r3, [sp, #16]
 800d16a:	b9d0      	cbnz	r0, 800d1a2 <_svfiprintf_r+0xda>
 800d16c:	06d9      	lsls	r1, r3, #27
 800d16e:	bf44      	itt	mi
 800d170:	2220      	movmi	r2, #32
 800d172:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d176:	071a      	lsls	r2, r3, #28
 800d178:	bf44      	itt	mi
 800d17a:	222b      	movmi	r2, #43	; 0x2b
 800d17c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d180:	782a      	ldrb	r2, [r5, #0]
 800d182:	2a2a      	cmp	r2, #42	; 0x2a
 800d184:	d015      	beq.n	800d1b2 <_svfiprintf_r+0xea>
 800d186:	462f      	mov	r7, r5
 800d188:	2000      	movs	r0, #0
 800d18a:	250a      	movs	r5, #10
 800d18c:	9a07      	ldr	r2, [sp, #28]
 800d18e:	4639      	mov	r1, r7
 800d190:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d194:	3b30      	subs	r3, #48	; 0x30
 800d196:	2b09      	cmp	r3, #9
 800d198:	d94d      	bls.n	800d236 <_svfiprintf_r+0x16e>
 800d19a:	b1b8      	cbz	r0, 800d1cc <_svfiprintf_r+0x104>
 800d19c:	e00f      	b.n	800d1be <_svfiprintf_r+0xf6>
 800d19e:	462f      	mov	r7, r5
 800d1a0:	e7b8      	b.n	800d114 <_svfiprintf_r+0x4c>
 800d1a2:	4a40      	ldr	r2, [pc, #256]	; (800d2a4 <_svfiprintf_r+0x1dc>)
 800d1a4:	463d      	mov	r5, r7
 800d1a6:	1a80      	subs	r0, r0, r2
 800d1a8:	fa0b f000 	lsl.w	r0, fp, r0
 800d1ac:	4318      	orrs	r0, r3
 800d1ae:	9004      	str	r0, [sp, #16]
 800d1b0:	e7d3      	b.n	800d15a <_svfiprintf_r+0x92>
 800d1b2:	9a03      	ldr	r2, [sp, #12]
 800d1b4:	1d11      	adds	r1, r2, #4
 800d1b6:	6812      	ldr	r2, [r2, #0]
 800d1b8:	9103      	str	r1, [sp, #12]
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	db01      	blt.n	800d1c2 <_svfiprintf_r+0xfa>
 800d1be:	9207      	str	r2, [sp, #28]
 800d1c0:	e004      	b.n	800d1cc <_svfiprintf_r+0x104>
 800d1c2:	4252      	negs	r2, r2
 800d1c4:	f043 0302 	orr.w	r3, r3, #2
 800d1c8:	9207      	str	r2, [sp, #28]
 800d1ca:	9304      	str	r3, [sp, #16]
 800d1cc:	783b      	ldrb	r3, [r7, #0]
 800d1ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d1d0:	d10c      	bne.n	800d1ec <_svfiprintf_r+0x124>
 800d1d2:	787b      	ldrb	r3, [r7, #1]
 800d1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d1d6:	d133      	bne.n	800d240 <_svfiprintf_r+0x178>
 800d1d8:	9b03      	ldr	r3, [sp, #12]
 800d1da:	3702      	adds	r7, #2
 800d1dc:	1d1a      	adds	r2, r3, #4
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	9203      	str	r2, [sp, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	bfb8      	it	lt
 800d1e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d1ea:	9305      	str	r3, [sp, #20]
 800d1ec:	4d2e      	ldr	r5, [pc, #184]	; (800d2a8 <_svfiprintf_r+0x1e0>)
 800d1ee:	2203      	movs	r2, #3
 800d1f0:	7839      	ldrb	r1, [r7, #0]
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f001 fbd6 	bl	800e9a4 <memchr>
 800d1f8:	b138      	cbz	r0, 800d20a <_svfiprintf_r+0x142>
 800d1fa:	2340      	movs	r3, #64	; 0x40
 800d1fc:	1b40      	subs	r0, r0, r5
 800d1fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	3701      	adds	r7, #1
 800d206:	4303      	orrs	r3, r0
 800d208:	9304      	str	r3, [sp, #16]
 800d20a:	7839      	ldrb	r1, [r7, #0]
 800d20c:	2206      	movs	r2, #6
 800d20e:	4827      	ldr	r0, [pc, #156]	; (800d2ac <_svfiprintf_r+0x1e4>)
 800d210:	1c7e      	adds	r6, r7, #1
 800d212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d216:	f001 fbc5 	bl	800e9a4 <memchr>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d038      	beq.n	800d290 <_svfiprintf_r+0x1c8>
 800d21e:	4b24      	ldr	r3, [pc, #144]	; (800d2b0 <_svfiprintf_r+0x1e8>)
 800d220:	bb13      	cbnz	r3, 800d268 <_svfiprintf_r+0x1a0>
 800d222:	9b03      	ldr	r3, [sp, #12]
 800d224:	3307      	adds	r3, #7
 800d226:	f023 0307 	bic.w	r3, r3, #7
 800d22a:	3308      	adds	r3, #8
 800d22c:	9303      	str	r3, [sp, #12]
 800d22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d230:	444b      	add	r3, r9
 800d232:	9309      	str	r3, [sp, #36]	; 0x24
 800d234:	e76d      	b.n	800d112 <_svfiprintf_r+0x4a>
 800d236:	fb05 3202 	mla	r2, r5, r2, r3
 800d23a:	2001      	movs	r0, #1
 800d23c:	460f      	mov	r7, r1
 800d23e:	e7a6      	b.n	800d18e <_svfiprintf_r+0xc6>
 800d240:	2300      	movs	r3, #0
 800d242:	250a      	movs	r5, #10
 800d244:	4619      	mov	r1, r3
 800d246:	3701      	adds	r7, #1
 800d248:	9305      	str	r3, [sp, #20]
 800d24a:	4638      	mov	r0, r7
 800d24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d250:	3a30      	subs	r2, #48	; 0x30
 800d252:	2a09      	cmp	r2, #9
 800d254:	d903      	bls.n	800d25e <_svfiprintf_r+0x196>
 800d256:	2b00      	cmp	r3, #0
 800d258:	d0c8      	beq.n	800d1ec <_svfiprintf_r+0x124>
 800d25a:	9105      	str	r1, [sp, #20]
 800d25c:	e7c6      	b.n	800d1ec <_svfiprintf_r+0x124>
 800d25e:	fb05 2101 	mla	r1, r5, r1, r2
 800d262:	2301      	movs	r3, #1
 800d264:	4607      	mov	r7, r0
 800d266:	e7f0      	b.n	800d24a <_svfiprintf_r+0x182>
 800d268:	ab03      	add	r3, sp, #12
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	4622      	mov	r2, r4
 800d26e:	4b11      	ldr	r3, [pc, #68]	; (800d2b4 <_svfiprintf_r+0x1ec>)
 800d270:	a904      	add	r1, sp, #16
 800d272:	4640      	mov	r0, r8
 800d274:	f3af 8000 	nop.w
 800d278:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d27c:	4681      	mov	r9, r0
 800d27e:	d1d6      	bne.n	800d22e <_svfiprintf_r+0x166>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	065b      	lsls	r3, r3, #25
 800d284:	f53f af35 	bmi.w	800d0f2 <_svfiprintf_r+0x2a>
 800d288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d28a:	b01d      	add	sp, #116	; 0x74
 800d28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	4622      	mov	r2, r4
 800d296:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <_svfiprintf_r+0x1ec>)
 800d298:	a904      	add	r1, sp, #16
 800d29a:	4640      	mov	r0, r8
 800d29c:	f000 f9c0 	bl	800d620 <_printf_i>
 800d2a0:	e7ea      	b.n	800d278 <_svfiprintf_r+0x1b0>
 800d2a2:	bf00      	nop
 800d2a4:	0800f87c 	.word	0x0800f87c
 800d2a8:	0800f882 	.word	0x0800f882
 800d2ac:	0800f886 	.word	0x0800f886
 800d2b0:	00000000 	.word	0x00000000
 800d2b4:	0800d013 	.word	0x0800d013

0800d2b8 <__sfputc_r>:
 800d2b8:	6893      	ldr	r3, [r2, #8]
 800d2ba:	b410      	push	{r4}
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	6093      	str	r3, [r2, #8]
 800d2c2:	da07      	bge.n	800d2d4 <__sfputc_r+0x1c>
 800d2c4:	6994      	ldr	r4, [r2, #24]
 800d2c6:	42a3      	cmp	r3, r4
 800d2c8:	db01      	blt.n	800d2ce <__sfputc_r+0x16>
 800d2ca:	290a      	cmp	r1, #10
 800d2cc:	d102      	bne.n	800d2d4 <__sfputc_r+0x1c>
 800d2ce:	bc10      	pop	{r4}
 800d2d0:	f000 bb0e 	b.w	800d8f0 <__swbuf_r>
 800d2d4:	6813      	ldr	r3, [r2, #0]
 800d2d6:	1c58      	adds	r0, r3, #1
 800d2d8:	6010      	str	r0, [r2, #0]
 800d2da:	7019      	strb	r1, [r3, #0]
 800d2dc:	4608      	mov	r0, r1
 800d2de:	bc10      	pop	{r4}
 800d2e0:	4770      	bx	lr

0800d2e2 <__sfputs_r>:
 800d2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	460f      	mov	r7, r1
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	18d5      	adds	r5, r2, r3
 800d2ec:	42ac      	cmp	r4, r5
 800d2ee:	d101      	bne.n	800d2f4 <__sfputs_r+0x12>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e007      	b.n	800d304 <__sfputs_r+0x22>
 800d2f4:	463a      	mov	r2, r7
 800d2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f7ff ffdc 	bl	800d2b8 <__sfputc_r>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d1f3      	bne.n	800d2ec <__sfputs_r+0xa>
 800d304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d308 <_vfiprintf_r>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	460c      	mov	r4, r1
 800d30e:	b09d      	sub	sp, #116	; 0x74
 800d310:	4617      	mov	r7, r2
 800d312:	461d      	mov	r5, r3
 800d314:	4606      	mov	r6, r0
 800d316:	b118      	cbz	r0, 800d320 <_vfiprintf_r+0x18>
 800d318:	6983      	ldr	r3, [r0, #24]
 800d31a:	b90b      	cbnz	r3, 800d320 <_vfiprintf_r+0x18>
 800d31c:	f7fe fe5a 	bl	800bfd4 <__sinit>
 800d320:	4b7c      	ldr	r3, [pc, #496]	; (800d514 <_vfiprintf_r+0x20c>)
 800d322:	429c      	cmp	r4, r3
 800d324:	d158      	bne.n	800d3d8 <_vfiprintf_r+0xd0>
 800d326:	6874      	ldr	r4, [r6, #4]
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	0718      	lsls	r0, r3, #28
 800d32c:	d55e      	bpl.n	800d3ec <_vfiprintf_r+0xe4>
 800d32e:	6923      	ldr	r3, [r4, #16]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d05b      	beq.n	800d3ec <_vfiprintf_r+0xe4>
 800d334:	2300      	movs	r3, #0
 800d336:	9309      	str	r3, [sp, #36]	; 0x24
 800d338:	2320      	movs	r3, #32
 800d33a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d33e:	2330      	movs	r3, #48	; 0x30
 800d340:	f04f 0b01 	mov.w	fp, #1
 800d344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d348:	9503      	str	r5, [sp, #12]
 800d34a:	46b8      	mov	r8, r7
 800d34c:	4645      	mov	r5, r8
 800d34e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d352:	b10b      	cbz	r3, 800d358 <_vfiprintf_r+0x50>
 800d354:	2b25      	cmp	r3, #37	; 0x25
 800d356:	d154      	bne.n	800d402 <_vfiprintf_r+0xfa>
 800d358:	ebb8 0a07 	subs.w	sl, r8, r7
 800d35c:	d00b      	beq.n	800d376 <_vfiprintf_r+0x6e>
 800d35e:	4653      	mov	r3, sl
 800d360:	463a      	mov	r2, r7
 800d362:	4621      	mov	r1, r4
 800d364:	4630      	mov	r0, r6
 800d366:	f7ff ffbc 	bl	800d2e2 <__sfputs_r>
 800d36a:	3001      	adds	r0, #1
 800d36c:	f000 80c2 	beq.w	800d4f4 <_vfiprintf_r+0x1ec>
 800d370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d372:	4453      	add	r3, sl
 800d374:	9309      	str	r3, [sp, #36]	; 0x24
 800d376:	f898 3000 	ldrb.w	r3, [r8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 80ba 	beq.w	800d4f4 <_vfiprintf_r+0x1ec>
 800d380:	2300      	movs	r3, #0
 800d382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	9307      	str	r3, [sp, #28]
 800d38e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d392:	931a      	str	r3, [sp, #104]	; 0x68
 800d394:	46a8      	mov	r8, r5
 800d396:	2205      	movs	r2, #5
 800d398:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d39c:	485e      	ldr	r0, [pc, #376]	; (800d518 <_vfiprintf_r+0x210>)
 800d39e:	f001 fb01 	bl	800e9a4 <memchr>
 800d3a2:	9b04      	ldr	r3, [sp, #16]
 800d3a4:	bb78      	cbnz	r0, 800d406 <_vfiprintf_r+0xfe>
 800d3a6:	06d9      	lsls	r1, r3, #27
 800d3a8:	bf44      	itt	mi
 800d3aa:	2220      	movmi	r2, #32
 800d3ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3b0:	071a      	lsls	r2, r3, #28
 800d3b2:	bf44      	itt	mi
 800d3b4:	222b      	movmi	r2, #43	; 0x2b
 800d3b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3ba:	782a      	ldrb	r2, [r5, #0]
 800d3bc:	2a2a      	cmp	r2, #42	; 0x2a
 800d3be:	d02a      	beq.n	800d416 <_vfiprintf_r+0x10e>
 800d3c0:	46a8      	mov	r8, r5
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	250a      	movs	r5, #10
 800d3c6:	9a07      	ldr	r2, [sp, #28]
 800d3c8:	4641      	mov	r1, r8
 800d3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ce:	3b30      	subs	r3, #48	; 0x30
 800d3d0:	2b09      	cmp	r3, #9
 800d3d2:	d969      	bls.n	800d4a8 <_vfiprintf_r+0x1a0>
 800d3d4:	b360      	cbz	r0, 800d430 <_vfiprintf_r+0x128>
 800d3d6:	e024      	b.n	800d422 <_vfiprintf_r+0x11a>
 800d3d8:	4b50      	ldr	r3, [pc, #320]	; (800d51c <_vfiprintf_r+0x214>)
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	d101      	bne.n	800d3e2 <_vfiprintf_r+0xda>
 800d3de:	68b4      	ldr	r4, [r6, #8]
 800d3e0:	e7a2      	b.n	800d328 <_vfiprintf_r+0x20>
 800d3e2:	4b4f      	ldr	r3, [pc, #316]	; (800d520 <_vfiprintf_r+0x218>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	bf08      	it	eq
 800d3e8:	68f4      	ldreq	r4, [r6, #12]
 800d3ea:	e79d      	b.n	800d328 <_vfiprintf_r+0x20>
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f000 faf0 	bl	800d9d4 <__swsetup_r>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d09d      	beq.n	800d334 <_vfiprintf_r+0x2c>
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3fc:	b01d      	add	sp, #116	; 0x74
 800d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d402:	46a8      	mov	r8, r5
 800d404:	e7a2      	b.n	800d34c <_vfiprintf_r+0x44>
 800d406:	4a44      	ldr	r2, [pc, #272]	; (800d518 <_vfiprintf_r+0x210>)
 800d408:	4645      	mov	r5, r8
 800d40a:	1a80      	subs	r0, r0, r2
 800d40c:	fa0b f000 	lsl.w	r0, fp, r0
 800d410:	4318      	orrs	r0, r3
 800d412:	9004      	str	r0, [sp, #16]
 800d414:	e7be      	b.n	800d394 <_vfiprintf_r+0x8c>
 800d416:	9a03      	ldr	r2, [sp, #12]
 800d418:	1d11      	adds	r1, r2, #4
 800d41a:	6812      	ldr	r2, [r2, #0]
 800d41c:	9103      	str	r1, [sp, #12]
 800d41e:	2a00      	cmp	r2, #0
 800d420:	db01      	blt.n	800d426 <_vfiprintf_r+0x11e>
 800d422:	9207      	str	r2, [sp, #28]
 800d424:	e004      	b.n	800d430 <_vfiprintf_r+0x128>
 800d426:	4252      	negs	r2, r2
 800d428:	f043 0302 	orr.w	r3, r3, #2
 800d42c:	9207      	str	r2, [sp, #28]
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	f898 3000 	ldrb.w	r3, [r8]
 800d434:	2b2e      	cmp	r3, #46	; 0x2e
 800d436:	d10e      	bne.n	800d456 <_vfiprintf_r+0x14e>
 800d438:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d43c:	2b2a      	cmp	r3, #42	; 0x2a
 800d43e:	d138      	bne.n	800d4b2 <_vfiprintf_r+0x1aa>
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	f108 0802 	add.w	r8, r8, #2
 800d446:	1d1a      	adds	r2, r3, #4
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	9203      	str	r2, [sp, #12]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bfb8      	it	lt
 800d450:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	4d33      	ldr	r5, [pc, #204]	; (800d524 <_vfiprintf_r+0x21c>)
 800d458:	2203      	movs	r2, #3
 800d45a:	f898 1000 	ldrb.w	r1, [r8]
 800d45e:	4628      	mov	r0, r5
 800d460:	f001 faa0 	bl	800e9a4 <memchr>
 800d464:	b140      	cbz	r0, 800d478 <_vfiprintf_r+0x170>
 800d466:	2340      	movs	r3, #64	; 0x40
 800d468:	1b40      	subs	r0, r0, r5
 800d46a:	fa03 f000 	lsl.w	r0, r3, r0
 800d46e:	9b04      	ldr	r3, [sp, #16]
 800d470:	f108 0801 	add.w	r8, r8, #1
 800d474:	4303      	orrs	r3, r0
 800d476:	9304      	str	r3, [sp, #16]
 800d478:	f898 1000 	ldrb.w	r1, [r8]
 800d47c:	2206      	movs	r2, #6
 800d47e:	482a      	ldr	r0, [pc, #168]	; (800d528 <_vfiprintf_r+0x220>)
 800d480:	f108 0701 	add.w	r7, r8, #1
 800d484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d488:	f001 fa8c 	bl	800e9a4 <memchr>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d037      	beq.n	800d500 <_vfiprintf_r+0x1f8>
 800d490:	4b26      	ldr	r3, [pc, #152]	; (800d52c <_vfiprintf_r+0x224>)
 800d492:	bb1b      	cbnz	r3, 800d4dc <_vfiprintf_r+0x1d4>
 800d494:	9b03      	ldr	r3, [sp, #12]
 800d496:	3307      	adds	r3, #7
 800d498:	f023 0307 	bic.w	r3, r3, #7
 800d49c:	3308      	adds	r3, #8
 800d49e:	9303      	str	r3, [sp, #12]
 800d4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a2:	444b      	add	r3, r9
 800d4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a6:	e750      	b.n	800d34a <_vfiprintf_r+0x42>
 800d4a8:	fb05 3202 	mla	r2, r5, r2, r3
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	4688      	mov	r8, r1
 800d4b0:	e78a      	b.n	800d3c8 <_vfiprintf_r+0xc0>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	250a      	movs	r5, #10
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f108 0801 	add.w	r8, r8, #1
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	4640      	mov	r0, r8
 800d4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c4:	3a30      	subs	r2, #48	; 0x30
 800d4c6:	2a09      	cmp	r2, #9
 800d4c8:	d903      	bls.n	800d4d2 <_vfiprintf_r+0x1ca>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0c3      	beq.n	800d456 <_vfiprintf_r+0x14e>
 800d4ce:	9105      	str	r1, [sp, #20]
 800d4d0:	e7c1      	b.n	800d456 <_vfiprintf_r+0x14e>
 800d4d2:	fb05 2101 	mla	r1, r5, r1, r2
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	4680      	mov	r8, r0
 800d4da:	e7f0      	b.n	800d4be <_vfiprintf_r+0x1b6>
 800d4dc:	ab03      	add	r3, sp, #12
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4622      	mov	r2, r4
 800d4e2:	4b13      	ldr	r3, [pc, #76]	; (800d530 <_vfiprintf_r+0x228>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f3af 8000 	nop.w
 800d4ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d4f0:	4681      	mov	r9, r0
 800d4f2:	d1d5      	bne.n	800d4a0 <_vfiprintf_r+0x198>
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	065b      	lsls	r3, r3, #25
 800d4f8:	f53f af7e 	bmi.w	800d3f8 <_vfiprintf_r+0xf0>
 800d4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4fe:	e77d      	b.n	800d3fc <_vfiprintf_r+0xf4>
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	4622      	mov	r2, r4
 800d506:	4b0a      	ldr	r3, [pc, #40]	; (800d530 <_vfiprintf_r+0x228>)
 800d508:	a904      	add	r1, sp, #16
 800d50a:	4630      	mov	r0, r6
 800d50c:	f000 f888 	bl	800d620 <_printf_i>
 800d510:	e7ec      	b.n	800d4ec <_vfiprintf_r+0x1e4>
 800d512:	bf00      	nop
 800d514:	0800f730 	.word	0x0800f730
 800d518:	0800f87c 	.word	0x0800f87c
 800d51c:	0800f750 	.word	0x0800f750
 800d520:	0800f710 	.word	0x0800f710
 800d524:	0800f882 	.word	0x0800f882
 800d528:	0800f886 	.word	0x0800f886
 800d52c:	00000000 	.word	0x00000000
 800d530:	0800d2e3 	.word	0x0800d2e3

0800d534 <_printf_common>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	4691      	mov	r9, r2
 800d53a:	461f      	mov	r7, r3
 800d53c:	688a      	ldr	r2, [r1, #8]
 800d53e:	690b      	ldr	r3, [r1, #16]
 800d540:	4606      	mov	r6, r0
 800d542:	4293      	cmp	r3, r2
 800d544:	bfb8      	it	lt
 800d546:	4613      	movlt	r3, r2
 800d548:	f8c9 3000 	str.w	r3, [r9]
 800d54c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d550:	460c      	mov	r4, r1
 800d552:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d556:	b112      	cbz	r2, 800d55e <_printf_common+0x2a>
 800d558:	3301      	adds	r3, #1
 800d55a:	f8c9 3000 	str.w	r3, [r9]
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	0699      	lsls	r1, r3, #26
 800d562:	bf42      	ittt	mi
 800d564:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d568:	3302      	addmi	r3, #2
 800d56a:	f8c9 3000 	strmi.w	r3, [r9]
 800d56e:	6825      	ldr	r5, [r4, #0]
 800d570:	f015 0506 	ands.w	r5, r5, #6
 800d574:	d107      	bne.n	800d586 <_printf_common+0x52>
 800d576:	f104 0a19 	add.w	sl, r4, #25
 800d57a:	68e3      	ldr	r3, [r4, #12]
 800d57c:	f8d9 2000 	ldr.w	r2, [r9]
 800d580:	1a9b      	subs	r3, r3, r2
 800d582:	42ab      	cmp	r3, r5
 800d584:	dc29      	bgt.n	800d5da <_printf_common+0xa6>
 800d586:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d58a:	6822      	ldr	r2, [r4, #0]
 800d58c:	3300      	adds	r3, #0
 800d58e:	bf18      	it	ne
 800d590:	2301      	movne	r3, #1
 800d592:	0692      	lsls	r2, r2, #26
 800d594:	d42e      	bmi.n	800d5f4 <_printf_common+0xc0>
 800d596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d59a:	4639      	mov	r1, r7
 800d59c:	4630      	mov	r0, r6
 800d59e:	47c0      	blx	r8
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d021      	beq.n	800d5e8 <_printf_common+0xb4>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	68e5      	ldr	r5, [r4, #12]
 800d5a8:	f003 0306 	and.w	r3, r3, #6
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	bf18      	it	ne
 800d5b0:	2500      	movne	r5, #0
 800d5b2:	f8d9 2000 	ldr.w	r2, [r9]
 800d5b6:	f04f 0900 	mov.w	r9, #0
 800d5ba:	bf08      	it	eq
 800d5bc:	1aad      	subeq	r5, r5, r2
 800d5be:	68a3      	ldr	r3, [r4, #8]
 800d5c0:	6922      	ldr	r2, [r4, #16]
 800d5c2:	bf08      	it	eq
 800d5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	bfc4      	itt	gt
 800d5cc:	1a9b      	subgt	r3, r3, r2
 800d5ce:	18ed      	addgt	r5, r5, r3
 800d5d0:	341a      	adds	r4, #26
 800d5d2:	454d      	cmp	r5, r9
 800d5d4:	d11a      	bne.n	800d60c <_printf_common+0xd8>
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e008      	b.n	800d5ec <_printf_common+0xb8>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4652      	mov	r2, sl
 800d5de:	4639      	mov	r1, r7
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	47c0      	blx	r8
 800d5e4:	3001      	adds	r0, #1
 800d5e6:	d103      	bne.n	800d5f0 <_printf_common+0xbc>
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f0:	3501      	adds	r5, #1
 800d5f2:	e7c2      	b.n	800d57a <_printf_common+0x46>
 800d5f4:	2030      	movs	r0, #48	; 0x30
 800d5f6:	18e1      	adds	r1, r4, r3
 800d5f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d602:	4422      	add	r2, r4
 800d604:	3302      	adds	r3, #2
 800d606:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d60a:	e7c4      	b.n	800d596 <_printf_common+0x62>
 800d60c:	2301      	movs	r3, #1
 800d60e:	4622      	mov	r2, r4
 800d610:	4639      	mov	r1, r7
 800d612:	4630      	mov	r0, r6
 800d614:	47c0      	blx	r8
 800d616:	3001      	adds	r0, #1
 800d618:	d0e6      	beq.n	800d5e8 <_printf_common+0xb4>
 800d61a:	f109 0901 	add.w	r9, r9, #1
 800d61e:	e7d8      	b.n	800d5d2 <_printf_common+0x9e>

0800d620 <_printf_i>:
 800d620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d624:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d628:	460c      	mov	r4, r1
 800d62a:	7e09      	ldrb	r1, [r1, #24]
 800d62c:	b085      	sub	sp, #20
 800d62e:	296e      	cmp	r1, #110	; 0x6e
 800d630:	4617      	mov	r7, r2
 800d632:	4606      	mov	r6, r0
 800d634:	4698      	mov	r8, r3
 800d636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d638:	f000 80b3 	beq.w	800d7a2 <_printf_i+0x182>
 800d63c:	d822      	bhi.n	800d684 <_printf_i+0x64>
 800d63e:	2963      	cmp	r1, #99	; 0x63
 800d640:	d036      	beq.n	800d6b0 <_printf_i+0x90>
 800d642:	d80a      	bhi.n	800d65a <_printf_i+0x3a>
 800d644:	2900      	cmp	r1, #0
 800d646:	f000 80b9 	beq.w	800d7bc <_printf_i+0x19c>
 800d64a:	2958      	cmp	r1, #88	; 0x58
 800d64c:	f000 8083 	beq.w	800d756 <_printf_i+0x136>
 800d650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d654:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d658:	e032      	b.n	800d6c0 <_printf_i+0xa0>
 800d65a:	2964      	cmp	r1, #100	; 0x64
 800d65c:	d001      	beq.n	800d662 <_printf_i+0x42>
 800d65e:	2969      	cmp	r1, #105	; 0x69
 800d660:	d1f6      	bne.n	800d650 <_printf_i+0x30>
 800d662:	6820      	ldr	r0, [r4, #0]
 800d664:	6813      	ldr	r3, [r2, #0]
 800d666:	0605      	lsls	r5, r0, #24
 800d668:	f103 0104 	add.w	r1, r3, #4
 800d66c:	d52a      	bpl.n	800d6c4 <_printf_i+0xa4>
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6011      	str	r1, [r2, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	da03      	bge.n	800d67e <_printf_i+0x5e>
 800d676:	222d      	movs	r2, #45	; 0x2d
 800d678:	425b      	negs	r3, r3
 800d67a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d67e:	486f      	ldr	r0, [pc, #444]	; (800d83c <_printf_i+0x21c>)
 800d680:	220a      	movs	r2, #10
 800d682:	e039      	b.n	800d6f8 <_printf_i+0xd8>
 800d684:	2973      	cmp	r1, #115	; 0x73
 800d686:	f000 809d 	beq.w	800d7c4 <_printf_i+0x1a4>
 800d68a:	d808      	bhi.n	800d69e <_printf_i+0x7e>
 800d68c:	296f      	cmp	r1, #111	; 0x6f
 800d68e:	d020      	beq.n	800d6d2 <_printf_i+0xb2>
 800d690:	2970      	cmp	r1, #112	; 0x70
 800d692:	d1dd      	bne.n	800d650 <_printf_i+0x30>
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	f043 0320 	orr.w	r3, r3, #32
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	e003      	b.n	800d6a6 <_printf_i+0x86>
 800d69e:	2975      	cmp	r1, #117	; 0x75
 800d6a0:	d017      	beq.n	800d6d2 <_printf_i+0xb2>
 800d6a2:	2978      	cmp	r1, #120	; 0x78
 800d6a4:	d1d4      	bne.n	800d650 <_printf_i+0x30>
 800d6a6:	2378      	movs	r3, #120	; 0x78
 800d6a8:	4865      	ldr	r0, [pc, #404]	; (800d840 <_printf_i+0x220>)
 800d6aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6ae:	e055      	b.n	800d75c <_printf_i+0x13c>
 800d6b0:	6813      	ldr	r3, [r2, #0]
 800d6b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b6:	1d19      	adds	r1, r3, #4
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6011      	str	r1, [r2, #0]
 800d6bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e08c      	b.n	800d7de <_printf_i+0x1be>
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6ca:	6011      	str	r1, [r2, #0]
 800d6cc:	bf18      	it	ne
 800d6ce:	b21b      	sxthne	r3, r3
 800d6d0:	e7cf      	b.n	800d672 <_printf_i+0x52>
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	6825      	ldr	r5, [r4, #0]
 800d6d6:	1d18      	adds	r0, r3, #4
 800d6d8:	6010      	str	r0, [r2, #0]
 800d6da:	0628      	lsls	r0, r5, #24
 800d6dc:	d501      	bpl.n	800d6e2 <_printf_i+0xc2>
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	e002      	b.n	800d6e8 <_printf_i+0xc8>
 800d6e2:	0668      	lsls	r0, r5, #25
 800d6e4:	d5fb      	bpl.n	800d6de <_printf_i+0xbe>
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	296f      	cmp	r1, #111	; 0x6f
 800d6ea:	bf14      	ite	ne
 800d6ec:	220a      	movne	r2, #10
 800d6ee:	2208      	moveq	r2, #8
 800d6f0:	4852      	ldr	r0, [pc, #328]	; (800d83c <_printf_i+0x21c>)
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6f8:	6865      	ldr	r5, [r4, #4]
 800d6fa:	2d00      	cmp	r5, #0
 800d6fc:	60a5      	str	r5, [r4, #8]
 800d6fe:	f2c0 8095 	blt.w	800d82c <_printf_i+0x20c>
 800d702:	6821      	ldr	r1, [r4, #0]
 800d704:	f021 0104 	bic.w	r1, r1, #4
 800d708:	6021      	str	r1, [r4, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d13d      	bne.n	800d78a <_printf_i+0x16a>
 800d70e:	2d00      	cmp	r5, #0
 800d710:	f040 808e 	bne.w	800d830 <_printf_i+0x210>
 800d714:	4665      	mov	r5, ip
 800d716:	2a08      	cmp	r2, #8
 800d718:	d10b      	bne.n	800d732 <_printf_i+0x112>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	07db      	lsls	r3, r3, #31
 800d71e:	d508      	bpl.n	800d732 <_printf_i+0x112>
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	6862      	ldr	r2, [r4, #4]
 800d724:	429a      	cmp	r2, r3
 800d726:	bfde      	ittt	le
 800d728:	2330      	movle	r3, #48	; 0x30
 800d72a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d72e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d732:	ebac 0305 	sub.w	r3, ip, r5
 800d736:	6123      	str	r3, [r4, #16]
 800d738:	f8cd 8000 	str.w	r8, [sp]
 800d73c:	463b      	mov	r3, r7
 800d73e:	aa03      	add	r2, sp, #12
 800d740:	4621      	mov	r1, r4
 800d742:	4630      	mov	r0, r6
 800d744:	f7ff fef6 	bl	800d534 <_printf_common>
 800d748:	3001      	adds	r0, #1
 800d74a:	d14d      	bne.n	800d7e8 <_printf_i+0x1c8>
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d750:	b005      	add	sp, #20
 800d752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d756:	4839      	ldr	r0, [pc, #228]	; (800d83c <_printf_i+0x21c>)
 800d758:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d75c:	6813      	ldr	r3, [r2, #0]
 800d75e:	6821      	ldr	r1, [r4, #0]
 800d760:	1d1d      	adds	r5, r3, #4
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6015      	str	r5, [r2, #0]
 800d766:	060a      	lsls	r2, r1, #24
 800d768:	d50b      	bpl.n	800d782 <_printf_i+0x162>
 800d76a:	07ca      	lsls	r2, r1, #31
 800d76c:	bf44      	itt	mi
 800d76e:	f041 0120 	orrmi.w	r1, r1, #32
 800d772:	6021      	strmi	r1, [r4, #0]
 800d774:	b91b      	cbnz	r3, 800d77e <_printf_i+0x15e>
 800d776:	6822      	ldr	r2, [r4, #0]
 800d778:	f022 0220 	bic.w	r2, r2, #32
 800d77c:	6022      	str	r2, [r4, #0]
 800d77e:	2210      	movs	r2, #16
 800d780:	e7b7      	b.n	800d6f2 <_printf_i+0xd2>
 800d782:	064d      	lsls	r5, r1, #25
 800d784:	bf48      	it	mi
 800d786:	b29b      	uxthmi	r3, r3
 800d788:	e7ef      	b.n	800d76a <_printf_i+0x14a>
 800d78a:	4665      	mov	r5, ip
 800d78c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d790:	fb02 3311 	mls	r3, r2, r1, r3
 800d794:	5cc3      	ldrb	r3, [r0, r3]
 800d796:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d79a:	460b      	mov	r3, r1
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d1f5      	bne.n	800d78c <_printf_i+0x16c>
 800d7a0:	e7b9      	b.n	800d716 <_printf_i+0xf6>
 800d7a2:	6813      	ldr	r3, [r2, #0]
 800d7a4:	6825      	ldr	r5, [r4, #0]
 800d7a6:	1d18      	adds	r0, r3, #4
 800d7a8:	6961      	ldr	r1, [r4, #20]
 800d7aa:	6010      	str	r0, [r2, #0]
 800d7ac:	0628      	lsls	r0, r5, #24
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	d501      	bpl.n	800d7b6 <_printf_i+0x196>
 800d7b2:	6019      	str	r1, [r3, #0]
 800d7b4:	e002      	b.n	800d7bc <_printf_i+0x19c>
 800d7b6:	066a      	lsls	r2, r5, #25
 800d7b8:	d5fb      	bpl.n	800d7b2 <_printf_i+0x192>
 800d7ba:	8019      	strh	r1, [r3, #0]
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4665      	mov	r5, ip
 800d7c0:	6123      	str	r3, [r4, #16]
 800d7c2:	e7b9      	b.n	800d738 <_printf_i+0x118>
 800d7c4:	6813      	ldr	r3, [r2, #0]
 800d7c6:	1d19      	adds	r1, r3, #4
 800d7c8:	6011      	str	r1, [r2, #0]
 800d7ca:	681d      	ldr	r5, [r3, #0]
 800d7cc:	6862      	ldr	r2, [r4, #4]
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f001 f8e7 	bl	800e9a4 <memchr>
 800d7d6:	b108      	cbz	r0, 800d7dc <_printf_i+0x1bc>
 800d7d8:	1b40      	subs	r0, r0, r5
 800d7da:	6060      	str	r0, [r4, #4]
 800d7dc:	6863      	ldr	r3, [r4, #4]
 800d7de:	6123      	str	r3, [r4, #16]
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7e6:	e7a7      	b.n	800d738 <_printf_i+0x118>
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	47c0      	blx	r8
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	d0aa      	beq.n	800d74c <_printf_i+0x12c>
 800d7f6:	6823      	ldr	r3, [r4, #0]
 800d7f8:	079b      	lsls	r3, r3, #30
 800d7fa:	d413      	bmi.n	800d824 <_printf_i+0x204>
 800d7fc:	68e0      	ldr	r0, [r4, #12]
 800d7fe:	9b03      	ldr	r3, [sp, #12]
 800d800:	4298      	cmp	r0, r3
 800d802:	bfb8      	it	lt
 800d804:	4618      	movlt	r0, r3
 800d806:	e7a3      	b.n	800d750 <_printf_i+0x130>
 800d808:	2301      	movs	r3, #1
 800d80a:	464a      	mov	r2, r9
 800d80c:	4639      	mov	r1, r7
 800d80e:	4630      	mov	r0, r6
 800d810:	47c0      	blx	r8
 800d812:	3001      	adds	r0, #1
 800d814:	d09a      	beq.n	800d74c <_printf_i+0x12c>
 800d816:	3501      	adds	r5, #1
 800d818:	68e3      	ldr	r3, [r4, #12]
 800d81a:	9a03      	ldr	r2, [sp, #12]
 800d81c:	1a9b      	subs	r3, r3, r2
 800d81e:	42ab      	cmp	r3, r5
 800d820:	dcf2      	bgt.n	800d808 <_printf_i+0x1e8>
 800d822:	e7eb      	b.n	800d7fc <_printf_i+0x1dc>
 800d824:	2500      	movs	r5, #0
 800d826:	f104 0919 	add.w	r9, r4, #25
 800d82a:	e7f5      	b.n	800d818 <_printf_i+0x1f8>
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1ac      	bne.n	800d78a <_printf_i+0x16a>
 800d830:	7803      	ldrb	r3, [r0, #0]
 800d832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d83a:	e76c      	b.n	800d716 <_printf_i+0xf6>
 800d83c:	0800f88d 	.word	0x0800f88d
 800d840:	0800f89e 	.word	0x0800f89e

0800d844 <__sread>:
 800d844:	b510      	push	{r4, lr}
 800d846:	460c      	mov	r4, r1
 800d848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d84c:	f001 f8da 	bl	800ea04 <_read_r>
 800d850:	2800      	cmp	r0, #0
 800d852:	bfab      	itete	ge
 800d854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d856:	89a3      	ldrhlt	r3, [r4, #12]
 800d858:	181b      	addge	r3, r3, r0
 800d85a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d85e:	bfac      	ite	ge
 800d860:	6563      	strge	r3, [r4, #84]	; 0x54
 800d862:	81a3      	strhlt	r3, [r4, #12]
 800d864:	bd10      	pop	{r4, pc}

0800d866 <__swrite>:
 800d866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d86a:	461f      	mov	r7, r3
 800d86c:	898b      	ldrh	r3, [r1, #12]
 800d86e:	4605      	mov	r5, r0
 800d870:	05db      	lsls	r3, r3, #23
 800d872:	460c      	mov	r4, r1
 800d874:	4616      	mov	r6, r2
 800d876:	d505      	bpl.n	800d884 <__swrite+0x1e>
 800d878:	2302      	movs	r3, #2
 800d87a:	2200      	movs	r2, #0
 800d87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d880:	f001 f81a 	bl	800e8b8 <_lseek_r>
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	4632      	mov	r2, r6
 800d888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d88c:	81a3      	strh	r3, [r4, #12]
 800d88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d892:	463b      	mov	r3, r7
 800d894:	4628      	mov	r0, r5
 800d896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d89a:	f000 b889 	b.w	800d9b0 <_write_r>

0800d89e <__sseek>:
 800d89e:	b510      	push	{r4, lr}
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a6:	f001 f807 	bl	800e8b8 <_lseek_r>
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	bf15      	itete	ne
 800d8b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8ba:	81a3      	strheq	r3, [r4, #12]
 800d8bc:	bf18      	it	ne
 800d8be:	81a3      	strhne	r3, [r4, #12]
 800d8c0:	bd10      	pop	{r4, pc}

0800d8c2 <__sclose>:
 800d8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c6:	f000 b8f3 	b.w	800dab0 <_close_r>

0800d8ca <strncmp>:
 800d8ca:	b510      	push	{r4, lr}
 800d8cc:	b16a      	cbz	r2, 800d8ea <strncmp+0x20>
 800d8ce:	3901      	subs	r1, #1
 800d8d0:	1884      	adds	r4, r0, r2
 800d8d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d8d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d103      	bne.n	800d8e6 <strncmp+0x1c>
 800d8de:	42a0      	cmp	r0, r4
 800d8e0:	d001      	beq.n	800d8e6 <strncmp+0x1c>
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1f5      	bne.n	800d8d2 <strncmp+0x8>
 800d8e6:	1a98      	subs	r0, r3, r2
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	e7fc      	b.n	800d8e8 <strncmp+0x1e>
	...

0800d8f0 <__swbuf_r>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	460e      	mov	r6, r1
 800d8f4:	4614      	mov	r4, r2
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	b118      	cbz	r0, 800d902 <__swbuf_r+0x12>
 800d8fa:	6983      	ldr	r3, [r0, #24]
 800d8fc:	b90b      	cbnz	r3, 800d902 <__swbuf_r+0x12>
 800d8fe:	f7fe fb69 	bl	800bfd4 <__sinit>
 800d902:	4b21      	ldr	r3, [pc, #132]	; (800d988 <__swbuf_r+0x98>)
 800d904:	429c      	cmp	r4, r3
 800d906:	d12a      	bne.n	800d95e <__swbuf_r+0x6e>
 800d908:	686c      	ldr	r4, [r5, #4]
 800d90a:	69a3      	ldr	r3, [r4, #24]
 800d90c:	60a3      	str	r3, [r4, #8]
 800d90e:	89a3      	ldrh	r3, [r4, #12]
 800d910:	071a      	lsls	r2, r3, #28
 800d912:	d52e      	bpl.n	800d972 <__swbuf_r+0x82>
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	b363      	cbz	r3, 800d972 <__swbuf_r+0x82>
 800d918:	6923      	ldr	r3, [r4, #16]
 800d91a:	6820      	ldr	r0, [r4, #0]
 800d91c:	b2f6      	uxtb	r6, r6
 800d91e:	1ac0      	subs	r0, r0, r3
 800d920:	6963      	ldr	r3, [r4, #20]
 800d922:	4637      	mov	r7, r6
 800d924:	4283      	cmp	r3, r0
 800d926:	dc04      	bgt.n	800d932 <__swbuf_r+0x42>
 800d928:	4621      	mov	r1, r4
 800d92a:	4628      	mov	r0, r5
 800d92c:	f000 ff9a 	bl	800e864 <_fflush_r>
 800d930:	bb28      	cbnz	r0, 800d97e <__swbuf_r+0x8e>
 800d932:	68a3      	ldr	r3, [r4, #8]
 800d934:	3001      	adds	r0, #1
 800d936:	3b01      	subs	r3, #1
 800d938:	60a3      	str	r3, [r4, #8]
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	1c5a      	adds	r2, r3, #1
 800d93e:	6022      	str	r2, [r4, #0]
 800d940:	701e      	strb	r6, [r3, #0]
 800d942:	6963      	ldr	r3, [r4, #20]
 800d944:	4283      	cmp	r3, r0
 800d946:	d004      	beq.n	800d952 <__swbuf_r+0x62>
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	07db      	lsls	r3, r3, #31
 800d94c:	d519      	bpl.n	800d982 <__swbuf_r+0x92>
 800d94e:	2e0a      	cmp	r6, #10
 800d950:	d117      	bne.n	800d982 <__swbuf_r+0x92>
 800d952:	4621      	mov	r1, r4
 800d954:	4628      	mov	r0, r5
 800d956:	f000 ff85 	bl	800e864 <_fflush_r>
 800d95a:	b190      	cbz	r0, 800d982 <__swbuf_r+0x92>
 800d95c:	e00f      	b.n	800d97e <__swbuf_r+0x8e>
 800d95e:	4b0b      	ldr	r3, [pc, #44]	; (800d98c <__swbuf_r+0x9c>)
 800d960:	429c      	cmp	r4, r3
 800d962:	d101      	bne.n	800d968 <__swbuf_r+0x78>
 800d964:	68ac      	ldr	r4, [r5, #8]
 800d966:	e7d0      	b.n	800d90a <__swbuf_r+0x1a>
 800d968:	4b09      	ldr	r3, [pc, #36]	; (800d990 <__swbuf_r+0xa0>)
 800d96a:	429c      	cmp	r4, r3
 800d96c:	bf08      	it	eq
 800d96e:	68ec      	ldreq	r4, [r5, #12]
 800d970:	e7cb      	b.n	800d90a <__swbuf_r+0x1a>
 800d972:	4621      	mov	r1, r4
 800d974:	4628      	mov	r0, r5
 800d976:	f000 f82d 	bl	800d9d4 <__swsetup_r>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d0cc      	beq.n	800d918 <__swbuf_r+0x28>
 800d97e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d982:	4638      	mov	r0, r7
 800d984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d986:	bf00      	nop
 800d988:	0800f730 	.word	0x0800f730
 800d98c:	0800f750 	.word	0x0800f750
 800d990:	0800f710 	.word	0x0800f710

0800d994 <__ascii_wctomb>:
 800d994:	b149      	cbz	r1, 800d9aa <__ascii_wctomb+0x16>
 800d996:	2aff      	cmp	r2, #255	; 0xff
 800d998:	bf8b      	itete	hi
 800d99a:	238a      	movhi	r3, #138	; 0x8a
 800d99c:	700a      	strbls	r2, [r1, #0]
 800d99e:	6003      	strhi	r3, [r0, #0]
 800d9a0:	2001      	movls	r0, #1
 800d9a2:	bf88      	it	hi
 800d9a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d9a8:	4770      	bx	lr
 800d9aa:	4608      	mov	r0, r1
 800d9ac:	4770      	bx	lr
	...

0800d9b0 <_write_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4c05      	ldr	r4, [pc, #20]	; (800d9d0 <_write_r+0x20>)
 800d9bc:	6022      	str	r2, [r4, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f7f8 fd41 	bl	8006446 <_write>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_write_r+0x1e>
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_write_r+0x1e>
 800d9cc:	602b      	str	r3, [r5, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	20000bac 	.word	0x20000bac

0800d9d4 <__swsetup_r>:
 800d9d4:	4b32      	ldr	r3, [pc, #200]	; (800daa0 <__swsetup_r+0xcc>)
 800d9d6:	b570      	push	{r4, r5, r6, lr}
 800d9d8:	681d      	ldr	r5, [r3, #0]
 800d9da:	4606      	mov	r6, r0
 800d9dc:	460c      	mov	r4, r1
 800d9de:	b125      	cbz	r5, 800d9ea <__swsetup_r+0x16>
 800d9e0:	69ab      	ldr	r3, [r5, #24]
 800d9e2:	b913      	cbnz	r3, 800d9ea <__swsetup_r+0x16>
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	f7fe faf5 	bl	800bfd4 <__sinit>
 800d9ea:	4b2e      	ldr	r3, [pc, #184]	; (800daa4 <__swsetup_r+0xd0>)
 800d9ec:	429c      	cmp	r4, r3
 800d9ee:	d10f      	bne.n	800da10 <__swsetup_r+0x3c>
 800d9f0:	686c      	ldr	r4, [r5, #4]
 800d9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	0715      	lsls	r5, r2, #28
 800d9fa:	d42c      	bmi.n	800da56 <__swsetup_r+0x82>
 800d9fc:	06d0      	lsls	r0, r2, #27
 800d9fe:	d411      	bmi.n	800da24 <__swsetup_r+0x50>
 800da00:	2209      	movs	r2, #9
 800da02:	6032      	str	r2, [r6, #0]
 800da04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da08:	81a3      	strh	r3, [r4, #12]
 800da0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da0e:	e03e      	b.n	800da8e <__swsetup_r+0xba>
 800da10:	4b25      	ldr	r3, [pc, #148]	; (800daa8 <__swsetup_r+0xd4>)
 800da12:	429c      	cmp	r4, r3
 800da14:	d101      	bne.n	800da1a <__swsetup_r+0x46>
 800da16:	68ac      	ldr	r4, [r5, #8]
 800da18:	e7eb      	b.n	800d9f2 <__swsetup_r+0x1e>
 800da1a:	4b24      	ldr	r3, [pc, #144]	; (800daac <__swsetup_r+0xd8>)
 800da1c:	429c      	cmp	r4, r3
 800da1e:	bf08      	it	eq
 800da20:	68ec      	ldreq	r4, [r5, #12]
 800da22:	e7e6      	b.n	800d9f2 <__swsetup_r+0x1e>
 800da24:	0751      	lsls	r1, r2, #29
 800da26:	d512      	bpl.n	800da4e <__swsetup_r+0x7a>
 800da28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da2a:	b141      	cbz	r1, 800da3e <__swsetup_r+0x6a>
 800da2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da30:	4299      	cmp	r1, r3
 800da32:	d002      	beq.n	800da3a <__swsetup_r+0x66>
 800da34:	4630      	mov	r0, r6
 800da36:	f7fd f959 	bl	800acec <_free_r>
 800da3a:	2300      	movs	r3, #0
 800da3c:	6363      	str	r3, [r4, #52]	; 0x34
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	2300      	movs	r3, #0
 800da48:	6063      	str	r3, [r4, #4]
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	f043 0308 	orr.w	r3, r3, #8
 800da54:	81a3      	strh	r3, [r4, #12]
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	b94b      	cbnz	r3, 800da6e <__swsetup_r+0x9a>
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da64:	d003      	beq.n	800da6e <__swsetup_r+0x9a>
 800da66:	4621      	mov	r1, r4
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 ff5b 	bl	800e924 <__smakebuf_r>
 800da6e:	89a2      	ldrh	r2, [r4, #12]
 800da70:	f012 0301 	ands.w	r3, r2, #1
 800da74:	d00c      	beq.n	800da90 <__swsetup_r+0xbc>
 800da76:	2300      	movs	r3, #0
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	6963      	ldr	r3, [r4, #20]
 800da7c:	425b      	negs	r3, r3
 800da7e:	61a3      	str	r3, [r4, #24]
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	b953      	cbnz	r3, 800da9a <__swsetup_r+0xc6>
 800da84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800da8c:	d1ba      	bne.n	800da04 <__swsetup_r+0x30>
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	0792      	lsls	r2, r2, #30
 800da92:	bf58      	it	pl
 800da94:	6963      	ldrpl	r3, [r4, #20]
 800da96:	60a3      	str	r3, [r4, #8]
 800da98:	e7f2      	b.n	800da80 <__swsetup_r+0xac>
 800da9a:	2000      	movs	r0, #0
 800da9c:	e7f7      	b.n	800da8e <__swsetup_r+0xba>
 800da9e:	bf00      	nop
 800daa0:	20000070 	.word	0x20000070
 800daa4:	0800f730 	.word	0x0800f730
 800daa8:	0800f750 	.word	0x0800f750
 800daac:	0800f710 	.word	0x0800f710

0800dab0 <_close_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	2300      	movs	r3, #0
 800dab4:	4c05      	ldr	r4, [pc, #20]	; (800dacc <_close_r+0x1c>)
 800dab6:	4605      	mov	r5, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	6023      	str	r3, [r4, #0]
 800dabc:	f7f8 fcdf 	bl	800647e <_close>
 800dac0:	1c43      	adds	r3, r0, #1
 800dac2:	d102      	bne.n	800daca <_close_r+0x1a>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	b103      	cbz	r3, 800daca <_close_r+0x1a>
 800dac8:	602b      	str	r3, [r5, #0]
 800daca:	bd38      	pop	{r3, r4, r5, pc}
 800dacc:	20000bac 	.word	0x20000bac

0800dad0 <quorem>:
 800dad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad4:	6903      	ldr	r3, [r0, #16]
 800dad6:	690c      	ldr	r4, [r1, #16]
 800dad8:	4680      	mov	r8, r0
 800dada:	42a3      	cmp	r3, r4
 800dadc:	f2c0 8084 	blt.w	800dbe8 <quorem+0x118>
 800dae0:	3c01      	subs	r4, #1
 800dae2:	f101 0714 	add.w	r7, r1, #20
 800dae6:	f100 0614 	add.w	r6, r0, #20
 800daea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800daee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800daf2:	3501      	adds	r5, #1
 800daf4:	fbb0 f5f5 	udiv	r5, r0, r5
 800daf8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dafc:	eb06 030c 	add.w	r3, r6, ip
 800db00:	eb07 090c 	add.w	r9, r7, ip
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	b39d      	cbz	r5, 800db70 <quorem+0xa0>
 800db08:	f04f 0a00 	mov.w	sl, #0
 800db0c:	4638      	mov	r0, r7
 800db0e:	46b6      	mov	lr, r6
 800db10:	46d3      	mov	fp, sl
 800db12:	f850 2b04 	ldr.w	r2, [r0], #4
 800db16:	b293      	uxth	r3, r2
 800db18:	fb05 a303 	mla	r3, r5, r3, sl
 800db1c:	0c12      	lsrs	r2, r2, #16
 800db1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db22:	fb05 a202 	mla	r2, r5, r2, sl
 800db26:	b29b      	uxth	r3, r3
 800db28:	ebab 0303 	sub.w	r3, fp, r3
 800db2c:	f8de b000 	ldr.w	fp, [lr]
 800db30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800db34:	fa1f fb8b 	uxth.w	fp, fp
 800db38:	445b      	add	r3, fp
 800db3a:	fa1f fb82 	uxth.w	fp, r2
 800db3e:	f8de 2000 	ldr.w	r2, [lr]
 800db42:	4581      	cmp	r9, r0
 800db44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800db48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db52:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800db56:	f84e 3b04 	str.w	r3, [lr], #4
 800db5a:	d2da      	bcs.n	800db12 <quorem+0x42>
 800db5c:	f856 300c 	ldr.w	r3, [r6, ip]
 800db60:	b933      	cbnz	r3, 800db70 <quorem+0xa0>
 800db62:	9b01      	ldr	r3, [sp, #4]
 800db64:	3b04      	subs	r3, #4
 800db66:	429e      	cmp	r6, r3
 800db68:	461a      	mov	r2, r3
 800db6a:	d331      	bcc.n	800dbd0 <quorem+0x100>
 800db6c:	f8c8 4010 	str.w	r4, [r8, #16]
 800db70:	4640      	mov	r0, r8
 800db72:	f7ff f857 	bl	800cc24 <__mcmp>
 800db76:	2800      	cmp	r0, #0
 800db78:	db26      	blt.n	800dbc8 <quorem+0xf8>
 800db7a:	4630      	mov	r0, r6
 800db7c:	f04f 0c00 	mov.w	ip, #0
 800db80:	3501      	adds	r5, #1
 800db82:	f857 1b04 	ldr.w	r1, [r7], #4
 800db86:	f8d0 e000 	ldr.w	lr, [r0]
 800db8a:	b28b      	uxth	r3, r1
 800db8c:	ebac 0303 	sub.w	r3, ip, r3
 800db90:	fa1f f28e 	uxth.w	r2, lr
 800db94:	4413      	add	r3, r2
 800db96:	0c0a      	lsrs	r2, r1, #16
 800db98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dba6:	45b9      	cmp	r9, r7
 800dba8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dbac:	f840 3b04 	str.w	r3, [r0], #4
 800dbb0:	d2e7      	bcs.n	800db82 <quorem+0xb2>
 800dbb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dbb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dbba:	b92a      	cbnz	r2, 800dbc8 <quorem+0xf8>
 800dbbc:	3b04      	subs	r3, #4
 800dbbe:	429e      	cmp	r6, r3
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	d30b      	bcc.n	800dbdc <quorem+0x10c>
 800dbc4:	f8c8 4010 	str.w	r4, [r8, #16]
 800dbc8:	4628      	mov	r0, r5
 800dbca:	b003      	add	sp, #12
 800dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd0:	6812      	ldr	r2, [r2, #0]
 800dbd2:	3b04      	subs	r3, #4
 800dbd4:	2a00      	cmp	r2, #0
 800dbd6:	d1c9      	bne.n	800db6c <quorem+0x9c>
 800dbd8:	3c01      	subs	r4, #1
 800dbda:	e7c4      	b.n	800db66 <quorem+0x96>
 800dbdc:	6812      	ldr	r2, [r2, #0]
 800dbde:	3b04      	subs	r3, #4
 800dbe0:	2a00      	cmp	r2, #0
 800dbe2:	d1ef      	bne.n	800dbc4 <quorem+0xf4>
 800dbe4:	3c01      	subs	r4, #1
 800dbe6:	e7ea      	b.n	800dbbe <quorem+0xee>
 800dbe8:	2000      	movs	r0, #0
 800dbea:	e7ee      	b.n	800dbca <quorem+0xfa>
 800dbec:	0000      	movs	r0, r0
	...

0800dbf0 <_dtoa_r>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	4616      	mov	r6, r2
 800dbf6:	461f      	mov	r7, r3
 800dbf8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dbfa:	b095      	sub	sp, #84	; 0x54
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800dc02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dc06:	b93d      	cbnz	r5, 800dc18 <_dtoa_r+0x28>
 800dc08:	2010      	movs	r0, #16
 800dc0a:	f7fd f857 	bl	800acbc <malloc>
 800dc0e:	6260      	str	r0, [r4, #36]	; 0x24
 800dc10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc14:	6005      	str	r5, [r0, #0]
 800dc16:	60c5      	str	r5, [r0, #12]
 800dc18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc1a:	6819      	ldr	r1, [r3, #0]
 800dc1c:	b151      	cbz	r1, 800dc34 <_dtoa_r+0x44>
 800dc1e:	685a      	ldr	r2, [r3, #4]
 800dc20:	2301      	movs	r3, #1
 800dc22:	4093      	lsls	r3, r2
 800dc24:	604a      	str	r2, [r1, #4]
 800dc26:	608b      	str	r3, [r1, #8]
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f7fe fddd 	bl	800c7e8 <_Bfree>
 800dc2e:	2200      	movs	r2, #0
 800dc30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	1e3b      	subs	r3, r7, #0
 800dc36:	bfaf      	iteee	ge
 800dc38:	2300      	movge	r3, #0
 800dc3a:	2201      	movlt	r2, #1
 800dc3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc40:	9303      	strlt	r3, [sp, #12]
 800dc42:	bfac      	ite	ge
 800dc44:	f8c8 3000 	strge.w	r3, [r8]
 800dc48:	f8c8 2000 	strlt.w	r2, [r8]
 800dc4c:	4bae      	ldr	r3, [pc, #696]	; (800df08 <_dtoa_r+0x318>)
 800dc4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dc52:	ea33 0308 	bics.w	r3, r3, r8
 800dc56:	d11b      	bne.n	800dc90 <_dtoa_r+0xa0>
 800dc58:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc5e:	6013      	str	r3, [r2, #0]
 800dc60:	9b02      	ldr	r3, [sp, #8]
 800dc62:	b923      	cbnz	r3, 800dc6e <_dtoa_r+0x7e>
 800dc64:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	f000 8545 	beq.w	800e6f8 <_dtoa_r+0xb08>
 800dc6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc70:	b953      	cbnz	r3, 800dc88 <_dtoa_r+0x98>
 800dc72:	4ba6      	ldr	r3, [pc, #664]	; (800df0c <_dtoa_r+0x31c>)
 800dc74:	e021      	b.n	800dcba <_dtoa_r+0xca>
 800dc76:	4ba6      	ldr	r3, [pc, #664]	; (800df10 <_dtoa_r+0x320>)
 800dc78:	9306      	str	r3, [sp, #24]
 800dc7a:	3308      	adds	r3, #8
 800dc7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	9806      	ldr	r0, [sp, #24]
 800dc82:	b015      	add	sp, #84	; 0x54
 800dc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc88:	4ba0      	ldr	r3, [pc, #640]	; (800df0c <_dtoa_r+0x31c>)
 800dc8a:	9306      	str	r3, [sp, #24]
 800dc8c:	3303      	adds	r3, #3
 800dc8e:	e7f5      	b.n	800dc7c <_dtoa_r+0x8c>
 800dc90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc94:	2200      	movs	r2, #0
 800dc96:	2300      	movs	r3, #0
 800dc98:	4630      	mov	r0, r6
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 800dca0:	4682      	mov	sl, r0
 800dca2:	b160      	cbz	r0, 800dcbe <_dtoa_r+0xce>
 800dca4:	2301      	movs	r3, #1
 800dca6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dca8:	6013      	str	r3, [r2, #0]
 800dcaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8520 	beq.w	800e6f2 <_dtoa_r+0xb02>
 800dcb2:	4b98      	ldr	r3, [pc, #608]	; (800df14 <_dtoa_r+0x324>)
 800dcb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	9306      	str	r3, [sp, #24]
 800dcbc:	e7e0      	b.n	800dc80 <_dtoa_r+0x90>
 800dcbe:	ab12      	add	r3, sp, #72	; 0x48
 800dcc0:	9301      	str	r3, [sp, #4]
 800dcc2:	ab13      	add	r3, sp, #76	; 0x4c
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	4632      	mov	r2, r6
 800dcc8:	463b      	mov	r3, r7
 800dcca:	4620      	mov	r0, r4
 800dccc:	f7ff f898 	bl	800ce00 <__d2b>
 800dcd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dcd4:	4683      	mov	fp, r0
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	d07d      	beq.n	800ddd6 <_dtoa_r+0x1e6>
 800dcda:	46b0      	mov	r8, r6
 800dcdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dce0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800dce4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800dce8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dcec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4b89      	ldr	r3, [pc, #548]	; (800df18 <_dtoa_r+0x328>)
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	f7f2 fa36 	bl	8000168 <__aeabi_dsub>
 800dcfc:	a37c      	add	r3, pc, #496	; (adr r3, 800def0 <_dtoa_r+0x300>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f7f2 fbe9 	bl	80004d8 <__aeabi_dmul>
 800dd06:	a37c      	add	r3, pc, #496	; (adr r3, 800def8 <_dtoa_r+0x308>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	f7f2 fa2e 	bl	800016c <__adddf3>
 800dd10:	4606      	mov	r6, r0
 800dd12:	4628      	mov	r0, r5
 800dd14:	460f      	mov	r7, r1
 800dd16:	f7f2 fb75 	bl	8000404 <__aeabi_i2d>
 800dd1a:	a379      	add	r3, pc, #484	; (adr r3, 800df00 <_dtoa_r+0x310>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	f7f2 fbda 	bl	80004d8 <__aeabi_dmul>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4630      	mov	r0, r6
 800dd2a:	4639      	mov	r1, r7
 800dd2c:	f7f2 fa1e 	bl	800016c <__adddf3>
 800dd30:	4606      	mov	r6, r0
 800dd32:	460f      	mov	r7, r1
 800dd34:	f7f2 fe6a 	bl	8000a0c <__aeabi_d2iz>
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4682      	mov	sl, r0
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4630      	mov	r0, r6
 800dd40:	4639      	mov	r1, r7
 800dd42:	f7f2 fe3b 	bl	80009bc <__aeabi_dcmplt>
 800dd46:	b148      	cbz	r0, 800dd5c <_dtoa_r+0x16c>
 800dd48:	4650      	mov	r0, sl
 800dd4a:	f7f2 fb5b 	bl	8000404 <__aeabi_i2d>
 800dd4e:	4632      	mov	r2, r6
 800dd50:	463b      	mov	r3, r7
 800dd52:	f7f2 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 800dd56:	b908      	cbnz	r0, 800dd5c <_dtoa_r+0x16c>
 800dd58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dd5c:	f1ba 0f16 	cmp.w	sl, #22
 800dd60:	d85a      	bhi.n	800de18 <_dtoa_r+0x228>
 800dd62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd66:	496d      	ldr	r1, [pc, #436]	; (800df1c <_dtoa_r+0x32c>)
 800dd68:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dd6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd70:	f7f2 fe42 	bl	80009f8 <__aeabi_dcmpgt>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d051      	beq.n	800de1c <_dtoa_r+0x22c>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dd7e:	930d      	str	r3, [sp, #52]	; 0x34
 800dd80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd82:	1b5d      	subs	r5, r3, r5
 800dd84:	1e6b      	subs	r3, r5, #1
 800dd86:	9307      	str	r3, [sp, #28]
 800dd88:	bf43      	ittte	mi
 800dd8a:	2300      	movmi	r3, #0
 800dd8c:	f1c5 0901 	rsbmi	r9, r5, #1
 800dd90:	9307      	strmi	r3, [sp, #28]
 800dd92:	f04f 0900 	movpl.w	r9, #0
 800dd96:	f1ba 0f00 	cmp.w	sl, #0
 800dd9a:	db41      	blt.n	800de20 <_dtoa_r+0x230>
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800dda2:	4453      	add	r3, sl
 800dda4:	9307      	str	r3, [sp, #28]
 800dda6:	2300      	movs	r3, #0
 800dda8:	9308      	str	r3, [sp, #32]
 800ddaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddac:	2b09      	cmp	r3, #9
 800ddae:	f200 808f 	bhi.w	800ded0 <_dtoa_r+0x2e0>
 800ddb2:	2b05      	cmp	r3, #5
 800ddb4:	bfc4      	itt	gt
 800ddb6:	3b04      	subgt	r3, #4
 800ddb8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ddba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddbc:	bfc8      	it	gt
 800ddbe:	2500      	movgt	r5, #0
 800ddc0:	f1a3 0302 	sub.w	r3, r3, #2
 800ddc4:	bfd8      	it	le
 800ddc6:	2501      	movle	r5, #1
 800ddc8:	2b03      	cmp	r3, #3
 800ddca:	f200 808d 	bhi.w	800dee8 <_dtoa_r+0x2f8>
 800ddce:	e8df f003 	tbb	[pc, r3]
 800ddd2:	7d7b      	.short	0x7d7b
 800ddd4:	6f2f      	.short	0x6f2f
 800ddd6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ddda:	441d      	add	r5, r3
 800dddc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dde0:	2820      	cmp	r0, #32
 800dde2:	dd13      	ble.n	800de0c <_dtoa_r+0x21c>
 800dde4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dde8:	9b02      	ldr	r3, [sp, #8]
 800ddea:	fa08 f800 	lsl.w	r8, r8, r0
 800ddee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ddf2:	fa23 f000 	lsr.w	r0, r3, r0
 800ddf6:	ea48 0000 	orr.w	r0, r8, r0
 800ddfa:	f7f2 faf3 	bl	80003e4 <__aeabi_ui2d>
 800ddfe:	2301      	movs	r3, #1
 800de00:	4680      	mov	r8, r0
 800de02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800de06:	3d01      	subs	r5, #1
 800de08:	9310      	str	r3, [sp, #64]	; 0x40
 800de0a:	e771      	b.n	800dcf0 <_dtoa_r+0x100>
 800de0c:	9b02      	ldr	r3, [sp, #8]
 800de0e:	f1c0 0020 	rsb	r0, r0, #32
 800de12:	fa03 f000 	lsl.w	r0, r3, r0
 800de16:	e7f0      	b.n	800ddfa <_dtoa_r+0x20a>
 800de18:	2301      	movs	r3, #1
 800de1a:	e7b0      	b.n	800dd7e <_dtoa_r+0x18e>
 800de1c:	900d      	str	r0, [sp, #52]	; 0x34
 800de1e:	e7af      	b.n	800dd80 <_dtoa_r+0x190>
 800de20:	f1ca 0300 	rsb	r3, sl, #0
 800de24:	9308      	str	r3, [sp, #32]
 800de26:	2300      	movs	r3, #0
 800de28:	eba9 090a 	sub.w	r9, r9, sl
 800de2c:	930c      	str	r3, [sp, #48]	; 0x30
 800de2e:	e7bc      	b.n	800ddaa <_dtoa_r+0x1ba>
 800de30:	2301      	movs	r3, #1
 800de32:	9309      	str	r3, [sp, #36]	; 0x24
 800de34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de36:	2b00      	cmp	r3, #0
 800de38:	dd74      	ble.n	800df24 <_dtoa_r+0x334>
 800de3a:	4698      	mov	r8, r3
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	2200      	movs	r2, #0
 800de40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de42:	6072      	str	r2, [r6, #4]
 800de44:	2204      	movs	r2, #4
 800de46:	f102 0014 	add.w	r0, r2, #20
 800de4a:	4298      	cmp	r0, r3
 800de4c:	6871      	ldr	r1, [r6, #4]
 800de4e:	d96e      	bls.n	800df2e <_dtoa_r+0x33e>
 800de50:	4620      	mov	r0, r4
 800de52:	f7fe fc95 	bl	800c780 <_Balloc>
 800de56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de58:	6030      	str	r0, [r6, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f1b8 0f0e 	cmp.w	r8, #14
 800de60:	9306      	str	r3, [sp, #24]
 800de62:	f200 80ed 	bhi.w	800e040 <_dtoa_r+0x450>
 800de66:	2d00      	cmp	r5, #0
 800de68:	f000 80ea 	beq.w	800e040 <_dtoa_r+0x450>
 800de6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de70:	f1ba 0f00 	cmp.w	sl, #0
 800de74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800de78:	dd77      	ble.n	800df6a <_dtoa_r+0x37a>
 800de7a:	4a28      	ldr	r2, [pc, #160]	; (800df1c <_dtoa_r+0x32c>)
 800de7c:	f00a 030f 	and.w	r3, sl, #15
 800de80:	ea4f 162a 	mov.w	r6, sl, asr #4
 800de84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de88:	06f0      	lsls	r0, r6, #27
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800de92:	d568      	bpl.n	800df66 <_dtoa_r+0x376>
 800de94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800de98:	4b21      	ldr	r3, [pc, #132]	; (800df20 <_dtoa_r+0x330>)
 800de9a:	2503      	movs	r5, #3
 800de9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dea0:	f7f2 fc44 	bl	800072c <__aeabi_ddiv>
 800dea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dea8:	f006 060f 	and.w	r6, r6, #15
 800deac:	4f1c      	ldr	r7, [pc, #112]	; (800df20 <_dtoa_r+0x330>)
 800deae:	e04f      	b.n	800df50 <_dtoa_r+0x360>
 800deb0:	2301      	movs	r3, #1
 800deb2:	9309      	str	r3, [sp, #36]	; 0x24
 800deb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800deb6:	4453      	add	r3, sl
 800deb8:	f103 0801 	add.w	r8, r3, #1
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	4643      	mov	r3, r8
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	bfb8      	it	lt
 800dec4:	2301      	movlt	r3, #1
 800dec6:	e7ba      	b.n	800de3e <_dtoa_r+0x24e>
 800dec8:	2300      	movs	r3, #0
 800deca:	e7b2      	b.n	800de32 <_dtoa_r+0x242>
 800decc:	2300      	movs	r3, #0
 800dece:	e7f0      	b.n	800deb2 <_dtoa_r+0x2c2>
 800ded0:	2501      	movs	r5, #1
 800ded2:	2300      	movs	r3, #0
 800ded4:	9509      	str	r5, [sp, #36]	; 0x24
 800ded6:	931e      	str	r3, [sp, #120]	; 0x78
 800ded8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dedc:	2200      	movs	r2, #0
 800dede:	9304      	str	r3, [sp, #16]
 800dee0:	4698      	mov	r8, r3
 800dee2:	2312      	movs	r3, #18
 800dee4:	921f      	str	r2, [sp, #124]	; 0x7c
 800dee6:	e7aa      	b.n	800de3e <_dtoa_r+0x24e>
 800dee8:	2301      	movs	r3, #1
 800deea:	9309      	str	r3, [sp, #36]	; 0x24
 800deec:	e7f4      	b.n	800ded8 <_dtoa_r+0x2e8>
 800deee:	bf00      	nop
 800def0:	636f4361 	.word	0x636f4361
 800def4:	3fd287a7 	.word	0x3fd287a7
 800def8:	8b60c8b3 	.word	0x8b60c8b3
 800defc:	3fc68a28 	.word	0x3fc68a28
 800df00:	509f79fb 	.word	0x509f79fb
 800df04:	3fd34413 	.word	0x3fd34413
 800df08:	7ff00000 	.word	0x7ff00000
 800df0c:	0800f9b9 	.word	0x0800f9b9
 800df10:	0800f9b0 	.word	0x0800f9b0
 800df14:	0800f9be 	.word	0x0800f9be
 800df18:	3ff80000 	.word	0x3ff80000
 800df1c:	0800f7a8 	.word	0x0800f7a8
 800df20:	0800f780 	.word	0x0800f780
 800df24:	2301      	movs	r3, #1
 800df26:	9304      	str	r3, [sp, #16]
 800df28:	4698      	mov	r8, r3
 800df2a:	461a      	mov	r2, r3
 800df2c:	e7da      	b.n	800dee4 <_dtoa_r+0x2f4>
 800df2e:	3101      	adds	r1, #1
 800df30:	6071      	str	r1, [r6, #4]
 800df32:	0052      	lsls	r2, r2, #1
 800df34:	e787      	b.n	800de46 <_dtoa_r+0x256>
 800df36:	07f1      	lsls	r1, r6, #31
 800df38:	d508      	bpl.n	800df4c <_dtoa_r+0x35c>
 800df3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df42:	f7f2 fac9 	bl	80004d8 <__aeabi_dmul>
 800df46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800df4a:	3501      	adds	r5, #1
 800df4c:	1076      	asrs	r6, r6, #1
 800df4e:	3708      	adds	r7, #8
 800df50:	2e00      	cmp	r6, #0
 800df52:	d1f0      	bne.n	800df36 <_dtoa_r+0x346>
 800df54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800df58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df5c:	f7f2 fbe6 	bl	800072c <__aeabi_ddiv>
 800df60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df64:	e01b      	b.n	800df9e <_dtoa_r+0x3ae>
 800df66:	2502      	movs	r5, #2
 800df68:	e7a0      	b.n	800deac <_dtoa_r+0x2bc>
 800df6a:	f000 80a4 	beq.w	800e0b6 <_dtoa_r+0x4c6>
 800df6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df72:	f1ca 0600 	rsb	r6, sl, #0
 800df76:	4ba0      	ldr	r3, [pc, #640]	; (800e1f8 <_dtoa_r+0x608>)
 800df78:	f006 020f 	and.w	r2, r6, #15
 800df7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df84:	f7f2 faa8 	bl	80004d8 <__aeabi_dmul>
 800df88:	2502      	movs	r5, #2
 800df8a:	2300      	movs	r3, #0
 800df8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df90:	4f9a      	ldr	r7, [pc, #616]	; (800e1fc <_dtoa_r+0x60c>)
 800df92:	1136      	asrs	r6, r6, #4
 800df94:	2e00      	cmp	r6, #0
 800df96:	f040 8083 	bne.w	800e0a0 <_dtoa_r+0x4b0>
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1e0      	bne.n	800df60 <_dtoa_r+0x370>
 800df9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 808a 	beq.w	800e0ba <_dtoa_r+0x4ca>
 800dfa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dfae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4b92      	ldr	r3, [pc, #584]	; (800e200 <_dtoa_r+0x610>)
 800dfb6:	f7f2 fd01 	bl	80009bc <__aeabi_dcmplt>
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d07d      	beq.n	800e0ba <_dtoa_r+0x4ca>
 800dfbe:	f1b8 0f00 	cmp.w	r8, #0
 800dfc2:	d07a      	beq.n	800e0ba <_dtoa_r+0x4ca>
 800dfc4:	9b04      	ldr	r3, [sp, #16]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	dd36      	ble.n	800e038 <_dtoa_r+0x448>
 800dfca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfce:	2200      	movs	r2, #0
 800dfd0:	4b8c      	ldr	r3, [pc, #560]	; (800e204 <_dtoa_r+0x614>)
 800dfd2:	f7f2 fa81 	bl	80004d8 <__aeabi_dmul>
 800dfd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfda:	9e04      	ldr	r6, [sp, #16]
 800dfdc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800dfe0:	3501      	adds	r5, #1
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f7f2 fa0e 	bl	8000404 <__aeabi_i2d>
 800dfe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfec:	f7f2 fa74 	bl	80004d8 <__aeabi_dmul>
 800dff0:	2200      	movs	r2, #0
 800dff2:	4b85      	ldr	r3, [pc, #532]	; (800e208 <_dtoa_r+0x618>)
 800dff4:	f7f2 f8ba 	bl	800016c <__adddf3>
 800dff8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800dffc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e000:	950b      	str	r5, [sp, #44]	; 0x2c
 800e002:	2e00      	cmp	r6, #0
 800e004:	d15c      	bne.n	800e0c0 <_dtoa_r+0x4d0>
 800e006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00a:	2200      	movs	r2, #0
 800e00c:	4b7f      	ldr	r3, [pc, #508]	; (800e20c <_dtoa_r+0x61c>)
 800e00e:	f7f2 f8ab 	bl	8000168 <__aeabi_dsub>
 800e012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e014:	462b      	mov	r3, r5
 800e016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e01a:	f7f2 fced 	bl	80009f8 <__aeabi_dcmpgt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	f040 8281 	bne.w	800e526 <_dtoa_r+0x936>
 800e024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e02a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e02e:	f7f2 fcc5 	bl	80009bc <__aeabi_dcmplt>
 800e032:	2800      	cmp	r0, #0
 800e034:	f040 8275 	bne.w	800e522 <_dtoa_r+0x932>
 800e038:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e042:	2b00      	cmp	r3, #0
 800e044:	f2c0 814b 	blt.w	800e2de <_dtoa_r+0x6ee>
 800e048:	f1ba 0f0e 	cmp.w	sl, #14
 800e04c:	f300 8147 	bgt.w	800e2de <_dtoa_r+0x6ee>
 800e050:	4b69      	ldr	r3, [pc, #420]	; (800e1f8 <_dtoa_r+0x608>)
 800e052:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e05e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e060:	2b00      	cmp	r3, #0
 800e062:	f280 80d7 	bge.w	800e214 <_dtoa_r+0x624>
 800e066:	f1b8 0f00 	cmp.w	r8, #0
 800e06a:	f300 80d3 	bgt.w	800e214 <_dtoa_r+0x624>
 800e06e:	f040 8257 	bne.w	800e520 <_dtoa_r+0x930>
 800e072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e076:	2200      	movs	r2, #0
 800e078:	4b64      	ldr	r3, [pc, #400]	; (800e20c <_dtoa_r+0x61c>)
 800e07a:	f7f2 fa2d 	bl	80004d8 <__aeabi_dmul>
 800e07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e082:	f7f2 fcaf 	bl	80009e4 <__aeabi_dcmpge>
 800e086:	4646      	mov	r6, r8
 800e088:	4647      	mov	r7, r8
 800e08a:	2800      	cmp	r0, #0
 800e08c:	f040 822d 	bne.w	800e4ea <_dtoa_r+0x8fa>
 800e090:	9b06      	ldr	r3, [sp, #24]
 800e092:	9a06      	ldr	r2, [sp, #24]
 800e094:	1c5d      	adds	r5, r3, #1
 800e096:	2331      	movs	r3, #49	; 0x31
 800e098:	f10a 0a01 	add.w	sl, sl, #1
 800e09c:	7013      	strb	r3, [r2, #0]
 800e09e:	e228      	b.n	800e4f2 <_dtoa_r+0x902>
 800e0a0:	07f2      	lsls	r2, r6, #31
 800e0a2:	d505      	bpl.n	800e0b0 <_dtoa_r+0x4c0>
 800e0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0a8:	f7f2 fa16 	bl	80004d8 <__aeabi_dmul>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	3501      	adds	r5, #1
 800e0b0:	1076      	asrs	r6, r6, #1
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	e76e      	b.n	800df94 <_dtoa_r+0x3a4>
 800e0b6:	2502      	movs	r5, #2
 800e0b8:	e771      	b.n	800df9e <_dtoa_r+0x3ae>
 800e0ba:	4657      	mov	r7, sl
 800e0bc:	4646      	mov	r6, r8
 800e0be:	e790      	b.n	800dfe2 <_dtoa_r+0x3f2>
 800e0c0:	4b4d      	ldr	r3, [pc, #308]	; (800e1f8 <_dtoa_r+0x608>)
 800e0c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d048      	beq.n	800e162 <_dtoa_r+0x572>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	494e      	ldr	r1, [pc, #312]	; (800e210 <_dtoa_r+0x620>)
 800e0d8:	f7f2 fb28 	bl	800072c <__aeabi_ddiv>
 800e0dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e0e0:	f7f2 f842 	bl	8000168 <__aeabi_dsub>
 800e0e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e0e8:	9d06      	ldr	r5, [sp, #24]
 800e0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ee:	f7f2 fc8d 	bl	8000a0c <__aeabi_d2iz>
 800e0f2:	9011      	str	r0, [sp, #68]	; 0x44
 800e0f4:	f7f2 f986 	bl	8000404 <__aeabi_i2d>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e100:	f7f2 f832 	bl	8000168 <__aeabi_dsub>
 800e104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e10a:	3330      	adds	r3, #48	; 0x30
 800e10c:	f805 3b01 	strb.w	r3, [r5], #1
 800e110:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e114:	f7f2 fc52 	bl	80009bc <__aeabi_dcmplt>
 800e118:	2800      	cmp	r0, #0
 800e11a:	d163      	bne.n	800e1e4 <_dtoa_r+0x5f4>
 800e11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e120:	2000      	movs	r0, #0
 800e122:	4937      	ldr	r1, [pc, #220]	; (800e200 <_dtoa_r+0x610>)
 800e124:	f7f2 f820 	bl	8000168 <__aeabi_dsub>
 800e128:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e12c:	f7f2 fc46 	bl	80009bc <__aeabi_dcmplt>
 800e130:	2800      	cmp	r0, #0
 800e132:	f040 80b5 	bne.w	800e2a0 <_dtoa_r+0x6b0>
 800e136:	9b06      	ldr	r3, [sp, #24]
 800e138:	1aeb      	subs	r3, r5, r3
 800e13a:	429e      	cmp	r6, r3
 800e13c:	f77f af7c 	ble.w	800e038 <_dtoa_r+0x448>
 800e140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e144:	2200      	movs	r2, #0
 800e146:	4b2f      	ldr	r3, [pc, #188]	; (800e204 <_dtoa_r+0x614>)
 800e148:	f7f2 f9c6 	bl	80004d8 <__aeabi_dmul>
 800e14c:	2200      	movs	r2, #0
 800e14e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e156:	4b2b      	ldr	r3, [pc, #172]	; (800e204 <_dtoa_r+0x614>)
 800e158:	f7f2 f9be 	bl	80004d8 <__aeabi_dmul>
 800e15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e160:	e7c3      	b.n	800e0ea <_dtoa_r+0x4fa>
 800e162:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e166:	f7f2 f9b7 	bl	80004d8 <__aeabi_dmul>
 800e16a:	9b06      	ldr	r3, [sp, #24]
 800e16c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e170:	199d      	adds	r5, r3, r6
 800e172:	461e      	mov	r6, r3
 800e174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e178:	f7f2 fc48 	bl	8000a0c <__aeabi_d2iz>
 800e17c:	9011      	str	r0, [sp, #68]	; 0x44
 800e17e:	f7f2 f941 	bl	8000404 <__aeabi_i2d>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e18a:	f7f1 ffed 	bl	8000168 <__aeabi_dsub>
 800e18e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e194:	3330      	adds	r3, #48	; 0x30
 800e196:	f806 3b01 	strb.w	r3, [r6], #1
 800e19a:	42ae      	cmp	r6, r5
 800e19c:	f04f 0200 	mov.w	r2, #0
 800e1a0:	d124      	bne.n	800e1ec <_dtoa_r+0x5fc>
 800e1a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1a6:	4b1a      	ldr	r3, [pc, #104]	; (800e210 <_dtoa_r+0x620>)
 800e1a8:	f7f1 ffe0 	bl	800016c <__adddf3>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1b4:	f7f2 fc20 	bl	80009f8 <__aeabi_dcmpgt>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d171      	bne.n	800e2a0 <_dtoa_r+0x6b0>
 800e1bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	4913      	ldr	r1, [pc, #76]	; (800e210 <_dtoa_r+0x620>)
 800e1c4:	f7f1 ffd0 	bl	8000168 <__aeabi_dsub>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1d0:	f7f2 fbf4 	bl	80009bc <__aeabi_dcmplt>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	f43f af2f 	beq.w	800e038 <_dtoa_r+0x448>
 800e1da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1de:	1e6a      	subs	r2, r5, #1
 800e1e0:	2b30      	cmp	r3, #48	; 0x30
 800e1e2:	d001      	beq.n	800e1e8 <_dtoa_r+0x5f8>
 800e1e4:	46ba      	mov	sl, r7
 800e1e6:	e04a      	b.n	800e27e <_dtoa_r+0x68e>
 800e1e8:	4615      	mov	r5, r2
 800e1ea:	e7f6      	b.n	800e1da <_dtoa_r+0x5ea>
 800e1ec:	4b05      	ldr	r3, [pc, #20]	; (800e204 <_dtoa_r+0x614>)
 800e1ee:	f7f2 f973 	bl	80004d8 <__aeabi_dmul>
 800e1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f6:	e7bd      	b.n	800e174 <_dtoa_r+0x584>
 800e1f8:	0800f7a8 	.word	0x0800f7a8
 800e1fc:	0800f780 	.word	0x0800f780
 800e200:	3ff00000 	.word	0x3ff00000
 800e204:	40240000 	.word	0x40240000
 800e208:	401c0000 	.word	0x401c0000
 800e20c:	40140000 	.word	0x40140000
 800e210:	3fe00000 	.word	0x3fe00000
 800e214:	9d06      	ldr	r5, [sp, #24]
 800e216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e21e:	4630      	mov	r0, r6
 800e220:	4639      	mov	r1, r7
 800e222:	f7f2 fa83 	bl	800072c <__aeabi_ddiv>
 800e226:	f7f2 fbf1 	bl	8000a0c <__aeabi_d2iz>
 800e22a:	4681      	mov	r9, r0
 800e22c:	f7f2 f8ea 	bl	8000404 <__aeabi_i2d>
 800e230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e234:	f7f2 f950 	bl	80004d8 <__aeabi_dmul>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4630      	mov	r0, r6
 800e23e:	4639      	mov	r1, r7
 800e240:	f7f1 ff92 	bl	8000168 <__aeabi_dsub>
 800e244:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800e248:	f805 6b01 	strb.w	r6, [r5], #1
 800e24c:	9e06      	ldr	r6, [sp, #24]
 800e24e:	4602      	mov	r2, r0
 800e250:	1bae      	subs	r6, r5, r6
 800e252:	45b0      	cmp	r8, r6
 800e254:	460b      	mov	r3, r1
 800e256:	d135      	bne.n	800e2c4 <_dtoa_r+0x6d4>
 800e258:	f7f1 ff88 	bl	800016c <__adddf3>
 800e25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e260:	4606      	mov	r6, r0
 800e262:	460f      	mov	r7, r1
 800e264:	f7f2 fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 800e268:	b9c8      	cbnz	r0, 800e29e <_dtoa_r+0x6ae>
 800e26a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e26e:	4630      	mov	r0, r6
 800e270:	4639      	mov	r1, r7
 800e272:	f7f2 fb99 	bl	80009a8 <__aeabi_dcmpeq>
 800e276:	b110      	cbz	r0, 800e27e <_dtoa_r+0x68e>
 800e278:	f019 0f01 	tst.w	r9, #1
 800e27c:	d10f      	bne.n	800e29e <_dtoa_r+0x6ae>
 800e27e:	4659      	mov	r1, fp
 800e280:	4620      	mov	r0, r4
 800e282:	f7fe fab1 	bl	800c7e8 <_Bfree>
 800e286:	2300      	movs	r3, #0
 800e288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e28a:	702b      	strb	r3, [r5, #0]
 800e28c:	f10a 0301 	add.w	r3, sl, #1
 800e290:	6013      	str	r3, [r2, #0]
 800e292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e294:	2b00      	cmp	r3, #0
 800e296:	f43f acf3 	beq.w	800dc80 <_dtoa_r+0x90>
 800e29a:	601d      	str	r5, [r3, #0]
 800e29c:	e4f0      	b.n	800dc80 <_dtoa_r+0x90>
 800e29e:	4657      	mov	r7, sl
 800e2a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e2a4:	1e6b      	subs	r3, r5, #1
 800e2a6:	2a39      	cmp	r2, #57	; 0x39
 800e2a8:	d106      	bne.n	800e2b8 <_dtoa_r+0x6c8>
 800e2aa:	9a06      	ldr	r2, [sp, #24]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d107      	bne.n	800e2c0 <_dtoa_r+0x6d0>
 800e2b0:	2330      	movs	r3, #48	; 0x30
 800e2b2:	7013      	strb	r3, [r2, #0]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	3701      	adds	r7, #1
 800e2b8:	781a      	ldrb	r2, [r3, #0]
 800e2ba:	3201      	adds	r2, #1
 800e2bc:	701a      	strb	r2, [r3, #0]
 800e2be:	e791      	b.n	800e1e4 <_dtoa_r+0x5f4>
 800e2c0:	461d      	mov	r5, r3
 800e2c2:	e7ed      	b.n	800e2a0 <_dtoa_r+0x6b0>
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	4b99      	ldr	r3, [pc, #612]	; (800e52c <_dtoa_r+0x93c>)
 800e2c8:	f7f2 f906 	bl	80004d8 <__aeabi_dmul>
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	460f      	mov	r7, r1
 800e2d4:	f7f2 fb68 	bl	80009a8 <__aeabi_dcmpeq>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d09e      	beq.n	800e21a <_dtoa_r+0x62a>
 800e2dc:	e7cf      	b.n	800e27e <_dtoa_r+0x68e>
 800e2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	f000 8088 	beq.w	800e3f6 <_dtoa_r+0x806>
 800e2e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2e8:	2a01      	cmp	r2, #1
 800e2ea:	dc6d      	bgt.n	800e3c8 <_dtoa_r+0x7d8>
 800e2ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	d066      	beq.n	800e3c0 <_dtoa_r+0x7d0>
 800e2f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e2f6:	464d      	mov	r5, r9
 800e2f8:	9e08      	ldr	r6, [sp, #32]
 800e2fa:	9a07      	ldr	r2, [sp, #28]
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	441a      	add	r2, r3
 800e300:	4620      	mov	r0, r4
 800e302:	4499      	add	r9, r3
 800e304:	9207      	str	r2, [sp, #28]
 800e306:	f7fe fb4d 	bl	800c9a4 <__i2b>
 800e30a:	4607      	mov	r7, r0
 800e30c:	2d00      	cmp	r5, #0
 800e30e:	dd0b      	ble.n	800e328 <_dtoa_r+0x738>
 800e310:	9b07      	ldr	r3, [sp, #28]
 800e312:	2b00      	cmp	r3, #0
 800e314:	dd08      	ble.n	800e328 <_dtoa_r+0x738>
 800e316:	42ab      	cmp	r3, r5
 800e318:	bfa8      	it	ge
 800e31a:	462b      	movge	r3, r5
 800e31c:	9a07      	ldr	r2, [sp, #28]
 800e31e:	eba9 0903 	sub.w	r9, r9, r3
 800e322:	1aed      	subs	r5, r5, r3
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	9307      	str	r3, [sp, #28]
 800e328:	9b08      	ldr	r3, [sp, #32]
 800e32a:	b1eb      	cbz	r3, 800e368 <_dtoa_r+0x778>
 800e32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d065      	beq.n	800e3fe <_dtoa_r+0x80e>
 800e332:	b18e      	cbz	r6, 800e358 <_dtoa_r+0x768>
 800e334:	4639      	mov	r1, r7
 800e336:	4632      	mov	r2, r6
 800e338:	4620      	mov	r0, r4
 800e33a:	f7fe fbd1 	bl	800cae0 <__pow5mult>
 800e33e:	465a      	mov	r2, fp
 800e340:	4601      	mov	r1, r0
 800e342:	4607      	mov	r7, r0
 800e344:	4620      	mov	r0, r4
 800e346:	f7fe fb36 	bl	800c9b6 <__multiply>
 800e34a:	4659      	mov	r1, fp
 800e34c:	900a      	str	r0, [sp, #40]	; 0x28
 800e34e:	4620      	mov	r0, r4
 800e350:	f7fe fa4a 	bl	800c7e8 <_Bfree>
 800e354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e356:	469b      	mov	fp, r3
 800e358:	9b08      	ldr	r3, [sp, #32]
 800e35a:	1b9a      	subs	r2, r3, r6
 800e35c:	d004      	beq.n	800e368 <_dtoa_r+0x778>
 800e35e:	4659      	mov	r1, fp
 800e360:	4620      	mov	r0, r4
 800e362:	f7fe fbbd 	bl	800cae0 <__pow5mult>
 800e366:	4683      	mov	fp, r0
 800e368:	2101      	movs	r1, #1
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7fe fb1a 	bl	800c9a4 <__i2b>
 800e370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e372:	4606      	mov	r6, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 81c6 	beq.w	800e706 <_dtoa_r+0xb16>
 800e37a:	461a      	mov	r2, r3
 800e37c:	4601      	mov	r1, r0
 800e37e:	4620      	mov	r0, r4
 800e380:	f7fe fbae 	bl	800cae0 <__pow5mult>
 800e384:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e386:	4606      	mov	r6, r0
 800e388:	2b01      	cmp	r3, #1
 800e38a:	dc3e      	bgt.n	800e40a <_dtoa_r+0x81a>
 800e38c:	9b02      	ldr	r3, [sp, #8]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d137      	bne.n	800e402 <_dtoa_r+0x812>
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d134      	bne.n	800e406 <_dtoa_r+0x816>
 800e39c:	9b03      	ldr	r3, [sp, #12]
 800e39e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3a2:	0d1b      	lsrs	r3, r3, #20
 800e3a4:	051b      	lsls	r3, r3, #20
 800e3a6:	b12b      	cbz	r3, 800e3b4 <_dtoa_r+0x7c4>
 800e3a8:	9b07      	ldr	r3, [sp, #28]
 800e3aa:	f109 0901 	add.w	r9, r9, #1
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	9307      	str	r3, [sp, #28]
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	9308      	str	r3, [sp, #32]
 800e3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d128      	bne.n	800e40e <_dtoa_r+0x81e>
 800e3bc:	2001      	movs	r0, #1
 800e3be:	e02e      	b.n	800e41e <_dtoa_r+0x82e>
 800e3c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e3c6:	e796      	b.n	800e2f6 <_dtoa_r+0x706>
 800e3c8:	9b08      	ldr	r3, [sp, #32]
 800e3ca:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800e3ce:	42b3      	cmp	r3, r6
 800e3d0:	bfb7      	itett	lt
 800e3d2:	9b08      	ldrlt	r3, [sp, #32]
 800e3d4:	1b9e      	subge	r6, r3, r6
 800e3d6:	1af2      	sublt	r2, r6, r3
 800e3d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800e3da:	bfbf      	itttt	lt
 800e3dc:	9608      	strlt	r6, [sp, #32]
 800e3de:	189b      	addlt	r3, r3, r2
 800e3e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800e3e2:	2600      	movlt	r6, #0
 800e3e4:	f1b8 0f00 	cmp.w	r8, #0
 800e3e8:	bfb9      	ittee	lt
 800e3ea:	eba9 0508 	sublt.w	r5, r9, r8
 800e3ee:	2300      	movlt	r3, #0
 800e3f0:	464d      	movge	r5, r9
 800e3f2:	4643      	movge	r3, r8
 800e3f4:	e781      	b.n	800e2fa <_dtoa_r+0x70a>
 800e3f6:	9e08      	ldr	r6, [sp, #32]
 800e3f8:	464d      	mov	r5, r9
 800e3fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e3fc:	e786      	b.n	800e30c <_dtoa_r+0x71c>
 800e3fe:	9a08      	ldr	r2, [sp, #32]
 800e400:	e7ad      	b.n	800e35e <_dtoa_r+0x76e>
 800e402:	2300      	movs	r3, #0
 800e404:	e7d6      	b.n	800e3b4 <_dtoa_r+0x7c4>
 800e406:	9b02      	ldr	r3, [sp, #8]
 800e408:	e7d4      	b.n	800e3b4 <_dtoa_r+0x7c4>
 800e40a:	2300      	movs	r3, #0
 800e40c:	9308      	str	r3, [sp, #32]
 800e40e:	6933      	ldr	r3, [r6, #16]
 800e410:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e414:	6918      	ldr	r0, [r3, #16]
 800e416:	f7fe fa77 	bl	800c908 <__hi0bits>
 800e41a:	f1c0 0020 	rsb	r0, r0, #32
 800e41e:	9b07      	ldr	r3, [sp, #28]
 800e420:	4418      	add	r0, r3
 800e422:	f010 001f 	ands.w	r0, r0, #31
 800e426:	d047      	beq.n	800e4b8 <_dtoa_r+0x8c8>
 800e428:	f1c0 0320 	rsb	r3, r0, #32
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	dd3b      	ble.n	800e4a8 <_dtoa_r+0x8b8>
 800e430:	9b07      	ldr	r3, [sp, #28]
 800e432:	f1c0 001c 	rsb	r0, r0, #28
 800e436:	4481      	add	r9, r0
 800e438:	4405      	add	r5, r0
 800e43a:	4403      	add	r3, r0
 800e43c:	9307      	str	r3, [sp, #28]
 800e43e:	f1b9 0f00 	cmp.w	r9, #0
 800e442:	dd05      	ble.n	800e450 <_dtoa_r+0x860>
 800e444:	4659      	mov	r1, fp
 800e446:	464a      	mov	r2, r9
 800e448:	4620      	mov	r0, r4
 800e44a:	f7fe fb97 	bl	800cb7c <__lshift>
 800e44e:	4683      	mov	fp, r0
 800e450:	9b07      	ldr	r3, [sp, #28]
 800e452:	2b00      	cmp	r3, #0
 800e454:	dd05      	ble.n	800e462 <_dtoa_r+0x872>
 800e456:	4631      	mov	r1, r6
 800e458:	461a      	mov	r2, r3
 800e45a:	4620      	mov	r0, r4
 800e45c:	f7fe fb8e 	bl	800cb7c <__lshift>
 800e460:	4606      	mov	r6, r0
 800e462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e464:	b353      	cbz	r3, 800e4bc <_dtoa_r+0x8cc>
 800e466:	4631      	mov	r1, r6
 800e468:	4658      	mov	r0, fp
 800e46a:	f7fe fbdb 	bl	800cc24 <__mcmp>
 800e46e:	2800      	cmp	r0, #0
 800e470:	da24      	bge.n	800e4bc <_dtoa_r+0x8cc>
 800e472:	2300      	movs	r3, #0
 800e474:	4659      	mov	r1, fp
 800e476:	220a      	movs	r2, #10
 800e478:	4620      	mov	r0, r4
 800e47a:	f7fe f9cc 	bl	800c816 <__multadd>
 800e47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e480:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e484:	4683      	mov	fp, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	f000 8144 	beq.w	800e714 <_dtoa_r+0xb24>
 800e48c:	2300      	movs	r3, #0
 800e48e:	4639      	mov	r1, r7
 800e490:	220a      	movs	r2, #10
 800e492:	4620      	mov	r0, r4
 800e494:	f7fe f9bf 	bl	800c816 <__multadd>
 800e498:	9b04      	ldr	r3, [sp, #16]
 800e49a:	4607      	mov	r7, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	dc4d      	bgt.n	800e53c <_dtoa_r+0x94c>
 800e4a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	dd4a      	ble.n	800e53c <_dtoa_r+0x94c>
 800e4a6:	e011      	b.n	800e4cc <_dtoa_r+0x8dc>
 800e4a8:	d0c9      	beq.n	800e43e <_dtoa_r+0x84e>
 800e4aa:	9a07      	ldr	r2, [sp, #28]
 800e4ac:	331c      	adds	r3, #28
 800e4ae:	441a      	add	r2, r3
 800e4b0:	4499      	add	r9, r3
 800e4b2:	441d      	add	r5, r3
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	e7c1      	b.n	800e43c <_dtoa_r+0x84c>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	e7f6      	b.n	800e4aa <_dtoa_r+0x8ba>
 800e4bc:	f1b8 0f00 	cmp.w	r8, #0
 800e4c0:	dc36      	bgt.n	800e530 <_dtoa_r+0x940>
 800e4c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	dd33      	ble.n	800e530 <_dtoa_r+0x940>
 800e4c8:	f8cd 8010 	str.w	r8, [sp, #16]
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	b963      	cbnz	r3, 800e4ea <_dtoa_r+0x8fa>
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	2205      	movs	r2, #5
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7fe f99e 	bl	800c816 <__multadd>
 800e4da:	4601      	mov	r1, r0
 800e4dc:	4606      	mov	r6, r0
 800e4de:	4658      	mov	r0, fp
 800e4e0:	f7fe fba0 	bl	800cc24 <__mcmp>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	f73f add3 	bgt.w	800e090 <_dtoa_r+0x4a0>
 800e4ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e4ec:	9d06      	ldr	r5, [sp, #24]
 800e4ee:	ea6f 0a03 	mvn.w	sl, r3
 800e4f2:	f04f 0900 	mov.w	r9, #0
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7fe f975 	bl	800c7e8 <_Bfree>
 800e4fe:	2f00      	cmp	r7, #0
 800e500:	f43f aebd 	beq.w	800e27e <_dtoa_r+0x68e>
 800e504:	f1b9 0f00 	cmp.w	r9, #0
 800e508:	d005      	beq.n	800e516 <_dtoa_r+0x926>
 800e50a:	45b9      	cmp	r9, r7
 800e50c:	d003      	beq.n	800e516 <_dtoa_r+0x926>
 800e50e:	4649      	mov	r1, r9
 800e510:	4620      	mov	r0, r4
 800e512:	f7fe f969 	bl	800c7e8 <_Bfree>
 800e516:	4639      	mov	r1, r7
 800e518:	4620      	mov	r0, r4
 800e51a:	f7fe f965 	bl	800c7e8 <_Bfree>
 800e51e:	e6ae      	b.n	800e27e <_dtoa_r+0x68e>
 800e520:	2600      	movs	r6, #0
 800e522:	4637      	mov	r7, r6
 800e524:	e7e1      	b.n	800e4ea <_dtoa_r+0x8fa>
 800e526:	46ba      	mov	sl, r7
 800e528:	4637      	mov	r7, r6
 800e52a:	e5b1      	b.n	800e090 <_dtoa_r+0x4a0>
 800e52c:	40240000 	.word	0x40240000
 800e530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e532:	f8cd 8010 	str.w	r8, [sp, #16]
 800e536:	2b00      	cmp	r3, #0
 800e538:	f000 80f3 	beq.w	800e722 <_dtoa_r+0xb32>
 800e53c:	2d00      	cmp	r5, #0
 800e53e:	dd05      	ble.n	800e54c <_dtoa_r+0x95c>
 800e540:	4639      	mov	r1, r7
 800e542:	462a      	mov	r2, r5
 800e544:	4620      	mov	r0, r4
 800e546:	f7fe fb19 	bl	800cb7c <__lshift>
 800e54a:	4607      	mov	r7, r0
 800e54c:	9b08      	ldr	r3, [sp, #32]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d04c      	beq.n	800e5ec <_dtoa_r+0x9fc>
 800e552:	6879      	ldr	r1, [r7, #4]
 800e554:	4620      	mov	r0, r4
 800e556:	f7fe f913 	bl	800c780 <_Balloc>
 800e55a:	4605      	mov	r5, r0
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	f107 010c 	add.w	r1, r7, #12
 800e562:	3202      	adds	r2, #2
 800e564:	0092      	lsls	r2, r2, #2
 800e566:	300c      	adds	r0, #12
 800e568:	f7fe f8fd 	bl	800c766 <memcpy>
 800e56c:	2201      	movs	r2, #1
 800e56e:	4629      	mov	r1, r5
 800e570:	4620      	mov	r0, r4
 800e572:	f7fe fb03 	bl	800cb7c <__lshift>
 800e576:	46b9      	mov	r9, r7
 800e578:	4607      	mov	r7, r0
 800e57a:	9b06      	ldr	r3, [sp, #24]
 800e57c:	9307      	str	r3, [sp, #28]
 800e57e:	9b02      	ldr	r3, [sp, #8]
 800e580:	f003 0301 	and.w	r3, r3, #1
 800e584:	9308      	str	r3, [sp, #32]
 800e586:	4631      	mov	r1, r6
 800e588:	4658      	mov	r0, fp
 800e58a:	f7ff faa1 	bl	800dad0 <quorem>
 800e58e:	4649      	mov	r1, r9
 800e590:	4605      	mov	r5, r0
 800e592:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e596:	4658      	mov	r0, fp
 800e598:	f7fe fb44 	bl	800cc24 <__mcmp>
 800e59c:	463a      	mov	r2, r7
 800e59e:	9002      	str	r0, [sp, #8]
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f7fe fb58 	bl	800cc58 <__mdiff>
 800e5a8:	68c3      	ldr	r3, [r0, #12]
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	bb03      	cbnz	r3, 800e5f0 <_dtoa_r+0xa00>
 800e5ae:	4601      	mov	r1, r0
 800e5b0:	9009      	str	r0, [sp, #36]	; 0x24
 800e5b2:	4658      	mov	r0, fp
 800e5b4:	f7fe fb36 	bl	800cc24 <__mcmp>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5bc:	4611      	mov	r1, r2
 800e5be:	4620      	mov	r0, r4
 800e5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e5c2:	f7fe f911 	bl	800c7e8 <_Bfree>
 800e5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c8:	b9a3      	cbnz	r3, 800e5f4 <_dtoa_r+0xa04>
 800e5ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e5cc:	b992      	cbnz	r2, 800e5f4 <_dtoa_r+0xa04>
 800e5ce:	9a08      	ldr	r2, [sp, #32]
 800e5d0:	b982      	cbnz	r2, 800e5f4 <_dtoa_r+0xa04>
 800e5d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5d6:	d029      	beq.n	800e62c <_dtoa_r+0xa3c>
 800e5d8:	9b02      	ldr	r3, [sp, #8]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dd01      	ble.n	800e5e2 <_dtoa_r+0x9f2>
 800e5de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e5e2:	9b07      	ldr	r3, [sp, #28]
 800e5e4:	1c5d      	adds	r5, r3, #1
 800e5e6:	f883 8000 	strb.w	r8, [r3]
 800e5ea:	e784      	b.n	800e4f6 <_dtoa_r+0x906>
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	e7c2      	b.n	800e576 <_dtoa_r+0x986>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e7e3      	b.n	800e5bc <_dtoa_r+0x9cc>
 800e5f4:	9a02      	ldr	r2, [sp, #8]
 800e5f6:	2a00      	cmp	r2, #0
 800e5f8:	db04      	blt.n	800e604 <_dtoa_r+0xa14>
 800e5fa:	d123      	bne.n	800e644 <_dtoa_r+0xa54>
 800e5fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e5fe:	bb0a      	cbnz	r2, 800e644 <_dtoa_r+0xa54>
 800e600:	9a08      	ldr	r2, [sp, #32]
 800e602:	b9fa      	cbnz	r2, 800e644 <_dtoa_r+0xa54>
 800e604:	2b00      	cmp	r3, #0
 800e606:	ddec      	ble.n	800e5e2 <_dtoa_r+0x9f2>
 800e608:	4659      	mov	r1, fp
 800e60a:	2201      	movs	r2, #1
 800e60c:	4620      	mov	r0, r4
 800e60e:	f7fe fab5 	bl	800cb7c <__lshift>
 800e612:	4631      	mov	r1, r6
 800e614:	4683      	mov	fp, r0
 800e616:	f7fe fb05 	bl	800cc24 <__mcmp>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	dc03      	bgt.n	800e626 <_dtoa_r+0xa36>
 800e61e:	d1e0      	bne.n	800e5e2 <_dtoa_r+0x9f2>
 800e620:	f018 0f01 	tst.w	r8, #1
 800e624:	d0dd      	beq.n	800e5e2 <_dtoa_r+0x9f2>
 800e626:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e62a:	d1d8      	bne.n	800e5de <_dtoa_r+0x9ee>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	9a07      	ldr	r2, [sp, #28]
 800e630:	1c5d      	adds	r5, r3, #1
 800e632:	2339      	movs	r3, #57	; 0x39
 800e634:	7013      	strb	r3, [r2, #0]
 800e636:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e63a:	1e6a      	subs	r2, r5, #1
 800e63c:	2b39      	cmp	r3, #57	; 0x39
 800e63e:	d04d      	beq.n	800e6dc <_dtoa_r+0xaec>
 800e640:	3301      	adds	r3, #1
 800e642:	e052      	b.n	800e6ea <_dtoa_r+0xafa>
 800e644:	9a07      	ldr	r2, [sp, #28]
 800e646:	2b00      	cmp	r3, #0
 800e648:	f102 0501 	add.w	r5, r2, #1
 800e64c:	dd06      	ble.n	800e65c <_dtoa_r+0xa6c>
 800e64e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e652:	d0eb      	beq.n	800e62c <_dtoa_r+0xa3c>
 800e654:	f108 0801 	add.w	r8, r8, #1
 800e658:	9b07      	ldr	r3, [sp, #28]
 800e65a:	e7c4      	b.n	800e5e6 <_dtoa_r+0x9f6>
 800e65c:	9b06      	ldr	r3, [sp, #24]
 800e65e:	9a04      	ldr	r2, [sp, #16]
 800e660:	1aeb      	subs	r3, r5, r3
 800e662:	4293      	cmp	r3, r2
 800e664:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e668:	d021      	beq.n	800e6ae <_dtoa_r+0xabe>
 800e66a:	4659      	mov	r1, fp
 800e66c:	2300      	movs	r3, #0
 800e66e:	220a      	movs	r2, #10
 800e670:	4620      	mov	r0, r4
 800e672:	f7fe f8d0 	bl	800c816 <__multadd>
 800e676:	45b9      	cmp	r9, r7
 800e678:	4683      	mov	fp, r0
 800e67a:	f04f 0300 	mov.w	r3, #0
 800e67e:	f04f 020a 	mov.w	r2, #10
 800e682:	4649      	mov	r1, r9
 800e684:	4620      	mov	r0, r4
 800e686:	d105      	bne.n	800e694 <_dtoa_r+0xaa4>
 800e688:	f7fe f8c5 	bl	800c816 <__multadd>
 800e68c:	4681      	mov	r9, r0
 800e68e:	4607      	mov	r7, r0
 800e690:	9507      	str	r5, [sp, #28]
 800e692:	e778      	b.n	800e586 <_dtoa_r+0x996>
 800e694:	f7fe f8bf 	bl	800c816 <__multadd>
 800e698:	4639      	mov	r1, r7
 800e69a:	4681      	mov	r9, r0
 800e69c:	2300      	movs	r3, #0
 800e69e:	220a      	movs	r2, #10
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7fe f8b8 	bl	800c816 <__multadd>
 800e6a6:	4607      	mov	r7, r0
 800e6a8:	e7f2      	b.n	800e690 <_dtoa_r+0xaa0>
 800e6aa:	f04f 0900 	mov.w	r9, #0
 800e6ae:	4659      	mov	r1, fp
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f7fe fa62 	bl	800cb7c <__lshift>
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4683      	mov	fp, r0
 800e6bc:	f7fe fab2 	bl	800cc24 <__mcmp>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	dcb8      	bgt.n	800e636 <_dtoa_r+0xa46>
 800e6c4:	d102      	bne.n	800e6cc <_dtoa_r+0xadc>
 800e6c6:	f018 0f01 	tst.w	r8, #1
 800e6ca:	d1b4      	bne.n	800e636 <_dtoa_r+0xa46>
 800e6cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e6d0:	1e6a      	subs	r2, r5, #1
 800e6d2:	2b30      	cmp	r3, #48	; 0x30
 800e6d4:	f47f af0f 	bne.w	800e4f6 <_dtoa_r+0x906>
 800e6d8:	4615      	mov	r5, r2
 800e6da:	e7f7      	b.n	800e6cc <_dtoa_r+0xadc>
 800e6dc:	9b06      	ldr	r3, [sp, #24]
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d105      	bne.n	800e6ee <_dtoa_r+0xafe>
 800e6e2:	2331      	movs	r3, #49	; 0x31
 800e6e4:	9a06      	ldr	r2, [sp, #24]
 800e6e6:	f10a 0a01 	add.w	sl, sl, #1
 800e6ea:	7013      	strb	r3, [r2, #0]
 800e6ec:	e703      	b.n	800e4f6 <_dtoa_r+0x906>
 800e6ee:	4615      	mov	r5, r2
 800e6f0:	e7a1      	b.n	800e636 <_dtoa_r+0xa46>
 800e6f2:	4b17      	ldr	r3, [pc, #92]	; (800e750 <_dtoa_r+0xb60>)
 800e6f4:	f7ff bae1 	b.w	800dcba <_dtoa_r+0xca>
 800e6f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f47f aabb 	bne.w	800dc76 <_dtoa_r+0x86>
 800e700:	4b14      	ldr	r3, [pc, #80]	; (800e754 <_dtoa_r+0xb64>)
 800e702:	f7ff bada 	b.w	800dcba <_dtoa_r+0xca>
 800e706:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e708:	2b01      	cmp	r3, #1
 800e70a:	f77f ae3f 	ble.w	800e38c <_dtoa_r+0x79c>
 800e70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e710:	9308      	str	r3, [sp, #32]
 800e712:	e653      	b.n	800e3bc <_dtoa_r+0x7cc>
 800e714:	9b04      	ldr	r3, [sp, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	dc03      	bgt.n	800e722 <_dtoa_r+0xb32>
 800e71a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	f73f aed5 	bgt.w	800e4cc <_dtoa_r+0x8dc>
 800e722:	9d06      	ldr	r5, [sp, #24]
 800e724:	4631      	mov	r1, r6
 800e726:	4658      	mov	r0, fp
 800e728:	f7ff f9d2 	bl	800dad0 <quorem>
 800e72c:	9b06      	ldr	r3, [sp, #24]
 800e72e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e732:	f805 8b01 	strb.w	r8, [r5], #1
 800e736:	9a04      	ldr	r2, [sp, #16]
 800e738:	1aeb      	subs	r3, r5, r3
 800e73a:	429a      	cmp	r2, r3
 800e73c:	ddb5      	ble.n	800e6aa <_dtoa_r+0xaba>
 800e73e:	4659      	mov	r1, fp
 800e740:	2300      	movs	r3, #0
 800e742:	220a      	movs	r2, #10
 800e744:	4620      	mov	r0, r4
 800e746:	f7fe f866 	bl	800c816 <__multadd>
 800e74a:	4683      	mov	fp, r0
 800e74c:	e7ea      	b.n	800e724 <_dtoa_r+0xb34>
 800e74e:	bf00      	nop
 800e750:	0800f9bd 	.word	0x0800f9bd
 800e754:	0800f9b0 	.word	0x0800f9b0

0800e758 <__sflush_r>:
 800e758:	898a      	ldrh	r2, [r1, #12]
 800e75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e75e:	4605      	mov	r5, r0
 800e760:	0710      	lsls	r0, r2, #28
 800e762:	460c      	mov	r4, r1
 800e764:	d458      	bmi.n	800e818 <__sflush_r+0xc0>
 800e766:	684b      	ldr	r3, [r1, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	dc05      	bgt.n	800e778 <__sflush_r+0x20>
 800e76c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	dc02      	bgt.n	800e778 <__sflush_r+0x20>
 800e772:	2000      	movs	r0, #0
 800e774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e77a:	2e00      	cmp	r6, #0
 800e77c:	d0f9      	beq.n	800e772 <__sflush_r+0x1a>
 800e77e:	2300      	movs	r3, #0
 800e780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e784:	682f      	ldr	r7, [r5, #0]
 800e786:	6a21      	ldr	r1, [r4, #32]
 800e788:	602b      	str	r3, [r5, #0]
 800e78a:	d032      	beq.n	800e7f2 <__sflush_r+0x9a>
 800e78c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	075a      	lsls	r2, r3, #29
 800e792:	d505      	bpl.n	800e7a0 <__sflush_r+0x48>
 800e794:	6863      	ldr	r3, [r4, #4]
 800e796:	1ac0      	subs	r0, r0, r3
 800e798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e79a:	b10b      	cbz	r3, 800e7a0 <__sflush_r+0x48>
 800e79c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e79e:	1ac0      	subs	r0, r0, r3
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7a6:	6a21      	ldr	r1, [r4, #32]
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	47b0      	blx	r6
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	d106      	bne.n	800e7c0 <__sflush_r+0x68>
 800e7b2:	6829      	ldr	r1, [r5, #0]
 800e7b4:	291d      	cmp	r1, #29
 800e7b6:	d848      	bhi.n	800e84a <__sflush_r+0xf2>
 800e7b8:	4a29      	ldr	r2, [pc, #164]	; (800e860 <__sflush_r+0x108>)
 800e7ba:	40ca      	lsrs	r2, r1
 800e7bc:	07d6      	lsls	r6, r2, #31
 800e7be:	d544      	bpl.n	800e84a <__sflush_r+0xf2>
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	6062      	str	r2, [r4, #4]
 800e7c4:	6922      	ldr	r2, [r4, #16]
 800e7c6:	04d9      	lsls	r1, r3, #19
 800e7c8:	6022      	str	r2, [r4, #0]
 800e7ca:	d504      	bpl.n	800e7d6 <__sflush_r+0x7e>
 800e7cc:	1c42      	adds	r2, r0, #1
 800e7ce:	d101      	bne.n	800e7d4 <__sflush_r+0x7c>
 800e7d0:	682b      	ldr	r3, [r5, #0]
 800e7d2:	b903      	cbnz	r3, 800e7d6 <__sflush_r+0x7e>
 800e7d4:	6560      	str	r0, [r4, #84]	; 0x54
 800e7d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7d8:	602f      	str	r7, [r5, #0]
 800e7da:	2900      	cmp	r1, #0
 800e7dc:	d0c9      	beq.n	800e772 <__sflush_r+0x1a>
 800e7de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7e2:	4299      	cmp	r1, r3
 800e7e4:	d002      	beq.n	800e7ec <__sflush_r+0x94>
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	f7fc fa80 	bl	800acec <_free_r>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	6360      	str	r0, [r4, #52]	; 0x34
 800e7f0:	e7c0      	b.n	800e774 <__sflush_r+0x1c>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	47b0      	blx	r6
 800e7f8:	1c41      	adds	r1, r0, #1
 800e7fa:	d1c8      	bne.n	800e78e <__sflush_r+0x36>
 800e7fc:	682b      	ldr	r3, [r5, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d0c5      	beq.n	800e78e <__sflush_r+0x36>
 800e802:	2b1d      	cmp	r3, #29
 800e804:	d001      	beq.n	800e80a <__sflush_r+0xb2>
 800e806:	2b16      	cmp	r3, #22
 800e808:	d101      	bne.n	800e80e <__sflush_r+0xb6>
 800e80a:	602f      	str	r7, [r5, #0]
 800e80c:	e7b1      	b.n	800e772 <__sflush_r+0x1a>
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e814:	81a3      	strh	r3, [r4, #12]
 800e816:	e7ad      	b.n	800e774 <__sflush_r+0x1c>
 800e818:	690f      	ldr	r7, [r1, #16]
 800e81a:	2f00      	cmp	r7, #0
 800e81c:	d0a9      	beq.n	800e772 <__sflush_r+0x1a>
 800e81e:	0793      	lsls	r3, r2, #30
 800e820:	bf18      	it	ne
 800e822:	2300      	movne	r3, #0
 800e824:	680e      	ldr	r6, [r1, #0]
 800e826:	bf08      	it	eq
 800e828:	694b      	ldreq	r3, [r1, #20]
 800e82a:	eba6 0807 	sub.w	r8, r6, r7
 800e82e:	600f      	str	r7, [r1, #0]
 800e830:	608b      	str	r3, [r1, #8]
 800e832:	f1b8 0f00 	cmp.w	r8, #0
 800e836:	dd9c      	ble.n	800e772 <__sflush_r+0x1a>
 800e838:	4643      	mov	r3, r8
 800e83a:	463a      	mov	r2, r7
 800e83c:	6a21      	ldr	r1, [r4, #32]
 800e83e:	4628      	mov	r0, r5
 800e840:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e842:	47b0      	blx	r6
 800e844:	2800      	cmp	r0, #0
 800e846:	dc06      	bgt.n	800e856 <__sflush_r+0xfe>
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e84e:	81a3      	strh	r3, [r4, #12]
 800e850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e854:	e78e      	b.n	800e774 <__sflush_r+0x1c>
 800e856:	4407      	add	r7, r0
 800e858:	eba8 0800 	sub.w	r8, r8, r0
 800e85c:	e7e9      	b.n	800e832 <__sflush_r+0xda>
 800e85e:	bf00      	nop
 800e860:	20400001 	.word	0x20400001

0800e864 <_fflush_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	690b      	ldr	r3, [r1, #16]
 800e868:	4605      	mov	r5, r0
 800e86a:	460c      	mov	r4, r1
 800e86c:	b1db      	cbz	r3, 800e8a6 <_fflush_r+0x42>
 800e86e:	b118      	cbz	r0, 800e878 <_fflush_r+0x14>
 800e870:	6983      	ldr	r3, [r0, #24]
 800e872:	b90b      	cbnz	r3, 800e878 <_fflush_r+0x14>
 800e874:	f7fd fbae 	bl	800bfd4 <__sinit>
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <_fflush_r+0x48>)
 800e87a:	429c      	cmp	r4, r3
 800e87c:	d109      	bne.n	800e892 <_fflush_r+0x2e>
 800e87e:	686c      	ldr	r4, [r5, #4]
 800e880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e884:	b17b      	cbz	r3, 800e8a6 <_fflush_r+0x42>
 800e886:	4621      	mov	r1, r4
 800e888:	4628      	mov	r0, r5
 800e88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e88e:	f7ff bf63 	b.w	800e758 <__sflush_r>
 800e892:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <_fflush_r+0x4c>)
 800e894:	429c      	cmp	r4, r3
 800e896:	d101      	bne.n	800e89c <_fflush_r+0x38>
 800e898:	68ac      	ldr	r4, [r5, #8]
 800e89a:	e7f1      	b.n	800e880 <_fflush_r+0x1c>
 800e89c:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <_fflush_r+0x50>)
 800e89e:	429c      	cmp	r4, r3
 800e8a0:	bf08      	it	eq
 800e8a2:	68ec      	ldreq	r4, [r5, #12]
 800e8a4:	e7ec      	b.n	800e880 <_fflush_r+0x1c>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	bd38      	pop	{r3, r4, r5, pc}
 800e8aa:	bf00      	nop
 800e8ac:	0800f730 	.word	0x0800f730
 800e8b0:	0800f750 	.word	0x0800f750
 800e8b4:	0800f710 	.word	0x0800f710

0800e8b8 <_lseek_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	4608      	mov	r0, r1
 800e8be:	4611      	mov	r1, r2
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	4c05      	ldr	r4, [pc, #20]	; (800e8d8 <_lseek_r+0x20>)
 800e8c4:	6022      	str	r2, [r4, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	f7f7 fdfd 	bl	80064c6 <_lseek>
 800e8cc:	1c43      	adds	r3, r0, #1
 800e8ce:	d102      	bne.n	800e8d6 <_lseek_r+0x1e>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	b103      	cbz	r3, 800e8d6 <_lseek_r+0x1e>
 800e8d4:	602b      	str	r3, [r5, #0]
 800e8d6:	bd38      	pop	{r3, r4, r5, pc}
 800e8d8:	20000bac 	.word	0x20000bac

0800e8dc <__swhatbuf_r>:
 800e8dc:	b570      	push	{r4, r5, r6, lr}
 800e8de:	460e      	mov	r6, r1
 800e8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e4:	b096      	sub	sp, #88	; 0x58
 800e8e6:	2900      	cmp	r1, #0
 800e8e8:	4614      	mov	r4, r2
 800e8ea:	461d      	mov	r5, r3
 800e8ec:	da07      	bge.n	800e8fe <__swhatbuf_r+0x22>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	602b      	str	r3, [r5, #0]
 800e8f2:	89b3      	ldrh	r3, [r6, #12]
 800e8f4:	061a      	lsls	r2, r3, #24
 800e8f6:	d410      	bmi.n	800e91a <__swhatbuf_r+0x3e>
 800e8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8fc:	e00e      	b.n	800e91c <__swhatbuf_r+0x40>
 800e8fe:	466a      	mov	r2, sp
 800e900:	f000 f892 	bl	800ea28 <_fstat_r>
 800e904:	2800      	cmp	r0, #0
 800e906:	dbf2      	blt.n	800e8ee <__swhatbuf_r+0x12>
 800e908:	9a01      	ldr	r2, [sp, #4]
 800e90a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e90e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e912:	425a      	negs	r2, r3
 800e914:	415a      	adcs	r2, r3
 800e916:	602a      	str	r2, [r5, #0]
 800e918:	e7ee      	b.n	800e8f8 <__swhatbuf_r+0x1c>
 800e91a:	2340      	movs	r3, #64	; 0x40
 800e91c:	2000      	movs	r0, #0
 800e91e:	6023      	str	r3, [r4, #0]
 800e920:	b016      	add	sp, #88	; 0x58
 800e922:	bd70      	pop	{r4, r5, r6, pc}

0800e924 <__smakebuf_r>:
 800e924:	898b      	ldrh	r3, [r1, #12]
 800e926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e928:	079d      	lsls	r5, r3, #30
 800e92a:	4606      	mov	r6, r0
 800e92c:	460c      	mov	r4, r1
 800e92e:	d507      	bpl.n	800e940 <__smakebuf_r+0x1c>
 800e930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	6123      	str	r3, [r4, #16]
 800e938:	2301      	movs	r3, #1
 800e93a:	6163      	str	r3, [r4, #20]
 800e93c:	b002      	add	sp, #8
 800e93e:	bd70      	pop	{r4, r5, r6, pc}
 800e940:	ab01      	add	r3, sp, #4
 800e942:	466a      	mov	r2, sp
 800e944:	f7ff ffca 	bl	800e8dc <__swhatbuf_r>
 800e948:	9900      	ldr	r1, [sp, #0]
 800e94a:	4605      	mov	r5, r0
 800e94c:	4630      	mov	r0, r6
 800e94e:	f7fc fa19 	bl	800ad84 <_malloc_r>
 800e952:	b948      	cbnz	r0, 800e968 <__smakebuf_r+0x44>
 800e954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e958:	059a      	lsls	r2, r3, #22
 800e95a:	d4ef      	bmi.n	800e93c <__smakebuf_r+0x18>
 800e95c:	f023 0303 	bic.w	r3, r3, #3
 800e960:	f043 0302 	orr.w	r3, r3, #2
 800e964:	81a3      	strh	r3, [r4, #12]
 800e966:	e7e3      	b.n	800e930 <__smakebuf_r+0xc>
 800e968:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <__smakebuf_r+0x7c>)
 800e96a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e96c:	89a3      	ldrh	r3, [r4, #12]
 800e96e:	6020      	str	r0, [r4, #0]
 800e970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e974:	81a3      	strh	r3, [r4, #12]
 800e976:	9b00      	ldr	r3, [sp, #0]
 800e978:	6120      	str	r0, [r4, #16]
 800e97a:	6163      	str	r3, [r4, #20]
 800e97c:	9b01      	ldr	r3, [sp, #4]
 800e97e:	b15b      	cbz	r3, 800e998 <__smakebuf_r+0x74>
 800e980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e984:	4630      	mov	r0, r6
 800e986:	f000 f861 	bl	800ea4c <_isatty_r>
 800e98a:	b128      	cbz	r0, 800e998 <__smakebuf_r+0x74>
 800e98c:	89a3      	ldrh	r3, [r4, #12]
 800e98e:	f023 0303 	bic.w	r3, r3, #3
 800e992:	f043 0301 	orr.w	r3, r3, #1
 800e996:	81a3      	strh	r3, [r4, #12]
 800e998:	89a3      	ldrh	r3, [r4, #12]
 800e99a:	431d      	orrs	r5, r3
 800e99c:	81a5      	strh	r5, [r4, #12]
 800e99e:	e7cd      	b.n	800e93c <__smakebuf_r+0x18>
 800e9a0:	0800bf9d 	.word	0x0800bf9d

0800e9a4 <memchr>:
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	b2c9      	uxtb	r1, r1
 800e9a8:	4402      	add	r2, r0
 800e9aa:	4290      	cmp	r0, r2
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	d101      	bne.n	800e9b4 <memchr+0x10>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e003      	b.n	800e9bc <memchr+0x18>
 800e9b4:	781c      	ldrb	r4, [r3, #0]
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	428c      	cmp	r4, r1
 800e9ba:	d1f6      	bne.n	800e9aa <memchr+0x6>
 800e9bc:	4618      	mov	r0, r3
 800e9be:	bd10      	pop	{r4, pc}

0800e9c0 <memmove>:
 800e9c0:	4288      	cmp	r0, r1
 800e9c2:	b510      	push	{r4, lr}
 800e9c4:	eb01 0302 	add.w	r3, r1, r2
 800e9c8:	d807      	bhi.n	800e9da <memmove+0x1a>
 800e9ca:	1e42      	subs	r2, r0, #1
 800e9cc:	4299      	cmp	r1, r3
 800e9ce:	d00a      	beq.n	800e9e6 <memmove+0x26>
 800e9d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e9d8:	e7f8      	b.n	800e9cc <memmove+0xc>
 800e9da:	4283      	cmp	r3, r0
 800e9dc:	d9f5      	bls.n	800e9ca <memmove+0xa>
 800e9de:	1881      	adds	r1, r0, r2
 800e9e0:	1ad2      	subs	r2, r2, r3
 800e9e2:	42d3      	cmn	r3, r2
 800e9e4:	d100      	bne.n	800e9e8 <memmove+0x28>
 800e9e6:	bd10      	pop	{r4, pc}
 800e9e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e9f0:	e7f7      	b.n	800e9e2 <memmove+0x22>

0800e9f2 <_malloc_usable_size_r>:
 800e9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9f6:	1f18      	subs	r0, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bfbc      	itt	lt
 800e9fc:	580b      	ldrlt	r3, [r1, r0]
 800e9fe:	18c0      	addlt	r0, r0, r3
 800ea00:	4770      	bx	lr
	...

0800ea04 <_read_r>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	4605      	mov	r5, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4c05      	ldr	r4, [pc, #20]	; (800ea24 <_read_r+0x20>)
 800ea10:	6022      	str	r2, [r4, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f7f7 fcfa 	bl	800640c <_read>
 800ea18:	1c43      	adds	r3, r0, #1
 800ea1a:	d102      	bne.n	800ea22 <_read_r+0x1e>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	b103      	cbz	r3, 800ea22 <_read_r+0x1e>
 800ea20:	602b      	str	r3, [r5, #0]
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	20000bac 	.word	0x20000bac

0800ea28 <_fstat_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	4c06      	ldr	r4, [pc, #24]	; (800ea48 <_fstat_r+0x20>)
 800ea2e:	4605      	mov	r5, r0
 800ea30:	4608      	mov	r0, r1
 800ea32:	4611      	mov	r1, r2
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	f7f7 fd2d 	bl	8006494 <_fstat>
 800ea3a:	1c43      	adds	r3, r0, #1
 800ea3c:	d102      	bne.n	800ea44 <_fstat_r+0x1c>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	b103      	cbz	r3, 800ea44 <_fstat_r+0x1c>
 800ea42:	602b      	str	r3, [r5, #0]
 800ea44:	bd38      	pop	{r3, r4, r5, pc}
 800ea46:	bf00      	nop
 800ea48:	20000bac 	.word	0x20000bac

0800ea4c <_isatty_r>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	2300      	movs	r3, #0
 800ea50:	4c05      	ldr	r4, [pc, #20]	; (800ea68 <_isatty_r+0x1c>)
 800ea52:	4605      	mov	r5, r0
 800ea54:	4608      	mov	r0, r1
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	f7f7 fd2b 	bl	80064b2 <_isatty>
 800ea5c:	1c43      	adds	r3, r0, #1
 800ea5e:	d102      	bne.n	800ea66 <_isatty_r+0x1a>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	b103      	cbz	r3, 800ea66 <_isatty_r+0x1a>
 800ea64:	602b      	str	r3, [r5, #0]
 800ea66:	bd38      	pop	{r3, r4, r5, pc}
 800ea68:	20000bac 	.word	0x20000bac

0800ea6c <trunc>:
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800ea72:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800ea76:	2a13      	cmp	r2, #19
 800ea78:	4603      	mov	r3, r0
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	dc10      	bgt.n	800eaa0 <trunc+0x34>
 800ea7e:	2a00      	cmp	r2, #0
 800ea80:	bfb3      	iteet	lt
 800ea82:	2000      	movlt	r0, #0
 800ea84:	2000      	movge	r0, #0
 800ea86:	4b10      	ldrge	r3, [pc, #64]	; (800eac8 <trunc+0x5c>)
 800ea88:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800ea8c:	bfa4      	itt	ge
 800ea8e:	fa43 f202 	asrge.w	r2, r3, r2
 800ea92:	ea24 0102 	bicge.w	r1, r4, r2
 800ea96:	4603      	mov	r3, r0
 800ea98:	460c      	mov	r4, r1
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa0:	2a33      	cmp	r2, #51	; 0x33
 800eaa2:	dd07      	ble.n	800eab4 <trunc+0x48>
 800eaa4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800eaa8:	d1f7      	bne.n	800ea9a <trunc+0x2e>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	f7f1 fb5d 	bl	800016c <__adddf3>
 800eab2:	e7f0      	b.n	800ea96 <trunc+0x2a>
 800eab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eab8:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800eabc:	fa22 f505 	lsr.w	r5, r2, r5
 800eac0:	ea20 0005 	bic.w	r0, r0, r5
 800eac4:	e7e7      	b.n	800ea96 <trunc+0x2a>
 800eac6:	bf00      	nop
 800eac8:	000fffff 	.word	0x000fffff

0800eacc <_init>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	bf00      	nop
 800ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead2:	bc08      	pop	{r3}
 800ead4:	469e      	mov	lr, r3
 800ead6:	4770      	bx	lr

0800ead8 <_fini>:
 800ead8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eada:	bf00      	nop
 800eadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eade:	bc08      	pop	{r3}
 800eae0:	469e      	mov	lr, r3
 800eae2:	4770      	bx	lr
