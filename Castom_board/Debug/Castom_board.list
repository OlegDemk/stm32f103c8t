
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c504  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800c618  0800c618  0001c618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2a0  0800d2a0  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2a0  0800d2a0  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2a0  0800d2a0  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a4  0800d2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800d2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  2000021c  0800d4c4  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800d4c4  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017494  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003022  00000000  00000000  000376d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  0003a700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e10  00000000  00000000  0003cb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f762  00000000  00000000  00040918  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078461  00000000  00000000  0005007a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c84db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e04  00000000  00000000  000c8558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000021c 	.word	0x2000021c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5fc 	.word	0x0800c5fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000220 	.word	0x20000220
 800014c:	0800c5fc 	.word	0x0800c5fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <nmea0183_checksum>:
	}
}
//--------------------------------------------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]

	for(j = 1; j < strlen(msg) - 4; j++)
 8001140:	2301      	movs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	e00a      	b.n	800115c <nmea0183_checksum+0x2c>
	{
		checksum = checksum^(unsigned)msg[j];
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4053      	eors	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
	for(j = 1; j < strlen(msg) - 4; j++)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7fe fff7 	bl	8000150 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	1f1a      	subs	r2, r3, #4
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8ec      	bhi.n	8001146 <nmea0183_checksum+0x16>
	}
	return checksum;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <parsing_GPGLL_line>:

//--------------------------------------------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b0a9      	sub	sp, #164	; 0xa4
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];										// Main buffer for GPGLL line
	int size = sizeof(nmeaSnt);
 8001180:	2331      	movs	r3, #49	; 0x31
 8001182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	memset(nmeaSnt, 0, size);
 8001186:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800118a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f007 ffe5 	bl	8009160 <memset>

	//Copy to  "*" from str_GPGLL in nmeaSnt
	int i=0;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011a2:	e010      	b.n	80011c6 <parsing_GPGLL_line+0x4e>
	{
		nmeaSnt[i]=str_GPGLL[i];    						// copy bytes from str_GPGLL in nmeaSnt
 80011a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	7819      	ldrb	r1, [r3, #0]
 80011ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 80011bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b2a      	cmp	r3, #42	; 0x2a
 80011d2:	d003      	beq.n	80011dc <parsing_GPGLL_line+0x64>
 80011d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011d8:	2b31      	cmp	r3, #49	; 0x31
 80011da:	dde3      	ble.n	80011a4 <parsing_GPGLL_line+0x2c>
	}
	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 80011dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011e0:	2100      	movs	r1, #0
 80011e2:	460a      	mov	r2, r1
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	460a      	mov	r2, r1
 80011e8:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"  (after '*' are checksum two numbers)
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 80011ea:	212a      	movs	r1, #42	; 0x2a
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f007 ffdf 	bl	80091b0 <strchr>
 80011f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 80011f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fa:	3301      	adds	r3, #1
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	873b      	strh	r3, [r7, #56]	; 0x38
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001202:	2300      	movs	r3, #0
 8001204:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff8f 	bl	8001130 <nmea0183_checksum>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	char hex[3];
	sprintf(hex, "%x", intSum);
 8001218:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800121c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001220:	49b2      	ldr	r1, [pc, #712]	; (80014ec <parsing_GPGLL_line+0x374>)
 8001222:	4618      	mov	r0, r3
 8001224:	f007 ffa4 	bl	8009170 <siprintf>

	if(strstr(smNmbr, hex) != NULL)                         // Check if checksum line equal checksum after '*'
 8001228:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800122c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f007 ffd1 	bl	80091da <strstr>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8234 	beq.w	80016a8 <parsing_GPGLL_line+0x530>
	{
		// Parsing string
		int i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		int count = 0;                                      // Count of elements
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		while(nmeaSnt[i] != '\0')							// not and of line
 800124c:	e224      	b.n	8001698 <parsing_GPGLL_line+0x520>
		{
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
			{
				int g=0;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				char str[12]={0};
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
				i++;										// Count of chars in nmeaSnt[i] array
 8001260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001264:	3301      	adds	r3, #1
 8001266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				switch (count)
 800126a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800126e:	2b04      	cmp	r3, #4
 8001270:	f200 81ff 	bhi.w	8001672 <parsing_GPGLL_line+0x4fa>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <parsing_GPGLL_line+0x104>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	08001291 	.word	0x08001291
 8001280:	080013e1 	.word	0x080013e1
 8001284:	08001433 	.word	0x08001433
 8001288:	080015a1 	.word	0x080015a1
 800128c:	080015f3 	.word	0x080015f3
				{
					case 0:
						for(g=0; g<10; g++)
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001296:	e014      	b.n	80012c2 <parsing_GPGLL_line+0x14a>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 8001298:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800129c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a0:	4413      	add	r3, r2
 80012a2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80012a6:	4413      	add	r3, r2
 80012a8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80012ac:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	4413      	add	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 80012b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	dde6      	ble.n	8001298 <parsing_GPGLL_line+0x120>
						}
						GPS_data.lat[10] = '\0';
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	729a      	strb	r2, [r3, #10]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 80012d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d4:	220c      	movs	r2, #12
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f007 ff41 	bl	8009160 <memset>
						sprintf(str,"%s", GPS_data.lat);
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	4983      	ldr	r1, [pc, #524]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f007 ff70 	bl	80091ca <strcpy>
						strcpy(gps_lat, str);
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4880      	ldr	r0, [pc, #512]	; (80014f4 <parsing_GPGLL_line+0x37c>)
 80012f2:	f007 ff6a 	bl	80091ca <strcpy>

						// Convert lat in coordinate for google mups
						// 1. Separate degrees from minutes
						float integer_part_lat = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	677b      	str	r3, [r7, #116]	; 0x74
						float fractional_part_lat = 0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	673b      	str	r3, [r7, #112]	; 0x70
						char integer_part_char_lat[3]={0};
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	2100      	movs	r1, #0
 8001308:	460a      	mov	r2, r1
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	460a      	mov	r2, r1
 800130e:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lat[9]={0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	721a      	strb	r2, [r3, #8]
						uint8_t k=0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

						for(k=0; k<=11; k++)
 8001322:	2300      	movs	r3, #0
 8001324:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001328:	e020      	b.n	800136c <parsing_GPGLL_line+0x1f4>
						{
							if(k<=1)
 800132a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800132e:	2b01      	cmp	r3, #1
 8001330:	d80b      	bhi.n	800134a <parsing_GPGLL_line+0x1d2>
							{
								integer_part_char_lat[k] = GPS_data.lat[k];        	  // Degrees
 8001332:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001336:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800133a:	496d      	ldr	r1, [pc, #436]	; (80014f0 <parsing_GPGLL_line+0x378>)
 800133c:	5c8a      	ldrb	r2, [r1, r2]
 800133e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001342:	440b      	add	r3, r1
 8001344:	f803 2c7c 	strb.w	r2, [r3, #-124]
 8001348:	e00b      	b.n	8001362 <parsing_GPGLL_line+0x1ea>
							}
							else
							{
								fractional_part_char_lat[k-2] = GPS_data.lat[k];      // Minutes
 800134a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800134e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001352:	3b02      	subs	r3, #2
 8001354:	4966      	ldr	r1, [pc, #408]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001356:	5c8a      	ldrb	r2, [r1, r2]
 8001358:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800135c:	440b      	add	r3, r1
 800135e:	f803 2c88 	strb.w	r2, [r3, #-136]
						for(k=0; k<=11; k++)
 8001362:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001366:	3301      	adds	r3, #1
 8001368:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800136c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001370:	2b0b      	cmp	r3, #11
 8001372:	d9da      	bls.n	800132a <parsing_GPGLL_line+0x1b2>
							}
						}

						// 2. Convert string in numbers
						integer_part_lat = atoi(integer_part_char_lat);          // save int part
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4618      	mov	r0, r3
 800137a:	f007 fe9e 	bl	80090ba <atoi>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fc95 	bl	8000cb0 <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	677b      	str	r3, [r7, #116]	; 0x74
						fractional_part_lat = atof(fractional_part_char_lat);	 // float part
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fe90 	bl	80090b4 <atof>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4618      	mov	r0, r3
 800139a:	4621      	mov	r1, r4
 800139c:	f7ff fb7e 	bl	8000a9c <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
 						// 3. Convert in degrees
						fractional_part_lat = (fractional_part_lat/60);
 80013a4:	4954      	ldr	r1, [pc, #336]	; (80014f8 <parsing_GPGLL_line+0x380>)
 80013a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013a8:	f7ff fd8a 	bl	8000ec0 <__aeabi_fdiv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	673b      	str	r3, [r7, #112]	; 0x70
						integer_part_lat = integer_part_lat + fractional_part_lat;
 80013b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80013b2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013b4:	f7ff fbc8 	bl	8000b48 <__addsf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
						// 4. Convert in string and save it in global variable
                        gcvt(integer_part_lat, 11, gps_latitude );
 80013bc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013be:	f7ff f833 	bl	8000428 <__aeabi_f2d>
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <parsing_GPGLL_line+0x384>)
 80013c4:	220b      	movs	r2, #11
 80013c6:	f007 fe7d 	bl	80090c4 <gcvt>
                        gps_latitude[9] = '\0';
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <parsing_GPGLL_line+0x384>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	725a      	strb	r2, [r3, #9]

						i = i+g;
 80013d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d8:	4413      	add	r3, r2
 80013da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80013de:	e148      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 1:
						for (g =0; g<1; g++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013e6:	e015      	b.n	8001414 <parsing_GPGLL_line+0x29c>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 80013e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013f0:	4413      	add	r3, r2
 80013f2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80013f6:	4413      	add	r3, r2
 80013f8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80013fc:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80013fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001402:	4413      	add	r3, r2
 8001404:	330b      	adds	r3, #11
 8001406:	460a      	mov	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 800140a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800140e:	3301      	adds	r3, #1
 8001410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001418:	2b00      	cmp	r3, #0
 800141a:	dde5      	ble.n	80013e8 <parsing_GPGLL_line+0x270>
						}
						GPS_data.lat_letter[2] = '\0';
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <parsing_GPGLL_line+0x378>)
 800141e:	2200      	movs	r2, #0
 8001420:	735a      	strb	r2, [r3, #13]
						i = i+g;
 8001422:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800142a:	4413      	add	r3, r2
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001430:	e11f      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 2:
						for(g=0; g<11; g++)
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001438:	e015      	b.n	8001466 <parsing_GPGLL_line+0x2ee>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 800143a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001442:	4413      	add	r3, r2
 8001444:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001448:	4413      	add	r3, r2
 800144a:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800144e:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001454:	4413      	add	r3, r2
 8001456:	330d      	adds	r3, #13
 8001458:	460a      	mov	r2, r1
 800145a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 800145c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800146a:	2b0a      	cmp	r3, #10
 800146c:	dde5      	ble.n	800143a <parsing_GPGLL_line+0x2c2>
						}
						GPS_data.lon[11] = '\0';
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001470:	2200      	movs	r2, #0
 8001472:	761a      	strb	r2, [r3, #24]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	220c      	movs	r2, #12
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f007 fe6f 	bl	8009160 <memset>
						sprintf(str,"%s", GPS_data.lon);
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	491e      	ldr	r1, [pc, #120]	; (8001500 <parsing_GPGLL_line+0x388>)
 8001488:	4618      	mov	r0, r3
 800148a:	f007 fe9e 	bl	80091ca <strcpy>
						strcpy(gps_lon, str);
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	4619      	mov	r1, r3
 8001494:	481b      	ldr	r0, [pc, #108]	; (8001504 <parsing_GPGLL_line+0x38c>)
 8001496:	f007 fe98 	bl	80091ca <strcpy>

						// Convert lon in coordinate for google mups
						// // 1. Separate degrees from minutes
						float integer_part_lon = 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	67fb      	str	r3, [r7, #124]	; 0x7c
						float fractional_part_lon = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	67bb      	str	r3, [r7, #120]	; 0x78
						char integer_part_char_lon[3]={0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2100      	movs	r1, #0
 80014ac:	460a      	mov	r2, r1
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	460a      	mov	r2, r1
 80014b2:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lon[10]={0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	811a      	strh	r2, [r3, #8]

						for(k=0; k<=11; k++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80014c6:	e031      	b.n	800152c <parsing_GPGLL_line+0x3b4>
						{
							if(k<=2)
 80014c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d81b      	bhi.n	8001508 <parsing_GPGLL_line+0x390>
							{
								integer_part_char_lon[k] = GPS_data.lon[k];
 80014d0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80014d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80014da:	440a      	add	r2, r1
 80014dc:	7b52      	ldrb	r2, [r2, #13]
 80014de:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80014e2:	440b      	add	r3, r1
 80014e4:	f803 2c8c 	strb.w	r2, [r3, #-140]
 80014e8:	e01b      	b.n	8001522 <parsing_GPGLL_line+0x3aa>
 80014ea:	bf00      	nop
 80014ec:	0800c618 	.word	0x0800c618
 80014f0:	200006f4 	.word	0x200006f4
 80014f4:	200006d0 	.word	0x200006d0
 80014f8:	42700000 	.word	0x42700000
 80014fc:	200006c0 	.word	0x200006c0
 8001500:	20000701 	.word	0x20000701
 8001504:	200006e0 	.word	0x200006e0
							}
							else
							{
								fractional_part_char_lon[k-3] = GPS_data.lon[k];
 8001508:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800150c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001510:	3b03      	subs	r3, #3
 8001512:	4967      	ldr	r1, [pc, #412]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001514:	440a      	add	r2, r1
 8001516:	7b52      	ldrb	r2, [r2, #13]
 8001518:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800151c:	440b      	add	r3, r1
 800151e:	f803 2c98 	strb.w	r2, [r3, #-152]
						for(k=0; k<=11; k++)
 8001522:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001526:	3301      	adds	r3, #1
 8001528:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800152c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001530:	2b0b      	cmp	r3, #11
 8001532:	d9c9      	bls.n	80014c8 <parsing_GPGLL_line+0x350>
							}
						}

						// 2. Convert string in numbers
						integer_part_lon = atoi(integer_part_char_lon);          // save int part
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4618      	mov	r0, r3
 800153a:	f007 fdbe 	bl	80090ba <atoi>
 800153e:	4603      	mov	r3, r0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fbb5 	bl	8000cb0 <__aeabi_i2f>
 8001546:	4603      	mov	r3, r0
 8001548:	67fb      	str	r3, [r7, #124]	; 0x7c
						fractional_part_lon = atof(fractional_part_char_lon);	 // float part
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f007 fdb0 	bl	80090b4 <atof>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4618      	mov	r0, r3
 800155a:	4621      	mov	r1, r4
 800155c:	f7ff fa9e 	bl	8000a9c <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	67bb      	str	r3, [r7, #120]	; 0x78
						// 3. Convert in degrees
						fractional_part_lon = (fractional_part_lon/60);
 8001564:	4953      	ldr	r1, [pc, #332]	; (80016b4 <parsing_GPGLL_line+0x53c>)
 8001566:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001568:	f7ff fcaa 	bl	8000ec0 <__aeabi_fdiv>
 800156c:	4603      	mov	r3, r0
 800156e:	67bb      	str	r3, [r7, #120]	; 0x78
						integer_part_lon = integer_part_lon + fractional_part_lon;
 8001570:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001572:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001574:	f7ff fae8 	bl	8000b48 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	67fb      	str	r3, [r7, #124]	; 0x7c
						// 4. Convert in string and save it in global variable
					    gcvt(integer_part_lon, 11, gps_lontitude );
 800157c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800157e:	f7fe ff53 	bl	8000428 <__aeabi_f2d>
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <parsing_GPGLL_line+0x540>)
 8001584:	220b      	movs	r2, #11
 8001586:	f007 fd9d 	bl	80090c4 <gcvt>
					    gps_lontitude[10] = '\0';
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <parsing_GPGLL_line+0x540>)
 800158c:	2200      	movs	r2, #0
 800158e:	729a      	strb	r2, [r3, #10]

						i = i+g;
 8001590:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001598:	4413      	add	r3, r2
 800159a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 800159e:	e068      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 3:
						for(g=0; g<1; g++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a6:	e015      	b.n	80015d4 <parsing_GPGLL_line+0x45c>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 80015a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b0:	4413      	add	r3, r2
 80015b2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <parsing_GPGLL_line+0x538>)
 80015be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c2:	4413      	add	r3, r2
 80015c4:	3319      	adds	r3, #25
 80015c6:	460a      	mov	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 80015ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ce:	3301      	adds	r3, #1
 80015d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dde5      	ble.n	80015a8 <parsing_GPGLL_line+0x430>
						}
						GPS_data.lon_letter[2] = '\0';
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <parsing_GPGLL_line+0x538>)
 80015de:	2200      	movs	r2, #0
 80015e0:	76da      	strb	r2, [r3, #27]
						i = i+g;
 80015e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ea:	4413      	add	r3, r2
 80015ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80015f0:	e03f      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 4:
						for(g=0; g<6; g++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015f8:	e015      	b.n	8001626 <parsing_GPGLL_line+0x4ae>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 80015fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001602:	4413      	add	r3, r2
 8001604:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001608:	4413      	add	r3, r2
 800160a:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800160e:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001614:	4413      	add	r3, r2
 8001616:	331b      	adds	r3, #27
 8001618:	460a      	mov	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 800161c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800162a:	2b05      	cmp	r3, #5
 800162c:	dde5      	ble.n	80015fa <parsing_GPGLL_line+0x482>
						}
						GPS_data.time[6] = '\0';
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 8001636:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800163a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163e:	4413      	add	r3, r2
 8001640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

						// Save time in global variable
						memset(str, 0 , sizeof(str));
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	220c      	movs	r2, #12
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f007 fd87 	bl	8009160 <memset>
						sprintf(str,"%s", GPS_data.time);
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	4919      	ldr	r1, [pc, #100]	; (80016bc <parsing_GPGLL_line+0x544>)
 8001658:	4618      	mov	r0, r3
 800165a:	f007 fdb6 	bl	80091ca <strcpy>
						strcpy(gps_time, str);
 800165e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001662:	4619      	mov	r1, r3
 8001664:	4816      	ldr	r0, [pc, #88]	; (80016c0 <parsing_GPGLL_line+0x548>)
 8001666:	f007 fdb0 	bl	80091ca <strcpy>

						GPGGA_data_is_ready = 1;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <parsing_GPGLL_line+0x54c>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

						break;
 8001670:	bf00      	nop
				}
				count++;
 8001672:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
 800167c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b2c      	cmp	r3, #44	; 0x2c
 800168a:	f43f ade0 	beq.w	800124e <parsing_GPGLL_line+0xd6>
			}
			i++;
 800168e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while(nmeaSnt[i] != '\0')							// not and of line
 8001698:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e9      	bne.n	800167c <parsing_GPGLL_line+0x504>
		}
	}
}
 80016a8:	bf00      	nop
 80016aa:	37a4      	adds	r7, #164	; 0xa4
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	200006f4 	.word	0x200006f4
 80016b4:	42700000 	.word	0x42700000
 80016b8:	2000071c 	.word	0x2000071c
 80016bc:	2000070f 	.word	0x2000070f
 80016c0:	200006ec 	.word	0x200006ec
 80016c4:	20000238 	.word	0x20000238

080016c8 <parsing_GPGGA_line>:
//--------------------------------------------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a2      	sub	sp, #136	; 0x88
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 80016d0:	2346      	movs	r3, #70	; 0x46
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
		memset(nmeaSnt, 0, size);
 80016d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f007 fd3f 	bl	8009160 <memset>
		char number_of_satalits_str[4] = {0};
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24

		//Copy to  "*" from str_GPGGA in nmeaSnt
		int i=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016f2:	e010      	b.n	8001716 <parsing_GPGGA_line+0x4e>
		{
			nmeaSnt[i]=str_GPGGA[i];
 80016f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	7819      	ldrb	r1, [r3, #0]
 80016fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001706:	4413      	add	r3, r2
 8001708:	460a      	mov	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 800170c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001710:	3301      	adds	r3, #1
 8001712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b2a      	cmp	r3, #42	; 0x2a
 8001722:	d003      	beq.n	800172c <parsing_GPGGA_line+0x64>
 8001724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001728:	2b45      	cmp	r3, #69	; 0x45
 800172a:	dde3      	ble.n	80016f4 <parsing_GPGGA_line+0x2c>
		}

		// Check check sum
		char smNmbr[3]={0};     								// array for checksum
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2100      	movs	r1, #0
 8001732:	460a      	mov	r2, r1
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	460a      	mov	r2, r1
 8001738:	709a      	strb	r2, [r3, #2]
		char *rawSum;
		char not_used[12] = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001746:	212a      	movs	r1, #42	; 0x2a
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f007 fd31 	bl	80091b0 <strchr>
 800174e:	6778      	str	r0, [r7, #116]	; 0x74
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001752:	3301      	adds	r3, #1
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	843b      	strh	r3, [r7, #32]
		smNmbr[2]='\0';											// Add and of line '\0' sing
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        // PROBLEM: Checksum !=
		char hex[3];
		memset(hex, 0 , sizeof(hex));
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2203      	movs	r2, #3
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f007 fcf9 	bl	8009160 <memset>
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 800176e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fcdc 	bl	8001130 <nmea0183_checksum>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		sprintf(hex, "%x", intSum);
 800177e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	49c4      	ldr	r1, [pc, #784]	; (8001a98 <parsing_GPGGA_line+0x3d0>)
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fcf1 	bl	8009170 <siprintf>

//		if(strstr(smNmbr, hex) != NULL)
//		{
			// Parsing string

			i = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int count = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(nmeaSnt[i] != '\0')
 800179a:	e170      	b.n	8001a7e <parsing_GPGGA_line+0x3b6>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 800179c:	2300      	movs	r3, #0
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
					i++;
 80017a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					switch (count)
 80017aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	f200 8152 	bhi.w	8001a58 <parsing_GPGGA_line+0x390>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <parsing_GPGGA_line+0xf4>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017d9 	.word	0x080017d9
 80017c0:	0800181b 	.word	0x0800181b
 80017c4:	0800185d 	.word	0x0800185d
 80017c8:	0800189f 	.word	0x0800189f
 80017cc:	080018e1 	.word	0x080018e1
 80017d0:	08001923 	.word	0x08001923
 80017d4:	08001965 	.word	0x08001965
					{
						case 0:                     // Time
							for(g=0; g<8; g++)
 80017d8:	2300      	movs	r3, #0
 80017da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017dc:	e011      	b.n	8001802 <parsing_GPGGA_line+0x13a>
							{
								not_used[g] = nmeaSnt[i+g];
 80017de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e4:	4413      	add	r3, r2
 80017e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017ea:	4413      	add	r3, r2
 80017ec:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80017f0:	f107 0214 	add.w	r2, r7, #20
 80017f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
							for(g=0; g<8; g++)
 80017fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017fe:	3301      	adds	r3, #1
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001804:	2b07      	cmp	r3, #7
 8001806:	ddea      	ble.n	80017de <parsing_GPGGA_line+0x116>
							}
							not_used[9] = '\0';
 8001808:	2300      	movs	r3, #0
 800180a:	777b      	strb	r3, [r7, #29]
							i = i+g;
 800180c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001812:	4413      	add	r3, r2
 8001814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001818:	e11e      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 1:   					// Lat
							for (g =0; g<10; g++)
 800181a:	2300      	movs	r3, #0
 800181c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800181e:	e011      	b.n	8001844 <parsing_GPGGA_line+0x17c>
							{
								not_used[g] = nmeaSnt[i+g];
 8001820:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001826:	4413      	add	r3, r2
 8001828:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800182c:	4413      	add	r3, r2
 800182e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
							for (g =0; g<10; g++)
 800183e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001840:	3301      	adds	r3, #1
 8001842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001846:	2b09      	cmp	r3, #9
 8001848:	ddea      	ble.n	8001820 <parsing_GPGGA_line+0x158>
							}
							not_used[10] = '\0';
 800184a:	2300      	movs	r3, #0
 800184c:	77bb      	strb	r3, [r7, #30]
							i = i+g;
 800184e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800185a:	e0fd      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 2:						// N
							for(g=0; g<1; g++)
 800185c:	2300      	movs	r3, #0
 800185e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001860:	e011      	b.n	8001886 <parsing_GPGGA_line+0x1be>
							{
								not_used[g] = nmeaSnt[i+g];
 8001862:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001868:	4413      	add	r3, r2
 800186a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800186e:	4413      	add	r3, r2
 8001870:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001874:	f107 0214 	add.w	r2, r7, #20
 8001878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800187a:	4413      	add	r3, r2
 800187c:	460a      	mov	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001882:	3301      	adds	r3, #1
 8001884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001888:	2b00      	cmp	r3, #0
 800188a:	ddea      	ble.n	8001862 <parsing_GPGGA_line+0x19a>
							}
							not_used[1] = '\0';
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001896:	4413      	add	r3, r2
 8001898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800189c:	e0dc      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 3:                     // Lat
							for(g=0; g<11; g++)
 800189e:	2300      	movs	r3, #0
 80018a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018a2:	e011      	b.n	80018c8 <parsing_GPGGA_line+0x200>
							{
								not_used[g] = nmeaSnt[i+g];
 80018a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018aa:	4413      	add	r3, r2
 80018ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018b0:	4413      	add	r3, r2
 80018b2:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018b6:	f107 0214 	add.w	r2, r7, #20
 80018ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018bc:	4413      	add	r3, r2
 80018be:	460a      	mov	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
							for(g=0; g<11; g++)
 80018c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018c4:	3301      	adds	r3, #1
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	ddea      	ble.n	80018a4 <parsing_GPGGA_line+0x1dc>
							}
							not_used[11] = '\0';
 80018ce:	2300      	movs	r3, #0
 80018d0:	77fb      	strb	r3, [r7, #31]
							i = i+g;
 80018d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 80018de:	e0bb      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 4:                      // E
							for(g=0; g<1; g++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018e4:	e011      	b.n	800190a <parsing_GPGGA_line+0x242>
							{
								not_used[g] = nmeaSnt[i+g];
 80018e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ec:	4413      	add	r3, r2
 80018ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f2:	4413      	add	r3, r2
 80018f4:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018f8:	f107 0214 	add.w	r2, r7, #20
 80018fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018fe:	4413      	add	r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001906:	3301      	adds	r3, #1
 8001908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800190a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800190c:	2b00      	cmp	r3, #0
 800190e:	ddea      	ble.n	80018e6 <parsing_GPGGA_line+0x21e>
							}
							not_used[1] = '\0';
 8001910:	2300      	movs	r3, #0
 8001912:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001914:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800191a:	4413      	add	r3, r2
 800191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001920:	e09a      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 5:                      // Fix Quality
							for(g=0; g<1; g++)
 8001922:	2300      	movs	r3, #0
 8001924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001926:	e011      	b.n	800194c <parsing_GPGGA_line+0x284>
							{
								not_used[g] = nmeaSnt[i+g];
 8001928:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800192c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800192e:	4413      	add	r3, r2
 8001930:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001934:	4413      	add	r3, r2
 8001936:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800193a:	f107 0214 	add.w	r2, r7, #20
 800193e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001948:	3301      	adds	r3, #1
 800194a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800194c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800194e:	2b00      	cmp	r3, #0
 8001950:	ddea      	ble.n	8001928 <parsing_GPGGA_line+0x260>
							}
							not_used[1] = '\0';
 8001952:	2300      	movs	r3, #0
 8001954:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001956:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800195a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800195c:	4413      	add	r3, r2
 800195e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001962:	e079      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 6:                      // Number of Satellites
							memset(number_of_satalits_str, 0 , sizeof(number_of_satalits_str));    // clean buffer
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	2204      	movs	r2, #4
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f007 fbf7 	bl	8009160 <memset>

							for(g=0; g<2; g++)
 8001972:	2300      	movs	r3, #0
 8001974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001976:	e011      	b.n	800199c <parsing_GPGGA_line+0x2d4>
							{
								number_of_satalits_str[g] = nmeaSnt[i+g];
 8001978:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800197c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197e:	4413      	add	r3, r2
 8001980:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001984:	4413      	add	r3, r2
 8001986:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800198a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800198e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001990:	4413      	add	r3, r2
 8001992:	460a      	mov	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
							for(g=0; g<2; g++)
 8001996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001998:	3301      	adds	r3, #1
 800199a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800199c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	ddea      	ble.n	8001978 <parsing_GPGGA_line+0x2b0>
							}
							number_of_satalits_str[2] = '\0';
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							// Convert two digits string on number
							uint8_t dozens_number_of_satalits = (uint8_t)number_of_satalits_str[0] - 48;
 80019a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ac:	3b30      	subs	r3, #48	; 0x30
 80019ae:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							dozens_number_of_satalits = dozens_number_of_satalits *10;
 80019b2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80019b6:	461a      	mov	r2, r3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							uint8_t units_number_of_satalits = (uint8_t)number_of_satalits_str[1]  - 48;
 80019c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019c6:	3b30      	subs	r3, #48	; 0x30
 80019c8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
							uint8_t digit_number_of_satalites = dozens_number_of_satalits + units_number_of_satalits;
 80019cc:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80019d0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80019d4:	4413      	add	r3, r2
 80019d6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

							// Chesk if data id number
							if((digit_number_of_satalites >= 3 || digit_number_of_satalites <= 14))   // Check if data correct
 80019da:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d803      	bhi.n	80019ea <parsing_GPGGA_line+0x322>
 80019e2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019e6:	2b0e      	cmp	r3, #14
 80019e8:	d826      	bhi.n	8001a38 <parsing_GPGGA_line+0x370>
							{
								// Convert uint8_t in char
								char buff_char_number_of_satalites[3]={0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2100      	movs	r1, #0
 80019f0:	460a      	mov	r2, r1
 80019f2:	801a      	strh	r2, [r3, #0]
 80019f4:	460a      	mov	r2, r1
 80019f6:	709a      	strb	r2, [r3, #2]
								memset(buff_char_number_of_satalites, 0 ,sizeof(buff_char_number_of_satalites));
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2203      	movs	r2, #3
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 fbad 	bl	8009160 <memset>
								buff_char_number_of_satalites[0] = (char)((dozens_number_of_satalits/10) + 48);
 8001a06:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <parsing_GPGGA_line+0x3d4>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3330      	adds	r3, #48	; 0x30
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	733b      	strb	r3, [r7, #12]
								buff_char_number_of_satalites[1] = (char)units_number_of_satalits + 48;
 8001a1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	737b      	strb	r3, [r7, #13]
								buff_char_number_of_satalites[2] = '\0';
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]

								// write in global variable
								strcpy(gps_number_of_satellites, buff_char_number_of_satalites);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <parsing_GPGGA_line+0x3d8>)
 8001a30:	f007 fbcb 	bl	80091ca <strcpy>
							{
 8001a34:	bf00      	nop
							{
								char error_message[] = "Er";
								strcpy(gps_number_of_satellites, error_message);
							}

							break;
 8001a36:	e00e      	b.n	8001a56 <parsing_GPGGA_line+0x38e>
								char error_message[] = "Er";
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <parsing_GPGGA_line+0x3dc>)
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	8019      	strh	r1, [r3, #0]
 8001a44:	3302      	adds	r3, #2
 8001a46:	0c12      	lsrs	r2, r2, #16
 8001a48:	701a      	strb	r2, [r3, #0]
								strcpy(gps_number_of_satellites, error_message);
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <parsing_GPGGA_line+0x3d8>)
 8001a52:	f007 fbba 	bl	80091ca <strcpy>
							break;
 8001a56:	bf00      	nop
					}
					count++;
 8001a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(nmeaSnt[i] == ',')
 8001a62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001a70:	f43f ae94 	beq.w	800179c <parsing_GPGGA_line+0xd4>
				}
				i++;
 8001a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(nmeaSnt[i] != '\0')
 8001a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e9      	bne.n	8001a62 <parsing_GPGGA_line+0x39a>
			}
		//}
}
 8001a8e:	bf00      	nop
 8001a90:	3788      	adds	r7, #136	; 0x88
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800c618 	.word	0x0800c618
 8001a9c:	cccccccd 	.word	0xcccccccd
 8001aa0:	200006dc 	.word	0x200006dc
 8001aa4:	0800c61c 	.word	0x0800c61c

08001aa8 <parsing_GPVTG_line>:


//--------------------------------------------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b098      	sub	sp, #96	; 0x60
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001ab0:	2331      	movs	r3, #49	; 0x31
 8001ab2:	653b      	str	r3, [r7, #80]	; 0x50
	memset(nmeaSnt, 0, size);
 8001ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 fb4f 	bl	8009160 <memset>

	char str[6]={0};
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	809a      	strh	r2, [r3, #4]

	//Copy to  "*" from str_GPVTG in nmeaSnt
	int i=0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ad4:	e00c      	b.n	8001af0 <parsing_GPVTG_line+0x48>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 8001ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	f107 0218 	add.w	r2, r7, #24
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	3301      	adds	r3, #1
 8001aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b2a      	cmp	r3, #42	; 0x2a
 8001afa:	d002      	beq.n	8001b02 <parsing_GPVTG_line+0x5a>
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	2b31      	cmp	r3, #49	; 0x31
 8001b00:	dde9      	ble.n	8001ad6 <parsing_GPVTG_line+0x2e>
	}

	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2100      	movs	r1, #0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001b10:	212a      	movs	r1, #42	; 0x2a
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f007 fb4c 	bl	80091b0 <strchr>
 8001b18:	64f8      	str	r0, [r7, #76]	; 0x4c
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]

//	// PROBLEM: Checksum !=

	i = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int count = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t speed_data_readed = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(speed_data_readed == 1)
 8001b36:	e07d      	b.n	8001c34 <parsing_GPVTG_line+0x18c>
	{
		if(nmeaSnt[i] == ',')
 8001b38:	f107 0218 	add.w	r2, r7, #24
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b2c      	cmp	r3, #44	; 0x2c
 8001b44:	d102      	bne.n	8001b4c <parsing_GPVTG_line+0xa4>
		{
			count++;
 8001b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b48:	3301      	adds	r3, #1
 8001b4a:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if(count == 7)				// Find seven part (speed)
 8001b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d16d      	bne.n	8001c2e <parsing_GPVTG_line+0x186>
		{
			i++;
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	3301      	adds	r3, #1
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t k = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			char speed_test_variable[4]={0};    // for debug
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
			uint8_t error = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			do
			{
				//GPS_data.speed[k] = nmeaSnt[i+k];
				if(((nmeaSnt[i+k]-48) >= 0) && ((nmeaSnt[i+k]-48)  <= 9))   // Ok
 8001b68:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6e:	4413      	add	r3, r2
 8001b70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b74:	4413      	add	r3, r2
 8001b76:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001b7a:	3b30      	subs	r3, #48	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db1c      	blt.n	8001bba <parsing_GPVTG_line+0x112>
 8001b80:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b86:	4413      	add	r3, r2
 8001b88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001b92:	3b30      	subs	r3, #48	; 0x30
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	dc10      	bgt.n	8001bba <parsing_GPVTG_line+0x112>
				{
					speed_test_variable[k] = nmeaSnt[i+k];
 8001b98:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	441a      	add	r2, r3
 8001ba0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ba4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ba8:	440a      	add	r2, r1
 8001baa:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8001bae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001bb8:	e009      	b.n	8001bce <parsing_GPVTG_line+0x126>
				}
				else	// if error value. delete value.
				{
					// Error
					error = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
					memset(speed_test_variable, 0 ,sizeof(speed_test_variable));
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f007 fac9 	bl	8009160 <memset>
				}
				k++;
 8001bce:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			}while ((k < 3) && (nmeaSnt[i+k] != '.') && (error != 1));    // Problem where !!!!
 8001bd8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d80e      	bhi.n	8001bfe <parsing_GPVTG_line+0x156>
 8001be0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	4413      	add	r3, r2
 8001be8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bec:	4413      	add	r3, r2
 8001bee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf4:	d003      	beq.n	8001bfe <parsing_GPVTG_line+0x156>
 8001bf6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1b4      	bne.n	8001b68 <parsing_GPVTG_line+0xc0>


			// Save in global variable
			memset(str, 0 , sizeof(str));
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2206      	movs	r2, #6
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 faaa 	bl	8009160 <memset>
			//sprintf(str,"%s", GPS_data.speed);
			sprintf(str,"%s", speed_test_variable);
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f007 fad7 	bl	80091ca <strcpy>
			strcpy(gps_speed, str);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <parsing_GPVTG_line+0x1a0>)
 8001c24:	f007 fad1 	bl	80091ca <strcpy>

			speed_data_readed = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		i++;
 8001c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c30:	3301      	adds	r3, #1
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(speed_data_readed == 1)
 8001c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	f43f af7d 	beq.w	8001b38 <parsing_GPVTG_line+0x90>
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3760      	adds	r7, #96	; 0x60
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200006b8 	.word	0x200006b8

08001c4c <parsing_GPS>:
// Parsing only three lines from NMIA
// 1. From GPGLL - coordinates
// 2. From GPGGA - number of satellites
// 3. From GPVTG - speed
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	6018      	str	r0, [r3, #0]
 8001c58:	463b      	mov	r3, r7
 8001c5a:	6019      	str	r1, [r3, #0]
	char buffStr[512];										 // Main buffer in this function

	if(flag == 1)    										 // If data from GPS module in buffer
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <parsing_GPS+0xcc>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d153      	bne.n	8001d0c <parsing_GPS+0xc0>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 fa76 	bl	8009160 <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	f107 020c 	add.w	r2, r7, #12
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f007 faa4 	bl	80091ca <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL in buffStr
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4925      	ldr	r1, [pc, #148]	; (8001d1c <parsing_GPS+0xd0>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f007 faa6 	bl	80091da <strstr>
 8001c8e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 8001c92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <parsing_GPS+0x62>
		{
			parsing_GPGLL_line(str_GPGLL);
 8001c9a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001c9e:	f7ff fa6b 	bl	8001178 <parsing_GPGLL_line>
			receive_gps_signal++;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <parsing_GPS+0xd4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <parsing_GPS+0xd4>)
 8001cac:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPGGA in buffStr
		str_GPGGA = strstr(buffStr, "$GPGGA");    //$GPGGA,154423.00,4948.74034,N,02359.70944,E,1,05A,154422.00,4948.74052,N,02359.70973,E,1,05,3.71,351.1,M,34.8,M,,*53\r\n
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	491c      	ldr	r1, [pc, #112]	; (8001d24 <parsing_GPS+0xd8>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fa90 	bl	80091da <strstr>
 8001cba:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 8001cbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <parsing_GPS+0x8e>
		{
			parsing_GPGGA_line(str_GPGGA);
 8001cc6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8001cca:	f7ff fcfd 	bl	80016c8 <parsing_GPGGA_line>
			receive_gps_signal++;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <parsing_GPS+0xd4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <parsing_GPS+0xd4>)
 8001cd8:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPVTG in buffStr
		str_GPVTG = strstr(buffStr, "$GPVTG");    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4912      	ldr	r1, [pc, #72]	; (8001d28 <parsing_GPS+0xdc>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f007 fa7a 	bl	80091da <strstr>
 8001ce6:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 8001cea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <parsing_GPS+0xba>
		{
			parsing_GPVTG_line(str_GPVTG);
 8001cf2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001cf6:	f7ff fed7 	bl	8001aa8 <parsing_GPVTG_line>
			receive_gps_signal++;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <parsing_GPS+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <parsing_GPS+0xd4>)
 8001d04:	701a      	strb	r2, [r3, #0]
		}

		flag = 0;			// Flag = 0 means: Data was readed
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <parsing_GPS+0xcc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000288 	.word	0x20000288
 8001d1c:	0800c620 	.word	0x0800c620
 8001d20:	2000023c 	.word	0x2000023c
 8001d24:	0800c628 	.word	0x0800c628
 8001d28:	0800c630 	.word	0x0800c630

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <DelayMicro>:

uint8_t GSM_INIT = 0;

// -------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <DelayMicro+0x34>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <DelayMicro+0x38>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0ddb      	lsrs	r3, r3, #23
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--);
 8001d80:	bf00      	nop
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1fa      	bne.n	8001d82 <DelayMicro+0x1e>
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000040 	.word	0x20000040
 8001d9c:	ee9bfab5 	.word	0xee9bfab5

08001da0 <init_GSM_uart_comunication>:

// -------------------------------------------------------------------
void init_GSM_uart_comunication(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
		// Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
		USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <init_GSM_uart_comunication+0x20>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <init_GSM_uart_comunication+0x20>)
 8001daa:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001dae:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ (USART1_IRQn);
 8001db0:	2025      	movs	r0, #37	; 0x25
 8001db2:	f7ff ffbb 	bl	8001d2c <__NVIC_EnableIRQ>
		HAL_Delay(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f002 fef2 	bl	8004ba0 <HAL_Delay>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <init_gsm_module>:
// -------------------------------------------------------------------
int init_gsm_module(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
		// 1. Send command "AT" answer "OK"
		// 2. Send command "AT+CSQ" answer "+CSQ: 23,99" and "OK". 23,99 value can be from 0 to 31.
		// 3. Send command "AT+CCID" answer "89380062300517128558" and "OK"
		// 4. Send command "AT+CREG?" answer "+CREG: 1,1" and "OK"

	uint8_t answer_1 = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t answer_2 = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73bb      	strb	r3, [r7, #14]
	uint8_t answer_3 = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	737b      	strb	r3, [r7, #13]
	uint8_t answer_4 = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	733b      	strb	r3, [r7, #12]

	HAL_Delay(7000);     // Must be near 8
 8001dda:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001dde:	f002 fedf 	bl	8004ba0 <HAL_Delay>

	uint32_t id =0;               				 // Variable for timeout
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
	bool no_answer = false;
 8001de6:	2300      	movs	r3, #0
 8001de8:	71fb      	strb	r3, [r7, #7]
	ansver_flag =0;
 8001dea:	4ba8      	ldr	r3, [pc, #672]	; (800208c <init_gsm_module+0x2c8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]

	int timeout_counter = 10000;
 8001df0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001df4:	603b      	str	r3, [r7, #0]

	// 1. Send command " Turn off echo" ///////////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 100);
 8001df6:	48a6      	ldr	r0, [pc, #664]	; (8002090 <init_gsm_module+0x2cc>)
 8001df8:	f7fe f9aa 	bl	8000150 <strlen>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	2364      	movs	r3, #100	; 0x64
 8001e02:	49a3      	ldr	r1, [pc, #652]	; (8002090 <init_gsm_module+0x2cc>)
 8001e04:	48a3      	ldr	r0, [pc, #652]	; (8002094 <init_gsm_module+0x2d0>)
 8001e06:	f006 fc3f 	bl	8008688 <HAL_UART_Transmit>

    // Waite for answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e0a:	e020      	b.n	8001e4e <init_gsm_module+0x8a>
	{
		id++;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001e12:	2064      	movs	r0, #100	; 0x64
 8001e14:	f7ff ffa6 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 8001e18:	4b9c      	ldr	r3, [pc, #624]	; (800208c <init_gsm_module+0x2c8>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d110      	bne.n	8001e42 <init_gsm_module+0x7e>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8001e20:	499d      	ldr	r1, [pc, #628]	; (8002098 <init_gsm_module+0x2d4>)
 8001e22:	489e      	ldr	r0, [pc, #632]	; (800209c <init_gsm_module+0x2d8>)
 8001e24:	f007 f9d9 	bl	80091da <strstr>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <init_gsm_module+0x7e>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001e2e:	223c      	movs	r2, #60	; 0x3c
 8001e30:	2100      	movs	r1, #0
 8001e32:	489a      	ldr	r0, [pc, #616]	; (800209c <init_gsm_module+0x2d8>)
 8001e34:	f007 f994 	bl	8009160 <memset>
				answer_1 = 1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
				ansver_flag = 1;
 8001e3c:	4b93      	ldr	r3, [pc, #588]	; (800208c <init_gsm_module+0x2c8>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d301      	bcc.n	8001e4e <init_gsm_module+0x8a>
		{
			no_answer = true;               // Out from waiting answer
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e4e:	4b8f      	ldr	r3, [pc, #572]	; (800208c <init_gsm_module+0x2c8>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d009      	beq.n	8001e6a <init_gsm_module+0xa6>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d805      	bhi.n	8001e6a <init_gsm_module+0xa6>
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f083 0301 	eor.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1d0      	bne.n	8001e0c <init_gsm_module+0x48>
		}
	}

    HAL_Delay(DELAY);
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	; (80020a0 <init_gsm_module+0x2dc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fe96 	bl	8004ba0 <HAL_Delay>
    ////////////////////////////////////////////////////////////////

	// 2. Send command "signal reception quality" //////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 100);
 8001e74:	488b      	ldr	r0, [pc, #556]	; (80020a4 <init_gsm_module+0x2e0>)
 8001e76:	f7fe f96b 	bl	8000150 <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	2364      	movs	r3, #100	; 0x64
 8001e80:	4988      	ldr	r1, [pc, #544]	; (80020a4 <init_gsm_module+0x2e0>)
 8001e82:	4884      	ldr	r0, [pc, #528]	; (8002094 <init_gsm_module+0x2d0>)
 8001e84:	f006 fc00 	bl	8008688 <HAL_UART_Transmit>

	id = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001e90:	4b7e      	ldr	r3, [pc, #504]	; (800208c <init_gsm_module+0x2c8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e96:	e020      	b.n	8001eda <init_gsm_module+0x116>
	{
		id++;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001e9e:	2064      	movs	r0, #100	; 0x64
 8001ea0:	f7ff ff60 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)
 8001ea4:	4b79      	ldr	r3, [pc, #484]	; (800208c <init_gsm_module+0x2c8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d110      	bne.n	8001ece <init_gsm_module+0x10a>
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
 8001eac:	497e      	ldr	r1, [pc, #504]	; (80020a8 <init_gsm_module+0x2e4>)
 8001eae:	487b      	ldr	r0, [pc, #492]	; (800209c <init_gsm_module+0x2d8>)
 8001eb0:	f007 f993 	bl	80091da <strstr>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <init_gsm_module+0x10a>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001eba:	223c      	movs	r2, #60	; 0x3c
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4877      	ldr	r0, [pc, #476]	; (800209c <init_gsm_module+0x2d8>)
 8001ec0:	f007 f94e 	bl	8009160 <memset>
				answer_2 = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8001ec8:	4b70      	ldr	r3, [pc, #448]	; (800208c <init_gsm_module+0x2c8>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d301      	bcc.n	8001eda <init_gsm_module+0x116>
		{
			no_answer = true;               // Out from waiting answer
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001eda:	4b6c      	ldr	r3, [pc, #432]	; (800208c <init_gsm_module+0x2c8>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d009      	beq.n	8001ef6 <init_gsm_module+0x132>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d805      	bhi.n	8001ef6 <init_gsm_module+0x132>
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1d0      	bne.n	8001e98 <init_gsm_module+0xd4>
		}
	}

	// Waite for answer "OK" after  "+CSQ"
	id = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001efa:	2300      	movs	r3, #0
 8001efc:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <init_gsm_module+0x2c8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f04:	e020      	b.n	8001f48 <init_gsm_module+0x184>
	{
		id++;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 8001f0c:	200a      	movs	r0, #10
 8001f0e:	f7ff ff29 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8001f12:	4b5e      	ldr	r3, [pc, #376]	; (800208c <init_gsm_module+0x2c8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d110      	bne.n	8001f3c <init_gsm_module+0x178>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8001f1a:	495f      	ldr	r1, [pc, #380]	; (8002098 <init_gsm_module+0x2d4>)
 8001f1c:	485f      	ldr	r0, [pc, #380]	; (800209c <init_gsm_module+0x2d8>)
 8001f1e:	f007 f95c 	bl	80091da <strstr>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <init_gsm_module+0x178>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001f28:	223c      	movs	r2, #60	; 0x3c
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	485b      	ldr	r0, [pc, #364]	; (800209c <init_gsm_module+0x2d8>)
 8001f2e:	f007 f917 	bl	8009160 <memset>
				answer_2 = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8001f36:	4b55      	ldr	r3, [pc, #340]	; (800208c <init_gsm_module+0x2c8>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d301      	bcc.n	8001f48 <init_gsm_module+0x184>
		{
			no_answer = true;               // Out from waiting answer
 8001f44:	2301      	movs	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <init_gsm_module+0x2c8>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d009      	beq.n	8001f64 <init_gsm_module+0x1a0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d805      	bhi.n	8001f64 <init_gsm_module+0x1a0>
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1d0      	bne.n	8001f06 <init_gsm_module+0x142>
		}
	}
	HAL_Delay(DELAY);
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <init_gsm_module+0x2dc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fe19 	bl	8004ba0 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	// 3. Send command "signal reception quality" /////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 100);
 8001f6e:	484f      	ldr	r0, [pc, #316]	; (80020ac <init_gsm_module+0x2e8>)
 8001f70:	f7fe f8ee 	bl	8000150 <strlen>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	494c      	ldr	r1, [pc, #304]	; (80020ac <init_gsm_module+0x2e8>)
 8001f7c:	4845      	ldr	r0, [pc, #276]	; (8002094 <init_gsm_module+0x2d0>)
 8001f7e:	f006 fb83 	bl	8008688 <HAL_UART_Transmit>

	id = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001f8a:	4b40      	ldr	r3, [pc, #256]	; (800208c <init_gsm_module+0x2c8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f90:	e020      	b.n	8001fd4 <init_gsm_module+0x210>
	{
		id++;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001f98:	2064      	movs	r0, #100	; 0x64
 8001f9a:	f7ff fee3 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <init_gsm_module+0x2c8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d110      	bne.n	8001fc8 <init_gsm_module+0x204>
		{
			if (strstr(GSM_RX_buffer, "89380"))
 8001fa6:	4942      	ldr	r1, [pc, #264]	; (80020b0 <init_gsm_module+0x2ec>)
 8001fa8:	483c      	ldr	r0, [pc, #240]	; (800209c <init_gsm_module+0x2d8>)
 8001faa:	f007 f916 	bl	80091da <strstr>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <init_gsm_module+0x204>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001fb4:	223c      	movs	r2, #60	; 0x3c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4838      	ldr	r0, [pc, #224]	; (800209c <init_gsm_module+0x2d8>)
 8001fba:	f007 f8d1 	bl	8009160 <memset>
				answer_3 = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <init_gsm_module+0x2c8>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d301      	bcc.n	8001fd4 <init_gsm_module+0x210>
		{
			no_answer = true;               // Out from waiting answer
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <init_gsm_module+0x2c8>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d009      	beq.n	8001ff0 <init_gsm_module+0x22c>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d805      	bhi.n	8001ff0 <init_gsm_module+0x22c>
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1d0      	bne.n	8001f92 <init_gsm_module+0x1ce>
		}
	}

	// Waite for answer "OK"
	id = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <init_gsm_module+0x2c8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001ffe:	e020      	b.n	8002042 <init_gsm_module+0x27e>
	{
		id++;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 8002006:	200a      	movs	r0, #10
 8002008:	f7ff feac 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <init_gsm_module+0x2c8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d110      	bne.n	8002036 <init_gsm_module+0x272>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002014:	4920      	ldr	r1, [pc, #128]	; (8002098 <init_gsm_module+0x2d4>)
 8002016:	4821      	ldr	r0, [pc, #132]	; (800209c <init_gsm_module+0x2d8>)
 8002018:	f007 f8df 	bl	80091da <strstr>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <init_gsm_module+0x272>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002022:	223c      	movs	r2, #60	; 0x3c
 8002024:	2100      	movs	r1, #0
 8002026:	481d      	ldr	r0, [pc, #116]	; (800209c <init_gsm_module+0x2d8>)
 8002028:	f007 f89a 	bl	8009160 <memset>
				answer_3 = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <init_gsm_module+0x2c8>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	d301      	bcc.n	8002042 <init_gsm_module+0x27e>
		{
			no_answer = true;               // Out from waiting answer
 800203e:	2301      	movs	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <init_gsm_module+0x2c8>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d009      	beq.n	800205e <init_gsm_module+0x29a>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	d805      	bhi.n	800205e <init_gsm_module+0x29a>
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1d0      	bne.n	8002000 <init_gsm_module+0x23c>
		}
	}
	HAL_Delay(DELAY);
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <init_gsm_module+0x2dc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fd9c 	bl	8004ba0 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	// 4. Send command "Check registration in network"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CREG, strlen(AT_CREG), 100);
 8002068:	4812      	ldr	r0, [pc, #72]	; (80020b4 <init_gsm_module+0x2f0>)
 800206a:	f7fe f871 	bl	8000150 <strlen>
 800206e:	4603      	mov	r3, r0
 8002070:	b29a      	uxth	r2, r3
 8002072:	2364      	movs	r3, #100	; 0x64
 8002074:	490f      	ldr	r1, [pc, #60]	; (80020b4 <init_gsm_module+0x2f0>)
 8002076:	4807      	ldr	r0, [pc, #28]	; (8002094 <init_gsm_module+0x2d0>)
 8002078:	f006 fb06 	bl	8008688 <HAL_UART_Transmit>

	id = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002080:	2300      	movs	r3, #0
 8002082:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <init_gsm_module+0x2c8>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800208a:	e036      	b.n	80020fa <init_gsm_module+0x336>
 800208c:	2000027c 	.word	0x2000027c
 8002090:	20000004 	.word	0x20000004
 8002094:	2000085c 	.word	0x2000085c
 8002098:	0800c638 	.word	0x0800c638
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000000 	.word	0x20000000
 80020a4:	2000000c 	.word	0x2000000c
 80020a8:	0800c63c 	.word	0x0800c63c
 80020ac:	20000018 	.word	0x20000018
 80020b0:	0800c644 	.word	0x0800c644
 80020b4:	20000024 	.word	0x20000024
	{
		id++;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3301      	adds	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 80020be:	2064      	movs	r0, #100	; 0x64
 80020c0:	f7ff fe50 	bl	8001d64 <DelayMicro>

		if(ansver_flag == 1)
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <init_gsm_module+0x3f0>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d110      	bne.n	80020ee <init_gsm_module+0x32a>
		{
			if (strstr(GSM_RX_buffer, "+CREG: 0,1"))
 80020cc:	493a      	ldr	r1, [pc, #232]	; (80021b8 <init_gsm_module+0x3f4>)
 80020ce:	483b      	ldr	r0, [pc, #236]	; (80021bc <init_gsm_module+0x3f8>)
 80020d0:	f007 f883 	bl	80091da <strstr>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <init_gsm_module+0x32a>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80020da:	223c      	movs	r2, #60	; 0x3c
 80020dc:	2100      	movs	r1, #0
 80020de:	4837      	ldr	r0, [pc, #220]	; (80021bc <init_gsm_module+0x3f8>)
 80020e0:	f007 f83e 	bl	8009160 <memset>
				answer_4 = 1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <init_gsm_module+0x3f0>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d301      	bcc.n	80020fa <init_gsm_module+0x336>
		{
			no_answer = true;               // Out from waiting answer
 80020f6:	2301      	movs	r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80020fa:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <init_gsm_module+0x3f0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d009      	beq.n	8002116 <init_gsm_module+0x352>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	429a      	cmp	r2, r3
 8002108:	d805      	bhi.n	8002116 <init_gsm_module+0x352>
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1d0      	bne.n	80020b8 <init_gsm_module+0x2f4>
		}
	}

	// Waite for answer "OK"
	id = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 800211a:	2300      	movs	r3, #0
 800211c:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <init_gsm_module+0x3f0>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002124:	e020      	b.n	8002168 <init_gsm_module+0x3a4>
	{
		id++;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 800212c:	200a      	movs	r0, #10
 800212e:	f7ff fe19 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <init_gsm_module+0x3f0>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d110      	bne.n	800215c <init_gsm_module+0x398>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 800213a:	4921      	ldr	r1, [pc, #132]	; (80021c0 <init_gsm_module+0x3fc>)
 800213c:	481f      	ldr	r0, [pc, #124]	; (80021bc <init_gsm_module+0x3f8>)
 800213e:	f007 f84c 	bl	80091da <strstr>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d009      	beq.n	800215c <init_gsm_module+0x398>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002148:	223c      	movs	r2, #60	; 0x3c
 800214a:	2100      	movs	r1, #0
 800214c:	481b      	ldr	r0, [pc, #108]	; (80021bc <init_gsm_module+0x3f8>)
 800214e:	f007 f807 	bl	8009160 <memset>
				answer_4 = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <init_gsm_module+0x3f0>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	429a      	cmp	r2, r3
 8002162:	d301      	bcc.n	8002168 <init_gsm_module+0x3a4>
		{
			no_answer = true;               // Out from waiting answer
 8002164:	2301      	movs	r3, #1
 8002166:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <init_gsm_module+0x3f0>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d009      	beq.n	8002184 <init_gsm_module+0x3c0>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	d805      	bhi.n	8002184 <init_gsm_module+0x3c0>
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1d0      	bne.n	8002126 <init_gsm_module+0x362>
		}
	}
	HAL_Delay(DELAY);
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <init_gsm_module+0x400>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fd09 	bl	8004ba0 <HAL_Delay>
	////////////////////////////////////////////////////////////////


	if(answer_1 && answer_2 && answer_3 && answer_4)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <init_gsm_module+0x3e6>
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <init_gsm_module+0x3e6>
 800219a:	7b7b      	ldrb	r3, [r7, #13]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <init_gsm_module+0x3e6>
 80021a0:	7b3b      	ldrb	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <init_gsm_module+0x3e6>
	{
		return 0;            // If init OK
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <init_gsm_module+0x3e8>
	}
	else
	{
		return 1;
 80021aa:	2301      	movs	r3, #1
	}
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000027c 	.word	0x2000027c
 80021b8:	0800c64c 	.word	0x0800c64c
 80021bc:	20000240 	.word	0x20000240
 80021c0:	0800c638 	.word	0x0800c638
 80021c4:	20000000 	.word	0x20000000

080021c8 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b08b      	sub	sp, #44	; 0x2c
 80021cc:	af00      	add	r7, sp, #0
	uint8_t size=0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 80021de:	23ff      	movs	r3, #255	; 0xff
 80021e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 80021ea:	463b      	mov	r3, r7
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f95a 	bl	80024a8 <r_single_Si7021>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80021fa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d000      	beq.n	8002204 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 8002202:	e7fe      	b.n	8002202 <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe ff42 	bl	8001094 <__aeabi_fcmplt>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <read_T_and_H_SI7021+0x52>
 8002216:	4b52      	ldr	r3, [pc, #328]	; (8002360 <read_T_and_H_SI7021+0x198>)
 8002218:	e000      	b.n	800221c <read_T_and_H_SI7021+0x54>
 800221a:	4b52      	ldr	r3, [pc, #328]	; (8002364 <read_T_and_H_SI7021+0x19c>)
 800221c:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe ff35 	bl	8001094 <__aeabi_fcmplt>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <read_T_and_H_SI7021+0x70>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002236:	e000      	b.n	800223a <read_T_and_H_SI7021+0x72>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 800223c:	69f8      	ldr	r0, [r7, #28]
 800223e:	f7fe ff51 	bl	80010e4 <__aeabi_f2iz>
 8002242:	4603      	mov	r3, r0
 8002244:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 8002246:	683c      	ldr	r4, [r7, #0]
 8002248:	69b8      	ldr	r0, [r7, #24]
 800224a:	f7fe fd31 	bl	8000cb0 <__aeabi_i2f>
 800224e:	4603      	mov	r3, r0
 8002250:	4619      	mov	r1, r3
 8002252:	4620      	mov	r0, r4
 8002254:	f7fe fc76 	bl	8000b44 <__aeabi_fsub>
 8002258:	4603      	mov	r3, r0
 800225a:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 800225c:	4942      	ldr	r1, [pc, #264]	; (8002368 <read_T_and_H_SI7021+0x1a0>)
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7fe fd7a 	bl	8000d58 <__aeabi_fmul>
 8002264:	4603      	mov	r3, r0
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f8de 	bl	8000428 <__aeabi_f2d>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	4618      	mov	r0, r3
 8002272:	4621      	mov	r1, r4
 8002274:	f00a f992 	bl	800c59c <trunc>
 8002278:	4603      	mov	r3, r0
 800227a:	460c      	mov	r4, r1
 800227c:	4618      	mov	r0, r3
 800227e:	4621      	mov	r1, r4
 8002280:	f7fe fbc4 	bl	8000a0c <__aeabi_d2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 8002288:	1d38      	adds	r0, r7, #4
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	4937      	ldr	r1, [pc, #220]	; (800236c <read_T_and_H_SI7021+0x1a4>)
 8002290:	f006 ff6e 	bl	8009170 <siprintf>
	strcpy(temperature_si7021, str);
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4835      	ldr	r0, [pc, #212]	; (8002370 <read_T_and_H_SI7021+0x1a8>)
 800229a:	f006 ff96 	bl	80091ca <strcpy>
	memset(str, 0 , sizeof(str));
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	220a      	movs	r2, #10
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 ff5b 	bl	8009160 <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 80022aa:	23ff      	movs	r3, #255	; 0xff
 80022ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 80022b0:	463b      	mov	r3, r7
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f8f7 	bl	80024a8 <r_single_Si7021>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80022c0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d000      	beq.n	80022ca <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 80022c8:	e7fe      	b.n	80022c8 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fedf 	bl	8001094 <__aeabi_fcmplt>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <read_T_and_H_SI7021+0x11c>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	e000      	b.n	80022e6 <read_T_and_H_SI7021+0x11e>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 80022e8:	69f8      	ldr	r0, [r7, #28]
 80022ea:	f7fe fefb 	bl	80010e4 <__aeabi_f2iz>
 80022ee:	4603      	mov	r3, r0
 80022f0:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 80022f2:	683c      	ldr	r4, [r7, #0]
 80022f4:	69b8      	ldr	r0, [r7, #24]
 80022f6:	f7fe fcdb 	bl	8000cb0 <__aeabi_i2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4619      	mov	r1, r3
 80022fe:	4620      	mov	r0, r4
 8002300:	f7fe fc20 	bl	8000b44 <__aeabi_fsub>
 8002304:	4603      	mov	r3, r0
 8002306:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8002308:	4917      	ldr	r1, [pc, #92]	; (8002368 <read_T_and_H_SI7021+0x1a0>)
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7fe fd24 	bl	8000d58 <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f888 	bl	8000428 <__aeabi_f2d>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	4618      	mov	r0, r3
 800231e:	4621      	mov	r1, r4
 8002320:	f00a f93c 	bl	800c59c <trunc>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f7fe fb6e 	bl	8000a0c <__aeabi_d2iz>
 8002330:	4603      	mov	r3, r0
 8002332:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <read_T_and_H_SI7021+0x1ac>)
 800233a:	4618      	mov	r0, r3
 800233c:	f006 ff18 	bl	8009170 <siprintf>
	strcpy(humidity_si7021, str);
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	4619      	mov	r1, r3
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <read_T_and_H_SI7021+0x1b0>)
 8002346:	f006 ff40 	bl	80091ca <strcpy>
	memset(str, 0 , sizeof(str));
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	220a      	movs	r2, #10
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f006 ff05 	bl	8009160 <memset>
}
 8002356:	bf00      	nop
 8002358:	372c      	adds	r7, #44	; 0x2c
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop
 8002360:	0800c6a4 	.word	0x0800c6a4
 8002364:	0800c6a8 	.word	0x0800c6a8
 8002368:	461c4000 	.word	0x461c4000
 800236c:	0800c6ac 	.word	0x0800c6ac
 8002370:	200006a8 	.word	0x200006a8
 8002374:	0800c6b4 	.word	0x0800c6b4
 8002378:	200006b0 	.word	0x200006b0
 800237c:	00000000 	.word	0x00000000

08002380 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f839 	bl	8000404 <__aeabi_i2d>
 8002392:	a311      	add	r3, pc, #68	; (adr r3, 80023d8 <process_temp_code+0x58>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f89e 	bl	80004d8 <__aeabi_dmul>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	4618      	mov	r0, r3
 80023a2:	4621      	mov	r1, r4
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <process_temp_code+0x68>)
 80023aa:	f7fe f9bf 	bl	800072c <__aeabi_ddiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	460c      	mov	r4, r1
 80023b2:	4618      	mov	r0, r3
 80023b4:	4621      	mov	r1, r4
 80023b6:	a30a      	add	r3, pc, #40	; (adr r3, 80023e0 <process_temp_code+0x60>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fd fed4 	bl	8000168 <__aeabi_dsub>
 80023c0:	4603      	mov	r3, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	4618      	mov	r0, r3
 80023c6:	4621      	mov	r1, r4
 80023c8:	f7fe fb68 	bl	8000a9c <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	3d70a3d7 	.word	0x3d70a3d7
 80023dc:	4065f70a 	.word	0x4065f70a
 80023e0:	cccccccd 	.word	0xcccccccd
 80023e4:	40476ccc 	.word	0x40476ccc
 80023e8:	40f00000 	.word	0x40f00000

080023ec <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f803 	bl	8000404 <__aeabi_i2d>
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <process_humi_code+0x84>)
 8002404:	f7fe f868 	bl	80004d8 <__aeabi_dmul>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	4618      	mov	r0, r3
 800240e:	4621      	mov	r1, r4
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <process_humi_code+0x88>)
 8002416:	f7fe f989 	bl	800072c <__aeabi_ddiv>
 800241a:	4603      	mov	r3, r0
 800241c:	460c      	mov	r4, r1
 800241e:	4618      	mov	r0, r3
 8002420:	4621      	mov	r1, r4
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <process_humi_code+0x8c>)
 8002428:	f7fd fe9e 	bl	8000168 <__aeabi_dsub>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	4618      	mov	r0, r3
 8002432:	4621      	mov	r1, r4
 8002434:	f7fe fb32 	bl	8000a9c <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7fe fe27 	bl	8001094 <__aeabi_fcmplt>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <process_humi_code+0x66>
    return 0;
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e009      	b.n	8002466 <process_humi_code+0x7a>
  else if(value > 100)
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <process_humi_code+0x90>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7fe fe3b 	bl	80010d0 <__aeabi_fcmpgt>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <process_humi_code+0x78>
    return 100;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <process_humi_code+0x90>)
 8002462:	e000      	b.n	8002466 <process_humi_code+0x7a>
  else
    return (float)value;
 8002464:	68fb      	ldr	r3, [r7, #12]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	405f4000 	.word	0x405f4000
 8002474:	40f00000 	.word	0x40f00000
 8002478:	40180000 	.word	0x40180000
 800247c:	42c80000 	.word	0x42c80000

08002480 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b21a      	sxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b21b      	sxth	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b21b      	sxth	r3, r3
 800249c:	b29b      	uxth	r3, r3
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 80024ba:	23e5      	movs	r3, #229	; 0xe5
 80024bc:	737b      	strb	r3, [r7, #13]
 80024be:	e008      	b.n	80024d2 <r_single_Si7021+0x2a>
  else if(type == Temperature)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <r_single_Si7021+0x24>
    cmd = Temp_HM;
 80024c6:	23e3      	movs	r3, #227	; 0xe3
 80024c8:	737b      	strb	r3, [r7, #13]
 80024ca:	e002      	b.n	80024d2 <r_single_Si7021+0x2a>
  else
    return -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d0:	e03c      	b.n	800254c <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	f107 020d 	add.w	r2, r7, #13
 80024d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2301      	movs	r3, #1
 80024e0:	481c      	ldr	r0, [pc, #112]	; (8002554 <r_single_Si7021+0xac>)
 80024e2:	f003 f9b3 	bl	800584c <HAL_I2C_Master_Transmit>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <r_single_Si7021+0x4a>
    return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f0:	e02c      	b.n	800254c <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	f107 0208 	add.w	r2, r7, #8
 80024f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2302      	movs	r3, #2
 8002500:	4814      	ldr	r0, [pc, #80]	; (8002554 <r_single_Si7021+0xac>)
 8002502:	f003 faa1 	bl	8005a48 <HAL_I2C_Master_Receive>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <r_single_Si7021+0x6a>
    return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002510:	e01c      	b.n	800254c <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffb2 	bl	8002480 <convert_to_uint16>
 800251c:	4603      	mov	r3, r0
 800251e:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5f 	bl	80023ec <process_humi_code>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e009      	b.n	800254a <r_single_Si7021+0xa2>
  else if(type == Temperature)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d106      	bne.n	800254a <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff1e 	bl	8002380 <process_temp_code>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]

  return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000808 	.word	0x20000808

08002558 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b087      	sub	sp, #28
 800255c:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <I2C_1_scaner+0xb4>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e043      	b.n	80025f2 <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 800256a:	2001      	movs	r0, #1
 800256c:	f002 fb18 	bl	8004ba0 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <I2C_1_scaner+0xb4>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	b299      	uxth	r1, r3
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <I2C_1_scaner+0xb8>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b298      	uxth	r0, r3
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <I2C_1_scaner+0xbc>)
 8002582:	881c      	ldrh	r4, [r3, #0]
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <I2C_1_scaner+0xbc>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4a23      	ldr	r2, [pc, #140]	; (8002618 <I2C_1_scaner+0xc0>)
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	9202      	str	r2, [sp, #8]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <I2C_1_scaner+0xc4>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4623      	mov	r3, r4
 8002596:	4602      	mov	r2, r0
 8002598:	4821      	ldr	r0, [pc, #132]	; (8002620 <I2C_1_scaner+0xc8>)
 800259a:	f003 fda9 	bl	80060f0 <HAL_I2C_Mem_Read>
 800259e:	4603      	mov	r3, r0
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <I2C_1_scaner+0xcc>)
 80025a4:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <I2C_1_scaner+0xcc>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11b      	bne.n	80025e6 <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	3301      	adds	r3, #1
 80025b2:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <I2C_1_scaner+0xb4>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <I2C_1_scaner+0xb4>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b3c      	cmp	r3, #60	; 0x3c
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <I2C_1_scaner+0xb4>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b3c      	cmp	r3, #60	; 0x3c
 80025de:	d001      	beq.n	80025e4 <I2C_1_scaner+0x8c>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 80025e2:	e000      	b.n	80025e6 <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 80025e4:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <I2C_1_scaner+0xb4>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <I2C_1_scaner+0xb4>)
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <I2C_1_scaner+0xb4>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2bff      	cmp	r3, #255	; 0xff
 80025f8:	d1b7      	bne.n	800256a <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 80025fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025fe:	f002 facf 	bl	8004ba0 <HAL_Delay>
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	2000027e 	.word	0x2000027e
 8002610:	2000027f 	.word	0x2000027f
 8002614:	20000038 	.word	0x20000038
 8002618:	2000003c 	.word	0x2000003c
 800261c:	20000280 	.word	0x20000280
 8002620:	20000808 	.word	0x20000808
 8002624:	20000282 	.word	0x20000282

08002628 <HAL_UART_RxCpltCallback>:
// Receive data from GPS module
#if GPS
	// GPS receive part///////////////////////////////////////////////////////
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
		flag = 1;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_UART_RxCpltCallback+0x18>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
	}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000288 	.word	0x20000288

08002644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800264a:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800264c:	f002 fa46 	bl	8004adc <HAL_Init>
//
//  } global_data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002650:	f000 feb8 	bl	80033c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002654:	f001 f8ec 	bl	8003830 <MX_GPIO_Init>
  MX_DMA_Init();
 8002658:	f001 f8cc 	bl	80037f4 <MX_DMA_Init>
  MX_TIM2_Init();
 800265c:	f000 fffe 	bl	800365c <MX_TIM2_Init>
  MX_I2C1_Init();
 8002660:	f000 fef6 	bl	8003450 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002664:	f001 f848 	bl	80036f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002668:	f001 f89a 	bl	80037a0 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800266c:	f000 ff1e 	bl	80034ac <MX_SPI2_Init>
  MX_TIM1_Init();
 8002670:	f000 ff52 	bl	8003518 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002674:	f001 f86a 	bl	800374c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



	#if I2C_SCANNER
  	  I2C_1_scaner();
 8002678:	f7ff ff6e 	bl	8002558 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  	  read_T_and_H_SI7021();
 800267c:	f7ff fda4 	bl	80021c8 <read_T_and_H_SI7021>
	#endif

	#if OLED
  	  init_oled();
 8002680:	f001 faf8 	bl	8003c74 <init_oled>
	  //test_oled();
	#endif

  	  HAL_TIM_Base_Start_IT(&htim2);
 8002684:	48ca      	ldr	r0, [pc, #808]	; (80029b0 <main+0x36c>)
 8002686:	f005 f8e7 	bl	8007858 <HAL_TIM_Base_Start_IT>

	#if GPS
  	  uint8_t GPS_buff[512];      						// main buffer for stream from GPS
  	  memset(GPS_buff ,0 ,sizeof(GPS_buff));
 800268a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800268e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f006 fd63 	bl	8009160 <memset>
  	  HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 800269a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800269e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a2:	4619      	mov	r1, r3
 80026a4:	48c3      	ldr	r0, [pc, #780]	; (80029b4 <main+0x370>)
 80026a6:	f006 f889 	bl	80087bc <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  #if SOUND
  	uint16_t pulse = 2;
 80026aa:	2302      	movs	r3, #2
 80026ac:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
  	uint32_t period = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  	uint16_t max = 200;
 80026b6:	23c8      	movs	r3, #200	; 0xc8
 80026b8:	f8a7 323a 	strh.w	r3, [r7, #570]	; 0x23a
  	uint16_t min = 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	f8a7 3238 	strh.w	r3, [r7, #568]	; 0x238
  	for(period = min; period < max; period++)
 80026c2:	f8b7 3238 	ldrh.w	r3, [r7, #568]	; 0x238
 80026c6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80026ca:	e024      	b.n	8002716 <main+0xd2>
  	{
  		pulse = period/2;
 80026cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
  		buzzer_fricvency_setings(htim1, TIM_CHANNEL_1, period, pulse);
 80026d6:	f8b7 323c 	ldrh.w	r3, [r7, #572]	; 0x23c
 80026da:	4eb7      	ldr	r6, [pc, #732]	; (80029b8 <main+0x374>)
 80026dc:	930e      	str	r3, [sp, #56]	; 0x38
 80026de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80026e2:	930d      	str	r3, [sp, #52]	; 0x34
 80026e4:	2300      	movs	r3, #0
 80026e6:	930c      	str	r3, [sp, #48]	; 0x30
 80026e8:	466d      	mov	r5, sp
 80026ea:	f106 0410 	add.w	r4, r6, #16
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80026fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002702:	f001 f949 	bl	8003998 <buzzer_fricvency_setings>
  		HAL_Delay(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f002 fa4a 	bl	8004ba0 <HAL_Delay>
  	for(period = min; period < max; period++)
 800270c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002710:	3301      	adds	r3, #1
 8002712:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002716:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 800271a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800271e:	429a      	cmp	r2, r3
 8002720:	d3d4      	bcc.n	80026cc <main+0x88>
  	}
  	if(period >= max)
 8002722:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8002726:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800272a:	429a      	cmp	r2, r3
 800272c:	d32f      	bcc.n	800278e <main+0x14a>
  	{
  		for(period = max; period > min; period--)
 800272e:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8002732:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002736:	e024      	b.n	8002782 <main+0x13e>
  		{
  			pulse = period/2;
 8002738:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
  			buzzer_fricvency_setings(htim1, TIM_CHANNEL_1, period, pulse);
 8002742:	f8b7 323c 	ldrh.w	r3, [r7, #572]	; 0x23c
 8002746:	4e9c      	ldr	r6, [pc, #624]	; (80029b8 <main+0x374>)
 8002748:	930e      	str	r3, [sp, #56]	; 0x38
 800274a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800274e:	930d      	str	r3, [sp, #52]	; 0x34
 8002750:	2300      	movs	r3, #0
 8002752:	930c      	str	r3, [sp, #48]	; 0x30
 8002754:	466d      	mov	r5, sp
 8002756:	f106 0410 	add.w	r4, r6, #16
 800275a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002762:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002766:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800276a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800276e:	f001 f913 	bl	8003998 <buzzer_fricvency_setings>
  			HAL_Delay(1);
 8002772:	2001      	movs	r0, #1
 8002774:	f002 fa14 	bl	8004ba0 <HAL_Delay>
  		for(period = max; period > min; period--)
 8002778:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800277c:	3b01      	subs	r3, #1
 800277e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002782:	f8b7 3238 	ldrh.w	r3, [r7, #568]	; 0x238
 8002786:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800278a:	429a      	cmp	r2, r3
 800278c:	d8d4      	bhi.n	8002738 <main+0xf4>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
 800278e:	2100      	movs	r1, #0
 8002790:	4889      	ldr	r0, [pc, #548]	; (80029b8 <main+0x374>)
 8002792:	f005 f8eb 	bl	800796c <HAL_TIM_PWM_Stop>
  #endif

  	int EXIT = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
while (1)
{
	EXIT = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

	// Print main menu on OLED ////////////////////
	char str[50]={0};
 80027a2:	463b      	mov	r3, r7
 80027a4:	4618      	mov	r0, r3
 80027a6:	2332      	movs	r3, #50	; 0x32
 80027a8:	461a      	mov	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	f006 fcd8 	bl	8009160 <memset>
	// Print message
	sprintf(str,"%s", " SELECT MODE...");
 80027b0:	463b      	mov	r3, r7
 80027b2:	4a82      	ldr	r2, [pc, #520]	; (80029bc <main+0x378>)
 80027b4:	461c      	mov	r4, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(00, 00);
 80027be:	2100      	movs	r1, #0
 80027c0:	2000      	movs	r0, #0
 80027c2:	f001 fe21 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80027c6:	4a7e      	ldr	r2, [pc, #504]	; (80029c0 <main+0x37c>)
 80027c8:	4638      	mov	r0, r7
 80027ca:	2301      	movs	r3, #1
 80027cc:	ca06      	ldmia	r2, {r1, r2}
 80027ce:	f001 fdf5 	bl	80043bc <ssd1306_WriteString>

	sprintf(str,"%s", "1.GPS MODE");
 80027d2:	463b      	mov	r3, r7
 80027d4:	4a7b      	ldr	r2, [pc, #492]	; (80029c4 <main+0x380>)
 80027d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027d8:	c303      	stmia	r3!, {r0, r1}
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	3302      	adds	r3, #2
 80027de:	0c12      	lsrs	r2, r2, #16
 80027e0:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 16);
 80027e2:	2110      	movs	r1, #16
 80027e4:	2000      	movs	r0, #0
 80027e6:	f001 fe0f 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80027ea:	4a75      	ldr	r2, [pc, #468]	; (80029c0 <main+0x37c>)
 80027ec:	4638      	mov	r0, r7
 80027ee:	2301      	movs	r3, #1
 80027f0:	ca06      	ldmia	r2, {r1, r2}
 80027f2:	f001 fde3 	bl	80043bc <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80027f6:	463b      	mov	r3, r7
 80027f8:	2232      	movs	r2, #50	; 0x32
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f006 fcaf 	bl	8009160 <memset>

	sprintf(str,"%s", "2.GSM MODE");
 8002802:	463b      	mov	r3, r7
 8002804:	4a70      	ldr	r2, [pc, #448]	; (80029c8 <main+0x384>)
 8002806:	ca07      	ldmia	r2, {r0, r1, r2}
 8002808:	c303      	stmia	r3!, {r0, r1}
 800280a:	801a      	strh	r2, [r3, #0]
 800280c:	3302      	adds	r3, #2
 800280e:	0c12      	lsrs	r2, r2, #16
 8002810:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 26);
 8002812:	211a      	movs	r1, #26
 8002814:	2000      	movs	r0, #0
 8002816:	f001 fdf7 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 800281a:	4a69      	ldr	r2, [pc, #420]	; (80029c0 <main+0x37c>)
 800281c:	4638      	mov	r0, r7
 800281e:	2301      	movs	r3, #1
 8002820:	ca06      	ldmia	r2, {r1, r2}
 8002822:	f001 fdcb 	bl	80043bc <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8002826:	463b      	mov	r3, r7
 8002828:	2232      	movs	r2, #50	; 0x32
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f006 fc97 	bl	8009160 <memset>

	sprintf(str,"%s", "3.FINGERPRINT MODE");
 8002832:	463b      	mov	r3, r7
 8002834:	4a65      	ldr	r2, [pc, #404]	; (80029cc <main+0x388>)
 8002836:	461c      	mov	r4, r3
 8002838:	4615      	mov	r5, r2
 800283a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800283c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800283e:	682b      	ldr	r3, [r5, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	8022      	strh	r2, [r4, #0]
 8002844:	3402      	adds	r4, #2
 8002846:	0c1b      	lsrs	r3, r3, #16
 8002848:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 36);
 800284a:	2124      	movs	r1, #36	; 0x24
 800284c:	2000      	movs	r0, #0
 800284e:	f001 fddb 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8002852:	4a5b      	ldr	r2, [pc, #364]	; (80029c0 <main+0x37c>)
 8002854:	4638      	mov	r0, r7
 8002856:	2301      	movs	r3, #1
 8002858:	ca06      	ldmia	r2, {r1, r2}
 800285a:	f001 fdaf 	bl	80043bc <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 800285e:	463b      	mov	r3, r7
 8002860:	2232      	movs	r2, #50	; 0x32
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f006 fc7b 	bl	8009160 <memset>

	sprintf(str,"%s", "4.SENSORS MODE");
 800286a:	463b      	mov	r3, r7
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <main+0x38c>)
 800286e:	461c      	mov	r4, r3
 8002870:	4613      	mov	r3, r2
 8002872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002874:	c407      	stmia	r4!, {r0, r1, r2}
 8002876:	8023      	strh	r3, [r4, #0]
 8002878:	3402      	adds	r4, #2
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 46);
 800287e:	212e      	movs	r1, #46	; 0x2e
 8002880:	2000      	movs	r0, #0
 8002882:	f001 fdc1 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8002886:	4a4e      	ldr	r2, [pc, #312]	; (80029c0 <main+0x37c>)
 8002888:	4638      	mov	r0, r7
 800288a:	2301      	movs	r3, #1
 800288c:	ca06      	ldmia	r2, {r1, r2}
 800288e:	f001 fd95 	bl	80043bc <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8002892:	463b      	mov	r3, r7
 8002894:	2232      	movs	r2, #50	; 0x32
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f006 fc61 	bl	8009160 <memset>

	ssd1306_UpdateScreen();
 800289e:	f001 fc7d 	bl	800419c <ssd1306_UpdateScreen>
	char sign = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	do                                                            // Whaite for choise
	{
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80028a8:	f001 f8aa 	bl	8003a00 <read_one_sign_from_keyboard>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

		// For debug ///////////
		//sign = '1';
		/////////////////////

		if(sign == '1')    // If select GSM mode
 80028b2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028b6:	2b31      	cmp	r3, #49	; 0x31
 80028b8:	d102      	bne.n	80028c0 <main+0x27c>
		{
			GPS_MODE = true;
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <main+0x390>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
		}
		if(sign == '2')    // If select GPS mode
 80028c0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028c4:	2b32      	cmp	r3, #50	; 0x32
 80028c6:	d102      	bne.n	80028ce <main+0x28a>
		{
			GSM_MODE = true;
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <main+0x394>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
		}
		if(sign == '3')    // If select GPS mode
 80028ce:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028d2:	2b33      	cmp	r3, #51	; 0x33
 80028d4:	d102      	bne.n	80028dc <main+0x298>
		{
			FINGERPRINT_MODE = true;
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <main+0x398>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
		}
		if(sign == '4')    // If select GPS mode
 80028dc:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028e0:	2b34      	cmp	r3, #52	; 0x34
 80028e2:	d102      	bne.n	80028ea <main+0x2a6>
		{
			SENSORS_MODE = true;
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <main+0x39c>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
		}

		ssd1306_UpdateScreen();
 80028ea:	f001 fc57 	bl	800419c <ssd1306_UpdateScreen>
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '4'));     // Select one from 3 modes
 80028ee:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028f2:	2b31      	cmp	r3, #49	; 0x31
 80028f4:	f000 8124 	beq.w	8002b40 <main+0x4fc>
 80028f8:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80028fc:	2b32      	cmp	r3, #50	; 0x32
 80028fe:	f000 811f 	beq.w	8002b40 <main+0x4fc>
 8002902:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002906:	2b33      	cmp	r3, #51	; 0x33
 8002908:	f000 811a 	beq.w	8002b40 <main+0x4fc>
 800290c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002910:	2b34      	cmp	r3, #52	; 0x34
 8002912:	d1c9      	bne.n	80028a8 <main+0x264>

    // MAIN MODES

	while(GSM_MODE && (EXIT == 0))  /////////////////////////////////////////////////////////////////////
 8002914:	e114      	b.n	8002b40 <main+0x4fc>
	{
		ssd1306_Fill(Black);
 8002916:	2000      	movs	r0, #0
 8002918:	f001 fc1e 	bl	8004158 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 800291c:	f001 fc3e 	bl	800419c <ssd1306_UpdateScreen>
		// Print mode in head
		sprintf(str,"%s", "2.GSM: waiting...");
 8002920:	463b      	mov	r3, r7
 8002922:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <main+0x3a0>)
 8002924:	461c      	mov	r4, r3
 8002926:	4615      	mov	r5, r2
 8002928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8002930:	2100      	movs	r1, #0
 8002932:	2000      	movs	r0, #0
 8002934:	f001 fd68 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8002938:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <main+0x37c>)
 800293a:	4638      	mov	r0, r7
 800293c:	2301      	movs	r3, #1
 800293e:	ca06      	ldmia	r2, {r1, r2}
 8002940:	f001 fd3c 	bl	80043bc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002944:	f001 fc2a 	bl	800419c <ssd1306_UpdateScreen>


		// Init GSM module////////////////////////////
		init_GSM_uart_comunication();
 8002948:	f7ff fa2a 	bl	8001da0 <init_GSM_uart_comunication>
		if(init_gsm_module() == HAL_OK)
 800294c:	f7ff fa3a 	bl	8001dc4 <init_gsm_module>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d14e      	bne.n	80029f4 <main+0x3b0>
		{
			// init OK
			GSM_INIT = 1;
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <main+0x3a4>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]

			sprintf(str,"%s", "                    ");
 800295c:	463b      	mov	r3, r7
 800295e:	4a23      	ldr	r2, [pc, #140]	; (80029ec <main+0x3a8>)
 8002960:	461c      	mov	r4, r3
 8002962:	4615      	mov	r5, r2
 8002964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002968:	e895 0003 	ldmia.w	r5, {r0, r1}
 800296c:	6020      	str	r0, [r4, #0]
 800296e:	3404      	adds	r4, #4
 8002970:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(00, 00);
 8002972:	2100      	movs	r1, #0
 8002974:	2000      	movs	r0, #0
 8002976:	f001 fd47 	bl	8004408 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 800297a:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <main+0x37c>)
 800297c:	4638      	mov	r0, r7
 800297e:	2301      	movs	r3, #1
 8002980:	ca06      	ldmia	r2, {r1, r2}
 8002982:	f001 fd1b 	bl	80043bc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002986:	f001 fc09 	bl	800419c <ssd1306_UpdateScreen>

			sprintf(str,"%s", "2.GSM: OK");
 800298a:	463b      	mov	r3, r7
 800298c:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <main+0x3ac>)
 800298e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002990:	c303      	stmia	r3!, {r0, r1}
 8002992:	801a      	strh	r2, [r3, #0]
			ssd1306_SetCursor(00, 00);
 8002994:	2100      	movs	r1, #0
 8002996:	2000      	movs	r0, #0
 8002998:	f001 fd36 	bl	8004408 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <main+0x37c>)
 800299e:	4638      	mov	r0, r7
 80029a0:	2301      	movs	r3, #1
 80029a2:	ca06      	ldmia	r2, {r1, r2}
 80029a4:	f001 fd0a 	bl	80043bc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80029a8:	f001 fbf8 	bl	800419c <ssd1306_UpdateScreen>
 80029ac:	e04f      	b.n	8002a4e <main+0x40a>
 80029ae:	bf00      	nop
 80029b0:	200008dc 	.word	0x200008dc
 80029b4:	200007c8 	.word	0x200007c8
 80029b8:	2000089c 	.word	0x2000089c
 80029bc:	0800c6bc 	.word	0x0800c6bc
 80029c0:	20000030 	.word	0x20000030
 80029c4:	0800c6cc 	.word	0x0800c6cc
 80029c8:	0800c6d8 	.word	0x0800c6d8
 80029cc:	0800c6e4 	.word	0x0800c6e4
 80029d0:	0800c6f8 	.word	0x0800c6f8
 80029d4:	20000285 	.word	0x20000285
 80029d8:	20000284 	.word	0x20000284
 80029dc:	20000286 	.word	0x20000286
 80029e0:	20000287 	.word	0x20000287
 80029e4:	0800c708 	.word	0x0800c708
 80029e8:	2000023d 	.word	0x2000023d
 80029ec:	0800c71c 	.word	0x0800c71c
 80029f0:	0800c734 	.word	0x0800c734
		}
		else
		{
			// GSM didn't init
			GSM_INIT = 0;
 80029f4:	4bbb      	ldr	r3, [pc, #748]	; (8002ce4 <main+0x6a0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]

			sprintf(str,"%s", "                    ");
 80029fa:	463b      	mov	r3, r7
 80029fc:	4aba      	ldr	r2, [pc, #744]	; (8002ce8 <main+0x6a4>)
 80029fe:	461c      	mov	r4, r3
 8002a00:	4615      	mov	r5, r2
 8002a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a0a:	6020      	str	r0, [r4, #0]
 8002a0c:	3404      	adds	r4, #4
 8002a0e:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(00, 00);
 8002a10:	2100      	movs	r1, #0
 8002a12:	2000      	movs	r0, #0
 8002a14:	f001 fcf8 	bl	8004408 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 8002a18:	4ab4      	ldr	r2, [pc, #720]	; (8002cec <main+0x6a8>)
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	ca06      	ldmia	r2, {r1, r2}
 8002a20:	f001 fccc 	bl	80043bc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002a24:	f001 fbba 	bl	800419c <ssd1306_UpdateScreen>

			sprintf(str,"%s", "2.GSM: ERROR");
 8002a28:	463b      	mov	r3, r7
 8002a2a:	4ab1      	ldr	r2, [pc, #708]	; (8002cf0 <main+0x6ac>)
 8002a2c:	461c      	mov	r4, r3
 8002a2e:	4613      	mov	r3, r2
 8002a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a32:	c407      	stmia	r4!, {r0, r1, r2}
 8002a34:	7023      	strb	r3, [r4, #0]
			ssd1306_SetCursor(00, 00);
 8002a36:	2100      	movs	r1, #0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f001 fce5 	bl	8004408 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 8002a3e:	4aab      	ldr	r2, [pc, #684]	; (8002cec <main+0x6a8>)
 8002a40:	4638      	mov	r0, r7
 8002a42:	2301      	movs	r3, #1
 8002a44:	ca06      	ldmia	r2, {r1, r2}
 8002a46:	f001 fcb9 	bl	80043bc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002a4a:	f001 fba7 	bl	800419c <ssd1306_UpdateScreen>
		}
		// END INIT GSM MODULE  //////////////////////////

        if(GSM_INIT == 1)
 8002a4e:	4ba5      	ldr	r3, [pc, #660]	; (8002ce4 <main+0x6a0>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d15c      	bne.n	8002b10 <main+0x4cc>
        {
			// Print GSM menu
			sprintf(str,"%s", "1.For make CALL");
 8002a56:	463b      	mov	r3, r7
 8002a58:	4aa6      	ldr	r2, [pc, #664]	; (8002cf4 <main+0x6b0>)
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ssd1306_SetCursor(00, 16);
 8002a64:	2110      	movs	r1, #16
 8002a66:	2000      	movs	r0, #0
 8002a68:	f001 fcce 	bl	8004408 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 8002a6c:	4a9f      	ldr	r2, [pc, #636]	; (8002cec <main+0x6a8>)
 8002a6e:	4638      	mov	r0, r7
 8002a70:	2301      	movs	r3, #1
 8002a72:	ca06      	ldmia	r2, {r1, r2}
 8002a74:	f001 fca2 	bl	80043bc <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 8002a78:	463b      	mov	r3, r7
 8002a7a:	2232      	movs	r2, #50	; 0x32
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fb6e 	bl	8009160 <memset>

			sprintf(str,"%s", "2.For send SMS");
 8002a84:	463b      	mov	r3, r7
 8002a86:	4a9c      	ldr	r2, [pc, #624]	; (8002cf8 <main+0x6b4>)
 8002a88:	461c      	mov	r4, r3
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8e:	c407      	stmia	r4!, {r0, r1, r2}
 8002a90:	8023      	strh	r3, [r4, #0]
 8002a92:	3402      	adds	r4, #2
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	7023      	strb	r3, [r4, #0]
			ssd1306_SetCursor(00, 26);
 8002a98:	211a      	movs	r1, #26
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f001 fcb4 	bl	8004408 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 8002aa0:	4a92      	ldr	r2, [pc, #584]	; (8002cec <main+0x6a8>)
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	ca06      	ldmia	r2, {r1, r2}
 8002aa8:	f001 fc88 	bl	80043bc <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 8002aac:	463b      	mov	r3, r7
 8002aae:	2232      	movs	r2, #50	; 0x32
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f006 fb54 	bl	8009160 <memset>

			ssd1306_UpdateScreen();
 8002ab8:	f001 fb70 	bl	800419c <ssd1306_UpdateScreen>
			//
			//      2. Збити вихідний звінок
			//
			do                                                            // Whaite for choise
			{
				sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002abc:	f000 ffa0 	bl	8003a00 <read_one_sign_from_keyboard>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
				if(sign == '2')    // If select SMS mode
				{


				}
				if(sign == '*')    // If select EXIT  // Exit in main menu
 8002ac6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002aca:	2b2a      	cmp	r3, #42	; 0x2a
 8002acc:	d113      	bne.n	8002af6 <main+0x4b2>
				{
					EXIT = 1;      // Flag_fro exit from there
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
					// Clear all OLED
					ssd1306_Fill(Black);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f001 fb3f 	bl	8004158 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002ada:	f001 fb5f 	bl	800419c <ssd1306_UpdateScreen>

					GPS_MODE = false;
 8002ade:	4b87      	ldr	r3, [pc, #540]	; (8002cfc <main+0x6b8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
					GSM_MODE = false;
 8002ae4:	4b86      	ldr	r3, [pc, #536]	; (8002d00 <main+0x6bc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
					FINGERPRINT_MODE = false;
 8002aea:	4b86      	ldr	r3, [pc, #536]	; (8002d04 <main+0x6c0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
					SENSORS_MODE = false;
 8002af0:	4b85      	ldr	r3, [pc, #532]	; (8002d08 <main+0x6c4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
				}

				}while ((sign != '1') && (sign != '2') && (sign != '*') );     // Select one from 3 modes
 8002af6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002afa:	2b31      	cmp	r3, #49	; 0x31
 8002afc:	d020      	beq.n	8002b40 <main+0x4fc>
 8002afe:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002b02:	2b32      	cmp	r3, #50	; 0x32
 8002b04:	d01c      	beq.n	8002b40 <main+0x4fc>
 8002b06:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0c:	d1d6      	bne.n	8002abc <main+0x478>
 8002b0e:	e017      	b.n	8002b40 <main+0x4fc>
			}
        else
        {
        	HAL_Delay(2000);
 8002b10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b14:	f002 f844 	bl	8004ba0 <HAL_Delay>

        	// Exit from GSM menu
        	EXIT = 1;      // Flag_fro exit from there
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        	// Clear all OLED
        	ssd1306_Fill(Black);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f001 fb1a 	bl	8004158 <ssd1306_Fill>
        	ssd1306_UpdateScreen();
 8002b24:	f001 fb3a 	bl	800419c <ssd1306_UpdateScreen>

        	GPS_MODE = false;
 8002b28:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <main+0x6b8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
        	GSM_MODE = false;
 8002b2e:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <main+0x6bc>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
        	FINGERPRINT_MODE = false;
 8002b34:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <main+0x6c0>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
        	SENSORS_MODE = false;
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <main+0x6c4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
	while(GSM_MODE && (EXIT == 0))  /////////////////////////////////////////////////////////////////////
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <main+0x6bc>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80c2 	beq.w	8002cce <main+0x68a>
 8002b4a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f43f aee1 	beq.w	8002916 <main+0x2d2>
        }

	}
	while (GPS_MODE && (EXIT == 0)) /////////////////////////////////////////////////////////////////////
 8002b54:	e0bb      	b.n	8002cce <main+0x68a>
	{
		ssd1306_Fill(Black);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f001 fafe 	bl	8004158 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8002b5c:	f001 fb1e 	bl	800419c <ssd1306_UpdateScreen>
		// GPS code place where
		// Print mode in head
		memset(str, 0 , sizeof(str));
 8002b60:	463b      	mov	r3, r7
 8002b62:	2232      	movs	r2, #50	; 0x32
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f006 fafa 	bl	8009160 <memset>
		sprintf(str,"%s", "1.GPS: waiting...");
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <main+0x6c8>)
 8002b70:	461c      	mov	r4, r3
 8002b72:	4615      	mov	r5, r2
 8002b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f001 fc42 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8002b84:	4a59      	ldr	r2, [pc, #356]	; (8002cec <main+0x6a8>)
 8002b86:	4638      	mov	r0, r7
 8002b88:	2301      	movs	r3, #1
 8002b8a:	ca06      	ldmia	r2, {r1, r2}
 8002b8c:	f001 fc16 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8002b90:	463b      	mov	r3, r7
 8002b92:	2232      	movs	r2, #50	; 0x32
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f006 fae2 	bl	8009160 <memset>

		ssd1306_UpdateScreen();
 8002b9c:	f001 fafe 	bl	800419c <ssd1306_UpdateScreen>

		uint8_t broken_packet_counter = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e

		do                                                            // Whaite for choise
		{
			// Place for parsing GPS DATA

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002ba6:	f000 ff2b 	bl	8003a00 <read_one_sign_from_keyboard>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

			if(sign == '*')    // If select EXIT  // Exit in main menu
 8002bb0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb6:	d114      	bne.n	8002be2 <main+0x59e>
			{
				EXIT = 1;      // Flag_fro exit from there
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
				// Clear all OLED
				ssd1306_Fill(Black);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f001 faca 	bl	8004158 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8002bc4:	f001 faea 	bl	800419c <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <main+0x6b8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 8002bce:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <main+0x6bc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <main+0x6c0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8002bda:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <main+0x6c4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e070      	b.n	8002cc4 <main+0x680>
			}
			else
			{
				// Parsing data form GPS
				parsing_GPS(GPS_buff, 512);
 8002be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff f82e 	bl	8001c4c <parsing_GPS>
				int GPS_SELECTED = 1;					// Flag for print GPS data on OLED
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
				OLED_prinr_all_data(GPS_SELECTED);
 8002bf6:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8002bfa:	f001 f84a 	bl	8003c92 <OLED_prinr_all_data>

				if(GPGGA_data_is_ready == 1)
 8002bfe:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <main+0x6cc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d127      	bne.n	8002c56 <main+0x612>
				{
					memset(str, 0 , sizeof(str));
 8002c06:	463b      	mov	r3, r7
 8002c08:	2232      	movs	r2, #50	; 0x32
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f006 faa7 	bl	8009160 <memset>
					sprintf(str,"%s", "1.GPS: OK            ");
 8002c12:	463b      	mov	r3, r7
 8002c14:	4a3f      	ldr	r2, [pc, #252]	; (8002d14 <main+0x6d0>)
 8002c16:	461c      	mov	r4, r3
 8002c18:	4615      	mov	r5, r2
 8002c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c22:	6020      	str	r0, [r4, #0]
 8002c24:	3404      	adds	r4, #4
 8002c26:	8021      	strh	r1, [r4, #0]
					ssd1306_SetCursor(00, 00);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f001 fbec 	bl	8004408 <ssd1306_SetCursor>
					ssd1306_WriteString(str, Font_7x10, White);
 8002c30:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <main+0x6a8>)
 8002c32:	4638      	mov	r0, r7
 8002c34:	2301      	movs	r3, #1
 8002c36:	ca06      	ldmia	r2, {r1, r2}
 8002c38:	f001 fbc0 	bl	80043bc <ssd1306_WriteString>
					memset(str, 0 , sizeof(str));
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	2232      	movs	r2, #50	; 0x32
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f006 fa8c 	bl	8009160 <memset>

					//receive_gps_signal = 0;
					broken_packet_counter = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
					GPGGA_data_is_ready = 0;
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <main+0x6cc>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e034      	b.n	8002cc0 <main+0x67c>
				}
				else
				{
					broken_packet_counter ++;
 8002c56:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
					//HAL_Delay(500);
					if((GPGGA_data_is_ready != 1) && (broken_packet_counter >= 20))
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <main+0x6cc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d02b      	beq.n	8002cc0 <main+0x67c>
 8002c68:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8002c6c:	2b13      	cmp	r3, #19
 8002c6e:	d927      	bls.n	8002cc0 <main+0x67c>
					{

							GPGGA_data_is_ready = 0;
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <main+0x6cc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
							broken_packet_counter = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e

							memset(str, 0 , sizeof(str));
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	2232      	movs	r2, #50	; 0x32
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f006 fa6c 	bl	8009160 <memset>
							sprintf(str,"%s", "1.GPS: NO SIGNAL  ");
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <main+0x6d4>)
 8002c8c:	461c      	mov	r4, r3
 8002c8e:	4615      	mov	r5, r2
 8002c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	8022      	strh	r2, [r4, #0]
 8002c9a:	3402      	adds	r4, #2
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	7023      	strb	r3, [r4, #0]
							ssd1306_SetCursor(00, 00);
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f001 fbb0 	bl	8004408 <ssd1306_SetCursor>
							ssd1306_WriteString(str, Font_7x10, White);
 8002ca8:	4a10      	ldr	r2, [pc, #64]	; (8002cec <main+0x6a8>)
 8002caa:	4638      	mov	r0, r7
 8002cac:	2301      	movs	r3, #1
 8002cae:	ca06      	ldmia	r2, {r1, r2}
 8002cb0:	f001 fb84 	bl	80043bc <ssd1306_WriteString>
							memset(str, 0 , sizeof(str));
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	2232      	movs	r2, #50	; 0x32
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f006 fa50 	bl	8009160 <memset>


					 }
				}

				ssd1306_UpdateScreen();
 8002cc0:	f001 fa6c 	bl	800419c <ssd1306_UpdateScreen>
			}
		}while ( (sign != '*'));     // Select one from 3 modes
 8002cc4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cca:	f47f af6c 	bne.w	8002ba6 <main+0x562>
	while (GPS_MODE && (EXIT == 0)) /////////////////////////////////////////////////////////////////////
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <main+0x6b8>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 81a6 	beq.w	8003024 <main+0x9e0>
 8002cd8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f43f af3a 	beq.w	8002b56 <main+0x512>
	}

	while (FINGERPRINT_MODE && (EXIT == 0)) /////////////////////////////////////////////////////////////////////
 8002ce2:	e19f      	b.n	8003024 <main+0x9e0>
 8002ce4:	2000023d 	.word	0x2000023d
 8002ce8:	0800c71c 	.word	0x0800c71c
 8002cec:	20000030 	.word	0x20000030
 8002cf0:	0800c740 	.word	0x0800c740
 8002cf4:	0800c750 	.word	0x0800c750
 8002cf8:	0800c760 	.word	0x0800c760
 8002cfc:	20000285 	.word	0x20000285
 8002d00:	20000284 	.word	0x20000284
 8002d04:	20000286 	.word	0x20000286
 8002d08:	20000287 	.word	0x20000287
 8002d0c:	0800c770 	.word	0x0800c770
 8002d10:	20000238 	.word	0x20000238
 8002d14:	0800c784 	.word	0x0800c784
 8002d18:	0800c79c 	.word	0x0800c79c
	{
		ssd1306_Fill(Black);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f001 fa1b 	bl	8004158 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8002d22:	f001 fa3b 	bl	800419c <ssd1306_UpdateScreen>
		// Fingerprint code place where
		// Print mode in head
		memset(str, 0 , sizeof(str));
 8002d26:	463b      	mov	r3, r7
 8002d28:	2232      	movs	r2, #50	; 0x32
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f006 fa17 	bl	8009160 <memset>
		sprintf(str,"%s", "3.FINGERPRINT");
 8002d32:	463b      	mov	r3, r7
 8002d34:	4ac1      	ldr	r2, [pc, #772]	; (800303c <main+0x9f8>)
 8002d36:	461c      	mov	r4, r3
 8002d38:	4613      	mov	r3, r2
 8002d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d3c:	c407      	stmia	r4!, {r0, r1, r2}
 8002d3e:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8002d40:	2100      	movs	r1, #0
 8002d42:	2000      	movs	r0, #0
 8002d44:	f001 fb60 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8002d48:	4abd      	ldr	r2, [pc, #756]	; (8003040 <main+0x9fc>)
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	ca06      	ldmia	r2, {r1, r2}
 8002d50:	f001 fb34 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8002d54:	463b      	mov	r3, r7
 8002d56:	2232      	movs	r2, #50	; 0x32
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f006 fa00 	bl	8009160 <memset>

		// Print meu fingerprint
		memset(str, 0 , sizeof(str));
 8002d60:	463b      	mov	r3, r7
 8002d62:	2232      	movs	r2, #50	; 0x32
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f006 f9fa 	bl	8009160 <memset>
		sprintf(str,"%s", "1. function 1");
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	4ab5      	ldr	r2, [pc, #724]	; (8003044 <main+0xa00>)
 8002d70:	461c      	mov	r4, r3
 8002d72:	4613      	mov	r3, r2
 8002d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d76:	c407      	stmia	r4!, {r0, r1, r2}
 8002d78:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 8002d7a:	2110      	movs	r1, #16
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f001 fb43 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8002d82:	4aaf      	ldr	r2, [pc, #700]	; (8003040 <main+0x9fc>)
 8002d84:	4638      	mov	r0, r7
 8002d86:	2301      	movs	r3, #1
 8002d88:	ca06      	ldmia	r2, {r1, r2}
 8002d8a:	f001 fb17 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2232      	movs	r2, #50	; 0x32
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f006 f9e3 	bl	8009160 <memset>

		memset(str, 0 , sizeof(str));
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	2232      	movs	r2, #50	; 0x32
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f006 f9dd 	bl	8009160 <memset>
		sprintf(str,"%s", "2. function 2");
 8002da6:	463b      	mov	r3, r7
 8002da8:	4aa7      	ldr	r2, [pc, #668]	; (8003048 <main+0xa04>)
 8002daa:	461c      	mov	r4, r3
 8002dac:	4613      	mov	r3, r2
 8002dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002db0:	c407      	stmia	r4!, {r0, r1, r2}
 8002db2:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8002db4:	211a      	movs	r1, #26
 8002db6:	2000      	movs	r0, #0
 8002db8:	f001 fb26 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8002dbc:	4aa0      	ldr	r2, [pc, #640]	; (8003040 <main+0x9fc>)
 8002dbe:	4638      	mov	r0, r7
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	ca06      	ldmia	r2, {r1, r2}
 8002dc4:	f001 fafa 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8002dc8:	463b      	mov	r3, r7
 8002dca:	2232      	movs	r2, #50	; 0x32
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f006 f9c6 	bl	8009160 <memset>

		memset(str, 0 , sizeof(str));
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	2232      	movs	r2, #50	; 0x32
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f006 f9c0 	bl	8009160 <memset>
		sprintf(str,"%s", "3. function 3");
 8002de0:	463b      	mov	r3, r7
 8002de2:	4a9a      	ldr	r2, [pc, #616]	; (800304c <main+0xa08>)
 8002de4:	461c      	mov	r4, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dea:	c407      	stmia	r4!, {r0, r1, r2}
 8002dec:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8002dee:	2124      	movs	r1, #36	; 0x24
 8002df0:	2000      	movs	r0, #0
 8002df2:	f001 fb09 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8002df6:	4a92      	ldr	r2, [pc, #584]	; (8003040 <main+0x9fc>)
 8002df8:	4638      	mov	r0, r7
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	ca06      	ldmia	r2, {r1, r2}
 8002dfe:	f001 fadd 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8002e02:	463b      	mov	r3, r7
 8002e04:	2232      	movs	r2, #50	; 0x32
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 f9a9 	bl	8009160 <memset>

		ssd1306_UpdateScreen();
 8002e0e:	f001 f9c5 	bl	800419c <ssd1306_UpdateScreen>

		do                                                            // Whaite for choise
		{
			// Place for sensors code

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002e12:	f000 fdf5 	bl	8003a00 <read_one_sign_from_keyboard>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		    if(sign == '1')
 8002e1c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002e20:	2b31      	cmp	r3, #49	; 0x31
 8002e22:	d144      	bne.n	8002eae <main+0x86a>
		    {
		    	// Clear all OLED
		        ssd1306_Fill(Black);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f001 f997 	bl	8004158 <ssd1306_Fill>
		        ssd1306_UpdateScreen();
 8002e2a:	f001 f9b7 	bl	800419c <ssd1306_UpdateScreen>
		        // Print mode in head

		        // Ptint selected menu
		        memset(str, 0 , sizeof(str));
 8002e2e:	463b      	mov	r3, r7
 8002e30:	2232      	movs	r2, #50	; 0x32
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f006 f993 	bl	8009160 <memset>
		        sprintf(str,"%s", "1. function 1");
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	4a81      	ldr	r2, [pc, #516]	; (8003044 <main+0xa00>)
 8002e3e:	461c      	mov	r4, r3
 8002e40:	4613      	mov	r3, r2
 8002e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e44:	c407      	stmia	r4!, {r0, r1, r2}
 8002e46:	8023      	strh	r3, [r4, #0]
		        ssd1306_SetCursor(00, 00);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f001 fadc 	bl	8004408 <ssd1306_SetCursor>
		        ssd1306_WriteString(str, Font_7x10, White);
 8002e50:	4a7b      	ldr	r2, [pc, #492]	; (8003040 <main+0x9fc>)
 8002e52:	4638      	mov	r0, r7
 8002e54:	2301      	movs	r3, #1
 8002e56:	ca06      	ldmia	r2, {r1, r2}
 8002e58:	f001 fab0 	bl	80043bc <ssd1306_WriteString>
		        memset(str, 0 , sizeof(str));
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	2232      	movs	r2, #50	; 0x32
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f006 f97c 	bl	8009160 <memset>

		        ssd1306_UpdateScreen();
 8002e68:	f001 f998 	bl	800419c <ssd1306_UpdateScreen>

		        do                                                            // Whaite for choise
		        {
		            // Place for code function 1

		            sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002e6c:	f000 fdc8 	bl	8003a00 <read_one_sign_from_keyboard>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

		            if(sign == '*')    // If select EXIT  // Exit in main menu
 8002e76:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7c:	d113      	bne.n	8002ea6 <main+0x862>
		            {
		            	EXIT = 1;      // Flag_fro exit from there
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		            	// Clear all OLED
		            	ssd1306_Fill(Black);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f001 f967 	bl	8004158 <ssd1306_Fill>
		            	ssd1306_UpdateScreen();
 8002e8a:	f001 f987 	bl	800419c <ssd1306_UpdateScreen>

		            	GPS_MODE = false;
 8002e8e:	4b70      	ldr	r3, [pc, #448]	; (8003050 <main+0xa0c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
		            	GSM_MODE = false;
 8002e94:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <main+0xa10>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
		            	FINGERPRINT_MODE = false;
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <main+0xa14>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
		            	SENSORS_MODE = false;
 8002ea0:	4b6e      	ldr	r3, [pc, #440]	; (800305c <main+0xa18>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
		            }
		         }while (sign != '*');     // Select EXIT
 8002ea6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8002eac:	d1de      	bne.n	8002e6c <main+0x828>
		     }

		     if(sign == '2')
 8002eae:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002eb2:	2b32      	cmp	r3, #50	; 0x32
 8002eb4:	d144      	bne.n	8002f40 <main+0x8fc>
		     {
		        // Clear all OLED
		        ssd1306_Fill(Black);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f001 f94e 	bl	8004158 <ssd1306_Fill>
		        ssd1306_UpdateScreen();
 8002ebc:	f001 f96e 	bl	800419c <ssd1306_UpdateScreen>
		        // Print mode in head

		        // Ptint selected menu
		        memset(str, 0 , sizeof(str));
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	2232      	movs	r2, #50	; 0x32
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f006 f94a 	bl	8009160 <memset>
		        sprintf(str,"%s", "1. function 2");
 8002ecc:	463b      	mov	r3, r7
 8002ece:	4a64      	ldr	r2, [pc, #400]	; (8003060 <main+0xa1c>)
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed6:	c407      	stmia	r4!, {r0, r1, r2}
 8002ed8:	8023      	strh	r3, [r4, #0]
		        ssd1306_SetCursor(00, 00);
 8002eda:	2100      	movs	r1, #0
 8002edc:	2000      	movs	r0, #0
 8002ede:	f001 fa93 	bl	8004408 <ssd1306_SetCursor>
		        ssd1306_WriteString(str, Font_7x10, White);
 8002ee2:	4a57      	ldr	r2, [pc, #348]	; (8003040 <main+0x9fc>)
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	ca06      	ldmia	r2, {r1, r2}
 8002eea:	f001 fa67 	bl	80043bc <ssd1306_WriteString>
		        memset(str, 0 , sizeof(str));
 8002eee:	463b      	mov	r3, r7
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f006 f933 	bl	8009160 <memset>

		        ssd1306_UpdateScreen();
 8002efa:	f001 f94f 	bl	800419c <ssd1306_UpdateScreen>

		        do                                                            // Whaite for choise
		        {
		        	// Place for code function 2

		        	sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002efe:	f000 fd7f 	bl	8003a00 <read_one_sign_from_keyboard>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

		            if(sign == '*')    // If select EXIT  // Exit in main menu
 8002f08:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f0e:	d113      	bne.n	8002f38 <main+0x8f4>
		            {
		             	EXIT = 1;      // Flag_fro exit from there
 8002f10:	2301      	movs	r3, #1
 8002f12:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		                // Clear all OLED
		                ssd1306_Fill(Black);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f001 f91e 	bl	8004158 <ssd1306_Fill>
		                ssd1306_UpdateScreen();
 8002f1c:	f001 f93e 	bl	800419c <ssd1306_UpdateScreen>

		                GPS_MODE = false;
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <main+0xa0c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
		                GSM_MODE = false;
 8002f26:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <main+0xa10>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
		                FINGERPRINT_MODE = false;
 8002f2c:	4b4a      	ldr	r3, [pc, #296]	; (8003058 <main+0xa14>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
		                SENSORS_MODE = false;
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <main+0xa18>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
		            }
		         }while (sign != '*');     // Select EXIT
 8002f38:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3e:	d1de      	bne.n	8002efe <main+0x8ba>
		      }

		      if(sign == '3')
 8002f40:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002f44:	2b33      	cmp	r3, #51	; 0x33
 8002f46:	d144      	bne.n	8002fd2 <main+0x98e>
		      {
		    	  // Clear all OLED
		          ssd1306_Fill(Black);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f001 f905 	bl	8004158 <ssd1306_Fill>
		          ssd1306_UpdateScreen();
 8002f4e:	f001 f925 	bl	800419c <ssd1306_UpdateScreen>
		          // Print mode in head

		          // Ptint selected menu
		          memset(str, 0 , sizeof(str));
 8002f52:	463b      	mov	r3, r7
 8002f54:	2232      	movs	r2, #50	; 0x32
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 f901 	bl	8009160 <memset>
		          sprintf(str,"%s", "1. function 3");
 8002f5e:	463b      	mov	r3, r7
 8002f60:	4a40      	ldr	r2, [pc, #256]	; (8003064 <main+0xa20>)
 8002f62:	461c      	mov	r4, r3
 8002f64:	4613      	mov	r3, r2
 8002f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f68:	c407      	stmia	r4!, {r0, r1, r2}
 8002f6a:	8023      	strh	r3, [r4, #0]
		          ssd1306_SetCursor(00, 00);
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f001 fa4a 	bl	8004408 <ssd1306_SetCursor>
		          ssd1306_WriteString(str, Font_7x10, White);
 8002f74:	4a32      	ldr	r2, [pc, #200]	; (8003040 <main+0x9fc>)
 8002f76:	4638      	mov	r0, r7
 8002f78:	2301      	movs	r3, #1
 8002f7a:	ca06      	ldmia	r2, {r1, r2}
 8002f7c:	f001 fa1e 	bl	80043bc <ssd1306_WriteString>
		          memset(str, 0 , sizeof(str));
 8002f80:	463b      	mov	r3, r7
 8002f82:	2232      	movs	r2, #50	; 0x32
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 f8ea 	bl	8009160 <memset>

		          ssd1306_UpdateScreen();
 8002f8c:	f001 f906 	bl	800419c <ssd1306_UpdateScreen>

		          do                                                            // Whaite for choise
		          {
		        	  // Place for code function 3

		               sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002f90:	f000 fd36 	bl	8003a00 <read_one_sign_from_keyboard>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

		               if(sign == '*')    // If select EXIT  // Exit in main menu
 8002f9a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa0:	d113      	bne.n	8002fca <main+0x986>
		               {
		                   EXIT = 1;      // Flag_fro exit from there
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		                   // Clear all OLED
		                   ssd1306_Fill(Black);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f001 f8d5 	bl	8004158 <ssd1306_Fill>
		                   ssd1306_UpdateScreen();
 8002fae:	f001 f8f5 	bl	800419c <ssd1306_UpdateScreen>

		                   GPS_MODE = false;
 8002fb2:	4b27      	ldr	r3, [pc, #156]	; (8003050 <main+0xa0c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
		                   GSM_MODE = false;
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <main+0xa10>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
		                   FINGERPRINT_MODE = false;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <main+0xa14>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
		                   SENSORS_MODE = false;
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <main+0xa18>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
		                }
		           }while (sign != '*');     // Select EXIT
 8002fca:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002fce:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd0:	d1de      	bne.n	8002f90 <main+0x94c>
		       }

			   if(sign == '*')    // If select EXIT  // Exit in main menu
 8002fd2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd8:	d113      	bne.n	8003002 <main+0x9be>
			   {
				   EXIT = 1;      // Flag_fro exit from there
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
				    // Clear all OLED
					ssd1306_Fill(Black);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f001 f8b9 	bl	8004158 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8002fe6:	f001 f8d9 	bl	800419c <ssd1306_UpdateScreen>

					GPS_MODE = false;
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <main+0xa0c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
					GSM_MODE = false;
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <main+0xa10>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
					FINGERPRINT_MODE = false;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <main+0xa14>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
					SENSORS_MODE = false;
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <main+0xa18>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
				}
			   }while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 8003002:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003006:	2b31      	cmp	r3, #49	; 0x31
 8003008:	d00c      	beq.n	8003024 <main+0x9e0>
 800300a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800300e:	2b32      	cmp	r3, #50	; 0x32
 8003010:	d008      	beq.n	8003024 <main+0x9e0>
 8003012:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003016:	2b33      	cmp	r3, #51	; 0x33
 8003018:	d004      	beq.n	8003024 <main+0x9e0>
 800301a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800301e:	2b2a      	cmp	r3, #42	; 0x2a
 8003020:	f47f aef7 	bne.w	8002e12 <main+0x7ce>
	while (FINGERPRINT_MODE && (EXIT == 0)) /////////////////////////////////////////////////////////////////////
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <main+0xa14>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 81a9 	beq.w	8003380 <main+0xd3c>
 800302e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003032:	2b00      	cmp	r3, #0
 8003034:	f43f ae72 	beq.w	8002d1c <main+0x6d8>

	}

	while (SENSORS_MODE && (EXIT == 0))  /////////////////////////////////////////////////////////////////////
 8003038:	e1a2      	b.n	8003380 <main+0xd3c>
 800303a:	bf00      	nop
 800303c:	0800c7b0 	.word	0x0800c7b0
 8003040:	20000030 	.word	0x20000030
 8003044:	0800c7c0 	.word	0x0800c7c0
 8003048:	0800c7d0 	.word	0x0800c7d0
 800304c:	0800c7e0 	.word	0x0800c7e0
 8003050:	20000285 	.word	0x20000285
 8003054:	20000284 	.word	0x20000284
 8003058:	20000286 	.word	0x20000286
 800305c:	20000287 	.word	0x20000287
 8003060:	0800c7f0 	.word	0x0800c7f0
 8003064:	0800c800 	.word	0x0800c800
	{
		ssd1306_Fill(Black);
 8003068:	2000      	movs	r0, #0
 800306a:	f001 f875 	bl	8004158 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 800306e:	f001 f895 	bl	800419c <ssd1306_UpdateScreen>
		// Sensors code place where
		// Print mode in head
		memset(str, 0 , sizeof(str));
 8003072:	463b      	mov	r3, r7
 8003074:	2232      	movs	r2, #50	; 0x32
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f006 f871 	bl	8009160 <memset>
		sprintf(str,"%s", "4.SENSORS");
 800307e:	463b      	mov	r3, r7
 8003080:	4ac5      	ldr	r2, [pc, #788]	; (8003398 <main+0xd54>)
 8003082:	ca07      	ldmia	r2, {r0, r1, r2}
 8003084:	c303      	stmia	r3!, {r0, r1}
 8003086:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 8003088:	2100      	movs	r1, #0
 800308a:	2000      	movs	r0, #0
 800308c:	f001 f9bc 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8003090:	4ac2      	ldr	r2, [pc, #776]	; (800339c <main+0xd58>)
 8003092:	4638      	mov	r0, r7
 8003094:	2301      	movs	r3, #1
 8003096:	ca06      	ldmia	r2, {r1, r2}
 8003098:	f001 f990 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 800309c:	463b      	mov	r3, r7
 800309e:	2232      	movs	r2, #50	; 0x32
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f006 f85c 	bl	8009160 <memset>

		// Print meu fingerprint
		memset(str, 0 , sizeof(str));
 80030a8:	463b      	mov	r3, r7
 80030aa:	2232      	movs	r2, #50	; 0x32
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f006 f856 	bl	8009160 <memset>
		sprintf(str,"%s", "1. Run all sensors");
 80030b4:	463b      	mov	r3, r7
 80030b6:	4aba      	ldr	r2, [pc, #744]	; (80033a0 <main+0xd5c>)
 80030b8:	461c      	mov	r4, r3
 80030ba:	4615      	mov	r5, r2
 80030bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	8022      	strh	r2, [r4, #0]
 80030c6:	3402      	adds	r4, #2
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 80030cc:	2110      	movs	r1, #16
 80030ce:	2000      	movs	r0, #0
 80030d0:	f001 f99a 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80030d4:	4ab1      	ldr	r2, [pc, #708]	; (800339c <main+0xd58>)
 80030d6:	4638      	mov	r0, r7
 80030d8:	2301      	movs	r3, #1
 80030da:	ca06      	ldmia	r2, {r1, r2}
 80030dc:	f001 f96e 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 80030e0:	463b      	mov	r3, r7
 80030e2:	2232      	movs	r2, #50	; 0x32
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 f83a 	bl	8009160 <memset>

		memset(str, 0 , sizeof(str));
 80030ec:	463b      	mov	r3, r7
 80030ee:	2232      	movs	r2, #50	; 0x32
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f006 f834 	bl	8009160 <memset>
		sprintf(str,"%s", "2. function 2");
 80030f8:	463b      	mov	r3, r7
 80030fa:	4aaa      	ldr	r2, [pc, #680]	; (80033a4 <main+0xd60>)
 80030fc:	461c      	mov	r4, r3
 80030fe:	4613      	mov	r3, r2
 8003100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003102:	c407      	stmia	r4!, {r0, r1, r2}
 8003104:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8003106:	211a      	movs	r1, #26
 8003108:	2000      	movs	r0, #0
 800310a:	f001 f97d 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 800310e:	4aa3      	ldr	r2, [pc, #652]	; (800339c <main+0xd58>)
 8003110:	4638      	mov	r0, r7
 8003112:	2301      	movs	r3, #1
 8003114:	ca06      	ldmia	r2, {r1, r2}
 8003116:	f001 f951 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 800311a:	463b      	mov	r3, r7
 800311c:	2232      	movs	r2, #50	; 0x32
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f006 f81d 	bl	8009160 <memset>

		memset(str, 0 , sizeof(str));
 8003126:	463b      	mov	r3, r7
 8003128:	2232      	movs	r2, #50	; 0x32
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f006 f817 	bl	8009160 <memset>
		sprintf(str,"%s", "3. function 3");
 8003132:	463b      	mov	r3, r7
 8003134:	4a9c      	ldr	r2, [pc, #624]	; (80033a8 <main+0xd64>)
 8003136:	461c      	mov	r4, r3
 8003138:	4613      	mov	r3, r2
 800313a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800313c:	c407      	stmia	r4!, {r0, r1, r2}
 800313e:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8003140:	2124      	movs	r1, #36	; 0x24
 8003142:	2000      	movs	r0, #0
 8003144:	f001 f960 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8003148:	4a94      	ldr	r2, [pc, #592]	; (800339c <main+0xd58>)
 800314a:	4638      	mov	r0, r7
 800314c:	2301      	movs	r3, #1
 800314e:	ca06      	ldmia	r2, {r1, r2}
 8003150:	f001 f934 	bl	80043bc <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8003154:	463b      	mov	r3, r7
 8003156:	2232      	movs	r2, #50	; 0x32
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f006 f800 	bl	8009160 <memset>

		ssd1306_UpdateScreen();
 8003160:	f001 f81c 	bl	800419c <ssd1306_UpdateScreen>

		do                                                            // Whaite for choise
			{
			// Place for sensors code

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003164:	f000 fc4c 	bl	8003a00 <read_one_sign_from_keyboard>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
            if(sign == '1')
 800316e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003172:	2b31      	cmp	r3, #49	; 0x31
 8003174:	d149      	bne.n	800320a <main+0xbc6>
            {
            	// Clear all OLED
            	ssd1306_Fill(Black);
 8003176:	2000      	movs	r0, #0
 8003178:	f000 ffee 	bl	8004158 <ssd1306_Fill>
            	ssd1306_UpdateScreen();
 800317c:	f001 f80e 	bl	800419c <ssd1306_UpdateScreen>

            	// Ptint selected menu
            	memset(str, 0 , sizeof(str));
 8003180:	463b      	mov	r3, r7
 8003182:	2232      	movs	r2, #50	; 0x32
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f005 ffea 	bl	8009160 <memset>
            	sprintf(str,"%s", "1. Run all sensors");
 800318c:	463b      	mov	r3, r7
 800318e:	4a84      	ldr	r2, [pc, #528]	; (80033a0 <main+0xd5c>)
 8003190:	461c      	mov	r4, r3
 8003192:	4615      	mov	r5, r2
 8003194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	8022      	strh	r2, [r4, #0]
 800319e:	3402      	adds	r4, #2
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	7023      	strb	r3, [r4, #0]
            	ssd1306_SetCursor(00, 00);
 80031a4:	2100      	movs	r1, #0
 80031a6:	2000      	movs	r0, #0
 80031a8:	f001 f92e 	bl	8004408 <ssd1306_SetCursor>
            	ssd1306_WriteString(str, Font_7x10, White);
 80031ac:	4a7b      	ldr	r2, [pc, #492]	; (800339c <main+0xd58>)
 80031ae:	4638      	mov	r0, r7
 80031b0:	2301      	movs	r3, #1
 80031b2:	ca06      	ldmia	r2, {r1, r2}
 80031b4:	f001 f902 	bl	80043bc <ssd1306_WriteString>
            	memset(str, 0 , sizeof(str));
 80031b8:	463b      	mov	r3, r7
 80031ba:	2232      	movs	r2, #50	; 0x32
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f005 ffce 	bl	8009160 <memset>

            	ssd1306_UpdateScreen();
 80031c4:	f000 ffea 	bl	800419c <ssd1306_UpdateScreen>

            	do                                                            // Whaite for choise
            	{
            		// Place for code function 1

            		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80031c8:	f000 fc1a 	bl	8003a00 <read_one_sign_from_keyboard>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

            		if(sign == '*')    // If select EXIT  // Exit in main menu
 80031d2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80031d6:	2b2a      	cmp	r3, #42	; 0x2a
 80031d8:	d113      	bne.n	8003202 <main+0xbbe>
            		{
            			EXIT = 1;      // Flag_fro exit from there
 80031da:	2301      	movs	r3, #1
 80031dc:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
            			// Clear all OLED
            			ssd1306_Fill(Black);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 ffb9 	bl	8004158 <ssd1306_Fill>
            			ssd1306_UpdateScreen();
 80031e6:	f000 ffd9 	bl	800419c <ssd1306_UpdateScreen>

            			GPS_MODE = false;
 80031ea:	4b70      	ldr	r3, [pc, #448]	; (80033ac <main+0xd68>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
            			GSM_MODE = false;
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <main+0xd6c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
            			FINGERPRINT_MODE = false;
 80031f6:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <main+0xd70>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
            			SENSORS_MODE = false;
 80031fc:	4b6e      	ldr	r3, [pc, #440]	; (80033b8 <main+0xd74>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
            		}
            	}while (sign != '*');     // Select EXIT
 8003202:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003206:	2b2a      	cmp	r3, #42	; 0x2a
 8003208:	d1de      	bne.n	80031c8 <main+0xb84>
            }

            if(sign == '2')
 800320a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800320e:	2b32      	cmp	r3, #50	; 0x32
 8003210:	d144      	bne.n	800329c <main+0xc58>
            {
                // Clear all OLED
                ssd1306_Fill(Black);
 8003212:	2000      	movs	r0, #0
 8003214:	f000 ffa0 	bl	8004158 <ssd1306_Fill>
               	ssd1306_UpdateScreen();
 8003218:	f000 ffc0 	bl	800419c <ssd1306_UpdateScreen>

                // Ptint selected menu
                memset(str, 0 , sizeof(str));
 800321c:	463b      	mov	r3, r7
 800321e:	2232      	movs	r2, #50	; 0x32
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f005 ff9c 	bl	8009160 <memset>
                sprintf(str,"%s", "1. function 2");
 8003228:	463b      	mov	r3, r7
 800322a:	4a64      	ldr	r2, [pc, #400]	; (80033bc <main+0xd78>)
 800322c:	461c      	mov	r4, r3
 800322e:	4613      	mov	r3, r2
 8003230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003232:	c407      	stmia	r4!, {r0, r1, r2}
 8003234:	8023      	strh	r3, [r4, #0]
                ssd1306_SetCursor(00, 00);
 8003236:	2100      	movs	r1, #0
 8003238:	2000      	movs	r0, #0
 800323a:	f001 f8e5 	bl	8004408 <ssd1306_SetCursor>
                ssd1306_WriteString(str, Font_7x10, White);
 800323e:	4a57      	ldr	r2, [pc, #348]	; (800339c <main+0xd58>)
 8003240:	4638      	mov	r0, r7
 8003242:	2301      	movs	r3, #1
 8003244:	ca06      	ldmia	r2, {r1, r2}
 8003246:	f001 f8b9 	bl	80043bc <ssd1306_WriteString>
                memset(str, 0 , sizeof(str));
 800324a:	463b      	mov	r3, r7
 800324c:	2232      	movs	r2, #50	; 0x32
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f005 ff85 	bl	8009160 <memset>

                ssd1306_UpdateScreen();
 8003256:	f000 ffa1 	bl	800419c <ssd1306_UpdateScreen>

                do                                                            // Whaite for choise
                {
                       // Place for code function 2

                       sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 800325a:	f000 fbd1 	bl	8003a00 <read_one_sign_from_keyboard>
 800325e:	4603      	mov	r3, r0
 8003260:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                       if(sign == '*')    // If select EXIT  // Exit in main menu
 8003264:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003268:	2b2a      	cmp	r3, #42	; 0x2a
 800326a:	d113      	bne.n	8003294 <main+0xc50>
                       {
                            EXIT = 1;      // Flag_fro exit from there
 800326c:	2301      	movs	r3, #1
 800326e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
                            // Clear all OLED
                            ssd1306_Fill(Black);
 8003272:	2000      	movs	r0, #0
 8003274:	f000 ff70 	bl	8004158 <ssd1306_Fill>
                            ssd1306_UpdateScreen();
 8003278:	f000 ff90 	bl	800419c <ssd1306_UpdateScreen>

                            GPS_MODE = false;
 800327c:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <main+0xd68>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
                            GSM_MODE = false;
 8003282:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <main+0xd6c>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
                            FINGERPRINT_MODE = false;
 8003288:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <main+0xd70>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
                            SENSORS_MODE = false;
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <main+0xd74>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
                       }
                 }while (sign != '*');     // Select EXIT
 8003294:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003298:	2b2a      	cmp	r3, #42	; 0x2a
 800329a:	d1de      	bne.n	800325a <main+0xc16>

                // Place for code function 2
            }

            if(sign == '3')
 800329c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80032a0:	2b33      	cmp	r3, #51	; 0x33
 80032a2:	d144      	bne.n	800332e <main+0xcea>
            {
                 // Clear all OLED
                 ssd1306_Fill(Black);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f000 ff57 	bl	8004158 <ssd1306_Fill>
                 ssd1306_UpdateScreen();
 80032aa:	f000 ff77 	bl	800419c <ssd1306_UpdateScreen>
                 // Print mode in head

                 // Ptint selected menu
                 memset(str, 0 , sizeof(str));
 80032ae:	463b      	mov	r3, r7
 80032b0:	2232      	movs	r2, #50	; 0x32
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f005 ff53 	bl	8009160 <memset>
                 sprintf(str,"%s", "1. function 3");
 80032ba:	463b      	mov	r3, r7
 80032bc:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <main+0xd7c>)
 80032be:	461c      	mov	r4, r3
 80032c0:	4613      	mov	r3, r2
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	c407      	stmia	r4!, {r0, r1, r2}
 80032c6:	8023      	strh	r3, [r4, #0]
                 ssd1306_SetCursor(00, 00);
 80032c8:	2100      	movs	r1, #0
 80032ca:	2000      	movs	r0, #0
 80032cc:	f001 f89c 	bl	8004408 <ssd1306_SetCursor>
                 ssd1306_WriteString(str, Font_7x10, White);
 80032d0:	4a32      	ldr	r2, [pc, #200]	; (800339c <main+0xd58>)
 80032d2:	4638      	mov	r0, r7
 80032d4:	2301      	movs	r3, #1
 80032d6:	ca06      	ldmia	r2, {r1, r2}
 80032d8:	f001 f870 	bl	80043bc <ssd1306_WriteString>
                 memset(str, 0 , sizeof(str));
 80032dc:	463b      	mov	r3, r7
 80032de:	2232      	movs	r2, #50	; 0x32
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 ff3c 	bl	8009160 <memset>

                 ssd1306_UpdateScreen();
 80032e8:	f000 ff58 	bl	800419c <ssd1306_UpdateScreen>

                 do                                                            // Whaite for choise
                 {
                      // Place for code function 3

                      sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80032ec:	f000 fb88 	bl	8003a00 <read_one_sign_from_keyboard>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

                      if(sign == '*')    // If select EXIT  // Exit in main menu
 80032f6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80032fa:	2b2a      	cmp	r3, #42	; 0x2a
 80032fc:	d113      	bne.n	8003326 <main+0xce2>
                      {
                           EXIT = 1;      // Flag_fro exit from there
 80032fe:	2301      	movs	r3, #1
 8003300:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
                           // Clear all OLED
                           ssd1306_Fill(Black);
 8003304:	2000      	movs	r0, #0
 8003306:	f000 ff27 	bl	8004158 <ssd1306_Fill>
                           ssd1306_UpdateScreen();
 800330a:	f000 ff47 	bl	800419c <ssd1306_UpdateScreen>

                           GPS_MODE = false;
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <main+0xd68>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
                           GSM_MODE = false;
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <main+0xd6c>)
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
                           FINGERPRINT_MODE = false;
 800331a:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <main+0xd70>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
                           SENSORS_MODE = false;
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <main+0xd74>)
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
                      }
                  }while (sign != '*');     // Select EXIT
 8003326:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800332a:	2b2a      	cmp	r3, #42	; 0x2a
 800332c:	d1de      	bne.n	80032ec <main+0xca8>

                 // Place for code function 3
            }

			if(sign == '*')    // If select EXIT  // Exit in main menu
 800332e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003332:	2b2a      	cmp	r3, #42	; 0x2a
 8003334:	d113      	bne.n	800335e <main+0xd1a>
			{
				EXIT = 1;      // Flag_fro exit from there
 8003336:	2301      	movs	r3, #1
 8003338:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
				// Clear all OLED
				ssd1306_Fill(Black);
 800333c:	2000      	movs	r0, #0
 800333e:	f000 ff0b 	bl	8004158 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8003342:	f000 ff2b 	bl	800419c <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <main+0xd68>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <main+0xd6c>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <main+0xd70>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <main+0xd74>)
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
			}
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 800335e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003362:	2b31      	cmp	r3, #49	; 0x31
 8003364:	d00c      	beq.n	8003380 <main+0xd3c>
 8003366:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800336a:	2b32      	cmp	r3, #50	; 0x32
 800336c:	d008      	beq.n	8003380 <main+0xd3c>
 800336e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8003372:	2b33      	cmp	r3, #51	; 0x33
 8003374:	d004      	beq.n	8003380 <main+0xd3c>
 8003376:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800337a:	2b2a      	cmp	r3, #42	; 0x2a
 800337c:	f47f aef2 	bne.w	8003164 <main+0xb20>
	while (SENSORS_MODE && (EXIT == 0))  /////////////////////////////////////////////////////////////////////
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <main+0xd74>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f43f aa09 	beq.w	800279c <main+0x158>
 800338a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800338e:	2b00      	cmp	r3, #0
 8003390:	f43f ae6a 	beq.w	8003068 <main+0xa24>
{
 8003394:	f7ff ba02 	b.w	800279c <main+0x158>
 8003398:	0800c810 	.word	0x0800c810
 800339c:	20000030 	.word	0x20000030
 80033a0:	0800c81c 	.word	0x0800c81c
 80033a4:	0800c7d0 	.word	0x0800c7d0
 80033a8:	0800c7e0 	.word	0x0800c7e0
 80033ac:	20000285 	.word	0x20000285
 80033b0:	20000284 	.word	0x20000284
 80033b4:	20000286 	.word	0x20000286
 80033b8:	20000287 	.word	0x20000287
 80033bc:	0800c7f0 	.word	0x0800c7f0
 80033c0:	0800c800 	.word	0x0800c800

080033c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b090      	sub	sp, #64	; 0x40
 80033c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ca:	f107 0318 	add.w	r3, r7, #24
 80033ce:	2228      	movs	r2, #40	; 0x28
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f005 fec4 	bl	8009160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033f4:	2301      	movs	r3, #1
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033f8:	2302      	movs	r3, #2
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003402:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003408:	f107 0318 	add.w	r3, r7, #24
 800340c:	4618      	mov	r0, r3
 800340e:	f003 fd7b 	bl	8006f08 <HAL_RCC_OscConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003418:	f000 fc26 	bl	8003c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800341c:	230f      	movs	r3, #15
 800341e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003420:	2302      	movs	r3, #2
 8003422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f003 ffe6 	bl	8007408 <HAL_RCC_ClockConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003442:	f000 fc11 	bl	8003c68 <Error_Handler>
  }
}
 8003446:	bf00      	nop
 8003448:	3740      	adds	r7, #64	; 0x40
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <MX_I2C1_Init+0x54>)
 8003458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <MX_I2C1_Init+0x50>)
 800345c:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_I2C1_Init+0x58>)
 800345e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003468:	2200      	movs	r2, #0
 800346a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <MX_I2C1_Init+0x50>)
 800346e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003472:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <MX_I2C1_Init+0x50>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800348c:	4804      	ldr	r0, [pc, #16]	; (80034a0 <MX_I2C1_Init+0x50>)
 800348e:	f002 f8a5 	bl	80055dc <HAL_I2C_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003498:	f000 fbe6 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000808 	.word	0x20000808
 80034a4:	40005400 	.word	0x40005400
 80034a8:	000186a0 	.word	0x000186a0

080034ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <MX_SPI2_Init+0x64>)
 80034b2:	4a18      	ldr	r2, [pc, #96]	; (8003514 <MX_SPI2_Init+0x68>)
 80034b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <MX_SPI2_Init+0x64>)
 80034b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <MX_SPI2_Init+0x64>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <MX_SPI2_Init+0x64>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <MX_SPI2_Init+0x64>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <MX_SPI2_Init+0x64>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <MX_SPI2_Init+0x64>)
 80034d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <MX_SPI2_Init+0x64>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <MX_SPI2_Init+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <MX_SPI2_Init+0x64>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <MX_SPI2_Init+0x64>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <MX_SPI2_Init+0x64>)
 80034f8:	220a      	movs	r2, #10
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034fc:	4804      	ldr	r0, [pc, #16]	; (8003510 <MX_SPI2_Init+0x64>)
 80034fe:	f004 f91f 	bl	8007740 <HAL_SPI_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003508:	f000 fbae 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	2000072c 	.word	0x2000072c
 8003514:	40003800 	.word	0x40003800

08003518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b096      	sub	sp, #88	; 0x58
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	615a      	str	r2, [r3, #20]
 8003548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	2220      	movs	r2, #32
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f005 fe05 	bl	8009160 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003556:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003558:	4a3f      	ldr	r2, [pc, #252]	; (8003658 <MX_TIM1_Init+0x140>)
 800355a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 800355c:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <MX_TIM1_Init+0x13c>)
 800355e:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8003562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <MX_TIM1_Init+0x13c>)
 800356c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <MX_TIM1_Init+0x13c>)
 800357a:	2200      	movs	r2, #0
 800357c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003584:	4833      	ldr	r0, [pc, #204]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003586:	f004 f93c 	bl	8007802 <HAL_TIM_Base_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003590:	f000 fb6a 	bl	8003c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800359a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800359e:	4619      	mov	r1, r3
 80035a0:	482c      	ldr	r0, [pc, #176]	; (8003654 <MX_TIM1_Init+0x13c>)
 80035a2:	f004 fbfd 	bl	8007da0 <HAL_TIM_ConfigClockSource>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80035ac:	f000 fb5c 	bl	8003c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035b0:	4828      	ldr	r0, [pc, #160]	; (8003654 <MX_TIM1_Init+0x13c>)
 80035b2:	f004 f974 	bl	800789e <HAL_TIM_PWM_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80035bc:	f000 fb54 	bl	8003c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035cc:	4619      	mov	r1, r3
 80035ce:	4821      	ldr	r0, [pc, #132]	; (8003654 <MX_TIM1_Init+0x13c>)
 80035d0:	f004 ff66 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80035da:	f000 fb45 	bl	8003c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035de:	2360      	movs	r3, #96	; 0x60
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 80035e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035ec:	2300      	movs	r3, #0
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003600:	2200      	movs	r2, #0
 8003602:	4619      	mov	r1, r3
 8003604:	4813      	ldr	r0, [pc, #76]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003606:	f004 fb05 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003610:	f000 fb2a 	bl	8003c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800362c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4807      	ldr	r0, [pc, #28]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003638:	f004 ff76 	bl	8008528 <HAL_TIMEx_ConfigBreakDeadTime>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003642:	f000 fb11 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <MX_TIM1_Init+0x13c>)
 8003648:	f000 ffea 	bl	8004620 <HAL_TIM_MspPostInit>

}
 800364c:	bf00      	nop
 800364e:	3758      	adds	r7, #88	; 0x58
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	2000089c 	.word	0x2000089c
 8003658:	40012c00 	.word	0x40012c00

0800365c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003670:	463b      	mov	r3, r7
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003678:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <MX_TIM2_Init+0x98>)
 800367a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800367e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <MX_TIM2_Init+0x98>)
 8003682:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8003686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <MX_TIM2_Init+0x98>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <MX_TIM2_Init+0x98>)
 8003690:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <MX_TIM2_Init+0x98>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <MX_TIM2_Init+0x98>)
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036a2:	4814      	ldr	r0, [pc, #80]	; (80036f4 <MX_TIM2_Init+0x98>)
 80036a4:	f004 f8ad 	bl	8007802 <HAL_TIM_Base_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036ae:	f000 fadb 	bl	8003c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4619      	mov	r1, r3
 80036be:	480d      	ldr	r0, [pc, #52]	; (80036f4 <MX_TIM2_Init+0x98>)
 80036c0:	f004 fb6e 	bl	8007da0 <HAL_TIM_ConfigClockSource>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80036ca:	f000 facd 	bl	8003c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036d6:	463b      	mov	r3, r7
 80036d8:	4619      	mov	r1, r3
 80036da:	4806      	ldr	r0, [pc, #24]	; (80036f4 <MX_TIM2_Init+0x98>)
 80036dc:	f004 fee0 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80036e6:	f000 fabf 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200008dc 	.word	0x200008dc

080036f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <MX_USART1_UART_Init+0x50>)
 8003700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 8003704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 800371e:	220c      	movs	r2, #12
 8003720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800372e:	4805      	ldr	r0, [pc, #20]	; (8003744 <MX_USART1_UART_Init+0x4c>)
 8003730:	f004 ff5d 	bl	80085ee <HAL_UART_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800373a:	f000 fa95 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	2000085c 	.word	0x2000085c
 8003748:	40013800 	.word	0x40013800

0800374c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <MX_USART2_UART_Init+0x50>)
 8003754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003758:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800375c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003772:	220c      	movs	r2, #12
 8003774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003782:	4805      	ldr	r0, [pc, #20]	; (8003798 <MX_USART2_UART_Init+0x4c>)
 8003784:	f004 ff33 	bl	80085ee <HAL_UART_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800378e:	f000 fa6b 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000091c 	.word	0x2000091c
 800379c:	40004400 	.word	0x40004400

080037a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <MX_USART3_UART_Init+0x50>)
 80037a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037c6:	220c      	movs	r2, #12
 80037c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037d6:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_USART3_UART_Init+0x4c>)
 80037d8:	f004 ff09 	bl	80085ee <HAL_UART_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80037e2:	f000 fa41 	bl	8003c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200007c8 	.word	0x200007c8
 80037f0:	40004800 	.word	0x40004800

080037f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MX_DMA_Init+0x38>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4a0b      	ldr	r2, [pc, #44]	; (800382c <MX_DMA_Init+0x38>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6153      	str	r3, [r2, #20]
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <MX_DMA_Init+0x38>)
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	200d      	movs	r0, #13
 8003818:	f001 fabb 	bl	8004d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800381c:	200d      	movs	r0, #13
 800381e:	f001 fad4 	bl	8004dca <HAL_NVIC_EnableIRQ>

}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003836:	f107 0310 	add.w	r3, r7, #16
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003844:	4b46      	ldr	r3, [pc, #280]	; (8003960 <MX_GPIO_Init+0x130>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	4a45      	ldr	r2, [pc, #276]	; (8003960 <MX_GPIO_Init+0x130>)
 800384a:	f043 0310 	orr.w	r3, r3, #16
 800384e:	6193      	str	r3, [r2, #24]
 8003850:	4b43      	ldr	r3, [pc, #268]	; (8003960 <MX_GPIO_Init+0x130>)
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800385c:	4b40      	ldr	r3, [pc, #256]	; (8003960 <MX_GPIO_Init+0x130>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <MX_GPIO_Init+0x130>)
 8003862:	f043 0320 	orr.w	r3, r3, #32
 8003866:	6193      	str	r3, [r2, #24]
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <MX_GPIO_Init+0x130>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003874:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <MX_GPIO_Init+0x130>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4a39      	ldr	r2, [pc, #228]	; (8003960 <MX_GPIO_Init+0x130>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6193      	str	r3, [r2, #24]
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <MX_GPIO_Init+0x130>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <MX_GPIO_Init+0x130>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	4a33      	ldr	r2, [pc, #204]	; (8003960 <MX_GPIO_Init+0x130>)
 8003892:	f043 0308 	orr.w	r3, r3, #8
 8003896:	6193      	str	r3, [r2, #24]
 8003898:	4b31      	ldr	r3, [pc, #196]	; (8003960 <MX_GPIO_Init+0x130>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80038a4:	2200      	movs	r2, #0
 80038a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038aa:	482e      	ldr	r0, [pc, #184]	; (8003964 <MX_GPIO_Init+0x134>)
 80038ac:	f001 fe7d 	bl	80055aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80038b0:	2200      	movs	r2, #0
 80038b2:	f241 0108 	movw	r1, #4104	; 0x1008
 80038b6:	482c      	ldr	r0, [pc, #176]	; (8003968 <MX_GPIO_Init+0x138>)
 80038b8:	f001 fe77 	bl	80055aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80038c2:	482a      	ldr	r0, [pc, #168]	; (800396c <MX_GPIO_Init+0x13c>)
 80038c4:	f001 fe71 	bl	80055aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ce:	2301      	movs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2302      	movs	r3, #2
 80038d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	4619      	mov	r1, r3
 80038e0:	4820      	ldr	r0, [pc, #128]	; (8003964 <MX_GPIO_Init+0x134>)
 80038e2:	f001 fcf1 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 80038e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80038f4:	2301      	movs	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	4619      	mov	r1, r3
 80038fe:	481a      	ldr	r0, [pc, #104]	; (8003968 <MX_GPIO_Init+0x138>)
 8003900:	f001 fce2 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8003904:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8003908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390a:	2301      	movs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2302      	movs	r3, #2
 8003914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f107 0310 	add.w	r3, r7, #16
 800391a:	4619      	mov	r1, r3
 800391c:	4813      	ldr	r0, [pc, #76]	; (800396c <MX_GPIO_Init+0x13c>)
 800391e:	f001 fcd3 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003922:	2308      	movs	r3, #8
 8003924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2302      	movs	r3, #2
 8003930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003932:	f107 0310 	add.w	r3, r7, #16
 8003936:	4619      	mov	r1, r3
 8003938:	480b      	ldr	r0, [pc, #44]	; (8003968 <MX_GPIO_Init+0x138>)
 800393a:	f001 fcc5 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800393e:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003948:	2302      	movs	r3, #2
 800394a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	4619      	mov	r1, r3
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <MX_GPIO_Init+0x138>)
 8003954:	f001 fcb8 	bl	80052c8 <HAL_GPIO_Init>

}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	40011000 	.word	0x40011000
 8003968:	40010c00 	.word	0x40010c00
 800396c:	40010800 	.word	0x40010800

08003970 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d102      	bne.n	8003988 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003984:	2201      	movs	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]
        }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000289 	.word	0x20000289

08003998 <buzzer_fricvency_setings>:
// ----------------------------------------------------------------------------
// Function for generate
void buzzer_fricvency_setings(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8003998:	b084      	sub	sp, #16
 800399a:	b580      	push	{r7, lr}
 800399c:	b088      	sub	sp, #32
 800399e:	af00      	add	r7, sp, #0
 80039a0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80039a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 80039a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039aa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80039ae:	f003 ffdd 	bl	800796c <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Prescaler = 720;
 80039b2:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	 timer.Init.Period = period; // set the period duration
 80039b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80039be:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80039c2:	f003 ff6c 	bl	800789e <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039c6:	2360      	movs	r3, #96	; 0x60
 80039c8:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80039ca:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80039ce:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039dc:	4619      	mov	r1, r3
 80039de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80039e2:	f004 f917 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80039e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039e8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80039ec:	f003 ff8c 	bl	8007908 <HAL_TIM_PWM_Start>
}
 80039f0:	bf00      	nop
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039fa:	b004      	add	sp, #16
 80039fc:	4770      	bx	lr
	...

08003a00 <read_one_sign_from_keyboard>:
// ---------------------------------------------------------------------------
/*
  Its function read one sing from keyboard
 */
char read_one_sign_from_keyboard(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
	  // 2. Зробити зчитування даних з клавіатури як переривання
	  //
	  //HAL_Delay(100);

	  char sign = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	71fb      	strb	r3, [r7, #7]
	  uint8_t readed_status = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	71bb      	strb	r3, [r7, #6]

	  readed_status = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	71bb      	strb	r3, [r7, #6]
	  uint8_t i = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	717b      	strb	r3, [r7, #5]

	  for(i=1; i<=4; i++)
 8003a16:	2301      	movs	r3, #1
 8003a18:	717b      	strb	r3, [r7, #5]
 8003a1a:	e118      	b.n	8003c4e <read_one_sign_from_keyboard+0x24e>
	  {
		  if((i == 1) && (readed_status != 1))
 8003a1c:	797b      	ldrb	r3, [r7, #5]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d142      	bne.n	8003aa8 <read_one_sign_from_keyboard+0xa8>
 8003a22:	79bb      	ldrb	r3, [r7, #6]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d03f      	beq.n	8003aa8 <read_one_sign_from_keyboard+0xa8>
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);     // For detect 123A
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a2e:	488c      	ldr	r0, [pc, #560]	; (8003c60 <read_one_sign_from_keyboard+0x260>)
 8003a30:	f001 fdbb 	bl	80055aa <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f001 f8b3 	bl	8004ba0 <HAL_Delay>
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a3e:	4889      	ldr	r0, [pc, #548]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003a40:	f001 fd9c 	bl	800557c <HAL_GPIO_ReadPin>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <read_one_sign_from_keyboard+0x54>
			  {
			  		sign = 'A';
 8003a4a:	2341      	movs	r3, #65	; 0x41
 8003a4c:	71fb      	strb	r3, [r7, #7]
			  		readed_status = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	71bb      	strb	r3, [r7, #6]
 8003a52:	e023      	b.n	8003a9c <read_one_sign_from_keyboard+0x9c>
			  }

			  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a58:	4882      	ldr	r0, [pc, #520]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003a5a:	f001 fd8f 	bl	800557c <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <read_one_sign_from_keyboard+0x6e>
			  {
			  		sign = '3';
 8003a64:	2333      	movs	r3, #51	; 0x33
 8003a66:	71fb      	strb	r3, [r7, #7]
			  		readed_status = 1;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	71bb      	strb	r3, [r7, #6]
 8003a6c:	e016      	b.n	8003a9c <read_one_sign_from_keyboard+0x9c>
			  }

			  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003a6e:	2120      	movs	r1, #32
 8003a70:	487c      	ldr	r0, [pc, #496]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003a72:	f001 fd83 	bl	800557c <HAL_GPIO_ReadPin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <read_one_sign_from_keyboard+0x86>
			  {
			  	    sign = '2';
 8003a7c:	2332      	movs	r3, #50	; 0x32
 8003a7e:	71fb      	strb	r3, [r7, #7]
			  	    readed_status = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	71bb      	strb	r3, [r7, #6]
 8003a84:	e00a      	b.n	8003a9c <read_one_sign_from_keyboard+0x9c>
			  }

			  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003a86:	2110      	movs	r1, #16
 8003a88:	4876      	ldr	r0, [pc, #472]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003a8a:	f001 fd77 	bl	800557c <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <read_one_sign_from_keyboard+0x9c>
			  {
			  		sign = '1';
 8003a94:	2331      	movs	r3, #49	; 0x31
 8003a96:	71fb      	strb	r3, [r7, #7]
			  		readed_status = 1;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	71bb      	strb	r3, [r7, #6]
			  }
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aa2:	486f      	ldr	r0, [pc, #444]	; (8003c60 <read_one_sign_from_keyboard+0x260>)
 8003aa4:	f001 fd81 	bl	80055aa <HAL_GPIO_WritePin>
		  }

		  if((i == 2) && (readed_status != 1))
 8003aa8:	797b      	ldrb	r3, [r7, #5]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d142      	bne.n	8003b34 <read_one_sign_from_keyboard+0x134>
 8003aae:	79bb      	ldrb	r3, [r7, #6]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d03f      	beq.n	8003b34 <read_one_sign_from_keyboard+0x134>
		  {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);     // For detect 123A
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aba:	4869      	ldr	r0, [pc, #420]	; (8003c60 <read_one_sign_from_keyboard+0x260>)
 8003abc:	f001 fd75 	bl	80055aa <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f001 f86d 	bl	8004ba0 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aca:	4866      	ldr	r0, [pc, #408]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003acc:	f001 fd56 	bl	800557c <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <read_one_sign_from_keyboard+0xe0>
				{
					  sign = 'B';
 8003ad6:	2342      	movs	r3, #66	; 0x42
 8003ad8:	71fb      	strb	r3, [r7, #7]
					  readed_status = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	71bb      	strb	r3, [r7, #6]
 8003ade:	e023      	b.n	8003b28 <read_one_sign_from_keyboard+0x128>
				}

				else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae4:	485f      	ldr	r0, [pc, #380]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003ae6:	f001 fd49 	bl	800557c <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <read_one_sign_from_keyboard+0xfa>
				{
					  sign = '6';
 8003af0:	2336      	movs	r3, #54	; 0x36
 8003af2:	71fb      	strb	r3, [r7, #7]
					  readed_status = 1;
 8003af4:	2301      	movs	r3, #1
 8003af6:	71bb      	strb	r3, [r7, #6]
 8003af8:	e016      	b.n	8003b28 <read_one_sign_from_keyboard+0x128>
				}

				else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003afa:	2120      	movs	r1, #32
 8003afc:	4859      	ldr	r0, [pc, #356]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003afe:	f001 fd3d 	bl	800557c <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <read_one_sign_from_keyboard+0x112>
				{
					  sign = '5';
 8003b08:	2335      	movs	r3, #53	; 0x35
 8003b0a:	71fb      	strb	r3, [r7, #7]
					  readed_status = 1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	71bb      	strb	r3, [r7, #6]
 8003b10:	e00a      	b.n	8003b28 <read_one_sign_from_keyboard+0x128>
				}

				else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003b12:	2110      	movs	r1, #16
 8003b14:	4853      	ldr	r0, [pc, #332]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003b16:	f001 fd31 	bl	800557c <HAL_GPIO_ReadPin>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <read_one_sign_from_keyboard+0x128>
				{
					  sign = '4';
 8003b20:	2334      	movs	r3, #52	; 0x34
 8003b22:	71fb      	strb	r3, [r7, #7]
					  readed_status = 1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	71bb      	strb	r3, [r7, #6]
				}
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b2e:	484c      	ldr	r0, [pc, #304]	; (8003c60 <read_one_sign_from_keyboard+0x260>)
 8003b30:	f001 fd3b 	bl	80055aa <HAL_GPIO_WritePin>
			}

		    if((i == 3) && (readed_status != 1))
 8003b34:	797b      	ldrb	r3, [r7, #5]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d142      	bne.n	8003bc0 <read_one_sign_from_keyboard+0x1c0>
 8003b3a:	79bb      	ldrb	r3, [r7, #6]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d03f      	beq.n	8003bc0 <read_one_sign_from_keyboard+0x1c0>
		 	{
		 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);     // For detect 123A
 8003b40:	2201      	movs	r2, #1
 8003b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b46:	4846      	ldr	r0, [pc, #280]	; (8003c60 <read_one_sign_from_keyboard+0x260>)
 8003b48:	f001 fd2f 	bl	80055aa <HAL_GPIO_WritePin>
		 		HAL_Delay(1);
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f001 f827 	bl	8004ba0 <HAL_Delay>
		 		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b56:	4843      	ldr	r0, [pc, #268]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003b58:	f001 fd10 	bl	800557c <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <read_one_sign_from_keyboard+0x16c>
		 		{
		 			sign = 'C';
 8003b62:	2343      	movs	r3, #67	; 0x43
 8003b64:	71fb      	strb	r3, [r7, #7]
		 			readed_status = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	71bb      	strb	r3, [r7, #6]
 8003b6a:	e023      	b.n	8003bb4 <read_one_sign_from_keyboard+0x1b4>
		 		}

		 		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b70:	483c      	ldr	r0, [pc, #240]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003b72:	f001 fd03 	bl	800557c <HAL_GPIO_ReadPin>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <read_one_sign_from_keyboard+0x186>
		 		{
		 			sign = '9';
 8003b7c:	2339      	movs	r3, #57	; 0x39
 8003b7e:	71fb      	strb	r3, [r7, #7]
		 			readed_status = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	71bb      	strb	r3, [r7, #6]
 8003b84:	e016      	b.n	8003bb4 <read_one_sign_from_keyboard+0x1b4>
		 		}

		 		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003b86:	2120      	movs	r1, #32
 8003b88:	4836      	ldr	r0, [pc, #216]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003b8a:	f001 fcf7 	bl	800557c <HAL_GPIO_ReadPin>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <read_one_sign_from_keyboard+0x19e>
		 		{
		 			sign = '8';
 8003b94:	2338      	movs	r3, #56	; 0x38
 8003b96:	71fb      	strb	r3, [r7, #7]
		 			readed_status = 1;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	71bb      	strb	r3, [r7, #6]
 8003b9c:	e00a      	b.n	8003bb4 <read_one_sign_from_keyboard+0x1b4>
		 		}

		 		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	4830      	ldr	r0, [pc, #192]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003ba2:	f001 fceb 	bl	800557c <HAL_GPIO_ReadPin>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <read_one_sign_from_keyboard+0x1b4>
		 		{
		 			 sign = '7';
 8003bac:	2337      	movs	r3, #55	; 0x37
 8003bae:	71fb      	strb	r3, [r7, #7]
		 			readed_status = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	71bb      	strb	r3, [r7, #6]
		 		}
		 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bba:	4829      	ldr	r0, [pc, #164]	; (8003c60 <read_one_sign_from_keyboard+0x260>)
 8003bbc:	f001 fcf5 	bl	80055aa <HAL_GPIO_WritePin>
		 	}


		    if((i == 3) && (readed_status != 1))
 8003bc0:	797b      	ldrb	r3, [r7, #5]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d140      	bne.n	8003c48 <read_one_sign_from_keyboard+0x248>
 8003bc6:	79bb      	ldrb	r3, [r7, #6]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d03d      	beq.n	8003c48 <read_one_sign_from_keyboard+0x248>
		   		 	{
		   		 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);     // For detect 123A
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2108      	movs	r1, #8
 8003bd0:	4824      	ldr	r0, [pc, #144]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003bd2:	f001 fcea 	bl	80055aa <HAL_GPIO_WritePin>
		   		 		HAL_Delay(1);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f000 ffe2 	bl	8004ba0 <HAL_Delay>
		   		 		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be0:	4820      	ldr	r0, [pc, #128]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003be2:	f001 fccb 	bl	800557c <HAL_GPIO_ReadPin>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <read_one_sign_from_keyboard+0x1f6>
		   		 		{
		   		 			sign = 'D';
 8003bec:	2344      	movs	r3, #68	; 0x44
 8003bee:	71fb      	strb	r3, [r7, #7]
		   		 			readed_status = 1;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	71bb      	strb	r3, [r7, #6]
 8003bf4:	e023      	b.n	8003c3e <read_one_sign_from_keyboard+0x23e>
		   		 		}

		   		 		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bfa:	481a      	ldr	r0, [pc, #104]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003bfc:	f001 fcbe 	bl	800557c <HAL_GPIO_ReadPin>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <read_one_sign_from_keyboard+0x210>
		   		 		{
		   		 			sign = '#';
 8003c06:	2323      	movs	r3, #35	; 0x23
 8003c08:	71fb      	strb	r3, [r7, #7]
		   		 			readed_status = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	71bb      	strb	r3, [r7, #6]
 8003c0e:	e016      	b.n	8003c3e <read_one_sign_from_keyboard+0x23e>
		   		 		}

		   		 		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003c10:	2120      	movs	r1, #32
 8003c12:	4814      	ldr	r0, [pc, #80]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003c14:	f001 fcb2 	bl	800557c <HAL_GPIO_ReadPin>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <read_one_sign_from_keyboard+0x228>
		   		 		{
		   		 			sign = '0';
 8003c1e:	2330      	movs	r3, #48	; 0x30
 8003c20:	71fb      	strb	r3, [r7, #7]
		   		 			readed_status = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	71bb      	strb	r3, [r7, #6]
 8003c26:	e00a      	b.n	8003c3e <read_one_sign_from_keyboard+0x23e>
		   		 		}

		   		 		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003c28:	2110      	movs	r1, #16
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003c2c:	f001 fca6 	bl	800557c <HAL_GPIO_ReadPin>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <read_one_sign_from_keyboard+0x23e>
		   		 		{
		   		 			 sign = '*';
 8003c36:	232a      	movs	r3, #42	; 0x2a
 8003c38:	71fb      	strb	r3, [r7, #7]
		   		 			readed_status = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	71bb      	strb	r3, [r7, #6]
		   		 		}
		   		 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2108      	movs	r1, #8
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <read_one_sign_from_keyboard+0x264>)
 8003c44:	f001 fcb1 	bl	80055aa <HAL_GPIO_WritePin>
	  for(i=1; i<=4; i++)
 8003c48:	797b      	ldrb	r3, [r7, #5]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	717b      	strb	r3, [r7, #5]
 8003c4e:	797b      	ldrb	r3, [r7, #5]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	f67f aee3 	bls.w	8003a1c <read_one_sign_from_keyboard+0x1c>
		   		 	}
	  }
	  return sign;
 8003c56:	79fb      	ldrb	r3, [r7, #7]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40010800 	.word	0x40010800
 8003c64:	40010c00 	.word	0x40010c00

08003c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <init_oled>:

void print_GPS_data(void);

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8003c78:	f000 fa02 	bl	8004080 <ssd1306_Init>
	HAL_Delay(500);
 8003c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c80:	f000 ff8e 	bl	8004ba0 <HAL_Delay>
	ssd1306_Fill(Black);
 8003c84:	2000      	movs	r0, #0
 8003c86:	f000 fa67 	bl	8004158 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003c8a:	f000 fa87 	bl	800419c <ssd1306_UpdateScreen>
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <OLED_prinr_all_data>:
		}
	}
}
// -----------------------------------------------------------------------------------
void OLED_prinr_all_data(int GPS_SELECTED)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
    // Print all data in OLED
    if(GPS_SELECTED == 1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <OLED_prinr_all_data+0x12>
    {
    	print_GPS_data();
 8003ca0:	f000 f806 	bl	8003cb0 <print_GPS_data>
    //    	if(SENSORS_SELECTED == 0)
    //        {
    //
    //        }

    ssd1306_UpdateScreen();
 8003ca4:	f000 fa7a 	bl	800419c <ssd1306_UpdateScreen>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <print_GPS_data>:


void print_GPS_data(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b09a      	sub	sp, #104	; 0x68
 8003cb4:	af00      	add	r7, sp, #0
	// 1. Print Lat and Lon ////////////////////////////////
	char str[50]={0};
 8003cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cba:	2232      	movs	r2, #50	; 0x32
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f005 fa4e 	bl	8009160 <memset>
	memset(str, 0 , sizeof(str));
 8003cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc8:	2232      	movs	r2, #50	; 0x32
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f005 fa47 	bl	8009160 <memset>

	// Print data from GPS module  ( Lat )
	char lat_str[]="Lat:";
 8003cd2:	4ad3      	ldr	r2, [pc, #844]	; (8004020 <print_GPS_data+0x370>)
 8003cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cdc:	6018      	str	r0, [r3, #0]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	7019      	strb	r1, [r3, #0]
	memcpy(str, lat_str, sizeof(lat_str));
 8003ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cee:	6018      	str	r0, [r3, #0]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 16);
 8003cf4:	2110      	movs	r1, #16
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	f000 fb86 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8003cfc:	4ac9      	ldr	r2, [pc, #804]	; (8004024 <print_GPS_data+0x374>)
 8003cfe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003d02:	2301      	movs	r3, #1
 8003d04:	ca06      	ldmia	r2, {r1, r2}
 8003d06:	f000 fb59 	bl	80043bc <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8003d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d0e:	2232      	movs	r2, #50	; 0x32
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f005 fa24 	bl	8009160 <memset>
	// Print data
	ssd1306_SetCursor(30, 16);
 8003d18:	2110      	movs	r1, #16
 8003d1a:	201e      	movs	r0, #30
 8003d1c:	f000 fb74 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_latitude, Font_7x10, White);
 8003d20:	4ac0      	ldr	r2, [pc, #768]	; (8004024 <print_GPS_data+0x374>)
 8003d22:	2301      	movs	r3, #1
 8003d24:	ca06      	ldmia	r2, {r1, r2}
 8003d26:	48c0      	ldr	r0, [pc, #768]	; (8004028 <print_GPS_data+0x378>)
 8003d28:	f000 fb48 	bl	80043bc <ssd1306_WriteString>

	// Print data from GPS module  ( Lon )
	char lon_str[]="Lon:";
 8003d2c:	4abf      	ldr	r2, [pc, #764]	; (800402c <print_GPS_data+0x37c>)
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d36:	6018      	str	r0, [r3, #0]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	7019      	strb	r1, [r3, #0]
	memcpy(str, lon_str, sizeof(lon_str));
 8003d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d40:	f107 021c 	add.w	r2, r7, #28
 8003d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d48:	6018      	str	r0, [r3, #0]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 26);
 8003d4e:	211a      	movs	r1, #26
 8003d50:	2000      	movs	r0, #0
 8003d52:	f000 fb59 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8003d56:	4ab3      	ldr	r2, [pc, #716]	; (8004024 <print_GPS_data+0x374>)
 8003d58:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	ca06      	ldmia	r2, {r1, r2}
 8003d60:	f000 fb2c 	bl	80043bc <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8003d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d68:	2232      	movs	r2, #50	; 0x32
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f005 f9f7 	bl	8009160 <memset>

	ssd1306_SetCursor(30, 26);
 8003d72:	211a      	movs	r1, #26
 8003d74:	201e      	movs	r0, #30
 8003d76:	f000 fb47 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_lontitude, Font_7x10, White);
 8003d7a:	4aaa      	ldr	r2, [pc, #680]	; (8004024 <print_GPS_data+0x374>)
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	ca06      	ldmia	r2, {r1, r2}
 8003d80:	48ab      	ldr	r0, [pc, #684]	; (8004030 <print_GPS_data+0x380>)
 8003d82:	f000 fb1b 	bl	80043bc <ssd1306_WriteString>

	// 2. Print time  ////////////////////////////////
	if (GPGGA_data_is_ready == 1)
 8003d86:	4bab      	ldr	r3, [pc, #684]	; (8004034 <print_GPS_data+0x384>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 80e3 	bne.w	8003f56 <print_GPS_data+0x2a6>
	{
		char hours[2]={0};
 8003d90:	2300      	movs	r3, #0
 8003d92:	813b      	strh	r3, [r7, #8]
		char minutes[2]={0};
 8003d94:	2300      	movs	r3, #0
 8003d96:	80bb      	strh	r3, [r7, #4]
		char semicolum = ':';
 8003d98:	233a      	movs	r3, #58	; 0x3a
 8003d9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		// divide hours and minutes
		uint8_t i=0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		for(i=0; i<=3; i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003daa:	e020      	b.n	8003dee <print_GPS_data+0x13e>
		{
			if(i<=1)
 8003dac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d80b      	bhi.n	8003dcc <print_GPS_data+0x11c>
			{
				hours[i] = gps_time[i];
 8003db4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8003db8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003dbc:	499e      	ldr	r1, [pc, #632]	; (8004038 <print_GPS_data+0x388>)
 8003dbe:	5c8a      	ldrb	r2, [r1, r2]
 8003dc0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f803 2c60 	strb.w	r2, [r3, #-96]
 8003dca:	e00b      	b.n	8003de4 <print_GPS_data+0x134>
			}
			else
			{
				minutes[i-2] = gps_time[i];
 8003dcc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8003dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003dd4:	3b02      	subs	r3, #2
 8003dd6:	4998      	ldr	r1, [pc, #608]	; (8004038 <print_GPS_data+0x388>)
 8003dd8:	5c8a      	ldrb	r2, [r1, r2]
 8003dda:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003dde:	440b      	add	r3, r1
 8003de0:	f803 2c64 	strb.w	r2, [r3, #-100]
		for(i=0; i<=3; i++)
 8003de4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003de8:	3301      	adds	r3, #1
 8003dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d9da      	bls.n	8003dac <print_GPS_data+0xfc>
			}
		}
		// Add 3 hours
		int int_hours = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t dozens = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t units = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		dozens = hours[0];
 8003e06:	7a3b      	ldrb	r3, [r7, #8]
 8003e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = hours[1];
 8003e0c:	7a7b      	ldrb	r3, [r7, #9]
 8003e0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		dozens = dozens - 48;
 8003e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e16:	3b30      	subs	r3, #48	; 0x30
 8003e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = units - 48;
 8003e1c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003e20:	3b30      	subs	r3, #48	; 0x30
 8003e22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		int_hours = units +(dozens *10);
 8003e26:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8003e2a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	663b      	str	r3, [r7, #96]	; 0x60
		int_hours = int_hours+2;
 8003e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	663b      	str	r3, [r7, #96]	; 0x60

		dozens = (int_hours/10) + 48;
 8003e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e42:	4a7e      	ldr	r2, [pc, #504]	; (800403c <print_GPS_data+0x38c>)
 8003e44:	fb82 1203 	smull	r1, r2, r2, r3
 8003e48:	1092      	asrs	r2, r2, #2
 8003e4a:	17db      	asrs	r3, r3, #31
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	3330      	adds	r3, #48	; 0x30
 8003e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = (int_hours%10) + 48;
 8003e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e58:	4b78      	ldr	r3, [pc, #480]	; (800403c <print_GPS_data+0x38c>)
 8003e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8003e5e:	1099      	asrs	r1, r3, #2
 8003e60:	17d3      	asrs	r3, r2, #31
 8003e62:	1ac9      	subs	r1, r1, r3
 8003e64:	460b      	mov	r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	1ad1      	subs	r1, r2, r3
 8003e6e:	b2cb      	uxtb	r3, r1
 8003e70:	3330      	adds	r3, #48	; 0x30
 8003e72:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		hours[0] = dozens;
 8003e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e7a:	723b      	strb	r3, [r7, #8]
		hours[1] = units;
 8003e7c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003e80:	727b      	strb	r3, [r7, #9]

		if(int_hours == 24)
 8003e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e84:	2b18      	cmp	r3, #24
 8003e86:	d103      	bne.n	8003e90 <print_GPS_data+0x1e0>
		{
			hours[0] = '0';
 8003e88:	2330      	movs	r3, #48	; 0x30
 8003e8a:	723b      	strb	r3, [r7, #8]
			hours[1] = '0';
 8003e8c:	2330      	movs	r3, #48	; 0x30
 8003e8e:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 25)
 8003e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e92:	2b19      	cmp	r3, #25
 8003e94:	d103      	bne.n	8003e9e <print_GPS_data+0x1ee>
		{
			hours[0] = '0';
 8003e96:	2330      	movs	r3, #48	; 0x30
 8003e98:	723b      	strb	r3, [r7, #8]
			hours[1] = '1';
 8003e9a:	2331      	movs	r3, #49	; 0x31
 8003e9c:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 26)
 8003e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea0:	2b1a      	cmp	r3, #26
 8003ea2:	d103      	bne.n	8003eac <print_GPS_data+0x1fc>
		{
			hours[0] = '0';
 8003ea4:	2330      	movs	r3, #48	; 0x30
 8003ea6:	723b      	strb	r3, [r7, #8]
			hours[1] = '2';
 8003ea8:	2332      	movs	r3, #50	; 0x32
 8003eaa:	727b      	strb	r3, [r7, #9]
		}

		if((int_hours >=0) && (int_hours<=9))
 8003eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	db09      	blt.n	8003ec6 <print_GPS_data+0x216>
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	dc06      	bgt.n	8003ec6 <print_GPS_data+0x216>
		{
			hours[0] = '0';
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	723b      	strb	r3, [r7, #8]
			hours[1] = int_hours +48;
 8003ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	3330      	adds	r3, #48	; 0x30
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	727b      	strb	r3, [r7, #9]
		}

		// connect  hours and minutes with colon
		//i=5;
		for(i=0; i<5; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003ecc:	e034      	b.n	8003f38 <print_GPS_data+0x288>
		{
			if(i<=1)
 8003ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d80e      	bhi.n	8003ef4 <print_GPS_data+0x244>
			{
				str[i] = hours[i];
 8003ed6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8003eda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ede:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 8003ee8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003eec:	440b      	add	r3, r1
 8003eee:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8003ef2:	e01c      	b.n	8003f2e <print_GPS_data+0x27e>
			}
			else
			{
				if(i==2)
 8003ef4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d109      	bne.n	8003f10 <print_GPS_data+0x260>
				{
					str[i] = semicolum;
 8003efc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f00:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003f04:	4413      	add	r3, r2
 8003f06:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8003f0a:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8003f0e:	e00e      	b.n	8003f2e <print_GPS_data+0x27e>
				}
				else
				{
					str[i]=minutes[i-3];
 8003f10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f14:	1eda      	subs	r2, r3, #3
 8003f16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f1a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003f1e:	440a      	add	r2, r1
 8003f20:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8003f24:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003f28:	440b      	add	r3, r1
 8003f2a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		for(i=0; i<5; i++)
 8003f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f32:	3301      	adds	r3, #1
 8003f34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d9c6      	bls.n	8003ece <print_GPS_data+0x21e>
				}
			}
		}

		ssd1306_SetCursor(0, 36);
 8003f40:	2124      	movs	r1, #36	; 0x24
 8003f42:	2000      	movs	r0, #0
 8003f44:	f000 fa60 	bl	8004408 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8003f48:	4a36      	ldr	r2, [pc, #216]	; (8004024 <print_GPS_data+0x374>)
 8003f4a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003f4e:	2301      	movs	r3, #1
 8003f50:	ca06      	ldmia	r2, {r1, r2}
 8003f52:	f000 fa33 	bl	80043bc <ssd1306_WriteString>
	}

	// 3. Print number of satalits  ////////////////////////////////
	char numbers_of_satalits_str[]="N:  ";
 8003f56:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <print_GPS_data+0x390>)
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f60:	6018      	str	r0, [r3, #0]
 8003f62:	3304      	adds	r3, #4
 8003f64:	7019      	strb	r1, [r3, #0]
	memcpy(str, numbers_of_satalits_str, sizeof(numbers_of_satalits_str));
 8003f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f6a:	f107 0214 	add.w	r2, r7, #20
 8003f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f72:	6018      	str	r0, [r3, #0]
 8003f74:	3304      	adds	r3, #4
 8003f76:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(40, 36);
 8003f78:	2124      	movs	r1, #36	; 0x24
 8003f7a:	2028      	movs	r0, #40	; 0x28
 8003f7c:	f000 fa44 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8003f80:	4a28      	ldr	r2, [pc, #160]	; (8004024 <print_GPS_data+0x374>)
 8003f82:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003f86:	2301      	movs	r3, #1
 8003f88:	ca06      	ldmia	r2, {r1, r2}
 8003f8a:	f000 fa17 	bl	80043bc <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 8003f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f92:	2232      	movs	r2, #50	; 0x32
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f005 f8e2 	bl	8009160 <memset>
	ssd1306_SetCursor(55, 36);
 8003f9c:	2124      	movs	r1, #36	; 0x24
 8003f9e:	2037      	movs	r0, #55	; 0x37
 8003fa0:	f000 fa32 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_number_of_satellites, Font_7x10, White);
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <print_GPS_data+0x374>)
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	ca06      	ldmia	r2, {r1, r2}
 8003faa:	4826      	ldr	r0, [pc, #152]	; (8004044 <print_GPS_data+0x394>)
 8003fac:	f000 fa06 	bl	80043bc <ssd1306_WriteString>

	// 4. Print number of satalits  ////////////////////////////////
	//gps_speed
	char speed_str[]="S:    ";
 8003fb0:	4a25      	ldr	r2, [pc, #148]	; (8004048 <print_GPS_data+0x398>)
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fba:	6018      	str	r0, [r3, #0]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	8019      	strh	r1, [r3, #0]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	0c0a      	lsrs	r2, r1, #16
 8003fc4:	701a      	strb	r2, [r3, #0]
	memcpy(str, speed_str, sizeof(speed_str));
 8003fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fca:	f107 020c 	add.w	r2, r7, #12
 8003fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd2:	6018      	str	r0, [r3, #0]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	8019      	strh	r1, [r3, #0]
 8003fd8:	3302      	adds	r3, #2
 8003fda:	0c0a      	lsrs	r2, r1, #16
 8003fdc:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(75, 36);
 8003fde:	2124      	movs	r1, #36	; 0x24
 8003fe0:	204b      	movs	r0, #75	; 0x4b
 8003fe2:	f000 fa11 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <print_GPS_data+0x374>)
 8003fe8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003fec:	2301      	movs	r3, #1
 8003fee:	ca06      	ldmia	r2, {r1, r2}
 8003ff0:	f000 f9e4 	bl	80043bc <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 8003ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff8:	2232      	movs	r2, #50	; 0x32
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f005 f8af 	bl	8009160 <memset>
	ssd1306_SetCursor(90, 36);
 8004002:	2124      	movs	r1, #36	; 0x24
 8004004:	205a      	movs	r0, #90	; 0x5a
 8004006:	f000 f9ff 	bl	8004408 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_speed, Font_7x10, White);
 800400a:	4a06      	ldr	r2, [pc, #24]	; (8004024 <print_GPS_data+0x374>)
 800400c:	2301      	movs	r3, #1
 800400e:	ca06      	ldmia	r2, {r1, r2}
 8004010:	480e      	ldr	r0, [pc, #56]	; (800404c <print_GPS_data+0x39c>)
 8004012:	f000 f9d3 	bl	80043bc <ssd1306_WriteString>
}
 8004016:	bf00      	nop
 8004018:	3768      	adds	r7, #104	; 0x68
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	0800c83c 	.word	0x0800c83c
 8004024:	20000030 	.word	0x20000030
 8004028:	200006c0 	.word	0x200006c0
 800402c:	0800c844 	.word	0x0800c844
 8004030:	2000071c 	.word	0x2000071c
 8004034:	20000238 	.word	0x20000238
 8004038:	200006ec 	.word	0x200006ec
 800403c:	66666667 	.word	0x66666667
 8004040:	0800c84c 	.word	0x0800c84c
 8004044:	200006dc 	.word	0x200006dc
 8004048:	0800c854 	.word	0x0800c854
 800404c:	200006b8 	.word	0x200006b8

08004050 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af04      	add	r7, sp, #16
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800405a:	230a      	movs	r3, #10
 800405c:	9302      	str	r3, [sp, #8]
 800405e:	2301      	movs	r3, #1
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	1dfb      	adds	r3, r7, #7
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2301      	movs	r3, #1
 8004068:	2200      	movs	r2, #0
 800406a:	2178      	movs	r1, #120	; 0x78
 800406c:	4803      	ldr	r0, [pc, #12]	; (800407c <ssd1306_WriteCommand+0x2c>)
 800406e:	f001 ff45 	bl	8005efc <HAL_I2C_Mem_Write>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000808 	.word	0x20000808

08004080 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8004084:	2064      	movs	r0, #100	; 0x64
 8004086:	f000 fd8b 	bl	8004ba0 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800408a:	20ae      	movs	r0, #174	; 0xae
 800408c:	f7ff ffe0 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004090:	2020      	movs	r0, #32
 8004092:	f7ff ffdd 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004096:	2010      	movs	r0, #16
 8004098:	f7ff ffda 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800409c:	20b0      	movs	r0, #176	; 0xb0
 800409e:	f7ff ffd7 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80040a2:	20c8      	movs	r0, #200	; 0xc8
 80040a4:	f7ff ffd4 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80040a8:	2000      	movs	r0, #0
 80040aa:	f7ff ffd1 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80040ae:	2010      	movs	r0, #16
 80040b0:	f7ff ffce 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80040b4:	2040      	movs	r0, #64	; 0x40
 80040b6:	f7ff ffcb 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80040ba:	2081      	movs	r0, #129	; 0x81
 80040bc:	f7ff ffc8 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80040c0:	20ff      	movs	r0, #255	; 0xff
 80040c2:	f7ff ffc5 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80040c6:	20a1      	movs	r0, #161	; 0xa1
 80040c8:	f7ff ffc2 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80040cc:	20a6      	movs	r0, #166	; 0xa6
 80040ce:	f7ff ffbf 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80040d2:	20a8      	movs	r0, #168	; 0xa8
 80040d4:	f7ff ffbc 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80040d8:	203f      	movs	r0, #63	; 0x3f
 80040da:	f7ff ffb9 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80040de:	20a4      	movs	r0, #164	; 0xa4
 80040e0:	f7ff ffb6 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80040e4:	20d3      	movs	r0, #211	; 0xd3
 80040e6:	f7ff ffb3 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80040ea:	2000      	movs	r0, #0
 80040ec:	f7ff ffb0 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80040f0:	20d5      	movs	r0, #213	; 0xd5
 80040f2:	f7ff ffad 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80040f6:	20f0      	movs	r0, #240	; 0xf0
 80040f8:	f7ff ffaa 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80040fc:	20d9      	movs	r0, #217	; 0xd9
 80040fe:	f7ff ffa7 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004102:	2022      	movs	r0, #34	; 0x22
 8004104:	f7ff ffa4 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8004108:	20da      	movs	r0, #218	; 0xda
 800410a:	f7ff ffa1 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800410e:	2012      	movs	r0, #18
 8004110:	f7ff ff9e 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004114:	20db      	movs	r0, #219	; 0xdb
 8004116:	f7ff ff9b 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800411a:	2020      	movs	r0, #32
 800411c:	f7ff ff98 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004120:	208d      	movs	r0, #141	; 0x8d
 8004122:	f7ff ff95 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004126:	2014      	movs	r0, #20
 8004128:	f7ff ff92 	bl	8004050 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800412c:	20af      	movs	r0, #175	; 0xaf
 800412e:	f7ff ff8f 	bl	8004050 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8004132:	2000      	movs	r0, #0
 8004134:	f000 f810 	bl	8004158 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8004138:	f000 f830 	bl	800419c <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <ssd1306_Init+0xd4>)
 800413e:	2200      	movs	r2, #0
 8004140:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <ssd1306_Init+0xd4>)
 8004144:	2200      	movs	r2, #0
 8004146:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8004148:	4b02      	ldr	r3, [pc, #8]	; (8004154 <ssd1306_Init+0xd4>)
 800414a:	2201      	movs	r2, #1
 800414c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800414e:	2301      	movs	r3, #1
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000068c 	.word	0x2000068c

08004158 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e00d      	b.n	8004184 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <ssd1306_Fill+0x1a>
 800416e:	2100      	movs	r1, #0
 8004170:	e000      	b.n	8004174 <ssd1306_Fill+0x1c>
 8004172:	21ff      	movs	r1, #255	; 0xff
 8004174:	4a08      	ldr	r2, [pc, #32]	; (8004198 <ssd1306_Fill+0x40>)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	460a      	mov	r2, r1
 800417c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d3ed      	bcc.n	8004168 <ssd1306_Fill+0x10>
	}
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000028c 	.word	0x2000028c

0800419c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80041a2:	2300      	movs	r3, #0
 80041a4:	71fb      	strb	r3, [r7, #7]
 80041a6:	e01d      	b.n	80041e4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	3b50      	subs	r3, #80	; 0x50
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff4e 	bl	8004050 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7ff ff4b 	bl	8004050 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80041ba:	2010      	movs	r0, #16
 80041bc:	f7ff ff48 	bl	8004050 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <ssd1306_UpdateScreen+0x58>)
 80041c6:	4413      	add	r3, r2
 80041c8:	2264      	movs	r2, #100	; 0x64
 80041ca:	9202      	str	r2, [sp, #8]
 80041cc:	2280      	movs	r2, #128	; 0x80
 80041ce:	9201      	str	r2, [sp, #4]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2301      	movs	r3, #1
 80041d4:	2240      	movs	r2, #64	; 0x40
 80041d6:	2178      	movs	r1, #120	; 0x78
 80041d8:	4807      	ldr	r0, [pc, #28]	; (80041f8 <ssd1306_UpdateScreen+0x5c>)
 80041da:	f001 fe8f 	bl	8005efc <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	3301      	adds	r3, #1
 80041e2:	71fb      	strb	r3, [r7, #7]
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b07      	cmp	r3, #7
 80041e8:	d9de      	bls.n	80041a8 <ssd1306_UpdateScreen+0xc>
	}
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	2000028c 	.word	0x2000028c
 80041f8:	20000808 	.word	0x20000808

080041fc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
 8004206:	460b      	mov	r3, r1
 8004208:	71bb      	strb	r3, [r7, #6]
 800420a:	4613      	mov	r3, r2
 800420c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db48      	blt.n	80042a8 <ssd1306_DrawPixel+0xac>
 8004216:	79bb      	ldrb	r3, [r7, #6]
 8004218:	2b3f      	cmp	r3, #63	; 0x3f
 800421a:	d845      	bhi.n	80042a8 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <ssd1306_DrawPixel+0xb8>)
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d006      	beq.n	8004232 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8004224:	797b      	ldrb	r3, [r7, #5]
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8004232:	797b      	ldrb	r3, [r7, #5]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d11a      	bne.n	800426e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004238:	79fa      	ldrb	r2, [r7, #7]
 800423a:	79bb      	ldrb	r3, [r7, #6]
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	b2d8      	uxtb	r0, r3
 8004240:	4603      	mov	r3, r0
 8004242:	01db      	lsls	r3, r3, #7
 8004244:	4413      	add	r3, r2
 8004246:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <ssd1306_DrawPixel+0xbc>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	b25a      	sxtb	r2, r3
 800424c:	79bb      	ldrb	r3, [r7, #6]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	b25b      	sxtb	r3, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	b259      	sxtb	r1, r3
 800425e:	79fa      	ldrb	r2, [r7, #7]
 8004260:	4603      	mov	r3, r0
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	4413      	add	r3, r2
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <ssd1306_DrawPixel+0xbc>)
 800426a:	54d1      	strb	r1, [r2, r3]
 800426c:	e01d      	b.n	80042aa <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800426e:	79fa      	ldrb	r2, [r7, #7]
 8004270:	79bb      	ldrb	r3, [r7, #6]
 8004272:	08db      	lsrs	r3, r3, #3
 8004274:	b2d8      	uxtb	r0, r3
 8004276:	4603      	mov	r3, r0
 8004278:	01db      	lsls	r3, r3, #7
 800427a:	4413      	add	r3, r2
 800427c:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <ssd1306_DrawPixel+0xbc>)
 800427e:	5cd3      	ldrb	r3, [r2, r3]
 8004280:	b25a      	sxtb	r2, r3
 8004282:	79bb      	ldrb	r3, [r7, #6]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	b25b      	sxtb	r3, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	b25b      	sxtb	r3, r3
 8004294:	4013      	ands	r3, r2
 8004296:	b259      	sxtb	r1, r3
 8004298:	79fa      	ldrb	r2, [r7, #7]
 800429a:	4603      	mov	r3, r0
 800429c:	01db      	lsls	r3, r3, #7
 800429e:	4413      	add	r3, r2
 80042a0:	b2c9      	uxtb	r1, r1
 80042a2:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <ssd1306_DrawPixel+0xbc>)
 80042a4:	54d1      	strb	r1, [r2, r3]
 80042a6:	e000      	b.n	80042aa <ssd1306_DrawPixel+0xae>
		return;
 80042a8:	bf00      	nop
	}
}
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000068c 	.word	0x2000068c
 80042b8:	2000028c 	.word	0x2000028c

080042bc <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4604      	mov	r4, r0
 80042c4:	1d38      	adds	r0, r7, #4
 80042c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80042ca:	461a      	mov	r2, r3
 80042cc:	4623      	mov	r3, r4
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	4613      	mov	r3, r2
 80042d2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80042d4:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	793b      	ldrb	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	2b7f      	cmp	r3, #127	; 0x7f
 80042e0:	dc06      	bgt.n	80042f0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80042e2:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	461a      	mov	r2, r3
 80042e8:	797b      	ldrb	r3, [r7, #5]
 80042ea:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80042ec:	2b3f      	cmp	r3, #63	; 0x3f
 80042ee:	dd01      	ble.n	80042f4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e05d      	b.n	80043b0 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e04c      	b.n	8004394 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	3b20      	subs	r3, #32
 8004300:	7979      	ldrb	r1, [r7, #5]
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	4619      	mov	r1, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	440b      	add	r3, r1
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e034      	b.n	8004384 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d012      	beq.n	8004350 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4413      	add	r3, r2
 8004336:	b2d8      	uxtb	r0, r3
 8004338:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 800433a:	885b      	ldrh	r3, [r3, #2]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	4413      	add	r3, r2
 8004344:	b2db      	uxtb	r3, r3
 8004346:	7bba      	ldrb	r2, [r7, #14]
 8004348:	4619      	mov	r1, r3
 800434a:	f7ff ff57 	bl	80041fc <ssd1306_DrawPixel>
 800434e:	e016      	b.n	800437e <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4413      	add	r3, r2
 800435c:	b2d8      	uxtb	r0, r3
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 8004360:	885b      	ldrh	r3, [r3, #2]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	4413      	add	r3, r2
 800436a:	b2d9      	uxtb	r1, r3
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	f7ff ff3f 	bl	80041fc <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3301      	adds	r3, #1
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	793b      	ldrb	r3, [r7, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	4293      	cmp	r3, r2
 800438c:	d3c5      	bcc.n	800431a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3301      	adds	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	797b      	ldrb	r3, [r7, #5]
 8004396:	461a      	mov	r2, r3
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4293      	cmp	r3, r2
 800439c:	d3ad      	bcc.n	80042fa <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	793b      	ldrb	r3, [r7, #4]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <ssd1306_WriteChar+0xfc>)
 80043ac:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3724      	adds	r7, #36	; 0x24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	2000068c 	.word	0x2000068c

080043bc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	1d38      	adds	r0, r7, #4
 80043c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80043ca:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 80043cc:	e012      	b.n	80043f4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	7818      	ldrb	r0, [r3, #0]
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	1d3a      	adds	r2, r7, #4
 80043d6:	ca06      	ldmia	r2, {r1, r2}
 80043d8:	f7ff ff70 	bl	80042bc <ssd1306_WriteChar>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d002      	beq.n	80043ee <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	e008      	b.n	8004400 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
	while (*str) 
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e8      	bne.n	80043ce <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	781b      	ldrb	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	460a      	mov	r2, r1
 8004412:	71fb      	strb	r3, [r7, #7]
 8004414:	4613      	mov	r3, r2
 8004416:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <ssd1306_SetCursor+0x2c>)
 800441e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8004420:	79bb      	ldrb	r3, [r7, #6]
 8004422:	b29a      	uxth	r2, r3
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <ssd1306_SetCursor+0x2c>)
 8004426:	805a      	strh	r2, [r3, #2]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000068c 	.word	0x2000068c

08004438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_MspInit+0x5c>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	4a14      	ldr	r2, [pc, #80]	; (8004494 <HAL_MspInit+0x5c>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6193      	str	r3, [r2, #24]
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_MspInit+0x5c>)
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_MspInit+0x5c>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <HAL_MspInit+0x5c>)
 800445c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004460:	61d3      	str	r3, [r2, #28]
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_MspInit+0x5c>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_MspInit+0x60>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <HAL_MspInit+0x60>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	40021000 	.word	0x40021000
 8004498:	40010000 	.word	0x40010000

0800449c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <HAL_I2C_MspInit+0x70>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d123      	bne.n	8004504 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HAL_I2C_MspInit+0x74>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <HAL_I2C_MspInit+0x74>)
 80044c2:	f043 0308 	orr.w	r3, r3, #8
 80044c6:	6193      	str	r3, [r2, #24]
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HAL_I2C_MspInit+0x74>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044d4:	23c0      	movs	r3, #192	; 0xc0
 80044d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d8:	2312      	movs	r3, #18
 80044da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044dc:	2303      	movs	r3, #3
 80044de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e0:	f107 0310 	add.w	r3, r7, #16
 80044e4:	4619      	mov	r1, r3
 80044e6:	480b      	ldr	r0, [pc, #44]	; (8004514 <HAL_I2C_MspInit+0x78>)
 80044e8:	f000 feee 	bl	80052c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_I2C_MspInit+0x74>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_I2C_MspInit+0x74>)
 80044f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044f6:	61d3      	str	r3, [r2, #28]
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_I2C_MspInit+0x74>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004504:	bf00      	nop
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40005400 	.word	0x40005400
 8004510:	40021000 	.word	0x40021000
 8004514:	40010c00 	.word	0x40010c00

08004518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <HAL_SPI_MspInit+0x8c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d131      	bne.n	800459c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004538:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_SPI_MspInit+0x90>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_SPI_MspInit+0x90>)
 800453e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004542:	61d3      	str	r3, [r2, #28]
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_SPI_MspInit+0x90>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004550:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_SPI_MspInit+0x90>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <HAL_SPI_MspInit+0x90>)
 8004556:	f043 0308 	orr.w	r3, r3, #8
 800455a:	6193      	str	r3, [r2, #24]
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_SPI_MspInit+0x90>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004568:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800456c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004572:	2303      	movs	r3, #3
 8004574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	4619      	mov	r1, r3
 800457c:	480b      	ldr	r0, [pc, #44]	; (80045ac <HAL_SPI_MspInit+0x94>)
 800457e:	f000 fea3 	bl	80052c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	4619      	mov	r1, r3
 8004596:	4805      	ldr	r0, [pc, #20]	; (80045ac <HAL_SPI_MspInit+0x94>)
 8004598:	f000 fe96 	bl	80052c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800459c:	bf00      	nop
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40003800 	.word	0x40003800
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40010c00 	.word	0x40010c00

080045b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_TIM_Base_MspInit+0x68>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10c      	bne.n	80045dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_TIM_Base_MspInit+0x6c>)
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <HAL_TIM_Base_MspInit+0x6c>)
 80045c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045cc:	6193      	str	r3, [r2, #24]
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_TIM_Base_MspInit+0x6c>)
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045da:	e018      	b.n	800460e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d113      	bne.n	800460e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <HAL_TIM_Base_MspInit+0x6c>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <HAL_TIM_Base_MspInit+0x6c>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	61d3      	str	r3, [r2, #28]
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_TIM_Base_MspInit+0x6c>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2100      	movs	r1, #0
 8004602:	201c      	movs	r0, #28
 8004604:	f000 fbc5 	bl	8004d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004608:	201c      	movs	r0, #28
 800460a:	f000 fbde 	bl	8004dca <HAL_NVIC_EnableIRQ>
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	f107 0310 	add.w	r3, r7, #16
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a10      	ldr	r2, [pc, #64]	; (800467c <HAL_TIM_MspPostInit+0x5c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d118      	bne.n	8004672 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_TIM_MspPostInit+0x60>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <HAL_TIM_MspPostInit+0x60>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6193      	str	r3, [r2, #24]
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_TIM_MspPostInit+0x60>)
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800465c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465e:	2302      	movs	r3, #2
 8004660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004662:	2302      	movs	r3, #2
 8004664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	4619      	mov	r1, r3
 800466c:	4805      	ldr	r0, [pc, #20]	; (8004684 <HAL_TIM_MspPostInit+0x64>)
 800466e:	f000 fe2b 	bl	80052c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004672:	bf00      	nop
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40021000 	.word	0x40021000
 8004684:	40010800 	.word	0x40010800

08004688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08c      	sub	sp, #48	; 0x30
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004690:	f107 0320 	add.w	r3, r7, #32
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a73      	ldr	r2, [pc, #460]	; (8004870 <HAL_UART_MspInit+0x1e8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d13a      	bne.n	800471e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046a8:	4b72      	ldr	r3, [pc, #456]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	4a71      	ldr	r2, [pc, #452]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80046ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046b2:	6193      	str	r3, [r2, #24]
 80046b4:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c0:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4a6b      	ldr	r2, [pc, #428]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	6193      	str	r3, [r2, #24]
 80046cc:	4b69      	ldr	r3, [pc, #420]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e6:	f107 0320 	add.w	r3, r7, #32
 80046ea:	4619      	mov	r1, r3
 80046ec:	4862      	ldr	r0, [pc, #392]	; (8004878 <HAL_UART_MspInit+0x1f0>)
 80046ee:	f000 fdeb 	bl	80052c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004700:	f107 0320 	add.w	r3, r7, #32
 8004704:	4619      	mov	r1, r3
 8004706:	485c      	ldr	r0, [pc, #368]	; (8004878 <HAL_UART_MspInit+0x1f0>)
 8004708:	f000 fdde 	bl	80052c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800470c:	2200      	movs	r2, #0
 800470e:	2100      	movs	r1, #0
 8004710:	2025      	movs	r0, #37	; 0x25
 8004712:	f000 fb3e 	bl	8004d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004716:	2025      	movs	r0, #37	; 0x25
 8004718:	f000 fb57 	bl	8004dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800471c:	e0a3      	b.n	8004866 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a56      	ldr	r2, [pc, #344]	; (800487c <HAL_UART_MspInit+0x1f4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d138      	bne.n	800479a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004728:	4b52      	ldr	r3, [pc, #328]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4a51      	ldr	r2, [pc, #324]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 800472e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004732:	61d3      	str	r3, [r2, #28]
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	4a4b      	ldr	r2, [pc, #300]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	6193      	str	r3, [r2, #24]
 800474c:	4b49      	ldr	r3, [pc, #292]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004758:	2304      	movs	r3, #4
 800475a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004760:	2303      	movs	r3, #3
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004764:	f107 0320 	add.w	r3, r7, #32
 8004768:	4619      	mov	r1, r3
 800476a:	4843      	ldr	r0, [pc, #268]	; (8004878 <HAL_UART_MspInit+0x1f0>)
 800476c:	f000 fdac 	bl	80052c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004770:	2308      	movs	r3, #8
 8004772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004774:	2300      	movs	r3, #0
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800477c:	f107 0320 	add.w	r3, r7, #32
 8004780:	4619      	mov	r1, r3
 8004782:	483d      	ldr	r0, [pc, #244]	; (8004878 <HAL_UART_MspInit+0x1f0>)
 8004784:	f000 fda0 	bl	80052c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	2026      	movs	r0, #38	; 0x26
 800478e:	f000 fb00 	bl	8004d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004792:	2026      	movs	r0, #38	; 0x26
 8004794:	f000 fb19 	bl	8004dca <HAL_NVIC_EnableIRQ>
}
 8004798:	e065      	b.n	8004866 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_UART_MspInit+0x1f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d160      	bne.n	8004866 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047a4:	4b33      	ldr	r3, [pc, #204]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4a32      	ldr	r2, [pc, #200]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80047aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ae:	61d3      	str	r3, [r2, #28]
 80047b0:	4b30      	ldr	r3, [pc, #192]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047bc:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80047c2:	f043 0308 	orr.w	r3, r3, #8
 80047c6:	6193      	str	r3, [r2, #24]
 80047c8:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <HAL_UART_MspInit+0x1ec>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e2:	f107 0320 	add.w	r3, r7, #32
 80047e6:	4619      	mov	r1, r3
 80047e8:	4826      	ldr	r0, [pc, #152]	; (8004884 <HAL_UART_MspInit+0x1fc>)
 80047ea:	f000 fd6d 	bl	80052c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80047ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047fc:	f107 0320 	add.w	r3, r7, #32
 8004800:	4619      	mov	r1, r3
 8004802:	4820      	ldr	r0, [pc, #128]	; (8004884 <HAL_UART_MspInit+0x1fc>)
 8004804:	f000 fd60 	bl	80052c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004808:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_UART_MspInit+0x200>)
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <HAL_UART_MspInit+0x204>)
 800480c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <HAL_UART_MspInit+0x200>)
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_UART_MspInit+0x200>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_UART_MspInit+0x200>)
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004820:	4b19      	ldr	r3, [pc, #100]	; (8004888 <HAL_UART_MspInit+0x200>)
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_UART_MspInit+0x200>)
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800482c:	4b16      	ldr	r3, [pc, #88]	; (8004888 <HAL_UART_MspInit+0x200>)
 800482e:	2220      	movs	r2, #32
 8004830:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_UART_MspInit+0x200>)
 8004834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004838:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800483a:	4813      	ldr	r0, [pc, #76]	; (8004888 <HAL_UART_MspInit+0x200>)
 800483c:	f000 fae0 	bl	8004e00 <HAL_DMA_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8004846:	f7ff fa0f 	bl	8003c68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <HAL_UART_MspInit+0x200>)
 800484e:	635a      	str	r2, [r3, #52]	; 0x34
 8004850:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <HAL_UART_MspInit+0x200>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004856:	2200      	movs	r2, #0
 8004858:	2100      	movs	r1, #0
 800485a:	2027      	movs	r0, #39	; 0x27
 800485c:	f000 fa99 	bl	8004d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004860:	2027      	movs	r0, #39	; 0x27
 8004862:	f000 fab2 	bl	8004dca <HAL_NVIC_EnableIRQ>
}
 8004866:	bf00      	nop
 8004868:	3730      	adds	r7, #48	; 0x30
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40013800 	.word	0x40013800
 8004874:	40021000 	.word	0x40021000
 8004878:	40010800 	.word	0x40010800
 800487c:	40004400 	.word	0x40004400
 8004880:	40004800 	.word	0x40004800
 8004884:	40010c00 	.word	0x40010c00
 8004888:	20000784 	.word	0x20000784
 800488c:	40020030 	.word	0x40020030

08004890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <HardFault_Handler+0x4>

080048a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a6:	e7fe      	b.n	80048a6 <MemManage_Handler+0x4>

080048a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ac:	e7fe      	b.n	80048ac <BusFault_Handler+0x4>

080048ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048b2:	e7fe      	b.n	80048b2 <UsageFault_Handler+0x4>

080048b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048dc:	f000 f944 	bl	8004b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <DMA1_Channel3_IRQHandler+0x10>)
 80048ea:	f000 fbb9 	bl	8005060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000784 	.word	0x20000784

080048f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <TIM2_IRQHandler+0x10>)
 80048fe:	f003 f881 	bl	8007a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200008dc 	.word	0x200008dc

0800490c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 8004912:	4b1a      	ldr	r3, [pc, #104]	; (800497c <USART1_IRQHandler+0x70>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	2b0d      	cmp	r3, #13
 800491c:	d013      	beq.n	8004946 <USART1_IRQHandler+0x3a>
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	2b0a      	cmp	r3, #10
 8004922:	d010      	beq.n	8004946 <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <USART1_IRQHandler+0x74>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d920      	bls.n	800496e <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <USART1_IRQHandler+0x78>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <USART1_IRQHandler+0x7c>)
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <USART1_IRQHandler+0x78>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	4b10      	ldr	r3, [pc, #64]	; (8004984 <USART1_IRQHandler+0x78>)
 8004942:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8004944:	e013      	b.n	800496e <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <USART1_IRQHandler+0x78>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d006      	beq.n	800495c <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <USART1_IRQHandler+0x78>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <USART1_IRQHandler+0x80>)
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e002      	b.n	8004962 <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <USART1_IRQHandler+0x78>)
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <USART1_IRQHandler+0x74>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <USART1_IRQHandler+0x74>)
 800496c:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800496e:	4808      	ldr	r0, [pc, #32]	; (8004990 <USART1_IRQHandler+0x84>)
 8004970:	f003 ffa4 	bl	80088bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40013800 	.word	0x40013800
 8004980:	2000027d 	.word	0x2000027d
 8004984:	20000692 	.word	0x20000692
 8004988:	20000240 	.word	0x20000240
 800498c:	2000027c 	.word	0x2000027c
 8004990:	2000085c 	.word	0x2000085c

08004994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004998:	4802      	ldr	r0, [pc, #8]	; (80049a4 <USART2_IRQHandler+0x10>)
 800499a:	f003 ff8f 	bl	80088bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000091c 	.word	0x2000091c

080049a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <USART3_IRQHandler+0x10>)
 80049ae:	f003 ff85 	bl	80088bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200007c8 	.word	0x200007c8

080049bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <_sbrk+0x5c>)
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <_sbrk+0x60>)
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <_sbrk+0x64>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <_sbrk+0x64>)
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <_sbrk+0x68>)
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <_sbrk+0x64>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d207      	bcs.n	80049fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049ec:	f004 fb8e 	bl	800910c <__errno>
 80049f0:	4602      	mov	r2, r0
 80049f2:	230c      	movs	r3, #12
 80049f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049fa:	e009      	b.n	8004a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <_sbrk+0x64>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <_sbrk+0x64>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <_sbrk+0x64>)
 8004a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20005000 	.word	0x20005000
 8004a1c:	00000400 	.word	0x00000400
 8004a20:	20000694 	.word	0x20000694
 8004a24:	20000968 	.word	0x20000968

08004a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <SystemInit+0x5c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <SystemInit+0x5c>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <SystemInit+0x5c>)
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4911      	ldr	r1, [pc, #68]	; (8004a84 <SystemInit+0x5c>)
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <SystemInit+0x60>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <SystemInit+0x5c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <SystemInit+0x5c>)
 8004a4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <SystemInit+0x5c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <SystemInit+0x5c>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <SystemInit+0x5c>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a07      	ldr	r2, [pc, #28]	; (8004a84 <SystemInit+0x5c>)
 8004a66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004a6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <SystemInit+0x5c>)
 8004a6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004a72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <SystemInit+0x64>)
 8004a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	40021000 	.word	0x40021000
 8004a88:	f8ff0000 	.word	0xf8ff0000
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004a90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004a92:	e003      	b.n	8004a9c <LoopCopyDataInit>

08004a94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004a96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004a98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004a9a:	3104      	adds	r1, #4

08004a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004a9c:	480a      	ldr	r0, [pc, #40]	; (8004ac8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004aa0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004aa2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004aa4:	d3f6      	bcc.n	8004a94 <CopyDataInit>
  ldr r2, =_sbss
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004aa8:	e002      	b.n	8004ab0 <LoopFillZerobss>

08004aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004aac:	f842 3b04 	str.w	r3, [r2], #4

08004ab0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004ab2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004ab4:	d3f9      	bcc.n	8004aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ab6:	f7ff ffb7 	bl	8004a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aba:	f004 fb2d 	bl	8009118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004abe:	f7fd fdc1 	bl	8002644 <main>
  bx lr
 8004ac2:	4770      	bx	lr
  ldr r3, =_sidata
 8004ac4:	0800d2a8 	.word	0x0800d2a8
  ldr r0, =_sdata
 8004ac8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004acc:	2000021c 	.word	0x2000021c
  ldr r2, =_sbss
 8004ad0:	2000021c 	.word	0x2000021c
  ldr r3, = _ebss
 8004ad4:	20000964 	.word	0x20000964

08004ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ad8:	e7fe      	b.n	8004ad8 <ADC1_2_IRQHandler>
	...

08004adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_Init+0x28>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_Init+0x28>)
 8004ae6:	f043 0310 	orr.w	r3, r3, #16
 8004aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aec:	2003      	movs	r0, #3
 8004aee:	f000 f945 	bl	8004d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f000 f808 	bl	8004b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004af8:	f7ff fc9e 	bl	8004438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40022000 	.word	0x40022000

08004b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_InitTick+0x54>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <HAL_InitTick+0x58>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f95d 	bl	8004de6 <HAL_SYSTICK_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e00e      	b.n	8004b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d80a      	bhi.n	8004b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b44:	f000 f925 	bl	8004d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b48:	4a06      	ldr	r2, [pc, #24]	; (8004b64 <HAL_InitTick+0x5c>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000040 	.word	0x20000040
 8004b60:	20000048 	.word	0x20000048
 8004b64:	20000044 	.word	0x20000044

08004b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_IncTick+0x1c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_IncTick+0x20>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4413      	add	r3, r2
 8004b78:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <HAL_IncTick+0x20>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	20000048 	.word	0x20000048
 8004b88:	2000095c 	.word	0x2000095c

08004b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b90:	4b02      	ldr	r3, [pc, #8]	; (8004b9c <HAL_GetTick+0x10>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	2000095c 	.word	0x2000095c

08004ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ba8:	f7ff fff0 	bl	8004b8c <HAL_GetTick>
 8004bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb8:	d005      	beq.n	8004bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_Delay+0x40>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bc6:	bf00      	nop
 8004bc8:	f7ff ffe0 	bl	8004b8c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d8f7      	bhi.n	8004bc8 <HAL_Delay+0x28>
  {
  }
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000048 	.word	0x20000048

08004be4 <__NVIC_SetPriorityGrouping>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c00:	4013      	ands	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <__NVIC_SetPriorityGrouping+0x44>)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	60d3      	str	r3, [r2, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <__NVIC_GetPriorityGrouping>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <__NVIC_GetPriorityGrouping+0x18>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	f003 0307 	and.w	r3, r3, #7
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <__NVIC_EnableIRQ>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	db0b      	blt.n	8004c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	f003 021f 	and.w	r2, r3, #31
 8004c60:	4906      	ldr	r1, [pc, #24]	; (8004c7c <__NVIC_EnableIRQ+0x34>)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	2001      	movs	r0, #1
 8004c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr
 8004c7c:	e000e100 	.word	0xe000e100

08004c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	db0a      	blt.n	8004caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	490c      	ldr	r1, [pc, #48]	; (8004ccc <__NVIC_SetPriority+0x4c>)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	0112      	lsls	r2, r2, #4
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ca8:	e00a      	b.n	8004cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4908      	ldr	r1, [pc, #32]	; (8004cd0 <__NVIC_SetPriority+0x50>)
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	3b04      	subs	r3, #4
 8004cb8:	0112      	lsls	r2, r2, #4
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	761a      	strb	r2, [r3, #24]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	e000e100 	.word	0xe000e100
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	; 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f1c3 0307 	rsb	r3, r3, #7
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	bf28      	it	cs
 8004cf2:	2304      	movcs	r3, #4
 8004cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d902      	bls.n	8004d04 <NVIC_EncodePriority+0x30>
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3b03      	subs	r3, #3
 8004d02:	e000      	b.n	8004d06 <NVIC_EncodePriority+0x32>
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43da      	mvns	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	401a      	ands	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	43d9      	mvns	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d2c:	4313      	orrs	r3, r2
         );
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3724      	adds	r7, #36	; 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d48:	d301      	bcc.n	8004d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00f      	b.n	8004d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <SysTick_Config+0x40>)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d56:	210f      	movs	r1, #15
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	f7ff ff90 	bl	8004c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <SysTick_Config+0x40>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <SysTick_Config+0x40>)
 8004d68:	2207      	movs	r2, #7
 8004d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	e000e010 	.word	0xe000e010

08004d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff2d 	bl	8004be4 <__NVIC_SetPriorityGrouping>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b086      	sub	sp, #24
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	4603      	mov	r3, r0
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004da4:	f7ff ff42 	bl	8004c2c <__NVIC_GetPriorityGrouping>
 8004da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f7ff ff90 	bl	8004cd4 <NVIC_EncodePriority>
 8004db4:	4602      	mov	r2, r0
 8004db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff ff5f 	bl	8004c80 <__NVIC_SetPriority>
}
 8004dc2:	bf00      	nop
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ff35 	bl	8004c48 <__NVIC_EnableIRQ>
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ffa2 	bl	8004d38 <SysTick_Config>
 8004df4:	4603      	mov	r3, r0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e043      	b.n	8004e9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <HAL_DMA_Init+0xa8>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_DMA_Init+0xac>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	009a      	lsls	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <HAL_DMA_Init+0xb0>)
 8004e32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	bffdfff8 	.word	0xbffdfff8
 8004eac:	cccccccd 	.word	0xcccccccd
 8004eb0:	40020000 	.word	0x40020000

08004eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_DMA_Start_IT+0x20>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e04a      	b.n	8004f6a <HAL_DMA_Start_IT+0xb6>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d13a      	bne.n	8004f5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f9ae 	bl	800526c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 020e 	orr.w	r2, r2, #14
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e00f      	b.n	8004f4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0204 	bic.w	r2, r2, #4
 8004f38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 020a 	orr.w	r2, r2, #10
 8004f48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e005      	b.n	8004f68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
 8004f66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d005      	beq.n	8004f96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e051      	b.n	800503a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 020e 	bic.w	r2, r2, #14
 8004fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <HAL_DMA_Abort_IT+0xd0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d029      	beq.n	8005014 <HAL_DMA_Abort_IT+0xa0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	; (8005048 <HAL_DMA_Abort_IT+0xd4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_DMA_Abort_IT+0x9c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1f      	ldr	r2, [pc, #124]	; (800504c <HAL_DMA_Abort_IT+0xd8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d01a      	beq.n	800500a <HAL_DMA_Abort_IT+0x96>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_DMA_Abort_IT+0xdc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d012      	beq.n	8005004 <HAL_DMA_Abort_IT+0x90>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_DMA_Abort_IT+0xe0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00a      	beq.n	8004ffe <HAL_DMA_Abort_IT+0x8a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <HAL_DMA_Abort_IT+0xe4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d102      	bne.n	8004ff8 <HAL_DMA_Abort_IT+0x84>
 8004ff2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ff6:	e00e      	b.n	8005016 <HAL_DMA_Abort_IT+0xa2>
 8004ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ffc:	e00b      	b.n	8005016 <HAL_DMA_Abort_IT+0xa2>
 8004ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005002:	e008      	b.n	8005016 <HAL_DMA_Abort_IT+0xa2>
 8005004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005008:	e005      	b.n	8005016 <HAL_DMA_Abort_IT+0xa2>
 800500a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800500e:	e002      	b.n	8005016 <HAL_DMA_Abort_IT+0xa2>
 8005010:	2310      	movs	r3, #16
 8005012:	e000      	b.n	8005016 <HAL_DMA_Abort_IT+0xa2>
 8005014:	2301      	movs	r3, #1
 8005016:	4a11      	ldr	r2, [pc, #68]	; (800505c <HAL_DMA_Abort_IT+0xe8>)
 8005018:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
    } 
  }
  return status;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40020008 	.word	0x40020008
 8005048:	4002001c 	.word	0x4002001c
 800504c:	40020030 	.word	0x40020030
 8005050:	40020044 	.word	0x40020044
 8005054:	40020058 	.word	0x40020058
 8005058:	4002006c 	.word	0x4002006c
 800505c:	40020000 	.word	0x40020000

08005060 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2204      	movs	r2, #4
 800507e:	409a      	lsls	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d04f      	beq.n	8005128 <HAL_DMA_IRQHandler+0xc8>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04a      	beq.n	8005128 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a66      	ldr	r2, [pc, #408]	; (8005250 <HAL_DMA_IRQHandler+0x1f0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d029      	beq.n	800510e <HAL_DMA_IRQHandler+0xae>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a65      	ldr	r2, [pc, #404]	; (8005254 <HAL_DMA_IRQHandler+0x1f4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_DMA_IRQHandler+0xaa>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a63      	ldr	r2, [pc, #396]	; (8005258 <HAL_DMA_IRQHandler+0x1f8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01a      	beq.n	8005104 <HAL_DMA_IRQHandler+0xa4>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a62      	ldr	r2, [pc, #392]	; (800525c <HAL_DMA_IRQHandler+0x1fc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d012      	beq.n	80050fe <HAL_DMA_IRQHandler+0x9e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a60      	ldr	r2, [pc, #384]	; (8005260 <HAL_DMA_IRQHandler+0x200>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00a      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x98>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5f      	ldr	r2, [pc, #380]	; (8005264 <HAL_DMA_IRQHandler+0x204>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d102      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x92>
 80050ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050f0:	e00e      	b.n	8005110 <HAL_DMA_IRQHandler+0xb0>
 80050f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050f6:	e00b      	b.n	8005110 <HAL_DMA_IRQHandler+0xb0>
 80050f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050fc:	e008      	b.n	8005110 <HAL_DMA_IRQHandler+0xb0>
 80050fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005102:	e005      	b.n	8005110 <HAL_DMA_IRQHandler+0xb0>
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005108:	e002      	b.n	8005110 <HAL_DMA_IRQHandler+0xb0>
 800510a:	2340      	movs	r3, #64	; 0x40
 800510c:	e000      	b.n	8005110 <HAL_DMA_IRQHandler+0xb0>
 800510e:	2304      	movs	r3, #4
 8005110:	4a55      	ldr	r2, [pc, #340]	; (8005268 <HAL_DMA_IRQHandler+0x208>)
 8005112:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8094 	beq.w	8005246 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005126:	e08e      	b.n	8005246 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2202      	movs	r2, #2
 800512e:	409a      	lsls	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d056      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x186>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d051      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 020a 	bic.w	r2, r2, #10
 800515e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a38      	ldr	r2, [pc, #224]	; (8005250 <HAL_DMA_IRQHandler+0x1f0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d029      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x166>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a37      	ldr	r2, [pc, #220]	; (8005254 <HAL_DMA_IRQHandler+0x1f4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x162>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a35      	ldr	r2, [pc, #212]	; (8005258 <HAL_DMA_IRQHandler+0x1f8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01a      	beq.n	80051bc <HAL_DMA_IRQHandler+0x15c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a34      	ldr	r2, [pc, #208]	; (800525c <HAL_DMA_IRQHandler+0x1fc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d012      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x156>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a32      	ldr	r2, [pc, #200]	; (8005260 <HAL_DMA_IRQHandler+0x200>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00a      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x150>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a31      	ldr	r2, [pc, #196]	; (8005264 <HAL_DMA_IRQHandler+0x204>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d102      	bne.n	80051aa <HAL_DMA_IRQHandler+0x14a>
 80051a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051a8:	e00e      	b.n	80051c8 <HAL_DMA_IRQHandler+0x168>
 80051aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ae:	e00b      	b.n	80051c8 <HAL_DMA_IRQHandler+0x168>
 80051b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b4:	e008      	b.n	80051c8 <HAL_DMA_IRQHandler+0x168>
 80051b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051ba:	e005      	b.n	80051c8 <HAL_DMA_IRQHandler+0x168>
 80051bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c0:	e002      	b.n	80051c8 <HAL_DMA_IRQHandler+0x168>
 80051c2:	2320      	movs	r3, #32
 80051c4:	e000      	b.n	80051c8 <HAL_DMA_IRQHandler+0x168>
 80051c6:	2302      	movs	r3, #2
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <HAL_DMA_IRQHandler+0x208>)
 80051ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d034      	beq.n	8005246 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80051e4:	e02f      	b.n	8005246 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	2208      	movs	r2, #8
 80051ec:	409a      	lsls	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d028      	beq.n	8005248 <HAL_DMA_IRQHandler+0x1e8>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d023      	beq.n	8005248 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 020e 	bic.w	r2, r2, #14
 800520e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
    }
  }
  return;
 8005246:	bf00      	nop
 8005248:	bf00      	nop
}
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40020008 	.word	0x40020008
 8005254:	4002001c 	.word	0x4002001c
 8005258:	40020030 	.word	0x40020030
 800525c:	40020044 	.word	0x40020044
 8005260:	40020058 	.word	0x40020058
 8005264:	4002006c 	.word	0x4002006c
 8005268:	40020000 	.word	0x40020000

0800526c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	2101      	movs	r1, #1
 8005284:	fa01 f202 	lsl.w	r2, r1, r2
 8005288:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b10      	cmp	r3, #16
 8005298:	d108      	bne.n	80052ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052aa:	e007      	b.n	80052bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08b      	sub	sp, #44	; 0x2c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052d2:	2300      	movs	r3, #0
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052da:	e127      	b.n	800552c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80052dc:	2201      	movs	r2, #1
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	f040 8116 	bne.w	8005526 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b12      	cmp	r3, #18
 8005300:	d034      	beq.n	800536c <HAL_GPIO_Init+0xa4>
 8005302:	2b12      	cmp	r3, #18
 8005304:	d80d      	bhi.n	8005322 <HAL_GPIO_Init+0x5a>
 8005306:	2b02      	cmp	r3, #2
 8005308:	d02b      	beq.n	8005362 <HAL_GPIO_Init+0x9a>
 800530a:	2b02      	cmp	r3, #2
 800530c:	d804      	bhi.n	8005318 <HAL_GPIO_Init+0x50>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d031      	beq.n	8005376 <HAL_GPIO_Init+0xae>
 8005312:	2b01      	cmp	r3, #1
 8005314:	d01c      	beq.n	8005350 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005316:	e048      	b.n	80053aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005318:	2b03      	cmp	r3, #3
 800531a:	d043      	beq.n	80053a4 <HAL_GPIO_Init+0xdc>
 800531c:	2b11      	cmp	r3, #17
 800531e:	d01b      	beq.n	8005358 <HAL_GPIO_Init+0x90>
          break;
 8005320:	e043      	b.n	80053aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005322:	4a89      	ldr	r2, [pc, #548]	; (8005548 <HAL_GPIO_Init+0x280>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d026      	beq.n	8005376 <HAL_GPIO_Init+0xae>
 8005328:	4a87      	ldr	r2, [pc, #540]	; (8005548 <HAL_GPIO_Init+0x280>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d806      	bhi.n	800533c <HAL_GPIO_Init+0x74>
 800532e:	4a87      	ldr	r2, [pc, #540]	; (800554c <HAL_GPIO_Init+0x284>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d020      	beq.n	8005376 <HAL_GPIO_Init+0xae>
 8005334:	4a86      	ldr	r2, [pc, #536]	; (8005550 <HAL_GPIO_Init+0x288>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_GPIO_Init+0xae>
          break;
 800533a:	e036      	b.n	80053aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800533c:	4a85      	ldr	r2, [pc, #532]	; (8005554 <HAL_GPIO_Init+0x28c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d019      	beq.n	8005376 <HAL_GPIO_Init+0xae>
 8005342:	4a85      	ldr	r2, [pc, #532]	; (8005558 <HAL_GPIO_Init+0x290>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d016      	beq.n	8005376 <HAL_GPIO_Init+0xae>
 8005348:	4a84      	ldr	r2, [pc, #528]	; (800555c <HAL_GPIO_Init+0x294>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_GPIO_Init+0xae>
          break;
 800534e:	e02c      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	623b      	str	r3, [r7, #32]
          break;
 8005356:	e028      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	3304      	adds	r3, #4
 800535e:	623b      	str	r3, [r7, #32]
          break;
 8005360:	e023      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	3308      	adds	r3, #8
 8005368:	623b      	str	r3, [r7, #32]
          break;
 800536a:	e01e      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	330c      	adds	r3, #12
 8005372:	623b      	str	r3, [r7, #32]
          break;
 8005374:	e019      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800537e:	2304      	movs	r3, #4
 8005380:	623b      	str	r3, [r7, #32]
          break;
 8005382:	e012      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800538c:	2308      	movs	r3, #8
 800538e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	611a      	str	r2, [r3, #16]
          break;
 8005396:	e008      	b.n	80053aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005398:	2308      	movs	r3, #8
 800539a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	615a      	str	r2, [r3, #20]
          break;
 80053a2:	e002      	b.n	80053aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80053a4:	2300      	movs	r3, #0
 80053a6:	623b      	str	r3, [r7, #32]
          break;
 80053a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2bff      	cmp	r3, #255	; 0xff
 80053ae:	d801      	bhi.n	80053b4 <HAL_GPIO_Init+0xec>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	e001      	b.n	80053b8 <HAL_GPIO_Init+0xf0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2bff      	cmp	r3, #255	; 0xff
 80053be:	d802      	bhi.n	80053c6 <HAL_GPIO_Init+0xfe>
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	e002      	b.n	80053cc <HAL_GPIO_Init+0x104>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	3b08      	subs	r3, #8
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	210f      	movs	r1, #15
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	401a      	ands	r2, r3
 80053de:	6a39      	ldr	r1, [r7, #32]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	431a      	orrs	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8096 	beq.w	8005526 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80053fa:	4b59      	ldr	r3, [pc, #356]	; (8005560 <HAL_GPIO_Init+0x298>)
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	4a58      	ldr	r2, [pc, #352]	; (8005560 <HAL_GPIO_Init+0x298>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6193      	str	r3, [r2, #24]
 8005406:	4b56      	ldr	r3, [pc, #344]	; (8005560 <HAL_GPIO_Init+0x298>)
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005412:	4a54      	ldr	r2, [pc, #336]	; (8005564 <HAL_GPIO_Init+0x29c>)
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	3302      	adds	r3, #2
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	220f      	movs	r2, #15
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4013      	ands	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a4b      	ldr	r2, [pc, #300]	; (8005568 <HAL_GPIO_Init+0x2a0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_GPIO_Init+0x19e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <HAL_GPIO_Init+0x2a4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00d      	beq.n	8005462 <HAL_GPIO_Init+0x19a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a49      	ldr	r2, [pc, #292]	; (8005570 <HAL_GPIO_Init+0x2a8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <HAL_GPIO_Init+0x196>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a48      	ldr	r2, [pc, #288]	; (8005574 <HAL_GPIO_Init+0x2ac>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d101      	bne.n	800545a <HAL_GPIO_Init+0x192>
 8005456:	2303      	movs	r3, #3
 8005458:	e006      	b.n	8005468 <HAL_GPIO_Init+0x1a0>
 800545a:	2304      	movs	r3, #4
 800545c:	e004      	b.n	8005468 <HAL_GPIO_Init+0x1a0>
 800545e:	2302      	movs	r3, #2
 8005460:	e002      	b.n	8005468 <HAL_GPIO_Init+0x1a0>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <HAL_GPIO_Init+0x1a0>
 8005466:	2300      	movs	r3, #0
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	f002 0203 	and.w	r2, r2, #3
 800546e:	0092      	lsls	r2, r2, #2
 8005470:	4093      	lsls	r3, r2
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005478:	493a      	ldr	r1, [pc, #232]	; (8005564 <HAL_GPIO_Init+0x29c>)
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	3302      	adds	r3, #2
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4938      	ldr	r1, [pc, #224]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
 800549e:	e006      	b.n	80054ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	43db      	mvns	r3, r3
 80054a8:	4933      	ldr	r1, [pc, #204]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	492e      	ldr	r1, [pc, #184]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
 80054c6:	e006      	b.n	80054d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	43db      	mvns	r3, r3
 80054d0:	4929      	ldr	r1, [pc, #164]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80054e2:	4b25      	ldr	r3, [pc, #148]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	4924      	ldr	r1, [pc, #144]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
 80054ee:	e006      	b.n	80054fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	43db      	mvns	r3, r3
 80054f8:	491f      	ldr	r1, [pc, #124]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	491a      	ldr	r1, [pc, #104]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	4313      	orrs	r3, r2
 8005514:	60cb      	str	r3, [r1, #12]
 8005516:	e006      	b.n	8005526 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	43db      	mvns	r3, r3
 8005520:	4915      	ldr	r1, [pc, #84]	; (8005578 <HAL_GPIO_Init+0x2b0>)
 8005522:	4013      	ands	r3, r2
 8005524:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	3301      	adds	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	f47f aed0 	bne.w	80052dc <HAL_GPIO_Init+0x14>
  }
}
 800553c:	bf00      	nop
 800553e:	372c      	adds	r7, #44	; 0x2c
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	10210000 	.word	0x10210000
 800554c:	10110000 	.word	0x10110000
 8005550:	10120000 	.word	0x10120000
 8005554:	10310000 	.word	0x10310000
 8005558:	10320000 	.word	0x10320000
 800555c:	10220000 	.word	0x10220000
 8005560:	40021000 	.word	0x40021000
 8005564:	40010000 	.word	0x40010000
 8005568:	40010800 	.word	0x40010800
 800556c:	40010c00 	.word	0x40010c00
 8005570:	40011000 	.word	0x40011000
 8005574:	40011400 	.word	0x40011400
 8005578:	40010400 	.word	0x40010400

0800557c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	e001      	b.n	800559e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	807b      	strh	r3, [r7, #2]
 80055b6:	4613      	mov	r3, r2
 80055b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055ba:	787b      	ldrb	r3, [r7, #1]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055c0:	887a      	ldrh	r2, [r7, #2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80055c6:	e003      	b.n	80055d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80055c8:	887b      	ldrh	r3, [r7, #2]
 80055ca:	041a      	lsls	r2, r3, #16
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	611a      	str	r2, [r3, #16]
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e11f      	b.n	800582e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fe ff4a 	bl	800449c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	; 0x24
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800562e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800563e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005640:	f002 f838 	bl	80076b4 <HAL_RCC_GetPCLK1Freq>
 8005644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4a7b      	ldr	r2, [pc, #492]	; (8005838 <HAL_I2C_Init+0x25c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d807      	bhi.n	8005660 <HAL_I2C_Init+0x84>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a7a      	ldr	r2, [pc, #488]	; (800583c <HAL_I2C_Init+0x260>)
 8005654:	4293      	cmp	r3, r2
 8005656:	bf94      	ite	ls
 8005658:	2301      	movls	r3, #1
 800565a:	2300      	movhi	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e006      	b.n	800566e <HAL_I2C_Init+0x92>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a77      	ldr	r2, [pc, #476]	; (8005840 <HAL_I2C_Init+0x264>)
 8005664:	4293      	cmp	r3, r2
 8005666:	bf94      	ite	ls
 8005668:	2301      	movls	r3, #1
 800566a:	2300      	movhi	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e0db      	b.n	800582e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a72      	ldr	r2, [pc, #456]	; (8005844 <HAL_I2C_Init+0x268>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0c9b      	lsrs	r3, r3, #18
 8005680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a64      	ldr	r2, [pc, #400]	; (8005838 <HAL_I2C_Init+0x25c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d802      	bhi.n	80056b0 <HAL_I2C_Init+0xd4>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3301      	adds	r3, #1
 80056ae:	e009      	b.n	80056c4 <HAL_I2C_Init+0xe8>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	4a63      	ldr	r2, [pc, #396]	; (8005848 <HAL_I2C_Init+0x26c>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	3301      	adds	r3, #1
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4956      	ldr	r1, [pc, #344]	; (8005838 <HAL_I2C_Init+0x25c>)
 80056e0:	428b      	cmp	r3, r1
 80056e2:	d80d      	bhi.n	8005700 <HAL_I2C_Init+0x124>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1e59      	subs	r1, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80056f2:	3301      	adds	r3, #1
 80056f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	bf38      	it	cc
 80056fc:	2304      	movcc	r3, #4
 80056fe:	e04f      	b.n	80057a0 <HAL_I2C_Init+0x1c4>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <HAL_I2C_Init+0x150>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1e58      	subs	r0, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	440b      	add	r3, r1
 8005716:	fbb0 f3f3 	udiv	r3, r0, r3
 800571a:	3301      	adds	r3, #1
 800571c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005720:	2b00      	cmp	r3, #0
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e012      	b.n	8005752 <HAL_I2C_Init+0x176>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1e58      	subs	r0, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	0099      	lsls	r1, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005742:	3301      	adds	r3, #1
 8005744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005748:	2b00      	cmp	r3, #0
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Init+0x17e>
 8005756:	2301      	movs	r3, #1
 8005758:	e022      	b.n	80057a0 <HAL_I2C_Init+0x1c4>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10e      	bne.n	8005780 <HAL_I2C_Init+0x1a4>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1e58      	subs	r0, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	440b      	add	r3, r1
 8005770:	fbb0 f3f3 	udiv	r3, r0, r3
 8005774:	3301      	adds	r3, #1
 8005776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577e:	e00f      	b.n	80057a0 <HAL_I2C_Init+0x1c4>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1e58      	subs	r0, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6859      	ldr	r1, [r3, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	0099      	lsls	r1, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	fbb0 f3f3 	udiv	r3, r0, r3
 8005796:	3301      	adds	r3, #1
 8005798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6809      	ldr	r1, [r1, #0]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6911      	ldr	r1, [r2, #16]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68d2      	ldr	r2, [r2, #12]
 80057da:	4311      	orrs	r1, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	000186a0 	.word	0x000186a0
 800583c:	001e847f 	.word	0x001e847f
 8005840:	003d08ff 	.word	0x003d08ff
 8005844:	431bde83 	.word	0x431bde83
 8005848:	10624dd3 	.word	0x10624dd3

0800584c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	461a      	mov	r2, r3
 8005858:	460b      	mov	r3, r1
 800585a:	817b      	strh	r3, [r7, #10]
 800585c:	4613      	mov	r3, r2
 800585e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005860:	f7ff f994 	bl	8004b8c <HAL_GetTick>
 8005864:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b20      	cmp	r3, #32
 8005870:	f040 80e0 	bne.w	8005a34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2319      	movs	r3, #25
 800587a:	2201      	movs	r2, #1
 800587c:	4970      	ldr	r1, [pc, #448]	; (8005a40 <HAL_I2C_Master_Transmit+0x1f4>)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f001 f966 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	e0d3      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_I2C_Master_Transmit+0x50>
 8005898:	2302      	movs	r3, #2
 800589a:	e0cc      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d007      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2221      	movs	r2, #33	; 0x21
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2210      	movs	r2, #16
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	893a      	ldrh	r2, [r7, #8]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a50      	ldr	r2, [pc, #320]	; (8005a44 <HAL_I2C_Master_Transmit+0x1f8>)
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fe52 	bl	80065b4 <I2C_MasterRequestWrite>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e08d      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005930:	e066      	b.n	8005a00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6a39      	ldr	r1, [r7, #32]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f001 f9e0 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b04      	cmp	r3, #4
 8005948:	d107      	bne.n	800595a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e06b      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d11b      	bne.n	80059d4 <HAL_I2C_Master_Transmit+0x188>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	6a39      	ldr	r1, [r7, #32]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f001 f9d0 	bl	8006d7e <I2C_WaitOnBTFFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d107      	bne.n	80059fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e01a      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d194      	bne.n	8005932 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	00100002 	.word	0x00100002
 8005a44:	ffff0000 	.word	0xffff0000

08005a48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	461a      	mov	r2, r3
 8005a54:	460b      	mov	r3, r1
 8005a56:	817b      	strh	r3, [r7, #10]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a60:	f7ff f894 	bl	8004b8c <HAL_GetTick>
 8005a64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	f040 8238 	bne.w	8005ee4 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	2319      	movs	r3, #25
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	497e      	ldr	r1, [pc, #504]	; (8005c78 <HAL_I2C_Master_Receive+0x230>)
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f001 f866 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e22b      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_I2C_Master_Receive+0x54>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e224      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d007      	beq.n	8005ac2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2222      	movs	r2, #34	; 0x22
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2210      	movs	r2, #16
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	893a      	ldrh	r2, [r7, #8]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4a5e      	ldr	r2, [pc, #376]	; (8005c7c <HAL_I2C_Master_Receive+0x234>)
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b04:	8979      	ldrh	r1, [r7, #10]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fdd4 	bl	80066b8 <I2C_MasterRequestRead>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e1e5      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d113      	bne.n	8005b4a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e1b9      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d11d      	bne.n	8005b8e <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b62:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b8a:	b662      	cpsie	i
 8005b8c:	e197      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d11d      	bne.n	8005bd2 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ba6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bce:	b662      	cpsie	i
 8005bd0:	e175      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005bf8:	e161      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	f200 811a 	bhi.w	8005e38 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d123      	bne.n	8005c54 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 f8f5 	bl	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e162      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c52:	e134      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d150      	bne.n	8005cfe <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	2200      	movs	r2, #0
 8005c64:	4906      	ldr	r1, [pc, #24]	; (8005c80 <HAL_I2C_Master_Receive+0x238>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 ff72 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e137      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
 8005c76:	bf00      	nop
 8005c78:	00100002 	.word	0x00100002
 8005c7c:	ffff0000 	.word	0xffff0000
 8005c80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005c84:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c94:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cc8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cfc:	e0df      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2200      	movs	r2, #0
 8005d06:	497a      	ldr	r1, [pc, #488]	; (8005ef0 <HAL_I2C_Master_Receive+0x4a8>)
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 ff21 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0e6      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d28:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d5c:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_I2C_Master_Receive+0x4ac>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	08db      	lsrs	r3, r3, #3
 8005d62:	4a65      	ldr	r2, [pc, #404]	; (8005ef8 <HAL_I2C_Master_Receive+0x4b0>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	0a1a      	lsrs	r2, r3, #8
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	00da      	lsls	r2, r3, #3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d117      	bne.n	8005db2 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005da4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e099      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d1da      	bne.n	8005d76 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e02:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e36:	e042      	b.n	8005ebe <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 ffdf 	bl	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e04c      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d118      	bne.n	8005ebe <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f47f ae99 	bne.w	8005bfa <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	; 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	00010004 	.word	0x00010004
 8005ef4:	20000040 	.word	0x20000040
 8005ef8:	14f8b589 	.word	0x14f8b589

08005efc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	817b      	strh	r3, [r7, #10]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	813b      	strh	r3, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f16:	f7fe fe39 	bl	8004b8c <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	f040 80d9 	bne.w	80060dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	2319      	movs	r3, #25
 8005f30:	2201      	movs	r2, #1
 8005f32:	496d      	ldr	r1, [pc, #436]	; (80060e8 <HAL_I2C_Mem_Write+0x1ec>)
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fe0b 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0cc      	b.n	80060de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2C_Mem_Write+0x56>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0c5      	b.n	80060de <HAL_I2C_Mem_Write+0x1e2>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d007      	beq.n	8005f78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2221      	movs	r2, #33	; 0x21
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2240      	movs	r2, #64	; 0x40
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4a4d      	ldr	r2, [pc, #308]	; (80060ec <HAL_I2C_Mem_Write+0x1f0>)
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fba:	88f8      	ldrh	r0, [r7, #6]
 8005fbc:	893a      	ldrh	r2, [r7, #8]
 8005fbe:	8979      	ldrh	r1, [r7, #10]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	4603      	mov	r3, r0
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fc42 	bl	8006854 <I2C_RequestMemoryWrite>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d052      	beq.n	800607c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e081      	b.n	80060de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fe8c 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d107      	bne.n	8006002 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e06b      	b.n	80060de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b04      	cmp	r3, #4
 8006042:	d11b      	bne.n	800607c <HAL_I2C_Mem_Write+0x180>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d017      	beq.n	800607c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1aa      	bne.n	8005fda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fe78 	bl	8006d7e <I2C_WaitOnBTFFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	2b04      	cmp	r3, #4
 800609a:	d107      	bne.n	80060ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e016      	b.n	80060de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e000      	b.n	80060de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060dc:	2302      	movs	r3, #2
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	00100002 	.word	0x00100002
 80060ec:	ffff0000 	.word	0xffff0000

080060f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	461a      	mov	r2, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	460b      	mov	r3, r1
 8006104:	813b      	strh	r3, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800610e:	f7fe fd3d 	bl	8004b8c <HAL_GetTick>
 8006112:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b20      	cmp	r3, #32
 800611e:	f040 823d 	bne.w	800659c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	2319      	movs	r3, #25
 8006128:	2201      	movs	r2, #1
 800612a:	4981      	ldr	r1, [pc, #516]	; (8006330 <HAL_I2C_Mem_Read+0x240>)
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fd0f 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006138:	2302      	movs	r3, #2
 800613a:	e230      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_I2C_Mem_Read+0x5a>
 8006146:	2302      	movs	r3, #2
 8006148:	e229      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	d007      	beq.n	8006170 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800617e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2222      	movs	r2, #34	; 0x22
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a61      	ldr	r2, [pc, #388]	; (8006334 <HAL_I2C_Mem_Read+0x244>)
 80061b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061b2:	88f8      	ldrh	r0, [r7, #6]
 80061b4:	893a      	ldrh	r2, [r7, #8]
 80061b6:	8979      	ldrh	r1, [r7, #10]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fbdc 	bl	8006980 <I2C_RequestMemoryRead>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e1e5      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d113      	bne.n	8006202 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	61fb      	str	r3, [r7, #28]
 80061ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e1b9      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	2b01      	cmp	r3, #1
 8006208:	d11d      	bne.n	8006246 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006218:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800621a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006240:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006242:	b662      	cpsie	i
 8006244:	e197      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	2b02      	cmp	r3, #2
 800624c:	d11d      	bne.n	800628a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800625e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006284:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006286:	b662      	cpsie	i
 8006288:	e175      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006298:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629a:	2300      	movs	r3, #0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80062b0:	e161      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f200 811a 	bhi.w	80064f0 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d123      	bne.n	800630c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 fd99 	bl	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e162      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800630a:	e134      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006310:	2b02      	cmp	r3, #2
 8006312:	d150      	bne.n	80063b6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	2200      	movs	r2, #0
 800631c:	4906      	ldr	r1, [pc, #24]	; (8006338 <HAL_I2C_Mem_Read+0x248>)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fc16 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e137      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
 800632e:	bf00      	nop
 8006330:	00100002 	.word	0x00100002
 8006334:	ffff0000 	.word	0xffff0000
 8006338:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800633c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006380:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063b4:	e0df      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	2200      	movs	r2, #0
 80063be:	497a      	ldr	r1, [pc, #488]	; (80065a8 <HAL_I2C_Mem_Read+0x4b8>)
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fbc5 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0e6      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006414:	4b65      	ldr	r3, [pc, #404]	; (80065ac <HAL_I2C_Mem_Read+0x4bc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	08db      	lsrs	r3, r3, #3
 800641a:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_I2C_Mem_Read+0x4c0>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	0a1a      	lsrs	r2, r3, #8
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	00da      	lsls	r2, r3, #3
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	3b01      	subs	r3, #1
 8006432:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d117      	bne.n	800646a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	f043 0220 	orr.w	r2, r3, #32
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800645c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e099      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b04      	cmp	r3, #4
 8006476:	d1da      	bne.n	800642e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ba:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ee:	e042      	b.n	8006576 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fc83 	bl	8006e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e04c      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d118      	bne.n	8006576 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	f47f ae99 	bne.w	80062b2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3728      	adds	r7, #40	; 0x28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	00010004 	.word	0x00010004
 80065ac:	20000040 	.word	0x20000040
 80065b0:	14f8b589 	.word	0x14f8b589

080065b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	460b      	mov	r3, r1
 80065c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d006      	beq.n	80065de <I2C_MasterRequestWrite+0x2a>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d003      	beq.n	80065de <I2C_MasterRequestWrite+0x2a>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065dc:	d108      	bne.n	80065f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e00b      	b.n	8006608 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	2b12      	cmp	r3, #18
 80065f6:	d107      	bne.n	8006608 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fa9b 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d103      	bne.n	8006638 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e035      	b.n	80066a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006644:	d108      	bne.n	8006658 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006646:	897b      	ldrh	r3, [r7, #10]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006654:	611a      	str	r2, [r3, #16]
 8006656:	e01b      	b.n	8006690 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006658:	897b      	ldrh	r3, [r7, #10]
 800665a:	11db      	asrs	r3, r3, #7
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0306 	and.w	r3, r3, #6
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f063 030f 	orn	r3, r3, #15
 8006668:	b2da      	uxtb	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	490e      	ldr	r1, [pc, #56]	; (80066b0 <I2C_MasterRequestWrite+0xfc>)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fac1 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e010      	b.n	80066a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006686:	897b      	ldrh	r3, [r7, #10]
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4907      	ldr	r1, [pc, #28]	; (80066b4 <I2C_MasterRequestWrite+0x100>)
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fab1 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	00010008 	.word	0x00010008
 80066b4:	00010002 	.word	0x00010002

080066b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	460b      	mov	r3, r1
 80066c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d006      	beq.n	80066f2 <I2C_MasterRequestRead+0x3a>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d003      	beq.n	80066f2 <I2C_MasterRequestRead+0x3a>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066f0:	d108      	bne.n	8006704 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e00b      	b.n	800671c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	2b11      	cmp	r3, #17
 800670a:	d107      	bne.n	800671c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800671a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fa11 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00d      	beq.n	8006750 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006742:	d103      	bne.n	800674c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e079      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006758:	d108      	bne.n	800676c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800675a:	897b      	ldrh	r3, [r7, #10]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	611a      	str	r2, [r3, #16]
 800676a:	e05f      	b.n	800682c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800676c:	897b      	ldrh	r3, [r7, #10]
 800676e:	11db      	asrs	r3, r3, #7
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f063 030f 	orn	r3, r3, #15
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4930      	ldr	r1, [pc, #192]	; (800684c <I2C_MasterRequestRead+0x194>)
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fa37 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e054      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800679a:	897b      	ldrh	r3, [r7, #10]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4929      	ldr	r1, [pc, #164]	; (8006850 <I2C_MasterRequestRead+0x198>)
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fa27 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e044      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f9af 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00d      	beq.n	8006814 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006806:	d103      	bne.n	8006810 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800680e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e017      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006814:	897b      	ldrh	r3, [r7, #10]
 8006816:	11db      	asrs	r3, r3, #7
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0306 	and.w	r3, r3, #6
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f063 030e 	orn	r3, r3, #14
 8006824:	b2da      	uxtb	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	4907      	ldr	r1, [pc, #28]	; (8006850 <I2C_MasterRequestRead+0x198>)
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f9e3 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	00010008 	.word	0x00010008
 8006850:	00010002 	.word	0x00010002

08006854 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	461a      	mov	r2, r3
 8006862:	4603      	mov	r3, r0
 8006864:	817b      	strh	r3, [r7, #10]
 8006866:	460b      	mov	r3, r1
 8006868:	813b      	strh	r3, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800687c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	2200      	movs	r2, #0
 8006886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f960 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a4:	d103      	bne.n	80068ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e05f      	b.n	8006972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	6a3a      	ldr	r2, [r7, #32]
 80068c6:	492d      	ldr	r1, [pc, #180]	; (800697c <I2C_RequestMemoryWrite+0x128>)
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f998 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e04c      	b.n	8006972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f0:	6a39      	ldr	r1, [r7, #32]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fa02 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b04      	cmp	r3, #4
 8006904:	d107      	bne.n	8006916 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e02b      	b.n	8006972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800691a:	88fb      	ldrh	r3, [r7, #6]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d105      	bne.n	800692c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006920:	893b      	ldrh	r3, [r7, #8]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	611a      	str	r2, [r3, #16]
 800692a:	e021      	b.n	8006970 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800692c:	893b      	ldrh	r3, [r7, #8]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	b29b      	uxth	r3, r3
 8006932:	b2da      	uxtb	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	6a39      	ldr	r1, [r7, #32]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f9dc 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b04      	cmp	r3, #4
 8006950:	d107      	bne.n	8006962 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006960:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e005      	b.n	8006972 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006966:	893b      	ldrh	r3, [r7, #8]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	00010002 	.word	0x00010002

08006980 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	461a      	mov	r2, r3
 800698e:	4603      	mov	r3, r0
 8006990:	817b      	strh	r3, [r7, #10]
 8006992:	460b      	mov	r3, r1
 8006994:	813b      	strh	r3, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f8c2 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00d      	beq.n	80069ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e0:	d103      	bne.n	80069ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0aa      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069ee:	897b      	ldrh	r3, [r7, #10]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	6a3a      	ldr	r2, [r7, #32]
 8006a02:	4952      	ldr	r1, [pc, #328]	; (8006b4c <I2C_RequestMemoryRead+0x1cc>)
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f8fa 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e097      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2c:	6a39      	ldr	r1, [r7, #32]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f964 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00d      	beq.n	8006a56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d107      	bne.n	8006a52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e076      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a5c:	893b      	ldrh	r3, [r7, #8]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	611a      	str	r2, [r3, #16]
 8006a66:	e021      	b.n	8006aac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a68:	893b      	ldrh	r3, [r7, #8]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f93e 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d107      	bne.n	8006a9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e050      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa2:	893b      	ldrh	r3, [r7, #8]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aae:	6a39      	ldr	r1, [r7, #32]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f923 	bl	8006cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00d      	beq.n	8006ad8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d107      	bne.n	8006ad4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e035      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f82b 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00d      	beq.n	8006b1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0e:	d103      	bne.n	8006b18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e013      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b1c:	897b      	ldrh	r3, [r7, #10]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	4906      	ldr	r1, [pc, #24]	; (8006b4c <I2C_RequestMemoryRead+0x1cc>)
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f863 	bl	8006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	00010002 	.word	0x00010002

08006b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b60:	e025      	b.n	8006bae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b68:	d021      	beq.n	8006bae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6a:	f7fe f80f 	bl	8004b8c <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d302      	bcc.n	8006b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d116      	bne.n	8006bae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e023      	b.n	8006bf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10d      	bne.n	8006bd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	43da      	mvns	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	e00c      	b.n	8006bee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf0c      	ite	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	2300      	movne	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d0b6      	beq.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c0c:	e051      	b.n	8006cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1c:	d123      	bne.n	8006c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f043 0204 	orr.w	r2, r3, #4
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e046      	b.n	8006cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c6c:	d021      	beq.n	8006cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6e:	f7fd ff8d 	bl	8004b8c <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d116      	bne.n	8006cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e020      	b.n	8006cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10c      	bne.n	8006cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bf14      	ite	ne
 8006cce:	2301      	movne	r3, #1
 8006cd0:	2300      	moveq	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	e00b      	b.n	8006cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	43da      	mvns	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d18d      	bne.n	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d08:	e02d      	b.n	8006d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f8ce 	bl	8006eac <I2C_IsAcknowledgeFailed>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e02d      	b.n	8006d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d20:	d021      	beq.n	8006d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d22:	f7fd ff33 	bl	8004b8c <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d116      	bne.n	8006d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e007      	b.n	8006d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d1ca      	bne.n	8006d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d8a:	e02d      	b.n	8006de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f88d 	bl	8006eac <I2C_IsAcknowledgeFailed>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e02d      	b.n	8006df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da2:	d021      	beq.n	8006de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da4:	f7fd fef2 	bl	8004b8c <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d302      	bcc.n	8006dba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d116      	bne.n	8006de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	f043 0220 	orr.w	r2, r3, #32
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e007      	b.n	8006df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d1ca      	bne.n	8006d8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e0c:	e042      	b.n	8006e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d119      	bne.n	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0210 	mvn.w	r2, #16
 8006e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e029      	b.n	8006ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e50:	f7fd fe9c 	bl	8004b8c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d116      	bne.n	8006e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e007      	b.n	8006ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b40      	cmp	r3, #64	; 0x40
 8006ea0:	d1b5      	bne.n	8006e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec2:	d11b      	bne.n	8006efc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ecc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	f043 0204 	orr.w	r2, r3, #4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e000      	b.n	8006efe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e26c      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8087 	beq.w	8007036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f28:	4b92      	ldr	r3, [pc, #584]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f34:	4b8f      	ldr	r3, [pc, #572]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d112      	bne.n	8006f66 <HAL_RCC_OscConfig+0x5e>
 8006f40:	4b8c      	ldr	r3, [pc, #560]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f4c:	d10b      	bne.n	8006f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f4e:	4b89      	ldr	r3, [pc, #548]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d06c      	beq.n	8007034 <HAL_RCC_OscConfig+0x12c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d168      	bne.n	8007034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e246      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCC_OscConfig+0x76>
 8006f70:	4b80      	ldr	r3, [pc, #512]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a7f      	ldr	r2, [pc, #508]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e02e      	b.n	8006fdc <HAL_RCC_OscConfig+0xd4>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x98>
 8006f86:	4b7b      	ldr	r3, [pc, #492]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7a      	ldr	r2, [pc, #488]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4b78      	ldr	r3, [pc, #480]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a77      	ldr	r2, [pc, #476]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e01d      	b.n	8006fdc <HAL_RCC_OscConfig+0xd4>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0xbc>
 8006faa:	4b72      	ldr	r3, [pc, #456]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a71      	ldr	r2, [pc, #452]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b6f      	ldr	r3, [pc, #444]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e00b      	b.n	8006fdc <HAL_RCC_OscConfig+0xd4>
 8006fc4:	4b6b      	ldr	r3, [pc, #428]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6a      	ldr	r2, [pc, #424]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b68      	ldr	r3, [pc, #416]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a67      	ldr	r2, [pc, #412]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8006fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fd fdd2 	bl	8004b8c <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fd fdce 	bl	8004b8c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e1fa      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	4b5d      	ldr	r3, [pc, #372]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0xe4>
 800700a:	e014      	b.n	8007036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700c:	f7fd fdbe 	bl	8004b8c <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007014:	f7fd fdba 	bl	8004b8c <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b64      	cmp	r3, #100	; 0x64
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1e6      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	4b53      	ldr	r3, [pc, #332]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x10c>
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d063      	beq.n	800710a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007042:	4b4c      	ldr	r3, [pc, #304]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800704e:	4b49      	ldr	r3, [pc, #292]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	2b08      	cmp	r3, #8
 8007058:	d11c      	bne.n	8007094 <HAL_RCC_OscConfig+0x18c>
 800705a:	4b46      	ldr	r3, [pc, #280]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d116      	bne.n	8007094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	4b43      	ldr	r3, [pc, #268]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_RCC_OscConfig+0x176>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1ba      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b3d      	ldr	r3, [pc, #244]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4939      	ldr	r1, [pc, #228]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	e03a      	b.n	800710a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709c:	4b36      	ldr	r3, [pc, #216]	; (8007178 <HAL_RCC_OscConfig+0x270>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a2:	f7fd fd73 	bl	8004b8c <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070aa:	f7fd fd6f 	bl	8004b8c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e19b      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070bc:	4b2d      	ldr	r3, [pc, #180]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b2a      	ldr	r3, [pc, #168]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4927      	ldr	r1, [pc, #156]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]
 80070dc:	e015      	b.n	800710a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070de:	4b26      	ldr	r3, [pc, #152]	; (8007178 <HAL_RCC_OscConfig+0x270>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fd fd52 	bl	8004b8c <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ec:	f7fd fd4e 	bl	8004b8c <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e17a      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d03a      	beq.n	800718c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d019      	beq.n	8007152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800711e:	4b17      	ldr	r3, [pc, #92]	; (800717c <HAL_RCC_OscConfig+0x274>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007124:	f7fd fd32 	bl	8004b8c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712c:	f7fd fd2e 	bl	8004b8c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e15a      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <HAL_RCC_OscConfig+0x26c>)
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800714a:	2001      	movs	r0, #1
 800714c:	f000 fada 	bl	8007704 <RCC_Delay>
 8007150:	e01c      	b.n	800718c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <HAL_RCC_OscConfig+0x274>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007158:	f7fd fd18 	bl	8004b8c <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800715e:	e00f      	b.n	8007180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007160:	f7fd fd14 	bl	8004b8c <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d908      	bls.n	8007180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e140      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
 8007172:	bf00      	nop
 8007174:	40021000 	.word	0x40021000
 8007178:	42420000 	.word	0x42420000
 800717c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b9e      	ldr	r3, [pc, #632]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e9      	bne.n	8007160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a6 	beq.w	80072e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719e:	4b97      	ldr	r3, [pc, #604]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10d      	bne.n	80071c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	4b94      	ldr	r3, [pc, #592]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	4a93      	ldr	r2, [pc, #588]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	61d3      	str	r3, [r2, #28]
 80071b6:	4b91      	ldr	r3, [pc, #580]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c6:	4b8e      	ldr	r3, [pc, #568]	; (8007400 <HAL_RCC_OscConfig+0x4f8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d118      	bne.n	8007204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071d2:	4b8b      	ldr	r3, [pc, #556]	; (8007400 <HAL_RCC_OscConfig+0x4f8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a8a      	ldr	r2, [pc, #552]	; (8007400 <HAL_RCC_OscConfig+0x4f8>)
 80071d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071de:	f7fd fcd5 	bl	8004b8c <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e6:	f7fd fcd1 	bl	8004b8c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b64      	cmp	r3, #100	; 0x64
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e0fd      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f8:	4b81      	ldr	r3, [pc, #516]	; (8007400 <HAL_RCC_OscConfig+0x4f8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d106      	bne.n	800721a <HAL_RCC_OscConfig+0x312>
 800720c:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	4a7a      	ldr	r2, [pc, #488]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6213      	str	r3, [r2, #32]
 8007218:	e02d      	b.n	8007276 <HAL_RCC_OscConfig+0x36e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <HAL_RCC_OscConfig+0x334>
 8007222:	4b76      	ldr	r3, [pc, #472]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	4a75      	ldr	r2, [pc, #468]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	6213      	str	r3, [r2, #32]
 800722e:	4b73      	ldr	r3, [pc, #460]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	4a72      	ldr	r2, [pc, #456]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	6213      	str	r3, [r2, #32]
 800723a:	e01c      	b.n	8007276 <HAL_RCC_OscConfig+0x36e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b05      	cmp	r3, #5
 8007242:	d10c      	bne.n	800725e <HAL_RCC_OscConfig+0x356>
 8007244:	4b6d      	ldr	r3, [pc, #436]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	4a6c      	ldr	r2, [pc, #432]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 800724a:	f043 0304 	orr.w	r3, r3, #4
 800724e:	6213      	str	r3, [r2, #32]
 8007250:	4b6a      	ldr	r3, [pc, #424]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	4a69      	ldr	r2, [pc, #420]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	6213      	str	r3, [r2, #32]
 800725c:	e00b      	b.n	8007276 <HAL_RCC_OscConfig+0x36e>
 800725e:	4b67      	ldr	r3, [pc, #412]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	4a66      	ldr	r2, [pc, #408]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	6213      	str	r3, [r2, #32]
 800726a:	4b64      	ldr	r3, [pc, #400]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	4a63      	ldr	r2, [pc, #396]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800727e:	f7fd fc85 	bl	8004b8c <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007284:	e00a      	b.n	800729c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007286:	f7fd fc81 	bl	8004b8c <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f241 3288 	movw	r2, #5000	; 0x1388
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e0ab      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	4b57      	ldr	r3, [pc, #348]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0ee      	beq.n	8007286 <HAL_RCC_OscConfig+0x37e>
 80072a8:	e014      	b.n	80072d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072aa:	f7fd fc6f 	bl	8004b8c <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b0:	e00a      	b.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b2:	f7fd fc6b 	bl	8004b8c <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e095      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c8:	4b4c      	ldr	r3, [pc, #304]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1ee      	bne.n	80072b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d105      	bne.n	80072e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072da:	4b48      	ldr	r3, [pc, #288]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4a47      	ldr	r2, [pc, #284]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80072e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8081 	beq.w	80073f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072f0:	4b42      	ldr	r3, [pc, #264]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 030c 	and.w	r3, r3, #12
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d061      	beq.n	80073c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d146      	bne.n	8007392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007304:	4b3f      	ldr	r3, [pc, #252]	; (8007404 <HAL_RCC_OscConfig+0x4fc>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730a:	f7fd fc3f 	bl	8004b8c <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007312:	f7fd fc3b 	bl	8004b8c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e067      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007324:	4b35      	ldr	r3, [pc, #212]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007338:	d108      	bne.n	800734c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800733a:	4b30      	ldr	r3, [pc, #192]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	492d      	ldr	r1, [pc, #180]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007348:	4313      	orrs	r3, r2
 800734a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800734c:	4b2b      	ldr	r3, [pc, #172]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a19      	ldr	r1, [r3, #32]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	430b      	orrs	r3, r1
 800735e:	4927      	ldr	r1, [pc, #156]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007360:	4313      	orrs	r3, r2
 8007362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007364:	4b27      	ldr	r3, [pc, #156]	; (8007404 <HAL_RCC_OscConfig+0x4fc>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736a:	f7fd fc0f 	bl	8004b8c <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007372:	f7fd fc0b 	bl	8004b8c <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e037      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007384:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x46a>
 8007390:	e02f      	b.n	80073f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <HAL_RCC_OscConfig+0x4fc>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fd fbf8 	bl	8004b8c <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a0:	f7fd fbf4 	bl	8004b8c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e020      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b2:	4b12      	ldr	r3, [pc, #72]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x498>
 80073be:	e018      	b.n	80073f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e013      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <HAL_RCC_OscConfig+0x4f4>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d106      	bne.n	80073ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d001      	beq.n	80073f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40021000 	.word	0x40021000
 8007400:	40007000 	.word	0x40007000
 8007404:	42420060 	.word	0x42420060

08007408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0d0      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800741c:	4b6a      	ldr	r3, [pc, #424]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d910      	bls.n	800744c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742a:	4b67      	ldr	r3, [pc, #412]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f023 0207 	bic.w	r2, r3, #7
 8007432:	4965      	ldr	r1, [pc, #404]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	4b63      	ldr	r3, [pc, #396]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0b8      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d020      	beq.n	800749a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007464:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a58      	ldr	r2, [pc, #352]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 800746a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800746e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800747c:	4b53      	ldr	r3, [pc, #332]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a52      	ldr	r2, [pc, #328]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007488:	4b50      	ldr	r3, [pc, #320]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	494d      	ldr	r1, [pc, #308]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007496:	4313      	orrs	r3, r2
 8007498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d040      	beq.n	8007528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d107      	bne.n	80074be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ae:	4b47      	ldr	r3, [pc, #284]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d115      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e07f      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c6:	4b41      	ldr	r3, [pc, #260]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e073      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d6:	4b3d      	ldr	r3, [pc, #244]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e06b      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074e6:	4b39      	ldr	r3, [pc, #228]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f023 0203 	bic.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4936      	ldr	r1, [pc, #216]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074f8:	f7fd fb48 	bl	8004b8c <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007500:	f7fd fb44 	bl	8004b8c <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e053      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	4b2d      	ldr	r3, [pc, #180]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 020c 	and.w	r2, r3, #12
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	429a      	cmp	r2, r3
 8007526:	d1eb      	bne.n	8007500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007528:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d210      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f023 0207 	bic.w	r2, r3, #7
 800753e:	4922      	ldr	r1, [pc, #136]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e032      	b.n	80075be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007564:	4b19      	ldr	r3, [pc, #100]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4916      	ldr	r1, [pc, #88]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007572:	4313      	orrs	r3, r2
 8007574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	490e      	ldr	r1, [pc, #56]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 8007592:	4313      	orrs	r3, r2
 8007594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007596:	f000 f821 	bl	80075dc <HAL_RCC_GetSysClockFreq>
 800759a:	4601      	mov	r1, r0
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	091b      	lsrs	r3, r3, #4
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075a8:	5cd3      	ldrb	r3, [r2, r3]
 80075aa:	fa21 f303 	lsr.w	r3, r1, r3
 80075ae:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <HAL_RCC_ClockConfig+0x1cc>)
 80075b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <HAL_RCC_ClockConfig+0x1d0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd faa6 	bl	8004b08 <HAL_InitTick>

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40022000 	.word	0x40022000
 80075cc:	40021000 	.word	0x40021000
 80075d0:	0800cfdc 	.word	0x0800cfdc
 80075d4:	20000040 	.word	0x20000040
 80075d8:	20000044 	.word	0x20000044

080075dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075dc:	b490      	push	{r4, r7}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80075e2:	4b2a      	ldr	r3, [pc, #168]	; (800768c <HAL_RCC_GetSysClockFreq+0xb0>)
 80075e4:	1d3c      	adds	r4, r7, #4
 80075e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <HAL_RCC_GetSysClockFreq+0xb4>)
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007606:	4b23      	ldr	r3, [pc, #140]	; (8007694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b04      	cmp	r3, #4
 8007614:	d002      	beq.n	800761c <HAL_RCC_GetSysClockFreq+0x40>
 8007616:	2b08      	cmp	r3, #8
 8007618:	d003      	beq.n	8007622 <HAL_RCC_GetSysClockFreq+0x46>
 800761a:	e02d      	b.n	8007678 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800761c:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800761e:	623b      	str	r3, [r7, #32]
      break;
 8007620:	e02d      	b.n	800767e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	0c9b      	lsrs	r3, r3, #18
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800762e:	4413      	add	r3, r2
 8007630:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007634:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d013      	beq.n	8007668 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007640:	4b14      	ldr	r3, [pc, #80]	; (8007694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	0c5b      	lsrs	r3, r3, #17
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800764e:	4413      	add	r3, r2
 8007650:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007654:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4a0f      	ldr	r2, [pc, #60]	; (8007698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800765a:	fb02 f203 	mul.w	r2, r2, r3
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	e004      	b.n	8007672 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <HAL_RCC_GetSysClockFreq+0xc0>)
 800766c:	fb02 f303 	mul.w	r3, r2, r3
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	623b      	str	r3, [r7, #32]
      break;
 8007676:	e002      	b.n	800767e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800767a:	623b      	str	r3, [r7, #32]
      break;
 800767c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800767e:	6a3b      	ldr	r3, [r7, #32]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3728      	adds	r7, #40	; 0x28
 8007684:	46bd      	mov	sp, r7
 8007686:	bc90      	pop	{r4, r7}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	0800c85c 	.word	0x0800c85c
 8007690:	0800c86c 	.word	0x0800c86c
 8007694:	40021000 	.word	0x40021000
 8007698:	007a1200 	.word	0x007a1200
 800769c:	003d0900 	.word	0x003d0900

080076a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a4:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr
 80076b0:	20000040 	.word	0x20000040

080076b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076b8:	f7ff fff2 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076bc:	4601      	mov	r1, r0
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	4a03      	ldr	r2, [pc, #12]	; (80076d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ca:	5cd3      	ldrb	r3, [r2, r3]
 80076cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40021000 	.word	0x40021000
 80076d8:	0800cfec 	.word	0x0800cfec

080076dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076e0:	f7ff ffde 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076e4:	4601      	mov	r1, r0
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	0adb      	lsrs	r3, r3, #11
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4a03      	ldr	r2, [pc, #12]	; (8007700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076f2:	5cd3      	ldrb	r3, [r2, r3]
 80076f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000
 8007700:	0800cfec 	.word	0x0800cfec

08007704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <RCC_Delay+0x34>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <RCC_Delay+0x38>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	0a5b      	lsrs	r3, r3, #9
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007720:	bf00      	nop
  }
  while (Delay --);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1e5a      	subs	r2, r3, #1
 8007726:	60fa      	str	r2, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f9      	bne.n	8007720 <RCC_Delay+0x1c>
}
 800772c:	bf00      	nop
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20000040 	.word	0x20000040
 800773c:	10624dd3 	.word	0x10624dd3

08007740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e053      	b.n	80077fa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7fc fed3 	bl	8004518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007788:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	ea42 0103 	orr.w	r1, r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	0c1a      	lsrs	r2, r3, #16
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f002 0204 	and.w	r2, r2, #4
 80077d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e01d      	b.n	8007850 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fc fec1 	bl	80045b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	4619      	mov	r1, r3
 8007840:	4610      	mov	r0, r2
 8007842:	f000 fb89 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b06      	cmp	r3, #6
 8007880:	d007      	beq.n	8007892 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e01d      	b.n	80078ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f815 	bl	80078f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3304      	adds	r3, #4
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f000 fb3b 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr
	...

08007908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fd9c 	bl	8008458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a10      	ldr	r2, [pc, #64]	; (8007968 <HAL_TIM_PWM_Start+0x60>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d107      	bne.n	800793a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b06      	cmp	r3, #6
 800794a:	d007      	beq.n	800795c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40012c00 	.word	0x40012c00

0800796c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2200      	movs	r2, #0
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fd6a 	bl	8008458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a1d      	ldr	r2, [pc, #116]	; (8007a00 <HAL_TIM_PWM_Stop+0x94>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d117      	bne.n	80079be <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	f241 1311 	movw	r3, #4369	; 0x1111
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10f      	bne.n	80079be <HAL_TIM_PWM_Stop+0x52>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	f240 4344 	movw	r3, #1092	; 0x444
 80079a8:	4013      	ands	r3, r2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d107      	bne.n	80079be <HAL_TIM_PWM_Stop+0x52>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10f      	bne.n	80079ee <HAL_TIM_PWM_Stop+0x82>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	f240 4344 	movw	r3, #1092	; 0x444
 80079d8:	4013      	ands	r3, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <HAL_TIM_PWM_Stop+0x82>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40012c00 	.word	0x40012c00

08007a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d122      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d11b      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0202 	mvn.w	r2, #2
 8007a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa6a 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007a4c:	e005      	b.n	8007a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa5d 	bl	8007f0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fa6c 	bl	8007f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d122      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0204 	mvn.w	r2, #4
 8007a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa40 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007aa0:	e005      	b.n	8007aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa33 	bl	8007f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fa42 	bl	8007f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d122      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d11b      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f06f 0208 	mvn.w	r2, #8
 8007ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2204      	movs	r2, #4
 8007ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa16 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007af4:	e005      	b.n	8007b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa09 	bl	8007f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa18 	bl	8007f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d122      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b10      	cmp	r3, #16
 8007b22:	d11b      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0210 	mvn.w	r2, #16
 8007b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2208      	movs	r2, #8
 8007b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9ec 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007b48:	e005      	b.n	8007b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9df 	bl	8007f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f9ee 	bl	8007f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10e      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d107      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0201 	mvn.w	r2, #1
 8007b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fb fef4 	bl	8003970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d10e      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba0:	2b80      	cmp	r3, #128	; 0x80
 8007ba2:	d107      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fd14 	bl	80085dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d10e      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d107      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9b2 	bl	8007f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d10e      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d107      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0220 	mvn.w	r2, #32
 8007c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fcdf 	bl	80085ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e0b4      	b.n	8007d98 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b0c      	cmp	r3, #12
 8007c42:	f200 809f 	bhi.w	8007d84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007c46:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007c81 	.word	0x08007c81
 8007c50:	08007d85 	.word	0x08007d85
 8007c54:	08007d85 	.word	0x08007d85
 8007c58:	08007d85 	.word	0x08007d85
 8007c5c:	08007cc1 	.word	0x08007cc1
 8007c60:	08007d85 	.word	0x08007d85
 8007c64:	08007d85 	.word	0x08007d85
 8007c68:	08007d85 	.word	0x08007d85
 8007c6c:	08007d03 	.word	0x08007d03
 8007c70:	08007d85 	.word	0x08007d85
 8007c74:	08007d85 	.word	0x08007d85
 8007c78:	08007d85 	.word	0x08007d85
 8007c7c:	08007d43 	.word	0x08007d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f9c8 	bl	800801c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0208 	orr.w	r2, r2, #8
 8007c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0204 	bic.w	r2, r2, #4
 8007caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6999      	ldr	r1, [r3, #24]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	619a      	str	r2, [r3, #24]
      break;
 8007cbe:	e062      	b.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68b9      	ldr	r1, [r7, #8]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fa0e 	bl	80080e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6999      	ldr	r1, [r3, #24]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	021a      	lsls	r2, r3, #8
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	619a      	str	r2, [r3, #24]
      break;
 8007d00:	e041      	b.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fa57 	bl	80081bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f042 0208 	orr.w	r2, r2, #8
 8007d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0204 	bic.w	r2, r2, #4
 8007d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69d9      	ldr	r1, [r3, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	61da      	str	r2, [r3, #28]
      break;
 8007d40:	e021      	b.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 faa1 	bl	8008290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69da      	ldr	r2, [r3, #28]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69d9      	ldr	r1, [r3, #28]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	021a      	lsls	r2, r3, #8
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	61da      	str	r2, [r3, #28]
      break;
 8007d82:	e000      	b.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007d84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_TIM_ConfigClockSource+0x18>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e0a6      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x166>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d067      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x120>
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d80b      	bhi.n	8007e0c <HAL_TIM_ConfigClockSource+0x6c>
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d073      	beq.n	8007ee0 <HAL_TIM_ConfigClockSource+0x140>
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d802      	bhi.n	8007e02 <HAL_TIM_ConfigClockSource+0x62>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d06f      	beq.n	8007ee0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007e00:	e078      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d06c      	beq.n	8007ee0 <HAL_TIM_ConfigClockSource+0x140>
 8007e06:	2b30      	cmp	r3, #48	; 0x30
 8007e08:	d06a      	beq.n	8007ee0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007e0a:	e073      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e0c:	2b70      	cmp	r3, #112	; 0x70
 8007e0e:	d00d      	beq.n	8007e2c <HAL_TIM_ConfigClockSource+0x8c>
 8007e10:	2b70      	cmp	r3, #112	; 0x70
 8007e12:	d804      	bhi.n	8007e1e <HAL_TIM_ConfigClockSource+0x7e>
 8007e14:	2b50      	cmp	r3, #80	; 0x50
 8007e16:	d033      	beq.n	8007e80 <HAL_TIM_ConfigClockSource+0xe0>
 8007e18:	2b60      	cmp	r3, #96	; 0x60
 8007e1a:	d041      	beq.n	8007ea0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007e1c:	e06a      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e22:	d066      	beq.n	8007ef2 <HAL_TIM_ConfigClockSource+0x152>
 8007e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e28:	d017      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007e2a:	e063      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	6899      	ldr	r1, [r3, #8]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f000 faed 	bl	800841a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	609a      	str	r2, [r3, #8]
      break;
 8007e58:	e04c      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6899      	ldr	r1, [r3, #8]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f000 fad6 	bl	800841a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e7c:	609a      	str	r2, [r3, #8]
      break;
 8007e7e:	e039      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	6859      	ldr	r1, [r3, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f000 fa4d 	bl	800832c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2150      	movs	r1, #80	; 0x50
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 faa4 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8007e9e:	e029      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	6859      	ldr	r1, [r3, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	461a      	mov	r2, r3
 8007eae:	f000 fa6b 	bl	8008388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2160      	movs	r1, #96	; 0x60
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fa94 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8007ebe:	e019      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6859      	ldr	r1, [r3, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f000 fa2d 	bl	800832c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2140      	movs	r1, #64	; 0x40
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fa84 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8007ede:	e009      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f000 fa7b 	bl	80083e6 <TIM_ITRx_SetConfig>
      break;
 8007ef0:	e000      	b.n	8007ef4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
	...

08007f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a29      	ldr	r2, [pc, #164]	; (8008010 <TIM_Base_SetConfig+0xb8>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <TIM_Base_SetConfig+0x30>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d007      	beq.n	8007f88 <TIM_Base_SetConfig+0x30>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a26      	ldr	r2, [pc, #152]	; (8008014 <TIM_Base_SetConfig+0xbc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_Base_SetConfig+0x30>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a25      	ldr	r2, [pc, #148]	; (8008018 <TIM_Base_SetConfig+0xc0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d108      	bne.n	8007f9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	; (8008010 <TIM_Base_SetConfig+0xb8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00b      	beq.n	8007fba <TIM_Base_SetConfig+0x62>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa8:	d007      	beq.n	8007fba <TIM_Base_SetConfig+0x62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a19      	ldr	r2, [pc, #100]	; (8008014 <TIM_Base_SetConfig+0xbc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d003      	beq.n	8007fba <TIM_Base_SetConfig+0x62>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a18      	ldr	r2, [pc, #96]	; (8008018 <TIM_Base_SetConfig+0xc0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d108      	bne.n	8007fcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a07      	ldr	r2, [pc, #28]	; (8008010 <TIM_Base_SetConfig+0xb8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d103      	bne.n	8008000 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	615a      	str	r2, [r3, #20]
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800

0800801c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	f023 0201 	bic.w	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f023 0302 	bic.w	r3, r3, #2
 8008064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <TIM_OC1_SetConfig+0xc8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d10c      	bne.n	8008092 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f023 0308 	bic.w	r3, r3, #8
 800807e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f023 0304 	bic.w	r3, r3, #4
 8008090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a13      	ldr	r2, [pc, #76]	; (80080e4 <TIM_OC1_SetConfig+0xc8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d111      	bne.n	80080be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	621a      	str	r2, [r3, #32]
}
 80080d8:	bf00      	nop
 80080da:	371c      	adds	r7, #28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	40012c00 	.word	0x40012c00

080080e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f023 0210 	bic.w	r2, r3, #16
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800811e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4313      	orrs	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f023 0320 	bic.w	r3, r3, #32
 8008132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <TIM_OC2_SetConfig+0xd0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d10d      	bne.n	8008164 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <TIM_OC2_SetConfig+0xd0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d113      	bne.n	8008194 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800817a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	621a      	str	r2, [r3, #32]
}
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr
 80081b8:	40012c00 	.word	0x40012c00

080081bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a1d      	ldr	r2, [pc, #116]	; (800828c <TIM_OC3_SetConfig+0xd0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d10d      	bne.n	8008236 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a14      	ldr	r2, [pc, #80]	; (800828c <TIM_OC3_SetConfig+0xd0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d113      	bne.n	8008266 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800824c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4313      	orrs	r3, r2
 8008264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	621a      	str	r2, [r3, #32]
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00

08008290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	031b      	lsls	r3, r3, #12
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <TIM_OC4_SetConfig+0x98>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d109      	bne.n	8008304 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	019b      	lsls	r3, r3, #6
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr
 8008328:	40012c00 	.word	0x40012c00

0800832c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f023 0201 	bic.w	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f023 030a 	bic.w	r3, r3, #10
 8008368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f023 0210 	bic.w	r2, r3, #16
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	031b      	lsls	r3, r3, #12
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	621a      	str	r2, [r3, #32]
}
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr

080083e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	f043 0307 	orr.w	r3, r3, #7
 8008408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	609a      	str	r2, [r3, #8]
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800841a:	b480      	push	{r7}
 800841c:	b087      	sub	sp, #28
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
 8008426:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008434:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	021a      	lsls	r2, r3, #8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	431a      	orrs	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4313      	orrs	r3, r2
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	609a      	str	r2, [r3, #8]
}
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f003 031f 	and.w	r3, r3, #31
 800846a:	2201      	movs	r2, #1
 800846c:	fa02 f303 	lsl.w	r3, r2, r3
 8008470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a1a      	ldr	r2, [r3, #32]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	43db      	mvns	r3, r3
 800847a:	401a      	ands	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 031f 	and.w	r3, r3, #31
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	fa01 f303 	lsl.w	r3, r1, r3
 8008490:	431a      	orrs	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b4:	2302      	movs	r3, #2
 80084b6:	e032      	b.n	800851e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084f0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008540:	2302      	movs	r3, #2
 8008542:	e03d      	b.n	80085c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr

080085ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e03f      	b.n	8008680 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d106      	bne.n	800861a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fc f837 	bl	8004688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2224      	movs	r2, #36	; 0x24
 800861e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008630:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc64 	bl	8008f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691a      	ldr	r2, [r3, #16]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008646:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695a      	ldr	r2, [r3, #20]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008656:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008666:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af02      	add	r7, sp, #8
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	f040 8083 	bne.w	80087b0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <HAL_UART_Transmit+0x2e>
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e07b      	b.n	80087b2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_UART_Transmit+0x40>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e074      	b.n	80087b2 <HAL_UART_Transmit+0x12a>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2221      	movs	r2, #33	; 0x21
 80086da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80086de:	f7fc fa55 	bl	8004b8c <HAL_GetTick>
 80086e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	88fa      	ldrh	r2, [r7, #6]
 80086e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086f0:	e042      	b.n	8008778 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008708:	d122      	bne.n	8008750 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2200      	movs	r2, #0
 8008712:	2180      	movs	r1, #128	; 0x80
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fa74 	bl	8008c02 <UART_WaitOnFlagUntilTimeout>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e046      	b.n	80087b2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008736:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	3302      	adds	r3, #2
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	e017      	b.n	8008778 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3301      	adds	r3, #1
 800874c:	60bb      	str	r3, [r7, #8]
 800874e:	e013      	b.n	8008778 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2200      	movs	r2, #0
 8008758:	2180      	movs	r1, #128	; 0x80
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fa51 	bl	8008c02 <UART_WaitOnFlagUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e023      	b.n	80087b2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	60ba      	str	r2, [r7, #8]
 8008770:	781a      	ldrb	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1b7      	bne.n	80086f2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2200      	movs	r2, #0
 800878a:	2140      	movs	r1, #64	; 0x40
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 fa38 	bl	8008c02 <UART_WaitOnFlagUntilTimeout>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e00a      	b.n	80087b2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e000      	b.n	80087b2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80087b0:	2302      	movs	r3, #2
  }
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d166      	bne.n	80088a4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <HAL_UART_Receive_DMA+0x26>
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e05f      	b.n	80088a6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_UART_Receive_DMA+0x38>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e058      	b.n	80088a6 <HAL_UART_Receive_DMA+0xea>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2222      	movs	r2, #34	; 0x22
 8008812:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	4a25      	ldr	r2, [pc, #148]	; (80088b0 <HAL_UART_Receive_DMA+0xf4>)
 800881c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008822:	4a24      	ldr	r2, [pc, #144]	; (80088b4 <HAL_UART_Receive_DMA+0xf8>)
 8008824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	4a23      	ldr	r2, [pc, #140]	; (80088b8 <HAL_UART_Receive_DMA+0xfc>)
 800882c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	2200      	movs	r2, #0
 8008834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3304      	adds	r3, #4
 8008846:	4619      	mov	r1, r3
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	f7fc fb31 	bl	8004eb4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800887e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695a      	ldr	r2, [r3, #20]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0201 	orr.w	r2, r2, #1
 800888e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695a      	ldr	r2, [r3, #20]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800889e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	e000      	b.n	80088a6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80088a4:	2302      	movs	r3, #2
  }
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	08008aeb 	.word	0x08008aeb
 80088b4:	08008b53 	.word	0x08008b53
 80088b8:	08008b6f 	.word	0x08008b6f

080088bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80088dc:	2300      	movs	r3, #0
 80088de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10d      	bne.n	800890e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d008      	beq.n	800890e <HAL_UART_IRQHandler+0x52>
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa78 	bl	8008dfc <UART_Receive_IT>
      return;
 800890c:	e0cc      	b.n	8008aa8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80ab 	beq.w	8008a6c <HAL_UART_IRQHandler+0x1b0>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d105      	bne.n	800892c <HAL_UART_IRQHandler+0x70>
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 80a0 	beq.w	8008a6c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <HAL_UART_IRQHandler+0x90>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008944:	f043 0201 	orr.w	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <HAL_UART_IRQHandler+0xb0>
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008964:	f043 0202 	orr.w	r2, r3, #2
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <HAL_UART_IRQHandler+0xd0>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008984:	f043 0204 	orr.w	r2, r3, #4
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <HAL_UART_IRQHandler+0xf0>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a4:	f043 0208 	orr.w	r2, r3, #8
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d078      	beq.n	8008aa6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d007      	beq.n	80089ce <HAL_UART_IRQHandler+0x112>
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fa17 	bl	8008dfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bf14      	ite	ne
 80089dc:	2301      	movne	r3, #1
 80089de:	2300      	moveq	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <HAL_UART_IRQHandler+0x13a>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d031      	beq.n	8008a5a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f962 	bl	8008cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d023      	beq.n	8008a52 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d013      	beq.n	8008a4a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	4a22      	ldr	r2, [pc, #136]	; (8008ab0 <HAL_UART_IRQHandler+0x1f4>)
 8008a28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fc faa0 	bl	8004f74 <HAL_DMA_Abort_IT>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a48:	e00e      	b.n	8008a68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f844 	bl	8008ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a50:	e00a      	b.n	8008a68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f840 	bl	8008ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a58:	e006      	b.n	8008a68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f83c 	bl	8008ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008a66:	e01e      	b.n	8008aa6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a68:	bf00      	nop
    return;
 8008a6a:	e01c      	b.n	8008aa6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <HAL_UART_IRQHandler+0x1cc>
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f94e 	bl	8008d22 <UART_Transmit_IT>
    return;
 8008a86:	e00f      	b.n	8008aa8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x1ec>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f995 	bl	8008dcc <UART_EndTransmit_IT>
    return;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8008aa6:	bf00      	nop
  }
}
 8008aa8:	3720      	adds	r7, #32
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	08008cfb 	.word	0x08008cfb

08008ab4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr

08008aea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d11e      	bne.n	8008b44 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b1a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695a      	ldr	r2, [r3, #20]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695a      	ldr	r2, [r3, #20]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b3a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f7f9 fd6f 	bl	8002628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff ffb0 	bl	8008ac6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bf14      	ite	ne
 8008b8e:	2301      	movne	r3, #1
 8008b90:	2300      	moveq	r3, #0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b21      	cmp	r3, #33	; 0x21
 8008ba0:	d108      	bne.n	8008bb4 <UART_DMAError+0x46>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f000 f871 	bl	8008c96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf14      	ite	ne
 8008bc2:	2301      	movne	r3, #1
 8008bc4:	2300      	moveq	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b22      	cmp	r3, #34	; 0x22
 8008bd4:	d108      	bne.n	8008be8 <UART_DMAError+0x7a>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008be2:	68b8      	ldr	r0, [r7, #8]
 8008be4:	f000 f86c 	bl	8008cc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bec:	f043 0210 	orr.w	r2, r3, #16
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bf4:	68b8      	ldr	r0, [r7, #8]
 8008bf6:	f7ff ff6f 	bl	8008ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c12:	e02c      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c1a:	d028      	beq.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d007      	beq.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c22:	f7fb ffb3 	bl	8004b8c <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d21d      	bcs.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	695a      	ldr	r2, [r3, #20]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0201 	bic.w	r2, r2, #1
 8008c50:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e00f      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4013      	ands	r3, r2
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	bf0c      	ite	eq
 8008c7e:	2301      	moveq	r3, #1
 8008c80:	2300      	movne	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	461a      	mov	r2, r3
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d0c3      	beq.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008cac:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bc80      	pop	{r7}
 8008cbe:	4770      	bx	lr

08008cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695a      	ldr	r2, [r3, #20]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0201 	bic.w	r2, r2, #1
 8008ce6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr

08008cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fedf 	bl	8008ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b21      	cmp	r3, #33	; 0x21
 8008d34:	d144      	bne.n	8008dc0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3e:	d11a      	bne.n	8008d76 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d54:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	1c9a      	adds	r2, r3, #2
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	621a      	str	r2, [r3, #32]
 8008d68:	e00e      	b.n	8008d88 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	621a      	str	r2, [r3, #32]
 8008d74:	e008      	b.n	8008d88 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	1c59      	adds	r1, r3, #1
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6211      	str	r1, [r2, #32]
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4619      	mov	r1, r3
 8008d96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10f      	bne.n	8008dbc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008daa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e000      	b.n	8008dc2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008dc0:	2302      	movs	r3, #2
  }
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff fe61 	bl	8008ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b22      	cmp	r3, #34	; 0x22
 8008e0e:	d171      	bne.n	8008ef4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e18:	d123      	bne.n	8008e62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10e      	bne.n	8008e46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	1c9a      	adds	r2, r3, #2
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	629a      	str	r2, [r3, #40]	; 0x28
 8008e44:	e029      	b.n	8008e9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e60:	e01b      	b.n	8008e9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6858      	ldr	r0, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	1c59      	adds	r1, r3, #1
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6291      	str	r1, [r2, #40]	; 0x28
 8008e7a:	b2c2      	uxtb	r2, r0
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	e00c      	b.n	8008e9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	1c58      	adds	r0, r3, #1
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	6288      	str	r0, [r1, #40]	; 0x28
 8008e92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d120      	bne.n	8008ef0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0220 	bic.w	r2, r2, #32
 8008ebc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695a      	ldr	r2, [r3, #20]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0201 	bic.w	r2, r2, #1
 8008edc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7f9 fb9e 	bl	8002628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e002      	b.n	8008ef6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e000      	b.n	8008ef6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008ef4:	2302      	movs	r3, #2
  }
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f3a:	f023 030c 	bic.w	r3, r3, #12
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	430b      	orrs	r3, r1
 8008f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a52      	ldr	r2, [pc, #328]	; (80090ac <UART_SetConfig+0x1ac>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d14e      	bne.n	8009006 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f68:	f7fe fbb8 	bl	80076dc <HAL_RCC_GetPCLK2Freq>
 8008f6c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009a      	lsls	r2, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f84:	4a4a      	ldr	r2, [pc, #296]	; (80090b0 <UART_SetConfig+0x1b0>)
 8008f86:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	0119      	lsls	r1, r3, #4
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009a      	lsls	r2, r3, #2
 8008f98:	441a      	add	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fa4:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <UART_SetConfig+0x1b0>)
 8008fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	2064      	movs	r0, #100	; 0x64
 8008fae:	fb00 f303 	mul.w	r3, r0, r3
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	3332      	adds	r3, #50	; 0x32
 8008fb8:	4a3d      	ldr	r2, [pc, #244]	; (80090b0 <UART_SetConfig+0x1b0>)
 8008fba:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fc4:	4419      	add	r1, r3
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	009a      	lsls	r2, r3, #2
 8008fd0:	441a      	add	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fdc:	4b34      	ldr	r3, [pc, #208]	; (80090b0 <UART_SetConfig+0x1b0>)
 8008fde:	fba3 0302 	umull	r0, r3, r3, r2
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	2064      	movs	r0, #100	; 0x64
 8008fe6:	fb00 f303 	mul.w	r3, r0, r3
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	3332      	adds	r3, #50	; 0x32
 8008ff0:	4a2f      	ldr	r2, [pc, #188]	; (80090b0 <UART_SetConfig+0x1b0>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	f003 020f 	and.w	r2, r3, #15
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	440a      	add	r2, r1
 8009002:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009004:	e04d      	b.n	80090a2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009006:	f7fe fb55 	bl	80076b4 <HAL_RCC_GetPCLK1Freq>
 800900a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009a      	lsls	r2, r3, #2
 8009016:	441a      	add	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009022:	4a23      	ldr	r2, [pc, #140]	; (80090b0 <UART_SetConfig+0x1b0>)
 8009024:	fba2 2303 	umull	r2, r3, r2, r3
 8009028:	095b      	lsrs	r3, r3, #5
 800902a:	0119      	lsls	r1, r3, #4
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	009a      	lsls	r2, r3, #2
 8009036:	441a      	add	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009042:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <UART_SetConfig+0x1b0>)
 8009044:	fba3 0302 	umull	r0, r3, r3, r2
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	2064      	movs	r0, #100	; 0x64
 800904c:	fb00 f303 	mul.w	r3, r0, r3
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	3332      	adds	r3, #50	; 0x32
 8009056:	4a16      	ldr	r2, [pc, #88]	; (80090b0 <UART_SetConfig+0x1b0>)
 8009058:	fba2 2303 	umull	r2, r3, r2, r3
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009062:	4419      	add	r1, r3
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009a      	lsls	r2, r3, #2
 800906e:	441a      	add	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	fbb2 f2f3 	udiv	r2, r2, r3
 800907a:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <UART_SetConfig+0x1b0>)
 800907c:	fba3 0302 	umull	r0, r3, r3, r2
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	2064      	movs	r0, #100	; 0x64
 8009084:	fb00 f303 	mul.w	r3, r0, r3
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	3332      	adds	r3, #50	; 0x32
 800908e:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <UART_SetConfig+0x1b0>)
 8009090:	fba2 2303 	umull	r2, r3, r2, r3
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	f003 020f 	and.w	r2, r3, #15
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	440a      	add	r2, r1
 80090a0:	609a      	str	r2, [r3, #8]
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	40013800 	.word	0x40013800
 80090b0:	51eb851f 	.word	0x51eb851f

080090b4 <atof>:
 80090b4:	2100      	movs	r1, #0
 80090b6:	f000 becb 	b.w	8009e50 <strtod>

080090ba <atoi>:
 80090ba:	220a      	movs	r2, #10
 80090bc:	2100      	movs	r1, #0
 80090be:	f000 bf55 	b.w	8009f6c <strtol>
	...

080090c4 <gcvt>:
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	461c      	mov	r4, r3
 80090c8:	b085      	sub	sp, #20
 80090ca:	2300      	movs	r3, #0
 80090cc:	4615      	mov	r5, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	4606      	mov	r6, r0
 80090d2:	460f      	mov	r7, r1
 80090d4:	f7f7 fc72 	bl	80009bc <__aeabi_dcmplt>
 80090d8:	4623      	mov	r3, r4
 80090da:	b118      	cbz	r0, 80090e4 <gcvt+0x20>
 80090dc:	222d      	movs	r2, #45	; 0x2d
 80090de:	3d01      	subs	r5, #1
 80090e0:	f803 2b01 	strb.w	r2, [r3], #1
 80090e4:	2267      	movs	r2, #103	; 0x67
 80090e6:	2100      	movs	r1, #0
 80090e8:	e9cd 5300 	strd	r5, r3, [sp]
 80090ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80090f0:	4905      	ldr	r1, [pc, #20]	; (8009108 <gcvt+0x44>)
 80090f2:	4632      	mov	r2, r6
 80090f4:	463b      	mov	r3, r7
 80090f6:	6808      	ldr	r0, [r1, #0]
 80090f8:	f000 ffc2 	bl	800a080 <_gcvt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	bf14      	ite	ne
 8009100:	4620      	movne	r0, r4
 8009102:	2000      	moveq	r0, #0
 8009104:	b005      	add	sp, #20
 8009106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009108:	2000004c 	.word	0x2000004c

0800910c <__errno>:
 800910c:	4b01      	ldr	r3, [pc, #4]	; (8009114 <__errno+0x8>)
 800910e:	6818      	ldr	r0, [r3, #0]
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	2000004c 	.word	0x2000004c

08009118 <__libc_init_array>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	2500      	movs	r5, #0
 800911c:	4e0c      	ldr	r6, [pc, #48]	; (8009150 <__libc_init_array+0x38>)
 800911e:	4c0d      	ldr	r4, [pc, #52]	; (8009154 <__libc_init_array+0x3c>)
 8009120:	1ba4      	subs	r4, r4, r6
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	42a5      	cmp	r5, r4
 8009126:	d109      	bne.n	800913c <__libc_init_array+0x24>
 8009128:	f003 fa68 	bl	800c5fc <_init>
 800912c:	2500      	movs	r5, #0
 800912e:	4e0a      	ldr	r6, [pc, #40]	; (8009158 <__libc_init_array+0x40>)
 8009130:	4c0a      	ldr	r4, [pc, #40]	; (800915c <__libc_init_array+0x44>)
 8009132:	1ba4      	subs	r4, r4, r6
 8009134:	10a4      	asrs	r4, r4, #2
 8009136:	42a5      	cmp	r5, r4
 8009138:	d105      	bne.n	8009146 <__libc_init_array+0x2e>
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009140:	4798      	blx	r3
 8009142:	3501      	adds	r5, #1
 8009144:	e7ee      	b.n	8009124 <__libc_init_array+0xc>
 8009146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800914a:	4798      	blx	r3
 800914c:	3501      	adds	r5, #1
 800914e:	e7f2      	b.n	8009136 <__libc_init_array+0x1e>
 8009150:	0800d2a0 	.word	0x0800d2a0
 8009154:	0800d2a0 	.word	0x0800d2a0
 8009158:	0800d2a0 	.word	0x0800d2a0
 800915c:	0800d2a4 	.word	0x0800d2a4

08009160 <memset>:
 8009160:	4603      	mov	r3, r0
 8009162:	4402      	add	r2, r0
 8009164:	4293      	cmp	r3, r2
 8009166:	d100      	bne.n	800916a <memset+0xa>
 8009168:	4770      	bx	lr
 800916a:	f803 1b01 	strb.w	r1, [r3], #1
 800916e:	e7f9      	b.n	8009164 <memset+0x4>

08009170 <siprintf>:
 8009170:	b40e      	push	{r1, r2, r3}
 8009172:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009176:	b500      	push	{lr}
 8009178:	b09c      	sub	sp, #112	; 0x70
 800917a:	ab1d      	add	r3, sp, #116	; 0x74
 800917c:	9002      	str	r0, [sp, #8]
 800917e:	9006      	str	r0, [sp, #24]
 8009180:	9107      	str	r1, [sp, #28]
 8009182:	9104      	str	r1, [sp, #16]
 8009184:	4808      	ldr	r0, [pc, #32]	; (80091a8 <siprintf+0x38>)
 8009186:	4909      	ldr	r1, [pc, #36]	; (80091ac <siprintf+0x3c>)
 8009188:	f853 2b04 	ldr.w	r2, [r3], #4
 800918c:	9105      	str	r1, [sp, #20]
 800918e:	6800      	ldr	r0, [r0, #0]
 8009190:	a902      	add	r1, sp, #8
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	f002 f88a 	bl	800b2ac <_svfiprintf_r>
 8009198:	2200      	movs	r2, #0
 800919a:	9b02      	ldr	r3, [sp, #8]
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	b01c      	add	sp, #112	; 0x70
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	2000004c 	.word	0x2000004c
 80091ac:	ffff0208 	.word	0xffff0208

080091b0 <strchr>:
 80091b0:	b2c9      	uxtb	r1, r1
 80091b2:	4603      	mov	r3, r0
 80091b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b8:	b11a      	cbz	r2, 80091c2 <strchr+0x12>
 80091ba:	428a      	cmp	r2, r1
 80091bc:	d1f9      	bne.n	80091b2 <strchr+0x2>
 80091be:	4618      	mov	r0, r3
 80091c0:	4770      	bx	lr
 80091c2:	2900      	cmp	r1, #0
 80091c4:	bf18      	it	ne
 80091c6:	2300      	movne	r3, #0
 80091c8:	e7f9      	b.n	80091be <strchr+0xe>

080091ca <strcpy>:
 80091ca:	4603      	mov	r3, r0
 80091cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d0:	f803 2b01 	strb.w	r2, [r3], #1
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	d1f9      	bne.n	80091cc <strcpy+0x2>
 80091d8:	4770      	bx	lr

080091da <strstr>:
 80091da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091dc:	7803      	ldrb	r3, [r0, #0]
 80091de:	b17b      	cbz	r3, 8009200 <strstr+0x26>
 80091e0:	4604      	mov	r4, r0
 80091e2:	7823      	ldrb	r3, [r4, #0]
 80091e4:	4620      	mov	r0, r4
 80091e6:	1c66      	adds	r6, r4, #1
 80091e8:	b17b      	cbz	r3, 800920a <strstr+0x30>
 80091ea:	1e4a      	subs	r2, r1, #1
 80091ec:	1e63      	subs	r3, r4, #1
 80091ee:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80091f2:	b14d      	cbz	r5, 8009208 <strstr+0x2e>
 80091f4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80091f8:	4634      	mov	r4, r6
 80091fa:	42af      	cmp	r7, r5
 80091fc:	d0f7      	beq.n	80091ee <strstr+0x14>
 80091fe:	e7f0      	b.n	80091e2 <strstr+0x8>
 8009200:	780b      	ldrb	r3, [r1, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	bf18      	it	ne
 8009206:	2000      	movne	r0, #0
 8009208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920a:	4618      	mov	r0, r3
 800920c:	e7fc      	b.n	8009208 <strstr+0x2e>

0800920e <sulp>:
 800920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	460f      	mov	r7, r1
 8009214:	4690      	mov	r8, r2
 8009216:	f001 fe15 	bl	800ae44 <__ulp>
 800921a:	4604      	mov	r4, r0
 800921c:	460d      	mov	r5, r1
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	d011      	beq.n	8009248 <sulp+0x3a>
 8009224:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009228:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd0b      	ble.n	8009248 <sulp+0x3a>
 8009230:	2400      	movs	r4, #0
 8009232:	051b      	lsls	r3, r3, #20
 8009234:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009238:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800923c:	4622      	mov	r2, r4
 800923e:	462b      	mov	r3, r5
 8009240:	f7f7 f94a 	bl	80004d8 <__aeabi_dmul>
 8009244:	4604      	mov	r4, r0
 8009246:	460d      	mov	r5, r1
 8009248:	4620      	mov	r0, r4
 800924a:	4629      	mov	r1, r5
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009250 <_strtod_l>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	461f      	mov	r7, r3
 8009256:	2300      	movs	r3, #0
 8009258:	b0a1      	sub	sp, #132	; 0x84
 800925a:	4683      	mov	fp, r0
 800925c:	4638      	mov	r0, r7
 800925e:	460e      	mov	r6, r1
 8009260:	9217      	str	r2, [sp, #92]	; 0x5c
 8009262:	931c      	str	r3, [sp, #112]	; 0x70
 8009264:	f001 fb05 	bl	800a872 <__localeconv_l>
 8009268:	4680      	mov	r8, r0
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	f7f6 ff70 	bl	8000150 <strlen>
 8009270:	f04f 0900 	mov.w	r9, #0
 8009274:	4604      	mov	r4, r0
 8009276:	f04f 0a00 	mov.w	sl, #0
 800927a:	961b      	str	r6, [sp, #108]	; 0x6c
 800927c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800927e:	781a      	ldrb	r2, [r3, #0]
 8009280:	2a0d      	cmp	r2, #13
 8009282:	d832      	bhi.n	80092ea <_strtod_l+0x9a>
 8009284:	2a09      	cmp	r2, #9
 8009286:	d236      	bcs.n	80092f6 <_strtod_l+0xa6>
 8009288:	2a00      	cmp	r2, #0
 800928a:	d03e      	beq.n	800930a <_strtod_l+0xba>
 800928c:	2300      	movs	r3, #0
 800928e:	930d      	str	r3, [sp, #52]	; 0x34
 8009290:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009292:	782b      	ldrb	r3, [r5, #0]
 8009294:	2b30      	cmp	r3, #48	; 0x30
 8009296:	f040 80ac 	bne.w	80093f2 <_strtod_l+0x1a2>
 800929a:	786b      	ldrb	r3, [r5, #1]
 800929c:	2b58      	cmp	r3, #88	; 0x58
 800929e:	d001      	beq.n	80092a4 <_strtod_l+0x54>
 80092a0:	2b78      	cmp	r3, #120	; 0x78
 80092a2:	d167      	bne.n	8009374 <_strtod_l+0x124>
 80092a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a6:	9702      	str	r7, [sp, #8]
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	ab1c      	add	r3, sp, #112	; 0x70
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	4a89      	ldr	r2, [pc, #548]	; (80094d4 <_strtod_l+0x284>)
 80092b0:	ab1d      	add	r3, sp, #116	; 0x74
 80092b2:	a91b      	add	r1, sp, #108	; 0x6c
 80092b4:	4658      	mov	r0, fp
 80092b6:	f001 f801 	bl	800a2bc <__gethex>
 80092ba:	f010 0407 	ands.w	r4, r0, #7
 80092be:	4606      	mov	r6, r0
 80092c0:	d005      	beq.n	80092ce <_strtod_l+0x7e>
 80092c2:	2c06      	cmp	r4, #6
 80092c4:	d12b      	bne.n	800931e <_strtod_l+0xce>
 80092c6:	2300      	movs	r3, #0
 80092c8:	3501      	adds	r5, #1
 80092ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80092cc:	930d      	str	r3, [sp, #52]	; 0x34
 80092ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 85a6 	bne.w	8009e22 <_strtod_l+0xbd2>
 80092d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092d8:	b1e3      	cbz	r3, 8009314 <_strtod_l+0xc4>
 80092da:	464a      	mov	r2, r9
 80092dc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80092e0:	4610      	mov	r0, r2
 80092e2:	4619      	mov	r1, r3
 80092e4:	b021      	add	sp, #132	; 0x84
 80092e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ea:	2a2b      	cmp	r2, #43	; 0x2b
 80092ec:	d015      	beq.n	800931a <_strtod_l+0xca>
 80092ee:	2a2d      	cmp	r2, #45	; 0x2d
 80092f0:	d004      	beq.n	80092fc <_strtod_l+0xac>
 80092f2:	2a20      	cmp	r2, #32
 80092f4:	d1ca      	bne.n	800928c <_strtod_l+0x3c>
 80092f6:	3301      	adds	r3, #1
 80092f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80092fa:	e7bf      	b.n	800927c <_strtod_l+0x2c>
 80092fc:	2201      	movs	r2, #1
 80092fe:	920d      	str	r2, [sp, #52]	; 0x34
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	921b      	str	r2, [sp, #108]	; 0x6c
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1c2      	bne.n	8009290 <_strtod_l+0x40>
 800930a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800930c:	961b      	str	r6, [sp, #108]	; 0x6c
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 8585 	bne.w	8009e1e <_strtod_l+0xbce>
 8009314:	464a      	mov	r2, r9
 8009316:	4653      	mov	r3, sl
 8009318:	e7e2      	b.n	80092e0 <_strtod_l+0x90>
 800931a:	2200      	movs	r2, #0
 800931c:	e7ef      	b.n	80092fe <_strtod_l+0xae>
 800931e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009320:	b13a      	cbz	r2, 8009332 <_strtod_l+0xe2>
 8009322:	2135      	movs	r1, #53	; 0x35
 8009324:	a81e      	add	r0, sp, #120	; 0x78
 8009326:	f001 fe9d 	bl	800b064 <__copybits>
 800932a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800932c:	4658      	mov	r0, fp
 800932e:	f001 faf3 	bl	800a918 <_Bfree>
 8009332:	3c01      	subs	r4, #1
 8009334:	2c04      	cmp	r4, #4
 8009336:	d806      	bhi.n	8009346 <_strtod_l+0xf6>
 8009338:	e8df f004 	tbb	[pc, r4]
 800933c:	1714030a 	.word	0x1714030a
 8009340:	0a          	.byte	0x0a
 8009341:	00          	.byte	0x00
 8009342:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009346:	0731      	lsls	r1, r6, #28
 8009348:	d5c1      	bpl.n	80092ce <_strtod_l+0x7e>
 800934a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800934e:	e7be      	b.n	80092ce <_strtod_l+0x7e>
 8009350:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009352:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009356:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800935a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800935e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009362:	e7f0      	b.n	8009346 <_strtod_l+0xf6>
 8009364:	f8df a170 	ldr.w	sl, [pc, #368]	; 80094d8 <_strtod_l+0x288>
 8009368:	e7ed      	b.n	8009346 <_strtod_l+0xf6>
 800936a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800936e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009372:	e7e8      	b.n	8009346 <_strtod_l+0xf6>
 8009374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	921b      	str	r2, [sp, #108]	; 0x6c
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b30      	cmp	r3, #48	; 0x30
 800937e:	d0f9      	beq.n	8009374 <_strtod_l+0x124>
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0a4      	beq.n	80092ce <_strtod_l+0x7e>
 8009384:	2301      	movs	r3, #1
 8009386:	2500      	movs	r5, #0
 8009388:	220a      	movs	r2, #10
 800938a:	9307      	str	r3, [sp, #28]
 800938c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800938e:	9506      	str	r5, [sp, #24]
 8009390:	9308      	str	r3, [sp, #32]
 8009392:	9504      	str	r5, [sp, #16]
 8009394:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009396:	7807      	ldrb	r7, [r0, #0]
 8009398:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800939c:	b2d9      	uxtb	r1, r3
 800939e:	2909      	cmp	r1, #9
 80093a0:	d929      	bls.n	80093f6 <_strtod_l+0x1a6>
 80093a2:	4622      	mov	r2, r4
 80093a4:	f8d8 1000 	ldr.w	r1, [r8]
 80093a8:	f002 fa10 	bl	800b7cc <strncmp>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d031      	beq.n	8009414 <_strtod_l+0x1c4>
 80093b0:	2000      	movs	r0, #0
 80093b2:	463b      	mov	r3, r7
 80093b4:	4602      	mov	r2, r0
 80093b6:	9c04      	ldr	r4, [sp, #16]
 80093b8:	9005      	str	r0, [sp, #20]
 80093ba:	2b65      	cmp	r3, #101	; 0x65
 80093bc:	d001      	beq.n	80093c2 <_strtod_l+0x172>
 80093be:	2b45      	cmp	r3, #69	; 0x45
 80093c0:	d114      	bne.n	80093ec <_strtod_l+0x19c>
 80093c2:	b924      	cbnz	r4, 80093ce <_strtod_l+0x17e>
 80093c4:	b910      	cbnz	r0, 80093cc <_strtod_l+0x17c>
 80093c6:	9b07      	ldr	r3, [sp, #28]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d09e      	beq.n	800930a <_strtod_l+0xba>
 80093cc:	2400      	movs	r4, #0
 80093ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80093d0:	1c73      	adds	r3, r6, #1
 80093d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80093d4:	7873      	ldrb	r3, [r6, #1]
 80093d6:	2b2b      	cmp	r3, #43	; 0x2b
 80093d8:	d078      	beq.n	80094cc <_strtod_l+0x27c>
 80093da:	2b2d      	cmp	r3, #45	; 0x2d
 80093dc:	d070      	beq.n	80094c0 <_strtod_l+0x270>
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80093e6:	2f09      	cmp	r7, #9
 80093e8:	d97c      	bls.n	80094e4 <_strtod_l+0x294>
 80093ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80093ec:	f04f 0e00 	mov.w	lr, #0
 80093f0:	e09a      	b.n	8009528 <_strtod_l+0x2d8>
 80093f2:	2300      	movs	r3, #0
 80093f4:	e7c7      	b.n	8009386 <_strtod_l+0x136>
 80093f6:	9904      	ldr	r1, [sp, #16]
 80093f8:	3001      	adds	r0, #1
 80093fa:	2908      	cmp	r1, #8
 80093fc:	bfd7      	itett	le
 80093fe:	9906      	ldrle	r1, [sp, #24]
 8009400:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009404:	fb02 3301 	mlale	r3, r2, r1, r3
 8009408:	9306      	strle	r3, [sp, #24]
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	901b      	str	r0, [sp, #108]	; 0x6c
 800940e:	3301      	adds	r3, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	e7bf      	b.n	8009394 <_strtod_l+0x144>
 8009414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009416:	191a      	adds	r2, r3, r4
 8009418:	921b      	str	r2, [sp, #108]	; 0x6c
 800941a:	9a04      	ldr	r2, [sp, #16]
 800941c:	5d1b      	ldrb	r3, [r3, r4]
 800941e:	2a00      	cmp	r2, #0
 8009420:	d037      	beq.n	8009492 <_strtod_l+0x242>
 8009422:	4602      	mov	r2, r0
 8009424:	9c04      	ldr	r4, [sp, #16]
 8009426:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800942a:	2909      	cmp	r1, #9
 800942c:	d913      	bls.n	8009456 <_strtod_l+0x206>
 800942e:	2101      	movs	r1, #1
 8009430:	9105      	str	r1, [sp, #20]
 8009432:	e7c2      	b.n	80093ba <_strtod_l+0x16a>
 8009434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009436:	3001      	adds	r0, #1
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	921b      	str	r2, [sp, #108]	; 0x6c
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b30      	cmp	r3, #48	; 0x30
 8009440:	d0f8      	beq.n	8009434 <_strtod_l+0x1e4>
 8009442:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009446:	2a08      	cmp	r2, #8
 8009448:	f200 84f0 	bhi.w	8009e2c <_strtod_l+0xbdc>
 800944c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800944e:	9208      	str	r2, [sp, #32]
 8009450:	4602      	mov	r2, r0
 8009452:	2000      	movs	r0, #0
 8009454:	4604      	mov	r4, r0
 8009456:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800945a:	f100 0101 	add.w	r1, r0, #1
 800945e:	d012      	beq.n	8009486 <_strtod_l+0x236>
 8009460:	440a      	add	r2, r1
 8009462:	270a      	movs	r7, #10
 8009464:	4621      	mov	r1, r4
 8009466:	eb00 0c04 	add.w	ip, r0, r4
 800946a:	458c      	cmp	ip, r1
 800946c:	d113      	bne.n	8009496 <_strtod_l+0x246>
 800946e:	1821      	adds	r1, r4, r0
 8009470:	2908      	cmp	r1, #8
 8009472:	f104 0401 	add.w	r4, r4, #1
 8009476:	4404      	add	r4, r0
 8009478:	dc19      	bgt.n	80094ae <_strtod_l+0x25e>
 800947a:	210a      	movs	r1, #10
 800947c:	9b06      	ldr	r3, [sp, #24]
 800947e:	fb01 e303 	mla	r3, r1, r3, lr
 8009482:	9306      	str	r3, [sp, #24]
 8009484:	2100      	movs	r1, #0
 8009486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009488:	1c58      	adds	r0, r3, #1
 800948a:	901b      	str	r0, [sp, #108]	; 0x6c
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	4608      	mov	r0, r1
 8009490:	e7c9      	b.n	8009426 <_strtod_l+0x1d6>
 8009492:	9804      	ldr	r0, [sp, #16]
 8009494:	e7d3      	b.n	800943e <_strtod_l+0x1ee>
 8009496:	2908      	cmp	r1, #8
 8009498:	f101 0101 	add.w	r1, r1, #1
 800949c:	dc03      	bgt.n	80094a6 <_strtod_l+0x256>
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	437b      	muls	r3, r7
 80094a2:	9306      	str	r3, [sp, #24]
 80094a4:	e7e1      	b.n	800946a <_strtod_l+0x21a>
 80094a6:	2910      	cmp	r1, #16
 80094a8:	bfd8      	it	le
 80094aa:	437d      	mulle	r5, r7
 80094ac:	e7dd      	b.n	800946a <_strtod_l+0x21a>
 80094ae:	2c10      	cmp	r4, #16
 80094b0:	bfdc      	itt	le
 80094b2:	210a      	movle	r1, #10
 80094b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80094b8:	e7e4      	b.n	8009484 <_strtod_l+0x234>
 80094ba:	2301      	movs	r3, #1
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	e781      	b.n	80093c4 <_strtod_l+0x174>
 80094c0:	f04f 0c01 	mov.w	ip, #1
 80094c4:	1cb3      	adds	r3, r6, #2
 80094c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80094c8:	78b3      	ldrb	r3, [r6, #2]
 80094ca:	e78a      	b.n	80093e2 <_strtod_l+0x192>
 80094cc:	f04f 0c00 	mov.w	ip, #0
 80094d0:	e7f8      	b.n	80094c4 <_strtod_l+0x274>
 80094d2:	bf00      	nop
 80094d4:	0800cffc 	.word	0x0800cffc
 80094d8:	7ff00000 	.word	0x7ff00000
 80094dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094de:	1c5f      	adds	r7, r3, #1
 80094e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	2b30      	cmp	r3, #48	; 0x30
 80094e6:	d0f9      	beq.n	80094dc <_strtod_l+0x28c>
 80094e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80094ec:	2f08      	cmp	r7, #8
 80094ee:	f63f af7d 	bhi.w	80093ec <_strtod_l+0x19c>
 80094f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80094f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094f8:	9309      	str	r3, [sp, #36]	; 0x24
 80094fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094fc:	1c5f      	adds	r7, r3, #1
 80094fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009506:	f1b8 0f09 	cmp.w	r8, #9
 800950a:	d937      	bls.n	800957c <_strtod_l+0x32c>
 800950c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800950e:	1a7f      	subs	r7, r7, r1
 8009510:	2f08      	cmp	r7, #8
 8009512:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009516:	dc37      	bgt.n	8009588 <_strtod_l+0x338>
 8009518:	45be      	cmp	lr, r7
 800951a:	bfa8      	it	ge
 800951c:	46be      	movge	lr, r7
 800951e:	f1bc 0f00 	cmp.w	ip, #0
 8009522:	d001      	beq.n	8009528 <_strtod_l+0x2d8>
 8009524:	f1ce 0e00 	rsb	lr, lr, #0
 8009528:	2c00      	cmp	r4, #0
 800952a:	d151      	bne.n	80095d0 <_strtod_l+0x380>
 800952c:	2800      	cmp	r0, #0
 800952e:	f47f aece 	bne.w	80092ce <_strtod_l+0x7e>
 8009532:	9a07      	ldr	r2, [sp, #28]
 8009534:	2a00      	cmp	r2, #0
 8009536:	f47f aeca 	bne.w	80092ce <_strtod_l+0x7e>
 800953a:	9a05      	ldr	r2, [sp, #20]
 800953c:	2a00      	cmp	r2, #0
 800953e:	f47f aee4 	bne.w	800930a <_strtod_l+0xba>
 8009542:	2b4e      	cmp	r3, #78	; 0x4e
 8009544:	d027      	beq.n	8009596 <_strtod_l+0x346>
 8009546:	dc21      	bgt.n	800958c <_strtod_l+0x33c>
 8009548:	2b49      	cmp	r3, #73	; 0x49
 800954a:	f47f aede 	bne.w	800930a <_strtod_l+0xba>
 800954e:	49a4      	ldr	r1, [pc, #656]	; (80097e0 <_strtod_l+0x590>)
 8009550:	a81b      	add	r0, sp, #108	; 0x6c
 8009552:	f001 f8e7 	bl	800a724 <__match>
 8009556:	2800      	cmp	r0, #0
 8009558:	f43f aed7 	beq.w	800930a <_strtod_l+0xba>
 800955c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955e:	49a1      	ldr	r1, [pc, #644]	; (80097e4 <_strtod_l+0x594>)
 8009560:	3b01      	subs	r3, #1
 8009562:	a81b      	add	r0, sp, #108	; 0x6c
 8009564:	931b      	str	r3, [sp, #108]	; 0x6c
 8009566:	f001 f8dd 	bl	800a724 <__match>
 800956a:	b910      	cbnz	r0, 8009572 <_strtod_l+0x322>
 800956c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800956e:	3301      	adds	r3, #1
 8009570:	931b      	str	r3, [sp, #108]	; 0x6c
 8009572:	f8df a284 	ldr.w	sl, [pc, #644]	; 80097f8 <_strtod_l+0x5a8>
 8009576:	f04f 0900 	mov.w	r9, #0
 800957a:	e6a8      	b.n	80092ce <_strtod_l+0x7e>
 800957c:	210a      	movs	r1, #10
 800957e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009582:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009586:	e7b8      	b.n	80094fa <_strtod_l+0x2aa>
 8009588:	46be      	mov	lr, r7
 800958a:	e7c8      	b.n	800951e <_strtod_l+0x2ce>
 800958c:	2b69      	cmp	r3, #105	; 0x69
 800958e:	d0de      	beq.n	800954e <_strtod_l+0x2fe>
 8009590:	2b6e      	cmp	r3, #110	; 0x6e
 8009592:	f47f aeba 	bne.w	800930a <_strtod_l+0xba>
 8009596:	4994      	ldr	r1, [pc, #592]	; (80097e8 <_strtod_l+0x598>)
 8009598:	a81b      	add	r0, sp, #108	; 0x6c
 800959a:	f001 f8c3 	bl	800a724 <__match>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f aeb3 	beq.w	800930a <_strtod_l+0xba>
 80095a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b28      	cmp	r3, #40	; 0x28
 80095aa:	d10e      	bne.n	80095ca <_strtod_l+0x37a>
 80095ac:	aa1e      	add	r2, sp, #120	; 0x78
 80095ae:	498f      	ldr	r1, [pc, #572]	; (80097ec <_strtod_l+0x59c>)
 80095b0:	a81b      	add	r0, sp, #108	; 0x6c
 80095b2:	f001 f8cb 	bl	800a74c <__hexnan>
 80095b6:	2805      	cmp	r0, #5
 80095b8:	d107      	bne.n	80095ca <_strtod_l+0x37a>
 80095ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095bc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80095c0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80095c4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80095c8:	e681      	b.n	80092ce <_strtod_l+0x7e>
 80095ca:	f8df a234 	ldr.w	sl, [pc, #564]	; 8009800 <_strtod_l+0x5b0>
 80095ce:	e7d2      	b.n	8009576 <_strtod_l+0x326>
 80095d0:	ebae 0302 	sub.w	r3, lr, r2
 80095d4:	9307      	str	r3, [sp, #28]
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	9806      	ldr	r0, [sp, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	bf08      	it	eq
 80095de:	4623      	moveq	r3, r4
 80095e0:	2c10      	cmp	r4, #16
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	46a0      	mov	r8, r4
 80095e6:	bfa8      	it	ge
 80095e8:	f04f 0810 	movge.w	r8, #16
 80095ec:	f7f6 fefa 	bl	80003e4 <__aeabi_ui2d>
 80095f0:	2c09      	cmp	r4, #9
 80095f2:	4681      	mov	r9, r0
 80095f4:	468a      	mov	sl, r1
 80095f6:	dc13      	bgt.n	8009620 <_strtod_l+0x3d0>
 80095f8:	9b07      	ldr	r3, [sp, #28]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f43f ae67 	beq.w	80092ce <_strtod_l+0x7e>
 8009600:	9b07      	ldr	r3, [sp, #28]
 8009602:	dd7e      	ble.n	8009702 <_strtod_l+0x4b2>
 8009604:	2b16      	cmp	r3, #22
 8009606:	dc65      	bgt.n	80096d4 <_strtod_l+0x484>
 8009608:	4a79      	ldr	r2, [pc, #484]	; (80097f0 <_strtod_l+0x5a0>)
 800960a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800960e:	464a      	mov	r2, r9
 8009610:	e9de 0100 	ldrd	r0, r1, [lr]
 8009614:	4653      	mov	r3, sl
 8009616:	f7f6 ff5f 	bl	80004d8 <__aeabi_dmul>
 800961a:	4681      	mov	r9, r0
 800961c:	468a      	mov	sl, r1
 800961e:	e656      	b.n	80092ce <_strtod_l+0x7e>
 8009620:	4b73      	ldr	r3, [pc, #460]	; (80097f0 <_strtod_l+0x5a0>)
 8009622:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009626:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800962a:	f7f6 ff55 	bl	80004d8 <__aeabi_dmul>
 800962e:	4606      	mov	r6, r0
 8009630:	4628      	mov	r0, r5
 8009632:	460f      	mov	r7, r1
 8009634:	f7f6 fed6 	bl	80003e4 <__aeabi_ui2d>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f6 fd94 	bl	800016c <__adddf3>
 8009644:	2c0f      	cmp	r4, #15
 8009646:	4681      	mov	r9, r0
 8009648:	468a      	mov	sl, r1
 800964a:	ddd5      	ble.n	80095f8 <_strtod_l+0x3a8>
 800964c:	9b07      	ldr	r3, [sp, #28]
 800964e:	eba4 0808 	sub.w	r8, r4, r8
 8009652:	4498      	add	r8, r3
 8009654:	f1b8 0f00 	cmp.w	r8, #0
 8009658:	f340 809a 	ble.w	8009790 <_strtod_l+0x540>
 800965c:	f018 030f 	ands.w	r3, r8, #15
 8009660:	d00a      	beq.n	8009678 <_strtod_l+0x428>
 8009662:	4963      	ldr	r1, [pc, #396]	; (80097f0 <_strtod_l+0x5a0>)
 8009664:	464a      	mov	r2, r9
 8009666:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800966a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966e:	4653      	mov	r3, sl
 8009670:	f7f6 ff32 	bl	80004d8 <__aeabi_dmul>
 8009674:	4681      	mov	r9, r0
 8009676:	468a      	mov	sl, r1
 8009678:	f038 080f 	bics.w	r8, r8, #15
 800967c:	d077      	beq.n	800976e <_strtod_l+0x51e>
 800967e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009682:	dd4b      	ble.n	800971c <_strtod_l+0x4cc>
 8009684:	f04f 0800 	mov.w	r8, #0
 8009688:	f8cd 8010 	str.w	r8, [sp, #16]
 800968c:	f8cd 8020 	str.w	r8, [sp, #32]
 8009690:	f8cd 8018 	str.w	r8, [sp, #24]
 8009694:	2322      	movs	r3, #34	; 0x22
 8009696:	f04f 0900 	mov.w	r9, #0
 800969a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80097f8 <_strtod_l+0x5a8>
 800969e:	f8cb 3000 	str.w	r3, [fp]
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f43f ae12 	beq.w	80092ce <_strtod_l+0x7e>
 80096aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80096ac:	4658      	mov	r0, fp
 80096ae:	f001 f933 	bl	800a918 <_Bfree>
 80096b2:	9906      	ldr	r1, [sp, #24]
 80096b4:	4658      	mov	r0, fp
 80096b6:	f001 f92f 	bl	800a918 <_Bfree>
 80096ba:	9904      	ldr	r1, [sp, #16]
 80096bc:	4658      	mov	r0, fp
 80096be:	f001 f92b 	bl	800a918 <_Bfree>
 80096c2:	9908      	ldr	r1, [sp, #32]
 80096c4:	4658      	mov	r0, fp
 80096c6:	f001 f927 	bl	800a918 <_Bfree>
 80096ca:	4641      	mov	r1, r8
 80096cc:	4658      	mov	r0, fp
 80096ce:	f001 f923 	bl	800a918 <_Bfree>
 80096d2:	e5fc      	b.n	80092ce <_strtod_l+0x7e>
 80096d4:	9a07      	ldr	r2, [sp, #28]
 80096d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80096da:	4293      	cmp	r3, r2
 80096dc:	dbb6      	blt.n	800964c <_strtod_l+0x3fc>
 80096de:	4d44      	ldr	r5, [pc, #272]	; (80097f0 <_strtod_l+0x5a0>)
 80096e0:	f1c4 040f 	rsb	r4, r4, #15
 80096e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80096e8:	464a      	mov	r2, r9
 80096ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ee:	4653      	mov	r3, sl
 80096f0:	f7f6 fef2 	bl	80004d8 <__aeabi_dmul>
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	1b1c      	subs	r4, r3, r4
 80096f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80096fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009700:	e789      	b.n	8009616 <_strtod_l+0x3c6>
 8009702:	f113 0f16 	cmn.w	r3, #22
 8009706:	dba1      	blt.n	800964c <_strtod_l+0x3fc>
 8009708:	4a39      	ldr	r2, [pc, #228]	; (80097f0 <_strtod_l+0x5a0>)
 800970a:	4648      	mov	r0, r9
 800970c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009710:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009714:	4651      	mov	r1, sl
 8009716:	f7f7 f809 	bl	800072c <__aeabi_ddiv>
 800971a:	e77e      	b.n	800961a <_strtod_l+0x3ca>
 800971c:	2300      	movs	r3, #0
 800971e:	4648      	mov	r0, r9
 8009720:	4651      	mov	r1, sl
 8009722:	461d      	mov	r5, r3
 8009724:	4e33      	ldr	r6, [pc, #204]	; (80097f4 <_strtod_l+0x5a4>)
 8009726:	ea4f 1828 	mov.w	r8, r8, asr #4
 800972a:	f1b8 0f01 	cmp.w	r8, #1
 800972e:	dc21      	bgt.n	8009774 <_strtod_l+0x524>
 8009730:	b10b      	cbz	r3, 8009736 <_strtod_l+0x4e6>
 8009732:	4681      	mov	r9, r0
 8009734:	468a      	mov	sl, r1
 8009736:	4b2f      	ldr	r3, [pc, #188]	; (80097f4 <_strtod_l+0x5a4>)
 8009738:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800973c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009740:	464a      	mov	r2, r9
 8009742:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009746:	4653      	mov	r3, sl
 8009748:	f7f6 fec6 	bl	80004d8 <__aeabi_dmul>
 800974c:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <_strtod_l+0x5a8>)
 800974e:	460a      	mov	r2, r1
 8009750:	400b      	ands	r3, r1
 8009752:	492a      	ldr	r1, [pc, #168]	; (80097fc <_strtod_l+0x5ac>)
 8009754:	4681      	mov	r9, r0
 8009756:	428b      	cmp	r3, r1
 8009758:	d894      	bhi.n	8009684 <_strtod_l+0x434>
 800975a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800975e:	428b      	cmp	r3, r1
 8009760:	bf86      	itte	hi
 8009762:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8009766:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8009804 <_strtod_l+0x5b4>
 800976a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800976e:	2300      	movs	r3, #0
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	e07b      	b.n	800986c <_strtod_l+0x61c>
 8009774:	f018 0f01 	tst.w	r8, #1
 8009778:	d006      	beq.n	8009788 <_strtod_l+0x538>
 800977a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fea9 	bl	80004d8 <__aeabi_dmul>
 8009786:	2301      	movs	r3, #1
 8009788:	3501      	adds	r5, #1
 800978a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800978e:	e7cc      	b.n	800972a <_strtod_l+0x4da>
 8009790:	d0ed      	beq.n	800976e <_strtod_l+0x51e>
 8009792:	f1c8 0800 	rsb	r8, r8, #0
 8009796:	f018 020f 	ands.w	r2, r8, #15
 800979a:	d00a      	beq.n	80097b2 <_strtod_l+0x562>
 800979c:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <_strtod_l+0x5a0>)
 800979e:	4648      	mov	r0, r9
 80097a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a4:	4651      	mov	r1, sl
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 ffbf 	bl	800072c <__aeabi_ddiv>
 80097ae:	4681      	mov	r9, r0
 80097b0:	468a      	mov	sl, r1
 80097b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80097b6:	d0da      	beq.n	800976e <_strtod_l+0x51e>
 80097b8:	f1b8 0f1f 	cmp.w	r8, #31
 80097bc:	dd24      	ble.n	8009808 <_strtod_l+0x5b8>
 80097be:	f04f 0800 	mov.w	r8, #0
 80097c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80097c6:	f8cd 8020 	str.w	r8, [sp, #32]
 80097ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80097ce:	2322      	movs	r3, #34	; 0x22
 80097d0:	f04f 0900 	mov.w	r9, #0
 80097d4:	f04f 0a00 	mov.w	sl, #0
 80097d8:	f8cb 3000 	str.w	r3, [fp]
 80097dc:	e761      	b.n	80096a2 <_strtod_l+0x452>
 80097de:	bf00      	nop
 80097e0:	0800cff4 	.word	0x0800cff4
 80097e4:	0800d293 	.word	0x0800d293
 80097e8:	0800cff7 	.word	0x0800cff7
 80097ec:	0800d010 	.word	0x0800d010
 80097f0:	0800d088 	.word	0x0800d088
 80097f4:	0800d060 	.word	0x0800d060
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	7ca00000 	.word	0x7ca00000
 8009800:	fff80000 	.word	0xfff80000
 8009804:	7fefffff 	.word	0x7fefffff
 8009808:	f018 0310 	ands.w	r3, r8, #16
 800980c:	bf18      	it	ne
 800980e:	236a      	movne	r3, #106	; 0x6a
 8009810:	4648      	mov	r0, r9
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	4651      	mov	r1, sl
 8009816:	2300      	movs	r3, #0
 8009818:	4da1      	ldr	r5, [pc, #644]	; (8009aa0 <_strtod_l+0x850>)
 800981a:	f1b8 0f00 	cmp.w	r8, #0
 800981e:	f300 8113 	bgt.w	8009a48 <_strtod_l+0x7f8>
 8009822:	b10b      	cbz	r3, 8009828 <_strtod_l+0x5d8>
 8009824:	4681      	mov	r9, r0
 8009826:	468a      	mov	sl, r1
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	b1bb      	cbz	r3, 800985c <_strtod_l+0x60c>
 800982c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8009830:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009834:	2b00      	cmp	r3, #0
 8009836:	4651      	mov	r1, sl
 8009838:	dd10      	ble.n	800985c <_strtod_l+0x60c>
 800983a:	2b1f      	cmp	r3, #31
 800983c:	f340 8110 	ble.w	8009a60 <_strtod_l+0x810>
 8009840:	2b34      	cmp	r3, #52	; 0x34
 8009842:	bfd8      	it	le
 8009844:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009848:	f04f 0900 	mov.w	r9, #0
 800984c:	bfcf      	iteee	gt
 800984e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8009852:	3b20      	suble	r3, #32
 8009854:	fa02 f303 	lslle.w	r3, r2, r3
 8009858:	ea03 0a01 	andle.w	sl, r3, r1
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	4648      	mov	r0, r9
 8009862:	4651      	mov	r1, sl
 8009864:	f7f7 f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8009868:	2800      	cmp	r0, #0
 800986a:	d1a8      	bne.n	80097be <_strtod_l+0x56e>
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	9a04      	ldr	r2, [sp, #16]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	9908      	ldr	r1, [sp, #32]
 8009874:	4623      	mov	r3, r4
 8009876:	4658      	mov	r0, fp
 8009878:	f001 f8a0 	bl	800a9bc <__s2b>
 800987c:	9008      	str	r0, [sp, #32]
 800987e:	2800      	cmp	r0, #0
 8009880:	f43f af00 	beq.w	8009684 <_strtod_l+0x434>
 8009884:	9a07      	ldr	r2, [sp, #28]
 8009886:	9b07      	ldr	r3, [sp, #28]
 8009888:	2a00      	cmp	r2, #0
 800988a:	f1c3 0300 	rsb	r3, r3, #0
 800988e:	bfa8      	it	ge
 8009890:	2300      	movge	r3, #0
 8009892:	f04f 0800 	mov.w	r8, #0
 8009896:	930e      	str	r3, [sp, #56]	; 0x38
 8009898:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800989c:	9316      	str	r3, [sp, #88]	; 0x58
 800989e:	f8cd 8010 	str.w	r8, [sp, #16]
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	4658      	mov	r0, fp
 80098a6:	6859      	ldr	r1, [r3, #4]
 80098a8:	f001 f802 	bl	800a8b0 <_Balloc>
 80098ac:	9006      	str	r0, [sp, #24]
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f aef0 	beq.w	8009694 <_strtod_l+0x444>
 80098b4:	9b08      	ldr	r3, [sp, #32]
 80098b6:	300c      	adds	r0, #12
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	f103 010c 	add.w	r1, r3, #12
 80098be:	3202      	adds	r2, #2
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	f000 ffea 	bl	800a89a <memcpy>
 80098c6:	ab1e      	add	r3, sp, #120	; 0x78
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	ab1d      	add	r3, sp, #116	; 0x74
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	464a      	mov	r2, r9
 80098d0:	4653      	mov	r3, sl
 80098d2:	4658      	mov	r0, fp
 80098d4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80098d8:	f001 fb2a 	bl	800af30 <__d2b>
 80098dc:	901c      	str	r0, [sp, #112]	; 0x70
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f aed8 	beq.w	8009694 <_strtod_l+0x444>
 80098e4:	2101      	movs	r1, #1
 80098e6:	4658      	mov	r0, fp
 80098e8:	f001 f8f4 	bl	800aad4 <__i2b>
 80098ec:	9004      	str	r0, [sp, #16]
 80098ee:	4603      	mov	r3, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f43f aecf 	beq.w	8009694 <_strtod_l+0x444>
 80098f6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80098f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	bfab      	itete	ge
 80098fe:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009900:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009902:	18ee      	addge	r6, r5, r3
 8009904:	1b5c      	sublt	r4, r3, r5
 8009906:	9b05      	ldr	r3, [sp, #20]
 8009908:	bfa8      	it	ge
 800990a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800990c:	eba5 0503 	sub.w	r5, r5, r3
 8009910:	4415      	add	r5, r2
 8009912:	4b64      	ldr	r3, [pc, #400]	; (8009aa4 <_strtod_l+0x854>)
 8009914:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8009918:	bfb8      	it	lt
 800991a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800991c:	429d      	cmp	r5, r3
 800991e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009922:	f280 80af 	bge.w	8009a84 <_strtod_l+0x834>
 8009926:	1b5b      	subs	r3, r3, r5
 8009928:	2b1f      	cmp	r3, #31
 800992a:	eba2 0203 	sub.w	r2, r2, r3
 800992e:	f04f 0701 	mov.w	r7, #1
 8009932:	f300 809c 	bgt.w	8009a6e <_strtod_l+0x81e>
 8009936:	2500      	movs	r5, #0
 8009938:	fa07 f303 	lsl.w	r3, r7, r3
 800993c:	930f      	str	r3, [sp, #60]	; 0x3c
 800993e:	18b7      	adds	r7, r6, r2
 8009940:	9b05      	ldr	r3, [sp, #20]
 8009942:	42be      	cmp	r6, r7
 8009944:	4414      	add	r4, r2
 8009946:	441c      	add	r4, r3
 8009948:	4633      	mov	r3, r6
 800994a:	bfa8      	it	ge
 800994c:	463b      	movge	r3, r7
 800994e:	42a3      	cmp	r3, r4
 8009950:	bfa8      	it	ge
 8009952:	4623      	movge	r3, r4
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfc2      	ittt	gt
 8009958:	1aff      	subgt	r7, r7, r3
 800995a:	1ae4      	subgt	r4, r4, r3
 800995c:	1af6      	subgt	r6, r6, r3
 800995e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009960:	b1bb      	cbz	r3, 8009992 <_strtod_l+0x742>
 8009962:	461a      	mov	r2, r3
 8009964:	9904      	ldr	r1, [sp, #16]
 8009966:	4658      	mov	r0, fp
 8009968:	f001 f952 	bl	800ac10 <__pow5mult>
 800996c:	9004      	str	r0, [sp, #16]
 800996e:	2800      	cmp	r0, #0
 8009970:	f43f ae90 	beq.w	8009694 <_strtod_l+0x444>
 8009974:	4601      	mov	r1, r0
 8009976:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009978:	4658      	mov	r0, fp
 800997a:	f001 f8b4 	bl	800aae6 <__multiply>
 800997e:	9009      	str	r0, [sp, #36]	; 0x24
 8009980:	2800      	cmp	r0, #0
 8009982:	f43f ae87 	beq.w	8009694 <_strtod_l+0x444>
 8009986:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009988:	4658      	mov	r0, fp
 800998a:	f000 ffc5 	bl	800a918 <_Bfree>
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	931c      	str	r3, [sp, #112]	; 0x70
 8009992:	2f00      	cmp	r7, #0
 8009994:	dc7a      	bgt.n	8009a8c <_strtod_l+0x83c>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	dd08      	ble.n	80099ae <_strtod_l+0x75e>
 800999c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800999e:	9906      	ldr	r1, [sp, #24]
 80099a0:	4658      	mov	r0, fp
 80099a2:	f001 f935 	bl	800ac10 <__pow5mult>
 80099a6:	9006      	str	r0, [sp, #24]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f ae73 	beq.w	8009694 <_strtod_l+0x444>
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	dd08      	ble.n	80099c4 <_strtod_l+0x774>
 80099b2:	4622      	mov	r2, r4
 80099b4:	9906      	ldr	r1, [sp, #24]
 80099b6:	4658      	mov	r0, fp
 80099b8:	f001 f978 	bl	800acac <__lshift>
 80099bc:	9006      	str	r0, [sp, #24]
 80099be:	2800      	cmp	r0, #0
 80099c0:	f43f ae68 	beq.w	8009694 <_strtod_l+0x444>
 80099c4:	2e00      	cmp	r6, #0
 80099c6:	dd08      	ble.n	80099da <_strtod_l+0x78a>
 80099c8:	4632      	mov	r2, r6
 80099ca:	9904      	ldr	r1, [sp, #16]
 80099cc:	4658      	mov	r0, fp
 80099ce:	f001 f96d 	bl	800acac <__lshift>
 80099d2:	9004      	str	r0, [sp, #16]
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f43f ae5d 	beq.w	8009694 <_strtod_l+0x444>
 80099da:	9a06      	ldr	r2, [sp, #24]
 80099dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099de:	4658      	mov	r0, fp
 80099e0:	f001 f9d2 	bl	800ad88 <__mdiff>
 80099e4:	4680      	mov	r8, r0
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f ae54 	beq.w	8009694 <_strtod_l+0x444>
 80099ec:	2400      	movs	r4, #0
 80099ee:	68c3      	ldr	r3, [r0, #12]
 80099f0:	9904      	ldr	r1, [sp, #16]
 80099f2:	60c4      	str	r4, [r0, #12]
 80099f4:	930c      	str	r3, [sp, #48]	; 0x30
 80099f6:	f001 f9ad 	bl	800ad54 <__mcmp>
 80099fa:	42a0      	cmp	r0, r4
 80099fc:	da54      	bge.n	8009aa8 <_strtod_l+0x858>
 80099fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a00:	b9f3      	cbnz	r3, 8009a40 <_strtod_l+0x7f0>
 8009a02:	f1b9 0f00 	cmp.w	r9, #0
 8009a06:	d11b      	bne.n	8009a40 <_strtod_l+0x7f0>
 8009a08:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8009a0c:	b9c3      	cbnz	r3, 8009a40 <_strtod_l+0x7f0>
 8009a0e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009a12:	0d1b      	lsrs	r3, r3, #20
 8009a14:	051b      	lsls	r3, r3, #20
 8009a16:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a1a:	d911      	bls.n	8009a40 <_strtod_l+0x7f0>
 8009a1c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009a20:	b91b      	cbnz	r3, 8009a2a <_strtod_l+0x7da>
 8009a22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	dd0a      	ble.n	8009a40 <_strtod_l+0x7f0>
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f001 f93c 	bl	800acac <__lshift>
 8009a34:	9904      	ldr	r1, [sp, #16]
 8009a36:	4680      	mov	r8, r0
 8009a38:	f001 f98c 	bl	800ad54 <__mcmp>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	dc68      	bgt.n	8009b12 <_strtod_l+0x8c2>
 8009a40:	9b05      	ldr	r3, [sp, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d172      	bne.n	8009b2c <_strtod_l+0x8dc>
 8009a46:	e630      	b.n	80096aa <_strtod_l+0x45a>
 8009a48:	f018 0f01 	tst.w	r8, #1
 8009a4c:	d004      	beq.n	8009a58 <_strtod_l+0x808>
 8009a4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a52:	f7f6 fd41 	bl	80004d8 <__aeabi_dmul>
 8009a56:	2301      	movs	r3, #1
 8009a58:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a5c:	3508      	adds	r5, #8
 8009a5e:	e6dc      	b.n	800981a <_strtod_l+0x5ca>
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	ea03 0909 	and.w	r9, r3, r9
 8009a6c:	e6f6      	b.n	800985c <_strtod_l+0x60c>
 8009a6e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009a72:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009a76:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009a7a:	35e2      	adds	r5, #226	; 0xe2
 8009a7c:	fa07 f505 	lsl.w	r5, r7, r5
 8009a80:	970f      	str	r7, [sp, #60]	; 0x3c
 8009a82:	e75c      	b.n	800993e <_strtod_l+0x6ee>
 8009a84:	2301      	movs	r3, #1
 8009a86:	2500      	movs	r5, #0
 8009a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a8a:	e758      	b.n	800993e <_strtod_l+0x6ee>
 8009a8c:	463a      	mov	r2, r7
 8009a8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a90:	4658      	mov	r0, fp
 8009a92:	f001 f90b 	bl	800acac <__lshift>
 8009a96:	901c      	str	r0, [sp, #112]	; 0x70
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f47f af7c 	bne.w	8009996 <_strtod_l+0x746>
 8009a9e:	e5f9      	b.n	8009694 <_strtod_l+0x444>
 8009aa0:	0800d028 	.word	0x0800d028
 8009aa4:	fffffc02 	.word	0xfffffc02
 8009aa8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009aac:	f040 8089 	bne.w	8009bc2 <_strtod_l+0x972>
 8009ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ab2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8009ab6:	b342      	cbz	r2, 8009b0a <_strtod_l+0x8ba>
 8009ab8:	4aaf      	ldr	r2, [pc, #700]	; (8009d78 <_strtod_l+0xb28>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d156      	bne.n	8009b6c <_strtod_l+0x91c>
 8009abe:	9b05      	ldr	r3, [sp, #20]
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	b1eb      	cbz	r3, 8009b00 <_strtod_l+0x8b0>
 8009ac4:	4653      	mov	r3, sl
 8009ac6:	4aad      	ldr	r2, [pc, #692]	; (8009d7c <_strtod_l+0xb2c>)
 8009ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009acc:	401a      	ands	r2, r3
 8009ace:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009ad2:	d818      	bhi.n	8009b06 <_strtod_l+0x8b6>
 8009ad4:	0d12      	lsrs	r2, r2, #20
 8009ad6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ada:	fa01 f303 	lsl.w	r3, r1, r3
 8009ade:	4298      	cmp	r0, r3
 8009ae0:	d144      	bne.n	8009b6c <_strtod_l+0x91c>
 8009ae2:	4ba7      	ldr	r3, [pc, #668]	; (8009d80 <_strtod_l+0xb30>)
 8009ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d102      	bne.n	8009af0 <_strtod_l+0x8a0>
 8009aea:	3001      	adds	r0, #1
 8009aec:	f43f add2 	beq.w	8009694 <_strtod_l+0x444>
 8009af0:	4ba2      	ldr	r3, [pc, #648]	; (8009d7c <_strtod_l+0xb2c>)
 8009af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af4:	f04f 0900 	mov.w	r9, #0
 8009af8:	401a      	ands	r2, r3
 8009afa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8009afe:	e79f      	b.n	8009a40 <_strtod_l+0x7f0>
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b04:	e7eb      	b.n	8009ade <_strtod_l+0x88e>
 8009b06:	460b      	mov	r3, r1
 8009b08:	e7e9      	b.n	8009ade <_strtod_l+0x88e>
 8009b0a:	bb7b      	cbnz	r3, 8009b6c <_strtod_l+0x91c>
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	d12c      	bne.n	8009b6c <_strtod_l+0x91c>
 8009b12:	9905      	ldr	r1, [sp, #20]
 8009b14:	4653      	mov	r3, sl
 8009b16:	4a99      	ldr	r2, [pc, #612]	; (8009d7c <_strtod_l+0xb2c>)
 8009b18:	b1f1      	cbz	r1, 8009b58 <_strtod_l+0x908>
 8009b1a:	ea02 010a 	and.w	r1, r2, sl
 8009b1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b22:	dc19      	bgt.n	8009b58 <_strtod_l+0x908>
 8009b24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b28:	f77f ae51 	ble.w	80097ce <_strtod_l+0x57e>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4a95      	ldr	r2, [pc, #596]	; (8009d84 <_strtod_l+0xb34>)
 8009b30:	4648      	mov	r0, r9
 8009b32:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009b36:	4651      	mov	r1, sl
 8009b38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b3c:	f7f6 fccc 	bl	80004d8 <__aeabi_dmul>
 8009b40:	4681      	mov	r9, r0
 8009b42:	468a      	mov	sl, r1
 8009b44:	2900      	cmp	r1, #0
 8009b46:	f47f adb0 	bne.w	80096aa <_strtod_l+0x45a>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f47f adad 	bne.w	80096aa <_strtod_l+0x45a>
 8009b50:	2322      	movs	r3, #34	; 0x22
 8009b52:	f8cb 3000 	str.w	r3, [fp]
 8009b56:	e5a8      	b.n	80096aa <_strtod_l+0x45a>
 8009b58:	4013      	ands	r3, r2
 8009b5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b5e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8009b62:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009b66:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8009b6a:	e769      	b.n	8009a40 <_strtod_l+0x7f0>
 8009b6c:	b19d      	cbz	r5, 8009b96 <_strtod_l+0x946>
 8009b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b70:	421d      	tst	r5, r3
 8009b72:	f43f af65 	beq.w	8009a40 <_strtod_l+0x7f0>
 8009b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b78:	9a05      	ldr	r2, [sp, #20]
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	4651      	mov	r1, sl
 8009b7e:	b173      	cbz	r3, 8009b9e <_strtod_l+0x94e>
 8009b80:	f7ff fb45 	bl	800920e <sulp>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b8c:	f7f6 faee 	bl	800016c <__adddf3>
 8009b90:	4681      	mov	r9, r0
 8009b92:	468a      	mov	sl, r1
 8009b94:	e754      	b.n	8009a40 <_strtod_l+0x7f0>
 8009b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b98:	ea13 0f09 	tst.w	r3, r9
 8009b9c:	e7e9      	b.n	8009b72 <_strtod_l+0x922>
 8009b9e:	f7ff fb36 	bl	800920e <sulp>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009baa:	f7f6 fadd 	bl	8000168 <__aeabi_dsub>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4681      	mov	r9, r0
 8009bb4:	468a      	mov	sl, r1
 8009bb6:	f7f6 fef7 	bl	80009a8 <__aeabi_dcmpeq>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	f47f ae07 	bne.w	80097ce <_strtod_l+0x57e>
 8009bc0:	e73e      	b.n	8009a40 <_strtod_l+0x7f0>
 8009bc2:	9904      	ldr	r1, [sp, #16]
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	f001 fa02 	bl	800afce <__ratio>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	f7f6 fefc 	bl	80009d0 <__aeabi_dcmple>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d075      	beq.n	8009cc8 <_strtod_l+0xa78>
 8009bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d047      	beq.n	8009c72 <_strtod_l+0xa22>
 8009be2:	2600      	movs	r6, #0
 8009be4:	4f68      	ldr	r7, [pc, #416]	; (8009d88 <_strtod_l+0xb38>)
 8009be6:	4d68      	ldr	r5, [pc, #416]	; (8009d88 <_strtod_l+0xb38>)
 8009be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bee:	0d1b      	lsrs	r3, r3, #20
 8009bf0:	051b      	lsls	r3, r3, #20
 8009bf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bf6:	4b65      	ldr	r3, [pc, #404]	; (8009d8c <_strtod_l+0xb3c>)
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	f040 80cf 	bne.w	8009d9c <_strtod_l+0xb4c>
 8009bfe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c02:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	4648      	mov	r0, r9
 8009c0a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8009c0e:	4651      	mov	r1, sl
 8009c10:	f001 f918 	bl	800ae44 <__ulp>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 fc5c 	bl	80004d8 <__aeabi_dmul>
 8009c20:	464a      	mov	r2, r9
 8009c22:	4653      	mov	r3, sl
 8009c24:	f7f6 faa2 	bl	800016c <__adddf3>
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4954      	ldr	r1, [pc, #336]	; (8009d7c <_strtod_l+0xb2c>)
 8009c2c:	4a58      	ldr	r2, [pc, #352]	; (8009d90 <_strtod_l+0xb40>)
 8009c2e:	4019      	ands	r1, r3
 8009c30:	4291      	cmp	r1, r2
 8009c32:	4681      	mov	r9, r0
 8009c34:	d95e      	bls.n	8009cf4 <_strtod_l+0xaa4>
 8009c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d103      	bne.n	8009c48 <_strtod_l+0x9f8>
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	3301      	adds	r3, #1
 8009c44:	f43f ad26 	beq.w	8009694 <_strtod_l+0x444>
 8009c48:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009c4c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8009d80 <_strtod_l+0xb30>
 8009c50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 fe60 	bl	800a918 <_Bfree>
 8009c58:	9906      	ldr	r1, [sp, #24]
 8009c5a:	4658      	mov	r0, fp
 8009c5c:	f000 fe5c 	bl	800a918 <_Bfree>
 8009c60:	9904      	ldr	r1, [sp, #16]
 8009c62:	4658      	mov	r0, fp
 8009c64:	f000 fe58 	bl	800a918 <_Bfree>
 8009c68:	4641      	mov	r1, r8
 8009c6a:	4658      	mov	r0, fp
 8009c6c:	f000 fe54 	bl	800a918 <_Bfree>
 8009c70:	e617      	b.n	80098a2 <_strtod_l+0x652>
 8009c72:	f1b9 0f00 	cmp.w	r9, #0
 8009c76:	d119      	bne.n	8009cac <_strtod_l+0xa5c>
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c7e:	b9e3      	cbnz	r3, 8009cba <_strtod_l+0xa6a>
 8009c80:	2200      	movs	r2, #0
 8009c82:	4b41      	ldr	r3, [pc, #260]	; (8009d88 <_strtod_l+0xb38>)
 8009c84:	4630      	mov	r0, r6
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 fe98 	bl	80009bc <__aeabi_dcmplt>
 8009c8c:	b9c8      	cbnz	r0, 8009cc2 <_strtod_l+0xa72>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	4b40      	ldr	r3, [pc, #256]	; (8009d94 <_strtod_l+0xb44>)
 8009c92:	4630      	mov	r0, r6
 8009c94:	4639      	mov	r1, r7
 8009c96:	f7f6 fc1f 	bl	80004d8 <__aeabi_dmul>
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009ca2:	9418      	str	r4, [sp, #96]	; 0x60
 8009ca4:	9319      	str	r3, [sp, #100]	; 0x64
 8009ca6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009caa:	e79d      	b.n	8009be8 <_strtod_l+0x998>
 8009cac:	f1b9 0f01 	cmp.w	r9, #1
 8009cb0:	d103      	bne.n	8009cba <_strtod_l+0xa6a>
 8009cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f43f ad8a 	beq.w	80097ce <_strtod_l+0x57e>
 8009cba:	2600      	movs	r6, #0
 8009cbc:	4f36      	ldr	r7, [pc, #216]	; (8009d98 <_strtod_l+0xb48>)
 8009cbe:	2400      	movs	r4, #0
 8009cc0:	e791      	b.n	8009be6 <_strtod_l+0x996>
 8009cc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009cc4:	4d33      	ldr	r5, [pc, #204]	; (8009d94 <_strtod_l+0xb44>)
 8009cc6:	e7ea      	b.n	8009c9e <_strtod_l+0xa4e>
 8009cc8:	4b32      	ldr	r3, [pc, #200]	; (8009d94 <_strtod_l+0xb44>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 fc02 	bl	80004d8 <__aeabi_dmul>
 8009cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	460d      	mov	r5, r1
 8009cda:	b933      	cbnz	r3, 8009cea <_strtod_l+0xa9a>
 8009cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ce0:	9010      	str	r0, [sp, #64]	; 0x40
 8009ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8009ce4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009ce8:	e77e      	b.n	8009be8 <_strtod_l+0x998>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009cf2:	e7f7      	b.n	8009ce4 <_strtod_l+0xa94>
 8009cf4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1a8      	bne.n	8009c50 <_strtod_l+0xa00>
 8009cfe:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009d02:	0d1b      	lsrs	r3, r3, #20
 8009d04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d06:	051b      	lsls	r3, r3, #20
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	4656      	mov	r6, sl
 8009d0c:	d1a0      	bne.n	8009c50 <_strtod_l+0xa00>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7f6 fe7b 	bl	8000a0c <__aeabi_d2iz>
 8009d16:	f7f6 fb75 	bl	8000404 <__aeabi_i2d>
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	4629      	mov	r1, r5
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7f6 fa21 	bl	8000168 <__aeabi_dsub>
 8009d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	b933      	cbnz	r3, 8009d3c <_strtod_l+0xaec>
 8009d2e:	f1b9 0f00 	cmp.w	r9, #0
 8009d32:	d103      	bne.n	8009d3c <_strtod_l+0xaec>
 8009d34:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	d06a      	beq.n	8009e12 <_strtod_l+0xbc2>
 8009d3c:	a30a      	add	r3, pc, #40	; (adr r3, 8009d68 <_strtod_l+0xb18>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	4620      	mov	r0, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	f7f6 fe39 	bl	80009bc <__aeabi_dcmplt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f47f acad 	bne.w	80096aa <_strtod_l+0x45a>
 8009d50:	a307      	add	r3, pc, #28	; (adr r3, 8009d70 <_strtod_l+0xb20>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fe4d 	bl	80009f8 <__aeabi_dcmpgt>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f af76 	beq.w	8009c50 <_strtod_l+0xa00>
 8009d64:	e4a1      	b.n	80096aa <_strtod_l+0x45a>
 8009d66:	bf00      	nop
 8009d68:	94a03595 	.word	0x94a03595
 8009d6c:	3fdfffff 	.word	0x3fdfffff
 8009d70:	35afe535 	.word	0x35afe535
 8009d74:	3fe00000 	.word	0x3fe00000
 8009d78:	000fffff 	.word	0x000fffff
 8009d7c:	7ff00000 	.word	0x7ff00000
 8009d80:	7fefffff 	.word	0x7fefffff
 8009d84:	39500000 	.word	0x39500000
 8009d88:	3ff00000 	.word	0x3ff00000
 8009d8c:	7fe00000 	.word	0x7fe00000
 8009d90:	7c9fffff 	.word	0x7c9fffff
 8009d94:	3fe00000 	.word	0x3fe00000
 8009d98:	bff00000 	.word	0xbff00000
 8009d9c:	9b05      	ldr	r3, [sp, #20]
 8009d9e:	b313      	cbz	r3, 8009de6 <_strtod_l+0xb96>
 8009da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009da2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009da6:	d81e      	bhi.n	8009de6 <_strtod_l+0xb96>
 8009da8:	a325      	add	r3, pc, #148	; (adr r3, 8009e40 <_strtod_l+0xbf0>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	4620      	mov	r0, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fe0d 	bl	80009d0 <__aeabi_dcmple>
 8009db6:	b190      	cbz	r0, 8009dde <_strtod_l+0xb8e>
 8009db8:	4629      	mov	r1, r5
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7f6 fe4e 	bl	8000a5c <__aeabi_d2uiz>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	bf08      	it	eq
 8009dc4:	2001      	moveq	r0, #1
 8009dc6:	f7f6 fb0d 	bl	80003e4 <__aeabi_ui2d>
 8009dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	b9d3      	cbnz	r3, 8009e08 <_strtod_l+0xbb8>
 8009dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd6:	9012      	str	r0, [sp, #72]	; 0x48
 8009dd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009dda:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009de0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009de4:	1a9f      	subs	r7, r3, r2
 8009de6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009dea:	f001 f82b 	bl	800ae44 <__ulp>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4630      	mov	r0, r6
 8009df4:	4639      	mov	r1, r7
 8009df6:	f7f6 fb6f 	bl	80004d8 <__aeabi_dmul>
 8009dfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009dfe:	f7f6 f9b5 	bl	800016c <__adddf3>
 8009e02:	4681      	mov	r9, r0
 8009e04:	468a      	mov	sl, r1
 8009e06:	e777      	b.n	8009cf8 <_strtod_l+0xaa8>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009e10:	e7e3      	b.n	8009dda <_strtod_l+0xb8a>
 8009e12:	a30d      	add	r3, pc, #52	; (adr r3, 8009e48 <_strtod_l+0xbf8>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fdd0 	bl	80009bc <__aeabi_dcmplt>
 8009e1c:	e79f      	b.n	8009d5e <_strtod_l+0xb0e>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	930d      	str	r3, [sp, #52]	; 0x34
 8009e22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	f7ff ba55 	b.w	80092d6 <_strtod_l+0x86>
 8009e2c:	2b65      	cmp	r3, #101	; 0x65
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	f43f ab42 	beq.w	80094ba <_strtod_l+0x26a>
 8009e36:	2101      	movs	r1, #1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	9105      	str	r1, [sp, #20]
 8009e3c:	f7ff babf 	b.w	80093be <_strtod_l+0x16e>
 8009e40:	ffc00000 	.word	0xffc00000
 8009e44:	41dfffff 	.word	0x41dfffff
 8009e48:	94a03595 	.word	0x94a03595
 8009e4c:	3fcfffff 	.word	0x3fcfffff

08009e50 <strtod>:
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <strtod+0x1c>)
 8009e52:	b410      	push	{r4}
 8009e54:	681c      	ldr	r4, [r3, #0]
 8009e56:	4a06      	ldr	r2, [pc, #24]	; (8009e70 <strtod+0x20>)
 8009e58:	6a23      	ldr	r3, [r4, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf08      	it	eq
 8009e5e:	4613      	moveq	r3, r2
 8009e60:	460a      	mov	r2, r1
 8009e62:	4601      	mov	r1, r0
 8009e64:	4620      	mov	r0, r4
 8009e66:	bc10      	pop	{r4}
 8009e68:	f7ff b9f2 	b.w	8009250 <_strtod_l>
 8009e6c:	2000004c 	.word	0x2000004c
 8009e70:	200000b0 	.word	0x200000b0

08009e74 <_strtol_l.isra.0>:
 8009e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	4680      	mov	r8, r0
 8009e7a:	4689      	mov	r9, r1
 8009e7c:	4692      	mov	sl, r2
 8009e7e:	461e      	mov	r6, r3
 8009e80:	460f      	mov	r7, r1
 8009e82:	463d      	mov	r5, r7
 8009e84:	9808      	ldr	r0, [sp, #32]
 8009e86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e8a:	f000 fcef 	bl	800a86c <__locale_ctype_ptr_l>
 8009e8e:	4420      	add	r0, r4
 8009e90:	7843      	ldrb	r3, [r0, #1]
 8009e92:	f013 0308 	ands.w	r3, r3, #8
 8009e96:	d132      	bne.n	8009efe <_strtol_l.isra.0+0x8a>
 8009e98:	2c2d      	cmp	r4, #45	; 0x2d
 8009e9a:	d132      	bne.n	8009f02 <_strtol_l.isra.0+0x8e>
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	787c      	ldrb	r4, [r7, #1]
 8009ea0:	1cbd      	adds	r5, r7, #2
 8009ea2:	2e00      	cmp	r6, #0
 8009ea4:	d05d      	beq.n	8009f62 <_strtol_l.isra.0+0xee>
 8009ea6:	2e10      	cmp	r6, #16
 8009ea8:	d109      	bne.n	8009ebe <_strtol_l.isra.0+0x4a>
 8009eaa:	2c30      	cmp	r4, #48	; 0x30
 8009eac:	d107      	bne.n	8009ebe <_strtol_l.isra.0+0x4a>
 8009eae:	782b      	ldrb	r3, [r5, #0]
 8009eb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009eb4:	2b58      	cmp	r3, #88	; 0x58
 8009eb6:	d14f      	bne.n	8009f58 <_strtol_l.isra.0+0xe4>
 8009eb8:	2610      	movs	r6, #16
 8009eba:	786c      	ldrb	r4, [r5, #1]
 8009ebc:	3502      	adds	r5, #2
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	bf14      	ite	ne
 8009ec2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009ec6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009eca:	2700      	movs	r7, #0
 8009ecc:	fbb1 fcf6 	udiv	ip, r1, r6
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009ed6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	d817      	bhi.n	8009f0e <_strtol_l.isra.0+0x9a>
 8009ede:	461c      	mov	r4, r3
 8009ee0:	42a6      	cmp	r6, r4
 8009ee2:	dd23      	ble.n	8009f2c <_strtol_l.isra.0+0xb8>
 8009ee4:	1c7b      	adds	r3, r7, #1
 8009ee6:	d007      	beq.n	8009ef8 <_strtol_l.isra.0+0x84>
 8009ee8:	4584      	cmp	ip, r0
 8009eea:	d31c      	bcc.n	8009f26 <_strtol_l.isra.0+0xb2>
 8009eec:	d101      	bne.n	8009ef2 <_strtol_l.isra.0+0x7e>
 8009eee:	45a6      	cmp	lr, r4
 8009ef0:	db19      	blt.n	8009f26 <_strtol_l.isra.0+0xb2>
 8009ef2:	2701      	movs	r7, #1
 8009ef4:	fb00 4006 	mla	r0, r0, r6, r4
 8009ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009efc:	e7eb      	b.n	8009ed6 <_strtol_l.isra.0+0x62>
 8009efe:	462f      	mov	r7, r5
 8009f00:	e7bf      	b.n	8009e82 <_strtol_l.isra.0+0xe>
 8009f02:	2c2b      	cmp	r4, #43	; 0x2b
 8009f04:	bf04      	itt	eq
 8009f06:	1cbd      	addeq	r5, r7, #2
 8009f08:	787c      	ldrbeq	r4, [r7, #1]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	e7c9      	b.n	8009ea2 <_strtol_l.isra.0+0x2e>
 8009f0e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009f12:	2b19      	cmp	r3, #25
 8009f14:	d801      	bhi.n	8009f1a <_strtol_l.isra.0+0xa6>
 8009f16:	3c37      	subs	r4, #55	; 0x37
 8009f18:	e7e2      	b.n	8009ee0 <_strtol_l.isra.0+0x6c>
 8009f1a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009f1e:	2b19      	cmp	r3, #25
 8009f20:	d804      	bhi.n	8009f2c <_strtol_l.isra.0+0xb8>
 8009f22:	3c57      	subs	r4, #87	; 0x57
 8009f24:	e7dc      	b.n	8009ee0 <_strtol_l.isra.0+0x6c>
 8009f26:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f2a:	e7e5      	b.n	8009ef8 <_strtol_l.isra.0+0x84>
 8009f2c:	1c7b      	adds	r3, r7, #1
 8009f2e:	d108      	bne.n	8009f42 <_strtol_l.isra.0+0xce>
 8009f30:	2322      	movs	r3, #34	; 0x22
 8009f32:	4608      	mov	r0, r1
 8009f34:	f8c8 3000 	str.w	r3, [r8]
 8009f38:	f1ba 0f00 	cmp.w	sl, #0
 8009f3c:	d107      	bne.n	8009f4e <_strtol_l.isra.0+0xda>
 8009f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f42:	b102      	cbz	r2, 8009f46 <_strtol_l.isra.0+0xd2>
 8009f44:	4240      	negs	r0, r0
 8009f46:	f1ba 0f00 	cmp.w	sl, #0
 8009f4a:	d0f8      	beq.n	8009f3e <_strtol_l.isra.0+0xca>
 8009f4c:	b10f      	cbz	r7, 8009f52 <_strtol_l.isra.0+0xde>
 8009f4e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009f52:	f8ca 9000 	str.w	r9, [sl]
 8009f56:	e7f2      	b.n	8009f3e <_strtol_l.isra.0+0xca>
 8009f58:	2430      	movs	r4, #48	; 0x30
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	d1af      	bne.n	8009ebe <_strtol_l.isra.0+0x4a>
 8009f5e:	2608      	movs	r6, #8
 8009f60:	e7ad      	b.n	8009ebe <_strtol_l.isra.0+0x4a>
 8009f62:	2c30      	cmp	r4, #48	; 0x30
 8009f64:	d0a3      	beq.n	8009eae <_strtol_l.isra.0+0x3a>
 8009f66:	260a      	movs	r6, #10
 8009f68:	e7a9      	b.n	8009ebe <_strtol_l.isra.0+0x4a>
	...

08009f6c <strtol>:
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <strtol+0x24>)
 8009f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f70:	681c      	ldr	r4, [r3, #0]
 8009f72:	4d08      	ldr	r5, [pc, #32]	; (8009f94 <strtol+0x28>)
 8009f74:	6a23      	ldr	r3, [r4, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bf08      	it	eq
 8009f7a:	462b      	moveq	r3, r5
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	460a      	mov	r2, r1
 8009f82:	4601      	mov	r1, r0
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7ff ff75 	bl	8009e74 <_strtol_l.isra.0>
 8009f8a:	b003      	add	sp, #12
 8009f8c:	bd30      	pop	{r4, r5, pc}
 8009f8e:	bf00      	nop
 8009f90:	2000004c 	.word	0x2000004c
 8009f94:	200000b0 	.word	0x200000b0

08009f98 <print_e>:
 8009f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9a:	b08b      	sub	sp, #44	; 0x2c
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	a908      	add	r1, sp, #32
 8009fa0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009fa2:	9104      	str	r1, [sp, #16]
 8009fa4:	a907      	add	r1, sp, #28
 8009fa6:	9103      	str	r1, [sp, #12]
 8009fa8:	a909      	add	r1, sp, #36	; 0x24
 8009faa:	9102      	str	r1, [sp, #8]
 8009fac:	1c61      	adds	r1, r4, #1
 8009fae:	9101      	str	r1, [sp, #4]
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	9100      	str	r1, [sp, #0]
 8009fb4:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8009fb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009fba:	f001 fcb5 	bl	800b928 <_dtoa_r>
 8009fbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	d104      	bne.n	8009fd4 <print_e+0x3c>
 8009fca:	4638      	mov	r0, r7
 8009fcc:	f7ff f8fd 	bl	80091ca <strcpy>
 8009fd0:	b00b      	add	sp, #44	; 0x2c
 8009fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd4:	780b      	ldrb	r3, [r1, #0]
 8009fd6:	703b      	strb	r3, [r7, #0]
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	d142      	bne.n	800a062 <print_e+0xca>
 8009fdc:	2c00      	cmp	r4, #0
 8009fde:	d140      	bne.n	800a062 <print_e+0xca>
 8009fe0:	1c7b      	adds	r3, r7, #1
 8009fe2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009fe6:	b10a      	cbz	r2, 8009fec <print_e+0x54>
 8009fe8:	2c00      	cmp	r4, #0
 8009fea:	dc3e      	bgt.n	800a06a <print_e+0xd2>
 8009fec:	2e67      	cmp	r6, #103	; 0x67
 8009fee:	d043      	beq.n	800a078 <print_e+0xe0>
 8009ff0:	2e47      	cmp	r6, #71	; 0x47
 8009ff2:	d043      	beq.n	800a07c <print_e+0xe4>
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	2730      	movs	r7, #48	; 0x30
 8009ff8:	191d      	adds	r5, r3, r4
 8009ffa:	1aa9      	subs	r1, r5, r2
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	dc38      	bgt.n	800a072 <print_e+0xda>
 800a000:	2c00      	cmp	r4, #0
 800a002:	bfa8      	it	ge
 800a004:	191b      	addge	r3, r3, r4
 800a006:	1e41      	subs	r1, r0, #1
 800a008:	2900      	cmp	r1, #0
 800a00a:	9109      	str	r1, [sp, #36]	; 0x24
 800a00c:	461a      	mov	r2, r3
 800a00e:	bfb7      	itett	lt
 800a010:	212d      	movlt	r1, #45	; 0x2d
 800a012:	212b      	movge	r1, #43	; 0x2b
 800a014:	f1c0 0001 	rsblt	r0, r0, #1
 800a018:	9009      	strlt	r0, [sp, #36]	; 0x24
 800a01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a01c:	f802 6b02 	strb.w	r6, [r2], #2
 800a020:	bfb4      	ite	lt
 800a022:	7059      	strblt	r1, [r3, #1]
 800a024:	7059      	strbge	r1, [r3, #1]
 800a026:	2863      	cmp	r0, #99	; 0x63
 800a028:	dd0b      	ble.n	800a042 <print_e+0xaa>
 800a02a:	2164      	movs	r1, #100	; 0x64
 800a02c:	fb90 f1f1 	sdiv	r1, r0, r1
 800a030:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800a034:	1cda      	adds	r2, r3, #3
 800a036:	709c      	strb	r4, [r3, #2]
 800a038:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800a03c:	fb03 0101 	mla	r1, r3, r1, r0
 800a040:	9109      	str	r1, [sp, #36]	; 0x24
 800a042:	230a      	movs	r3, #10
 800a044:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a046:	fb91 f3f3 	sdiv	r3, r1, r3
 800a04a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a04e:	7010      	strb	r0, [r2, #0]
 800a050:	f06f 0009 	mvn.w	r0, #9
 800a054:	fb00 1303 	mla	r3, r0, r3, r1
 800a058:	3330      	adds	r3, #48	; 0x30
 800a05a:	7053      	strb	r3, [r2, #1]
 800a05c:	2300      	movs	r3, #0
 800a05e:	7093      	strb	r3, [r2, #2]
 800a060:	e7b6      	b.n	8009fd0 <print_e+0x38>
 800a062:	222e      	movs	r2, #46	; 0x2e
 800a064:	1cbb      	adds	r3, r7, #2
 800a066:	707a      	strb	r2, [r7, #1]
 800a068:	e7bb      	b.n	8009fe2 <print_e+0x4a>
 800a06a:	f803 2b01 	strb.w	r2, [r3], #1
 800a06e:	3c01      	subs	r4, #1
 800a070:	e7b7      	b.n	8009fe2 <print_e+0x4a>
 800a072:	f802 7b01 	strb.w	r7, [r2], #1
 800a076:	e7c0      	b.n	8009ffa <print_e+0x62>
 800a078:	2665      	movs	r6, #101	; 0x65
 800a07a:	e7c4      	b.n	800a006 <print_e+0x6e>
 800a07c:	2645      	movs	r6, #69	; 0x45
 800a07e:	e7c2      	b.n	800a006 <print_e+0x6e>

0800a080 <_gcvt>:
 800a080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a084:	4617      	mov	r7, r2
 800a086:	461d      	mov	r5, r3
 800a088:	b08b      	sub	sp, #44	; 0x2c
 800a08a:	4681      	mov	r9, r0
 800a08c:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 800a090:	2200      	movs	r2, #0
 800a092:	2300      	movs	r3, #0
 800a094:	4638      	mov	r0, r7
 800a096:	4629      	mov	r1, r5
 800a098:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800a09c:	f7f6 fc8e 	bl	80009bc <__aeabi_dcmplt>
 800a0a0:	b108      	cbz	r0, 800a0a6 <_gcvt+0x26>
 800a0a2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 fc7b 	bl	80009a8 <__aeabi_dcmpeq>
 800a0b2:	b138      	cbz	r0, 800a0c4 <_gcvt+0x44>
 800a0b4:	2330      	movs	r3, #48	; 0x30
 800a0b6:	7023      	strb	r3, [r4, #0]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	7063      	strb	r3, [r4, #1]
 800a0bc:	4620      	mov	r0, r4
 800a0be:	b00b      	add	sp, #44	; 0x2c
 800a0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0c4:	a352      	add	r3, pc, #328	; (adr r3, 800a210 <_gcvt+0x190>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7f6 fc7f 	bl	80009d0 <__aeabi_dcmple>
 800a0d2:	b168      	cbz	r0, 800a0f0 <_gcvt+0x70>
 800a0d4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a0d8:	3e01      	subs	r6, #1
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	f8cd 8008 	str.w	r8, [sp, #8]
 800a0e0:	9600      	str	r6, [sp, #0]
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4648      	mov	r0, r9
 800a0ea:	f7ff ff55 	bl	8009f98 <print_e>
 800a0ee:	e7e5      	b.n	800a0bc <_gcvt+0x3c>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 ff9b 	bl	800b02c <_mprec_log10>
 800a0f6:	463a      	mov	r2, r7
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	f7f6 fc69 	bl	80009d0 <__aeabi_dcmple>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d1e8      	bne.n	800a0d4 <_gcvt+0x54>
 800a102:	2200      	movs	r2, #0
 800a104:	4b44      	ldr	r3, [pc, #272]	; (800a218 <_gcvt+0x198>)
 800a106:	4629      	mov	r1, r5
 800a108:	4638      	mov	r0, r7
 800a10a:	f7f6 fc57 	bl	80009bc <__aeabi_dcmplt>
 800a10e:	a909      	add	r1, sp, #36	; 0x24
 800a110:	aa08      	add	r2, sp, #32
 800a112:	ab07      	add	r3, sp, #28
 800a114:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a118:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a11c:	b388      	cbz	r0, 800a182 <_gcvt+0x102>
 800a11e:	2303      	movs	r3, #3
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	463a      	mov	r2, r7
 800a124:	462b      	mov	r3, r5
 800a126:	4648      	mov	r0, r9
 800a128:	f001 fbfe 	bl	800b928 <_dtoa_r>
 800a12c:	f242 730f 	movw	r3, #9999	; 0x270f
 800a130:	9a07      	ldr	r2, [sp, #28]
 800a132:	429a      	cmp	r2, r3
 800a134:	d027      	beq.n	800a186 <_gcvt+0x106>
 800a136:	4623      	mov	r3, r4
 800a138:	4426      	add	r6, r4
 800a13a:	4607      	mov	r7, r0
 800a13c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a140:	1af2      	subs	r2, r6, r3
 800a142:	9d07      	ldr	r5, [sp, #28]
 800a144:	b349      	cbz	r1, 800a19a <_gcvt+0x11a>
 800a146:	2d00      	cmp	r5, #0
 800a148:	dc22      	bgt.n	800a190 <_gcvt+0x110>
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	d102      	bne.n	800a156 <_gcvt+0xd6>
 800a150:	7839      	ldrb	r1, [r7, #0]
 800a152:	2900      	cmp	r1, #0
 800a154:	d049      	beq.n	800a1ea <_gcvt+0x16a>
 800a156:	429c      	cmp	r4, r3
 800a158:	bf04      	itt	eq
 800a15a:	2130      	moveq	r1, #48	; 0x30
 800a15c:	7021      	strbeq	r1, [r4, #0]
 800a15e:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f04f 0630 	mov.w	r6, #48	; 0x30
 800a16a:	bf08      	it	eq
 800a16c:	1c63      	addeq	r3, r4, #1
 800a16e:	7019      	strb	r1, [r3, #0]
 800a170:	9907      	ldr	r1, [sp, #28]
 800a172:	3301      	adds	r3, #1
 800a174:	2900      	cmp	r1, #0
 800a176:	460d      	mov	r5, r1
 800a178:	db24      	blt.n	800a1c4 <_gcvt+0x144>
 800a17a:	b100      	cbz	r0, 800a17e <_gcvt+0xfe>
 800a17c:	9107      	str	r1, [sp, #28]
 800a17e:	1e79      	subs	r1, r7, #1
 800a180:	e02b      	b.n	800a1da <_gcvt+0x15a>
 800a182:	2302      	movs	r3, #2
 800a184:	e7cc      	b.n	800a120 <_gcvt+0xa0>
 800a186:	4601      	mov	r1, r0
 800a188:	4620      	mov	r0, r4
 800a18a:	f7ff f81e 	bl	80091ca <strcpy>
 800a18e:	e795      	b.n	800a0bc <_gcvt+0x3c>
 800a190:	3d01      	subs	r5, #1
 800a192:	f803 1b01 	strb.w	r1, [r3], #1
 800a196:	9507      	str	r5, [sp, #28]
 800a198:	e7cf      	b.n	800a13a <_gcvt+0xba>
 800a19a:	1aad      	subs	r5, r5, r2
 800a19c:	2630      	movs	r6, #48	; 0x30
 800a19e:	e005      	b.n	800a1ac <_gcvt+0x12c>
 800a1a0:	2a00      	cmp	r2, #0
 800a1a2:	dd06      	ble.n	800a1b2 <_gcvt+0x132>
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	f803 6b01 	strb.w	r6, [r3], #1
 800a1aa:	3a01      	subs	r2, #1
 800a1ac:	18a8      	adds	r0, r5, r2
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	dcf6      	bgt.n	800a1a0 <_gcvt+0x120>
 800a1b2:	2900      	cmp	r1, #0
 800a1b4:	d0c9      	beq.n	800a14a <_gcvt+0xca>
 800a1b6:	9007      	str	r0, [sp, #28]
 800a1b8:	e7c7      	b.n	800a14a <_gcvt+0xca>
 800a1ba:	f803 6b01 	strb.w	r6, [r3], #1
 800a1be:	3a01      	subs	r2, #1
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	e7d7      	b.n	800a174 <_gcvt+0xf4>
 800a1c4:	2a00      	cmp	r2, #0
 800a1c6:	f101 0101 	add.w	r1, r1, #1
 800a1ca:	dcf6      	bgt.n	800a1ba <_gcvt+0x13a>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0d6      	beq.n	800a17e <_gcvt+0xfe>
 800a1d0:	9507      	str	r5, [sp, #28]
 800a1d2:	e7d4      	b.n	800a17e <_gcvt+0xfe>
 800a1d4:	f803 0b01 	strb.w	r0, [r3], #1
 800a1d8:	3a01      	subs	r2, #1
 800a1da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1de:	b108      	cbz	r0, 800a1e4 <_gcvt+0x164>
 800a1e0:	2a00      	cmp	r2, #0
 800a1e2:	dcf7      	bgt.n	800a1d4 <_gcvt+0x154>
 800a1e4:	f1b8 0f00 	cmp.w	r8, #0
 800a1e8:	d10b      	bne.n	800a202 <_gcvt+0x182>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e765      	b.n	800a0bc <_gcvt+0x3c>
 800a1f0:	f801 6b01 	strb.w	r6, [r1], #1
 800a1f4:	1a68      	subs	r0, r5, r1
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	dcfa      	bgt.n	800a1f0 <_gcvt+0x170>
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	bfa8      	it	ge
 800a1fe:	189b      	addge	r3, r3, r2
 800a200:	e7f3      	b.n	800a1ea <_gcvt+0x16a>
 800a202:	4619      	mov	r1, r3
 800a204:	189d      	adds	r5, r3, r2
 800a206:	2630      	movs	r6, #48	; 0x30
 800a208:	e7f4      	b.n	800a1f4 <_gcvt+0x174>
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w
 800a210:	eb1c432d 	.word	0xeb1c432d
 800a214:	3f1a36e2 	.word	0x3f1a36e2
 800a218:	3ff00000 	.word	0x3ff00000

0800a21c <rshift>:
 800a21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21e:	6906      	ldr	r6, [r0, #16]
 800a220:	114b      	asrs	r3, r1, #5
 800a222:	429e      	cmp	r6, r3
 800a224:	f100 0414 	add.w	r4, r0, #20
 800a228:	dd31      	ble.n	800a28e <rshift+0x72>
 800a22a:	f011 011f 	ands.w	r1, r1, #31
 800a22e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a232:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a236:	d108      	bne.n	800a24a <rshift+0x2e>
 800a238:	4621      	mov	r1, r4
 800a23a:	42b2      	cmp	r2, r6
 800a23c:	460b      	mov	r3, r1
 800a23e:	d211      	bcs.n	800a264 <rshift+0x48>
 800a240:	f852 3b04 	ldr.w	r3, [r2], #4
 800a244:	f841 3b04 	str.w	r3, [r1], #4
 800a248:	e7f7      	b.n	800a23a <rshift+0x1e>
 800a24a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a24e:	4623      	mov	r3, r4
 800a250:	f1c1 0c20 	rsb	ip, r1, #32
 800a254:	40cd      	lsrs	r5, r1
 800a256:	3204      	adds	r2, #4
 800a258:	42b2      	cmp	r2, r6
 800a25a:	4617      	mov	r7, r2
 800a25c:	d30d      	bcc.n	800a27a <rshift+0x5e>
 800a25e:	601d      	str	r5, [r3, #0]
 800a260:	b105      	cbz	r5, 800a264 <rshift+0x48>
 800a262:	3304      	adds	r3, #4
 800a264:	42a3      	cmp	r3, r4
 800a266:	eba3 0204 	sub.w	r2, r3, r4
 800a26a:	bf08      	it	eq
 800a26c:	2300      	moveq	r3, #0
 800a26e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a272:	6102      	str	r2, [r0, #16]
 800a274:	bf08      	it	eq
 800a276:	6143      	streq	r3, [r0, #20]
 800a278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a27a:	683f      	ldr	r7, [r7, #0]
 800a27c:	fa07 f70c 	lsl.w	r7, r7, ip
 800a280:	433d      	orrs	r5, r7
 800a282:	f843 5b04 	str.w	r5, [r3], #4
 800a286:	f852 5b04 	ldr.w	r5, [r2], #4
 800a28a:	40cd      	lsrs	r5, r1
 800a28c:	e7e4      	b.n	800a258 <rshift+0x3c>
 800a28e:	4623      	mov	r3, r4
 800a290:	e7e8      	b.n	800a264 <rshift+0x48>

0800a292 <__hexdig_fun>:
 800a292:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d802      	bhi.n	800a2a0 <__hexdig_fun+0xe>
 800a29a:	3820      	subs	r0, #32
 800a29c:	b2c0      	uxtb	r0, r0
 800a29e:	4770      	bx	lr
 800a2a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a2a4:	2b05      	cmp	r3, #5
 800a2a6:	d801      	bhi.n	800a2ac <__hexdig_fun+0x1a>
 800a2a8:	3847      	subs	r0, #71	; 0x47
 800a2aa:	e7f7      	b.n	800a29c <__hexdig_fun+0xa>
 800a2ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2b0:	2b05      	cmp	r3, #5
 800a2b2:	d801      	bhi.n	800a2b8 <__hexdig_fun+0x26>
 800a2b4:	3827      	subs	r0, #39	; 0x27
 800a2b6:	e7f1      	b.n	800a29c <__hexdig_fun+0xa>
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	4770      	bx	lr

0800a2bc <__gethex>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	b08b      	sub	sp, #44	; 0x2c
 800a2c2:	9002      	str	r0, [sp, #8]
 800a2c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a2c6:	468a      	mov	sl, r1
 800a2c8:	4690      	mov	r8, r2
 800a2ca:	9306      	str	r3, [sp, #24]
 800a2cc:	f000 fad1 	bl	800a872 <__localeconv_l>
 800a2d0:	6803      	ldr	r3, [r0, #0]
 800a2d2:	f04f 0b00 	mov.w	fp, #0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	9303      	str	r3, [sp, #12]
 800a2da:	f7f5 ff39 	bl	8000150 <strlen>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	9001      	str	r0, [sp, #4]
 800a2e2:	4403      	add	r3, r0
 800a2e4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a2e8:	9307      	str	r3, [sp, #28]
 800a2ea:	f8da 3000 	ldr.w	r3, [sl]
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	461f      	mov	r7, r3
 800a2f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2f6:	2830      	cmp	r0, #48	; 0x30
 800a2f8:	d06c      	beq.n	800a3d4 <__gethex+0x118>
 800a2fa:	f7ff ffca 	bl	800a292 <__hexdig_fun>
 800a2fe:	4604      	mov	r4, r0
 800a300:	2800      	cmp	r0, #0
 800a302:	d16a      	bne.n	800a3da <__gethex+0x11e>
 800a304:	9a01      	ldr	r2, [sp, #4]
 800a306:	9903      	ldr	r1, [sp, #12]
 800a308:	4638      	mov	r0, r7
 800a30a:	f001 fa5f 	bl	800b7cc <strncmp>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d166      	bne.n	800a3e0 <__gethex+0x124>
 800a312:	9b01      	ldr	r3, [sp, #4]
 800a314:	5cf8      	ldrb	r0, [r7, r3]
 800a316:	18fe      	adds	r6, r7, r3
 800a318:	f7ff ffbb 	bl	800a292 <__hexdig_fun>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d062      	beq.n	800a3e6 <__gethex+0x12a>
 800a320:	4633      	mov	r3, r6
 800a322:	7818      	ldrb	r0, [r3, #0]
 800a324:	461f      	mov	r7, r3
 800a326:	2830      	cmp	r0, #48	; 0x30
 800a328:	f103 0301 	add.w	r3, r3, #1
 800a32c:	d0f9      	beq.n	800a322 <__gethex+0x66>
 800a32e:	f7ff ffb0 	bl	800a292 <__hexdig_fun>
 800a332:	fab0 f580 	clz	r5, r0
 800a336:	4634      	mov	r4, r6
 800a338:	f04f 0b01 	mov.w	fp, #1
 800a33c:	096d      	lsrs	r5, r5, #5
 800a33e:	463a      	mov	r2, r7
 800a340:	4616      	mov	r6, r2
 800a342:	7830      	ldrb	r0, [r6, #0]
 800a344:	3201      	adds	r2, #1
 800a346:	f7ff ffa4 	bl	800a292 <__hexdig_fun>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d1f8      	bne.n	800a340 <__gethex+0x84>
 800a34e:	9a01      	ldr	r2, [sp, #4]
 800a350:	9903      	ldr	r1, [sp, #12]
 800a352:	4630      	mov	r0, r6
 800a354:	f001 fa3a 	bl	800b7cc <strncmp>
 800a358:	b950      	cbnz	r0, 800a370 <__gethex+0xb4>
 800a35a:	b954      	cbnz	r4, 800a372 <__gethex+0xb6>
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	18f4      	adds	r4, r6, r3
 800a360:	4622      	mov	r2, r4
 800a362:	4616      	mov	r6, r2
 800a364:	7830      	ldrb	r0, [r6, #0]
 800a366:	3201      	adds	r2, #1
 800a368:	f7ff ff93 	bl	800a292 <__hexdig_fun>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1f8      	bne.n	800a362 <__gethex+0xa6>
 800a370:	b10c      	cbz	r4, 800a376 <__gethex+0xba>
 800a372:	1ba4      	subs	r4, r4, r6
 800a374:	00a4      	lsls	r4, r4, #2
 800a376:	7833      	ldrb	r3, [r6, #0]
 800a378:	2b50      	cmp	r3, #80	; 0x50
 800a37a:	d001      	beq.n	800a380 <__gethex+0xc4>
 800a37c:	2b70      	cmp	r3, #112	; 0x70
 800a37e:	d140      	bne.n	800a402 <__gethex+0x146>
 800a380:	7873      	ldrb	r3, [r6, #1]
 800a382:	2b2b      	cmp	r3, #43	; 0x2b
 800a384:	d031      	beq.n	800a3ea <__gethex+0x12e>
 800a386:	2b2d      	cmp	r3, #45	; 0x2d
 800a388:	d033      	beq.n	800a3f2 <__gethex+0x136>
 800a38a:	f04f 0900 	mov.w	r9, #0
 800a38e:	1c71      	adds	r1, r6, #1
 800a390:	7808      	ldrb	r0, [r1, #0]
 800a392:	f7ff ff7e 	bl	800a292 <__hexdig_fun>
 800a396:	1e43      	subs	r3, r0, #1
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b18      	cmp	r3, #24
 800a39c:	d831      	bhi.n	800a402 <__gethex+0x146>
 800a39e:	f1a0 0210 	sub.w	r2, r0, #16
 800a3a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3a6:	f7ff ff74 	bl	800a292 <__hexdig_fun>
 800a3aa:	1e43      	subs	r3, r0, #1
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b18      	cmp	r3, #24
 800a3b0:	d922      	bls.n	800a3f8 <__gethex+0x13c>
 800a3b2:	f1b9 0f00 	cmp.w	r9, #0
 800a3b6:	d000      	beq.n	800a3ba <__gethex+0xfe>
 800a3b8:	4252      	negs	r2, r2
 800a3ba:	4414      	add	r4, r2
 800a3bc:	f8ca 1000 	str.w	r1, [sl]
 800a3c0:	b30d      	cbz	r5, 800a406 <__gethex+0x14a>
 800a3c2:	f1bb 0f00 	cmp.w	fp, #0
 800a3c6:	bf0c      	ite	eq
 800a3c8:	2706      	moveq	r7, #6
 800a3ca:	2700      	movne	r7, #0
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	b00b      	add	sp, #44	; 0x2c
 800a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d4:	f10b 0b01 	add.w	fp, fp, #1
 800a3d8:	e78a      	b.n	800a2f0 <__gethex+0x34>
 800a3da:	2500      	movs	r5, #0
 800a3dc:	462c      	mov	r4, r5
 800a3de:	e7ae      	b.n	800a33e <__gethex+0x82>
 800a3e0:	463e      	mov	r6, r7
 800a3e2:	2501      	movs	r5, #1
 800a3e4:	e7c7      	b.n	800a376 <__gethex+0xba>
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	e7fb      	b.n	800a3e2 <__gethex+0x126>
 800a3ea:	f04f 0900 	mov.w	r9, #0
 800a3ee:	1cb1      	adds	r1, r6, #2
 800a3f0:	e7ce      	b.n	800a390 <__gethex+0xd4>
 800a3f2:	f04f 0901 	mov.w	r9, #1
 800a3f6:	e7fa      	b.n	800a3ee <__gethex+0x132>
 800a3f8:	230a      	movs	r3, #10
 800a3fa:	fb03 0202 	mla	r2, r3, r2, r0
 800a3fe:	3a10      	subs	r2, #16
 800a400:	e7cf      	b.n	800a3a2 <__gethex+0xe6>
 800a402:	4631      	mov	r1, r6
 800a404:	e7da      	b.n	800a3bc <__gethex+0x100>
 800a406:	4629      	mov	r1, r5
 800a408:	1bf3      	subs	r3, r6, r7
 800a40a:	3b01      	subs	r3, #1
 800a40c:	2b07      	cmp	r3, #7
 800a40e:	dc49      	bgt.n	800a4a4 <__gethex+0x1e8>
 800a410:	9802      	ldr	r0, [sp, #8]
 800a412:	f000 fa4d 	bl	800a8b0 <_Balloc>
 800a416:	f04f 0b00 	mov.w	fp, #0
 800a41a:	4605      	mov	r5, r0
 800a41c:	46da      	mov	sl, fp
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	f100 0914 	add.w	r9, r0, #20
 800a424:	f1c3 0301 	rsb	r3, r3, #1
 800a428:	f8cd 9010 	str.w	r9, [sp, #16]
 800a42c:	9308      	str	r3, [sp, #32]
 800a42e:	42b7      	cmp	r7, r6
 800a430:	d33b      	bcc.n	800a4aa <__gethex+0x1ee>
 800a432:	9804      	ldr	r0, [sp, #16]
 800a434:	f840 ab04 	str.w	sl, [r0], #4
 800a438:	eba0 0009 	sub.w	r0, r0, r9
 800a43c:	1080      	asrs	r0, r0, #2
 800a43e:	6128      	str	r0, [r5, #16]
 800a440:	0147      	lsls	r7, r0, #5
 800a442:	4650      	mov	r0, sl
 800a444:	f000 faf8 	bl	800aa38 <__hi0bits>
 800a448:	f8d8 6000 	ldr.w	r6, [r8]
 800a44c:	1a3f      	subs	r7, r7, r0
 800a44e:	42b7      	cmp	r7, r6
 800a450:	dd64      	ble.n	800a51c <__gethex+0x260>
 800a452:	1bbf      	subs	r7, r7, r6
 800a454:	4639      	mov	r1, r7
 800a456:	4628      	mov	r0, r5
 800a458:	f000 fe1e 	bl	800b098 <__any_on>
 800a45c:	4682      	mov	sl, r0
 800a45e:	b178      	cbz	r0, 800a480 <__gethex+0x1c4>
 800a460:	f04f 0a01 	mov.w	sl, #1
 800a464:	1e7b      	subs	r3, r7, #1
 800a466:	1159      	asrs	r1, r3, #5
 800a468:	f003 021f 	and.w	r2, r3, #31
 800a46c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a470:	fa0a f202 	lsl.w	r2, sl, r2
 800a474:	420a      	tst	r2, r1
 800a476:	d003      	beq.n	800a480 <__gethex+0x1c4>
 800a478:	4553      	cmp	r3, sl
 800a47a:	dc46      	bgt.n	800a50a <__gethex+0x24e>
 800a47c:	f04f 0a02 	mov.w	sl, #2
 800a480:	4639      	mov	r1, r7
 800a482:	4628      	mov	r0, r5
 800a484:	f7ff feca 	bl	800a21c <rshift>
 800a488:	443c      	add	r4, r7
 800a48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a48e:	42a3      	cmp	r3, r4
 800a490:	da52      	bge.n	800a538 <__gethex+0x27c>
 800a492:	4629      	mov	r1, r5
 800a494:	9802      	ldr	r0, [sp, #8]
 800a496:	f000 fa3f 	bl	800a918 <_Bfree>
 800a49a:	2300      	movs	r3, #0
 800a49c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a49e:	27a3      	movs	r7, #163	; 0xa3
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	e793      	b.n	800a3cc <__gethex+0x110>
 800a4a4:	3101      	adds	r1, #1
 800a4a6:	105b      	asrs	r3, r3, #1
 800a4a8:	e7b0      	b.n	800a40c <__gethex+0x150>
 800a4aa:	1e73      	subs	r3, r6, #1
 800a4ac:	9305      	str	r3, [sp, #20]
 800a4ae:	9a07      	ldr	r2, [sp, #28]
 800a4b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d018      	beq.n	800a4ea <__gethex+0x22e>
 800a4b8:	f1bb 0f20 	cmp.w	fp, #32
 800a4bc:	d107      	bne.n	800a4ce <__gethex+0x212>
 800a4be:	9b04      	ldr	r3, [sp, #16]
 800a4c0:	f8c3 a000 	str.w	sl, [r3]
 800a4c4:	f04f 0a00 	mov.w	sl, #0
 800a4c8:	46d3      	mov	fp, sl
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a4d2:	f7ff fede 	bl	800a292 <__hexdig_fun>
 800a4d6:	f000 000f 	and.w	r0, r0, #15
 800a4da:	fa00 f00b 	lsl.w	r0, r0, fp
 800a4de:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4e2:	f10b 0b04 	add.w	fp, fp, #4
 800a4e6:	9b05      	ldr	r3, [sp, #20]
 800a4e8:	e00d      	b.n	800a506 <__gethex+0x24a>
 800a4ea:	9b05      	ldr	r3, [sp, #20]
 800a4ec:	9a08      	ldr	r2, [sp, #32]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	42bb      	cmp	r3, r7
 800a4f2:	d3e1      	bcc.n	800a4b8 <__gethex+0x1fc>
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	9a01      	ldr	r2, [sp, #4]
 800a4f8:	9903      	ldr	r1, [sp, #12]
 800a4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fc:	f001 f966 	bl	800b7cc <strncmp>
 800a500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a502:	2800      	cmp	r0, #0
 800a504:	d1d8      	bne.n	800a4b8 <__gethex+0x1fc>
 800a506:	461e      	mov	r6, r3
 800a508:	e791      	b.n	800a42e <__gethex+0x172>
 800a50a:	1eb9      	subs	r1, r7, #2
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 fdc3 	bl	800b098 <__any_on>
 800a512:	2800      	cmp	r0, #0
 800a514:	d0b2      	beq.n	800a47c <__gethex+0x1c0>
 800a516:	f04f 0a03 	mov.w	sl, #3
 800a51a:	e7b1      	b.n	800a480 <__gethex+0x1c4>
 800a51c:	da09      	bge.n	800a532 <__gethex+0x276>
 800a51e:	1bf7      	subs	r7, r6, r7
 800a520:	4629      	mov	r1, r5
 800a522:	463a      	mov	r2, r7
 800a524:	9802      	ldr	r0, [sp, #8]
 800a526:	f000 fbc1 	bl	800acac <__lshift>
 800a52a:	4605      	mov	r5, r0
 800a52c:	1be4      	subs	r4, r4, r7
 800a52e:	f100 0914 	add.w	r9, r0, #20
 800a532:	f04f 0a00 	mov.w	sl, #0
 800a536:	e7a8      	b.n	800a48a <__gethex+0x1ce>
 800a538:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a53c:	42a0      	cmp	r0, r4
 800a53e:	dd6b      	ble.n	800a618 <__gethex+0x35c>
 800a540:	1b04      	subs	r4, r0, r4
 800a542:	42a6      	cmp	r6, r4
 800a544:	dc2e      	bgt.n	800a5a4 <__gethex+0x2e8>
 800a546:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d022      	beq.n	800a594 <__gethex+0x2d8>
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d024      	beq.n	800a59c <__gethex+0x2e0>
 800a552:	2b01      	cmp	r3, #1
 800a554:	d115      	bne.n	800a582 <__gethex+0x2c6>
 800a556:	42a6      	cmp	r6, r4
 800a558:	d113      	bne.n	800a582 <__gethex+0x2c6>
 800a55a:	2e01      	cmp	r6, #1
 800a55c:	dc0b      	bgt.n	800a576 <__gethex+0x2ba>
 800a55e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a562:	9a06      	ldr	r2, [sp, #24]
 800a564:	2762      	movs	r7, #98	; 0x62
 800a566:	6013      	str	r3, [r2, #0]
 800a568:	2301      	movs	r3, #1
 800a56a:	612b      	str	r3, [r5, #16]
 800a56c:	f8c9 3000 	str.w	r3, [r9]
 800a570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a572:	601d      	str	r5, [r3, #0]
 800a574:	e72a      	b.n	800a3cc <__gethex+0x110>
 800a576:	1e71      	subs	r1, r6, #1
 800a578:	4628      	mov	r0, r5
 800a57a:	f000 fd8d 	bl	800b098 <__any_on>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d1ed      	bne.n	800a55e <__gethex+0x2a2>
 800a582:	4629      	mov	r1, r5
 800a584:	9802      	ldr	r0, [sp, #8]
 800a586:	f000 f9c7 	bl	800a918 <_Bfree>
 800a58a:	2300      	movs	r3, #0
 800a58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a58e:	2750      	movs	r7, #80	; 0x50
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	e71b      	b.n	800a3cc <__gethex+0x110>
 800a594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0e1      	beq.n	800a55e <__gethex+0x2a2>
 800a59a:	e7f2      	b.n	800a582 <__gethex+0x2c6>
 800a59c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1dd      	bne.n	800a55e <__gethex+0x2a2>
 800a5a2:	e7ee      	b.n	800a582 <__gethex+0x2c6>
 800a5a4:	1e67      	subs	r7, r4, #1
 800a5a6:	f1ba 0f00 	cmp.w	sl, #0
 800a5aa:	d132      	bne.n	800a612 <__gethex+0x356>
 800a5ac:	b127      	cbz	r7, 800a5b8 <__gethex+0x2fc>
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 fd71 	bl	800b098 <__any_on>
 800a5b6:	4682      	mov	sl, r0
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	117a      	asrs	r2, r7, #5
 800a5bc:	f007 071f 	and.w	r7, r7, #31
 800a5c0:	fa03 f707 	lsl.w	r7, r3, r7
 800a5c4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	421f      	tst	r7, r3
 800a5cc:	f04f 0702 	mov.w	r7, #2
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	bf18      	it	ne
 800a5d4:	f04a 0a02 	orrne.w	sl, sl, #2
 800a5d8:	1b36      	subs	r6, r6, r4
 800a5da:	f7ff fe1f 	bl	800a21c <rshift>
 800a5de:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a5e2:	f1ba 0f00 	cmp.w	sl, #0
 800a5e6:	d048      	beq.n	800a67a <__gethex+0x3be>
 800a5e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d015      	beq.n	800a61c <__gethex+0x360>
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d017      	beq.n	800a624 <__gethex+0x368>
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d109      	bne.n	800a60c <__gethex+0x350>
 800a5f8:	f01a 0f02 	tst.w	sl, #2
 800a5fc:	d006      	beq.n	800a60c <__gethex+0x350>
 800a5fe:	f8d9 3000 	ldr.w	r3, [r9]
 800a602:	ea4a 0a03 	orr.w	sl, sl, r3
 800a606:	f01a 0f01 	tst.w	sl, #1
 800a60a:	d10e      	bne.n	800a62a <__gethex+0x36e>
 800a60c:	f047 0710 	orr.w	r7, r7, #16
 800a610:	e033      	b.n	800a67a <__gethex+0x3be>
 800a612:	f04f 0a01 	mov.w	sl, #1
 800a616:	e7cf      	b.n	800a5b8 <__gethex+0x2fc>
 800a618:	2701      	movs	r7, #1
 800a61a:	e7e2      	b.n	800a5e2 <__gethex+0x326>
 800a61c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a61e:	f1c3 0301 	rsb	r3, r3, #1
 800a622:	9315      	str	r3, [sp, #84]	; 0x54
 800a624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0f0      	beq.n	800a60c <__gethex+0x350>
 800a62a:	f04f 0c00 	mov.w	ip, #0
 800a62e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a632:	f105 0314 	add.w	r3, r5, #20
 800a636:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a63a:	eb03 010a 	add.w	r1, r3, sl
 800a63e:	4618      	mov	r0, r3
 800a640:	f853 2b04 	ldr.w	r2, [r3], #4
 800a644:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a648:	d01c      	beq.n	800a684 <__gethex+0x3c8>
 800a64a:	3201      	adds	r2, #1
 800a64c:	6002      	str	r2, [r0, #0]
 800a64e:	2f02      	cmp	r7, #2
 800a650:	f105 0314 	add.w	r3, r5, #20
 800a654:	d138      	bne.n	800a6c8 <__gethex+0x40c>
 800a656:	f8d8 2000 	ldr.w	r2, [r8]
 800a65a:	3a01      	subs	r2, #1
 800a65c:	42b2      	cmp	r2, r6
 800a65e:	d10a      	bne.n	800a676 <__gethex+0x3ba>
 800a660:	2201      	movs	r2, #1
 800a662:	1171      	asrs	r1, r6, #5
 800a664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a668:	f006 061f 	and.w	r6, r6, #31
 800a66c:	fa02 f606 	lsl.w	r6, r2, r6
 800a670:	421e      	tst	r6, r3
 800a672:	bf18      	it	ne
 800a674:	4617      	movne	r7, r2
 800a676:	f047 0720 	orr.w	r7, r7, #32
 800a67a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a67c:	601d      	str	r5, [r3, #0]
 800a67e:	9b06      	ldr	r3, [sp, #24]
 800a680:	601c      	str	r4, [r3, #0]
 800a682:	e6a3      	b.n	800a3cc <__gethex+0x110>
 800a684:	4299      	cmp	r1, r3
 800a686:	f843 cc04 	str.w	ip, [r3, #-4]
 800a68a:	d8d8      	bhi.n	800a63e <__gethex+0x382>
 800a68c:	68ab      	ldr	r3, [r5, #8]
 800a68e:	4599      	cmp	r9, r3
 800a690:	db12      	blt.n	800a6b8 <__gethex+0x3fc>
 800a692:	6869      	ldr	r1, [r5, #4]
 800a694:	9802      	ldr	r0, [sp, #8]
 800a696:	3101      	adds	r1, #1
 800a698:	f000 f90a 	bl	800a8b0 <_Balloc>
 800a69c:	4683      	mov	fp, r0
 800a69e:	692a      	ldr	r2, [r5, #16]
 800a6a0:	f105 010c 	add.w	r1, r5, #12
 800a6a4:	3202      	adds	r2, #2
 800a6a6:	0092      	lsls	r2, r2, #2
 800a6a8:	300c      	adds	r0, #12
 800a6aa:	f000 f8f6 	bl	800a89a <memcpy>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	9802      	ldr	r0, [sp, #8]
 800a6b2:	f000 f931 	bl	800a918 <_Bfree>
 800a6b6:	465d      	mov	r5, fp
 800a6b8:	692b      	ldr	r3, [r5, #16]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	612a      	str	r2, [r5, #16]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a6c4:	615a      	str	r2, [r3, #20]
 800a6c6:	e7c2      	b.n	800a64e <__gethex+0x392>
 800a6c8:	692a      	ldr	r2, [r5, #16]
 800a6ca:	454a      	cmp	r2, r9
 800a6cc:	dd0b      	ble.n	800a6e6 <__gethex+0x42a>
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7ff fda3 	bl	800a21c <rshift>
 800a6d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6da:	3401      	adds	r4, #1
 800a6dc:	42a3      	cmp	r3, r4
 800a6de:	f6ff aed8 	blt.w	800a492 <__gethex+0x1d6>
 800a6e2:	2701      	movs	r7, #1
 800a6e4:	e7c7      	b.n	800a676 <__gethex+0x3ba>
 800a6e6:	f016 061f 	ands.w	r6, r6, #31
 800a6ea:	d0fa      	beq.n	800a6e2 <__gethex+0x426>
 800a6ec:	449a      	add	sl, r3
 800a6ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a6f2:	f000 f9a1 	bl	800aa38 <__hi0bits>
 800a6f6:	f1c6 0620 	rsb	r6, r6, #32
 800a6fa:	42b0      	cmp	r0, r6
 800a6fc:	dbe7      	blt.n	800a6ce <__gethex+0x412>
 800a6fe:	e7f0      	b.n	800a6e2 <__gethex+0x426>

0800a700 <L_shift>:
 800a700:	f1c2 0208 	rsb	r2, r2, #8
 800a704:	0092      	lsls	r2, r2, #2
 800a706:	b570      	push	{r4, r5, r6, lr}
 800a708:	f1c2 0620 	rsb	r6, r2, #32
 800a70c:	6843      	ldr	r3, [r0, #4]
 800a70e:	6804      	ldr	r4, [r0, #0]
 800a710:	fa03 f506 	lsl.w	r5, r3, r6
 800a714:	432c      	orrs	r4, r5
 800a716:	40d3      	lsrs	r3, r2
 800a718:	6004      	str	r4, [r0, #0]
 800a71a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a71e:	4288      	cmp	r0, r1
 800a720:	d3f4      	bcc.n	800a70c <L_shift+0xc>
 800a722:	bd70      	pop	{r4, r5, r6, pc}

0800a724 <__match>:
 800a724:	b530      	push	{r4, r5, lr}
 800a726:	6803      	ldr	r3, [r0, #0]
 800a728:	3301      	adds	r3, #1
 800a72a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a72e:	b914      	cbnz	r4, 800a736 <__match+0x12>
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	2001      	movs	r0, #1
 800a734:	bd30      	pop	{r4, r5, pc}
 800a736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a73a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a73e:	2d19      	cmp	r5, #25
 800a740:	bf98      	it	ls
 800a742:	3220      	addls	r2, #32
 800a744:	42a2      	cmp	r2, r4
 800a746:	d0f0      	beq.n	800a72a <__match+0x6>
 800a748:	2000      	movs	r0, #0
 800a74a:	e7f3      	b.n	800a734 <__match+0x10>

0800a74c <__hexnan>:
 800a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	2500      	movs	r5, #0
 800a752:	680b      	ldr	r3, [r1, #0]
 800a754:	4682      	mov	sl, r0
 800a756:	115f      	asrs	r7, r3, #5
 800a758:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a75c:	f013 031f 	ands.w	r3, r3, #31
 800a760:	bf18      	it	ne
 800a762:	3704      	addne	r7, #4
 800a764:	1f3e      	subs	r6, r7, #4
 800a766:	4690      	mov	r8, r2
 800a768:	46b1      	mov	r9, r6
 800a76a:	4634      	mov	r4, r6
 800a76c:	46ab      	mov	fp, r5
 800a76e:	b087      	sub	sp, #28
 800a770:	6801      	ldr	r1, [r0, #0]
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	f847 5c04 	str.w	r5, [r7, #-4]
 800a778:	9502      	str	r5, [sp, #8]
 800a77a:	784a      	ldrb	r2, [r1, #1]
 800a77c:	1c4b      	adds	r3, r1, #1
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	b342      	cbz	r2, 800a7d4 <__hexnan+0x88>
 800a782:	4610      	mov	r0, r2
 800a784:	9105      	str	r1, [sp, #20]
 800a786:	9204      	str	r2, [sp, #16]
 800a788:	f7ff fd83 	bl	800a292 <__hexdig_fun>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d143      	bne.n	800a818 <__hexnan+0xcc>
 800a790:	9a04      	ldr	r2, [sp, #16]
 800a792:	9905      	ldr	r1, [sp, #20]
 800a794:	2a20      	cmp	r2, #32
 800a796:	d818      	bhi.n	800a7ca <__hexnan+0x7e>
 800a798:	9b02      	ldr	r3, [sp, #8]
 800a79a:	459b      	cmp	fp, r3
 800a79c:	dd13      	ble.n	800a7c6 <__hexnan+0x7a>
 800a79e:	454c      	cmp	r4, r9
 800a7a0:	d206      	bcs.n	800a7b0 <__hexnan+0x64>
 800a7a2:	2d07      	cmp	r5, #7
 800a7a4:	dc04      	bgt.n	800a7b0 <__hexnan+0x64>
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7ff ffa8 	bl	800a700 <L_shift>
 800a7b0:	4544      	cmp	r4, r8
 800a7b2:	d944      	bls.n	800a83e <__hexnan+0xf2>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f1a4 0904 	sub.w	r9, r4, #4
 800a7ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7be:	461d      	mov	r5, r3
 800a7c0:	464c      	mov	r4, r9
 800a7c2:	f8cd b008 	str.w	fp, [sp, #8]
 800a7c6:	9903      	ldr	r1, [sp, #12]
 800a7c8:	e7d7      	b.n	800a77a <__hexnan+0x2e>
 800a7ca:	2a29      	cmp	r2, #41	; 0x29
 800a7cc:	d14a      	bne.n	800a864 <__hexnan+0x118>
 800a7ce:	3102      	adds	r1, #2
 800a7d0:	f8ca 1000 	str.w	r1, [sl]
 800a7d4:	f1bb 0f00 	cmp.w	fp, #0
 800a7d8:	d044      	beq.n	800a864 <__hexnan+0x118>
 800a7da:	454c      	cmp	r4, r9
 800a7dc:	d206      	bcs.n	800a7ec <__hexnan+0xa0>
 800a7de:	2d07      	cmp	r5, #7
 800a7e0:	dc04      	bgt.n	800a7ec <__hexnan+0xa0>
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff ff8a 	bl	800a700 <L_shift>
 800a7ec:	4544      	cmp	r4, r8
 800a7ee:	d928      	bls.n	800a842 <__hexnan+0xf6>
 800a7f0:	4643      	mov	r3, r8
 800a7f2:	f854 2b04 	ldr.w	r2, [r4], #4
 800a7f6:	42a6      	cmp	r6, r4
 800a7f8:	f843 2b04 	str.w	r2, [r3], #4
 800a7fc:	d2f9      	bcs.n	800a7f2 <__hexnan+0xa6>
 800a7fe:	2200      	movs	r2, #0
 800a800:	f843 2b04 	str.w	r2, [r3], #4
 800a804:	429e      	cmp	r6, r3
 800a806:	d2fb      	bcs.n	800a800 <__hexnan+0xb4>
 800a808:	6833      	ldr	r3, [r6, #0]
 800a80a:	b91b      	cbnz	r3, 800a814 <__hexnan+0xc8>
 800a80c:	4546      	cmp	r6, r8
 800a80e:	d127      	bne.n	800a860 <__hexnan+0x114>
 800a810:	2301      	movs	r3, #1
 800a812:	6033      	str	r3, [r6, #0]
 800a814:	2005      	movs	r0, #5
 800a816:	e026      	b.n	800a866 <__hexnan+0x11a>
 800a818:	3501      	adds	r5, #1
 800a81a:	2d08      	cmp	r5, #8
 800a81c:	f10b 0b01 	add.w	fp, fp, #1
 800a820:	dd06      	ble.n	800a830 <__hexnan+0xe4>
 800a822:	4544      	cmp	r4, r8
 800a824:	d9cf      	bls.n	800a7c6 <__hexnan+0x7a>
 800a826:	2300      	movs	r3, #0
 800a828:	2501      	movs	r5, #1
 800a82a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a82e:	3c04      	subs	r4, #4
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	f000 000f 	and.w	r0, r0, #15
 800a836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	e7c3      	b.n	800a7c6 <__hexnan+0x7a>
 800a83e:	2508      	movs	r5, #8
 800a840:	e7c1      	b.n	800a7c6 <__hexnan+0x7a>
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0df      	beq.n	800a808 <__hexnan+0xbc>
 800a848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a84c:	f1c3 0320 	rsb	r3, r3, #32
 800a850:	fa22 f303 	lsr.w	r3, r2, r3
 800a854:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a858:	401a      	ands	r2, r3
 800a85a:	f847 2c04 	str.w	r2, [r7, #-4]
 800a85e:	e7d3      	b.n	800a808 <__hexnan+0xbc>
 800a860:	3e04      	subs	r6, #4
 800a862:	e7d1      	b.n	800a808 <__hexnan+0xbc>
 800a864:	2004      	movs	r0, #4
 800a866:	b007      	add	sp, #28
 800a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a86c <__locale_ctype_ptr_l>:
 800a86c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a870:	4770      	bx	lr

0800a872 <__localeconv_l>:
 800a872:	30f0      	adds	r0, #240	; 0xf0
 800a874:	4770      	bx	lr

0800a876 <__ascii_mbtowc>:
 800a876:	b082      	sub	sp, #8
 800a878:	b901      	cbnz	r1, 800a87c <__ascii_mbtowc+0x6>
 800a87a:	a901      	add	r1, sp, #4
 800a87c:	b142      	cbz	r2, 800a890 <__ascii_mbtowc+0x1a>
 800a87e:	b14b      	cbz	r3, 800a894 <__ascii_mbtowc+0x1e>
 800a880:	7813      	ldrb	r3, [r2, #0]
 800a882:	600b      	str	r3, [r1, #0]
 800a884:	7812      	ldrb	r2, [r2, #0]
 800a886:	1c10      	adds	r0, r2, #0
 800a888:	bf18      	it	ne
 800a88a:	2001      	movne	r0, #1
 800a88c:	b002      	add	sp, #8
 800a88e:	4770      	bx	lr
 800a890:	4610      	mov	r0, r2
 800a892:	e7fb      	b.n	800a88c <__ascii_mbtowc+0x16>
 800a894:	f06f 0001 	mvn.w	r0, #1
 800a898:	e7f8      	b.n	800a88c <__ascii_mbtowc+0x16>

0800a89a <memcpy>:
 800a89a:	b510      	push	{r4, lr}
 800a89c:	1e43      	subs	r3, r0, #1
 800a89e:	440a      	add	r2, r1
 800a8a0:	4291      	cmp	r1, r2
 800a8a2:	d100      	bne.n	800a8a6 <memcpy+0xc>
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ae:	e7f7      	b.n	800a8a0 <memcpy+0x6>

0800a8b0 <_Balloc>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	460e      	mov	r6, r1
 800a8b8:	b93d      	cbnz	r5, 800a8ca <_Balloc+0x1a>
 800a8ba:	2010      	movs	r0, #16
 800a8bc:	f001 fde8 	bl	800c490 <malloc>
 800a8c0:	6260      	str	r0, [r4, #36]	; 0x24
 800a8c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8c6:	6005      	str	r5, [r0, #0]
 800a8c8:	60c5      	str	r5, [r0, #12]
 800a8ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a8cc:	68eb      	ldr	r3, [r5, #12]
 800a8ce:	b183      	cbz	r3, 800a8f2 <_Balloc+0x42>
 800a8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a8d8:	b9b8      	cbnz	r0, 800a90a <_Balloc+0x5a>
 800a8da:	2101      	movs	r1, #1
 800a8dc:	fa01 f506 	lsl.w	r5, r1, r6
 800a8e0:	1d6a      	adds	r2, r5, #5
 800a8e2:	0092      	lsls	r2, r2, #2
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fbf8 	bl	800b0da <_calloc_r>
 800a8ea:	b160      	cbz	r0, 800a906 <_Balloc+0x56>
 800a8ec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a8f0:	e00e      	b.n	800a910 <_Balloc+0x60>
 800a8f2:	2221      	movs	r2, #33	; 0x21
 800a8f4:	2104      	movs	r1, #4
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fbef 	bl	800b0da <_calloc_r>
 800a8fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8fe:	60e8      	str	r0, [r5, #12]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e4      	bne.n	800a8d0 <_Balloc+0x20>
 800a906:	2000      	movs	r0, #0
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	6802      	ldr	r2, [r0, #0]
 800a90c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a910:	2300      	movs	r3, #0
 800a912:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a916:	e7f7      	b.n	800a908 <_Balloc+0x58>

0800a918 <_Bfree>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a91c:	4606      	mov	r6, r0
 800a91e:	460d      	mov	r5, r1
 800a920:	b93c      	cbnz	r4, 800a932 <_Bfree+0x1a>
 800a922:	2010      	movs	r0, #16
 800a924:	f001 fdb4 	bl	800c490 <malloc>
 800a928:	6270      	str	r0, [r6, #36]	; 0x24
 800a92a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a92e:	6004      	str	r4, [r0, #0]
 800a930:	60c4      	str	r4, [r0, #12]
 800a932:	b13d      	cbz	r5, 800a944 <_Bfree+0x2c>
 800a934:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a936:	686a      	ldr	r2, [r5, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a93e:	6029      	str	r1, [r5, #0]
 800a940:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a944:	bd70      	pop	{r4, r5, r6, pc}

0800a946 <__multadd>:
 800a946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94a:	461f      	mov	r7, r3
 800a94c:	4606      	mov	r6, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	2300      	movs	r3, #0
 800a952:	690d      	ldr	r5, [r1, #16]
 800a954:	f101 0c14 	add.w	ip, r1, #20
 800a958:	f8dc 0000 	ldr.w	r0, [ip]
 800a95c:	3301      	adds	r3, #1
 800a95e:	b281      	uxth	r1, r0
 800a960:	fb02 7101 	mla	r1, r2, r1, r7
 800a964:	0c00      	lsrs	r0, r0, #16
 800a966:	0c0f      	lsrs	r7, r1, #16
 800a968:	fb02 7000 	mla	r0, r2, r0, r7
 800a96c:	b289      	uxth	r1, r1
 800a96e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a972:	429d      	cmp	r5, r3
 800a974:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a978:	f84c 1b04 	str.w	r1, [ip], #4
 800a97c:	dcec      	bgt.n	800a958 <__multadd+0x12>
 800a97e:	b1d7      	cbz	r7, 800a9b6 <__multadd+0x70>
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	42ab      	cmp	r3, r5
 800a984:	dc12      	bgt.n	800a9ac <__multadd+0x66>
 800a986:	6861      	ldr	r1, [r4, #4]
 800a988:	4630      	mov	r0, r6
 800a98a:	3101      	adds	r1, #1
 800a98c:	f7ff ff90 	bl	800a8b0 <_Balloc>
 800a990:	4680      	mov	r8, r0
 800a992:	6922      	ldr	r2, [r4, #16]
 800a994:	f104 010c 	add.w	r1, r4, #12
 800a998:	3202      	adds	r2, #2
 800a99a:	0092      	lsls	r2, r2, #2
 800a99c:	300c      	adds	r0, #12
 800a99e:	f7ff ff7c 	bl	800a89a <memcpy>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f7ff ffb7 	bl	800a918 <_Bfree>
 800a9aa:	4644      	mov	r4, r8
 800a9ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	615f      	str	r7, [r3, #20]
 800a9b4:	6125      	str	r5, [r4, #16]
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9bc <__s2b>:
 800a9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	4615      	mov	r5, r2
 800a9c2:	2209      	movs	r2, #9
 800a9c4:	461f      	mov	r7, r3
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	db20      	blt.n	800aa1a <__s2b+0x5e>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7ff ff69 	bl	800a8b0 <_Balloc>
 800a9de:	9b08      	ldr	r3, [sp, #32]
 800a9e0:	2d09      	cmp	r5, #9
 800a9e2:	6143      	str	r3, [r0, #20]
 800a9e4:	f04f 0301 	mov.w	r3, #1
 800a9e8:	6103      	str	r3, [r0, #16]
 800a9ea:	dd19      	ble.n	800aa20 <__s2b+0x64>
 800a9ec:	f104 0809 	add.w	r8, r4, #9
 800a9f0:	46c1      	mov	r9, r8
 800a9f2:	442c      	add	r4, r5
 800a9f4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	3b30      	subs	r3, #48	; 0x30
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7ff ffa1 	bl	800a946 <__multadd>
 800aa04:	45a1      	cmp	r9, r4
 800aa06:	d1f5      	bne.n	800a9f4 <__s2b+0x38>
 800aa08:	eb08 0405 	add.w	r4, r8, r5
 800aa0c:	3c08      	subs	r4, #8
 800aa0e:	1b2d      	subs	r5, r5, r4
 800aa10:	1963      	adds	r3, r4, r5
 800aa12:	42bb      	cmp	r3, r7
 800aa14:	db07      	blt.n	800aa26 <__s2b+0x6a>
 800aa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	0052      	lsls	r2, r2, #1
 800aa1c:	3101      	adds	r1, #1
 800aa1e:	e7d9      	b.n	800a9d4 <__s2b+0x18>
 800aa20:	340a      	adds	r4, #10
 800aa22:	2509      	movs	r5, #9
 800aa24:	e7f3      	b.n	800aa0e <__s2b+0x52>
 800aa26:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	3b30      	subs	r3, #48	; 0x30
 800aa2e:	220a      	movs	r2, #10
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7ff ff88 	bl	800a946 <__multadd>
 800aa36:	e7eb      	b.n	800aa10 <__s2b+0x54>

0800aa38 <__hi0bits>:
 800aa38:	0c02      	lsrs	r2, r0, #16
 800aa3a:	0412      	lsls	r2, r2, #16
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	b9b2      	cbnz	r2, 800aa6e <__hi0bits+0x36>
 800aa40:	0403      	lsls	r3, r0, #16
 800aa42:	2010      	movs	r0, #16
 800aa44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa48:	bf04      	itt	eq
 800aa4a:	021b      	lsleq	r3, r3, #8
 800aa4c:	3008      	addeq	r0, #8
 800aa4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa52:	bf04      	itt	eq
 800aa54:	011b      	lsleq	r3, r3, #4
 800aa56:	3004      	addeq	r0, #4
 800aa58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa5c:	bf04      	itt	eq
 800aa5e:	009b      	lsleq	r3, r3, #2
 800aa60:	3002      	addeq	r0, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	db06      	blt.n	800aa74 <__hi0bits+0x3c>
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	d503      	bpl.n	800aa72 <__hi0bits+0x3a>
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	4770      	bx	lr
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e7e8      	b.n	800aa44 <__hi0bits+0xc>
 800aa72:	2020      	movs	r0, #32
 800aa74:	4770      	bx	lr

0800aa76 <__lo0bits>:
 800aa76:	6803      	ldr	r3, [r0, #0]
 800aa78:	4601      	mov	r1, r0
 800aa7a:	f013 0207 	ands.w	r2, r3, #7
 800aa7e:	d00b      	beq.n	800aa98 <__lo0bits+0x22>
 800aa80:	07da      	lsls	r2, r3, #31
 800aa82:	d423      	bmi.n	800aacc <__lo0bits+0x56>
 800aa84:	0798      	lsls	r0, r3, #30
 800aa86:	bf49      	itett	mi
 800aa88:	085b      	lsrmi	r3, r3, #1
 800aa8a:	089b      	lsrpl	r3, r3, #2
 800aa8c:	2001      	movmi	r0, #1
 800aa8e:	600b      	strmi	r3, [r1, #0]
 800aa90:	bf5c      	itt	pl
 800aa92:	600b      	strpl	r3, [r1, #0]
 800aa94:	2002      	movpl	r0, #2
 800aa96:	4770      	bx	lr
 800aa98:	b298      	uxth	r0, r3
 800aa9a:	b9a8      	cbnz	r0, 800aac8 <__lo0bits+0x52>
 800aa9c:	2010      	movs	r0, #16
 800aa9e:	0c1b      	lsrs	r3, r3, #16
 800aaa0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aaa4:	bf04      	itt	eq
 800aaa6:	0a1b      	lsreq	r3, r3, #8
 800aaa8:	3008      	addeq	r0, #8
 800aaaa:	071a      	lsls	r2, r3, #28
 800aaac:	bf04      	itt	eq
 800aaae:	091b      	lsreq	r3, r3, #4
 800aab0:	3004      	addeq	r0, #4
 800aab2:	079a      	lsls	r2, r3, #30
 800aab4:	bf04      	itt	eq
 800aab6:	089b      	lsreq	r3, r3, #2
 800aab8:	3002      	addeq	r0, #2
 800aaba:	07da      	lsls	r2, r3, #31
 800aabc:	d402      	bmi.n	800aac4 <__lo0bits+0x4e>
 800aabe:	085b      	lsrs	r3, r3, #1
 800aac0:	d006      	beq.n	800aad0 <__lo0bits+0x5a>
 800aac2:	3001      	adds	r0, #1
 800aac4:	600b      	str	r3, [r1, #0]
 800aac6:	4770      	bx	lr
 800aac8:	4610      	mov	r0, r2
 800aaca:	e7e9      	b.n	800aaa0 <__lo0bits+0x2a>
 800aacc:	2000      	movs	r0, #0
 800aace:	4770      	bx	lr
 800aad0:	2020      	movs	r0, #32
 800aad2:	4770      	bx	lr

0800aad4 <__i2b>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	460c      	mov	r4, r1
 800aad8:	2101      	movs	r1, #1
 800aada:	f7ff fee9 	bl	800a8b0 <_Balloc>
 800aade:	2201      	movs	r2, #1
 800aae0:	6144      	str	r4, [r0, #20]
 800aae2:	6102      	str	r2, [r0, #16]
 800aae4:	bd10      	pop	{r4, pc}

0800aae6 <__multiply>:
 800aae6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaea:	4614      	mov	r4, r2
 800aaec:	690a      	ldr	r2, [r1, #16]
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	4688      	mov	r8, r1
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	bfbe      	ittt	lt
 800aaf6:	460b      	movlt	r3, r1
 800aaf8:	46a0      	movlt	r8, r4
 800aafa:	461c      	movlt	r4, r3
 800aafc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab0c:	eb07 0609 	add.w	r6, r7, r9
 800ab10:	42b3      	cmp	r3, r6
 800ab12:	bfb8      	it	lt
 800ab14:	3101      	addlt	r1, #1
 800ab16:	f7ff fecb 	bl	800a8b0 <_Balloc>
 800ab1a:	f100 0514 	add.w	r5, r0, #20
 800ab1e:	462b      	mov	r3, r5
 800ab20:	2200      	movs	r2, #0
 800ab22:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ab26:	4573      	cmp	r3, lr
 800ab28:	d316      	bcc.n	800ab58 <__multiply+0x72>
 800ab2a:	f104 0214 	add.w	r2, r4, #20
 800ab2e:	f108 0114 	add.w	r1, r8, #20
 800ab32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ab36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	9201      	str	r2, [sp, #4]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d80c      	bhi.n	800ab5e <__multiply+0x78>
 800ab44:	2e00      	cmp	r6, #0
 800ab46:	dd03      	ble.n	800ab50 <__multiply+0x6a>
 800ab48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d05d      	beq.n	800ac0c <__multiply+0x126>
 800ab50:	6106      	str	r6, [r0, #16]
 800ab52:	b003      	add	sp, #12
 800ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab58:	f843 2b04 	str.w	r2, [r3], #4
 800ab5c:	e7e3      	b.n	800ab26 <__multiply+0x40>
 800ab5e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ab62:	f1bb 0f00 	cmp.w	fp, #0
 800ab66:	d023      	beq.n	800abb0 <__multiply+0xca>
 800ab68:	4689      	mov	r9, r1
 800ab6a:	46ac      	mov	ip, r5
 800ab6c:	f04f 0800 	mov.w	r8, #0
 800ab70:	f859 4b04 	ldr.w	r4, [r9], #4
 800ab74:	f8dc a000 	ldr.w	sl, [ip]
 800ab78:	b2a3      	uxth	r3, r4
 800ab7a:	fa1f fa8a 	uxth.w	sl, sl
 800ab7e:	fb0b a303 	mla	r3, fp, r3, sl
 800ab82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ab86:	f8dc 4000 	ldr.w	r4, [ip]
 800ab8a:	4443      	add	r3, r8
 800ab8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ab90:	fb0b 840a 	mla	r4, fp, sl, r8
 800ab94:	46e2      	mov	sl, ip
 800ab96:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aba0:	454f      	cmp	r7, r9
 800aba2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aba6:	f84a 3b04 	str.w	r3, [sl], #4
 800abaa:	d82b      	bhi.n	800ac04 <__multiply+0x11e>
 800abac:	f8cc 8004 	str.w	r8, [ip, #4]
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	3204      	adds	r2, #4
 800abb4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800abb8:	f1ba 0f00 	cmp.w	sl, #0
 800abbc:	d020      	beq.n	800ac00 <__multiply+0x11a>
 800abbe:	4689      	mov	r9, r1
 800abc0:	46a8      	mov	r8, r5
 800abc2:	f04f 0b00 	mov.w	fp, #0
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	f8b9 c000 	ldrh.w	ip, [r9]
 800abcc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	fb0a 440c 	mla	r4, sl, ip, r4
 800abd6:	46c4      	mov	ip, r8
 800abd8:	445c      	add	r4, fp
 800abda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800abde:	f84c 3b04 	str.w	r3, [ip], #4
 800abe2:	f859 3b04 	ldr.w	r3, [r9], #4
 800abe6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800abea:	0c1b      	lsrs	r3, r3, #16
 800abec:	fb0a b303 	mla	r3, sl, r3, fp
 800abf0:	454f      	cmp	r7, r9
 800abf2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800abf6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800abfa:	d805      	bhi.n	800ac08 <__multiply+0x122>
 800abfc:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac00:	3504      	adds	r5, #4
 800ac02:	e79b      	b.n	800ab3c <__multiply+0x56>
 800ac04:	46d4      	mov	ip, sl
 800ac06:	e7b3      	b.n	800ab70 <__multiply+0x8a>
 800ac08:	46e0      	mov	r8, ip
 800ac0a:	e7dd      	b.n	800abc8 <__multiply+0xe2>
 800ac0c:	3e01      	subs	r6, #1
 800ac0e:	e799      	b.n	800ab44 <__multiply+0x5e>

0800ac10 <__pow5mult>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	4615      	mov	r5, r2
 800ac16:	f012 0203 	ands.w	r2, r2, #3
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	d007      	beq.n	800ac30 <__pow5mult+0x20>
 800ac20:	4c21      	ldr	r4, [pc, #132]	; (800aca8 <__pow5mult+0x98>)
 800ac22:	3a01      	subs	r2, #1
 800ac24:	2300      	movs	r3, #0
 800ac26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac2a:	f7ff fe8c 	bl	800a946 <__multadd>
 800ac2e:	4607      	mov	r7, r0
 800ac30:	10ad      	asrs	r5, r5, #2
 800ac32:	d035      	beq.n	800aca0 <__pow5mult+0x90>
 800ac34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac36:	b93c      	cbnz	r4, 800ac48 <__pow5mult+0x38>
 800ac38:	2010      	movs	r0, #16
 800ac3a:	f001 fc29 	bl	800c490 <malloc>
 800ac3e:	6270      	str	r0, [r6, #36]	; 0x24
 800ac40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac44:	6004      	str	r4, [r0, #0]
 800ac46:	60c4      	str	r4, [r0, #12]
 800ac48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac50:	b94c      	cbnz	r4, 800ac66 <__pow5mult+0x56>
 800ac52:	f240 2171 	movw	r1, #625	; 0x271
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7ff ff3c 	bl	800aad4 <__i2b>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac64:	6003      	str	r3, [r0, #0]
 800ac66:	f04f 0800 	mov.w	r8, #0
 800ac6a:	07eb      	lsls	r3, r5, #31
 800ac6c:	d50a      	bpl.n	800ac84 <__pow5mult+0x74>
 800ac6e:	4639      	mov	r1, r7
 800ac70:	4622      	mov	r2, r4
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7ff ff37 	bl	800aae6 <__multiply>
 800ac78:	4681      	mov	r9, r0
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fe4b 	bl	800a918 <_Bfree>
 800ac82:	464f      	mov	r7, r9
 800ac84:	106d      	asrs	r5, r5, #1
 800ac86:	d00b      	beq.n	800aca0 <__pow5mult+0x90>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	b938      	cbnz	r0, 800ac9c <__pow5mult+0x8c>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7ff ff28 	bl	800aae6 <__multiply>
 800ac96:	6020      	str	r0, [r4, #0]
 800ac98:	f8c0 8000 	str.w	r8, [r0]
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	e7e4      	b.n	800ac6a <__pow5mult+0x5a>
 800aca0:	4638      	mov	r0, r7
 800aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca6:	bf00      	nop
 800aca8:	0800d150 	.word	0x0800d150

0800acac <__lshift>:
 800acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	4607      	mov	r7, r0
 800acb4:	4616      	mov	r6, r2
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acbc:	eb0a 0903 	add.w	r9, sl, r3
 800acc0:	6849      	ldr	r1, [r1, #4]
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	f109 0501 	add.w	r5, r9, #1
 800acc8:	42ab      	cmp	r3, r5
 800acca:	db32      	blt.n	800ad32 <__lshift+0x86>
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff fdef 	bl	800a8b0 <_Balloc>
 800acd2:	2300      	movs	r3, #0
 800acd4:	4680      	mov	r8, r0
 800acd6:	461a      	mov	r2, r3
 800acd8:	f100 0114 	add.w	r1, r0, #20
 800acdc:	4553      	cmp	r3, sl
 800acde:	db2b      	blt.n	800ad38 <__lshift+0x8c>
 800ace0:	6920      	ldr	r0, [r4, #16]
 800ace2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ace6:	f104 0314 	add.w	r3, r4, #20
 800acea:	f016 021f 	ands.w	r2, r6, #31
 800acee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acf2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acf6:	d025      	beq.n	800ad44 <__lshift+0x98>
 800acf8:	2000      	movs	r0, #0
 800acfa:	f1c2 0e20 	rsb	lr, r2, #32
 800acfe:	468a      	mov	sl, r1
 800ad00:	681e      	ldr	r6, [r3, #0]
 800ad02:	4096      	lsls	r6, r2
 800ad04:	4330      	orrs	r0, r6
 800ad06:	f84a 0b04 	str.w	r0, [sl], #4
 800ad0a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ad0e:	459c      	cmp	ip, r3
 800ad10:	fa20 f00e 	lsr.w	r0, r0, lr
 800ad14:	d814      	bhi.n	800ad40 <__lshift+0x94>
 800ad16:	6048      	str	r0, [r1, #4]
 800ad18:	b108      	cbz	r0, 800ad1e <__lshift+0x72>
 800ad1a:	f109 0502 	add.w	r5, r9, #2
 800ad1e:	3d01      	subs	r5, #1
 800ad20:	4638      	mov	r0, r7
 800ad22:	f8c8 5010 	str.w	r5, [r8, #16]
 800ad26:	4621      	mov	r1, r4
 800ad28:	f7ff fdf6 	bl	800a918 <_Bfree>
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad32:	3101      	adds	r1, #1
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	e7c7      	b.n	800acc8 <__lshift+0x1c>
 800ad38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	e7cd      	b.n	800acdc <__lshift+0x30>
 800ad40:	4651      	mov	r1, sl
 800ad42:	e7dc      	b.n	800acfe <__lshift+0x52>
 800ad44:	3904      	subs	r1, #4
 800ad46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad4a:	459c      	cmp	ip, r3
 800ad4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad50:	d8f9      	bhi.n	800ad46 <__lshift+0x9a>
 800ad52:	e7e4      	b.n	800ad1e <__lshift+0x72>

0800ad54 <__mcmp>:
 800ad54:	6903      	ldr	r3, [r0, #16]
 800ad56:	690a      	ldr	r2, [r1, #16]
 800ad58:	b530      	push	{r4, r5, lr}
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	d10c      	bne.n	800ad78 <__mcmp+0x24>
 800ad5e:	0092      	lsls	r2, r2, #2
 800ad60:	3014      	adds	r0, #20
 800ad62:	3114      	adds	r1, #20
 800ad64:	1884      	adds	r4, r0, r2
 800ad66:	4411      	add	r1, r2
 800ad68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad70:	4295      	cmp	r5, r2
 800ad72:	d003      	beq.n	800ad7c <__mcmp+0x28>
 800ad74:	d305      	bcc.n	800ad82 <__mcmp+0x2e>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4618      	mov	r0, r3
 800ad7a:	bd30      	pop	{r4, r5, pc}
 800ad7c:	42a0      	cmp	r0, r4
 800ad7e:	d3f3      	bcc.n	800ad68 <__mcmp+0x14>
 800ad80:	e7fa      	b.n	800ad78 <__mcmp+0x24>
 800ad82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad86:	e7f7      	b.n	800ad78 <__mcmp+0x24>

0800ad88 <__mdiff>:
 800ad88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	4607      	mov	r7, r0
 800ad90:	4611      	mov	r1, r2
 800ad92:	4628      	mov	r0, r5
 800ad94:	4614      	mov	r4, r2
 800ad96:	f7ff ffdd 	bl	800ad54 <__mcmp>
 800ad9a:	1e06      	subs	r6, r0, #0
 800ad9c:	d108      	bne.n	800adb0 <__mdiff+0x28>
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff fd85 	bl	800a8b0 <_Balloc>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800adac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb0:	bfa4      	itt	ge
 800adb2:	4623      	movge	r3, r4
 800adb4:	462c      	movge	r4, r5
 800adb6:	4638      	mov	r0, r7
 800adb8:	6861      	ldr	r1, [r4, #4]
 800adba:	bfa6      	itte	ge
 800adbc:	461d      	movge	r5, r3
 800adbe:	2600      	movge	r6, #0
 800adc0:	2601      	movlt	r6, #1
 800adc2:	f7ff fd75 	bl	800a8b0 <_Balloc>
 800adc6:	f04f 0e00 	mov.w	lr, #0
 800adca:	60c6      	str	r6, [r0, #12]
 800adcc:	692b      	ldr	r3, [r5, #16]
 800adce:	6926      	ldr	r6, [r4, #16]
 800add0:	f104 0214 	add.w	r2, r4, #20
 800add4:	f105 0914 	add.w	r9, r5, #20
 800add8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800addc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ade0:	f100 0114 	add.w	r1, r0, #20
 800ade4:	f852 ab04 	ldr.w	sl, [r2], #4
 800ade8:	f859 5b04 	ldr.w	r5, [r9], #4
 800adec:	fa1f f38a 	uxth.w	r3, sl
 800adf0:	4473      	add	r3, lr
 800adf2:	b2ac      	uxth	r4, r5
 800adf4:	1b1b      	subs	r3, r3, r4
 800adf6:	0c2c      	lsrs	r4, r5, #16
 800adf8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800adfc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ae06:	45c8      	cmp	r8, r9
 800ae08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ae0c:	4694      	mov	ip, r2
 800ae0e:	f841 4b04 	str.w	r4, [r1], #4
 800ae12:	d8e7      	bhi.n	800ade4 <__mdiff+0x5c>
 800ae14:	45bc      	cmp	ip, r7
 800ae16:	d304      	bcc.n	800ae22 <__mdiff+0x9a>
 800ae18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ae1c:	b183      	cbz	r3, 800ae40 <__mdiff+0xb8>
 800ae1e:	6106      	str	r6, [r0, #16]
 800ae20:	e7c4      	b.n	800adac <__mdiff+0x24>
 800ae22:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ae26:	b2a2      	uxth	r2, r4
 800ae28:	4472      	add	r2, lr
 800ae2a:	1413      	asrs	r3, r2, #16
 800ae2c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae30:	b292      	uxth	r2, r2
 800ae32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae36:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ae3a:	f841 2b04 	str.w	r2, [r1], #4
 800ae3e:	e7e9      	b.n	800ae14 <__mdiff+0x8c>
 800ae40:	3e01      	subs	r6, #1
 800ae42:	e7e9      	b.n	800ae18 <__mdiff+0x90>

0800ae44 <__ulp>:
 800ae44:	4b10      	ldr	r3, [pc, #64]	; (800ae88 <__ulp+0x44>)
 800ae46:	400b      	ands	r3, r1
 800ae48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd02      	ble.n	800ae56 <__ulp+0x12>
 800ae50:	2000      	movs	r0, #0
 800ae52:	4619      	mov	r1, r3
 800ae54:	4770      	bx	lr
 800ae56:	425b      	negs	r3, r3
 800ae58:	151b      	asrs	r3, r3, #20
 800ae5a:	2b13      	cmp	r3, #19
 800ae5c:	f04f 0000 	mov.w	r0, #0
 800ae60:	f04f 0100 	mov.w	r1, #0
 800ae64:	dc04      	bgt.n	800ae70 <__ulp+0x2c>
 800ae66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ae6a:	fa42 f103 	asr.w	r1, r2, r3
 800ae6e:	4770      	bx	lr
 800ae70:	2201      	movs	r2, #1
 800ae72:	3b14      	subs	r3, #20
 800ae74:	2b1e      	cmp	r3, #30
 800ae76:	bfce      	itee	gt
 800ae78:	4613      	movgt	r3, r2
 800ae7a:	f1c3 031f 	rsble	r3, r3, #31
 800ae7e:	fa02 f303 	lslle.w	r3, r2, r3
 800ae82:	4618      	mov	r0, r3
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	7ff00000 	.word	0x7ff00000

0800ae8c <__b2d>:
 800ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae90:	6907      	ldr	r7, [r0, #16]
 800ae92:	f100 0914 	add.w	r9, r0, #20
 800ae96:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ae9a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ae9e:	f1a7 0804 	sub.w	r8, r7, #4
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7ff fdc8 	bl	800aa38 <__hi0bits>
 800aea8:	f1c0 0320 	rsb	r3, r0, #32
 800aeac:	280a      	cmp	r0, #10
 800aeae:	600b      	str	r3, [r1, #0]
 800aeb0:	491e      	ldr	r1, [pc, #120]	; (800af2c <__b2d+0xa0>)
 800aeb2:	dc17      	bgt.n	800aee4 <__b2d+0x58>
 800aeb4:	45c1      	cmp	r9, r8
 800aeb6:	bf28      	it	cs
 800aeb8:	2200      	movcs	r2, #0
 800aeba:	f1c0 0c0b 	rsb	ip, r0, #11
 800aebe:	fa26 f30c 	lsr.w	r3, r6, ip
 800aec2:	bf38      	it	cc
 800aec4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aec8:	ea43 0501 	orr.w	r5, r3, r1
 800aecc:	f100 0315 	add.w	r3, r0, #21
 800aed0:	fa06 f303 	lsl.w	r3, r6, r3
 800aed4:	fa22 f20c 	lsr.w	r2, r2, ip
 800aed8:	ea43 0402 	orr.w	r4, r3, r2
 800aedc:	4620      	mov	r0, r4
 800aede:	4629      	mov	r1, r5
 800aee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee4:	45c1      	cmp	r9, r8
 800aee6:	bf3a      	itte	cc
 800aee8:	f1a7 0808 	subcc.w	r8, r7, #8
 800aeec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aef0:	2200      	movcs	r2, #0
 800aef2:	f1b0 030b 	subs.w	r3, r0, #11
 800aef6:	d015      	beq.n	800af24 <__b2d+0x98>
 800aef8:	409e      	lsls	r6, r3
 800aefa:	f1c3 0720 	rsb	r7, r3, #32
 800aefe:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800af02:	fa22 f107 	lsr.w	r1, r2, r7
 800af06:	45c8      	cmp	r8, r9
 800af08:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800af0c:	ea46 0501 	orr.w	r5, r6, r1
 800af10:	bf94      	ite	ls
 800af12:	2100      	movls	r1, #0
 800af14:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800af18:	fa02 f003 	lsl.w	r0, r2, r3
 800af1c:	40f9      	lsrs	r1, r7
 800af1e:	ea40 0401 	orr.w	r4, r0, r1
 800af22:	e7db      	b.n	800aedc <__b2d+0x50>
 800af24:	ea46 0501 	orr.w	r5, r6, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	e7d7      	b.n	800aedc <__b2d+0x50>
 800af2c:	3ff00000 	.word	0x3ff00000

0800af30 <__d2b>:
 800af30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af34:	461c      	mov	r4, r3
 800af36:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800af3a:	2101      	movs	r1, #1
 800af3c:	4690      	mov	r8, r2
 800af3e:	f7ff fcb7 	bl	800a8b0 <_Balloc>
 800af42:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800af46:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800af4a:	4607      	mov	r7, r0
 800af4c:	bb34      	cbnz	r4, 800af9c <__d2b+0x6c>
 800af4e:	9201      	str	r2, [sp, #4]
 800af50:	f1b8 0200 	subs.w	r2, r8, #0
 800af54:	d027      	beq.n	800afa6 <__d2b+0x76>
 800af56:	a802      	add	r0, sp, #8
 800af58:	f840 2d08 	str.w	r2, [r0, #-8]!
 800af5c:	f7ff fd8b 	bl	800aa76 <__lo0bits>
 800af60:	9900      	ldr	r1, [sp, #0]
 800af62:	b1f0      	cbz	r0, 800afa2 <__d2b+0x72>
 800af64:	9a01      	ldr	r2, [sp, #4]
 800af66:	f1c0 0320 	rsb	r3, r0, #32
 800af6a:	fa02 f303 	lsl.w	r3, r2, r3
 800af6e:	430b      	orrs	r3, r1
 800af70:	40c2      	lsrs	r2, r0
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	9201      	str	r2, [sp, #4]
 800af76:	9b01      	ldr	r3, [sp, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bf14      	ite	ne
 800af7c:	2102      	movne	r1, #2
 800af7e:	2101      	moveq	r1, #1
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	6139      	str	r1, [r7, #16]
 800af84:	b1c4      	cbz	r4, 800afb8 <__d2b+0x88>
 800af86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800af8a:	4404      	add	r4, r0
 800af8c:	6034      	str	r4, [r6, #0]
 800af8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af92:	6028      	str	r0, [r5, #0]
 800af94:	4638      	mov	r0, r7
 800af96:	b002      	add	sp, #8
 800af98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800afa0:	e7d5      	b.n	800af4e <__d2b+0x1e>
 800afa2:	6179      	str	r1, [r7, #20]
 800afa4:	e7e7      	b.n	800af76 <__d2b+0x46>
 800afa6:	a801      	add	r0, sp, #4
 800afa8:	f7ff fd65 	bl	800aa76 <__lo0bits>
 800afac:	2101      	movs	r1, #1
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	6139      	str	r1, [r7, #16]
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	3020      	adds	r0, #32
 800afb6:	e7e5      	b.n	800af84 <__d2b+0x54>
 800afb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800afc0:	6030      	str	r0, [r6, #0]
 800afc2:	6918      	ldr	r0, [r3, #16]
 800afc4:	f7ff fd38 	bl	800aa38 <__hi0bits>
 800afc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800afcc:	e7e1      	b.n	800af92 <__d2b+0x62>

0800afce <__ratio>:
 800afce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd2:	4688      	mov	r8, r1
 800afd4:	4669      	mov	r1, sp
 800afd6:	4681      	mov	r9, r0
 800afd8:	f7ff ff58 	bl	800ae8c <__b2d>
 800afdc:	468b      	mov	fp, r1
 800afde:	4606      	mov	r6, r0
 800afe0:	460f      	mov	r7, r1
 800afe2:	4640      	mov	r0, r8
 800afe4:	a901      	add	r1, sp, #4
 800afe6:	f7ff ff51 	bl	800ae8c <__b2d>
 800afea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aff2:	460d      	mov	r5, r1
 800aff4:	eba3 0c02 	sub.w	ip, r3, r2
 800aff8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b002:	2b00      	cmp	r3, #0
 800b004:	bfd5      	itete	le
 800b006:	460a      	movle	r2, r1
 800b008:	463a      	movgt	r2, r7
 800b00a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b00e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b012:	bfd8      	it	le
 800b014:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800b018:	462b      	mov	r3, r5
 800b01a:	4602      	mov	r2, r0
 800b01c:	4659      	mov	r1, fp
 800b01e:	4630      	mov	r0, r6
 800b020:	f7f5 fb84 	bl	800072c <__aeabi_ddiv>
 800b024:	b003      	add	sp, #12
 800b026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b02c <_mprec_log10>:
 800b02c:	2817      	cmp	r0, #23
 800b02e:	b5d0      	push	{r4, r6, r7, lr}
 800b030:	4604      	mov	r4, r0
 800b032:	dc05      	bgt.n	800b040 <_mprec_log10+0x14>
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <_mprec_log10+0x2c>)
 800b036:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800b03a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b03e:	bdd0      	pop	{r4, r6, r7, pc}
 800b040:	2000      	movs	r0, #0
 800b042:	2600      	movs	r6, #0
 800b044:	4905      	ldr	r1, [pc, #20]	; (800b05c <_mprec_log10+0x30>)
 800b046:	4f06      	ldr	r7, [pc, #24]	; (800b060 <_mprec_log10+0x34>)
 800b048:	4632      	mov	r2, r6
 800b04a:	463b      	mov	r3, r7
 800b04c:	f7f5 fa44 	bl	80004d8 <__aeabi_dmul>
 800b050:	3c01      	subs	r4, #1
 800b052:	d1f9      	bne.n	800b048 <_mprec_log10+0x1c>
 800b054:	e7f3      	b.n	800b03e <_mprec_log10+0x12>
 800b056:	bf00      	nop
 800b058:	0800d088 	.word	0x0800d088
 800b05c:	3ff00000 	.word	0x3ff00000
 800b060:	40240000 	.word	0x40240000

0800b064 <__copybits>:
 800b064:	3901      	subs	r1, #1
 800b066:	b510      	push	{r4, lr}
 800b068:	1149      	asrs	r1, r1, #5
 800b06a:	6914      	ldr	r4, [r2, #16]
 800b06c:	3101      	adds	r1, #1
 800b06e:	f102 0314 	add.w	r3, r2, #20
 800b072:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b076:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	4602      	mov	r2, r0
 800b07e:	d303      	bcc.n	800b088 <__copybits+0x24>
 800b080:	2300      	movs	r3, #0
 800b082:	428a      	cmp	r2, r1
 800b084:	d305      	bcc.n	800b092 <__copybits+0x2e>
 800b086:	bd10      	pop	{r4, pc}
 800b088:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08c:	f840 2b04 	str.w	r2, [r0], #4
 800b090:	e7f3      	b.n	800b07a <__copybits+0x16>
 800b092:	f842 3b04 	str.w	r3, [r2], #4
 800b096:	e7f4      	b.n	800b082 <__copybits+0x1e>

0800b098 <__any_on>:
 800b098:	f100 0214 	add.w	r2, r0, #20
 800b09c:	6900      	ldr	r0, [r0, #16]
 800b09e:	114b      	asrs	r3, r1, #5
 800b0a0:	4298      	cmp	r0, r3
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	db11      	blt.n	800b0ca <__any_on+0x32>
 800b0a6:	dd0a      	ble.n	800b0be <__any_on+0x26>
 800b0a8:	f011 011f 	ands.w	r1, r1, #31
 800b0ac:	d007      	beq.n	800b0be <__any_on+0x26>
 800b0ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0b2:	fa24 f001 	lsr.w	r0, r4, r1
 800b0b6:	fa00 f101 	lsl.w	r1, r0, r1
 800b0ba:	428c      	cmp	r4, r1
 800b0bc:	d10b      	bne.n	800b0d6 <__any_on+0x3e>
 800b0be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d803      	bhi.n	800b0ce <__any_on+0x36>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	bd10      	pop	{r4, pc}
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	e7f7      	b.n	800b0be <__any_on+0x26>
 800b0ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0d2:	2900      	cmp	r1, #0
 800b0d4:	d0f5      	beq.n	800b0c2 <__any_on+0x2a>
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	e7f6      	b.n	800b0c8 <__any_on+0x30>

0800b0da <_calloc_r>:
 800b0da:	b538      	push	{r3, r4, r5, lr}
 800b0dc:	fb02 f401 	mul.w	r4, r2, r1
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	f000 f809 	bl	800b0f8 <_malloc_r>
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	b118      	cbz	r0, 800b0f2 <_calloc_r+0x18>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	f7fe f837 	bl	8009160 <memset>
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b0f8 <_malloc_r>:
 800b0f8:	b570      	push	{r4, r5, r6, lr}
 800b0fa:	1ccd      	adds	r5, r1, #3
 800b0fc:	f025 0503 	bic.w	r5, r5, #3
 800b100:	3508      	adds	r5, #8
 800b102:	2d0c      	cmp	r5, #12
 800b104:	bf38      	it	cc
 800b106:	250c      	movcc	r5, #12
 800b108:	2d00      	cmp	r5, #0
 800b10a:	4606      	mov	r6, r0
 800b10c:	db01      	blt.n	800b112 <_malloc_r+0x1a>
 800b10e:	42a9      	cmp	r1, r5
 800b110:	d903      	bls.n	800b11a <_malloc_r+0x22>
 800b112:	230c      	movs	r3, #12
 800b114:	6033      	str	r3, [r6, #0]
 800b116:	2000      	movs	r0, #0
 800b118:	bd70      	pop	{r4, r5, r6, pc}
 800b11a:	f001 f9e8 	bl	800c4ee <__malloc_lock>
 800b11e:	4a21      	ldr	r2, [pc, #132]	; (800b1a4 <_malloc_r+0xac>)
 800b120:	6814      	ldr	r4, [r2, #0]
 800b122:	4621      	mov	r1, r4
 800b124:	b991      	cbnz	r1, 800b14c <_malloc_r+0x54>
 800b126:	4c20      	ldr	r4, [pc, #128]	; (800b1a8 <_malloc_r+0xb0>)
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	b91b      	cbnz	r3, 800b134 <_malloc_r+0x3c>
 800b12c:	4630      	mov	r0, r6
 800b12e:	f000 fb3d 	bl	800b7ac <_sbrk_r>
 800b132:	6020      	str	r0, [r4, #0]
 800b134:	4629      	mov	r1, r5
 800b136:	4630      	mov	r0, r6
 800b138:	f000 fb38 	bl	800b7ac <_sbrk_r>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d124      	bne.n	800b18a <_malloc_r+0x92>
 800b140:	230c      	movs	r3, #12
 800b142:	4630      	mov	r0, r6
 800b144:	6033      	str	r3, [r6, #0]
 800b146:	f001 f9d3 	bl	800c4f0 <__malloc_unlock>
 800b14a:	e7e4      	b.n	800b116 <_malloc_r+0x1e>
 800b14c:	680b      	ldr	r3, [r1, #0]
 800b14e:	1b5b      	subs	r3, r3, r5
 800b150:	d418      	bmi.n	800b184 <_malloc_r+0x8c>
 800b152:	2b0b      	cmp	r3, #11
 800b154:	d90f      	bls.n	800b176 <_malloc_r+0x7e>
 800b156:	600b      	str	r3, [r1, #0]
 800b158:	18cc      	adds	r4, r1, r3
 800b15a:	50cd      	str	r5, [r1, r3]
 800b15c:	4630      	mov	r0, r6
 800b15e:	f001 f9c7 	bl	800c4f0 <__malloc_unlock>
 800b162:	f104 000b 	add.w	r0, r4, #11
 800b166:	1d23      	adds	r3, r4, #4
 800b168:	f020 0007 	bic.w	r0, r0, #7
 800b16c:	1ac3      	subs	r3, r0, r3
 800b16e:	d0d3      	beq.n	800b118 <_malloc_r+0x20>
 800b170:	425a      	negs	r2, r3
 800b172:	50e2      	str	r2, [r4, r3]
 800b174:	e7d0      	b.n	800b118 <_malloc_r+0x20>
 800b176:	684b      	ldr	r3, [r1, #4]
 800b178:	428c      	cmp	r4, r1
 800b17a:	bf16      	itet	ne
 800b17c:	6063      	strne	r3, [r4, #4]
 800b17e:	6013      	streq	r3, [r2, #0]
 800b180:	460c      	movne	r4, r1
 800b182:	e7eb      	b.n	800b15c <_malloc_r+0x64>
 800b184:	460c      	mov	r4, r1
 800b186:	6849      	ldr	r1, [r1, #4]
 800b188:	e7cc      	b.n	800b124 <_malloc_r+0x2c>
 800b18a:	1cc4      	adds	r4, r0, #3
 800b18c:	f024 0403 	bic.w	r4, r4, #3
 800b190:	42a0      	cmp	r0, r4
 800b192:	d005      	beq.n	800b1a0 <_malloc_r+0xa8>
 800b194:	1a21      	subs	r1, r4, r0
 800b196:	4630      	mov	r0, r6
 800b198:	f000 fb08 	bl	800b7ac <_sbrk_r>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d0cf      	beq.n	800b140 <_malloc_r+0x48>
 800b1a0:	6025      	str	r5, [r4, #0]
 800b1a2:	e7db      	b.n	800b15c <_malloc_r+0x64>
 800b1a4:	20000698 	.word	0x20000698
 800b1a8:	2000069c 	.word	0x2000069c

0800b1ac <_realloc_r>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	4607      	mov	r7, r0
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	460e      	mov	r6, r1
 800b1b4:	b921      	cbnz	r1, 800b1c0 <_realloc_r+0x14>
 800b1b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	f7ff bf9c 	b.w	800b0f8 <_malloc_r>
 800b1c0:	b922      	cbnz	r2, 800b1cc <_realloc_r+0x20>
 800b1c2:	f001 f997 	bl	800c4f4 <_free_r>
 800b1c6:	4625      	mov	r5, r4
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1cc:	f001 f9de 	bl	800c58c <_malloc_usable_size_r>
 800b1d0:	42a0      	cmp	r0, r4
 800b1d2:	d20f      	bcs.n	800b1f4 <_realloc_r+0x48>
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7ff ff8e 	bl	800b0f8 <_malloc_r>
 800b1dc:	4605      	mov	r5, r0
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0f2      	beq.n	800b1c8 <_realloc_r+0x1c>
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	f7ff fb58 	bl	800a89a <memcpy>
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	f001 f981 	bl	800c4f4 <_free_r>
 800b1f2:	e7e9      	b.n	800b1c8 <_realloc_r+0x1c>
 800b1f4:	4635      	mov	r5, r6
 800b1f6:	e7e7      	b.n	800b1c8 <_realloc_r+0x1c>

0800b1f8 <__ssputs_r>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	688e      	ldr	r6, [r1, #8]
 800b1fe:	4682      	mov	sl, r0
 800b200:	429e      	cmp	r6, r3
 800b202:	460c      	mov	r4, r1
 800b204:	4690      	mov	r8, r2
 800b206:	4699      	mov	r9, r3
 800b208:	d837      	bhi.n	800b27a <__ssputs_r+0x82>
 800b20a:	898a      	ldrh	r2, [r1, #12]
 800b20c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b210:	d031      	beq.n	800b276 <__ssputs_r+0x7e>
 800b212:	2302      	movs	r3, #2
 800b214:	6825      	ldr	r5, [r4, #0]
 800b216:	6909      	ldr	r1, [r1, #16]
 800b218:	1a6f      	subs	r7, r5, r1
 800b21a:	6965      	ldr	r5, [r4, #20]
 800b21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b220:	fb95 f5f3 	sdiv	r5, r5, r3
 800b224:	f109 0301 	add.w	r3, r9, #1
 800b228:	443b      	add	r3, r7
 800b22a:	429d      	cmp	r5, r3
 800b22c:	bf38      	it	cc
 800b22e:	461d      	movcc	r5, r3
 800b230:	0553      	lsls	r3, r2, #21
 800b232:	d530      	bpl.n	800b296 <__ssputs_r+0x9e>
 800b234:	4629      	mov	r1, r5
 800b236:	f7ff ff5f 	bl	800b0f8 <_malloc_r>
 800b23a:	4606      	mov	r6, r0
 800b23c:	b950      	cbnz	r0, 800b254 <__ssputs_r+0x5c>
 800b23e:	230c      	movs	r3, #12
 800b240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b244:	f8ca 3000 	str.w	r3, [sl]
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b254:	463a      	mov	r2, r7
 800b256:	6921      	ldr	r1, [r4, #16]
 800b258:	f7ff fb1f 	bl	800a89a <memcpy>
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	6126      	str	r6, [r4, #16]
 800b26a:	443e      	add	r6, r7
 800b26c:	6026      	str	r6, [r4, #0]
 800b26e:	464e      	mov	r6, r9
 800b270:	6165      	str	r5, [r4, #20]
 800b272:	1bed      	subs	r5, r5, r7
 800b274:	60a5      	str	r5, [r4, #8]
 800b276:	454e      	cmp	r6, r9
 800b278:	d900      	bls.n	800b27c <__ssputs_r+0x84>
 800b27a:	464e      	mov	r6, r9
 800b27c:	4632      	mov	r2, r6
 800b27e:	4641      	mov	r1, r8
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	f001 f91b 	bl	800c4bc <memmove>
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	2000      	movs	r0, #0
 800b28a:	1b9b      	subs	r3, r3, r6
 800b28c:	60a3      	str	r3, [r4, #8]
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	441e      	add	r6, r3
 800b292:	6026      	str	r6, [r4, #0]
 800b294:	e7dc      	b.n	800b250 <__ssputs_r+0x58>
 800b296:	462a      	mov	r2, r5
 800b298:	f7ff ff88 	bl	800b1ac <_realloc_r>
 800b29c:	4606      	mov	r6, r0
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d1e2      	bne.n	800b268 <__ssputs_r+0x70>
 800b2a2:	6921      	ldr	r1, [r4, #16]
 800b2a4:	4650      	mov	r0, sl
 800b2a6:	f001 f925 	bl	800c4f4 <_free_r>
 800b2aa:	e7c8      	b.n	800b23e <__ssputs_r+0x46>

0800b2ac <_svfiprintf_r>:
 800b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	461d      	mov	r5, r3
 800b2b2:	898b      	ldrh	r3, [r1, #12]
 800b2b4:	b09d      	sub	sp, #116	; 0x74
 800b2b6:	061f      	lsls	r7, r3, #24
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	4616      	mov	r6, r2
 800b2be:	d50f      	bpl.n	800b2e0 <_svfiprintf_r+0x34>
 800b2c0:	690b      	ldr	r3, [r1, #16]
 800b2c2:	b96b      	cbnz	r3, 800b2e0 <_svfiprintf_r+0x34>
 800b2c4:	2140      	movs	r1, #64	; 0x40
 800b2c6:	f7ff ff17 	bl	800b0f8 <_malloc_r>
 800b2ca:	6020      	str	r0, [r4, #0]
 800b2cc:	6120      	str	r0, [r4, #16]
 800b2ce:	b928      	cbnz	r0, 800b2dc <_svfiprintf_r+0x30>
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	f8c8 3000 	str.w	r3, [r8]
 800b2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2da:	e0c8      	b.n	800b46e <_svfiprintf_r+0x1c2>
 800b2dc:	2340      	movs	r3, #64	; 0x40
 800b2de:	6163      	str	r3, [r4, #20]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e4:	2320      	movs	r3, #32
 800b2e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ea:	2330      	movs	r3, #48	; 0x30
 800b2ec:	f04f 0b01 	mov.w	fp, #1
 800b2f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2f4:	9503      	str	r5, [sp, #12]
 800b2f6:	4637      	mov	r7, r6
 800b2f8:	463d      	mov	r5, r7
 800b2fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2fe:	b10b      	cbz	r3, 800b304 <_svfiprintf_r+0x58>
 800b300:	2b25      	cmp	r3, #37	; 0x25
 800b302:	d13e      	bne.n	800b382 <_svfiprintf_r+0xd6>
 800b304:	ebb7 0a06 	subs.w	sl, r7, r6
 800b308:	d00b      	beq.n	800b322 <_svfiprintf_r+0x76>
 800b30a:	4653      	mov	r3, sl
 800b30c:	4632      	mov	r2, r6
 800b30e:	4621      	mov	r1, r4
 800b310:	4640      	mov	r0, r8
 800b312:	f7ff ff71 	bl	800b1f8 <__ssputs_r>
 800b316:	3001      	adds	r0, #1
 800b318:	f000 80a4 	beq.w	800b464 <_svfiprintf_r+0x1b8>
 800b31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31e:	4453      	add	r3, sl
 800b320:	9309      	str	r3, [sp, #36]	; 0x24
 800b322:	783b      	ldrb	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 809d 	beq.w	800b464 <_svfiprintf_r+0x1b8>
 800b32a:	2300      	movs	r3, #0
 800b32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b334:	9304      	str	r3, [sp, #16]
 800b336:	9307      	str	r3, [sp, #28]
 800b338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b33c:	931a      	str	r3, [sp, #104]	; 0x68
 800b33e:	462f      	mov	r7, r5
 800b340:	2205      	movs	r2, #5
 800b342:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b346:	4850      	ldr	r0, [pc, #320]	; (800b488 <_svfiprintf_r+0x1dc>)
 800b348:	f001 f8aa 	bl	800c4a0 <memchr>
 800b34c:	9b04      	ldr	r3, [sp, #16]
 800b34e:	b9d0      	cbnz	r0, 800b386 <_svfiprintf_r+0xda>
 800b350:	06d9      	lsls	r1, r3, #27
 800b352:	bf44      	itt	mi
 800b354:	2220      	movmi	r2, #32
 800b356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b35a:	071a      	lsls	r2, r3, #28
 800b35c:	bf44      	itt	mi
 800b35e:	222b      	movmi	r2, #43	; 0x2b
 800b360:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b364:	782a      	ldrb	r2, [r5, #0]
 800b366:	2a2a      	cmp	r2, #42	; 0x2a
 800b368:	d015      	beq.n	800b396 <_svfiprintf_r+0xea>
 800b36a:	462f      	mov	r7, r5
 800b36c:	2000      	movs	r0, #0
 800b36e:	250a      	movs	r5, #10
 800b370:	9a07      	ldr	r2, [sp, #28]
 800b372:	4639      	mov	r1, r7
 800b374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b378:	3b30      	subs	r3, #48	; 0x30
 800b37a:	2b09      	cmp	r3, #9
 800b37c:	d94d      	bls.n	800b41a <_svfiprintf_r+0x16e>
 800b37e:	b1b8      	cbz	r0, 800b3b0 <_svfiprintf_r+0x104>
 800b380:	e00f      	b.n	800b3a2 <_svfiprintf_r+0xf6>
 800b382:	462f      	mov	r7, r5
 800b384:	e7b8      	b.n	800b2f8 <_svfiprintf_r+0x4c>
 800b386:	4a40      	ldr	r2, [pc, #256]	; (800b488 <_svfiprintf_r+0x1dc>)
 800b388:	463d      	mov	r5, r7
 800b38a:	1a80      	subs	r0, r0, r2
 800b38c:	fa0b f000 	lsl.w	r0, fp, r0
 800b390:	4318      	orrs	r0, r3
 800b392:	9004      	str	r0, [sp, #16]
 800b394:	e7d3      	b.n	800b33e <_svfiprintf_r+0x92>
 800b396:	9a03      	ldr	r2, [sp, #12]
 800b398:	1d11      	adds	r1, r2, #4
 800b39a:	6812      	ldr	r2, [r2, #0]
 800b39c:	9103      	str	r1, [sp, #12]
 800b39e:	2a00      	cmp	r2, #0
 800b3a0:	db01      	blt.n	800b3a6 <_svfiprintf_r+0xfa>
 800b3a2:	9207      	str	r2, [sp, #28]
 800b3a4:	e004      	b.n	800b3b0 <_svfiprintf_r+0x104>
 800b3a6:	4252      	negs	r2, r2
 800b3a8:	f043 0302 	orr.w	r3, r3, #2
 800b3ac:	9207      	str	r2, [sp, #28]
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	783b      	ldrb	r3, [r7, #0]
 800b3b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b3b4:	d10c      	bne.n	800b3d0 <_svfiprintf_r+0x124>
 800b3b6:	787b      	ldrb	r3, [r7, #1]
 800b3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ba:	d133      	bne.n	800b424 <_svfiprintf_r+0x178>
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	3702      	adds	r7, #2
 800b3c0:	1d1a      	adds	r2, r3, #4
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	9203      	str	r2, [sp, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfb8      	it	lt
 800b3ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3ce:	9305      	str	r3, [sp, #20]
 800b3d0:	4d2e      	ldr	r5, [pc, #184]	; (800b48c <_svfiprintf_r+0x1e0>)
 800b3d2:	2203      	movs	r2, #3
 800b3d4:	7839      	ldrb	r1, [r7, #0]
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f001 f862 	bl	800c4a0 <memchr>
 800b3dc:	b138      	cbz	r0, 800b3ee <_svfiprintf_r+0x142>
 800b3de:	2340      	movs	r3, #64	; 0x40
 800b3e0:	1b40      	subs	r0, r0, r5
 800b3e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	3701      	adds	r7, #1
 800b3ea:	4303      	orrs	r3, r0
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	7839      	ldrb	r1, [r7, #0]
 800b3f0:	2206      	movs	r2, #6
 800b3f2:	4827      	ldr	r0, [pc, #156]	; (800b490 <_svfiprintf_r+0x1e4>)
 800b3f4:	1c7e      	adds	r6, r7, #1
 800b3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3fa:	f001 f851 	bl	800c4a0 <memchr>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d038      	beq.n	800b474 <_svfiprintf_r+0x1c8>
 800b402:	4b24      	ldr	r3, [pc, #144]	; (800b494 <_svfiprintf_r+0x1e8>)
 800b404:	bb13      	cbnz	r3, 800b44c <_svfiprintf_r+0x1a0>
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	3307      	adds	r3, #7
 800b40a:	f023 0307 	bic.w	r3, r3, #7
 800b40e:	3308      	adds	r3, #8
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b414:	444b      	add	r3, r9
 800b416:	9309      	str	r3, [sp, #36]	; 0x24
 800b418:	e76d      	b.n	800b2f6 <_svfiprintf_r+0x4a>
 800b41a:	fb05 3202 	mla	r2, r5, r2, r3
 800b41e:	2001      	movs	r0, #1
 800b420:	460f      	mov	r7, r1
 800b422:	e7a6      	b.n	800b372 <_svfiprintf_r+0xc6>
 800b424:	2300      	movs	r3, #0
 800b426:	250a      	movs	r5, #10
 800b428:	4619      	mov	r1, r3
 800b42a:	3701      	adds	r7, #1
 800b42c:	9305      	str	r3, [sp, #20]
 800b42e:	4638      	mov	r0, r7
 800b430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b434:	3a30      	subs	r2, #48	; 0x30
 800b436:	2a09      	cmp	r2, #9
 800b438:	d903      	bls.n	800b442 <_svfiprintf_r+0x196>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0c8      	beq.n	800b3d0 <_svfiprintf_r+0x124>
 800b43e:	9105      	str	r1, [sp, #20]
 800b440:	e7c6      	b.n	800b3d0 <_svfiprintf_r+0x124>
 800b442:	fb05 2101 	mla	r1, r5, r1, r2
 800b446:	2301      	movs	r3, #1
 800b448:	4607      	mov	r7, r0
 800b44a:	e7f0      	b.n	800b42e <_svfiprintf_r+0x182>
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	4622      	mov	r2, r4
 800b452:	4b11      	ldr	r3, [pc, #68]	; (800b498 <_svfiprintf_r+0x1ec>)
 800b454:	a904      	add	r1, sp, #16
 800b456:	4640      	mov	r0, r8
 800b458:	f3af 8000 	nop.w
 800b45c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b460:	4681      	mov	r9, r0
 800b462:	d1d6      	bne.n	800b412 <_svfiprintf_r+0x166>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	065b      	lsls	r3, r3, #25
 800b468:	f53f af35 	bmi.w	800b2d6 <_svfiprintf_r+0x2a>
 800b46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b46e:	b01d      	add	sp, #116	; 0x74
 800b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	ab03      	add	r3, sp, #12
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	4622      	mov	r2, r4
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <_svfiprintf_r+0x1ec>)
 800b47c:	a904      	add	r1, sp, #16
 800b47e:	4640      	mov	r0, r8
 800b480:	f000 f882 	bl	800b588 <_printf_i>
 800b484:	e7ea      	b.n	800b45c <_svfiprintf_r+0x1b0>
 800b486:	bf00      	nop
 800b488:	0800d15c 	.word	0x0800d15c
 800b48c:	0800d162 	.word	0x0800d162
 800b490:	0800d166 	.word	0x0800d166
 800b494:	00000000 	.word	0x00000000
 800b498:	0800b1f9 	.word	0x0800b1f9

0800b49c <_printf_common>:
 800b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	4691      	mov	r9, r2
 800b4a2:	461f      	mov	r7, r3
 800b4a4:	688a      	ldr	r2, [r1, #8]
 800b4a6:	690b      	ldr	r3, [r1, #16]
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	bfb8      	it	lt
 800b4ae:	4613      	movlt	r3, r2
 800b4b0:	f8c9 3000 	str.w	r3, [r9]
 800b4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4be:	b112      	cbz	r2, 800b4c6 <_printf_common+0x2a>
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	f8c9 3000 	str.w	r3, [r9]
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	0699      	lsls	r1, r3, #26
 800b4ca:	bf42      	ittt	mi
 800b4cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b4d0:	3302      	addmi	r3, #2
 800b4d2:	f8c9 3000 	strmi.w	r3, [r9]
 800b4d6:	6825      	ldr	r5, [r4, #0]
 800b4d8:	f015 0506 	ands.w	r5, r5, #6
 800b4dc:	d107      	bne.n	800b4ee <_printf_common+0x52>
 800b4de:	f104 0a19 	add.w	sl, r4, #25
 800b4e2:	68e3      	ldr	r3, [r4, #12]
 800b4e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b4e8:	1a9b      	subs	r3, r3, r2
 800b4ea:	42ab      	cmp	r3, r5
 800b4ec:	dc29      	bgt.n	800b542 <_printf_common+0xa6>
 800b4ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b4f2:	6822      	ldr	r2, [r4, #0]
 800b4f4:	3300      	adds	r3, #0
 800b4f6:	bf18      	it	ne
 800b4f8:	2301      	movne	r3, #1
 800b4fa:	0692      	lsls	r2, r2, #26
 800b4fc:	d42e      	bmi.n	800b55c <_printf_common+0xc0>
 800b4fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b502:	4639      	mov	r1, r7
 800b504:	4630      	mov	r0, r6
 800b506:	47c0      	blx	r8
 800b508:	3001      	adds	r0, #1
 800b50a:	d021      	beq.n	800b550 <_printf_common+0xb4>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	68e5      	ldr	r5, [r4, #12]
 800b510:	f003 0306 	and.w	r3, r3, #6
 800b514:	2b04      	cmp	r3, #4
 800b516:	bf18      	it	ne
 800b518:	2500      	movne	r5, #0
 800b51a:	f8d9 2000 	ldr.w	r2, [r9]
 800b51e:	f04f 0900 	mov.w	r9, #0
 800b522:	bf08      	it	eq
 800b524:	1aad      	subeq	r5, r5, r2
 800b526:	68a3      	ldr	r3, [r4, #8]
 800b528:	6922      	ldr	r2, [r4, #16]
 800b52a:	bf08      	it	eq
 800b52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b530:	4293      	cmp	r3, r2
 800b532:	bfc4      	itt	gt
 800b534:	1a9b      	subgt	r3, r3, r2
 800b536:	18ed      	addgt	r5, r5, r3
 800b538:	341a      	adds	r4, #26
 800b53a:	454d      	cmp	r5, r9
 800b53c:	d11a      	bne.n	800b574 <_printf_common+0xd8>
 800b53e:	2000      	movs	r0, #0
 800b540:	e008      	b.n	800b554 <_printf_common+0xb8>
 800b542:	2301      	movs	r3, #1
 800b544:	4652      	mov	r2, sl
 800b546:	4639      	mov	r1, r7
 800b548:	4630      	mov	r0, r6
 800b54a:	47c0      	blx	r8
 800b54c:	3001      	adds	r0, #1
 800b54e:	d103      	bne.n	800b558 <_printf_common+0xbc>
 800b550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b558:	3501      	adds	r5, #1
 800b55a:	e7c2      	b.n	800b4e2 <_printf_common+0x46>
 800b55c:	2030      	movs	r0, #48	; 0x30
 800b55e:	18e1      	adds	r1, r4, r3
 800b560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b56a:	4422      	add	r2, r4
 800b56c:	3302      	adds	r3, #2
 800b56e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b572:	e7c4      	b.n	800b4fe <_printf_common+0x62>
 800b574:	2301      	movs	r3, #1
 800b576:	4622      	mov	r2, r4
 800b578:	4639      	mov	r1, r7
 800b57a:	4630      	mov	r0, r6
 800b57c:	47c0      	blx	r8
 800b57e:	3001      	adds	r0, #1
 800b580:	d0e6      	beq.n	800b550 <_printf_common+0xb4>
 800b582:	f109 0901 	add.w	r9, r9, #1
 800b586:	e7d8      	b.n	800b53a <_printf_common+0x9e>

0800b588 <_printf_i>:
 800b588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b58c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b590:	460c      	mov	r4, r1
 800b592:	7e09      	ldrb	r1, [r1, #24]
 800b594:	b085      	sub	sp, #20
 800b596:	296e      	cmp	r1, #110	; 0x6e
 800b598:	4617      	mov	r7, r2
 800b59a:	4606      	mov	r6, r0
 800b59c:	4698      	mov	r8, r3
 800b59e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a0:	f000 80b3 	beq.w	800b70a <_printf_i+0x182>
 800b5a4:	d822      	bhi.n	800b5ec <_printf_i+0x64>
 800b5a6:	2963      	cmp	r1, #99	; 0x63
 800b5a8:	d036      	beq.n	800b618 <_printf_i+0x90>
 800b5aa:	d80a      	bhi.n	800b5c2 <_printf_i+0x3a>
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	f000 80b9 	beq.w	800b724 <_printf_i+0x19c>
 800b5b2:	2958      	cmp	r1, #88	; 0x58
 800b5b4:	f000 8083 	beq.w	800b6be <_printf_i+0x136>
 800b5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b5c0:	e032      	b.n	800b628 <_printf_i+0xa0>
 800b5c2:	2964      	cmp	r1, #100	; 0x64
 800b5c4:	d001      	beq.n	800b5ca <_printf_i+0x42>
 800b5c6:	2969      	cmp	r1, #105	; 0x69
 800b5c8:	d1f6      	bne.n	800b5b8 <_printf_i+0x30>
 800b5ca:	6820      	ldr	r0, [r4, #0]
 800b5cc:	6813      	ldr	r3, [r2, #0]
 800b5ce:	0605      	lsls	r5, r0, #24
 800b5d0:	f103 0104 	add.w	r1, r3, #4
 800b5d4:	d52a      	bpl.n	800b62c <_printf_i+0xa4>
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6011      	str	r1, [r2, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	da03      	bge.n	800b5e6 <_printf_i+0x5e>
 800b5de:	222d      	movs	r2, #45	; 0x2d
 800b5e0:	425b      	negs	r3, r3
 800b5e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b5e6:	486f      	ldr	r0, [pc, #444]	; (800b7a4 <_printf_i+0x21c>)
 800b5e8:	220a      	movs	r2, #10
 800b5ea:	e039      	b.n	800b660 <_printf_i+0xd8>
 800b5ec:	2973      	cmp	r1, #115	; 0x73
 800b5ee:	f000 809d 	beq.w	800b72c <_printf_i+0x1a4>
 800b5f2:	d808      	bhi.n	800b606 <_printf_i+0x7e>
 800b5f4:	296f      	cmp	r1, #111	; 0x6f
 800b5f6:	d020      	beq.n	800b63a <_printf_i+0xb2>
 800b5f8:	2970      	cmp	r1, #112	; 0x70
 800b5fa:	d1dd      	bne.n	800b5b8 <_printf_i+0x30>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	f043 0320 	orr.w	r3, r3, #32
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	e003      	b.n	800b60e <_printf_i+0x86>
 800b606:	2975      	cmp	r1, #117	; 0x75
 800b608:	d017      	beq.n	800b63a <_printf_i+0xb2>
 800b60a:	2978      	cmp	r1, #120	; 0x78
 800b60c:	d1d4      	bne.n	800b5b8 <_printf_i+0x30>
 800b60e:	2378      	movs	r3, #120	; 0x78
 800b610:	4865      	ldr	r0, [pc, #404]	; (800b7a8 <_printf_i+0x220>)
 800b612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b616:	e055      	b.n	800b6c4 <_printf_i+0x13c>
 800b618:	6813      	ldr	r3, [r2, #0]
 800b61a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b61e:	1d19      	adds	r1, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6011      	str	r1, [r2, #0]
 800b624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b628:	2301      	movs	r3, #1
 800b62a:	e08c      	b.n	800b746 <_printf_i+0x1be>
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b632:	6011      	str	r1, [r2, #0]
 800b634:	bf18      	it	ne
 800b636:	b21b      	sxthne	r3, r3
 800b638:	e7cf      	b.n	800b5da <_printf_i+0x52>
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	6825      	ldr	r5, [r4, #0]
 800b63e:	1d18      	adds	r0, r3, #4
 800b640:	6010      	str	r0, [r2, #0]
 800b642:	0628      	lsls	r0, r5, #24
 800b644:	d501      	bpl.n	800b64a <_printf_i+0xc2>
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	e002      	b.n	800b650 <_printf_i+0xc8>
 800b64a:	0668      	lsls	r0, r5, #25
 800b64c:	d5fb      	bpl.n	800b646 <_printf_i+0xbe>
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	296f      	cmp	r1, #111	; 0x6f
 800b652:	bf14      	ite	ne
 800b654:	220a      	movne	r2, #10
 800b656:	2208      	moveq	r2, #8
 800b658:	4852      	ldr	r0, [pc, #328]	; (800b7a4 <_printf_i+0x21c>)
 800b65a:	2100      	movs	r1, #0
 800b65c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b660:	6865      	ldr	r5, [r4, #4]
 800b662:	2d00      	cmp	r5, #0
 800b664:	60a5      	str	r5, [r4, #8]
 800b666:	f2c0 8095 	blt.w	800b794 <_printf_i+0x20c>
 800b66a:	6821      	ldr	r1, [r4, #0]
 800b66c:	f021 0104 	bic.w	r1, r1, #4
 800b670:	6021      	str	r1, [r4, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d13d      	bne.n	800b6f2 <_printf_i+0x16a>
 800b676:	2d00      	cmp	r5, #0
 800b678:	f040 808e 	bne.w	800b798 <_printf_i+0x210>
 800b67c:	4665      	mov	r5, ip
 800b67e:	2a08      	cmp	r2, #8
 800b680:	d10b      	bne.n	800b69a <_printf_i+0x112>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	07db      	lsls	r3, r3, #31
 800b686:	d508      	bpl.n	800b69a <_printf_i+0x112>
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	6862      	ldr	r2, [r4, #4]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	bfde      	ittt	le
 800b690:	2330      	movle	r3, #48	; 0x30
 800b692:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b696:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b69a:	ebac 0305 	sub.w	r3, ip, r5
 800b69e:	6123      	str	r3, [r4, #16]
 800b6a0:	f8cd 8000 	str.w	r8, [sp]
 800b6a4:	463b      	mov	r3, r7
 800b6a6:	aa03      	add	r2, sp, #12
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff fef6 	bl	800b49c <_printf_common>
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d14d      	bne.n	800b750 <_printf_i+0x1c8>
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b8:	b005      	add	sp, #20
 800b6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6be:	4839      	ldr	r0, [pc, #228]	; (800b7a4 <_printf_i+0x21c>)
 800b6c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b6c4:	6813      	ldr	r3, [r2, #0]
 800b6c6:	6821      	ldr	r1, [r4, #0]
 800b6c8:	1d1d      	adds	r5, r3, #4
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6015      	str	r5, [r2, #0]
 800b6ce:	060a      	lsls	r2, r1, #24
 800b6d0:	d50b      	bpl.n	800b6ea <_printf_i+0x162>
 800b6d2:	07ca      	lsls	r2, r1, #31
 800b6d4:	bf44      	itt	mi
 800b6d6:	f041 0120 	orrmi.w	r1, r1, #32
 800b6da:	6021      	strmi	r1, [r4, #0]
 800b6dc:	b91b      	cbnz	r3, 800b6e6 <_printf_i+0x15e>
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	f022 0220 	bic.w	r2, r2, #32
 800b6e4:	6022      	str	r2, [r4, #0]
 800b6e6:	2210      	movs	r2, #16
 800b6e8:	e7b7      	b.n	800b65a <_printf_i+0xd2>
 800b6ea:	064d      	lsls	r5, r1, #25
 800b6ec:	bf48      	it	mi
 800b6ee:	b29b      	uxthmi	r3, r3
 800b6f0:	e7ef      	b.n	800b6d2 <_printf_i+0x14a>
 800b6f2:	4665      	mov	r5, ip
 800b6f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6f8:	fb02 3311 	mls	r3, r2, r1, r3
 800b6fc:	5cc3      	ldrb	r3, [r0, r3]
 800b6fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b702:	460b      	mov	r3, r1
 800b704:	2900      	cmp	r1, #0
 800b706:	d1f5      	bne.n	800b6f4 <_printf_i+0x16c>
 800b708:	e7b9      	b.n	800b67e <_printf_i+0xf6>
 800b70a:	6813      	ldr	r3, [r2, #0]
 800b70c:	6825      	ldr	r5, [r4, #0]
 800b70e:	1d18      	adds	r0, r3, #4
 800b710:	6961      	ldr	r1, [r4, #20]
 800b712:	6010      	str	r0, [r2, #0]
 800b714:	0628      	lsls	r0, r5, #24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	d501      	bpl.n	800b71e <_printf_i+0x196>
 800b71a:	6019      	str	r1, [r3, #0]
 800b71c:	e002      	b.n	800b724 <_printf_i+0x19c>
 800b71e:	066a      	lsls	r2, r5, #25
 800b720:	d5fb      	bpl.n	800b71a <_printf_i+0x192>
 800b722:	8019      	strh	r1, [r3, #0]
 800b724:	2300      	movs	r3, #0
 800b726:	4665      	mov	r5, ip
 800b728:	6123      	str	r3, [r4, #16]
 800b72a:	e7b9      	b.n	800b6a0 <_printf_i+0x118>
 800b72c:	6813      	ldr	r3, [r2, #0]
 800b72e:	1d19      	adds	r1, r3, #4
 800b730:	6011      	str	r1, [r2, #0]
 800b732:	681d      	ldr	r5, [r3, #0]
 800b734:	6862      	ldr	r2, [r4, #4]
 800b736:	2100      	movs	r1, #0
 800b738:	4628      	mov	r0, r5
 800b73a:	f000 feb1 	bl	800c4a0 <memchr>
 800b73e:	b108      	cbz	r0, 800b744 <_printf_i+0x1bc>
 800b740:	1b40      	subs	r0, r0, r5
 800b742:	6060      	str	r0, [r4, #4]
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	6123      	str	r3, [r4, #16]
 800b748:	2300      	movs	r3, #0
 800b74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b74e:	e7a7      	b.n	800b6a0 <_printf_i+0x118>
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	462a      	mov	r2, r5
 800b754:	4639      	mov	r1, r7
 800b756:	4630      	mov	r0, r6
 800b758:	47c0      	blx	r8
 800b75a:	3001      	adds	r0, #1
 800b75c:	d0aa      	beq.n	800b6b4 <_printf_i+0x12c>
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	079b      	lsls	r3, r3, #30
 800b762:	d413      	bmi.n	800b78c <_printf_i+0x204>
 800b764:	68e0      	ldr	r0, [r4, #12]
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	4298      	cmp	r0, r3
 800b76a:	bfb8      	it	lt
 800b76c:	4618      	movlt	r0, r3
 800b76e:	e7a3      	b.n	800b6b8 <_printf_i+0x130>
 800b770:	2301      	movs	r3, #1
 800b772:	464a      	mov	r2, r9
 800b774:	4639      	mov	r1, r7
 800b776:	4630      	mov	r0, r6
 800b778:	47c0      	blx	r8
 800b77a:	3001      	adds	r0, #1
 800b77c:	d09a      	beq.n	800b6b4 <_printf_i+0x12c>
 800b77e:	3501      	adds	r5, #1
 800b780:	68e3      	ldr	r3, [r4, #12]
 800b782:	9a03      	ldr	r2, [sp, #12]
 800b784:	1a9b      	subs	r3, r3, r2
 800b786:	42ab      	cmp	r3, r5
 800b788:	dcf2      	bgt.n	800b770 <_printf_i+0x1e8>
 800b78a:	e7eb      	b.n	800b764 <_printf_i+0x1dc>
 800b78c:	2500      	movs	r5, #0
 800b78e:	f104 0919 	add.w	r9, r4, #25
 800b792:	e7f5      	b.n	800b780 <_printf_i+0x1f8>
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1ac      	bne.n	800b6f2 <_printf_i+0x16a>
 800b798:	7803      	ldrb	r3, [r0, #0]
 800b79a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b79e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7a2:	e76c      	b.n	800b67e <_printf_i+0xf6>
 800b7a4:	0800d16d 	.word	0x0800d16d
 800b7a8:	0800d17e 	.word	0x0800d17e

0800b7ac <_sbrk_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	4c05      	ldr	r4, [pc, #20]	; (800b7c8 <_sbrk_r+0x1c>)
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	f7f9 f900 	bl	80049bc <_sbrk>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_sbrk_r+0x1a>
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_sbrk_r+0x1a>
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20000960 	.word	0x20000960

0800b7cc <strncmp>:
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	b16a      	cbz	r2, 800b7ec <strncmp+0x20>
 800b7d0:	3901      	subs	r1, #1
 800b7d2:	1884      	adds	r4, r0, r2
 800b7d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b7d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d103      	bne.n	800b7e8 <strncmp+0x1c>
 800b7e0:	42a0      	cmp	r0, r4
 800b7e2:	d001      	beq.n	800b7e8 <strncmp+0x1c>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1f5      	bne.n	800b7d4 <strncmp+0x8>
 800b7e8:	1a98      	subs	r0, r3, r2
 800b7ea:	bd10      	pop	{r4, pc}
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	e7fc      	b.n	800b7ea <strncmp+0x1e>

0800b7f0 <__ascii_wctomb>:
 800b7f0:	b149      	cbz	r1, 800b806 <__ascii_wctomb+0x16>
 800b7f2:	2aff      	cmp	r2, #255	; 0xff
 800b7f4:	bf8b      	itete	hi
 800b7f6:	238a      	movhi	r3, #138	; 0x8a
 800b7f8:	700a      	strbls	r2, [r1, #0]
 800b7fa:	6003      	strhi	r3, [r0, #0]
 800b7fc:	2001      	movls	r0, #1
 800b7fe:	bf88      	it	hi
 800b800:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b804:	4770      	bx	lr
 800b806:	4608      	mov	r0, r1
 800b808:	4770      	bx	lr

0800b80a <quorem>:
 800b80a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80e:	6903      	ldr	r3, [r0, #16]
 800b810:	690c      	ldr	r4, [r1, #16]
 800b812:	4680      	mov	r8, r0
 800b814:	42a3      	cmp	r3, r4
 800b816:	f2c0 8084 	blt.w	800b922 <quorem+0x118>
 800b81a:	3c01      	subs	r4, #1
 800b81c:	f101 0714 	add.w	r7, r1, #20
 800b820:	f100 0614 	add.w	r6, r0, #20
 800b824:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b828:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b82c:	3501      	adds	r5, #1
 800b82e:	fbb0 f5f5 	udiv	r5, r0, r5
 800b832:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b836:	eb06 030c 	add.w	r3, r6, ip
 800b83a:	eb07 090c 	add.w	r9, r7, ip
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	b39d      	cbz	r5, 800b8aa <quorem+0xa0>
 800b842:	f04f 0a00 	mov.w	sl, #0
 800b846:	4638      	mov	r0, r7
 800b848:	46b6      	mov	lr, r6
 800b84a:	46d3      	mov	fp, sl
 800b84c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b850:	b293      	uxth	r3, r2
 800b852:	fb05 a303 	mla	r3, r5, r3, sl
 800b856:	0c12      	lsrs	r2, r2, #16
 800b858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b85c:	fb05 a202 	mla	r2, r5, r2, sl
 800b860:	b29b      	uxth	r3, r3
 800b862:	ebab 0303 	sub.w	r3, fp, r3
 800b866:	f8de b000 	ldr.w	fp, [lr]
 800b86a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b86e:	fa1f fb8b 	uxth.w	fp, fp
 800b872:	445b      	add	r3, fp
 800b874:	fa1f fb82 	uxth.w	fp, r2
 800b878:	f8de 2000 	ldr.w	r2, [lr]
 800b87c:	4581      	cmp	r9, r0
 800b87e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b886:	b29b      	uxth	r3, r3
 800b888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b890:	f84e 3b04 	str.w	r3, [lr], #4
 800b894:	d2da      	bcs.n	800b84c <quorem+0x42>
 800b896:	f856 300c 	ldr.w	r3, [r6, ip]
 800b89a:	b933      	cbnz	r3, 800b8aa <quorem+0xa0>
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	3b04      	subs	r3, #4
 800b8a0:	429e      	cmp	r6, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	d331      	bcc.n	800b90a <quorem+0x100>
 800b8a6:	f8c8 4010 	str.w	r4, [r8, #16]
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f7ff fa52 	bl	800ad54 <__mcmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	db26      	blt.n	800b902 <quorem+0xf8>
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f04f 0c00 	mov.w	ip, #0
 800b8ba:	3501      	adds	r5, #1
 800b8bc:	f857 1b04 	ldr.w	r1, [r7], #4
 800b8c0:	f8d0 e000 	ldr.w	lr, [r0]
 800b8c4:	b28b      	uxth	r3, r1
 800b8c6:	ebac 0303 	sub.w	r3, ip, r3
 800b8ca:	fa1f f28e 	uxth.w	r2, lr
 800b8ce:	4413      	add	r3, r2
 800b8d0:	0c0a      	lsrs	r2, r1, #16
 800b8d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e0:	45b9      	cmp	r9, r7
 800b8e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8e6:	f840 3b04 	str.w	r3, [r0], #4
 800b8ea:	d2e7      	bcs.n	800b8bc <quorem+0xb2>
 800b8ec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b8f0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b8f4:	b92a      	cbnz	r2, 800b902 <quorem+0xf8>
 800b8f6:	3b04      	subs	r3, #4
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	d30b      	bcc.n	800b916 <quorem+0x10c>
 800b8fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800b902:	4628      	mov	r0, r5
 800b904:	b003      	add	sp, #12
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	3b04      	subs	r3, #4
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d1c9      	bne.n	800b8a6 <quorem+0x9c>
 800b912:	3c01      	subs	r4, #1
 800b914:	e7c4      	b.n	800b8a0 <quorem+0x96>
 800b916:	6812      	ldr	r2, [r2, #0]
 800b918:	3b04      	subs	r3, #4
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	d1ef      	bne.n	800b8fe <quorem+0xf4>
 800b91e:	3c01      	subs	r4, #1
 800b920:	e7ea      	b.n	800b8f8 <quorem+0xee>
 800b922:	2000      	movs	r0, #0
 800b924:	e7ee      	b.n	800b904 <quorem+0xfa>
	...

0800b928 <_dtoa_r>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	4616      	mov	r6, r2
 800b92e:	461f      	mov	r7, r3
 800b930:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b932:	b095      	sub	sp, #84	; 0x54
 800b934:	4604      	mov	r4, r0
 800b936:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800b93a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b93e:	b93d      	cbnz	r5, 800b950 <_dtoa_r+0x28>
 800b940:	2010      	movs	r0, #16
 800b942:	f000 fda5 	bl	800c490 <malloc>
 800b946:	6260      	str	r0, [r4, #36]	; 0x24
 800b948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b94c:	6005      	str	r5, [r0, #0]
 800b94e:	60c5      	str	r5, [r0, #12]
 800b950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b952:	6819      	ldr	r1, [r3, #0]
 800b954:	b151      	cbz	r1, 800b96c <_dtoa_r+0x44>
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	2301      	movs	r3, #1
 800b95a:	4093      	lsls	r3, r2
 800b95c:	604a      	str	r2, [r1, #4]
 800b95e:	608b      	str	r3, [r1, #8]
 800b960:	4620      	mov	r0, r4
 800b962:	f7fe ffd9 	bl	800a918 <_Bfree>
 800b966:	2200      	movs	r2, #0
 800b968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	1e3b      	subs	r3, r7, #0
 800b96e:	bfaf      	iteee	ge
 800b970:	2300      	movge	r3, #0
 800b972:	2201      	movlt	r2, #1
 800b974:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b978:	9303      	strlt	r3, [sp, #12]
 800b97a:	bfac      	ite	ge
 800b97c:	f8c8 3000 	strge.w	r3, [r8]
 800b980:	f8c8 2000 	strlt.w	r2, [r8]
 800b984:	4bae      	ldr	r3, [pc, #696]	; (800bc40 <_dtoa_r+0x318>)
 800b986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b98a:	ea33 0308 	bics.w	r3, r3, r8
 800b98e:	d11b      	bne.n	800b9c8 <_dtoa_r+0xa0>
 800b990:	f242 730f 	movw	r3, #9999	; 0x270f
 800b994:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b996:	6013      	str	r3, [r2, #0]
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	b923      	cbnz	r3, 800b9a6 <_dtoa_r+0x7e>
 800b99c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	f000 8545 	beq.w	800c430 <_dtoa_r+0xb08>
 800b9a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9a8:	b953      	cbnz	r3, 800b9c0 <_dtoa_r+0x98>
 800b9aa:	4ba6      	ldr	r3, [pc, #664]	; (800bc44 <_dtoa_r+0x31c>)
 800b9ac:	e021      	b.n	800b9f2 <_dtoa_r+0xca>
 800b9ae:	4ba6      	ldr	r3, [pc, #664]	; (800bc48 <_dtoa_r+0x320>)
 800b9b0:	9306      	str	r3, [sp, #24]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	9806      	ldr	r0, [sp, #24]
 800b9ba:	b015      	add	sp, #84	; 0x54
 800b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c0:	4ba0      	ldr	r3, [pc, #640]	; (800bc44 <_dtoa_r+0x31c>)
 800b9c2:	9306      	str	r3, [sp, #24]
 800b9c4:	3303      	adds	r3, #3
 800b9c6:	e7f5      	b.n	800b9b4 <_dtoa_r+0x8c>
 800b9c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 800b9d8:	4682      	mov	sl, r0
 800b9da:	b160      	cbz	r0, 800b9f6 <_dtoa_r+0xce>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 8520 	beq.w	800c42a <_dtoa_r+0xb02>
 800b9ea:	4b98      	ldr	r3, [pc, #608]	; (800bc4c <_dtoa_r+0x324>)
 800b9ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	9306      	str	r3, [sp, #24]
 800b9f4:	e7e0      	b.n	800b9b8 <_dtoa_r+0x90>
 800b9f6:	ab12      	add	r3, sp, #72	; 0x48
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	ab13      	add	r3, sp, #76	; 0x4c
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	4632      	mov	r2, r6
 800ba00:	463b      	mov	r3, r7
 800ba02:	4620      	mov	r0, r4
 800ba04:	f7ff fa94 	bl	800af30 <__d2b>
 800ba08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba0c:	4683      	mov	fp, r0
 800ba0e:	2d00      	cmp	r5, #0
 800ba10:	d07d      	beq.n	800bb0e <_dtoa_r+0x1e6>
 800ba12:	46b0      	mov	r8, r6
 800ba14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba18:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800ba1c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800ba20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba24:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4b89      	ldr	r3, [pc, #548]	; (800bc50 <_dtoa_r+0x328>)
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	4649      	mov	r1, r9
 800ba30:	f7f4 fb9a 	bl	8000168 <__aeabi_dsub>
 800ba34:	a37c      	add	r3, pc, #496	; (adr r3, 800bc28 <_dtoa_r+0x300>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fd4d 	bl	80004d8 <__aeabi_dmul>
 800ba3e:	a37c      	add	r3, pc, #496	; (adr r3, 800bc30 <_dtoa_r+0x308>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fb92 	bl	800016c <__adddf3>
 800ba48:	4606      	mov	r6, r0
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	460f      	mov	r7, r1
 800ba4e:	f7f4 fcd9 	bl	8000404 <__aeabi_i2d>
 800ba52:	a379      	add	r3, pc, #484	; (adr r3, 800bc38 <_dtoa_r+0x310>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	f7f4 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	4630      	mov	r0, r6
 800ba62:	4639      	mov	r1, r7
 800ba64:	f7f4 fb82 	bl	800016c <__adddf3>
 800ba68:	4606      	mov	r6, r0
 800ba6a:	460f      	mov	r7, r1
 800ba6c:	f7f4 ffce 	bl	8000a0c <__aeabi_d2iz>
 800ba70:	2200      	movs	r2, #0
 800ba72:	4682      	mov	sl, r0
 800ba74:	2300      	movs	r3, #0
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 ff9f 	bl	80009bc <__aeabi_dcmplt>
 800ba7e:	b148      	cbz	r0, 800ba94 <_dtoa_r+0x16c>
 800ba80:	4650      	mov	r0, sl
 800ba82:	f7f4 fcbf 	bl	8000404 <__aeabi_i2d>
 800ba86:	4632      	mov	r2, r6
 800ba88:	463b      	mov	r3, r7
 800ba8a:	f7f4 ff8d 	bl	80009a8 <__aeabi_dcmpeq>
 800ba8e:	b908      	cbnz	r0, 800ba94 <_dtoa_r+0x16c>
 800ba90:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba94:	f1ba 0f16 	cmp.w	sl, #22
 800ba98:	d85a      	bhi.n	800bb50 <_dtoa_r+0x228>
 800ba9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba9e:	496d      	ldr	r1, [pc, #436]	; (800bc54 <_dtoa_r+0x32c>)
 800baa0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800baa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa8:	f7f4 ffa6 	bl	80009f8 <__aeabi_dcmpgt>
 800baac:	2800      	cmp	r0, #0
 800baae:	d051      	beq.n	800bb54 <_dtoa_r+0x22c>
 800bab0:	2300      	movs	r3, #0
 800bab2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bab6:	930d      	str	r3, [sp, #52]	; 0x34
 800bab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800baba:	1b5d      	subs	r5, r3, r5
 800babc:	1e6b      	subs	r3, r5, #1
 800babe:	9307      	str	r3, [sp, #28]
 800bac0:	bf43      	ittte	mi
 800bac2:	2300      	movmi	r3, #0
 800bac4:	f1c5 0901 	rsbmi	r9, r5, #1
 800bac8:	9307      	strmi	r3, [sp, #28]
 800baca:	f04f 0900 	movpl.w	r9, #0
 800bace:	f1ba 0f00 	cmp.w	sl, #0
 800bad2:	db41      	blt.n	800bb58 <_dtoa_r+0x230>
 800bad4:	9b07      	ldr	r3, [sp, #28]
 800bad6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800bada:	4453      	add	r3, sl
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	2300      	movs	r3, #0
 800bae0:	9308      	str	r3, [sp, #32]
 800bae2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bae4:	2b09      	cmp	r3, #9
 800bae6:	f200 808f 	bhi.w	800bc08 <_dtoa_r+0x2e0>
 800baea:	2b05      	cmp	r3, #5
 800baec:	bfc4      	itt	gt
 800baee:	3b04      	subgt	r3, #4
 800baf0:	931e      	strgt	r3, [sp, #120]	; 0x78
 800baf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800baf4:	bfc8      	it	gt
 800baf6:	2500      	movgt	r5, #0
 800baf8:	f1a3 0302 	sub.w	r3, r3, #2
 800bafc:	bfd8      	it	le
 800bafe:	2501      	movle	r5, #1
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	f200 808d 	bhi.w	800bc20 <_dtoa_r+0x2f8>
 800bb06:	e8df f003 	tbb	[pc, r3]
 800bb0a:	7d7b      	.short	0x7d7b
 800bb0c:	6f2f      	.short	0x6f2f
 800bb0e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bb12:	441d      	add	r5, r3
 800bb14:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bb18:	2820      	cmp	r0, #32
 800bb1a:	dd13      	ble.n	800bb44 <_dtoa_r+0x21c>
 800bb1c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bb20:	9b02      	ldr	r3, [sp, #8]
 800bb22:	fa08 f800 	lsl.w	r8, r8, r0
 800bb26:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bb2a:	fa23 f000 	lsr.w	r0, r3, r0
 800bb2e:	ea48 0000 	orr.w	r0, r8, r0
 800bb32:	f7f4 fc57 	bl	80003e4 <__aeabi_ui2d>
 800bb36:	2301      	movs	r3, #1
 800bb38:	4680      	mov	r8, r0
 800bb3a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800bb3e:	3d01      	subs	r5, #1
 800bb40:	9310      	str	r3, [sp, #64]	; 0x40
 800bb42:	e771      	b.n	800ba28 <_dtoa_r+0x100>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	f1c0 0020 	rsb	r0, r0, #32
 800bb4a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb4e:	e7f0      	b.n	800bb32 <_dtoa_r+0x20a>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7b0      	b.n	800bab6 <_dtoa_r+0x18e>
 800bb54:	900d      	str	r0, [sp, #52]	; 0x34
 800bb56:	e7af      	b.n	800bab8 <_dtoa_r+0x190>
 800bb58:	f1ca 0300 	rsb	r3, sl, #0
 800bb5c:	9308      	str	r3, [sp, #32]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	eba9 090a 	sub.w	r9, r9, sl
 800bb64:	930c      	str	r3, [sp, #48]	; 0x30
 800bb66:	e7bc      	b.n	800bae2 <_dtoa_r+0x1ba>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	dd74      	ble.n	800bc5c <_dtoa_r+0x334>
 800bb72:	4698      	mov	r8, r3
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	2200      	movs	r2, #0
 800bb78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb7a:	6072      	str	r2, [r6, #4]
 800bb7c:	2204      	movs	r2, #4
 800bb7e:	f102 0014 	add.w	r0, r2, #20
 800bb82:	4298      	cmp	r0, r3
 800bb84:	6871      	ldr	r1, [r6, #4]
 800bb86:	d96e      	bls.n	800bc66 <_dtoa_r+0x33e>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f7fe fe91 	bl	800a8b0 <_Balloc>
 800bb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb90:	6030      	str	r0, [r6, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f1b8 0f0e 	cmp.w	r8, #14
 800bb98:	9306      	str	r3, [sp, #24]
 800bb9a:	f200 80ed 	bhi.w	800bd78 <_dtoa_r+0x450>
 800bb9e:	2d00      	cmp	r5, #0
 800bba0:	f000 80ea 	beq.w	800bd78 <_dtoa_r+0x450>
 800bba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bba8:	f1ba 0f00 	cmp.w	sl, #0
 800bbac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bbb0:	dd77      	ble.n	800bca2 <_dtoa_r+0x37a>
 800bbb2:	4a28      	ldr	r2, [pc, #160]	; (800bc54 <_dtoa_r+0x32c>)
 800bbb4:	f00a 030f 	and.w	r3, sl, #15
 800bbb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bbbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbc0:	06f0      	lsls	r0, r6, #27
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bbca:	d568      	bpl.n	800bc9e <_dtoa_r+0x376>
 800bbcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bbd0:	4b21      	ldr	r3, [pc, #132]	; (800bc58 <_dtoa_r+0x330>)
 800bbd2:	2503      	movs	r5, #3
 800bbd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbd8:	f7f4 fda8 	bl	800072c <__aeabi_ddiv>
 800bbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbe0:	f006 060f 	and.w	r6, r6, #15
 800bbe4:	4f1c      	ldr	r7, [pc, #112]	; (800bc58 <_dtoa_r+0x330>)
 800bbe6:	e04f      	b.n	800bc88 <_dtoa_r+0x360>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	9309      	str	r3, [sp, #36]	; 0x24
 800bbec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bbee:	4453      	add	r3, sl
 800bbf0:	f103 0801 	add.w	r8, r3, #1
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	4643      	mov	r3, r8
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	bfb8      	it	lt
 800bbfc:	2301      	movlt	r3, #1
 800bbfe:	e7ba      	b.n	800bb76 <_dtoa_r+0x24e>
 800bc00:	2300      	movs	r3, #0
 800bc02:	e7b2      	b.n	800bb6a <_dtoa_r+0x242>
 800bc04:	2300      	movs	r3, #0
 800bc06:	e7f0      	b.n	800bbea <_dtoa_r+0x2c2>
 800bc08:	2501      	movs	r5, #1
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9509      	str	r5, [sp, #36]	; 0x24
 800bc0e:	931e      	str	r3, [sp, #120]	; 0x78
 800bc10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc14:	2200      	movs	r2, #0
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	4698      	mov	r8, r3
 800bc1a:	2312      	movs	r3, #18
 800bc1c:	921f      	str	r2, [sp, #124]	; 0x7c
 800bc1e:	e7aa      	b.n	800bb76 <_dtoa_r+0x24e>
 800bc20:	2301      	movs	r3, #1
 800bc22:	9309      	str	r3, [sp, #36]	; 0x24
 800bc24:	e7f4      	b.n	800bc10 <_dtoa_r+0x2e8>
 800bc26:	bf00      	nop
 800bc28:	636f4361 	.word	0x636f4361
 800bc2c:	3fd287a7 	.word	0x3fd287a7
 800bc30:	8b60c8b3 	.word	0x8b60c8b3
 800bc34:	3fc68a28 	.word	0x3fc68a28
 800bc38:	509f79fb 	.word	0x509f79fb
 800bc3c:	3fd34413 	.word	0x3fd34413
 800bc40:	7ff00000 	.word	0x7ff00000
 800bc44:	0800d299 	.word	0x0800d299
 800bc48:	0800d290 	.word	0x0800d290
 800bc4c:	0800d29e 	.word	0x0800d29e
 800bc50:	3ff80000 	.word	0x3ff80000
 800bc54:	0800d088 	.word	0x0800d088
 800bc58:	0800d060 	.word	0x0800d060
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	4698      	mov	r8, r3
 800bc62:	461a      	mov	r2, r3
 800bc64:	e7da      	b.n	800bc1c <_dtoa_r+0x2f4>
 800bc66:	3101      	adds	r1, #1
 800bc68:	6071      	str	r1, [r6, #4]
 800bc6a:	0052      	lsls	r2, r2, #1
 800bc6c:	e787      	b.n	800bb7e <_dtoa_r+0x256>
 800bc6e:	07f1      	lsls	r1, r6, #31
 800bc70:	d508      	bpl.n	800bc84 <_dtoa_r+0x35c>
 800bc72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc7a:	f7f4 fc2d 	bl	80004d8 <__aeabi_dmul>
 800bc7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bc82:	3501      	adds	r5, #1
 800bc84:	1076      	asrs	r6, r6, #1
 800bc86:	3708      	adds	r7, #8
 800bc88:	2e00      	cmp	r6, #0
 800bc8a:	d1f0      	bne.n	800bc6e <_dtoa_r+0x346>
 800bc8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc94:	f7f4 fd4a 	bl	800072c <__aeabi_ddiv>
 800bc98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc9c:	e01b      	b.n	800bcd6 <_dtoa_r+0x3ae>
 800bc9e:	2502      	movs	r5, #2
 800bca0:	e7a0      	b.n	800bbe4 <_dtoa_r+0x2bc>
 800bca2:	f000 80a4 	beq.w	800bdee <_dtoa_r+0x4c6>
 800bca6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bcaa:	f1ca 0600 	rsb	r6, sl, #0
 800bcae:	4ba0      	ldr	r3, [pc, #640]	; (800bf30 <_dtoa_r+0x608>)
 800bcb0:	f006 020f 	and.w	r2, r6, #15
 800bcb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 fc0c 	bl	80004d8 <__aeabi_dmul>
 800bcc0:	2502      	movs	r5, #2
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc8:	4f9a      	ldr	r7, [pc, #616]	; (800bf34 <_dtoa_r+0x60c>)
 800bcca:	1136      	asrs	r6, r6, #4
 800bccc:	2e00      	cmp	r6, #0
 800bcce:	f040 8083 	bne.w	800bdd8 <_dtoa_r+0x4b0>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1e0      	bne.n	800bc98 <_dtoa_r+0x370>
 800bcd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 808a 	beq.w	800bdf2 <_dtoa_r+0x4ca>
 800bcde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bce2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bcea:	2200      	movs	r2, #0
 800bcec:	4b92      	ldr	r3, [pc, #584]	; (800bf38 <_dtoa_r+0x610>)
 800bcee:	f7f4 fe65 	bl	80009bc <__aeabi_dcmplt>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d07d      	beq.n	800bdf2 <_dtoa_r+0x4ca>
 800bcf6:	f1b8 0f00 	cmp.w	r8, #0
 800bcfa:	d07a      	beq.n	800bdf2 <_dtoa_r+0x4ca>
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	dd36      	ble.n	800bd70 <_dtoa_r+0x448>
 800bd02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd06:	2200      	movs	r2, #0
 800bd08:	4b8c      	ldr	r3, [pc, #560]	; (800bf3c <_dtoa_r+0x614>)
 800bd0a:	f7f4 fbe5 	bl	80004d8 <__aeabi_dmul>
 800bd0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd12:	9e04      	ldr	r6, [sp, #16]
 800bd14:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800bd18:	3501      	adds	r5, #1
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f7f4 fb72 	bl	8000404 <__aeabi_i2d>
 800bd20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd24:	f7f4 fbd8 	bl	80004d8 <__aeabi_dmul>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4b85      	ldr	r3, [pc, #532]	; (800bf40 <_dtoa_r+0x618>)
 800bd2c:	f7f4 fa1e 	bl	800016c <__adddf3>
 800bd30:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800bd34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd38:	950b      	str	r5, [sp, #44]	; 0x2c
 800bd3a:	2e00      	cmp	r6, #0
 800bd3c:	d15c      	bne.n	800bdf8 <_dtoa_r+0x4d0>
 800bd3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	4b7f      	ldr	r3, [pc, #508]	; (800bf44 <_dtoa_r+0x61c>)
 800bd46:	f7f4 fa0f 	bl	8000168 <__aeabi_dsub>
 800bd4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd52:	f7f4 fe51 	bl	80009f8 <__aeabi_dcmpgt>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f040 8281 	bne.w	800c25e <_dtoa_r+0x936>
 800bd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd62:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bd66:	f7f4 fe29 	bl	80009bc <__aeabi_dcmplt>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f040 8275 	bne.w	800c25a <_dtoa_r+0x932>
 800bd70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bd74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f2c0 814b 	blt.w	800c016 <_dtoa_r+0x6ee>
 800bd80:	f1ba 0f0e 	cmp.w	sl, #14
 800bd84:	f300 8147 	bgt.w	800c016 <_dtoa_r+0x6ee>
 800bd88:	4b69      	ldr	r3, [pc, #420]	; (800bf30 <_dtoa_r+0x608>)
 800bd8a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f280 80d7 	bge.w	800bf4c <_dtoa_r+0x624>
 800bd9e:	f1b8 0f00 	cmp.w	r8, #0
 800bda2:	f300 80d3 	bgt.w	800bf4c <_dtoa_r+0x624>
 800bda6:	f040 8257 	bne.w	800c258 <_dtoa_r+0x930>
 800bdaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4b64      	ldr	r3, [pc, #400]	; (800bf44 <_dtoa_r+0x61c>)
 800bdb2:	f7f4 fb91 	bl	80004d8 <__aeabi_dmul>
 800bdb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdba:	f7f4 fe13 	bl	80009e4 <__aeabi_dcmpge>
 800bdbe:	4646      	mov	r6, r8
 800bdc0:	4647      	mov	r7, r8
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	f040 822d 	bne.w	800c222 <_dtoa_r+0x8fa>
 800bdc8:	9b06      	ldr	r3, [sp, #24]
 800bdca:	9a06      	ldr	r2, [sp, #24]
 800bdcc:	1c5d      	adds	r5, r3, #1
 800bdce:	2331      	movs	r3, #49	; 0x31
 800bdd0:	f10a 0a01 	add.w	sl, sl, #1
 800bdd4:	7013      	strb	r3, [r2, #0]
 800bdd6:	e228      	b.n	800c22a <_dtoa_r+0x902>
 800bdd8:	07f2      	lsls	r2, r6, #31
 800bdda:	d505      	bpl.n	800bde8 <_dtoa_r+0x4c0>
 800bddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde0:	f7f4 fb7a 	bl	80004d8 <__aeabi_dmul>
 800bde4:	2301      	movs	r3, #1
 800bde6:	3501      	adds	r5, #1
 800bde8:	1076      	asrs	r6, r6, #1
 800bdea:	3708      	adds	r7, #8
 800bdec:	e76e      	b.n	800bccc <_dtoa_r+0x3a4>
 800bdee:	2502      	movs	r5, #2
 800bdf0:	e771      	b.n	800bcd6 <_dtoa_r+0x3ae>
 800bdf2:	4657      	mov	r7, sl
 800bdf4:	4646      	mov	r6, r8
 800bdf6:	e790      	b.n	800bd1a <_dtoa_r+0x3f2>
 800bdf8:	4b4d      	ldr	r3, [pc, #308]	; (800bf30 <_dtoa_r+0x608>)
 800bdfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdfe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800be02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be04:	2b00      	cmp	r3, #0
 800be06:	d048      	beq.n	800be9a <_dtoa_r+0x572>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	2000      	movs	r0, #0
 800be0e:	494e      	ldr	r1, [pc, #312]	; (800bf48 <_dtoa_r+0x620>)
 800be10:	f7f4 fc8c 	bl	800072c <__aeabi_ddiv>
 800be14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be18:	f7f4 f9a6 	bl	8000168 <__aeabi_dsub>
 800be1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800be20:	9d06      	ldr	r5, [sp, #24]
 800be22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be26:	f7f4 fdf1 	bl	8000a0c <__aeabi_d2iz>
 800be2a:	9011      	str	r0, [sp, #68]	; 0x44
 800be2c:	f7f4 faea 	bl	8000404 <__aeabi_i2d>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be38:	f7f4 f996 	bl	8000168 <__aeabi_dsub>
 800be3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be42:	3330      	adds	r3, #48	; 0x30
 800be44:	f805 3b01 	strb.w	r3, [r5], #1
 800be48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be4c:	f7f4 fdb6 	bl	80009bc <__aeabi_dcmplt>
 800be50:	2800      	cmp	r0, #0
 800be52:	d163      	bne.n	800bf1c <_dtoa_r+0x5f4>
 800be54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be58:	2000      	movs	r0, #0
 800be5a:	4937      	ldr	r1, [pc, #220]	; (800bf38 <_dtoa_r+0x610>)
 800be5c:	f7f4 f984 	bl	8000168 <__aeabi_dsub>
 800be60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be64:	f7f4 fdaa 	bl	80009bc <__aeabi_dcmplt>
 800be68:	2800      	cmp	r0, #0
 800be6a:	f040 80b5 	bne.w	800bfd8 <_dtoa_r+0x6b0>
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	1aeb      	subs	r3, r5, r3
 800be72:	429e      	cmp	r6, r3
 800be74:	f77f af7c 	ble.w	800bd70 <_dtoa_r+0x448>
 800be78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800be7c:	2200      	movs	r2, #0
 800be7e:	4b2f      	ldr	r3, [pc, #188]	; (800bf3c <_dtoa_r+0x614>)
 800be80:	f7f4 fb2a 	bl	80004d8 <__aeabi_dmul>
 800be84:	2200      	movs	r2, #0
 800be86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800be8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be8e:	4b2b      	ldr	r3, [pc, #172]	; (800bf3c <_dtoa_r+0x614>)
 800be90:	f7f4 fb22 	bl	80004d8 <__aeabi_dmul>
 800be94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be98:	e7c3      	b.n	800be22 <_dtoa_r+0x4fa>
 800be9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be9e:	f7f4 fb1b 	bl	80004d8 <__aeabi_dmul>
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bea8:	199d      	adds	r5, r3, r6
 800beaa:	461e      	mov	r6, r3
 800beac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb0:	f7f4 fdac 	bl	8000a0c <__aeabi_d2iz>
 800beb4:	9011      	str	r0, [sp, #68]	; 0x44
 800beb6:	f7f4 faa5 	bl	8000404 <__aeabi_i2d>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec2:	f7f4 f951 	bl	8000168 <__aeabi_dsub>
 800bec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800becc:	3330      	adds	r3, #48	; 0x30
 800bece:	f806 3b01 	strb.w	r3, [r6], #1
 800bed2:	42ae      	cmp	r6, r5
 800bed4:	f04f 0200 	mov.w	r2, #0
 800bed8:	d124      	bne.n	800bf24 <_dtoa_r+0x5fc>
 800beda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bede:	4b1a      	ldr	r3, [pc, #104]	; (800bf48 <_dtoa_r+0x620>)
 800bee0:	f7f4 f944 	bl	800016c <__adddf3>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beec:	f7f4 fd84 	bl	80009f8 <__aeabi_dcmpgt>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d171      	bne.n	800bfd8 <_dtoa_r+0x6b0>
 800bef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bef8:	2000      	movs	r0, #0
 800befa:	4913      	ldr	r1, [pc, #76]	; (800bf48 <_dtoa_r+0x620>)
 800befc:	f7f4 f934 	bl	8000168 <__aeabi_dsub>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf08:	f7f4 fd58 	bl	80009bc <__aeabi_dcmplt>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f43f af2f 	beq.w	800bd70 <_dtoa_r+0x448>
 800bf12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf16:	1e6a      	subs	r2, r5, #1
 800bf18:	2b30      	cmp	r3, #48	; 0x30
 800bf1a:	d001      	beq.n	800bf20 <_dtoa_r+0x5f8>
 800bf1c:	46ba      	mov	sl, r7
 800bf1e:	e04a      	b.n	800bfb6 <_dtoa_r+0x68e>
 800bf20:	4615      	mov	r5, r2
 800bf22:	e7f6      	b.n	800bf12 <_dtoa_r+0x5ea>
 800bf24:	4b05      	ldr	r3, [pc, #20]	; (800bf3c <_dtoa_r+0x614>)
 800bf26:	f7f4 fad7 	bl	80004d8 <__aeabi_dmul>
 800bf2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf2e:	e7bd      	b.n	800beac <_dtoa_r+0x584>
 800bf30:	0800d088 	.word	0x0800d088
 800bf34:	0800d060 	.word	0x0800d060
 800bf38:	3ff00000 	.word	0x3ff00000
 800bf3c:	40240000 	.word	0x40240000
 800bf40:	401c0000 	.word	0x401c0000
 800bf44:	40140000 	.word	0x40140000
 800bf48:	3fe00000 	.word	0x3fe00000
 800bf4c:	9d06      	ldr	r5, [sp, #24]
 800bf4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf56:	4630      	mov	r0, r6
 800bf58:	4639      	mov	r1, r7
 800bf5a:	f7f4 fbe7 	bl	800072c <__aeabi_ddiv>
 800bf5e:	f7f4 fd55 	bl	8000a0c <__aeabi_d2iz>
 800bf62:	4681      	mov	r9, r0
 800bf64:	f7f4 fa4e 	bl	8000404 <__aeabi_i2d>
 800bf68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf6c:	f7f4 fab4 	bl	80004d8 <__aeabi_dmul>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4630      	mov	r0, r6
 800bf76:	4639      	mov	r1, r7
 800bf78:	f7f4 f8f6 	bl	8000168 <__aeabi_dsub>
 800bf7c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800bf80:	f805 6b01 	strb.w	r6, [r5], #1
 800bf84:	9e06      	ldr	r6, [sp, #24]
 800bf86:	4602      	mov	r2, r0
 800bf88:	1bae      	subs	r6, r5, r6
 800bf8a:	45b0      	cmp	r8, r6
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	d135      	bne.n	800bffc <_dtoa_r+0x6d4>
 800bf90:	f7f4 f8ec 	bl	800016c <__adddf3>
 800bf94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	f7f4 fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 800bfa0:	b9c8      	cbnz	r0, 800bfd6 <_dtoa_r+0x6ae>
 800bfa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	f7f4 fcfd 	bl	80009a8 <__aeabi_dcmpeq>
 800bfae:	b110      	cbz	r0, 800bfb6 <_dtoa_r+0x68e>
 800bfb0:	f019 0f01 	tst.w	r9, #1
 800bfb4:	d10f      	bne.n	800bfd6 <_dtoa_r+0x6ae>
 800bfb6:	4659      	mov	r1, fp
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f7fe fcad 	bl	800a918 <_Bfree>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfc2:	702b      	strb	r3, [r5, #0]
 800bfc4:	f10a 0301 	add.w	r3, sl, #1
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f43f acf3 	beq.w	800b9b8 <_dtoa_r+0x90>
 800bfd2:	601d      	str	r5, [r3, #0]
 800bfd4:	e4f0      	b.n	800b9b8 <_dtoa_r+0x90>
 800bfd6:	4657      	mov	r7, sl
 800bfd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bfdc:	1e6b      	subs	r3, r5, #1
 800bfde:	2a39      	cmp	r2, #57	; 0x39
 800bfe0:	d106      	bne.n	800bff0 <_dtoa_r+0x6c8>
 800bfe2:	9a06      	ldr	r2, [sp, #24]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d107      	bne.n	800bff8 <_dtoa_r+0x6d0>
 800bfe8:	2330      	movs	r3, #48	; 0x30
 800bfea:	7013      	strb	r3, [r2, #0]
 800bfec:	4613      	mov	r3, r2
 800bfee:	3701      	adds	r7, #1
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	3201      	adds	r2, #1
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	e791      	b.n	800bf1c <_dtoa_r+0x5f4>
 800bff8:	461d      	mov	r5, r3
 800bffa:	e7ed      	b.n	800bfd8 <_dtoa_r+0x6b0>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b99      	ldr	r3, [pc, #612]	; (800c264 <_dtoa_r+0x93c>)
 800c000:	f7f4 fa6a 	bl	80004d8 <__aeabi_dmul>
 800c004:	2200      	movs	r2, #0
 800c006:	2300      	movs	r3, #0
 800c008:	4606      	mov	r6, r0
 800c00a:	460f      	mov	r7, r1
 800c00c:	f7f4 fccc 	bl	80009a8 <__aeabi_dcmpeq>
 800c010:	2800      	cmp	r0, #0
 800c012:	d09e      	beq.n	800bf52 <_dtoa_r+0x62a>
 800c014:	e7cf      	b.n	800bfb6 <_dtoa_r+0x68e>
 800c016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c018:	2a00      	cmp	r2, #0
 800c01a:	f000 8088 	beq.w	800c12e <_dtoa_r+0x806>
 800c01e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c020:	2a01      	cmp	r2, #1
 800c022:	dc6d      	bgt.n	800c100 <_dtoa_r+0x7d8>
 800c024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c026:	2a00      	cmp	r2, #0
 800c028:	d066      	beq.n	800c0f8 <_dtoa_r+0x7d0>
 800c02a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c02e:	464d      	mov	r5, r9
 800c030:	9e08      	ldr	r6, [sp, #32]
 800c032:	9a07      	ldr	r2, [sp, #28]
 800c034:	2101      	movs	r1, #1
 800c036:	441a      	add	r2, r3
 800c038:	4620      	mov	r0, r4
 800c03a:	4499      	add	r9, r3
 800c03c:	9207      	str	r2, [sp, #28]
 800c03e:	f7fe fd49 	bl	800aad4 <__i2b>
 800c042:	4607      	mov	r7, r0
 800c044:	2d00      	cmp	r5, #0
 800c046:	dd0b      	ble.n	800c060 <_dtoa_r+0x738>
 800c048:	9b07      	ldr	r3, [sp, #28]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd08      	ble.n	800c060 <_dtoa_r+0x738>
 800c04e:	42ab      	cmp	r3, r5
 800c050:	bfa8      	it	ge
 800c052:	462b      	movge	r3, r5
 800c054:	9a07      	ldr	r2, [sp, #28]
 800c056:	eba9 0903 	sub.w	r9, r9, r3
 800c05a:	1aed      	subs	r5, r5, r3
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	9307      	str	r3, [sp, #28]
 800c060:	9b08      	ldr	r3, [sp, #32]
 800c062:	b1eb      	cbz	r3, 800c0a0 <_dtoa_r+0x778>
 800c064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d065      	beq.n	800c136 <_dtoa_r+0x80e>
 800c06a:	b18e      	cbz	r6, 800c090 <_dtoa_r+0x768>
 800c06c:	4639      	mov	r1, r7
 800c06e:	4632      	mov	r2, r6
 800c070:	4620      	mov	r0, r4
 800c072:	f7fe fdcd 	bl	800ac10 <__pow5mult>
 800c076:	465a      	mov	r2, fp
 800c078:	4601      	mov	r1, r0
 800c07a:	4607      	mov	r7, r0
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7fe fd32 	bl	800aae6 <__multiply>
 800c082:	4659      	mov	r1, fp
 800c084:	900a      	str	r0, [sp, #40]	; 0x28
 800c086:	4620      	mov	r0, r4
 800c088:	f7fe fc46 	bl	800a918 <_Bfree>
 800c08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08e:	469b      	mov	fp, r3
 800c090:	9b08      	ldr	r3, [sp, #32]
 800c092:	1b9a      	subs	r2, r3, r6
 800c094:	d004      	beq.n	800c0a0 <_dtoa_r+0x778>
 800c096:	4659      	mov	r1, fp
 800c098:	4620      	mov	r0, r4
 800c09a:	f7fe fdb9 	bl	800ac10 <__pow5mult>
 800c09e:	4683      	mov	fp, r0
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f7fe fd16 	bl	800aad4 <__i2b>
 800c0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 81c6 	beq.w	800c43e <_dtoa_r+0xb16>
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7fe fdaa 	bl	800ac10 <__pow5mult>
 800c0bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c0be:	4606      	mov	r6, r0
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	dc3e      	bgt.n	800c142 <_dtoa_r+0x81a>
 800c0c4:	9b02      	ldr	r3, [sp, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d137      	bne.n	800c13a <_dtoa_r+0x812>
 800c0ca:	9b03      	ldr	r3, [sp, #12]
 800c0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d134      	bne.n	800c13e <_dtoa_r+0x816>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0da:	0d1b      	lsrs	r3, r3, #20
 800c0dc:	051b      	lsls	r3, r3, #20
 800c0de:	b12b      	cbz	r3, 800c0ec <_dtoa_r+0x7c4>
 800c0e0:	9b07      	ldr	r3, [sp, #28]
 800c0e2:	f109 0901 	add.w	r9, r9, #1
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	9307      	str	r3, [sp, #28]
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	9308      	str	r3, [sp, #32]
 800c0ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d128      	bne.n	800c146 <_dtoa_r+0x81e>
 800c0f4:	2001      	movs	r0, #1
 800c0f6:	e02e      	b.n	800c156 <_dtoa_r+0x82e>
 800c0f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0fe:	e796      	b.n	800c02e <_dtoa_r+0x706>
 800c100:	9b08      	ldr	r3, [sp, #32]
 800c102:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800c106:	42b3      	cmp	r3, r6
 800c108:	bfb7      	itett	lt
 800c10a:	9b08      	ldrlt	r3, [sp, #32]
 800c10c:	1b9e      	subge	r6, r3, r6
 800c10e:	1af2      	sublt	r2, r6, r3
 800c110:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800c112:	bfbf      	itttt	lt
 800c114:	9608      	strlt	r6, [sp, #32]
 800c116:	189b      	addlt	r3, r3, r2
 800c118:	930c      	strlt	r3, [sp, #48]	; 0x30
 800c11a:	2600      	movlt	r6, #0
 800c11c:	f1b8 0f00 	cmp.w	r8, #0
 800c120:	bfb9      	ittee	lt
 800c122:	eba9 0508 	sublt.w	r5, r9, r8
 800c126:	2300      	movlt	r3, #0
 800c128:	464d      	movge	r5, r9
 800c12a:	4643      	movge	r3, r8
 800c12c:	e781      	b.n	800c032 <_dtoa_r+0x70a>
 800c12e:	9e08      	ldr	r6, [sp, #32]
 800c130:	464d      	mov	r5, r9
 800c132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c134:	e786      	b.n	800c044 <_dtoa_r+0x71c>
 800c136:	9a08      	ldr	r2, [sp, #32]
 800c138:	e7ad      	b.n	800c096 <_dtoa_r+0x76e>
 800c13a:	2300      	movs	r3, #0
 800c13c:	e7d6      	b.n	800c0ec <_dtoa_r+0x7c4>
 800c13e:	9b02      	ldr	r3, [sp, #8]
 800c140:	e7d4      	b.n	800c0ec <_dtoa_r+0x7c4>
 800c142:	2300      	movs	r3, #0
 800c144:	9308      	str	r3, [sp, #32]
 800c146:	6933      	ldr	r3, [r6, #16]
 800c148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c14c:	6918      	ldr	r0, [r3, #16]
 800c14e:	f7fe fc73 	bl	800aa38 <__hi0bits>
 800c152:	f1c0 0020 	rsb	r0, r0, #32
 800c156:	9b07      	ldr	r3, [sp, #28]
 800c158:	4418      	add	r0, r3
 800c15a:	f010 001f 	ands.w	r0, r0, #31
 800c15e:	d047      	beq.n	800c1f0 <_dtoa_r+0x8c8>
 800c160:	f1c0 0320 	rsb	r3, r0, #32
 800c164:	2b04      	cmp	r3, #4
 800c166:	dd3b      	ble.n	800c1e0 <_dtoa_r+0x8b8>
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	f1c0 001c 	rsb	r0, r0, #28
 800c16e:	4481      	add	r9, r0
 800c170:	4405      	add	r5, r0
 800c172:	4403      	add	r3, r0
 800c174:	9307      	str	r3, [sp, #28]
 800c176:	f1b9 0f00 	cmp.w	r9, #0
 800c17a:	dd05      	ble.n	800c188 <_dtoa_r+0x860>
 800c17c:	4659      	mov	r1, fp
 800c17e:	464a      	mov	r2, r9
 800c180:	4620      	mov	r0, r4
 800c182:	f7fe fd93 	bl	800acac <__lshift>
 800c186:	4683      	mov	fp, r0
 800c188:	9b07      	ldr	r3, [sp, #28]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dd05      	ble.n	800c19a <_dtoa_r+0x872>
 800c18e:	4631      	mov	r1, r6
 800c190:	461a      	mov	r2, r3
 800c192:	4620      	mov	r0, r4
 800c194:	f7fe fd8a 	bl	800acac <__lshift>
 800c198:	4606      	mov	r6, r0
 800c19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c19c:	b353      	cbz	r3, 800c1f4 <_dtoa_r+0x8cc>
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4658      	mov	r0, fp
 800c1a2:	f7fe fdd7 	bl	800ad54 <__mcmp>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	da24      	bge.n	800c1f4 <_dtoa_r+0x8cc>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4659      	mov	r1, fp
 800c1ae:	220a      	movs	r2, #10
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7fe fbc8 	bl	800a946 <__multadd>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c1bc:	4683      	mov	fp, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 8144 	beq.w	800c44c <_dtoa_r+0xb24>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4639      	mov	r1, r7
 800c1c8:	220a      	movs	r2, #10
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f7fe fbbb 	bl	800a946 <__multadd>
 800c1d0:	9b04      	ldr	r3, [sp, #16]
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dc4d      	bgt.n	800c274 <_dtoa_r+0x94c>
 800c1d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	dd4a      	ble.n	800c274 <_dtoa_r+0x94c>
 800c1de:	e011      	b.n	800c204 <_dtoa_r+0x8dc>
 800c1e0:	d0c9      	beq.n	800c176 <_dtoa_r+0x84e>
 800c1e2:	9a07      	ldr	r2, [sp, #28]
 800c1e4:	331c      	adds	r3, #28
 800c1e6:	441a      	add	r2, r3
 800c1e8:	4499      	add	r9, r3
 800c1ea:	441d      	add	r5, r3
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	e7c1      	b.n	800c174 <_dtoa_r+0x84c>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	e7f6      	b.n	800c1e2 <_dtoa_r+0x8ba>
 800c1f4:	f1b8 0f00 	cmp.w	r8, #0
 800c1f8:	dc36      	bgt.n	800c268 <_dtoa_r+0x940>
 800c1fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	dd33      	ble.n	800c268 <_dtoa_r+0x940>
 800c200:	f8cd 8010 	str.w	r8, [sp, #16]
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	b963      	cbnz	r3, 800c222 <_dtoa_r+0x8fa>
 800c208:	4631      	mov	r1, r6
 800c20a:	2205      	movs	r2, #5
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7fe fb9a 	bl	800a946 <__multadd>
 800c212:	4601      	mov	r1, r0
 800c214:	4606      	mov	r6, r0
 800c216:	4658      	mov	r0, fp
 800c218:	f7fe fd9c 	bl	800ad54 <__mcmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	f73f add3 	bgt.w	800bdc8 <_dtoa_r+0x4a0>
 800c222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c224:	9d06      	ldr	r5, [sp, #24]
 800c226:	ea6f 0a03 	mvn.w	sl, r3
 800c22a:	f04f 0900 	mov.w	r9, #0
 800c22e:	4631      	mov	r1, r6
 800c230:	4620      	mov	r0, r4
 800c232:	f7fe fb71 	bl	800a918 <_Bfree>
 800c236:	2f00      	cmp	r7, #0
 800c238:	f43f aebd 	beq.w	800bfb6 <_dtoa_r+0x68e>
 800c23c:	f1b9 0f00 	cmp.w	r9, #0
 800c240:	d005      	beq.n	800c24e <_dtoa_r+0x926>
 800c242:	45b9      	cmp	r9, r7
 800c244:	d003      	beq.n	800c24e <_dtoa_r+0x926>
 800c246:	4649      	mov	r1, r9
 800c248:	4620      	mov	r0, r4
 800c24a:	f7fe fb65 	bl	800a918 <_Bfree>
 800c24e:	4639      	mov	r1, r7
 800c250:	4620      	mov	r0, r4
 800c252:	f7fe fb61 	bl	800a918 <_Bfree>
 800c256:	e6ae      	b.n	800bfb6 <_dtoa_r+0x68e>
 800c258:	2600      	movs	r6, #0
 800c25a:	4637      	mov	r7, r6
 800c25c:	e7e1      	b.n	800c222 <_dtoa_r+0x8fa>
 800c25e:	46ba      	mov	sl, r7
 800c260:	4637      	mov	r7, r6
 800c262:	e5b1      	b.n	800bdc8 <_dtoa_r+0x4a0>
 800c264:	40240000 	.word	0x40240000
 800c268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 80f3 	beq.w	800c45a <_dtoa_r+0xb32>
 800c274:	2d00      	cmp	r5, #0
 800c276:	dd05      	ble.n	800c284 <_dtoa_r+0x95c>
 800c278:	4639      	mov	r1, r7
 800c27a:	462a      	mov	r2, r5
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7fe fd15 	bl	800acac <__lshift>
 800c282:	4607      	mov	r7, r0
 800c284:	9b08      	ldr	r3, [sp, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d04c      	beq.n	800c324 <_dtoa_r+0x9fc>
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7fe fb0f 	bl	800a8b0 <_Balloc>
 800c292:	4605      	mov	r5, r0
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	f107 010c 	add.w	r1, r7, #12
 800c29a:	3202      	adds	r2, #2
 800c29c:	0092      	lsls	r2, r2, #2
 800c29e:	300c      	adds	r0, #12
 800c2a0:	f7fe fafb 	bl	800a89a <memcpy>
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7fe fcff 	bl	800acac <__lshift>
 800c2ae:	46b9      	mov	r9, r7
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	9b06      	ldr	r3, [sp, #24]
 800c2b4:	9307      	str	r3, [sp, #28]
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	9308      	str	r3, [sp, #32]
 800c2be:	4631      	mov	r1, r6
 800c2c0:	4658      	mov	r0, fp
 800c2c2:	f7ff faa2 	bl	800b80a <quorem>
 800c2c6:	4649      	mov	r1, r9
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f7fe fd40 	bl	800ad54 <__mcmp>
 800c2d4:	463a      	mov	r2, r7
 800c2d6:	9002      	str	r0, [sp, #8]
 800c2d8:	4631      	mov	r1, r6
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7fe fd54 	bl	800ad88 <__mdiff>
 800c2e0:	68c3      	ldr	r3, [r0, #12]
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	bb03      	cbnz	r3, 800c328 <_dtoa_r+0xa00>
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	9009      	str	r0, [sp, #36]	; 0x24
 800c2ea:	4658      	mov	r0, fp
 800c2ec:	f7fe fd32 	bl	800ad54 <__mcmp>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fa:	f7fe fb0d 	bl	800a918 <_Bfree>
 800c2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c300:	b9a3      	cbnz	r3, 800c32c <_dtoa_r+0xa04>
 800c302:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c304:	b992      	cbnz	r2, 800c32c <_dtoa_r+0xa04>
 800c306:	9a08      	ldr	r2, [sp, #32]
 800c308:	b982      	cbnz	r2, 800c32c <_dtoa_r+0xa04>
 800c30a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c30e:	d029      	beq.n	800c364 <_dtoa_r+0xa3c>
 800c310:	9b02      	ldr	r3, [sp, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	dd01      	ble.n	800c31a <_dtoa_r+0x9f2>
 800c316:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c31a:	9b07      	ldr	r3, [sp, #28]
 800c31c:	1c5d      	adds	r5, r3, #1
 800c31e:	f883 8000 	strb.w	r8, [r3]
 800c322:	e784      	b.n	800c22e <_dtoa_r+0x906>
 800c324:	4638      	mov	r0, r7
 800c326:	e7c2      	b.n	800c2ae <_dtoa_r+0x986>
 800c328:	2301      	movs	r3, #1
 800c32a:	e7e3      	b.n	800c2f4 <_dtoa_r+0x9cc>
 800c32c:	9a02      	ldr	r2, [sp, #8]
 800c32e:	2a00      	cmp	r2, #0
 800c330:	db04      	blt.n	800c33c <_dtoa_r+0xa14>
 800c332:	d123      	bne.n	800c37c <_dtoa_r+0xa54>
 800c334:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c336:	bb0a      	cbnz	r2, 800c37c <_dtoa_r+0xa54>
 800c338:	9a08      	ldr	r2, [sp, #32]
 800c33a:	b9fa      	cbnz	r2, 800c37c <_dtoa_r+0xa54>
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	ddec      	ble.n	800c31a <_dtoa_r+0x9f2>
 800c340:	4659      	mov	r1, fp
 800c342:	2201      	movs	r2, #1
 800c344:	4620      	mov	r0, r4
 800c346:	f7fe fcb1 	bl	800acac <__lshift>
 800c34a:	4631      	mov	r1, r6
 800c34c:	4683      	mov	fp, r0
 800c34e:	f7fe fd01 	bl	800ad54 <__mcmp>
 800c352:	2800      	cmp	r0, #0
 800c354:	dc03      	bgt.n	800c35e <_dtoa_r+0xa36>
 800c356:	d1e0      	bne.n	800c31a <_dtoa_r+0x9f2>
 800c358:	f018 0f01 	tst.w	r8, #1
 800c35c:	d0dd      	beq.n	800c31a <_dtoa_r+0x9f2>
 800c35e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c362:	d1d8      	bne.n	800c316 <_dtoa_r+0x9ee>
 800c364:	9b07      	ldr	r3, [sp, #28]
 800c366:	9a07      	ldr	r2, [sp, #28]
 800c368:	1c5d      	adds	r5, r3, #1
 800c36a:	2339      	movs	r3, #57	; 0x39
 800c36c:	7013      	strb	r3, [r2, #0]
 800c36e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c372:	1e6a      	subs	r2, r5, #1
 800c374:	2b39      	cmp	r3, #57	; 0x39
 800c376:	d04d      	beq.n	800c414 <_dtoa_r+0xaec>
 800c378:	3301      	adds	r3, #1
 800c37a:	e052      	b.n	800c422 <_dtoa_r+0xafa>
 800c37c:	9a07      	ldr	r2, [sp, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f102 0501 	add.w	r5, r2, #1
 800c384:	dd06      	ble.n	800c394 <_dtoa_r+0xa6c>
 800c386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c38a:	d0eb      	beq.n	800c364 <_dtoa_r+0xa3c>
 800c38c:	f108 0801 	add.w	r8, r8, #1
 800c390:	9b07      	ldr	r3, [sp, #28]
 800c392:	e7c4      	b.n	800c31e <_dtoa_r+0x9f6>
 800c394:	9b06      	ldr	r3, [sp, #24]
 800c396:	9a04      	ldr	r2, [sp, #16]
 800c398:	1aeb      	subs	r3, r5, r3
 800c39a:	4293      	cmp	r3, r2
 800c39c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c3a0:	d021      	beq.n	800c3e6 <_dtoa_r+0xabe>
 800c3a2:	4659      	mov	r1, fp
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	220a      	movs	r2, #10
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f7fe facc 	bl	800a946 <__multadd>
 800c3ae:	45b9      	cmp	r9, r7
 800c3b0:	4683      	mov	fp, r0
 800c3b2:	f04f 0300 	mov.w	r3, #0
 800c3b6:	f04f 020a 	mov.w	r2, #10
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4620      	mov	r0, r4
 800c3be:	d105      	bne.n	800c3cc <_dtoa_r+0xaa4>
 800c3c0:	f7fe fac1 	bl	800a946 <__multadd>
 800c3c4:	4681      	mov	r9, r0
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	9507      	str	r5, [sp, #28]
 800c3ca:	e778      	b.n	800c2be <_dtoa_r+0x996>
 800c3cc:	f7fe fabb 	bl	800a946 <__multadd>
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	220a      	movs	r2, #10
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f7fe fab4 	bl	800a946 <__multadd>
 800c3de:	4607      	mov	r7, r0
 800c3e0:	e7f2      	b.n	800c3c8 <_dtoa_r+0xaa0>
 800c3e2:	f04f 0900 	mov.w	r9, #0
 800c3e6:	4659      	mov	r1, fp
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7fe fc5e 	bl	800acac <__lshift>
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4683      	mov	fp, r0
 800c3f4:	f7fe fcae 	bl	800ad54 <__mcmp>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	dcb8      	bgt.n	800c36e <_dtoa_r+0xa46>
 800c3fc:	d102      	bne.n	800c404 <_dtoa_r+0xadc>
 800c3fe:	f018 0f01 	tst.w	r8, #1
 800c402:	d1b4      	bne.n	800c36e <_dtoa_r+0xa46>
 800c404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c408:	1e6a      	subs	r2, r5, #1
 800c40a:	2b30      	cmp	r3, #48	; 0x30
 800c40c:	f47f af0f 	bne.w	800c22e <_dtoa_r+0x906>
 800c410:	4615      	mov	r5, r2
 800c412:	e7f7      	b.n	800c404 <_dtoa_r+0xadc>
 800c414:	9b06      	ldr	r3, [sp, #24]
 800c416:	4293      	cmp	r3, r2
 800c418:	d105      	bne.n	800c426 <_dtoa_r+0xafe>
 800c41a:	2331      	movs	r3, #49	; 0x31
 800c41c:	9a06      	ldr	r2, [sp, #24]
 800c41e:	f10a 0a01 	add.w	sl, sl, #1
 800c422:	7013      	strb	r3, [r2, #0]
 800c424:	e703      	b.n	800c22e <_dtoa_r+0x906>
 800c426:	4615      	mov	r5, r2
 800c428:	e7a1      	b.n	800c36e <_dtoa_r+0xa46>
 800c42a:	4b17      	ldr	r3, [pc, #92]	; (800c488 <_dtoa_r+0xb60>)
 800c42c:	f7ff bae1 	b.w	800b9f2 <_dtoa_r+0xca>
 800c430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c432:	2b00      	cmp	r3, #0
 800c434:	f47f aabb 	bne.w	800b9ae <_dtoa_r+0x86>
 800c438:	4b14      	ldr	r3, [pc, #80]	; (800c48c <_dtoa_r+0xb64>)
 800c43a:	f7ff bada 	b.w	800b9f2 <_dtoa_r+0xca>
 800c43e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c440:	2b01      	cmp	r3, #1
 800c442:	f77f ae3f 	ble.w	800c0c4 <_dtoa_r+0x79c>
 800c446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c448:	9308      	str	r3, [sp, #32]
 800c44a:	e653      	b.n	800c0f4 <_dtoa_r+0x7cc>
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dc03      	bgt.n	800c45a <_dtoa_r+0xb32>
 800c452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c454:	2b02      	cmp	r3, #2
 800c456:	f73f aed5 	bgt.w	800c204 <_dtoa_r+0x8dc>
 800c45a:	9d06      	ldr	r5, [sp, #24]
 800c45c:	4631      	mov	r1, r6
 800c45e:	4658      	mov	r0, fp
 800c460:	f7ff f9d3 	bl	800b80a <quorem>
 800c464:	9b06      	ldr	r3, [sp, #24]
 800c466:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c46a:	f805 8b01 	strb.w	r8, [r5], #1
 800c46e:	9a04      	ldr	r2, [sp, #16]
 800c470:	1aeb      	subs	r3, r5, r3
 800c472:	429a      	cmp	r2, r3
 800c474:	ddb5      	ble.n	800c3e2 <_dtoa_r+0xaba>
 800c476:	4659      	mov	r1, fp
 800c478:	2300      	movs	r3, #0
 800c47a:	220a      	movs	r2, #10
 800c47c:	4620      	mov	r0, r4
 800c47e:	f7fe fa62 	bl	800a946 <__multadd>
 800c482:	4683      	mov	fp, r0
 800c484:	e7ea      	b.n	800c45c <_dtoa_r+0xb34>
 800c486:	bf00      	nop
 800c488:	0800d29d 	.word	0x0800d29d
 800c48c:	0800d290 	.word	0x0800d290

0800c490 <malloc>:
 800c490:	4b02      	ldr	r3, [pc, #8]	; (800c49c <malloc+0xc>)
 800c492:	4601      	mov	r1, r0
 800c494:	6818      	ldr	r0, [r3, #0]
 800c496:	f7fe be2f 	b.w	800b0f8 <_malloc_r>
 800c49a:	bf00      	nop
 800c49c:	2000004c 	.word	0x2000004c

0800c4a0 <memchr>:
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	b2c9      	uxtb	r1, r1
 800c4a4:	4402      	add	r2, r0
 800c4a6:	4290      	cmp	r0, r2
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	d101      	bne.n	800c4b0 <memchr+0x10>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e003      	b.n	800c4b8 <memchr+0x18>
 800c4b0:	781c      	ldrb	r4, [r3, #0]
 800c4b2:	3001      	adds	r0, #1
 800c4b4:	428c      	cmp	r4, r1
 800c4b6:	d1f6      	bne.n	800c4a6 <memchr+0x6>
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	bd10      	pop	{r4, pc}

0800c4bc <memmove>:
 800c4bc:	4288      	cmp	r0, r1
 800c4be:	b510      	push	{r4, lr}
 800c4c0:	eb01 0302 	add.w	r3, r1, r2
 800c4c4:	d807      	bhi.n	800c4d6 <memmove+0x1a>
 800c4c6:	1e42      	subs	r2, r0, #1
 800c4c8:	4299      	cmp	r1, r3
 800c4ca:	d00a      	beq.n	800c4e2 <memmove+0x26>
 800c4cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c4d4:	e7f8      	b.n	800c4c8 <memmove+0xc>
 800c4d6:	4283      	cmp	r3, r0
 800c4d8:	d9f5      	bls.n	800c4c6 <memmove+0xa>
 800c4da:	1881      	adds	r1, r0, r2
 800c4dc:	1ad2      	subs	r2, r2, r3
 800c4de:	42d3      	cmn	r3, r2
 800c4e0:	d100      	bne.n	800c4e4 <memmove+0x28>
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c4ec:	e7f7      	b.n	800c4de <memmove+0x22>

0800c4ee <__malloc_lock>:
 800c4ee:	4770      	bx	lr

0800c4f0 <__malloc_unlock>:
 800c4f0:	4770      	bx	lr
	...

0800c4f4 <_free_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4605      	mov	r5, r0
 800c4f8:	2900      	cmp	r1, #0
 800c4fa:	d043      	beq.n	800c584 <_free_r+0x90>
 800c4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c500:	1f0c      	subs	r4, r1, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	bfb8      	it	lt
 800c506:	18e4      	addlt	r4, r4, r3
 800c508:	f7ff fff1 	bl	800c4ee <__malloc_lock>
 800c50c:	4a1e      	ldr	r2, [pc, #120]	; (800c588 <_free_r+0x94>)
 800c50e:	6813      	ldr	r3, [r2, #0]
 800c510:	4610      	mov	r0, r2
 800c512:	b933      	cbnz	r3, 800c522 <_free_r+0x2e>
 800c514:	6063      	str	r3, [r4, #4]
 800c516:	6014      	str	r4, [r2, #0]
 800c518:	4628      	mov	r0, r5
 800c51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c51e:	f7ff bfe7 	b.w	800c4f0 <__malloc_unlock>
 800c522:	42a3      	cmp	r3, r4
 800c524:	d90b      	bls.n	800c53e <_free_r+0x4a>
 800c526:	6821      	ldr	r1, [r4, #0]
 800c528:	1862      	adds	r2, r4, r1
 800c52a:	4293      	cmp	r3, r2
 800c52c:	bf01      	itttt	eq
 800c52e:	681a      	ldreq	r2, [r3, #0]
 800c530:	685b      	ldreq	r3, [r3, #4]
 800c532:	1852      	addeq	r2, r2, r1
 800c534:	6022      	streq	r2, [r4, #0]
 800c536:	6063      	str	r3, [r4, #4]
 800c538:	6004      	str	r4, [r0, #0]
 800c53a:	e7ed      	b.n	800c518 <_free_r+0x24>
 800c53c:	4613      	mov	r3, r2
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	b10a      	cbz	r2, 800c546 <_free_r+0x52>
 800c542:	42a2      	cmp	r2, r4
 800c544:	d9fa      	bls.n	800c53c <_free_r+0x48>
 800c546:	6819      	ldr	r1, [r3, #0]
 800c548:	1858      	adds	r0, r3, r1
 800c54a:	42a0      	cmp	r0, r4
 800c54c:	d10b      	bne.n	800c566 <_free_r+0x72>
 800c54e:	6820      	ldr	r0, [r4, #0]
 800c550:	4401      	add	r1, r0
 800c552:	1858      	adds	r0, r3, r1
 800c554:	4282      	cmp	r2, r0
 800c556:	6019      	str	r1, [r3, #0]
 800c558:	d1de      	bne.n	800c518 <_free_r+0x24>
 800c55a:	6810      	ldr	r0, [r2, #0]
 800c55c:	6852      	ldr	r2, [r2, #4]
 800c55e:	4401      	add	r1, r0
 800c560:	6019      	str	r1, [r3, #0]
 800c562:	605a      	str	r2, [r3, #4]
 800c564:	e7d8      	b.n	800c518 <_free_r+0x24>
 800c566:	d902      	bls.n	800c56e <_free_r+0x7a>
 800c568:	230c      	movs	r3, #12
 800c56a:	602b      	str	r3, [r5, #0]
 800c56c:	e7d4      	b.n	800c518 <_free_r+0x24>
 800c56e:	6820      	ldr	r0, [r4, #0]
 800c570:	1821      	adds	r1, r4, r0
 800c572:	428a      	cmp	r2, r1
 800c574:	bf01      	itttt	eq
 800c576:	6811      	ldreq	r1, [r2, #0]
 800c578:	6852      	ldreq	r2, [r2, #4]
 800c57a:	1809      	addeq	r1, r1, r0
 800c57c:	6021      	streq	r1, [r4, #0]
 800c57e:	6062      	str	r2, [r4, #4]
 800c580:	605c      	str	r4, [r3, #4]
 800c582:	e7c9      	b.n	800c518 <_free_r+0x24>
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	bf00      	nop
 800c588:	20000698 	.word	0x20000698

0800c58c <_malloc_usable_size_r>:
 800c58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c590:	1f18      	subs	r0, r3, #4
 800c592:	2b00      	cmp	r3, #0
 800c594:	bfbc      	itt	lt
 800c596:	580b      	ldrlt	r3, [r1, r0]
 800c598:	18c0      	addlt	r0, r0, r3
 800c59a:	4770      	bx	lr

0800c59c <trunc>:
 800c59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c5a2:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800c5a6:	2a13      	cmp	r2, #19
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	dc10      	bgt.n	800c5d0 <trunc+0x34>
 800c5ae:	2a00      	cmp	r2, #0
 800c5b0:	bfb3      	iteet	lt
 800c5b2:	2000      	movlt	r0, #0
 800c5b4:	2000      	movge	r0, #0
 800c5b6:	4b10      	ldrge	r3, [pc, #64]	; (800c5f8 <trunc+0x5c>)
 800c5b8:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800c5bc:	bfa4      	itt	ge
 800c5be:	fa43 f202 	asrge.w	r2, r3, r2
 800c5c2:	ea24 0102 	bicge.w	r1, r4, r2
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d0:	2a33      	cmp	r2, #51	; 0x33
 800c5d2:	dd07      	ble.n	800c5e4 <trunc+0x48>
 800c5d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c5d8:	d1f7      	bne.n	800c5ca <trunc+0x2e>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	f7f3 fdc5 	bl	800016c <__adddf3>
 800c5e2:	e7f0      	b.n	800c5c6 <trunc+0x2a>
 800c5e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5e8:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800c5ec:	fa22 f505 	lsr.w	r5, r2, r5
 800c5f0:	ea20 0005 	bic.w	r0, r0, r5
 800c5f4:	e7e7      	b.n	800c5c6 <trunc+0x2a>
 800c5f6:	bf00      	nop
 800c5f8:	000fffff 	.word	0x000fffff

0800c5fc <_init>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	bf00      	nop
 800c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c602:	bc08      	pop	{r3}
 800c604:	469e      	mov	lr, r3
 800c606:	4770      	bx	lr

0800c608 <_fini>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	bf00      	nop
 800c60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60e:	bc08      	pop	{r3}
 800c610:	469e      	mov	lr, r3
 800c612:	4770      	bx	lr
