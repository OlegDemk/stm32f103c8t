
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d60  0800cec0  0800cec0  0001cec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc20  0800dc20  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc20  0800dc20  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc20  0800dc20  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc20  0800dc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc24  0800dc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800dc28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000238  0800de60  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b80  0800de60  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fba  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000309c  00000000  00000000  0003821b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ed1  00000000  00000000  0003d760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa2f  00000000  00000000  00041631  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000785a6  00000000  00000000  00051060  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa4  00000000  00000000  000c9684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cea4 	.word	0x0800cea4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	0800cea4 	.word	0x0800cea4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <nmea0183_checksum>:
	}
}
//--------------------------------------------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]

	for(j = 1; j < strlen(msg) - 4; j++)
 8001140:	2301      	movs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	e00a      	b.n	800115c <nmea0183_checksum+0x2c>
	{
		checksum = checksum^(unsigned)msg[j];
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4053      	eors	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
	for(j = 1; j < strlen(msg) - 4; j++)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7fe fff7 	bl	8000150 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	1f1a      	subs	r2, r3, #4
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8ec      	bhi.n	8001146 <nmea0183_checksum+0x16>
	}
	return checksum;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <parsing_GPGLL_line>:

//--------------------------------------------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b0a9      	sub	sp, #164	; 0xa4
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];										// Main buffer for GPGLL line
	int size = sizeof(nmeaSnt);
 8001180:	2331      	movs	r3, #49	; 0x31
 8001182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	memset(nmeaSnt, 0, size);
 8001186:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800118a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 fc27 	bl	80099e4 <memset>

	//Copy to  "*" from str_GPGLL in nmeaSnt
	int i=0;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011a2:	e010      	b.n	80011c6 <parsing_GPGLL_line+0x4e>
	{
		nmeaSnt[i]=str_GPGLL[i];    						// copy bytes from str_GPGLL in nmeaSnt
 80011a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	7819      	ldrb	r1, [r3, #0]
 80011ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 80011bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b2a      	cmp	r3, #42	; 0x2a
 80011d2:	d003      	beq.n	80011dc <parsing_GPGLL_line+0x64>
 80011d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011d8:	2b31      	cmp	r3, #49	; 0x31
 80011da:	dde3      	ble.n	80011a4 <parsing_GPGLL_line+0x2c>
	}
	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 80011dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011e0:	2100      	movs	r1, #0
 80011e2:	460a      	mov	r2, r1
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	460a      	mov	r2, r1
 80011e8:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"  (after '*' are checksum two numbers)
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 80011ea:	212a      	movs	r1, #42	; 0x2a
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f008 fc30 	bl	8009a52 <strchr>
 80011f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 80011f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fa:	3301      	adds	r3, #1
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	873b      	strh	r3, [r7, #56]	; 0x38
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001202:	2300      	movs	r3, #0
 8001204:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff8f 	bl	8001130 <nmea0183_checksum>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	char hex[3];
	sprintf(hex, "%x", intSum);
 8001218:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800121c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001220:	49b2      	ldr	r1, [pc, #712]	; (80014ec <parsing_GPGLL_line+0x374>)
 8001222:	4618      	mov	r0, r3
 8001224:	f008 fbe6 	bl	80099f4 <siprintf>

	if(strstr(smNmbr, hex) != NULL)                         // Check if checksum line equal checksum after '*'
 8001228:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800122c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f008 fc22 	bl	8009a7c <strstr>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8234 	beq.w	80016a8 <parsing_GPGLL_line+0x530>
	{
		// Parsing string
		int i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		int count = 0;                                      // Count of elements
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		while(nmeaSnt[i] != '\0')							// not and of line
 800124c:	e224      	b.n	8001698 <parsing_GPGLL_line+0x520>
		{
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
			{
				int g=0;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				char str[12]={0};
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
				i++;										// Count of chars in nmeaSnt[i] array
 8001260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001264:	3301      	adds	r3, #1
 8001266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				switch (count)
 800126a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800126e:	2b04      	cmp	r3, #4
 8001270:	f200 81ff 	bhi.w	8001672 <parsing_GPGLL_line+0x4fa>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <parsing_GPGLL_line+0x104>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	08001291 	.word	0x08001291
 8001280:	080013e1 	.word	0x080013e1
 8001284:	08001433 	.word	0x08001433
 8001288:	080015a1 	.word	0x080015a1
 800128c:	080015f3 	.word	0x080015f3
				{
					case 0:
						for(g=0; g<10; g++)
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001296:	e014      	b.n	80012c2 <parsing_GPGLL_line+0x14a>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 8001298:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800129c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a0:	4413      	add	r3, r2
 80012a2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80012a6:	4413      	add	r3, r2
 80012a8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80012ac:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	4413      	add	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 80012b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	dde6      	ble.n	8001298 <parsing_GPGLL_line+0x120>
						}
						GPS_data.lat[10] = '\0';
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	729a      	strb	r2, [r3, #10]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 80012d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d4:	220c      	movs	r2, #12
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 fb83 	bl	80099e4 <memset>
						sprintf(str,"%s", GPS_data.lat);
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	4983      	ldr	r1, [pc, #524]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fbc1 	bl	8009a6c <strcpy>
						strcpy(gps_lat, str);
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4880      	ldr	r0, [pc, #512]	; (80014f4 <parsing_GPGLL_line+0x37c>)
 80012f2:	f008 fbbb 	bl	8009a6c <strcpy>

						// Convert lat in coordinate for google mups
						// 1. Separate degrees from minutes
						float integer_part_lat = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	677b      	str	r3, [r7, #116]	; 0x74
						float fractional_part_lat = 0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	673b      	str	r3, [r7, #112]	; 0x70
						char integer_part_char_lat[3]={0};
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	2100      	movs	r1, #0
 8001308:	460a      	mov	r2, r1
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	460a      	mov	r2, r1
 800130e:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lat[9]={0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	721a      	strb	r2, [r3, #8]
						uint8_t k=0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

						for(k=0; k<=11; k++)
 8001322:	2300      	movs	r3, #0
 8001324:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001328:	e020      	b.n	800136c <parsing_GPGLL_line+0x1f4>
						{
							if(k<=1)
 800132a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800132e:	2b01      	cmp	r3, #1
 8001330:	d80b      	bhi.n	800134a <parsing_GPGLL_line+0x1d2>
							{
								integer_part_char_lat[k] = GPS_data.lat[k];        	  // Degrees
 8001332:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001336:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800133a:	496d      	ldr	r1, [pc, #436]	; (80014f0 <parsing_GPGLL_line+0x378>)
 800133c:	5c8a      	ldrb	r2, [r1, r2]
 800133e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001342:	440b      	add	r3, r1
 8001344:	f803 2c7c 	strb.w	r2, [r3, #-124]
 8001348:	e00b      	b.n	8001362 <parsing_GPGLL_line+0x1ea>
							}
							else
							{
								fractional_part_char_lat[k-2] = GPS_data.lat[k];      // Minutes
 800134a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800134e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001352:	3b02      	subs	r3, #2
 8001354:	4966      	ldr	r1, [pc, #408]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001356:	5c8a      	ldrb	r2, [r1, r2]
 8001358:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800135c:	440b      	add	r3, r1
 800135e:	f803 2c88 	strb.w	r2, [r3, #-136]
						for(k=0; k<=11; k++)
 8001362:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001366:	3301      	adds	r3, #1
 8001368:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800136c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001370:	2b0b      	cmp	r3, #11
 8001372:	d9da      	bls.n	800132a <parsing_GPGLL_line+0x1b2>
							}
						}

						// 2. Convert string in numbers
						integer_part_lat = atoi(integer_part_char_lat);          // save int part
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4618      	mov	r0, r3
 800137a:	f008 fae0 	bl	800993e <atoi>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fc95 	bl	8000cb0 <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	677b      	str	r3, [r7, #116]	; 0x74
						fractional_part_lat = atof(fractional_part_char_lat);	 // float part
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f008 fad2 	bl	8009938 <atof>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4618      	mov	r0, r3
 800139a:	4621      	mov	r1, r4
 800139c:	f7ff fb7e 	bl	8000a9c <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
 						// 3. Convert in degrees
						fractional_part_lat = (fractional_part_lat/60);
 80013a4:	4954      	ldr	r1, [pc, #336]	; (80014f8 <parsing_GPGLL_line+0x380>)
 80013a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013a8:	f7ff fd8a 	bl	8000ec0 <__aeabi_fdiv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	673b      	str	r3, [r7, #112]	; 0x70
						integer_part_lat = integer_part_lat + fractional_part_lat;
 80013b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80013b2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013b4:	f7ff fbc8 	bl	8000b48 <__addsf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
						// 4. Convert in string and save it in global variable
                        gcvt(integer_part_lat, 11, gps_latitude );
 80013bc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013be:	f7ff f833 	bl	8000428 <__aeabi_f2d>
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <parsing_GPGLL_line+0x384>)
 80013c4:	220b      	movs	r2, #11
 80013c6:	f008 fabf 	bl	8009948 <gcvt>
                        gps_latitude[9] = '\0';
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <parsing_GPGLL_line+0x384>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	725a      	strb	r2, [r3, #9]

						i = i+g;
 80013d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d8:	4413      	add	r3, r2
 80013da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80013de:	e148      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 1:
						for (g =0; g<1; g++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013e6:	e015      	b.n	8001414 <parsing_GPGLL_line+0x29c>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 80013e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013f0:	4413      	add	r3, r2
 80013f2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80013f6:	4413      	add	r3, r2
 80013f8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80013fc:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80013fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001402:	4413      	add	r3, r2
 8001404:	330b      	adds	r3, #11
 8001406:	460a      	mov	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 800140a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800140e:	3301      	adds	r3, #1
 8001410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001418:	2b00      	cmp	r3, #0
 800141a:	dde5      	ble.n	80013e8 <parsing_GPGLL_line+0x270>
						}
						GPS_data.lat_letter[2] = '\0';
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <parsing_GPGLL_line+0x378>)
 800141e:	2200      	movs	r2, #0
 8001420:	735a      	strb	r2, [r3, #13]
						i = i+g;
 8001422:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800142a:	4413      	add	r3, r2
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001430:	e11f      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 2:
						for(g=0; g<11; g++)
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001438:	e015      	b.n	8001466 <parsing_GPGLL_line+0x2ee>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 800143a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001442:	4413      	add	r3, r2
 8001444:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001448:	4413      	add	r3, r2
 800144a:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800144e:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001454:	4413      	add	r3, r2
 8001456:	330d      	adds	r3, #13
 8001458:	460a      	mov	r2, r1
 800145a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 800145c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800146a:	2b0a      	cmp	r3, #10
 800146c:	dde5      	ble.n	800143a <parsing_GPGLL_line+0x2c2>
						}
						GPS_data.lon[11] = '\0';
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001470:	2200      	movs	r2, #0
 8001472:	761a      	strb	r2, [r3, #24]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	220c      	movs	r2, #12
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fab1 	bl	80099e4 <memset>
						sprintf(str,"%s", GPS_data.lon);
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	491e      	ldr	r1, [pc, #120]	; (8001500 <parsing_GPGLL_line+0x388>)
 8001488:	4618      	mov	r0, r3
 800148a:	f008 faef 	bl	8009a6c <strcpy>
						strcpy(gps_lon, str);
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	4619      	mov	r1, r3
 8001494:	481b      	ldr	r0, [pc, #108]	; (8001504 <parsing_GPGLL_line+0x38c>)
 8001496:	f008 fae9 	bl	8009a6c <strcpy>

						// Convert lon in coordinate for google mups
						// // 1. Separate degrees from minutes
						float integer_part_lon = 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	67fb      	str	r3, [r7, #124]	; 0x7c
						float fractional_part_lon = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	67bb      	str	r3, [r7, #120]	; 0x78
						char integer_part_char_lon[3]={0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2100      	movs	r1, #0
 80014ac:	460a      	mov	r2, r1
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	460a      	mov	r2, r1
 80014b2:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lon[10]={0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	811a      	strh	r2, [r3, #8]

						for(k=0; k<=11; k++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80014c6:	e031      	b.n	800152c <parsing_GPGLL_line+0x3b4>
						{
							if(k<=2)
 80014c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d81b      	bhi.n	8001508 <parsing_GPGLL_line+0x390>
							{
								integer_part_char_lon[k] = GPS_data.lon[k];
 80014d0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80014d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80014da:	440a      	add	r2, r1
 80014dc:	7b52      	ldrb	r2, [r2, #13]
 80014de:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80014e2:	440b      	add	r3, r1
 80014e4:	f803 2c8c 	strb.w	r2, [r3, #-140]
 80014e8:	e01b      	b.n	8001522 <parsing_GPGLL_line+0x3aa>
 80014ea:	bf00      	nop
 80014ec:	0800cec0 	.word	0x0800cec0
 80014f0:	20000710 	.word	0x20000710
 80014f4:	200006ec 	.word	0x200006ec
 80014f8:	42700000 	.word	0x42700000
 80014fc:	200006dc 	.word	0x200006dc
 8001500:	2000071d 	.word	0x2000071d
 8001504:	200006fc 	.word	0x200006fc
							}
							else
							{
								fractional_part_char_lon[k-3] = GPS_data.lon[k];
 8001508:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800150c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001510:	3b03      	subs	r3, #3
 8001512:	4967      	ldr	r1, [pc, #412]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001514:	440a      	add	r2, r1
 8001516:	7b52      	ldrb	r2, [r2, #13]
 8001518:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800151c:	440b      	add	r3, r1
 800151e:	f803 2c98 	strb.w	r2, [r3, #-152]
						for(k=0; k<=11; k++)
 8001522:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001526:	3301      	adds	r3, #1
 8001528:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800152c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001530:	2b0b      	cmp	r3, #11
 8001532:	d9c9      	bls.n	80014c8 <parsing_GPGLL_line+0x350>
							}
						}

						// 2. Convert string in numbers
						integer_part_lon = atoi(integer_part_char_lon);          // save int part
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4618      	mov	r0, r3
 800153a:	f008 fa00 	bl	800993e <atoi>
 800153e:	4603      	mov	r3, r0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fbb5 	bl	8000cb0 <__aeabi_i2f>
 8001546:	4603      	mov	r3, r0
 8001548:	67fb      	str	r3, [r7, #124]	; 0x7c
						fractional_part_lon = atof(fractional_part_char_lon);	 // float part
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f008 f9f2 	bl	8009938 <atof>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4618      	mov	r0, r3
 800155a:	4621      	mov	r1, r4
 800155c:	f7ff fa9e 	bl	8000a9c <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	67bb      	str	r3, [r7, #120]	; 0x78
						// 3. Convert in degrees
						fractional_part_lon = (fractional_part_lon/60);
 8001564:	4953      	ldr	r1, [pc, #332]	; (80016b4 <parsing_GPGLL_line+0x53c>)
 8001566:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001568:	f7ff fcaa 	bl	8000ec0 <__aeabi_fdiv>
 800156c:	4603      	mov	r3, r0
 800156e:	67bb      	str	r3, [r7, #120]	; 0x78
						integer_part_lon = integer_part_lon + fractional_part_lon;
 8001570:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001572:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001574:	f7ff fae8 	bl	8000b48 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	67fb      	str	r3, [r7, #124]	; 0x7c
						// 4. Convert in string and save it in global variable
					    gcvt(integer_part_lon, 11, gps_lontitude );
 800157c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800157e:	f7fe ff53 	bl	8000428 <__aeabi_f2d>
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <parsing_GPGLL_line+0x540>)
 8001584:	220b      	movs	r2, #11
 8001586:	f008 f9df 	bl	8009948 <gcvt>
					    gps_lontitude[10] = '\0';
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <parsing_GPGLL_line+0x540>)
 800158c:	2200      	movs	r2, #0
 800158e:	729a      	strb	r2, [r3, #10]

						i = i+g;
 8001590:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001598:	4413      	add	r3, r2
 800159a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 800159e:	e068      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 3:
						for(g=0; g<1; g++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a6:	e015      	b.n	80015d4 <parsing_GPGLL_line+0x45c>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 80015a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b0:	4413      	add	r3, r2
 80015b2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <parsing_GPGLL_line+0x538>)
 80015be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c2:	4413      	add	r3, r2
 80015c4:	3319      	adds	r3, #25
 80015c6:	460a      	mov	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 80015ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ce:	3301      	adds	r3, #1
 80015d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dde5      	ble.n	80015a8 <parsing_GPGLL_line+0x430>
						}
						GPS_data.lon_letter[2] = '\0';
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <parsing_GPGLL_line+0x538>)
 80015de:	2200      	movs	r2, #0
 80015e0:	76da      	strb	r2, [r3, #27]
						i = i+g;
 80015e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ea:	4413      	add	r3, r2
 80015ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80015f0:	e03f      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 4:
						for(g=0; g<6; g++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015f8:	e015      	b.n	8001626 <parsing_GPGLL_line+0x4ae>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 80015fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001602:	4413      	add	r3, r2
 8001604:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001608:	4413      	add	r3, r2
 800160a:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800160e:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001614:	4413      	add	r3, r2
 8001616:	331b      	adds	r3, #27
 8001618:	460a      	mov	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 800161c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800162a:	2b05      	cmp	r3, #5
 800162c:	dde5      	ble.n	80015fa <parsing_GPGLL_line+0x482>
						}
						GPS_data.time[6] = '\0';
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 8001636:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800163a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163e:	4413      	add	r3, r2
 8001640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

						// Save time in global variable
						memset(str, 0 , sizeof(str));
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	220c      	movs	r2, #12
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f008 f9c9 	bl	80099e4 <memset>
						sprintf(str,"%s", GPS_data.time);
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	4919      	ldr	r1, [pc, #100]	; (80016bc <parsing_GPGLL_line+0x544>)
 8001658:	4618      	mov	r0, r3
 800165a:	f008 fa07 	bl	8009a6c <strcpy>
						strcpy(gps_time, str);
 800165e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001662:	4619      	mov	r1, r3
 8001664:	4816      	ldr	r0, [pc, #88]	; (80016c0 <parsing_GPGLL_line+0x548>)
 8001666:	f008 fa01 	bl	8009a6c <strcpy>

						GPGGA_data_is_ready = 1;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <parsing_GPGLL_line+0x54c>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

						break;
 8001670:	bf00      	nop
				}
				count++;
 8001672:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
 800167c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b2c      	cmp	r3, #44	; 0x2c
 800168a:	f43f ade0 	beq.w	800124e <parsing_GPGLL_line+0xd6>
			}
			i++;
 800168e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while(nmeaSnt[i] != '\0')							// not and of line
 8001698:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e9      	bne.n	800167c <parsing_GPGLL_line+0x504>
		}
	}
}
 80016a8:	bf00      	nop
 80016aa:	37a4      	adds	r7, #164	; 0xa4
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	20000710 	.word	0x20000710
 80016b4:	42700000 	.word	0x42700000
 80016b8:	20000738 	.word	0x20000738
 80016bc:	2000072b 	.word	0x2000072b
 80016c0:	20000708 	.word	0x20000708
 80016c4:	20000254 	.word	0x20000254

080016c8 <parsing_GPGGA_line>:
//--------------------------------------------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a2      	sub	sp, #136	; 0x88
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 80016d0:	2346      	movs	r3, #70	; 0x46
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
		memset(nmeaSnt, 0, size);
 80016d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 f981 	bl	80099e4 <memset>
		char number_of_satalits_str[4] = {0};
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24

		//Copy to  "*" from str_GPGGA in nmeaSnt
		int i=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016f2:	e010      	b.n	8001716 <parsing_GPGGA_line+0x4e>
		{
			nmeaSnt[i]=str_GPGGA[i];
 80016f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	7819      	ldrb	r1, [r3, #0]
 80016fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001706:	4413      	add	r3, r2
 8001708:	460a      	mov	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 800170c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001710:	3301      	adds	r3, #1
 8001712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b2a      	cmp	r3, #42	; 0x2a
 8001722:	d003      	beq.n	800172c <parsing_GPGGA_line+0x64>
 8001724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001728:	2b45      	cmp	r3, #69	; 0x45
 800172a:	dde3      	ble.n	80016f4 <parsing_GPGGA_line+0x2c>
		}

		// Check check sum
		char smNmbr[3]={0};     								// array for checksum
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2100      	movs	r1, #0
 8001732:	460a      	mov	r2, r1
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	460a      	mov	r2, r1
 8001738:	709a      	strb	r2, [r3, #2]
		char *rawSum;
		char not_used[12] = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001746:	212a      	movs	r1, #42	; 0x2a
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f008 f982 	bl	8009a52 <strchr>
 800174e:	6778      	str	r0, [r7, #116]	; 0x74
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001752:	3301      	adds	r3, #1
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	843b      	strh	r3, [r7, #32]
		smNmbr[2]='\0';											// Add and of line '\0' sing
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        // PROBLEM: Checksum !=
		char hex[3];
		memset(hex, 0 , sizeof(hex));
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2203      	movs	r2, #3
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f008 f93b 	bl	80099e4 <memset>
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 800176e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fcdc 	bl	8001130 <nmea0183_checksum>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		sprintf(hex, "%x", intSum);
 800177e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	49c4      	ldr	r1, [pc, #784]	; (8001a98 <parsing_GPGGA_line+0x3d0>)
 8001788:	4618      	mov	r0, r3
 800178a:	f008 f933 	bl	80099f4 <siprintf>

//		if(strstr(smNmbr, hex) != NULL)
//		{
			// Parsing string

			i = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int count = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(nmeaSnt[i] != '\0')
 800179a:	e170      	b.n	8001a7e <parsing_GPGGA_line+0x3b6>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 800179c:	2300      	movs	r3, #0
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
					i++;
 80017a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					switch (count)
 80017aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	f200 8152 	bhi.w	8001a58 <parsing_GPGGA_line+0x390>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <parsing_GPGGA_line+0xf4>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017d9 	.word	0x080017d9
 80017c0:	0800181b 	.word	0x0800181b
 80017c4:	0800185d 	.word	0x0800185d
 80017c8:	0800189f 	.word	0x0800189f
 80017cc:	080018e1 	.word	0x080018e1
 80017d0:	08001923 	.word	0x08001923
 80017d4:	08001965 	.word	0x08001965
					{
						case 0:                     // Time
							for(g=0; g<8; g++)
 80017d8:	2300      	movs	r3, #0
 80017da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017dc:	e011      	b.n	8001802 <parsing_GPGGA_line+0x13a>
							{
								not_used[g] = nmeaSnt[i+g];
 80017de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e4:	4413      	add	r3, r2
 80017e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017ea:	4413      	add	r3, r2
 80017ec:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80017f0:	f107 0214 	add.w	r2, r7, #20
 80017f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
							for(g=0; g<8; g++)
 80017fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017fe:	3301      	adds	r3, #1
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001804:	2b07      	cmp	r3, #7
 8001806:	ddea      	ble.n	80017de <parsing_GPGGA_line+0x116>
							}
							not_used[9] = '\0';
 8001808:	2300      	movs	r3, #0
 800180a:	777b      	strb	r3, [r7, #29]
							i = i+g;
 800180c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001812:	4413      	add	r3, r2
 8001814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001818:	e11e      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 1:   					// Lat
							for (g =0; g<10; g++)
 800181a:	2300      	movs	r3, #0
 800181c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800181e:	e011      	b.n	8001844 <parsing_GPGGA_line+0x17c>
							{
								not_used[g] = nmeaSnt[i+g];
 8001820:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001826:	4413      	add	r3, r2
 8001828:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800182c:	4413      	add	r3, r2
 800182e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
							for (g =0; g<10; g++)
 800183e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001840:	3301      	adds	r3, #1
 8001842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001846:	2b09      	cmp	r3, #9
 8001848:	ddea      	ble.n	8001820 <parsing_GPGGA_line+0x158>
							}
							not_used[10] = '\0';
 800184a:	2300      	movs	r3, #0
 800184c:	77bb      	strb	r3, [r7, #30]
							i = i+g;
 800184e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800185a:	e0fd      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 2:						// N
							for(g=0; g<1; g++)
 800185c:	2300      	movs	r3, #0
 800185e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001860:	e011      	b.n	8001886 <parsing_GPGGA_line+0x1be>
							{
								not_used[g] = nmeaSnt[i+g];
 8001862:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001868:	4413      	add	r3, r2
 800186a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800186e:	4413      	add	r3, r2
 8001870:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001874:	f107 0214 	add.w	r2, r7, #20
 8001878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800187a:	4413      	add	r3, r2
 800187c:	460a      	mov	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001882:	3301      	adds	r3, #1
 8001884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001888:	2b00      	cmp	r3, #0
 800188a:	ddea      	ble.n	8001862 <parsing_GPGGA_line+0x19a>
							}
							not_used[1] = '\0';
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001896:	4413      	add	r3, r2
 8001898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800189c:	e0dc      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 3:                     // Lat
							for(g=0; g<11; g++)
 800189e:	2300      	movs	r3, #0
 80018a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018a2:	e011      	b.n	80018c8 <parsing_GPGGA_line+0x200>
							{
								not_used[g] = nmeaSnt[i+g];
 80018a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018aa:	4413      	add	r3, r2
 80018ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018b0:	4413      	add	r3, r2
 80018b2:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018b6:	f107 0214 	add.w	r2, r7, #20
 80018ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018bc:	4413      	add	r3, r2
 80018be:	460a      	mov	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
							for(g=0; g<11; g++)
 80018c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018c4:	3301      	adds	r3, #1
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	ddea      	ble.n	80018a4 <parsing_GPGGA_line+0x1dc>
							}
							not_used[11] = '\0';
 80018ce:	2300      	movs	r3, #0
 80018d0:	77fb      	strb	r3, [r7, #31]
							i = i+g;
 80018d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 80018de:	e0bb      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 4:                      // E
							for(g=0; g<1; g++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018e4:	e011      	b.n	800190a <parsing_GPGGA_line+0x242>
							{
								not_used[g] = nmeaSnt[i+g];
 80018e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ec:	4413      	add	r3, r2
 80018ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f2:	4413      	add	r3, r2
 80018f4:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018f8:	f107 0214 	add.w	r2, r7, #20
 80018fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018fe:	4413      	add	r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001906:	3301      	adds	r3, #1
 8001908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800190a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800190c:	2b00      	cmp	r3, #0
 800190e:	ddea      	ble.n	80018e6 <parsing_GPGGA_line+0x21e>
							}
							not_used[1] = '\0';
 8001910:	2300      	movs	r3, #0
 8001912:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001914:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800191a:	4413      	add	r3, r2
 800191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001920:	e09a      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 5:                      // Fix Quality
							for(g=0; g<1; g++)
 8001922:	2300      	movs	r3, #0
 8001924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001926:	e011      	b.n	800194c <parsing_GPGGA_line+0x284>
							{
								not_used[g] = nmeaSnt[i+g];
 8001928:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800192c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800192e:	4413      	add	r3, r2
 8001930:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001934:	4413      	add	r3, r2
 8001936:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800193a:	f107 0214 	add.w	r2, r7, #20
 800193e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001948:	3301      	adds	r3, #1
 800194a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800194c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800194e:	2b00      	cmp	r3, #0
 8001950:	ddea      	ble.n	8001928 <parsing_GPGGA_line+0x260>
							}
							not_used[1] = '\0';
 8001952:	2300      	movs	r3, #0
 8001954:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001956:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800195a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800195c:	4413      	add	r3, r2
 800195e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001962:	e079      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 6:                      // Number of Satellites
							memset(number_of_satalits_str, 0 , sizeof(number_of_satalits_str));    // clean buffer
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	2204      	movs	r2, #4
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f008 f839 	bl	80099e4 <memset>

							for(g=0; g<2; g++)
 8001972:	2300      	movs	r3, #0
 8001974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001976:	e011      	b.n	800199c <parsing_GPGGA_line+0x2d4>
							{
								number_of_satalits_str[g] = nmeaSnt[i+g];
 8001978:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800197c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197e:	4413      	add	r3, r2
 8001980:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001984:	4413      	add	r3, r2
 8001986:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800198a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800198e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001990:	4413      	add	r3, r2
 8001992:	460a      	mov	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
							for(g=0; g<2; g++)
 8001996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001998:	3301      	adds	r3, #1
 800199a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800199c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	ddea      	ble.n	8001978 <parsing_GPGGA_line+0x2b0>
							}
							number_of_satalits_str[2] = '\0';
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							// Convert two digits string on number
							uint8_t dozens_number_of_satalits = (uint8_t)number_of_satalits_str[0] - 48;
 80019a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ac:	3b30      	subs	r3, #48	; 0x30
 80019ae:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							dozens_number_of_satalits = dozens_number_of_satalits *10;
 80019b2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80019b6:	461a      	mov	r2, r3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							uint8_t units_number_of_satalits = (uint8_t)number_of_satalits_str[1]  - 48;
 80019c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019c6:	3b30      	subs	r3, #48	; 0x30
 80019c8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
							uint8_t digit_number_of_satalites = dozens_number_of_satalits + units_number_of_satalits;
 80019cc:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80019d0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80019d4:	4413      	add	r3, r2
 80019d6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

							// Chesk if data id number
							if((digit_number_of_satalites >= 3 || digit_number_of_satalites <= 14))   // Check if data correct
 80019da:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d803      	bhi.n	80019ea <parsing_GPGGA_line+0x322>
 80019e2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019e6:	2b0e      	cmp	r3, #14
 80019e8:	d826      	bhi.n	8001a38 <parsing_GPGGA_line+0x370>
							{
								// Convert uint8_t in char
								char buff_char_number_of_satalites[3]={0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2100      	movs	r1, #0
 80019f0:	460a      	mov	r2, r1
 80019f2:	801a      	strh	r2, [r3, #0]
 80019f4:	460a      	mov	r2, r1
 80019f6:	709a      	strb	r2, [r3, #2]
								memset(buff_char_number_of_satalites, 0 ,sizeof(buff_char_number_of_satalites));
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2203      	movs	r2, #3
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 ffef 	bl	80099e4 <memset>
								buff_char_number_of_satalites[0] = (char)((dozens_number_of_satalits/10) + 48);
 8001a06:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <parsing_GPGGA_line+0x3d4>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3330      	adds	r3, #48	; 0x30
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	733b      	strb	r3, [r7, #12]
								buff_char_number_of_satalites[1] = (char)units_number_of_satalits + 48;
 8001a1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	737b      	strb	r3, [r7, #13]
								buff_char_number_of_satalites[2] = '\0';
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]

								// write in global variable
								strcpy(gps_number_of_satellites, buff_char_number_of_satalites);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <parsing_GPGGA_line+0x3d8>)
 8001a30:	f008 f81c 	bl	8009a6c <strcpy>
							{
 8001a34:	bf00      	nop
							{
								char error_message[] = "Er";
								strcpy(gps_number_of_satellites, error_message);
							}

							break;
 8001a36:	e00e      	b.n	8001a56 <parsing_GPGGA_line+0x38e>
								char error_message[] = "Er";
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <parsing_GPGGA_line+0x3dc>)
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	8019      	strh	r1, [r3, #0]
 8001a44:	3302      	adds	r3, #2
 8001a46:	0c12      	lsrs	r2, r2, #16
 8001a48:	701a      	strb	r2, [r3, #0]
								strcpy(gps_number_of_satellites, error_message);
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <parsing_GPGGA_line+0x3d8>)
 8001a52:	f008 f80b 	bl	8009a6c <strcpy>
							break;
 8001a56:	bf00      	nop
					}
					count++;
 8001a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(nmeaSnt[i] == ',')
 8001a62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001a70:	f43f ae94 	beq.w	800179c <parsing_GPGGA_line+0xd4>
				}
				i++;
 8001a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(nmeaSnt[i] != '\0')
 8001a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e9      	bne.n	8001a62 <parsing_GPGGA_line+0x39a>
			}
		//}
}
 8001a8e:	bf00      	nop
 8001a90:	3788      	adds	r7, #136	; 0x88
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800cec0 	.word	0x0800cec0
 8001a9c:	cccccccd 	.word	0xcccccccd
 8001aa0:	200006f8 	.word	0x200006f8
 8001aa4:	0800cec4 	.word	0x0800cec4

08001aa8 <parsing_GPVTG_line>:


//--------------------------------------------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b098      	sub	sp, #96	; 0x60
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001ab0:	2331      	movs	r3, #49	; 0x31
 8001ab2:	653b      	str	r3, [r7, #80]	; 0x50
	memset(nmeaSnt, 0, size);
 8001ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 ff91 	bl	80099e4 <memset>

	char str[6]={0};
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	809a      	strh	r2, [r3, #4]

	//Copy to  "*" from str_GPVTG in nmeaSnt
	int i=0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ad4:	e00c      	b.n	8001af0 <parsing_GPVTG_line+0x48>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 8001ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	f107 0218 	add.w	r2, r7, #24
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	3301      	adds	r3, #1
 8001aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b2a      	cmp	r3, #42	; 0x2a
 8001afa:	d002      	beq.n	8001b02 <parsing_GPVTG_line+0x5a>
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	2b31      	cmp	r3, #49	; 0x31
 8001b00:	dde9      	ble.n	8001ad6 <parsing_GPVTG_line+0x2e>
	}

	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2100      	movs	r1, #0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001b10:	212a      	movs	r1, #42	; 0x2a
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f007 ff9d 	bl	8009a52 <strchr>
 8001b18:	64f8      	str	r0, [r7, #76]	; 0x4c
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]

//	// PROBLEM: Checksum !=

	i = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int count = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t speed_data_readed = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(speed_data_readed == 1)
 8001b36:	e07d      	b.n	8001c34 <parsing_GPVTG_line+0x18c>
	{
		if(nmeaSnt[i] == ',')
 8001b38:	f107 0218 	add.w	r2, r7, #24
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b2c      	cmp	r3, #44	; 0x2c
 8001b44:	d102      	bne.n	8001b4c <parsing_GPVTG_line+0xa4>
		{
			count++;
 8001b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b48:	3301      	adds	r3, #1
 8001b4a:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if(count == 7)				// Find seven part (speed)
 8001b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d16d      	bne.n	8001c2e <parsing_GPVTG_line+0x186>
		{
			i++;
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	3301      	adds	r3, #1
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t k = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			char speed_test_variable[4]={0};    // for debug
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
			uint8_t error = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			do
			{
				//GPS_data.speed[k] = nmeaSnt[i+k];
				if(((nmeaSnt[i+k]-48) >= 0) && ((nmeaSnt[i+k]-48)  <= 9))   // Ok
 8001b68:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6e:	4413      	add	r3, r2
 8001b70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b74:	4413      	add	r3, r2
 8001b76:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001b7a:	3b30      	subs	r3, #48	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db1c      	blt.n	8001bba <parsing_GPVTG_line+0x112>
 8001b80:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b86:	4413      	add	r3, r2
 8001b88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001b92:	3b30      	subs	r3, #48	; 0x30
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	dc10      	bgt.n	8001bba <parsing_GPVTG_line+0x112>
				{
					speed_test_variable[k] = nmeaSnt[i+k];
 8001b98:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	441a      	add	r2, r3
 8001ba0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ba4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ba8:	440a      	add	r2, r1
 8001baa:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8001bae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001bb8:	e009      	b.n	8001bce <parsing_GPVTG_line+0x126>
				}
				else	// if error value. delete value.
				{
					// Error
					error = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
					memset(speed_test_variable, 0 ,sizeof(speed_test_variable));
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f007 ff0b 	bl	80099e4 <memset>
				}
				k++;
 8001bce:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			}while ((k < 3) && (nmeaSnt[i+k] != '.') && (error != 1));    // Problem where !!!!
 8001bd8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d80e      	bhi.n	8001bfe <parsing_GPVTG_line+0x156>
 8001be0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	4413      	add	r3, r2
 8001be8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bec:	4413      	add	r3, r2
 8001bee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf4:	d003      	beq.n	8001bfe <parsing_GPVTG_line+0x156>
 8001bf6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1b4      	bne.n	8001b68 <parsing_GPVTG_line+0xc0>


			// Save in global variable
			memset(str, 0 , sizeof(str));
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2206      	movs	r2, #6
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 feec 	bl	80099e4 <memset>
			//sprintf(str,"%s", GPS_data.speed);
			sprintf(str,"%s", speed_test_variable);
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f007 ff28 	bl	8009a6c <strcpy>
			strcpy(gps_speed, str);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <parsing_GPVTG_line+0x1a0>)
 8001c24:	f007 ff22 	bl	8009a6c <strcpy>

			speed_data_readed = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		i++;
 8001c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c30:	3301      	adds	r3, #1
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(speed_data_readed == 1)
 8001c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	f43f af7d 	beq.w	8001b38 <parsing_GPVTG_line+0x90>
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3760      	adds	r7, #96	; 0x60
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200006d4 	.word	0x200006d4

08001c4c <parsing_GPS>:
// Parsing only three lines from NMIA
// 1. From GPGLL - coordinates
// 2. From GPGGA - number of satellites
// 3. From GPVTG - speed
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	6018      	str	r0, [r3, #0]
 8001c58:	463b      	mov	r3, r7
 8001c5a:	6019      	str	r1, [r3, #0]
	char buffStr[512];										 // Main buffer in this function

	if(flag == 1)    										 // If data from GPS module in buffer
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <parsing_GPS+0xcc>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d153      	bne.n	8001d0c <parsing_GPS+0xc0>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 feb8 	bl	80099e4 <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	f107 020c 	add.w	r2, r7, #12
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f007 fef5 	bl	8009a6c <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL in buffStr
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4925      	ldr	r1, [pc, #148]	; (8001d1c <parsing_GPS+0xd0>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f007 fef7 	bl	8009a7c <strstr>
 8001c8e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 8001c92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <parsing_GPS+0x62>
		{
			parsing_GPGLL_line(str_GPGLL);
 8001c9a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001c9e:	f7ff fa6b 	bl	8001178 <parsing_GPGLL_line>
			receive_gps_signal++;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <parsing_GPS+0xd4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <parsing_GPS+0xd4>)
 8001cac:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPGGA in buffStr
		str_GPGGA = strstr(buffStr, "$GPGGA");    //$GPGGA,154423.00,4948.74034,N,02359.70944,E,1,05A,154422.00,4948.74052,N,02359.70973,E,1,05,3.71,351.1,M,34.8,M,,*53\r\n
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	491c      	ldr	r1, [pc, #112]	; (8001d24 <parsing_GPS+0xd8>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fee1 	bl	8009a7c <strstr>
 8001cba:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 8001cbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <parsing_GPS+0x8e>
		{
			parsing_GPGGA_line(str_GPGGA);
 8001cc6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8001cca:	f7ff fcfd 	bl	80016c8 <parsing_GPGGA_line>
			receive_gps_signal++;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <parsing_GPS+0xd4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <parsing_GPS+0xd4>)
 8001cd8:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPVTG in buffStr
		str_GPVTG = strstr(buffStr, "$GPVTG");    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4912      	ldr	r1, [pc, #72]	; (8001d28 <parsing_GPS+0xdc>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f007 fecb 	bl	8009a7c <strstr>
 8001ce6:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 8001cea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <parsing_GPS+0xba>
		{
			parsing_GPVTG_line(str_GPVTG);
 8001cf2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001cf6:	f7ff fed7 	bl	8001aa8 <parsing_GPVTG_line>
			receive_gps_signal++;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <parsing_GPS+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <parsing_GPS+0xd4>)
 8001d04:	701a      	strb	r2, [r3, #0]
		}

		flag = 0;			// Flag = 0 means: Data was readed
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <parsing_GPS+0xcc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002a4 	.word	0x200002a4
 8001d1c:	0800cec8 	.word	0x0800cec8
 8001d20:	20000258 	.word	0x20000258
 8001d24:	0800ced0 	.word	0x0800ced0
 8001d28:	0800ced8 	.word	0x0800ced8

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <DelayMicro>:

uint8_t GSM_INIT = 0;

// -------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <DelayMicro+0x34>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <DelayMicro+0x38>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0ddb      	lsrs	r3, r3, #23
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--);
 8001d80:	bf00      	nop
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1fa      	bne.n	8001d82 <DelayMicro+0x1e>
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000005c 	.word	0x2000005c
 8001d9c:	ee9bfab5 	.word	0xee9bfab5

08001da0 <init_GSM_uart_comunication>:

// -------------------------------------------------------------------
void init_GSM_uart_comunication(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
		// Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
		USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <init_GSM_uart_comunication+0x20>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <init_GSM_uart_comunication+0x20>)
 8001daa:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001dae:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ (USART1_IRQn);
 8001db0:	2025      	movs	r0, #37	; 0x25
 8001db2:	f7ff ffbb 	bl	8001d2c <__NVIC_EnableIRQ>
		HAL_Delay(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f003 fbd6 	bl	8005568 <HAL_Delay>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <init_gsm_module>:
// -------------------------------------------------------------------
int init_gsm_module(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
		// 1. Send command "AT" answer "OK"
		// 2. Send command "AT+CSQ" answer "+CSQ: 23,99" and "OK". 23,99 value can be from 0 to 31.
		// 3. Send command "AT+CCID" answer "89380062300517128558" and "OK"
		// 4. Send command "AT+CREG?" answer "+CREG: 1,1" and "OK"

	uint8_t answer_1 = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t answer_2 = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73bb      	strb	r3, [r7, #14]
	uint8_t answer_3 = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	737b      	strb	r3, [r7, #13]
	uint8_t answer_4 = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	733b      	strb	r3, [r7, #12]

	// Whaite only first time init
	static bool init_GSM = false;
	if (init_GSM == false)
 8001dda:	4b90      	ldr	r3, [pc, #576]	; (800201c <init_gsm_module+0x258>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <init_gsm_module+0x2c>
	{
		HAL_Delay(8000);     // Must be near 7-8 sec
 8001de8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001dec:	f003 fbbc 	bl	8005568 <HAL_Delay>
	}
	init_GSM = true;
 8001df0:	4b8a      	ldr	r3, [pc, #552]	; (800201c <init_gsm_module+0x258>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
	//

	//HAL_Delay(1000);     // Must be near 7-8 sec

	uint32_t id =0;               				 // Variable for timeout
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
	bool no_answer = false;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	ansver_flag =0;
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <init_gsm_module+0x25c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

	int timeout_counter = 10000;    //10000
 8001e04:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e08:	603b      	str	r3, [r7, #0]

	// 1. Send command " Turn off echo" ///////////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 10000);
 8001e0a:	4886      	ldr	r0, [pc, #536]	; (8002024 <init_gsm_module+0x260>)
 8001e0c:	f7fe f9a0 	bl	8000150 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e18:	4982      	ldr	r1, [pc, #520]	; (8002024 <init_gsm_module+0x260>)
 8001e1a:	4883      	ldr	r0, [pc, #524]	; (8002028 <init_gsm_module+0x264>)
 8001e1c:	f007 f876 	bl	8008f0c <HAL_UART_Transmit>

    // Waite for answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e20:	e020      	b.n	8001e64 <init_gsm_module+0xa0>
	{
		id++;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f7ff ff9b 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	; (8002020 <init_gsm_module+0x25c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d110      	bne.n	8001e58 <init_gsm_module+0x94>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8001e36:	497d      	ldr	r1, [pc, #500]	; (800202c <init_gsm_module+0x268>)
 8001e38:	487d      	ldr	r0, [pc, #500]	; (8002030 <init_gsm_module+0x26c>)
 8001e3a:	f007 fe1f 	bl	8009a7c <strstr>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <init_gsm_module+0x94>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001e44:	223c      	movs	r2, #60	; 0x3c
 8001e46:	2100      	movs	r1, #0
 8001e48:	4879      	ldr	r0, [pc, #484]	; (8002030 <init_gsm_module+0x26c>)
 8001e4a:	f007 fdcb 	bl	80099e4 <memset>
				answer_1 = 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
				ansver_flag = 1;
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <init_gsm_module+0x25c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d301      	bcc.n	8001e64 <init_gsm_module+0xa0>
		{
			no_answer = true;               // Out from waiting answer
 8001e60:	2301      	movs	r3, #1
 8001e62:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e64:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <init_gsm_module+0x25c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d009      	beq.n	8001e80 <init_gsm_module+0xbc>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d805      	bhi.n	8001e80 <init_gsm_module+0xbc>
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1d0      	bne.n	8001e22 <init_gsm_module+0x5e>
		}
	}

    HAL_Delay(DELAY);
 8001e80:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <init_gsm_module+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fb6f 	bl	8005568 <HAL_Delay>
    ////////////////////////////////////////////////////////////////

	// 2. Send command "signal reception quality" //////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 1000);
 8001e8a:	486b      	ldr	r0, [pc, #428]	; (8002038 <init_gsm_module+0x274>)
 8001e8c:	f7fe f960 	bl	8000150 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e98:	4967      	ldr	r1, [pc, #412]	; (8002038 <init_gsm_module+0x274>)
 8001e9a:	4863      	ldr	r0, [pc, #396]	; (8002028 <init_gsm_module+0x264>)
 8001e9c:	f007 f836 	bl	8008f0c <HAL_UART_Transmit>

	id = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001ea8:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <init_gsm_module+0x25c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001eae:	e020      	b.n	8001ef2 <init_gsm_module+0x12e>
	{
		id++;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001eb6:	2064      	movs	r0, #100	; 0x64
 8001eb8:	f7ff ff54 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <init_gsm_module+0x25c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d110      	bne.n	8001ee6 <init_gsm_module+0x122>
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
 8001ec4:	495d      	ldr	r1, [pc, #372]	; (800203c <init_gsm_module+0x278>)
 8001ec6:	485a      	ldr	r0, [pc, #360]	; (8002030 <init_gsm_module+0x26c>)
 8001ec8:	f007 fdd8 	bl	8009a7c <strstr>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <init_gsm_module+0x122>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001ed2:	223c      	movs	r2, #60	; 0x3c
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4856      	ldr	r0, [pc, #344]	; (8002030 <init_gsm_module+0x26c>)
 8001ed8:	f007 fd84 	bl	80099e4 <memset>
				answer_2 = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8001ee0:	4b4f      	ldr	r3, [pc, #316]	; (8002020 <init_gsm_module+0x25c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d301      	bcc.n	8001ef2 <init_gsm_module+0x12e>
		{
			no_answer = true;               // Out from waiting answer
 8001eee:	2301      	movs	r3, #1
 8001ef0:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <init_gsm_module+0x25c>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d009      	beq.n	8001f0e <init_gsm_module+0x14a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d805      	bhi.n	8001f0e <init_gsm_module+0x14a>
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1d0      	bne.n	8001eb0 <init_gsm_module+0xec>
		}
	}

	// Waite for answer "OK" after  "+CSQ"
	id = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001f16:	4b42      	ldr	r3, [pc, #264]	; (8002020 <init_gsm_module+0x25c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f1c:	e020      	b.n	8001f60 <init_gsm_module+0x19c>
	{
		id++;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f7ff ff1d 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <init_gsm_module+0x25c>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d110      	bne.n	8001f54 <init_gsm_module+0x190>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8001f32:	493e      	ldr	r1, [pc, #248]	; (800202c <init_gsm_module+0x268>)
 8001f34:	483e      	ldr	r0, [pc, #248]	; (8002030 <init_gsm_module+0x26c>)
 8001f36:	f007 fda1 	bl	8009a7c <strstr>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <init_gsm_module+0x190>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001f40:	223c      	movs	r2, #60	; 0x3c
 8001f42:	2100      	movs	r1, #0
 8001f44:	483a      	ldr	r0, [pc, #232]	; (8002030 <init_gsm_module+0x26c>)
 8001f46:	f007 fd4d 	bl	80099e4 <memset>
				answer_2 = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <init_gsm_module+0x25c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d301      	bcc.n	8001f60 <init_gsm_module+0x19c>
		{
			no_answer = true;               // Out from waiting answer
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <init_gsm_module+0x25c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d009      	beq.n	8001f7c <init_gsm_module+0x1b8>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d805      	bhi.n	8001f7c <init_gsm_module+0x1b8>
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1d0      	bne.n	8001f1e <init_gsm_module+0x15a>
		}
	}
	HAL_Delay(DELAY);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <init_gsm_module+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 faf1 	bl	8005568 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	// 3. Send command "signal reception quality" /////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 1000);
 8001f86:	482e      	ldr	r0, [pc, #184]	; (8002040 <init_gsm_module+0x27c>)
 8001f88:	f7fe f8e2 	bl	8000150 <strlen>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f94:	492a      	ldr	r1, [pc, #168]	; (8002040 <init_gsm_module+0x27c>)
 8001f96:	4824      	ldr	r0, [pc, #144]	; (8002028 <init_gsm_module+0x264>)
 8001f98:	f006 ffb8 	bl	8008f0c <HAL_UART_Transmit>

	id = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <init_gsm_module+0x25c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001faa:	e020      	b.n	8001fee <init_gsm_module+0x22a>
	{
		id++;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001fb2:	2064      	movs	r0, #100	; 0x64
 8001fb4:	f7ff fed6 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <init_gsm_module+0x25c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d110      	bne.n	8001fe2 <init_gsm_module+0x21e>
		{
			if (strstr(GSM_RX_buffer, "89380"))
 8001fc0:	4920      	ldr	r1, [pc, #128]	; (8002044 <init_gsm_module+0x280>)
 8001fc2:	481b      	ldr	r0, [pc, #108]	; (8002030 <init_gsm_module+0x26c>)
 8001fc4:	f007 fd5a 	bl	8009a7c <strstr>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <init_gsm_module+0x21e>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001fce:	223c      	movs	r2, #60	; 0x3c
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4817      	ldr	r0, [pc, #92]	; (8002030 <init_gsm_module+0x26c>)
 8001fd4:	f007 fd06 	bl	80099e4 <memset>
				answer_3 = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <init_gsm_module+0x25c>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d301      	bcc.n	8001fee <init_gsm_module+0x22a>
		{
			no_answer = true;               // Out from waiting answer
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <init_gsm_module+0x25c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d009      	beq.n	800200a <init_gsm_module+0x246>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d805      	bhi.n	800200a <init_gsm_module+0x246>
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1d0      	bne.n	8001fac <init_gsm_module+0x1e8>
		}
	}

	// Waite for answer "OK"
	id = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <init_gsm_module+0x25c>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002018:	e037      	b.n	800208a <init_gsm_module+0x2c6>
 800201a:	bf00      	nop
 800201c:	2000029a 	.word	0x2000029a
 8002020:	20000298 	.word	0x20000298
 8002024:	20000004 	.word	0x20000004
 8002028:	20000a78 	.word	0x20000a78
 800202c:	0800cee0 	.word	0x0800cee0
 8002030:	2000025c 	.word	0x2000025c
 8002034:	20000000 	.word	0x20000000
 8002038:	2000000c 	.word	0x2000000c
 800203c:	0800cee4 	.word	0x0800cee4
 8002040:	20000018 	.word	0x20000018
 8002044:	0800ceec 	.word	0x0800ceec
	{
		id++;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 800204e:	200a      	movs	r0, #10
 8002050:	f7ff fe88 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8002054:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <init_gsm_module+0x410>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d110      	bne.n	800207e <init_gsm_module+0x2ba>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 800205c:	495e      	ldr	r1, [pc, #376]	; (80021d8 <init_gsm_module+0x414>)
 800205e:	485f      	ldr	r0, [pc, #380]	; (80021dc <init_gsm_module+0x418>)
 8002060:	f007 fd0c 	bl	8009a7c <strstr>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <init_gsm_module+0x2ba>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800206a:	223c      	movs	r2, #60	; 0x3c
 800206c:	2100      	movs	r1, #0
 800206e:	485b      	ldr	r0, [pc, #364]	; (80021dc <init_gsm_module+0x418>)
 8002070:	f007 fcb8 	bl	80099e4 <memset>
				answer_3 = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8002078:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <init_gsm_module+0x410>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d301      	bcc.n	800208a <init_gsm_module+0x2c6>
		{
			no_answer = true;               // Out from waiting answer
 8002086:	2301      	movs	r3, #1
 8002088:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <init_gsm_module+0x410>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d009      	beq.n	80020a6 <init_gsm_module+0x2e2>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d805      	bhi.n	80020a6 <init_gsm_module+0x2e2>
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1d0      	bne.n	8002048 <init_gsm_module+0x284>
		}
	}
	HAL_Delay(DELAY);
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <init_gsm_module+0x41c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fa5c 	bl	8005568 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	// 4. Send command "Check registration in network"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CREG, strlen(AT_CREG), 1000);
 80020b0:	484c      	ldr	r0, [pc, #304]	; (80021e4 <init_gsm_module+0x420>)
 80020b2:	f7fe f84d 	bl	8000150 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	4949      	ldr	r1, [pc, #292]	; (80021e4 <init_gsm_module+0x420>)
 80020c0:	4849      	ldr	r0, [pc, #292]	; (80021e8 <init_gsm_module+0x424>)
 80020c2:	f006 ff23 	bl	8008f0c <HAL_UART_Transmit>

	id = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <init_gsm_module+0x410>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80020d4:	e020      	b.n	8002118 <init_gsm_module+0x354>
	{
		id++;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3301      	adds	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 80020dc:	2064      	movs	r0, #100	; 0x64
 80020de:	f7ff fe41 	bl	8001d64 <DelayMicro>

		if(ansver_flag == 1)
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <init_gsm_module+0x410>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d110      	bne.n	800210c <init_gsm_module+0x348>
		{
			if (strstr(GSM_RX_buffer, "+CREG: 0,1"))
 80020ea:	4940      	ldr	r1, [pc, #256]	; (80021ec <init_gsm_module+0x428>)
 80020ec:	483b      	ldr	r0, [pc, #236]	; (80021dc <init_gsm_module+0x418>)
 80020ee:	f007 fcc5 	bl	8009a7c <strstr>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <init_gsm_module+0x348>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80020f8:	223c      	movs	r2, #60	; 0x3c
 80020fa:	2100      	movs	r1, #0
 80020fc:	4837      	ldr	r0, [pc, #220]	; (80021dc <init_gsm_module+0x418>)
 80020fe:	f007 fc71 	bl	80099e4 <memset>
				answer_4 = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <init_gsm_module+0x410>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d301      	bcc.n	8002118 <init_gsm_module+0x354>
		{
			no_answer = true;               // Out from waiting answer
 8002114:	2301      	movs	r3, #1
 8002116:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <init_gsm_module+0x410>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d009      	beq.n	8002134 <init_gsm_module+0x370>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d805      	bhi.n	8002134 <init_gsm_module+0x370>
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1d0      	bne.n	80020d6 <init_gsm_module+0x312>
		}
	}

	// Waite for answer "OK"
	id = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002138:	2300      	movs	r3, #0
 800213a:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <init_gsm_module+0x410>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002142:	e020      	b.n	8002186 <init_gsm_module+0x3c2>
	{
		id++;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3301      	adds	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 800214a:	200a      	movs	r0, #10
 800214c:	f7ff fe0a 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <init_gsm_module+0x410>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d110      	bne.n	800217a <init_gsm_module+0x3b6>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002158:	491f      	ldr	r1, [pc, #124]	; (80021d8 <init_gsm_module+0x414>)
 800215a:	4820      	ldr	r0, [pc, #128]	; (80021dc <init_gsm_module+0x418>)
 800215c:	f007 fc8e 	bl	8009a7c <strstr>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <init_gsm_module+0x3b6>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002166:	223c      	movs	r2, #60	; 0x3c
 8002168:	2100      	movs	r1, #0
 800216a:	481c      	ldr	r0, [pc, #112]	; (80021dc <init_gsm_module+0x418>)
 800216c:	f007 fc3a 	bl	80099e4 <memset>
				answer_4 = 1;
 8002170:	2301      	movs	r3, #1
 8002172:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <init_gsm_module+0x410>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d301      	bcc.n	8002186 <init_gsm_module+0x3c2>
		{
			no_answer = true;               // Out from waiting answer
 8002182:	2301      	movs	r3, #1
 8002184:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <init_gsm_module+0x410>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d009      	beq.n	80021a2 <init_gsm_module+0x3de>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d805      	bhi.n	80021a2 <init_gsm_module+0x3de>
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1d0      	bne.n	8002144 <init_gsm_module+0x380>
		}
	}
	HAL_Delay(DELAY);
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <init_gsm_module+0x41c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 f9de 	bl	8005568 <HAL_Delay>
	////////////////////////////////////////////////////////////////


	if(answer_1 && answer_2 && answer_3 && answer_4)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <init_gsm_module+0x404>
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <init_gsm_module+0x404>
 80021b8:	7b7b      	ldrb	r3, [r7, #13]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <init_gsm_module+0x404>
 80021be:	7b3b      	ldrb	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <init_gsm_module+0x404>
	{
		return 0;            // If init OK
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <init_gsm_module+0x406>
	}
	else
	{
		return 1;
 80021c8:	2301      	movs	r3, #1
	}
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000298 	.word	0x20000298
 80021d8:	0800cee0 	.word	0x0800cee0
 80021dc:	2000025c 	.word	0x2000025c
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000024 	.word	0x20000024
 80021e8:	20000a78 	.word	0x20000a78
 80021ec:	0800cef4 	.word	0x0800cef4

080021f0 <call_on_mu_number>:
// -------------------------------------------------------------------
int call_on_mu_number(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 80021fa:	2300      	movs	r3, #0
 80021fc:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 80021fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8002202:	607b      	str	r3, [r7, #4]
	//

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_to_my_mobile_number, strlen(call_to_my_mobile_number), 1000);
 8002204:	4822      	ldr	r0, [pc, #136]	; (8002290 <call_on_mu_number+0xa0>)
 8002206:	f7fd ffa3 	bl	8000150 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	b29a      	uxth	r2, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	491f      	ldr	r1, [pc, #124]	; (8002290 <call_on_mu_number+0xa0>)
 8002214:	481f      	ldr	r0, [pc, #124]	; (8002294 <call_on_mu_number+0xa4>)
 8002216:	f006 fe79 	bl	8008f0c <HAL_UART_Transmit>

	ansver_flag = 0;
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <call_on_mu_number+0xa8>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002220:	2300      	movs	r3, #0
 8002222:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002224:	e022      	b.n	800226c <call_on_mu_number+0x7c>
	{
		id++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
	    DelayMicro(10);
 800222c:	200a      	movs	r0, #10
 800222e:	f7ff fd99 	bl	8001d64 <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <call_on_mu_number+0xa8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d110      	bne.n	800225c <call_on_mu_number+0x6c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 800223a:	4918      	ldr	r1, [pc, #96]	; (800229c <call_on_mu_number+0xac>)
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <call_on_mu_number+0xb0>)
 800223e:	f007 fc1d 	bl	8009a7c <strstr>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <call_on_mu_number+0x6c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002248:	223c      	movs	r2, #60	; 0x3c
 800224a:	2100      	movs	r1, #0
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <call_on_mu_number+0xb0>)
 800224e:	f007 fbc9 	bl	80099e4 <memset>
	    		ansver_flag = 1;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <call_on_mu_number+0xa8>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
	    		return 1;
 8002258:	2301      	movs	r3, #1
 800225a:	e015      	b.n	8002288 <call_on_mu_number+0x98>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d303      	bcc.n	800226c <call_on_mu_number+0x7c>
	    {
	    	no_answer = true;               // Out from waiting answer
 8002264:	2301      	movs	r3, #1
 8002266:	72fb      	strb	r3, [r7, #11]
	    	return 0;
 8002268:	2300      	movs	r3, #0
 800226a:	e00d      	b.n	8002288 <call_on_mu_number+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <call_on_mu_number+0xa8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d009      	beq.n	8002288 <call_on_mu_number+0x98>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d805      	bhi.n	8002288 <call_on_mu_number+0x98>
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ce      	bne.n	8002226 <call_on_mu_number+0x36>
	    }
	}
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000038 	.word	0x20000038
 8002294:	20000a78 	.word	0x20000a78
 8002298:	20000298 	.word	0x20000298
 800229c:	0800cee0 	.word	0x0800cee0
 80022a0:	2000025c 	.word	0x2000025c

080022a4 <call_on_number>:
// -------------------------------------------------------------------

int call_on_number(char *number, uint8_t size_number)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool no_answer = false;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	int timeout_counter = 10000;
 80022ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
	//
	//char call_to_my_mobile_number[]="ATD+380931482354;\r\n";
	char call_command[21]="ATD+ ";
 80022c0:	4a55      	ldr	r2, [pc, #340]	; (8002418 <call_on_number+0x174>)
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ca:	6018      	str	r0, [r3, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	8019      	strh	r1, [r3, #0]
 80022d0:	f107 0312 	add.w	r3, r7, #18
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	f8c3 200b 	str.w	r2, [r3, #11]
	char end_call_command[] = ";\r\n";
 80022e0:	4b4e      	ldr	r3, [pc, #312]	; (800241c <call_on_number+0x178>)
 80022e2:	60bb      	str	r3, [r7, #8]
	// 1. Finr end of string call_command
	uint8_t i = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 80022ea:	e004      	b.n	80022f6 <call_on_number+0x52>
	{
		i++;
 80022ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022f0:	3301      	adds	r3, #1
 80022f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 80022f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022fe:	4413      	add	r3, r2
 8002300:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f1      	bne.n	80022ec <call_on_number+0x48>
	}
	// 2. Add number to end of dtring
	uint8_t k = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 800230e:	e015      	b.n	800233c <call_on_number+0x98>
	{
		call_command[i] = number[k];
 8002310:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	441a      	add	r2, r3
 8002318:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002322:	440b      	add	r3, r1
 8002324:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 8002328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800232c:	3301      	adds	r3, #1
 800232e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		k++;
 8002332:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002336:	3301      	adds	r3, #1
 8002338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 800233c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	429a      	cmp	r2, r3
 8002344:	d1e4      	bne.n	8002310 <call_on_number+0x6c>
	}
	// 3. Add ';\r\n' to the end of string
	for(k = 0; k <= 4; k ++)
 8002346:	2300      	movs	r3, #0
 8002348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800234c:	e017      	b.n	800237e <call_on_number+0xda>
	{
		call_command[i] = end_call_command[k];
 800234e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002356:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800235a:	440a      	add	r2, r1
 800235c:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002360:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002364:	440b      	add	r3, r1
 8002366:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 800236a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800236e:	3301      	adds	r3, #1
 8002370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for(k = 0; k <= 4; k ++)
 8002374:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002378:	3301      	adds	r3, #1
 800237a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800237e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002382:	2b04      	cmp	r3, #4
 8002384:	d9e3      	bls.n	800234e <call_on_number+0xaa>
	}

	// 4. Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_command, strlen(call_command), 1000);
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd fee0 	bl	8000150 <strlen>
 8002390:	4603      	mov	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	f107 010c 	add.w	r1, r7, #12
 8002398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239c:	4820      	ldr	r0, [pc, #128]	; (8002420 <call_on_number+0x17c>)
 800239e:	f006 fdb5 	bl	8008f0c <HAL_UART_Transmit>

	ansver_flag = 0;
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <call_on_number+0x180>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80023a8:	e023      	b.n	80023f2 <call_on_number+0x14e>
	{
		id++;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3301      	adds	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	    DelayMicro(10);
 80023b0:	200a      	movs	r0, #10
 80023b2:	f7ff fcd7 	bl	8001d64 <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <call_on_number+0x180>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d110      	bne.n	80023e0 <call_on_number+0x13c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 80023be:	491a      	ldr	r1, [pc, #104]	; (8002428 <call_on_number+0x184>)
 80023c0:	481a      	ldr	r0, [pc, #104]	; (800242c <call_on_number+0x188>)
 80023c2:	f007 fb5b 	bl	8009a7c <strstr>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <call_on_number+0x13c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80023cc:	223c      	movs	r2, #60	; 0x3c
 80023ce:	2100      	movs	r1, #0
 80023d0:	4816      	ldr	r0, [pc, #88]	; (800242c <call_on_number+0x188>)
 80023d2:	f007 fb07 	bl	80099e4 <memset>
	    		ansver_flag = 1;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <call_on_number+0x180>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
	    		return 1;
 80023dc:	2301      	movs	r3, #1
 80023de:	e017      	b.n	8002410 <call_on_number+0x16c>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d304      	bcc.n	80023f2 <call_on_number+0x14e>
	    {
	    	no_answer = true;               // Out from waiting answer
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	    	return 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e00e      	b.n	8002410 <call_on_number+0x16c>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <call_on_number+0x180>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d00a      	beq.n	8002410 <call_on_number+0x16c>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	429a      	cmp	r2, r3
 8002400:	d806      	bhi.n	8002410 <call_on_number+0x16c>
 8002402:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002406:	f083 0301 	eor.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1cc      	bne.n	80023aa <call_on_number+0x106>
	    }
	}
}
 8002410:	4618      	mov	r0, r3
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	0800cf00 	.word	0x0800cf00
 800241c:	000a0d3b 	.word	0x000a0d3b
 8002420:	20000a78 	.word	0x20000a78
 8002424:	20000298 	.word	0x20000298
 8002428:	0800cee0 	.word	0x0800cee0
 800242c:	2000025c 	.word	0x2000025c

08002430 <end_of_call>:
// -------------------------------------------------------------------

// -------------------------------------------------------------------
int end_of_call(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
	////////////////////////
		uint32_t id =0;               				 // Variable for timeout
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
		bool no_answer = false;
 800243a:	2300      	movs	r3, #0
 800243c:	72fb      	strb	r3, [r7, #11]
		int timeout_counter = 10000;
 800243e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002442:	607b      	str	r3, [r7, #4]
		//

		// Call on number
		HAL_UART_Transmit(&huart1 , (uint8_t *)AT_END_OF_CALL, strlen(AT_END_OF_CALL), 1000);
 8002444:	4822      	ldr	r0, [pc, #136]	; (80024d0 <end_of_call+0xa0>)
 8002446:	f7fd fe83 	bl	8000150 <strlen>
 800244a:	4603      	mov	r3, r0
 800244c:	b29a      	uxth	r2, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	491f      	ldr	r1, [pc, #124]	; (80024d0 <end_of_call+0xa0>)
 8002454:	481f      	ldr	r0, [pc, #124]	; (80024d4 <end_of_call+0xa4>)
 8002456:	f006 fd59 	bl	8008f0c <HAL_UART_Transmit>

		ansver_flag = 0;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <end_of_call+0xa8>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
		no_answer = false;
 8002460:	2300      	movs	r3, #0
 8002462:	72fb      	strb	r3, [r7, #11]

		while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002464:	e022      	b.n	80024ac <end_of_call+0x7c>
		{
			id++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
		    DelayMicro(10);
 800246c:	200a      	movs	r0, #10
 800246e:	f7ff fc79 	bl	8001d64 <DelayMicro>

		    if(ansver_flag ==1)					// waite flag from interrupt
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <end_of_call+0xa8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d110      	bne.n	800249c <end_of_call+0x6c>
		    {
		    	if (strstr(GSM_RX_buffer, "OK"))
 800247a:	4918      	ldr	r1, [pc, #96]	; (80024dc <end_of_call+0xac>)
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <end_of_call+0xb0>)
 800247e:	f007 fafd 	bl	8009a7c <strstr>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <end_of_call+0x6c>
		    	{
		    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002488:	223c      	movs	r2, #60	; 0x3c
 800248a:	2100      	movs	r1, #0
 800248c:	4814      	ldr	r0, [pc, #80]	; (80024e0 <end_of_call+0xb0>)
 800248e:	f007 faa9 	bl	80099e4 <memset>
		    		ansver_flag = 1;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <end_of_call+0xa8>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
		    		return 1;
 8002498:	2301      	movs	r3, #1
 800249a:	e015      	b.n	80024c8 <end_of_call+0x98>
		    	}

		    }

		    if(id  >= timeout_counter)						// Timeout is goon
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d303      	bcc.n	80024ac <end_of_call+0x7c>
		    {
		    	no_answer = true;               // Out from waiting answer
 80024a4:	2301      	movs	r3, #1
 80024a6:	72fb      	strb	r3, [r7, #11]
		    	return 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e00d      	b.n	80024c8 <end_of_call+0x98>
		while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <end_of_call+0xa8>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d009      	beq.n	80024c8 <end_of_call+0x98>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d805      	bhi.n	80024c8 <end_of_call+0x98>
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ce      	bne.n	8002466 <end_of_call+0x36>
		    }

		}

}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000030 	.word	0x20000030
 80024d4:	20000a78 	.word	0x20000a78
 80024d8:	20000298 	.word	0x20000298
 80024dc:	0800cee0 	.word	0x0800cee0
 80024e0:	2000025c 	.word	0x2000025c

080024e4 <wait_ansver_after_make_call_in_blok_mode>:


	///////////////////////////////////////////////////////
//	 // waite answer "BUSY" from GSM    WORK OK
int wait_ansver_after_make_call_in_blok_mode(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0

		 while (ansver_flag != 1)
 80024e8:	bf00      	nop
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d1fb      	bne.n	80024ea <wait_ansver_after_make_call_in_blok_mode+0x6>
		 {
			// waite for answer
		 }
		 if(ansver_flag == 1)
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d132      	bne.n	8002560 <wait_ansver_after_make_call_in_blok_mode+0x7c>
		 {
				if (strstr(GSM_RX_buffer, "BUSY"))                        // Звінок збитий  // Work OK
 80024fa:	491b      	ldr	r1, [pc, #108]	; (8002568 <wait_ansver_after_make_call_in_blok_mode+0x84>)
 80024fc:	481b      	ldr	r0, [pc, #108]	; (800256c <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80024fe:	f007 fabd 	bl	8009a7c <strstr>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <wait_ansver_after_make_call_in_blok_mode+0x38>
			    {
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002508:	223c      	movs	r2, #60	; 0x3c
 800250a:	2100      	movs	r1, #0
 800250c:	4817      	ldr	r0, [pc, #92]	; (800256c <wait_ansver_after_make_call_in_blok_mode+0x88>)
 800250e:	f007 fa69 	bl	80099e4 <memset>
					ansver_flag = 1;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
					return 1;
 8002518:	2301      	movs	r3, #1
 800251a:	e021      	b.n	8002560 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}

				if (strstr(GSM_RX_buffer, "NO ANSWER"))					  // Не відповідає  // Work OK
 800251c:	4914      	ldr	r1, [pc, #80]	; (8002570 <wait_ansver_after_make_call_in_blok_mode+0x8c>)
 800251e:	4813      	ldr	r0, [pc, #76]	; (800256c <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002520:	f007 faac 	bl	8009a7c <strstr>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <wait_ansver_after_make_call_in_blok_mode+0x5a>
			    {
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800252a:	223c      	movs	r2, #60	; 0x3c
 800252c:	2100      	movs	r1, #0
 800252e:	480f      	ldr	r0, [pc, #60]	; (800256c <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002530:	f007 fa58 	bl	80099e4 <memset>
				    ansver_flag = 1;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
				    return 2;
 800253a:	2302      	movs	r3, #2
 800253c:	e010      	b.n	8002560 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}

				if (strstr(GSM_RX_buffer, "NO CARRIER"))					  // Трубка піднята
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <wait_ansver_after_make_call_in_blok_mode+0x90>)
 8002540:	480a      	ldr	r0, [pc, #40]	; (800256c <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002542:	f007 fa9b 	bl	8009a7c <strstr>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				{
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800254c:	223c      	movs	r2, #60	; 0x3c
 800254e:	2100      	movs	r1, #0
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002552:	f007 fa47 	bl	80099e4 <memset>
				    ansver_flag = 1;
 8002556:	4b03      	ldr	r3, [pc, #12]	; (8002564 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
				    return 3;
 800255c:	2303      	movs	r3, #3
 800255e:	e7ff      	b.n	8002560 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}
		}

	/////////////////////////////////////////////////////////////////////
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000298 	.word	0x20000298
 8002568:	0800cf18 	.word	0x0800cf18
 800256c:	2000025c 	.word	0x2000025c
 8002570:	0800cf20 	.word	0x0800cf20
 8002574:	0800cf2c 	.word	0x0800cf2c

08002578 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b08b      	sub	sp, #44	; 0x2c
 800257c:	af00      	add	r7, sp, #0
	uint8_t size=0;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 800258e:	23ff      	movs	r3, #255	; 0xff
 8002590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 800259a:	463b      	mov	r3, r7
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f95a 	bl	8002858 <r_single_Si7021>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80025aa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d000      	beq.n	80025b4 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 80025b2:	e7fe      	b.n	80025b2 <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd6a 	bl	8001094 <__aeabi_fcmplt>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <read_T_and_H_SI7021+0x52>
 80025c6:	4b52      	ldr	r3, [pc, #328]	; (8002710 <read_T_and_H_SI7021+0x198>)
 80025c8:	e000      	b.n	80025cc <read_T_and_H_SI7021+0x54>
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <read_T_and_H_SI7021+0x19c>)
 80025cc:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fd5d 	bl	8001094 <__aeabi_fcmplt>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <read_T_and_H_SI7021+0x70>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025e6:	e000      	b.n	80025ea <read_T_and_H_SI7021+0x72>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 80025ec:	69f8      	ldr	r0, [r7, #28]
 80025ee:	f7fe fd79 	bl	80010e4 <__aeabi_f2iz>
 80025f2:	4603      	mov	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 80025f6:	683c      	ldr	r4, [r7, #0]
 80025f8:	69b8      	ldr	r0, [r7, #24]
 80025fa:	f7fe fb59 	bl	8000cb0 <__aeabi_i2f>
 80025fe:	4603      	mov	r3, r0
 8002600:	4619      	mov	r1, r3
 8002602:	4620      	mov	r0, r4
 8002604:	f7fe fa9e 	bl	8000b44 <__aeabi_fsub>
 8002608:	4603      	mov	r3, r0
 800260a:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 800260c:	4942      	ldr	r1, [pc, #264]	; (8002718 <read_T_and_H_SI7021+0x1a0>)
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7fe fba2 	bl	8000d58 <__aeabi_fmul>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff06 	bl	8000428 <__aeabi_f2d>
 800261c:	4603      	mov	r3, r0
 800261e:	460c      	mov	r4, r1
 8002620:	4618      	mov	r0, r3
 8002622:	4621      	mov	r1, r4
 8002624:	f00a fc0e 	bl	800ce44 <trunc>
 8002628:	4603      	mov	r3, r0
 800262a:	460c      	mov	r4, r1
 800262c:	4618      	mov	r0, r3
 800262e:	4621      	mov	r1, r4
 8002630:	f7fe f9ec 	bl	8000a0c <__aeabi_d2iz>
 8002634:	4603      	mov	r3, r0
 8002636:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 8002638:	1d38      	adds	r0, r7, #4
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	4937      	ldr	r1, [pc, #220]	; (800271c <read_T_and_H_SI7021+0x1a4>)
 8002640:	f007 f9d8 	bl	80099f4 <siprintf>
	strcpy(temperature_si7021, str);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4835      	ldr	r0, [pc, #212]	; (8002720 <read_T_and_H_SI7021+0x1a8>)
 800264a:	f007 fa0f 	bl	8009a6c <strcpy>
	memset(str, 0 , sizeof(str));
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	220a      	movs	r2, #10
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f007 f9c5 	bl	80099e4 <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 800265a:	23ff      	movs	r3, #255	; 0xff
 800265c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 8002660:	463b      	mov	r3, r7
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f8f7 	bl	8002858 <r_single_Si7021>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8002670:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002674:	2b00      	cmp	r3, #0
 8002676:	d000      	beq.n	800267a <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 8002678:	e7fe      	b.n	8002678 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd07 	bl	8001094 <__aeabi_fcmplt>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <read_T_and_H_SI7021+0x11c>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002692:	e000      	b.n	8002696 <read_T_and_H_SI7021+0x11e>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8002698:	69f8      	ldr	r0, [r7, #28]
 800269a:	f7fe fd23 	bl	80010e4 <__aeabi_f2iz>
 800269e:	4603      	mov	r3, r0
 80026a0:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 80026a2:	683c      	ldr	r4, [r7, #0]
 80026a4:	69b8      	ldr	r0, [r7, #24]
 80026a6:	f7fe fb03 	bl	8000cb0 <__aeabi_i2f>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7fe fa48 	bl	8000b44 <__aeabi_fsub>
 80026b4:	4603      	mov	r3, r0
 80026b6:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 80026b8:	4917      	ldr	r1, [pc, #92]	; (8002718 <read_T_and_H_SI7021+0x1a0>)
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7fe fb4c 	bl	8000d58 <__aeabi_fmul>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd feb0 	bl	8000428 <__aeabi_f2d>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	4618      	mov	r0, r3
 80026ce:	4621      	mov	r1, r4
 80026d0:	f00a fbb8 	bl	800ce44 <trunc>
 80026d4:	4603      	mov	r3, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	4618      	mov	r0, r3
 80026da:	4621      	mov	r1, r4
 80026dc:	f7fe f996 	bl	8000a0c <__aeabi_d2iz>
 80026e0:	4603      	mov	r3, r0
 80026e2:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <read_T_and_H_SI7021+0x1ac>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f007 f982 	bl	80099f4 <siprintf>
	strcpy(humidity_si7021, str);
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <read_T_and_H_SI7021+0x1b0>)
 80026f6:	f007 f9b9 	bl	8009a6c <strcpy>
	memset(str, 0 , sizeof(str));
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	220a      	movs	r2, #10
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f007 f96f 	bl	80099e4 <memset>
}
 8002706:	bf00      	nop
 8002708:	372c      	adds	r7, #44	; 0x2c
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}
 800270e:	bf00      	nop
 8002710:	0800cf64 	.word	0x0800cf64
 8002714:	0800cf68 	.word	0x0800cf68
 8002718:	461c4000 	.word	0x461c4000
 800271c:	0800cf6c 	.word	0x0800cf6c
 8002720:	200006c4 	.word	0x200006c4
 8002724:	0800cf74 	.word	0x0800cf74
 8002728:	200006cc 	.word	0x200006cc
 800272c:	00000000 	.word	0x00000000

08002730 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fe61 	bl	8000404 <__aeabi_i2d>
 8002742:	a311      	add	r3, pc, #68	; (adr r3, 8002788 <process_temp_code+0x58>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd fec6 	bl	80004d8 <__aeabi_dmul>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	4618      	mov	r0, r3
 8002752:	4621      	mov	r1, r4
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <process_temp_code+0x68>)
 800275a:	f7fd ffe7 	bl	800072c <__aeabi_ddiv>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	4618      	mov	r0, r3
 8002764:	4621      	mov	r1, r4
 8002766:	a30a      	add	r3, pc, #40	; (adr r3, 8002790 <process_temp_code+0x60>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fd fcfc 	bl	8000168 <__aeabi_dsub>
 8002770:	4603      	mov	r3, r0
 8002772:	460c      	mov	r4, r1
 8002774:	4618      	mov	r0, r3
 8002776:	4621      	mov	r1, r4
 8002778:	f7fe f990 	bl	8000a9c <__aeabi_d2f>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	3d70a3d7 	.word	0x3d70a3d7
 800278c:	4065f70a 	.word	0x4065f70a
 8002790:	cccccccd 	.word	0xcccccccd
 8002794:	40476ccc 	.word	0x40476ccc
 8002798:	40f00000 	.word	0x40f00000

0800279c <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe2b 	bl	8000404 <__aeabi_i2d>
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <process_humi_code+0x84>)
 80027b4:	f7fd fe90 	bl	80004d8 <__aeabi_dmul>
 80027b8:	4603      	mov	r3, r0
 80027ba:	460c      	mov	r4, r1
 80027bc:	4618      	mov	r0, r3
 80027be:	4621      	mov	r1, r4
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <process_humi_code+0x88>)
 80027c6:	f7fd ffb1 	bl	800072c <__aeabi_ddiv>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	4618      	mov	r0, r3
 80027d0:	4621      	mov	r1, r4
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <process_humi_code+0x8c>)
 80027d8:	f7fd fcc6 	bl	8000168 <__aeabi_dsub>
 80027dc:	4603      	mov	r3, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	4618      	mov	r0, r3
 80027e2:	4621      	mov	r1, r4
 80027e4:	f7fe f95a 	bl	8000a9c <__aeabi_d2f>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7fe fc4f 	bl	8001094 <__aeabi_fcmplt>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <process_humi_code+0x66>
    return 0;
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e009      	b.n	8002816 <process_humi_code+0x7a>
  else if(value > 100)
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <process_humi_code+0x90>)
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7fe fc63 	bl	80010d0 <__aeabi_fcmpgt>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <process_humi_code+0x78>
    return 100;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <process_humi_code+0x90>)
 8002812:	e000      	b.n	8002816 <process_humi_code+0x7a>
  else
    return (float)value;
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	405f4000 	.word	0x405f4000
 8002824:	40f00000 	.word	0x40f00000
 8002828:	40180000 	.word	0x40180000
 800282c:	42c80000 	.word	0x42c80000

08002830 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	b21a      	sxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3301      	adds	r3, #1
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b21b      	sxth	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b21b      	sxth	r3, r3
 800284c:	b29b      	uxth	r3, r3
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 800286a:	23e5      	movs	r3, #229	; 0xe5
 800286c:	737b      	strb	r3, [r7, #13]
 800286e:	e008      	b.n	8002882 <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <r_single_Si7021+0x24>
    cmd = Temp_HM;
 8002876:	23e3      	movs	r3, #227	; 0xe3
 8002878:	737b      	strb	r3, [r7, #13]
 800287a:	e002      	b.n	8002882 <r_single_Si7021+0x2a>
  else
    return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002880:	e03c      	b.n	80028fc <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	f107 020d 	add.w	r2, r7, #13
 8002888:	f242 7310 	movw	r3, #10000	; 0x2710
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2301      	movs	r3, #1
 8002890:	481c      	ldr	r0, [pc, #112]	; (8002904 <r_single_Si7021+0xac>)
 8002892:	f003 fcbf 	bl	8006214 <HAL_I2C_Master_Transmit>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <r_single_Si7021+0x4a>
    return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a0:	e02c      	b.n	80028fc <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 80028a2:	2180      	movs	r1, #128	; 0x80
 80028a4:	f107 0208 	add.w	r2, r7, #8
 80028a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2302      	movs	r3, #2
 80028b0:	4814      	ldr	r0, [pc, #80]	; (8002904 <r_single_Si7021+0xac>)
 80028b2:	f003 fdad 	bl	8006410 <HAL_I2C_Master_Receive>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <r_single_Si7021+0x6a>
    return -1;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c0:	e01c      	b.n	80028fc <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ffb2 	bl	8002830 <convert_to_uint16>
 80028cc:	4603      	mov	r3, r0
 80028ce:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d107      	bne.n	80028e6 <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5f 	bl	800279c <process_humi_code>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e009      	b.n	80028fa <r_single_Si7021+0xa2>
  else if(type == Temperature)
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff1e 	bl	8002730 <process_temp_code>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	601a      	str	r2, [r3, #0]

  return 0;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000824 	.word	0x20000824

08002908 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b087      	sub	sp, #28
 800290c:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 800290e:	2300      	movs	r3, #0
 8002910:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <I2C_1_scaner+0xb4>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e043      	b.n	80029a2 <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 800291a:	2001      	movs	r0, #1
 800291c:	f002 fe24 	bl	8005568 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <I2C_1_scaner+0xb4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	b299      	uxth	r1, r3
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <I2C_1_scaner+0xb8>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b298      	uxth	r0, r3
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <I2C_1_scaner+0xbc>)
 8002932:	881c      	ldrh	r4, [r3, #0]
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <I2C_1_scaner+0xbc>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <I2C_1_scaner+0xc0>)
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	9202      	str	r2, [sp, #8]
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <I2C_1_scaner+0xc4>)
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4623      	mov	r3, r4
 8002946:	4602      	mov	r2, r0
 8002948:	4821      	ldr	r0, [pc, #132]	; (80029d0 <I2C_1_scaner+0xc8>)
 800294a:	f004 f8b5 	bl	8006ab8 <HAL_I2C_Mem_Read>
 800294e:	4603      	mov	r3, r0
 8002950:	b29a      	uxth	r2, r3
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <I2C_1_scaner+0xcc>)
 8002954:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <I2C_1_scaner+0xcc>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11b      	bne.n	8002996 <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	3301      	adds	r3, #1
 8002962:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <I2C_1_scaner+0xb4>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <I2C_1_scaner+0xb4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b3c      	cmp	r3, #60	; 0x3c
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4313      	orrs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <I2C_1_scaner+0xb4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b3c      	cmp	r3, #60	; 0x3c
 800298e:	d001      	beq.n	8002994 <I2C_1_scaner+0x8c>
 8002990:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 8002992:	e000      	b.n	8002996 <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8002994:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <I2C_1_scaner+0xb4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <I2C_1_scaner+0xb4>)
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <I2C_1_scaner+0xb4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d1b7      	bne.n	800291a <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 80029aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ae:	f002 fddb 	bl	8005568 <HAL_Delay>
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000029b 	.word	0x2000029b
 80029c0:	2000029c 	.word	0x2000029c
 80029c4:	20000054 	.word	0x20000054
 80029c8:	20000058 	.word	0x20000058
 80029cc:	2000029d 	.word	0x2000029d
 80029d0:	20000824 	.word	0x20000824
 80029d4:	2000029e 	.word	0x2000029e

080029d8 <HAL_UART_RxCpltCallback>:
// Receive data from GPS module
#if GPS
	// GPS receive part///////////////////////////////////////////////////////
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
		flag = 1;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_UART_RxCpltCallback+0x18>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
	}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	200002a4 	.word	0x200002a4

080029f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	; 0x38
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029fa:	f002 fd53 	bl	80054a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029fe:	f000 f8b1 	bl	8002b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a02:	f000 fae5 	bl	8002fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a06:	f000 fac5 	bl	8002f94 <MX_DMA_Init>
  MX_TIM2_Init();
 8002a0a:	f000 f9f7 	bl	8002dfc <MX_TIM2_Init>
  MX_I2C1_Init();
 8002a0e:	f000 f8ef 	bl	8002bf0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002a12:	f000 fa41 	bl	8002e98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002a16:	f000 fa93 	bl	8002f40 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8002a1a:	f000 f917 	bl	8002c4c <MX_SPI2_Init>
  MX_TIM1_Init();
 8002a1e:	f000 f94b 	bl	8002cb8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002a22:	f000 fa63 	bl	8002eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	#if I2C_SCANNER
  	  I2C_1_scaner();
 8002a26:	f7ff ff6f 	bl	8002908 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  	  read_T_and_H_SI7021();
 8002a2a:	f7ff fda5 	bl	8002578 <read_T_and_H_SI7021>
	#endif

	#if OLED
  	  init_oled();
 8002a2e:	f001 fcd1 	bl	80043d4 <init_oled>
	  //test_oled();
	#endif

  	  HAL_TIM_Base_Start_IT(&htim2);
 8002a32:	4845      	ldr	r0, [pc, #276]	; (8002b48 <main+0x154>)
 8002a34:	f005 fbf4 	bl	8008220 <HAL_TIM_Base_Start_IT>

	#if GPS
//  	  uint8_t GPS_buff[512];      						// main buffer for stream from GPS
  	  memset(GPS_buff ,0 ,sizeof(GPS_buff));
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4843      	ldr	r0, [pc, #268]	; (8002b4c <main+0x158>)
 8002a40:	f006 ffd0 	bl	80099e4 <memset>
  	  HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	4940      	ldr	r1, [pc, #256]	; (8002b4c <main+0x158>)
 8002a4a:	4841      	ldr	r0, [pc, #260]	; (8002b50 <main+0x15c>)
 8002a4c:	f006 faf8 	bl	8009040 <HAL_UART_Receive_DMA>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
  #endif

  int EXIT = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
/////////////////////////////////////////////////////////////////////////////////////////////////
while (1)
{
	EXIT = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34

	char str[50]={0};
 8002a58:	463b      	mov	r3, r7
 8002a5a:	2232      	movs	r2, #50	; 0x32
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 ffc0 	bl	80099e4 <memset>
	char sign = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	print_main_menu();  // Print main menu on OLED
 8002a6a:	f001 fce9 	bl	8004440 <print_main_menu>

	do                                                            // Wait for choice
	{
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002a6e:	f000 fb63 	bl	8003138 <read_one_sign_from_keyboard>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// For debug ///////////
		//sign = '1';    // turn on GSM mode
		/////////////////////

		if(sign == '1')    // If select GSM mode
 8002a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a7c:	2b31      	cmp	r3, #49	; 0x31
 8002a7e:	d110      	bne.n	8002aa2 <main+0xae>
		{
			GSM_MODE = true;
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <main+0x160>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
			while(GSM_MODE && (EXIT == 0))
 8002a86:	e005      	b.n	8002a94 <main+0xa0>
			{
				EXIT = gsm_mode(sign);
 8002a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fd6b 	bl	8003568 <gsm_mode>
 8002a92:	6378      	str	r0, [r7, #52]	; 0x34
			while(GSM_MODE && (EXIT == 0))
 8002a94:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <main+0x160>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <main+0xae>
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f2      	beq.n	8002a88 <main+0x94>
			}
		}
		if(sign == '2')    // If select GPS mode
 8002aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aa6:	2b32      	cmp	r3, #50	; 0x32
 8002aa8:	d110      	bne.n	8002acc <main+0xd8>
		{
			GPS_MODE = true;
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <main+0x164>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
			while (GPS_MODE && (EXIT == 0))
 8002ab0:	e005      	b.n	8002abe <main+0xca>
			{
				EXIT = gps_mode(sign);
 8002ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fc72 	bl	80033a0 <gps_mode>
 8002abc:	6378      	str	r0, [r7, #52]	; 0x34
			while (GPS_MODE && (EXIT == 0))
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <main+0x164>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <main+0xd8>
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f2      	beq.n	8002ab2 <main+0xbe>
			}
		}
		if(sign == '3')    // If select FINGERPRINT MODE
 8002acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ad0:	2b33      	cmp	r3, #51	; 0x33
 8002ad2:	d110      	bne.n	8002af6 <main+0x102>
		{
			FINGERPRINT_MODE = true;
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <main+0x168>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
			while (FINGERPRINT_MODE && (EXIT == 0))
 8002ada:	e005      	b.n	8002ae8 <main+0xf4>
			{
				EXIT = fingerprint_mode(sign);
 8002adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 ffa9 	bl	8003a38 <fingerprint_mode>
 8002ae6:	6378      	str	r0, [r7, #52]	; 0x34
			while (FINGERPRINT_MODE && (EXIT == 0))
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <main+0x168>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <main+0x102>
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f2      	beq.n	8002adc <main+0xe8>
			}
		}
		if(sign == '4')    // If select SENSORS MODE
 8002af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002afa:	2b34      	cmp	r3, #52	; 0x34
 8002afc:	d110      	bne.n	8002b20 <main+0x12c>
		{
			SENSORS_MODE = true;
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <main+0x16c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
			while (SENSORS_MODE && (EXIT == 0))
 8002b04:	e005      	b.n	8002b12 <main+0x11e>
			{
				EXIT = sensors_mode(sign);
 8002b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f944 	bl	8003d98 <sensors_mode>
 8002b10:	6378      	str	r0, [r7, #52]	; 0x34
			while (SENSORS_MODE && (EXIT == 0))
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <main+0x16c>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <main+0x12c>
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f2      	beq.n	8002b06 <main+0x112>
			}
		}

		ssd1306_UpdateScreen();
 8002b20:	f002 f820 	bl	8004b64 <ssd1306_UpdateScreen>
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '4'));     // Select one from 3 modes
 8002b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b28:	2b31      	cmp	r3, #49	; 0x31
 8002b2a:	d093      	beq.n	8002a54 <main+0x60>
 8002b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b30:	2b32      	cmp	r3, #50	; 0x32
 8002b32:	d08f      	beq.n	8002a54 <main+0x60>
 8002b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b38:	2b33      	cmp	r3, #51	; 0x33
 8002b3a:	d08b      	beq.n	8002a54 <main+0x60>
 8002b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b40:	2b34      	cmp	r3, #52	; 0x34
 8002b42:	d194      	bne.n	8002a6e <main+0x7a>
{
 8002b44:	e786      	b.n	8002a54 <main+0x60>
 8002b46:	bf00      	nop
 8002b48:	20000af8 	.word	0x20000af8
 8002b4c:	20000878 	.word	0x20000878
 8002b50:	200007e4 	.word	0x200007e4
 8002b54:	200002a0 	.word	0x200002a0
 8002b58:	200002a1 	.word	0x200002a1
 8002b5c:	200002a2 	.word	0x200002a2
 8002b60:	200002a3 	.word	0x200002a3

08002b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b090      	sub	sp, #64	; 0x40
 8002b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	2228      	movs	r2, #40	; 0x28
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f006 ff36 	bl	80099e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b94:	2301      	movs	r3, #1
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ba2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 fe8f 	bl	80078d0 <HAL_RCC_OscConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002bb8:	f001 fc06 	bl	80043c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f005 f8fa 	bl	8007dd0 <HAL_RCC_ClockConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002be2:	f001 fbf1 	bl	80043c8 <Error_Handler>
  }
}
 8002be6:	bf00      	nop
 8002be8:	3740      	adds	r7, #64	; 0x40
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <MX_I2C1_Init+0x54>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <MX_I2C1_Init+0x58>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <MX_I2C1_Init+0x50>)
 8002c2e:	f003 f9b9 	bl	8005fa4 <HAL_I2C_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c38:	f001 fbc6 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000824 	.word	0x20000824
 8002c44:	40005400 	.word	0x40005400
 8002c48:	000186a0 	.word	0x000186a0

08002c4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <MX_SPI2_Init+0x68>)
 8002c54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c98:	220a      	movs	r2, #10
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <MX_SPI2_Init+0x64>)
 8002c9e:	f005 fa33 	bl	8008108 <HAL_SPI_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ca8:	f001 fb8e 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000748 	.word	0x20000748
 8002cb4:	40003800 	.word	0x40003800

08002cb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b096      	sub	sp, #88	; 0x58
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ccc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]
 8002ce6:	615a      	str	r2, [r3, #20]
 8002ce8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	2220      	movs	r2, #32
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f006 fe77 	bl	80099e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002cf8:	4a3f      	ldr	r2, [pc, #252]	; (8002df8 <MX_TIM1_Init+0x140>)
 8002cfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8002cfc:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002cfe:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002d02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d0c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1e:	4b35      	ldr	r3, [pc, #212]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d24:	4833      	ldr	r0, [pc, #204]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d26:	f005 fa50 	bl	80081ca <HAL_TIM_Base_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d30:	f001 fb4a 	bl	80043c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d3e:	4619      	mov	r1, r3
 8002d40:	482c      	ldr	r0, [pc, #176]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d42:	f005 fc93 	bl	800866c <HAL_TIM_ConfigClockSource>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d4c:	f001 fb3c 	bl	80043c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d50:	4828      	ldr	r0, [pc, #160]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d52:	f005 fa88 	bl	8008266 <HAL_TIM_PWM_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d5c:	f001 fb34 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4821      	ldr	r0, [pc, #132]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002d70:	f005 ffd8 	bl	8008d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002d7a:	f001 fb25 	bl	80043c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d7e:	2360      	movs	r3, #96	; 0x60
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8002d82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4813      	ldr	r0, [pc, #76]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002da6:	f005 fb9b 	bl	80084e0 <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002db0:	f001 fb0a 	bl	80043c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4807      	ldr	r0, [pc, #28]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002dd8:	f005 ffe8 	bl	8008dac <HAL_TIMEx_ConfigBreakDeadTime>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002de2:	f001 faf1 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002de6:	4803      	ldr	r0, [pc, #12]	; (8002df4 <MX_TIM1_Init+0x13c>)
 8002de8:	f002 f8fe 	bl	8004fe8 <HAL_TIM_MspPostInit>

}
 8002dec:	bf00      	nop
 8002dee:	3758      	adds	r7, #88	; 0x58
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000ab8 	.word	0x20000ab8
 8002df8:	40012c00 	.word	0x40012c00

08002dfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	463b      	mov	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e22:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8002e26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e30:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002e34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e42:	4814      	ldr	r0, [pc, #80]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e44:	f005 f9c1 	bl	80081ca <HAL_TIM_Base_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e4e:	f001 fabb 	bl	80043c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	480d      	ldr	r0, [pc, #52]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e60:	f005 fc04 	bl	800866c <HAL_TIM_ConfigClockSource>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e6a:	f001 faad 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e76:	463b      	mov	r3, r7
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4806      	ldr	r0, [pc, #24]	; (8002e94 <MX_TIM2_Init+0x98>)
 8002e7c:	f005 ff52 	bl	8008d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e86:	f001 fa9f 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000af8 	.word	0x20000af8

08002e98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <MX_USART1_UART_Init+0x50>)
 8002ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_USART1_UART_Init+0x4c>)
 8002ed0:	f005 ffcf 	bl	8008e72 <HAL_UART_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eda:	f001 fa75 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000a78 	.word	0x20000a78
 8002ee8:	40013800 	.word	0x40013800

08002eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <MX_USART2_UART_Init+0x50>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f24:	f005 ffa5 	bl	8008e72 <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f2e:	f001 fa4b 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000b38 	.word	0x20000b38
 8002f3c:	40004400 	.word	0x40004400

08002f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <MX_USART3_UART_Init+0x50>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f66:	220c      	movs	r2, #12
 8002f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f76:	4805      	ldr	r0, [pc, #20]	; (8002f8c <MX_USART3_UART_Init+0x4c>)
 8002f78:	f005 ff7b 	bl	8008e72 <HAL_UART_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f82:	f001 fa21 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200007e4 	.word	0x200007e4
 8002f90:	40004800 	.word	0x40004800

08002f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_DMA_Init+0x38>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <MX_DMA_Init+0x38>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6153      	str	r3, [r2, #20]
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_DMA_Init+0x38>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	200d      	movs	r0, #13
 8002fb8:	f002 fbcf 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fbc:	200d      	movs	r0, #13
 8002fbe:	f002 fbe8 	bl	8005792 <HAL_NVIC_EnableIRQ>

}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <MX_GPIO_Init+0x130>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	; (8003100 <MX_GPIO_Init+0x130>)
 8002fea:	f043 0310 	orr.w	r3, r3, #16
 8002fee:	6193      	str	r3, [r2, #24]
 8002ff0:	4b43      	ldr	r3, [pc, #268]	; (8003100 <MX_GPIO_Init+0x130>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ffc:	4b40      	ldr	r3, [pc, #256]	; (8003100 <MX_GPIO_Init+0x130>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4a3f      	ldr	r2, [pc, #252]	; (8003100 <MX_GPIO_Init+0x130>)
 8003002:	f043 0320 	orr.w	r3, r3, #32
 8003006:	6193      	str	r3, [r2, #24]
 8003008:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <MX_GPIO_Init+0x130>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003014:	4b3a      	ldr	r3, [pc, #232]	; (8003100 <MX_GPIO_Init+0x130>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4a39      	ldr	r2, [pc, #228]	; (8003100 <MX_GPIO_Init+0x130>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	6193      	str	r3, [r2, #24]
 8003020:	4b37      	ldr	r3, [pc, #220]	; (8003100 <MX_GPIO_Init+0x130>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <MX_GPIO_Init+0x130>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a33      	ldr	r2, [pc, #204]	; (8003100 <MX_GPIO_Init+0x130>)
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b31      	ldr	r3, [pc, #196]	; (8003100 <MX_GPIO_Init+0x130>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003044:	2200      	movs	r2, #0
 8003046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304a:	482e      	ldr	r0, [pc, #184]	; (8003104 <MX_GPIO_Init+0x134>)
 800304c:	f002 ff91 	bl	8005f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8003050:	2200      	movs	r2, #0
 8003052:	f241 0108 	movw	r1, #4104	; 0x1008
 8003056:	482c      	ldr	r0, [pc, #176]	; (8003108 <MX_GPIO_Init+0x138>)
 8003058:	f002 ff8b 	bl	8005f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 800305c:	2200      	movs	r2, #0
 800305e:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8003062:	482a      	ldr	r0, [pc, #168]	; (800310c <MX_GPIO_Init+0x13c>)
 8003064:	f002 ff85 	bl	8005f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800306c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2302      	movs	r3, #2
 8003078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	4619      	mov	r1, r3
 8003080:	4820      	ldr	r0, [pc, #128]	; (8003104 <MX_GPIO_Init+0x134>)
 8003082:	f002 fe05 	bl	8005c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8003086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003094:	2301      	movs	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	4619      	mov	r1, r3
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <MX_GPIO_Init+0x138>)
 80030a0:	f002 fdf6 	bl	8005c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80030a4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80030a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030aa:	2301      	movs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2302      	movs	r3, #2
 80030b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b6:	f107 0310 	add.w	r3, r7, #16
 80030ba:	4619      	mov	r1, r3
 80030bc:	4813      	ldr	r0, [pc, #76]	; (800310c <MX_GPIO_Init+0x13c>)
 80030be:	f002 fde7 	bl	8005c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030c2:	2308      	movs	r3, #8
 80030c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 0310 	add.w	r3, r7, #16
 80030d6:	4619      	mov	r1, r3
 80030d8:	480b      	ldr	r0, [pc, #44]	; (8003108 <MX_GPIO_Init+0x138>)
 80030da:	f002 fdd9 	bl	8005c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80030de:	f44f 734c 	mov.w	r3, #816	; 0x330
 80030e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4619      	mov	r1, r3
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_GPIO_Init+0x138>)
 80030f4:	f002 fdcc 	bl	8005c90 <HAL_GPIO_Init>

}
 80030f8:	bf00      	nop
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40011000 	.word	0x40011000
 8003108:	40010c00 	.word	0x40010c00
 800310c:	40010800 	.word	0x40010800

08003110 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d102      	bne.n	8003128 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
        }
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	200002a5 	.word	0x200002a5

08003138 <read_one_sign_from_keyboard>:
// ---------------------------------------------------------------------------
/*
  Its function read one sing from keyboard
 */
char read_one_sign_from_keyboard(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	// 2. Зробити зчитування даних з клавіатури як переривання
	char sign = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	71fb      	strb	r3, [r7, #7]
	uint8_t readed_status = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	71bb      	strb	r3, [r7, #6]

	readed_status = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	717b      	strb	r3, [r7, #5]

	for(i=1; i<=4; i++)
 800314e:	2301      	movs	r3, #1
 8003150:	717b      	strb	r3, [r7, #5]
 8003152:	e118      	b.n	8003386 <read_one_sign_from_keyboard+0x24e>
	{
		if((i == 1) && (readed_status != 1))
 8003154:	797b      	ldrb	r3, [r7, #5]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d142      	bne.n	80031e0 <read_one_sign_from_keyboard+0xa8>
 800315a:	79bb      	ldrb	r3, [r7, #6]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d03f      	beq.n	80031e0 <read_one_sign_from_keyboard+0xa8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);     // For detect 123A
 8003160:	2201      	movs	r2, #1
 8003162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003166:	488c      	ldr	r0, [pc, #560]	; (8003398 <read_one_sign_from_keyboard+0x260>)
 8003168:	f002 ff03 	bl	8005f72 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800316c:	2001      	movs	r0, #1
 800316e:	f002 f9fb 	bl	8005568 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003176:	4889      	ldr	r0, [pc, #548]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003178:	f002 fee4 	bl	8005f44 <HAL_GPIO_ReadPin>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <read_one_sign_from_keyboard+0x54>
			{
			  	sign = 'A';
 8003182:	2341      	movs	r3, #65	; 0x41
 8003184:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	e023      	b.n	80031d4 <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 800318c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003190:	4882      	ldr	r0, [pc, #520]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003192:	f002 fed7 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <read_one_sign_from_keyboard+0x6e>
			{
			  	sign = '3';
 800319c:	2333      	movs	r3, #51	; 0x33
 800319e:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	71bb      	strb	r3, [r7, #6]
 80031a4:	e016      	b.n	80031d4 <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80031a6:	2120      	movs	r1, #32
 80031a8:	487c      	ldr	r0, [pc, #496]	; (800339c <read_one_sign_from_keyboard+0x264>)
 80031aa:	f002 fecb 	bl	8005f44 <HAL_GPIO_ReadPin>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <read_one_sign_from_keyboard+0x86>
			{
			  	sign = '2';
 80031b4:	2332      	movs	r3, #50	; 0x32
 80031b6:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	71bb      	strb	r3, [r7, #6]
 80031bc:	e00a      	b.n	80031d4 <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80031be:	2110      	movs	r1, #16
 80031c0:	4876      	ldr	r0, [pc, #472]	; (800339c <read_one_sign_from_keyboard+0x264>)
 80031c2:	f002 febf 	bl	8005f44 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <read_one_sign_from_keyboard+0x9c>
			{
			  	sign = '1';
 80031cc:	2331      	movs	r3, #49	; 0x31
 80031ce:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80031d0:	2301      	movs	r3, #1
 80031d2:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031da:	486f      	ldr	r0, [pc, #444]	; (8003398 <read_one_sign_from_keyboard+0x260>)
 80031dc:	f002 fec9 	bl	8005f72 <HAL_GPIO_WritePin>
		}

		if((i == 2) && (readed_status != 1))
 80031e0:	797b      	ldrb	r3, [r7, #5]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d142      	bne.n	800326c <read_one_sign_from_keyboard+0x134>
 80031e6:	79bb      	ldrb	r3, [r7, #6]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d03f      	beq.n	800326c <read_one_sign_from_keyboard+0x134>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);     // For detect 123A
 80031ec:	2201      	movs	r2, #1
 80031ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f2:	4869      	ldr	r0, [pc, #420]	; (8003398 <read_one_sign_from_keyboard+0x260>)
 80031f4:	f002 febd 	bl	8005f72 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f002 f9b5 	bl	8005568 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80031fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003202:	4866      	ldr	r0, [pc, #408]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003204:	f002 fe9e 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <read_one_sign_from_keyboard+0xe0>
			{
				sign = 'B';
 800320e:	2342      	movs	r3, #66	; 0x42
 8003210:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	71bb      	strb	r3, [r7, #6]
 8003216:	e023      	b.n	8003260 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321c:	485f      	ldr	r0, [pc, #380]	; (800339c <read_one_sign_from_keyboard+0x264>)
 800321e:	f002 fe91 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <read_one_sign_from_keyboard+0xfa>
			{
				sign = '6';
 8003228:	2336      	movs	r3, #54	; 0x36
 800322a:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 800322c:	2301      	movs	r3, #1
 800322e:	71bb      	strb	r3, [r7, #6]
 8003230:	e016      	b.n	8003260 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003232:	2120      	movs	r1, #32
 8003234:	4859      	ldr	r0, [pc, #356]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003236:	f002 fe85 	bl	8005f44 <HAL_GPIO_ReadPin>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <read_one_sign_from_keyboard+0x112>
			{
				sign = '5';
 8003240:	2335      	movs	r3, #53	; 0x35
 8003242:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003244:	2301      	movs	r3, #1
 8003246:	71bb      	strb	r3, [r7, #6]
 8003248:	e00a      	b.n	8003260 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800324a:	2110      	movs	r1, #16
 800324c:	4853      	ldr	r0, [pc, #332]	; (800339c <read_one_sign_from_keyboard+0x264>)
 800324e:	f002 fe79 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <read_one_sign_from_keyboard+0x128>
			{
				sign = '4';
 8003258:	2334      	movs	r3, #52	; 0x34
 800325a:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 800325c:	2301      	movs	r3, #1
 800325e:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003266:	484c      	ldr	r0, [pc, #304]	; (8003398 <read_one_sign_from_keyboard+0x260>)
 8003268:	f002 fe83 	bl	8005f72 <HAL_GPIO_WritePin>
		}

		if((i == 3) && (readed_status != 1))
 800326c:	797b      	ldrb	r3, [r7, #5]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d142      	bne.n	80032f8 <read_one_sign_from_keyboard+0x1c0>
 8003272:	79bb      	ldrb	r3, [r7, #6]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d03f      	beq.n	80032f8 <read_one_sign_from_keyboard+0x1c0>
		{
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);     // For detect 123A
 8003278:	2201      	movs	r2, #1
 800327a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800327e:	4846      	ldr	r0, [pc, #280]	; (8003398 <read_one_sign_from_keyboard+0x260>)
 8003280:	f002 fe77 	bl	8005f72 <HAL_GPIO_WritePin>
		 	HAL_Delay(1);
 8003284:	2001      	movs	r0, #1
 8003286:	f002 f96f 	bl	8005568 <HAL_Delay>
		 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800328a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800328e:	4843      	ldr	r0, [pc, #268]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003290:	f002 fe58 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <read_one_sign_from_keyboard+0x16c>
		 	{
		 		sign = 'C';
 800329a:	2343      	movs	r3, #67	; 0x43
 800329c:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	71bb      	strb	r3, [r7, #6]
 80032a2:	e023      	b.n	80032ec <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80032a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032a8:	483c      	ldr	r0, [pc, #240]	; (800339c <read_one_sign_from_keyboard+0x264>)
 80032aa:	f002 fe4b 	bl	8005f44 <HAL_GPIO_ReadPin>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <read_one_sign_from_keyboard+0x186>
		 	{
		 		sign = '9';
 80032b4:	2339      	movs	r3, #57	; 0x39
 80032b6:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	71bb      	strb	r3, [r7, #6]
 80032bc:	e016      	b.n	80032ec <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80032be:	2120      	movs	r1, #32
 80032c0:	4836      	ldr	r0, [pc, #216]	; (800339c <read_one_sign_from_keyboard+0x264>)
 80032c2:	f002 fe3f 	bl	8005f44 <HAL_GPIO_ReadPin>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <read_one_sign_from_keyboard+0x19e>
		 	{
		 		sign = '8';
 80032cc:	2338      	movs	r3, #56	; 0x38
 80032ce:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	71bb      	strb	r3, [r7, #6]
 80032d4:	e00a      	b.n	80032ec <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80032d6:	2110      	movs	r1, #16
 80032d8:	4830      	ldr	r0, [pc, #192]	; (800339c <read_one_sign_from_keyboard+0x264>)
 80032da:	f002 fe33 	bl	8005f44 <HAL_GPIO_ReadPin>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <read_one_sign_from_keyboard+0x1b4>
		 	{
		 		 sign = '7';
 80032e4:	2337      	movs	r3, #55	; 0x37
 80032e6:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 80032e8:	2301      	movs	r3, #1
 80032ea:	71bb      	strb	r3, [r7, #6]
		 	}
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f2:	4829      	ldr	r0, [pc, #164]	; (8003398 <read_one_sign_from_keyboard+0x260>)
 80032f4:	f002 fe3d 	bl	8005f72 <HAL_GPIO_WritePin>
		}


		if((i == 3) && (readed_status != 1))
 80032f8:	797b      	ldrb	r3, [r7, #5]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d140      	bne.n	8003380 <read_one_sign_from_keyboard+0x248>
 80032fe:	79bb      	ldrb	r3, [r7, #6]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d03d      	beq.n	8003380 <read_one_sign_from_keyboard+0x248>
		{
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);     // For detect 123A
 8003304:	2201      	movs	r2, #1
 8003306:	2108      	movs	r1, #8
 8003308:	4824      	ldr	r0, [pc, #144]	; (800339c <read_one_sign_from_keyboard+0x264>)
 800330a:	f002 fe32 	bl	8005f72 <HAL_GPIO_WritePin>
		    HAL_Delay(1);
 800330e:	2001      	movs	r0, #1
 8003310:	f002 f92a 	bl	8005568 <HAL_Delay>

		   	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003318:	4820      	ldr	r0, [pc, #128]	; (800339c <read_one_sign_from_keyboard+0x264>)
 800331a:	f002 fe13 	bl	8005f44 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <read_one_sign_from_keyboard+0x1f6>
		   	{
		   		sign = 'D';
 8003324:	2344      	movs	r3, #68	; 0x44
 8003326:	71fb      	strb	r3, [r7, #7]
		   		readed_status = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	71bb      	strb	r3, [r7, #6]
 800332c:	e023      	b.n	8003376 <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 800332e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003332:	481a      	ldr	r0, [pc, #104]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003334:	f002 fe06 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <read_one_sign_from_keyboard+0x210>
		   	{
		   		 sign = '#';
 800333e:	2323      	movs	r3, #35	; 0x23
 8003340:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	71bb      	strb	r3, [r7, #6]
 8003346:	e016      	b.n	8003376 <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003348:	2120      	movs	r1, #32
 800334a:	4814      	ldr	r0, [pc, #80]	; (800339c <read_one_sign_from_keyboard+0x264>)
 800334c:	f002 fdfa 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <read_one_sign_from_keyboard+0x228>
		   	{
		   		 sign = '0';
 8003356:	2330      	movs	r3, #48	; 0x30
 8003358:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	71bb      	strb	r3, [r7, #6]
 800335e:	e00a      	b.n	8003376 <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003360:	2110      	movs	r1, #16
 8003362:	480e      	ldr	r0, [pc, #56]	; (800339c <read_one_sign_from_keyboard+0x264>)
 8003364:	f002 fdee 	bl	8005f44 <HAL_GPIO_ReadPin>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <read_one_sign_from_keyboard+0x23e>
		   	{
		   		 sign = '*';
 800336e:	232a      	movs	r3, #42	; 0x2a
 8003370:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	71bb      	strb	r3, [r7, #6]
		   	}
		   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2108      	movs	r1, #8
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <read_one_sign_from_keyboard+0x264>)
 800337c:	f002 fdf9 	bl	8005f72 <HAL_GPIO_WritePin>
	for(i=1; i<=4; i++)
 8003380:	797b      	ldrb	r3, [r7, #5]
 8003382:	3301      	adds	r3, #1
 8003384:	717b      	strb	r3, [r7, #5]
 8003386:	797b      	ldrb	r3, [r7, #5]
 8003388:	2b04      	cmp	r3, #4
 800338a:	f67f aee3 	bls.w	8003154 <read_one_sign_from_keyboard+0x1c>
		}
	}
	return sign;
 800338e:	79fb      	ldrb	r3, [r7, #7]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40010800 	.word	0x40010800
 800339c:	40010c00 	.word	0x40010c00

080033a0 <gps_mode>:
// ----------------------------------------------------------------------------
int gps_mode(char sign)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b092      	sub	sp, #72	; 0x48
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f001 fbb8 	bl	8004b20 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80033b0:	f001 fbd8 	bl	8004b64 <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gps[50]={0};
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	2232      	movs	r2, #50	; 0x32
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f006 fb11 	bl	80099e4 <memset>
	memset(str_gps, 0 , sizeof(str_gps));
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	2232      	movs	r2, #50	; 0x32
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f006 fb0a 	bl	80099e4 <memset>
	sprintf(str_gps,"%s", "2.GPS: waiting...");
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <gps_mode+0x1a0>)
 80033d6:	461c      	mov	r4, r3
 80033d8:	4615      	mov	r5, r2
 80033da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033de:	682b      	ldr	r3, [r5, #0]
 80033e0:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 80033e2:	2100      	movs	r1, #0
 80033e4:	2000      	movs	r0, #0
 80033e6:	f001 fcf3 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_gps, Font_7x10, White);
 80033ea:	4a56      	ldr	r2, [pc, #344]	; (8003544 <gps_mode+0x1a4>)
 80033ec:	f107 000c 	add.w	r0, r7, #12
 80033f0:	2301      	movs	r3, #1
 80033f2:	ca06      	ldmia	r2, {r1, r2}
 80033f4:	f001 fcc6 	bl	8004d84 <ssd1306_WriteString>
	memset(str_gps, 0 , sizeof(str_gps));
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	2232      	movs	r2, #50	; 0x32
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f006 faef 	bl	80099e4 <memset>

	ssd1306_UpdateScreen();
 8003406:	f001 fbad 	bl	8004b64 <ssd1306_UpdateScreen>

	uint8_t broken_packet_counter = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	do                                                            	// Wait on choiсe
	{
		sign = read_one_sign_from_keyboard();                       // Read sign from keyboard
 8003410:	f7ff fe92 	bl	8003138 <read_one_sign_from_keyboard>
 8003414:	4603      	mov	r3, r0
 8003416:	71fb      	strb	r3, [r7, #7]

		if(sign == '*')    	// If select EXIT  // Exit in main menu
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b2a      	cmp	r3, #42	; 0x2a
 800341c:	d112      	bne.n	8003444 <gps_mode+0xa4>
		{
			// Clear all OLED
			ssd1306_Fill(Black);
 800341e:	2000      	movs	r0, #0
 8003420:	f001 fb7e 	bl	8004b20 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8003424:	f001 fb9e 	bl	8004b64 <ssd1306_UpdateScreen>

			GPS_MODE = false;
 8003428:	4b47      	ldr	r3, [pc, #284]	; (8003548 <gps_mode+0x1a8>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
			GSM_MODE = false;
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <gps_mode+0x1ac>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
			FINGERPRINT_MODE = false;
 8003434:	4b46      	ldr	r3, [pc, #280]	; (8003550 <gps_mode+0x1b0>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
			SENSORS_MODE = false;
 800343a:	4b46      	ldr	r3, [pc, #280]	; (8003554 <gps_mode+0x1b4>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]

			return 1;   // Flag_fro exit from there
 8003440:	2301      	movs	r3, #1
 8003442:	e078      	b.n	8003536 <gps_mode+0x196>
		}
		else
		{
			// Parsing data form GPS
			parsing_GPS(GPS_buff, 512);
 8003444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003448:	4843      	ldr	r0, [pc, #268]	; (8003558 <gps_mode+0x1b8>)
 800344a:	f7fe fbff 	bl	8001c4c <parsing_GPS>
			int select_print_data = 1;							// Flag for print GPS data on OLED
 800344e:	2301      	movs	r3, #1
 8003450:	643b      	str	r3, [r7, #64]	; 0x40
			OLED_prinr_all_data(select_print_data);
 8003452:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003454:	f000 ffce 	bl	80043f4 <OLED_prinr_all_data>

			if(GPGGA_data_is_ready == 1)					// Check if data from GPS device was correct ( parsed GPGLL line correct)
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <gps_mode+0x1bc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d12b      	bne.n	80034b8 <gps_mode+0x118>
			{
				// Print the data that GPS is valid
				memset(str_gps, 0 , sizeof(str_gps));
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	2232      	movs	r2, #50	; 0x32
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f006 fabb 	bl	80099e4 <memset>
				sprintf(str_gps,"%s", "1.GPS: OK            ");
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <gps_mode+0x1c0>)
 8003474:	461c      	mov	r4, r3
 8003476:	4615      	mov	r5, r2
 8003478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800347a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800347c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003480:	6020      	str	r0, [r4, #0]
 8003482:	3404      	adds	r4, #4
 8003484:	8021      	strh	r1, [r4, #0]
				ssd1306_SetCursor(00, 00);
 8003486:	2100      	movs	r1, #0
 8003488:	2000      	movs	r0, #0
 800348a:	f001 fca1 	bl	8004dd0 <ssd1306_SetCursor>
				ssd1306_WriteString(str_gps, Font_7x10, White);
 800348e:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <gps_mode+0x1a4>)
 8003490:	f107 000c 	add.w	r0, r7, #12
 8003494:	2301      	movs	r3, #1
 8003496:	ca06      	ldmia	r2, {r1, r2}
 8003498:	f001 fc74 	bl	8004d84 <ssd1306_WriteString>
				memset(str_gps, 0 , sizeof(str_gps));
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	2232      	movs	r2, #50	; 0x32
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f006 fa9d 	bl	80099e4 <memset>

				//receive_gps_signal = 0;
				broken_packet_counter = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				GPGGA_data_is_ready = 0;
 80034b0:	4b2a      	ldr	r3, [pc, #168]	; (800355c <gps_mode+0x1bc>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e038      	b.n	800352a <gps_mode+0x18a>
			}
			else
			{
				broken_packet_counter ++;
 80034b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034bc:	3301      	adds	r3, #1
 80034be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				//HAL_Delay(500);
				if((GPGGA_data_is_ready != 1) && (broken_packet_counter >= 20))
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <gps_mode+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d02f      	beq.n	800352a <gps_mode+0x18a>
 80034ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034ce:	2b13      	cmp	r3, #19
 80034d0:	d92b      	bls.n	800352a <gps_mode+0x18a>
				{
					// Print the data that GPS is does not valid
					GPGGA_data_is_ready = 0;
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <gps_mode+0x1bc>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
					broken_packet_counter = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					memset(str_gps, 0 , sizeof(str_gps));
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	2232      	movs	r2, #50	; 0x32
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f006 fa7c 	bl	80099e4 <memset>
					sprintf(str_gps,"%s", "1.GPS: NO SIGNAL  ");
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <gps_mode+0x1c4>)
 80034f2:	461c      	mov	r4, r3
 80034f4:	4615      	mov	r5, r2
 80034f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	8022      	strh	r2, [r4, #0]
 8003500:	3402      	adds	r4, #2
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 00);
 8003506:	2100      	movs	r1, #0
 8003508:	2000      	movs	r0, #0
 800350a:	f001 fc61 	bl	8004dd0 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gps, Font_7x10, White);
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <gps_mode+0x1a4>)
 8003510:	f107 000c 	add.w	r0, r7, #12
 8003514:	2301      	movs	r3, #1
 8003516:	ca06      	ldmia	r2, {r1, r2}
 8003518:	f001 fc34 	bl	8004d84 <ssd1306_WriteString>
					memset(str_gps, 0 , sizeof(str_gps));
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	2232      	movs	r2, #50	; 0x32
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f006 fa5d 	bl	80099e4 <memset>
				}
			}

			ssd1306_UpdateScreen();
 800352a:	f001 fb1b 	bl	8004b64 <ssd1306_UpdateScreen>
		}
	}while ( (sign != '*'));     // Select one from 3 modes
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b2a      	cmp	r3, #42	; 0x2a
 8003532:	f47f af6d 	bne.w	8003410 <gps_mode+0x70>
}
 8003536:	4618      	mov	r0, r3
 8003538:	3748      	adds	r7, #72	; 0x48
 800353a:	46bd      	mov	sp, r7
 800353c:	bdb0      	pop	{r4, r5, r7, pc}
 800353e:	bf00      	nop
 8003540:	0800cf7c 	.word	0x0800cf7c
 8003544:	2000004c 	.word	0x2000004c
 8003548:	200002a1 	.word	0x200002a1
 800354c:	200002a0 	.word	0x200002a0
 8003550:	200002a2 	.word	0x200002a2
 8003554:	200002a3 	.word	0x200002a3
 8003558:	20000878 	.word	0x20000878
 800355c:	20000254 	.word	0x20000254
 8003560:	0800cf90 	.word	0x0800cf90
 8003564:	0800cfa8 	.word	0x0800cfa8

08003568 <gsm_mode>:
// ----------------------------------------------------------------------------
int gsm_mode(char sign)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b0a2      	sub	sp, #136	; 0x88
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003572:	2000      	movs	r0, #0
 8003574:	f001 fad4 	bl	8004b20 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003578:	f001 faf4 	bl	8004b64 <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gsm[50]={0};
 800357c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003580:	2232      	movs	r2, #50	; 0x32
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f006 fa2d 	bl	80099e4 <memset>
	sprintf(str_gsm,"%s", "1.GSM: waiting...");
 800358a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800358e:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <gsm_mode+0x218>)
 8003590:	461c      	mov	r4, r3
 8003592:	4615      	mov	r5, r2
 8003594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 800359c:	2100      	movs	r1, #0
 800359e:	2000      	movs	r0, #0
 80035a0:	f001 fc16 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_gsm, Font_7x10, White);
 80035a4:	4a77      	ldr	r2, [pc, #476]	; (8003784 <gsm_mode+0x21c>)
 80035a6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035aa:	2301      	movs	r3, #1
 80035ac:	ca06      	ldmia	r2, {r1, r2}
 80035ae:	f001 fbe9 	bl	8004d84 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80035b2:	f001 fad7 	bl	8004b64 <ssd1306_UpdateScreen>

	// Init GSM module////////////////////////////
	init_GSM_uart_comunication();
 80035b6:	f7fe fbf3 	bl	8001da0 <init_GSM_uart_comunication>
	if(init_gsm_module() == HAL_OK)
 80035ba:	f7fe fc03 	bl	8001dc4 <init_gsm_module>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d12f      	bne.n	8003624 <gsm_mode+0xbc>
	{
		// init OK
		GSM_INIT = 1;
 80035c4:	4b70      	ldr	r3, [pc, #448]	; (8003788 <gsm_mode+0x220>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]

		sprintf(str_gsm,"%s", "                    ");
 80035ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ce:	4a6f      	ldr	r2, [pc, #444]	; (800378c <gsm_mode+0x224>)
 80035d0:	461c      	mov	r4, r3
 80035d2:	4615      	mov	r5, r2
 80035d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035dc:	6020      	str	r0, [r4, #0]
 80035de:	3404      	adds	r4, #4
 80035e0:	7021      	strb	r1, [r4, #0]
		ssd1306_SetCursor(00, 00);
 80035e2:	2100      	movs	r1, #0
 80035e4:	2000      	movs	r0, #0
 80035e6:	f001 fbf3 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80035ea:	4a66      	ldr	r2, [pc, #408]	; (8003784 <gsm_mode+0x21c>)
 80035ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035f0:	2301      	movs	r3, #1
 80035f2:	ca06      	ldmia	r2, {r1, r2}
 80035f4:	f001 fbc6 	bl	8004d84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80035f8:	f001 fab4 	bl	8004b64 <ssd1306_UpdateScreen>

		sprintf(str_gsm,"%s", "2.GSM: OK");
 80035fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003600:	4a63      	ldr	r2, [pc, #396]	; (8003790 <gsm_mode+0x228>)
 8003602:	ca07      	ldmia	r2, {r0, r1, r2}
 8003604:	c303      	stmia	r3!, {r0, r1}
 8003606:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 8003608:	2100      	movs	r1, #0
 800360a:	2000      	movs	r0, #0
 800360c:	f001 fbe0 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003610:	4a5c      	ldr	r2, [pc, #368]	; (8003784 <gsm_mode+0x21c>)
 8003612:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003616:	2301      	movs	r3, #1
 8003618:	ca06      	ldmia	r2, {r1, r2}
 800361a:	f001 fbb3 	bl	8004d84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800361e:	f001 faa1 	bl	8004b64 <ssd1306_UpdateScreen>
 8003622:	e030      	b.n	8003686 <gsm_mode+0x11e>
	}
	else
	{
		// GSM didn't init
		GSM_INIT = 0;
 8003624:	4b58      	ldr	r3, [pc, #352]	; (8003788 <gsm_mode+0x220>)
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]

		sprintf(str_gsm,"%s", "                    ");
 800362a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800362e:	4a57      	ldr	r2, [pc, #348]	; (800378c <gsm_mode+0x224>)
 8003630:	461c      	mov	r4, r3
 8003632:	4615      	mov	r5, r2
 8003634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003638:	e895 0003 	ldmia.w	r5, {r0, r1}
 800363c:	6020      	str	r0, [r4, #0]
 800363e:	3404      	adds	r4, #4
 8003640:	7021      	strb	r1, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8003642:	2100      	movs	r1, #0
 8003644:	2000      	movs	r0, #0
 8003646:	f001 fbc3 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 800364a:	4a4e      	ldr	r2, [pc, #312]	; (8003784 <gsm_mode+0x21c>)
 800364c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003650:	2301      	movs	r3, #1
 8003652:	ca06      	ldmia	r2, {r1, r2}
 8003654:	f001 fb96 	bl	8004d84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003658:	f001 fa84 	bl	8004b64 <ssd1306_UpdateScreen>

		sprintf(str_gsm,"%s", "2.GSM: ERROR");
 800365c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003660:	4a4c      	ldr	r2, [pc, #304]	; (8003794 <gsm_mode+0x22c>)
 8003662:	461c      	mov	r4, r3
 8003664:	4613      	mov	r3, r2
 8003666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003668:	c407      	stmia	r4!, {r0, r1, r2}
 800366a:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 800366c:	2100      	movs	r1, #0
 800366e:	2000      	movs	r0, #0
 8003670:	f001 fbae 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003674:	4a43      	ldr	r2, [pc, #268]	; (8003784 <gsm_mode+0x21c>)
 8003676:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800367a:	2301      	movs	r3, #1
 800367c:	ca06      	ldmia	r2, {r1, r2}
 800367e:	f001 fb81 	bl	8004d84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003682:	f001 fa6f 	bl	8004b64 <ssd1306_UpdateScreen>
	}
		// END INIT GSM MODULE  //////////////////////////

    if(GSM_INIT == 1)
 8003686:	4b40      	ldr	r3, [pc, #256]	; (8003788 <gsm_mode+0x220>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 81aa 	bne.w	80039e4 <gsm_mode+0x47c>
    {
		// Print GSM menu
		sprintf(str_gsm,"%s", "1.CALL to me");
 8003690:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003694:	4a40      	ldr	r2, [pc, #256]	; (8003798 <gsm_mode+0x230>)
 8003696:	461c      	mov	r4, r3
 8003698:	4613      	mov	r3, r2
 800369a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800369c:	c407      	stmia	r4!, {r0, r1, r2}
 800369e:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 80036a0:	2110      	movs	r1, #16
 80036a2:	2000      	movs	r0, #0
 80036a4:	f001 fb94 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80036a8:	4a36      	ldr	r2, [pc, #216]	; (8003784 <gsm_mode+0x21c>)
 80036aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036ae:	2301      	movs	r3, #1
 80036b0:	ca06      	ldmia	r2, {r1, r2}
 80036b2:	f001 fb67 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 80036b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036ba:	2232      	movs	r2, #50	; 0x32
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f006 f990 	bl	80099e4 <memset>

		sprintf(str_gsm,"%s", "2.CALL on number");
 80036c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036c8:	4a34      	ldr	r2, [pc, #208]	; (800379c <gsm_mode+0x234>)
 80036ca:	461c      	mov	r4, r3
 80036cc:	4615      	mov	r5, r2
 80036ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 80036d6:	211a      	movs	r1, #26
 80036d8:	2000      	movs	r0, #0
 80036da:	f001 fb79 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80036de:	4a29      	ldr	r2, [pc, #164]	; (8003784 <gsm_mode+0x21c>)
 80036e0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036e4:	2301      	movs	r3, #1
 80036e6:	ca06      	ldmia	r2, {r1, r2}
 80036e8:	f001 fb4c 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 80036ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036f0:	2232      	movs	r2, #50	; 0x32
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f006 f975 	bl	80099e4 <memset>

		sprintf(str_gsm,"%s", "3.For send SMS");
 80036fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036fe:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <gsm_mode+0x238>)
 8003700:	461c      	mov	r4, r3
 8003702:	4613      	mov	r3, r2
 8003704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003706:	c407      	stmia	r4!, {r0, r1, r2}
 8003708:	8023      	strh	r3, [r4, #0]
 800370a:	3402      	adds	r4, #2
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8003710:	2124      	movs	r1, #36	; 0x24
 8003712:	2000      	movs	r0, #0
 8003714:	f001 fb5c 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003718:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <gsm_mode+0x21c>)
 800371a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800371e:	2301      	movs	r3, #1
 8003720:	ca06      	ldmia	r2, {r1, r2}
 8003722:	f001 fb2f 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8003726:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800372a:	2232      	movs	r2, #50	; 0x32
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f006 f958 	bl	80099e4 <memset>
//		sprintf(str_gsm,"%s", "STATUS: ");
//		ssd1306_SetCursor(00, 46);
//		ssd1306_WriteString(str_gsm, Font_7x10, White);
//		memset(str_gsm, 0 , sizeof(str_gsm));

		ssd1306_UpdateScreen();
 8003734:	f001 fa16 	bl	8004b64 <ssd1306_UpdateScreen>

		// Select GSM menu or EXIT
		do                                                            // Whaite for choise
		{
			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003738:	f7ff fcfe 	bl	8003138 <read_one_sign_from_keyboard>
 800373c:	4603      	mov	r3, r0
 800373e:	71fb      	strb	r3, [r7, #7]

			if(sign == '1')    // If select Call mode
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2b31      	cmp	r3, #49	; 0x31
 8003744:	d109      	bne.n	800375a <gsm_mode+0x1f2>
			{
				int call_status = call_on_mu_number();
 8003746:	f7fe fd53 	bl	80021f0 <call_on_mu_number>
 800374a:	67b8      	str	r0, [r7, #120]	; 0x78
				show_sratus_call (call_status, str_gsm, sign, 1);
 800374c:	79fa      	ldrb	r2, [r7, #7]
 800374e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003752:	2301      	movs	r3, #1
 8003754:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003756:	f000 fcdf 	bl	8004118 <show_sratus_call>
			}
			// 1. Type mobile number
			//enter_a_mobile_number();
			//enter_a_mobile_number();

			if(sign == '2')
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b32      	cmp	r3, #50	; 0x32
 800375e:	f040 811d 	bne.w	800399c <gsm_mode+0x434>
			{
				// 1. Clean OLED
				bool entered_number_status = false;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

				int h = 16;
 8003768:	2310      	movs	r3, #16
 800376a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				char str[30] = {0};
 800376e:	f107 031c 	add.w	r3, r7, #28
 8003772:	221e      	movs	r2, #30
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f006 f934 	bl	80099e4 <memset>
				while(h != 46)
 800377c:	e038      	b.n	80037f0 <gsm_mode+0x288>
 800377e:	bf00      	nop
 8003780:	0800cfbc 	.word	0x0800cfbc
 8003784:	2000004c 	.word	0x2000004c
 8003788:	20000259 	.word	0x20000259
 800378c:	0800cfd0 	.word	0x0800cfd0
 8003790:	0800cfe8 	.word	0x0800cfe8
 8003794:	0800cff4 	.word	0x0800cff4
 8003798:	0800d004 	.word	0x0800d004
 800379c:	0800d014 	.word	0x0800d014
 80037a0:	0800d028 	.word	0x0800d028
				{
					sprintf(str,"%s", "                    ");
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	4a9c      	ldr	r2, [pc, #624]	; (8003a1c <gsm_mode+0x4b4>)
 80037aa:	461c      	mov	r4, r3
 80037ac:	4615      	mov	r5, r2
 80037ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037b6:	6020      	str	r0, [r4, #0]
 80037b8:	3404      	adds	r4, #4
 80037ba:	7021      	strb	r1, [r4, #0]
					ssd1306_SetCursor(00, h);
 80037bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4619      	mov	r1, r3
 80037c4:	2000      	movs	r0, #0
 80037c6:	f001 fb03 	bl	8004dd0 <ssd1306_SetCursor>
					ssd1306_WriteString(str, Font_7x10, White);
 80037ca:	4a95      	ldr	r2, [pc, #596]	; (8003a20 <gsm_mode+0x4b8>)
 80037cc:	f107 001c 	add.w	r0, r7, #28
 80037d0:	2301      	movs	r3, #1
 80037d2:	ca06      	ldmia	r2, {r1, r2}
 80037d4:	f001 fad6 	bl	8004d84 <ssd1306_WriteString>
					memset(str, 0 , sizeof(str));
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	221e      	movs	r2, #30
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f006 f8ff 	bl	80099e4 <memset>

					h = h +10;
 80037e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037ea:	330a      	adds	r3, #10
 80037ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(h != 46)
 80037f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037f4:	2b2e      	cmp	r3, #46	; 0x2e
 80037f6:	d1d5      	bne.n	80037a4 <gsm_mode+0x23c>
				}
				ssd1306_UpdateScreen();
 80037f8:	f001 f9b4 	bl	8004b64 <ssd1306_UpdateScreen>
				HAL_Delay(500);
 80037fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003800:	f001 feb2 	bl	8005568 <HAL_Delay>
				//

                // 2. Type numbers
				sprintf(str,"%s", "Enter number:");
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4a86      	ldr	r2, [pc, #536]	; (8003a24 <gsm_mode+0x4bc>)
 800380a:	461c      	mov	r4, r3
 800380c:	4613      	mov	r3, r2
 800380e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003810:	c407      	stmia	r4!, {r0, r1, r2}
 8003812:	8023      	strh	r3, [r4, #0]
				ssd1306_SetCursor(00, 16);
 8003814:	2110      	movs	r1, #16
 8003816:	2000      	movs	r0, #0
 8003818:	f001 fada 	bl	8004dd0 <ssd1306_SetCursor>
				ssd1306_WriteString(str, Font_7x10, White);
 800381c:	4a80      	ldr	r2, [pc, #512]	; (8003a20 <gsm_mode+0x4b8>)
 800381e:	f107 001c 	add.w	r0, r7, #28
 8003822:	2301      	movs	r3, #1
 8003824:	ca06      	ldmia	r2, {r1, r2}
 8003826:	f001 faad 	bl	8004d84 <ssd1306_WriteString>
				memset(str, 0 , sizeof(str));
 800382a:	f107 031c 	add.w	r3, r7, #28
 800382e:	221e      	movs	r2, #30
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f006 f8d6 	bl	80099e4 <memset>

				ssd1306_UpdateScreen();
 8003838:	f001 f994 	bl	8004b64 <ssd1306_UpdateScreen>

				uint8_t k = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				char sing_number;
				char number[13]={0};
 8003842:	f107 030c 	add.w	r3, r7, #12
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	731a      	strb	r2, [r3, #12]
				do{
					sing_number = read_one_sign_from_keyboard();
 8003850:	f7ff fc72 	bl	8003138 <read_one_sign_from_keyboard>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					if ((sing_number != '\0') && (sing_number != 'D'))  	// Enter one digit
 800385a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02d      	beq.n	80038be <gsm_mode+0x356>
 8003862:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003866:	2b44      	cmp	r3, #68	; 0x44
 8003868:	d029      	beq.n	80038be <gsm_mode+0x356>
					{
						number[k] = sing_number;
 800386a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800386e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003872:	4413      	add	r3, r2
 8003874:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8003878:	f803 2c7c 	strb.w	r2, [r3, #-124]
						k++;
 800387c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003880:	3301      	adds	r3, #1
 8003882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

                        //i=i+10;
						// print all mumbers
						sprintf(str,"%s", number);
 8003886:	f107 020c 	add.w	r2, r7, #12
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f006 f8eb 	bl	8009a6c <strcpy>
						ssd1306_SetCursor(00, 26);
 8003896:	211a      	movs	r1, #26
 8003898:	2000      	movs	r0, #0
 800389a:	f001 fa99 	bl	8004dd0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_7x10, White);
 800389e:	4a60      	ldr	r2, [pc, #384]	; (8003a20 <gsm_mode+0x4b8>)
 80038a0:	f107 001c 	add.w	r0, r7, #28
 80038a4:	2301      	movs	r3, #1
 80038a6:	ca06      	ldmia	r2, {r1, r2}
 80038a8:	f001 fa6c 	bl	8004d84 <ssd1306_WriteString>
						memset(str, 0 , sizeof(str));
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	221e      	movs	r2, #30
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f006 f895 	bl	80099e4 <memset>
						ssd1306_UpdateScreen();
 80038ba:	f001 f953 	bl	8004b64 <ssd1306_UpdateScreen>

					}
					if((sing_number == 'D') && (k >=1))						// Delete one digit
 80038be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80038c2:	2b44      	cmp	r3, #68	; 0x44
 80038c4:	d12c      	bne.n	8003920 <gsm_mode+0x3b8>
 80038c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d028      	beq.n	8003920 <gsm_mode+0x3b8>
					{
						k--;
 80038ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						number[k] = ' ';
 80038d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038dc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80038e0:	4413      	add	r3, r2
 80038e2:	2220      	movs	r2, #32
 80038e4:	f803 2c7c 	strb.w	r2, [r3, #-124]

						sprintf(str,"%s", number);
 80038e8:	f107 020c 	add.w	r2, r7, #12
 80038ec:	f107 031c 	add.w	r3, r7, #28
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f006 f8ba 	bl	8009a6c <strcpy>
						ssd1306_SetCursor(00, 26);
 80038f8:	211a      	movs	r1, #26
 80038fa:	2000      	movs	r0, #0
 80038fc:	f001 fa68 	bl	8004dd0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_7x10, White);
 8003900:	4a47      	ldr	r2, [pc, #284]	; (8003a20 <gsm_mode+0x4b8>)
 8003902:	f107 001c 	add.w	r0, r7, #28
 8003906:	2301      	movs	r3, #1
 8003908:	ca06      	ldmia	r2, {r1, r2}
 800390a:	f001 fa3b 	bl	8004d84 <ssd1306_WriteString>
						memset(str, 0 , sizeof(str));
 800390e:	f107 031c 	add.w	r3, r7, #28
 8003912:	221e      	movs	r2, #30
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f006 f864 	bl	80099e4 <memset>
						ssd1306_UpdateScreen();
 800391c:	f001 f922 	bl	8004b64 <ssd1306_UpdateScreen>
					}

					if(k == 12)												// If all digits was entered
 8003920:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d102      	bne.n	800392e <gsm_mode+0x3c6>
					{
						entered_number_status = true;						// Status. All digit entered
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						//break;
					}

					HAL_Delay(200);
 800392e:	20c8      	movs	r0, #200	; 0xc8
 8003930:	f001 fe1a 	bl	8005568 <HAL_Delay>
				}while ((sing_number != '*') && (entered_number_status != true));
 8003934:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003938:	2b2a      	cmp	r3, #42	; 0x2a
 800393a:	d006      	beq.n	800394a <gsm_mode+0x3e2>
 800393c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003940:	f083 0301 	eor.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d182      	bne.n	8003850 <gsm_mode+0x2e8>
				//}while ((sing_number != '*') && (k != 12));

				uint8_t size_number = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
				for(size_number = 0; number[size_number] != '\0'; size_number++){}
 8003950:	2300      	movs	r3, #0
 8003952:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003956:	e004      	b.n	8003962 <gsm_mode+0x3fa>
 8003958:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800395c:	3301      	adds	r3, #1
 800395e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003962:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003966:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800396a:	4413      	add	r3, r2
 800396c:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f1      	bne.n	8003958 <gsm_mode+0x3f0>

				if(entered_number_status == true)
 8003974:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00f      	beq.n	800399c <gsm_mode+0x434>
				{
					int call_status = call_on_number(number, size_number);
 800397c:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fc8c 	bl	80022a4 <call_on_number>
 800398c:	6738      	str	r0, [r7, #112]	; 0x70
					show_sratus_call(call_status, str_gsm, sign, 0);
 800398e:	79fa      	ldrb	r2, [r7, #7]
 8003990:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003994:	2300      	movs	r3, #0
 8003996:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003998:	f000 fbbe 	bl	8004118 <show_sratus_call>
			}
			if(sign == '3')    // If select SMS mode (don't realised)
			{

			}
			if(sign == '*')    // If select EXIT  // Exit in main menu
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d112      	bne.n	80039c8 <gsm_mode+0x460>
			{
				// Clear all OLED
				ssd1306_Fill(Black);
 80039a2:	2000      	movs	r0, #0
 80039a4:	f001 f8bc 	bl	8004b20 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80039a8:	f001 f8dc 	bl	8004b64 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <gsm_mode+0x4c0>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <gsm_mode+0x4c4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <gsm_mode+0x4c8>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <gsm_mode+0x4cc>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]

				return 1;  			 // Flag_fro exit from there
 80039c4:	2301      	movs	r3, #1
 80039c6:	e024      	b.n	8003a12 <gsm_mode+0x4aa>
			}

		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b31      	cmp	r3, #49	; 0x31
 80039cc:	d021      	beq.n	8003a12 <gsm_mode+0x4aa>
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b32      	cmp	r3, #50	; 0x32
 80039d2:	d01e      	beq.n	8003a12 <gsm_mode+0x4aa>
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b33      	cmp	r3, #51	; 0x33
 80039d8:	d01b      	beq.n	8003a12 <gsm_mode+0x4aa>
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	2b2a      	cmp	r3, #42	; 0x2a
 80039de:	f47f aeab 	bne.w	8003738 <gsm_mode+0x1d0>
 80039e2:	e016      	b.n	8003a12 <gsm_mode+0x4aa>
	}
    else     				// If error init GSM module. Exit from GSM menu
    {
        HAL_Delay(2000);
 80039e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039e8:	f001 fdbe 	bl	8005568 <HAL_Delay>

        // Clear all OLED
        ssd1306_Fill(Black);
 80039ec:	2000      	movs	r0, #0
 80039ee:	f001 f897 	bl	8004b20 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 80039f2:	f001 f8b7 	bl	8004b64 <ssd1306_UpdateScreen>

        GPS_MODE = false;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <gsm_mode+0x4c0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
        GSM_MODE = false;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <gsm_mode+0x4c4>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
        FINGERPRINT_MODE = false;
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <gsm_mode+0x4c8>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
        SENSORS_MODE = false;
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <gsm_mode+0x4cc>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]

        return 1;  			 // Flag_fro exit from there
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e7ff      	b.n	8003a12 <gsm_mode+0x4aa>
    }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3788      	adds	r7, #136	; 0x88
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bdb0      	pop	{r4, r5, r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0800cfd0 	.word	0x0800cfd0
 8003a20:	2000004c 	.word	0x2000004c
 8003a24:	0800d038 	.word	0x0800d038
 8003a28:	200002a1 	.word	0x200002a1
 8003a2c:	200002a0 	.word	0x200002a0
 8003a30:	200002a2 	.word	0x200002a2
 8003a34:	200002a3 	.word	0x200002a3

08003a38 <fingerprint_mode>:
// ----------------------------------------------------------------------------
int fingerprint_mode(char sign)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b091      	sub	sp, #68	; 0x44
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f001 f86c 	bl	8004b20 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003a48:	f001 f88c 	bl	8004b64 <ssd1306_UpdateScreen>
	// Fingerprint code place where
	// Print mode in head
	char str_fingerprint[50]={0};
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	2232      	movs	r2, #50	; 0x32
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f005 ffc5 	bl	80099e4 <memset>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	2232      	movs	r2, #50	; 0x32
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f005 ffbe 	bl	80099e4 <memset>
	sprintf(str_fingerprint,"%s", "3.FINGERPRINT");
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	4abf      	ldr	r2, [pc, #764]	; (8003d6c <fingerprint_mode+0x334>)
 8003a6e:	461c      	mov	r4, r3
 8003a70:	4613      	mov	r3, r2
 8003a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a74:	c407      	stmia	r4!, {r0, r1, r2}
 8003a76:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 8003a78:	2100      	movs	r1, #0
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f001 f9a8 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003a80:	4abb      	ldr	r2, [pc, #748]	; (8003d70 <fingerprint_mode+0x338>)
 8003a82:	f107 000c 	add.w	r0, r7, #12
 8003a86:	2301      	movs	r3, #1
 8003a88:	ca06      	ldmia	r2, {r1, r2}
 8003a8a:	f001 f97b 	bl	8004d84 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	2232      	movs	r2, #50	; 0x32
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f005 ffa4 	bl	80099e4 <memset>

	// Print meu fingerprint
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	2232      	movs	r2, #50	; 0x32
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f005 ff9d 	bl	80099e4 <memset>
	sprintf(str_fingerprint,"%s", "1. function 1");
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4ab1      	ldr	r2, [pc, #708]	; (8003d74 <fingerprint_mode+0x33c>)
 8003ab0:	461c      	mov	r4, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ab6:	c407      	stmia	r4!, {r0, r1, r2}
 8003ab8:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 16);
 8003aba:	2110      	movs	r1, #16
 8003abc:	2000      	movs	r0, #0
 8003abe:	f001 f987 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003ac2:	4aab      	ldr	r2, [pc, #684]	; (8003d70 <fingerprint_mode+0x338>)
 8003ac4:	f107 000c 	add.w	r0, r7, #12
 8003ac8:	2301      	movs	r3, #1
 8003aca:	ca06      	ldmia	r2, {r1, r2}
 8003acc:	f001 f95a 	bl	8004d84 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	2232      	movs	r2, #50	; 0x32
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 ff83 	bl	80099e4 <memset>

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003ade:	f107 030c 	add.w	r3, r7, #12
 8003ae2:	2232      	movs	r2, #50	; 0x32
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f005 ff7c 	bl	80099e4 <memset>
	sprintf(str_fingerprint,"%s", "2. function 2");
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	4aa1      	ldr	r2, [pc, #644]	; (8003d78 <fingerprint_mode+0x340>)
 8003af2:	461c      	mov	r4, r3
 8003af4:	4613      	mov	r3, r2
 8003af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af8:	c407      	stmia	r4!, {r0, r1, r2}
 8003afa:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 26);
 8003afc:	211a      	movs	r1, #26
 8003afe:	2000      	movs	r0, #0
 8003b00:	f001 f966 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003b04:	4a9a      	ldr	r2, [pc, #616]	; (8003d70 <fingerprint_mode+0x338>)
 8003b06:	f107 000c 	add.w	r0, r7, #12
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	ca06      	ldmia	r2, {r1, r2}
 8003b0e:	f001 f939 	bl	8004d84 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	2232      	movs	r2, #50	; 0x32
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f005 ff62 	bl	80099e4 <memset>

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	2232      	movs	r2, #50	; 0x32
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f005 ff5b 	bl	80099e4 <memset>
	sprintf(str_fingerprint,"%s", "3. function 3");
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	4a92      	ldr	r2, [pc, #584]	; (8003d7c <fingerprint_mode+0x344>)
 8003b34:	461c      	mov	r4, r3
 8003b36:	4613      	mov	r3, r2
 8003b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b3a:	c407      	stmia	r4!, {r0, r1, r2}
 8003b3c:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 36);
 8003b3e:	2124      	movs	r1, #36	; 0x24
 8003b40:	2000      	movs	r0, #0
 8003b42:	f001 f945 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003b46:	4a8a      	ldr	r2, [pc, #552]	; (8003d70 <fingerprint_mode+0x338>)
 8003b48:	f107 000c 	add.w	r0, r7, #12
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	ca06      	ldmia	r2, {r1, r2}
 8003b50:	f001 f918 	bl	8004d84 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	2232      	movs	r2, #50	; 0x32
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f005 ff41 	bl	80099e4 <memset>

	ssd1306_UpdateScreen();
 8003b62:	f000 ffff 	bl	8004b64 <ssd1306_UpdateScreen>

	do                                                            // Whaite for choise
	{
		// Place for sensors code
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003b66:	f7ff fae7 	bl	8003138 <read_one_sign_from_keyboard>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
	    if(sign == '1')
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b31      	cmp	r3, #49	; 0x31
 8003b72:	d144      	bne.n	8003bfe <fingerprint_mode+0x1c6>
	    {
	    	// Clear all OLED
	        ssd1306_Fill(Black);
 8003b74:	2000      	movs	r0, #0
 8003b76:	f000 ffd3 	bl	8004b20 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 8003b7a:	f000 fff3 	bl	8004b64 <ssd1306_UpdateScreen>
	        // Print mode in head

	        // Ptint selected menu
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	2232      	movs	r2, #50	; 0x32
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f005 ff2c 	bl	80099e4 <memset>
	        sprintf(str_fingerprint,"%s", "1. function 1");
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	4a78      	ldr	r2, [pc, #480]	; (8003d74 <fingerprint_mode+0x33c>)
 8003b92:	461c      	mov	r4, r3
 8003b94:	4613      	mov	r3, r2
 8003b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b98:	c407      	stmia	r4!, {r0, r1, r2}
 8003b9a:	8023      	strh	r3, [r4, #0]
	        ssd1306_SetCursor(00, 00);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f001 f916 	bl	8004dd0 <ssd1306_SetCursor>
	        ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003ba4:	4a72      	ldr	r2, [pc, #456]	; (8003d70 <fingerprint_mode+0x338>)
 8003ba6:	f107 000c 	add.w	r0, r7, #12
 8003baa:	2301      	movs	r3, #1
 8003bac:	ca06      	ldmia	r2, {r1, r2}
 8003bae:	f001 f8e9 	bl	8004d84 <ssd1306_WriteString>
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	2232      	movs	r2, #50	; 0x32
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f005 ff12 	bl	80099e4 <memset>

	        ssd1306_UpdateScreen();
 8003bc0:	f000 ffd0 	bl	8004b64 <ssd1306_UpdateScreen>

	        do                                                            // Whaite for choise
	        {
	            // Place for code function 1

	            sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003bc4:	f7ff fab8 	bl	8003138 <read_one_sign_from_keyboard>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]

	            if(sign == '*')    // If select EXIT  // Exit in main menu
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd0:	d112      	bne.n	8003bf8 <fingerprint_mode+0x1c0>
	            {
	            	// Clear all OLED
	            	ssd1306_Fill(Black);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f000 ffa4 	bl	8004b20 <ssd1306_Fill>
	            	ssd1306_UpdateScreen();
 8003bd8:	f000 ffc4 	bl	8004b64 <ssd1306_UpdateScreen>

	            	GPS_MODE = false;
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <fingerprint_mode+0x348>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
	            	GSM_MODE = false;
 8003be2:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <fingerprint_mode+0x34c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
	            	FINGERPRINT_MODE = false;
 8003be8:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <fingerprint_mode+0x350>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	            	SENSORS_MODE = false;
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <fingerprint_mode+0x354>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]

	            	return 1;          // Flag_fro exit from there
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b5      	b.n	8003d64 <fingerprint_mode+0x32c>
	            }
	         }while (sign != '*');     // Select EXIT
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfc:	d1e2      	bne.n	8003bc4 <fingerprint_mode+0x18c>
	     }

	     if(sign == '2')
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	2b32      	cmp	r3, #50	; 0x32
 8003c02:	d144      	bne.n	8003c8e <fingerprint_mode+0x256>
	     {
	        // Clear all OLED
	        ssd1306_Fill(Black);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f000 ff8b 	bl	8004b20 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 8003c0a:	f000 ffab 	bl	8004b64 <ssd1306_UpdateScreen>
	        // Print mode in head

	        // Ptint selected menu
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	2232      	movs	r2, #50	; 0x32
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f005 fee4 	bl	80099e4 <memset>
	        sprintf(str_fingerprint,"%s", "1. function 2");
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	4a5b      	ldr	r2, [pc, #364]	; (8003d90 <fingerprint_mode+0x358>)
 8003c22:	461c      	mov	r4, r3
 8003c24:	4613      	mov	r3, r2
 8003c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c28:	c407      	stmia	r4!, {r0, r1, r2}
 8003c2a:	8023      	strh	r3, [r4, #0]
	        ssd1306_SetCursor(00, 00);
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f001 f8ce 	bl	8004dd0 <ssd1306_SetCursor>
	        ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003c34:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <fingerprint_mode+0x338>)
 8003c36:	f107 000c 	add.w	r0, r7, #12
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	ca06      	ldmia	r2, {r1, r2}
 8003c3e:	f001 f8a1 	bl	8004d84 <ssd1306_WriteString>
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	2232      	movs	r2, #50	; 0x32
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f005 feca 	bl	80099e4 <memset>

	        ssd1306_UpdateScreen();
 8003c50:	f000 ff88 	bl	8004b64 <ssd1306_UpdateScreen>

	        do                                                            // Whaite for choise
	        {
	        	// Place for code function 2

	        	sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003c54:	f7ff fa70 	bl	8003138 <read_one_sign_from_keyboard>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	71fb      	strb	r3, [r7, #7]

	            if(sign == '*')    // If select EXIT  // Exit in main menu
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c60:	d112      	bne.n	8003c88 <fingerprint_mode+0x250>
	            {
	                // Clear all OLED
	                ssd1306_Fill(Black);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f000 ff5c 	bl	8004b20 <ssd1306_Fill>
	                ssd1306_UpdateScreen();
 8003c68:	f000 ff7c 	bl	8004b64 <ssd1306_UpdateScreen>

	                GPS_MODE = false;
 8003c6c:	4b44      	ldr	r3, [pc, #272]	; (8003d80 <fingerprint_mode+0x348>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
	                GSM_MODE = false;
 8003c72:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <fingerprint_mode+0x34c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
	                FINGERPRINT_MODE = false;
 8003c78:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <fingerprint_mode+0x350>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
	                SENSORS_MODE = false;
 8003c7e:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <fingerprint_mode+0x354>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]

	                return 1;          // Flag_fro exit from there
 8003c84:	2301      	movs	r3, #1
 8003c86:	e06d      	b.n	8003d64 <fingerprint_mode+0x32c>
	            }
	         }while (sign != '*');     // Select EXIT
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c8c:	d1e2      	bne.n	8003c54 <fingerprint_mode+0x21c>
	      }

	      if(sign == '3')
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b33      	cmp	r3, #51	; 0x33
 8003c92:	d144      	bne.n	8003d1e <fingerprint_mode+0x2e6>
	      {
	    	  // Clear all OLED
	          ssd1306_Fill(Black);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f000 ff43 	bl	8004b20 <ssd1306_Fill>
	          ssd1306_UpdateScreen();
 8003c9a:	f000 ff63 	bl	8004b64 <ssd1306_UpdateScreen>
	          // Print mode in head

	          // Ptint selected menu
	          memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003c9e:	f107 030c 	add.w	r3, r7, #12
 8003ca2:	2232      	movs	r2, #50	; 0x32
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f005 fe9c 	bl	80099e4 <memset>
	          sprintf(str_fingerprint,"%s", "1. function 3");
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <fingerprint_mode+0x35c>)
 8003cb2:	461c      	mov	r4, r3
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb8:	c407      	stmia	r4!, {r0, r1, r2}
 8003cba:	8023      	strh	r3, [r4, #0]
	          ssd1306_SetCursor(00, 00);
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f001 f886 	bl	8004dd0 <ssd1306_SetCursor>
	          ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003cc4:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <fingerprint_mode+0x338>)
 8003cc6:	f107 000c 	add.w	r0, r7, #12
 8003cca:	2301      	movs	r3, #1
 8003ccc:	ca06      	ldmia	r2, {r1, r2}
 8003cce:	f001 f859 	bl	8004d84 <ssd1306_WriteString>
	          memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	2232      	movs	r2, #50	; 0x32
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fe82 	bl	80099e4 <memset>

	          ssd1306_UpdateScreen();
 8003ce0:	f000 ff40 	bl	8004b64 <ssd1306_UpdateScreen>

	          do                                                            // Whaite for choise
	          {
	        	  // Place for code function 3

	               sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003ce4:	f7ff fa28 	bl	8003138 <read_one_sign_from_keyboard>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	71fb      	strb	r3, [r7, #7]

	               if(sign == '*')    // If select EXIT  // Exit in main menu
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf0:	d112      	bne.n	8003d18 <fingerprint_mode+0x2e0>
	               {
	                   // Clear all OLED
	                   ssd1306_Fill(Black);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f000 ff14 	bl	8004b20 <ssd1306_Fill>
	                   ssd1306_UpdateScreen();
 8003cf8:	f000 ff34 	bl	8004b64 <ssd1306_UpdateScreen>

	                   GPS_MODE = false;
 8003cfc:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <fingerprint_mode+0x348>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
	                   GSM_MODE = false;
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <fingerprint_mode+0x34c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
	                   FINGERPRINT_MODE = false;
 8003d08:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <fingerprint_mode+0x350>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
	                   SENSORS_MODE = false;
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <fingerprint_mode+0x354>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]

	                   return 1;          // Flag_fro exit from there
 8003d14:	2301      	movs	r3, #1
 8003d16:	e025      	b.n	8003d64 <fingerprint_mode+0x32c>
	                }
	           }while (sign != '*');     // Select EXIT
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d1c:	d1e2      	bne.n	8003ce4 <fingerprint_mode+0x2ac>
	       }

		   if(sign == '*')    // If select EXIT  // Exit in main menu
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b2a      	cmp	r3, #42	; 0x2a
 8003d22:	d112      	bne.n	8003d4a <fingerprint_mode+0x312>
		   {
			    // Clear all OLED
				ssd1306_Fill(Black);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f000 fefb 	bl	8004b20 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8003d2a:	f000 ff1b 	bl	8004b64 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <fingerprint_mode+0x348>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <fingerprint_mode+0x34c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <fingerprint_mode+0x350>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <fingerprint_mode+0x354>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00c      	b.n	8003d64 <fingerprint_mode+0x32c>
			}
		   }while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b31      	cmp	r3, #49	; 0x31
 8003d4e:	d009      	beq.n	8003d64 <fingerprint_mode+0x32c>
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2b32      	cmp	r3, #50	; 0x32
 8003d54:	d006      	beq.n	8003d64 <fingerprint_mode+0x32c>
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b33      	cmp	r3, #51	; 0x33
 8003d5a:	d003      	beq.n	8003d64 <fingerprint_mode+0x32c>
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d60:	f47f af01 	bne.w	8003b66 <fingerprint_mode+0x12e>
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3744      	adds	r7, #68	; 0x44
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd90      	pop	{r4, r7, pc}
 8003d6c:	0800d048 	.word	0x0800d048
 8003d70:	2000004c 	.word	0x2000004c
 8003d74:	0800d058 	.word	0x0800d058
 8003d78:	0800d068 	.word	0x0800d068
 8003d7c:	0800d078 	.word	0x0800d078
 8003d80:	200002a1 	.word	0x200002a1
 8003d84:	200002a0 	.word	0x200002a0
 8003d88:	200002a2 	.word	0x200002a2
 8003d8c:	200002a3 	.word	0x200002a3
 8003d90:	0800d088 	.word	0x0800d088
 8003d94:	0800d098 	.word	0x0800d098

08003d98 <sensors_mode>:
// ----------------------------------------------------------------------------

int sensors_mode(char sign)
{
 8003d98:	b5b0      	push	{r4, r5, r7, lr}
 8003d9a:	b090      	sub	sp, #64	; 0x40
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
		// Clear all OLED
		ssd1306_Fill(Black);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f000 febc 	bl	8004b20 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8003da8:	f000 fedc 	bl	8004b64 <ssd1306_UpdateScreen>
		// Sensors code place where
		// Print mode in head
		char str_sensors[50]={0};
 8003dac:	f107 0308 	add.w	r3, r7, #8
 8003db0:	2232      	movs	r2, #50	; 0x32
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f005 fe15 	bl	80099e4 <memset>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	2232      	movs	r2, #50	; 0x32
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f005 fe0e 	bl	80099e4 <memset>
		sprintf(str_sensors,"%s", "4.SENSORS");
 8003dc8:	f107 0308 	add.w	r3, r7, #8
 8003dcc:	4ac7      	ldr	r2, [pc, #796]	; (80040ec <sensors_mode+0x354>)
 8003dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd0:	c303      	stmia	r3!, {r0, r1}
 8003dd2:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f000 fffa 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8003ddc:	4ac4      	ldr	r2, [pc, #784]	; (80040f0 <sensors_mode+0x358>)
 8003dde:	f107 0008 	add.w	r0, r7, #8
 8003de2:	2301      	movs	r3, #1
 8003de4:	ca06      	ldmia	r2, {r1, r2}
 8003de6:	f000 ffcd 	bl	8004d84 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	2232      	movs	r2, #50	; 0x32
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f005 fdf6 	bl	80099e4 <memset>

		// Print meu fingerprint
		memset(str_sensors, 0 , sizeof(str_sensors));
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	2232      	movs	r2, #50	; 0x32
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f005 fdef 	bl	80099e4 <memset>
		sprintf(str_sensors,"%s", "1. Run all sensors");
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	4aba      	ldr	r2, [pc, #744]	; (80040f4 <sensors_mode+0x35c>)
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	4615      	mov	r5, r2
 8003e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	8022      	strh	r2, [r4, #0]
 8003e1a:	3402      	adds	r4, #2
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 8003e20:	2110      	movs	r1, #16
 8003e22:	2000      	movs	r0, #0
 8003e24:	f000 ffd4 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8003e28:	4ab1      	ldr	r2, [pc, #708]	; (80040f0 <sensors_mode+0x358>)
 8003e2a:	f107 0008 	add.w	r0, r7, #8
 8003e2e:	2301      	movs	r3, #1
 8003e30:	ca06      	ldmia	r2, {r1, r2}
 8003e32:	f000 ffa7 	bl	8004d84 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	2232      	movs	r2, #50	; 0x32
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 fdd0 	bl	80099e4 <memset>

		memset(str_sensors, 0 , sizeof(str_sensors));
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	2232      	movs	r2, #50	; 0x32
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f005 fdc9 	bl	80099e4 <memset>
		sprintf(str_sensors,"%s", "2. function 2");
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	4aa8      	ldr	r2, [pc, #672]	; (80040f8 <sensors_mode+0x360>)
 8003e58:	461c      	mov	r4, r3
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5e:	c407      	stmia	r4!, {r0, r1, r2}
 8003e60:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8003e62:	211a      	movs	r1, #26
 8003e64:	2000      	movs	r0, #0
 8003e66:	f000 ffb3 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8003e6a:	4aa1      	ldr	r2, [pc, #644]	; (80040f0 <sensors_mode+0x358>)
 8003e6c:	f107 0008 	add.w	r0, r7, #8
 8003e70:	2301      	movs	r3, #1
 8003e72:	ca06      	ldmia	r2, {r1, r2}
 8003e74:	f000 ff86 	bl	8004d84 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8003e78:	f107 0308 	add.w	r3, r7, #8
 8003e7c:	2232      	movs	r2, #50	; 0x32
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f005 fdaf 	bl	80099e4 <memset>

		memset(str_sensors, 0 , sizeof(str_sensors));
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	2232      	movs	r2, #50	; 0x32
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f005 fda8 	bl	80099e4 <memset>
		sprintf(str_sensors,"%s", "3. function 3");
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	4a98      	ldr	r2, [pc, #608]	; (80040fc <sensors_mode+0x364>)
 8003e9a:	461c      	mov	r4, r3
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ea0:	c407      	stmia	r4!, {r0, r1, r2}
 8003ea2:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8003ea4:	2124      	movs	r1, #36	; 0x24
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f000 ff92 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8003eac:	4a90      	ldr	r2, [pc, #576]	; (80040f0 <sensors_mode+0x358>)
 8003eae:	f107 0008 	add.w	r0, r7, #8
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	ca06      	ldmia	r2, {r1, r2}
 8003eb6:	f000 ff65 	bl	8004d84 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 8003eba:	f107 0308 	add.w	r3, r7, #8
 8003ebe:	2232      	movs	r2, #50	; 0x32
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f005 fd8e 	bl	80099e4 <memset>

		ssd1306_UpdateScreen();
 8003ec8:	f000 fe4c 	bl	8004b64 <ssd1306_UpdateScreen>

		do                                                            // Whaite for choise
			{
			// Place for sensors code

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003ecc:	f7ff f934 	bl	8003138 <read_one_sign_from_keyboard>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	71fb      	strb	r3, [r7, #7]
            if(sign == '1')
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	2b31      	cmp	r3, #49	; 0x31
 8003ed8:	d150      	bne.n	8003f7c <sensors_mode+0x1e4>
            {
            	// Clear all OLED
            	ssd1306_Fill(Black);
 8003eda:	2000      	movs	r0, #0
 8003edc:	f000 fe20 	bl	8004b20 <ssd1306_Fill>
            	ssd1306_UpdateScreen();
 8003ee0:	f000 fe40 	bl	8004b64 <ssd1306_UpdateScreen>

            	// Ptint selected menu
            	memset(str_sensors, 0 , sizeof(str_sensors));
 8003ee4:	f107 0308 	add.w	r3, r7, #8
 8003ee8:	2232      	movs	r2, #50	; 0x32
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f005 fd79 	bl	80099e4 <memset>
            	sprintf(str_sensors,"%s", "1. Run all sensors");
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	4a7f      	ldr	r2, [pc, #508]	; (80040f4 <sensors_mode+0x35c>)
 8003ef8:	461c      	mov	r4, r3
 8003efa:	4615      	mov	r5, r2
 8003efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	8022      	strh	r2, [r4, #0]
 8003f06:	3402      	adds	r4, #2
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	7023      	strb	r3, [r4, #0]
            	ssd1306_SetCursor(00, 00);
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f000 ff5e 	bl	8004dd0 <ssd1306_SetCursor>
            	ssd1306_WriteString(str_sensors, Font_7x10, White);
 8003f14:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <sensors_mode+0x358>)
 8003f16:	f107 0008 	add.w	r0, r7, #8
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	ca06      	ldmia	r2, {r1, r2}
 8003f1e:	f000 ff31 	bl	8004d84 <ssd1306_WriteString>
            	memset(str_sensors, 0 , sizeof(str_sensors));
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	2232      	movs	r2, #50	; 0x32
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 fd5a 	bl	80099e4 <memset>

            	ssd1306_UpdateScreen();
 8003f30:	f000 fe18 	bl	8004b64 <ssd1306_UpdateScreen>

            	do                                                            // Whaite for choise
            	{
            		// Place for code function 1
            		// Create timer for measure
            		read_T_and_H_SI7021();
 8003f34:	f7fe fb20 	bl	8002578 <read_T_and_H_SI7021>
            		int select_print_data = 4;							// Flag for print sensors data on OLED
 8003f38:	2304      	movs	r3, #4
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
            		OLED_prinr_all_data(select_print_data);
 8003f3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f3e:	f000 fa59 	bl	80043f4 <OLED_prinr_all_data>

            		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003f42:	f7ff f8f9 	bl	8003138 <read_one_sign_from_keyboard>
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]

            		if(sign == '*')    // If select EXIT  // Exit in main menu
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4e:	d112      	bne.n	8003f76 <sensors_mode+0x1de>
            		{
            			// Stop timer for measure

            			// Clear all OLED
            			ssd1306_Fill(Black);
 8003f50:	2000      	movs	r0, #0
 8003f52:	f000 fde5 	bl	8004b20 <ssd1306_Fill>
            			ssd1306_UpdateScreen();
 8003f56:	f000 fe05 	bl	8004b64 <ssd1306_UpdateScreen>

            			GPS_MODE = false;
 8003f5a:	4b69      	ldr	r3, [pc, #420]	; (8004100 <sensors_mode+0x368>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
            			GSM_MODE = false;
 8003f60:	4b68      	ldr	r3, [pc, #416]	; (8004104 <sensors_mode+0x36c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
            			FINGERPRINT_MODE = false;
 8003f66:	4b68      	ldr	r3, [pc, #416]	; (8004108 <sensors_mode+0x370>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
            			SENSORS_MODE = false;
 8003f6c:	4b67      	ldr	r3, [pc, #412]	; (800410c <sensors_mode+0x374>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]

            			return 1;          // Flag_fro exit from there
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0b5      	b.n	80040e2 <sensors_mode+0x34a>
            		}
            	}while (sign != '*');     // Select EXIT
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7a:	d1db      	bne.n	8003f34 <sensors_mode+0x19c>
            }

            if(sign == '2')
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b32      	cmp	r3, #50	; 0x32
 8003f80:	d144      	bne.n	800400c <sensors_mode+0x274>
            {
                // Clear all OLED
                ssd1306_Fill(Black);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f000 fdcc 	bl	8004b20 <ssd1306_Fill>
               	ssd1306_UpdateScreen();
 8003f88:	f000 fdec 	bl	8004b64 <ssd1306_UpdateScreen>

                // Ptint selected menu
                memset(str_sensors, 0 , sizeof(str_sensors));
 8003f8c:	f107 0308 	add.w	r3, r7, #8
 8003f90:	2232      	movs	r2, #50	; 0x32
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f005 fd25 	bl	80099e4 <memset>
                sprintf(str_sensors,"%s", "1. function 2");
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	4a5c      	ldr	r2, [pc, #368]	; (8004110 <sensors_mode+0x378>)
 8003fa0:	461c      	mov	r4, r3
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa6:	c407      	stmia	r4!, {r0, r1, r2}
 8003fa8:	8023      	strh	r3, [r4, #0]
                ssd1306_SetCursor(00, 00);
 8003faa:	2100      	movs	r1, #0
 8003fac:	2000      	movs	r0, #0
 8003fae:	f000 ff0f 	bl	8004dd0 <ssd1306_SetCursor>
                ssd1306_WriteString(str_sensors, Font_7x10, White);
 8003fb2:	4a4f      	ldr	r2, [pc, #316]	; (80040f0 <sensors_mode+0x358>)
 8003fb4:	f107 0008 	add.w	r0, r7, #8
 8003fb8:	2301      	movs	r3, #1
 8003fba:	ca06      	ldmia	r2, {r1, r2}
 8003fbc:	f000 fee2 	bl	8004d84 <ssd1306_WriteString>
                memset(str_sensors, 0 , sizeof(str_sensors));
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	2232      	movs	r2, #50	; 0x32
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 fd0b 	bl	80099e4 <memset>

                ssd1306_UpdateScreen();
 8003fce:	f000 fdc9 	bl	8004b64 <ssd1306_UpdateScreen>

                do                                                            // Whaite for choise
                {
                       // Place for code function 2

                       sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003fd2:	f7ff f8b1 	bl	8003138 <read_one_sign_from_keyboard>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]

                       if(sign == '*')    // If select EXIT  // Exit in main menu
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fde:	d112      	bne.n	8004006 <sensors_mode+0x26e>
                       {
                            // Clear all OLED
                            ssd1306_Fill(Black);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f000 fd9d 	bl	8004b20 <ssd1306_Fill>
                            ssd1306_UpdateScreen();
 8003fe6:	f000 fdbd 	bl	8004b64 <ssd1306_UpdateScreen>

                            GPS_MODE = false;
 8003fea:	4b45      	ldr	r3, [pc, #276]	; (8004100 <sensors_mode+0x368>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
                            GSM_MODE = false;
 8003ff0:	4b44      	ldr	r3, [pc, #272]	; (8004104 <sensors_mode+0x36c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
                            FINGERPRINT_MODE = false;
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <sensors_mode+0x370>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
                            SENSORS_MODE = false;
 8003ffc:	4b43      	ldr	r3, [pc, #268]	; (800410c <sensors_mode+0x374>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]

                            return 1;          // Flag_fro exit from there
 8004002:	2301      	movs	r3, #1
 8004004:	e06d      	b.n	80040e2 <sensors_mode+0x34a>
                       }
                 }while (sign != '*');     // Select EXIT
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2b2a      	cmp	r3, #42	; 0x2a
 800400a:	d1e2      	bne.n	8003fd2 <sensors_mode+0x23a>

                // Place for code function 2
            }

            if(sign == '3')
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b33      	cmp	r3, #51	; 0x33
 8004010:	d144      	bne.n	800409c <sensors_mode+0x304>
            {
                 // Clear all OLED
                 ssd1306_Fill(Black);
 8004012:	2000      	movs	r0, #0
 8004014:	f000 fd84 	bl	8004b20 <ssd1306_Fill>
                 ssd1306_UpdateScreen();
 8004018:	f000 fda4 	bl	8004b64 <ssd1306_UpdateScreen>
                 // Print mode in head

                 // Ptint selected menu
                 memset(str_sensors, 0 , sizeof(str_sensors));
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	2232      	movs	r2, #50	; 0x32
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f005 fcdd 	bl	80099e4 <memset>
                 sprintf(str_sensors,"%s", "1. function 3");
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4a39      	ldr	r2, [pc, #228]	; (8004114 <sensors_mode+0x37c>)
 8004030:	461c      	mov	r4, r3
 8004032:	4613      	mov	r3, r2
 8004034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004036:	c407      	stmia	r4!, {r0, r1, r2}
 8004038:	8023      	strh	r3, [r4, #0]
                 ssd1306_SetCursor(00, 00);
 800403a:	2100      	movs	r1, #0
 800403c:	2000      	movs	r0, #0
 800403e:	f000 fec7 	bl	8004dd0 <ssd1306_SetCursor>
                 ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004042:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <sensors_mode+0x358>)
 8004044:	f107 0008 	add.w	r0, r7, #8
 8004048:	2301      	movs	r3, #1
 800404a:	ca06      	ldmia	r2, {r1, r2}
 800404c:	f000 fe9a 	bl	8004d84 <ssd1306_WriteString>
                 memset(str_sensors, 0 , sizeof(str_sensors));
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	2232      	movs	r2, #50	; 0x32
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f005 fcc3 	bl	80099e4 <memset>

                 ssd1306_UpdateScreen();
 800405e:	f000 fd81 	bl	8004b64 <ssd1306_UpdateScreen>

                 do                                                            // Whaite for choise
                 {
                      // Place for code function 3

                      sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004062:	f7ff f869 	bl	8003138 <read_one_sign_from_keyboard>
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]

                      if(sign == '*')    // If select EXIT  // Exit in main menu
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	2b2a      	cmp	r3, #42	; 0x2a
 800406e:	d112      	bne.n	8004096 <sensors_mode+0x2fe>
                      {
                           // Clear all OLED
                           ssd1306_Fill(Black);
 8004070:	2000      	movs	r0, #0
 8004072:	f000 fd55 	bl	8004b20 <ssd1306_Fill>
                           ssd1306_UpdateScreen();
 8004076:	f000 fd75 	bl	8004b64 <ssd1306_UpdateScreen>

                           GPS_MODE = false;
 800407a:	4b21      	ldr	r3, [pc, #132]	; (8004100 <sensors_mode+0x368>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
                           GSM_MODE = false;
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <sensors_mode+0x36c>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
                           FINGERPRINT_MODE = false;
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <sensors_mode+0x370>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
                           SENSORS_MODE = false;
 800408c:	4b1f      	ldr	r3, [pc, #124]	; (800410c <sensors_mode+0x374>)
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]

                           return 1;          // Flag_fro exit from there
 8004092:	2301      	movs	r3, #1
 8004094:	e025      	b.n	80040e2 <sensors_mode+0x34a>
                      }
                  }while (sign != '*');     // Select EXIT
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b2a      	cmp	r3, #42	; 0x2a
 800409a:	d1e2      	bne.n	8004062 <sensors_mode+0x2ca>

                 // Place for code function 3
            }

			if(sign == '*')    // If select EXIT  // Exit in main menu
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	2b2a      	cmp	r3, #42	; 0x2a
 80040a0:	d112      	bne.n	80040c8 <sensors_mode+0x330>
			{
				// Clear all OLED
				ssd1306_Fill(Black);
 80040a2:	2000      	movs	r0, #0
 80040a4:	f000 fd3c 	bl	8004b20 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80040a8:	f000 fd5c 	bl	8004b64 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <sensors_mode+0x368>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <sensors_mode+0x36c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <sensors_mode+0x370>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <sensors_mode+0x374>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 80040c4:	2301      	movs	r3, #1
 80040c6:	e00c      	b.n	80040e2 <sensors_mode+0x34a>
			}
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b31      	cmp	r3, #49	; 0x31
 80040cc:	d009      	beq.n	80040e2 <sensors_mode+0x34a>
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	2b32      	cmp	r3, #50	; 0x32
 80040d2:	d006      	beq.n	80040e2 <sensors_mode+0x34a>
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b33      	cmp	r3, #51	; 0x33
 80040d8:	d003      	beq.n	80040e2 <sensors_mode+0x34a>
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b2a      	cmp	r3, #42	; 0x2a
 80040de:	f47f aef5 	bne.w	8003ecc <sensors_mode+0x134>
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3740      	adds	r7, #64	; 0x40
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	0800d0a8 	.word	0x0800d0a8
 80040f0:	2000004c 	.word	0x2000004c
 80040f4:	0800d0b4 	.word	0x0800d0b4
 80040f8:	0800d068 	.word	0x0800d068
 80040fc:	0800d078 	.word	0x0800d078
 8004100:	200002a1 	.word	0x200002a1
 8004104:	200002a0 	.word	0x200002a0
 8004108:	200002a2 	.word	0x200002a2
 800410c:	200002a3 	.word	0x200002a3
 8004110:	0800d088 	.word	0x0800d088
 8004114:	0800d098 	.word	0x0800d098

08004118 <show_sratus_call>:
// ----------------------------------------------------------------------------

void show_sratus_call(int call_status, char *str_gsm, char sign, uint8_t where_call)
{
 8004118:	b5b0      	push	{r4, r5, r7, lr}
 800411a:	b08e      	sub	sp, #56	; 0x38
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	460b      	mov	r3, r1
 8004128:	71fb      	strb	r3, [r7, #7]
 800412a:	4613      	mov	r3, r2
 800412c:	71bb      	strb	r3, [r7, #6]
	if (where_call == 1)   // If call to me
 800412e:	79bb      	ldrb	r3, [r7, #6]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d135      	bne.n	80041a0 <show_sratus_call+0x88>
	{
		// 1. Clean OLED
		int h = 16;
 8004134:	2310      	movs	r3, #16
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
		char str[30] = {0};
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	221e      	movs	r2, #30
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f005 fc4f 	bl	80099e4 <memset>
		while(h != 46)
 8004146:	e022      	b.n	800418e <show_sratus_call+0x76>
		{
			sprintf(str,"%s", "                    ");
 8004148:	f107 0310 	add.w	r3, r7, #16
 800414c:	4a96      	ldr	r2, [pc, #600]	; (80043a8 <show_sratus_call+0x290>)
 800414e:	461c      	mov	r4, r3
 8004150:	4615      	mov	r5, r2
 8004152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004156:	e895 0003 	ldmia.w	r5, {r0, r1}
 800415a:	6020      	str	r0, [r4, #0]
 800415c:	3404      	adds	r4, #4
 800415e:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(00, h);
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	2000      	movs	r0, #0
 8004168:	f000 fe32 	bl	8004dd0 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 800416c:	4a8f      	ldr	r2, [pc, #572]	; (80043ac <show_sratus_call+0x294>)
 800416e:	f107 0010 	add.w	r0, r7, #16
 8004172:	2301      	movs	r3, #1
 8004174:	ca06      	ldmia	r2, {r1, r2}
 8004176:	f000 fe05 	bl	8004d84 <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 800417a:	f107 0310 	add.w	r3, r7, #16
 800417e:	221e      	movs	r2, #30
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f005 fc2e 	bl	80099e4 <memset>

			h = h +10;
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	330a      	adds	r3, #10
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
		while(h != 46)
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	2b2e      	cmp	r3, #46	; 0x2e
 8004192:	d1d9      	bne.n	8004148 <show_sratus_call+0x30>
		}
		ssd1306_UpdateScreen();
 8004194:	f000 fce6 	bl	8004b64 <ssd1306_UpdateScreen>
		HAL_Delay(500);
 8004198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800419c:	f001 f9e4 	bl	8005568 <HAL_Delay>
	}

	if (call_status == 1)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d134      	bne.n	8004210 <show_sratus_call+0xf8>
	{
		sprintf(str_gsm,"%s", "STATUS: Call out...");
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4a81      	ldr	r2, [pc, #516]	; (80043b0 <show_sratus_call+0x298>)
 80041aa:	461d      	mov	r5, r3
 80041ac:	4614      	mov	r4, r2
 80041ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b0:	6028      	str	r0, [r5, #0]
 80041b2:	6069      	str	r1, [r5, #4]
 80041b4:	60aa      	str	r2, [r5, #8]
 80041b6:	60eb      	str	r3, [r5, #12]
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	6128      	str	r0, [r5, #16]
		ssd1306_SetCursor(00, 36);
 80041bc:	2124      	movs	r1, #36	; 0x24
 80041be:	2000      	movs	r0, #0
 80041c0:	f000 fe06 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80041c4:	4a79      	ldr	r2, [pc, #484]	; (80043ac <show_sratus_call+0x294>)
 80041c6:	2301      	movs	r3, #1
 80041c8:	ca06      	ldmia	r2, {r1, r2}
 80041ca:	68b8      	ldr	r0, [r7, #8]
 80041cc:	f000 fdda 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 80041d0:	2204      	movs	r2, #4
 80041d2:	2100      	movs	r1, #0
 80041d4:	68b8      	ldr	r0, [r7, #8]
 80041d6:	f005 fc05 	bl	80099e4 <memset>

		sprintf(str_gsm,"%s", "#: for end call");
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4a75      	ldr	r2, [pc, #468]	; (80043b4 <show_sratus_call+0x29c>)
 80041de:	461c      	mov	r4, r3
 80041e0:	4615      	mov	r5, r2
 80041e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e4:	6020      	str	r0, [r4, #0]
 80041e6:	6061      	str	r1, [r4, #4]
 80041e8:	60a2      	str	r2, [r4, #8]
 80041ea:	60e3      	str	r3, [r4, #12]
		ssd1306_SetCursor(00, 46);
 80041ec:	212e      	movs	r1, #46	; 0x2e
 80041ee:	2000      	movs	r0, #0
 80041f0:	f000 fdee 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80041f4:	4a6d      	ldr	r2, [pc, #436]	; (80043ac <show_sratus_call+0x294>)
 80041f6:	2301      	movs	r3, #1
 80041f8:	ca06      	ldmia	r2, {r1, r2}
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f000 fdc2 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004200:	2204      	movs	r2, #4
 8004202:	2100      	movs	r1, #0
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	f005 fbed 	bl	80099e4 <memset>

		ssd1306_UpdateScreen();
 800420a:	f000 fcab 	bl	8004b64 <ssd1306_UpdateScreen>
 800420e:	e01e      	b.n	800424e <show_sratus_call+0x136>
	}
	else
	{
		sprintf(str_gsm,"%s", "STATUS: ERROR CALL");
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a69      	ldr	r2, [pc, #420]	; (80043b8 <show_sratus_call+0x2a0>)
 8004214:	461d      	mov	r5, r3
 8004216:	4614      	mov	r4, r2
 8004218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421a:	6028      	str	r0, [r5, #0]
 800421c:	6069      	str	r1, [r5, #4]
 800421e:	60aa      	str	r2, [r5, #8]
 8004220:	60eb      	str	r3, [r5, #12]
 8004222:	8823      	ldrh	r3, [r4, #0]
 8004224:	78a2      	ldrb	r2, [r4, #2]
 8004226:	822b      	strh	r3, [r5, #16]
 8004228:	4613      	mov	r3, r2
 800422a:	74ab      	strb	r3, [r5, #18]
		ssd1306_SetCursor(00, 36);
 800422c:	2124      	movs	r1, #36	; 0x24
 800422e:	2000      	movs	r0, #0
 8004230:	f000 fdce 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004234:	4a5d      	ldr	r2, [pc, #372]	; (80043ac <show_sratus_call+0x294>)
 8004236:	2301      	movs	r3, #1
 8004238:	ca06      	ldmia	r2, {r1, r2}
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f000 fda2 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004240:	2204      	movs	r2, #4
 8004242:	2100      	movs	r1, #0
 8004244:	68b8      	ldr	r0, [r7, #8]
 8004246:	f005 fbcd 	bl	80099e4 <memset>
		ssd1306_UpdateScreen();
 800424a:	f000 fc8b 	bl	8004b64 <ssd1306_UpdateScreen>
	}
	// wait ansver from GSM module

	int gsm_out_call_stattus =0;
 800424e:	2300      	movs	r3, #0
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004252:	e006      	b.n	8004262 <show_sratus_call+0x14a>
	&& (gsm_out_call_stattus != 3))
	{
		sign = read_one_sign_from_keyboard();
 8004254:	f7fe ff70 	bl	8003138 <read_one_sign_from_keyboard>
 8004258:	4603      	mov	r3, r0
 800425a:	71fb      	strb	r3, [r7, #7]
		gsm_out_call_stattus = wait_ansver_after_make_call_in_blok_mode();
 800425c:	f7fe f942 	bl	80024e4 <wait_ansver_after_make_call_in_blok_mode>
 8004260:	6338      	str	r0, [r7, #48]	; 0x30
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	2b23      	cmp	r3, #35	; 0x23
 8004266:	d008      	beq.n	800427a <show_sratus_call+0x162>
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	2b01      	cmp	r3, #1
 800426c:	d005      	beq.n	800427a <show_sratus_call+0x162>
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2b02      	cmp	r3, #2
 8004272:	d002      	beq.n	800427a <show_sratus_call+0x162>
	&& (gsm_out_call_stattus != 3))
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	2b03      	cmp	r3, #3
 8004278:	d1ec      	bne.n	8004254 <show_sratus_call+0x13c>
	}

	if (sign == '#')
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	2b23      	cmp	r3, #35	; 0x23
 800427e:	d121      	bne.n	80042c4 <show_sratus_call+0x1ac>
	{
		end_of_call();
 8004280:	f7fe f8d6 	bl	8002430 <end_of_call>

		sprintf(str_gsm,"%s", "STATUS: CALL END   ");
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a4d      	ldr	r2, [pc, #308]	; (80043bc <show_sratus_call+0x2a4>)
 8004288:	461d      	mov	r5, r3
 800428a:	4614      	mov	r4, r2
 800428c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800428e:	6028      	str	r0, [r5, #0]
 8004290:	6069      	str	r1, [r5, #4]
 8004292:	60aa      	str	r2, [r5, #8]
 8004294:	60eb      	str	r3, [r5, #12]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	6128      	str	r0, [r5, #16]
		ssd1306_SetCursor(00, 36);
 800429a:	2124      	movs	r1, #36	; 0x24
 800429c:	2000      	movs	r0, #0
 800429e:	f000 fd97 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80042a2:	4a42      	ldr	r2, [pc, #264]	; (80043ac <show_sratus_call+0x294>)
 80042a4:	2301      	movs	r3, #1
 80042a6:	ca06      	ldmia	r2, {r1, r2}
 80042a8:	68b8      	ldr	r0, [r7, #8]
 80042aa:	f000 fd6b 	bl	8004d84 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 80042ae:	2204      	movs	r2, #4
 80042b0:	2100      	movs	r1, #0
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	f005 fb96 	bl	80099e4 <memset>
		ssd1306_UpdateScreen();
 80042b8:	f000 fc54 	bl	8004b64 <ssd1306_UpdateScreen>

		HAL_Delay(2000);
 80042bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80042c0:	f001 f952 	bl	8005568 <HAL_Delay>
	}

	switch (gsm_out_call_stattus)
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d026      	beq.n	8004318 <show_sratus_call+0x200>
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d047      	beq.n	800435e <show_sratus_call+0x246>
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d000      	beq.n	80042d4 <show_sratus_call+0x1bc>

			HAL_Delay(2000);
			break;

		}
}
 80042d2:	e065      	b.n	80043a0 <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: BUSY           ");
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a3a      	ldr	r2, [pc, #232]	; (80043c0 <show_sratus_call+0x2a8>)
 80042d8:	461d      	mov	r5, r3
 80042da:	4614      	mov	r4, r2
 80042dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042de:	6028      	str	r0, [r5, #0]
 80042e0:	6069      	str	r1, [r5, #4]
 80042e2:	60aa      	str	r2, [r5, #8]
 80042e4:	60eb      	str	r3, [r5, #12]
 80042e6:	cc03      	ldmia	r4!, {r0, r1}
 80042e8:	6128      	str	r0, [r5, #16]
 80042ea:	6169      	str	r1, [r5, #20]
			ssd1306_SetCursor(00, 36);
 80042ec:	2124      	movs	r1, #36	; 0x24
 80042ee:	2000      	movs	r0, #0
 80042f0:	f000 fd6e 	bl	8004dd0 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 80042f4:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <show_sratus_call+0x294>)
 80042f6:	2301      	movs	r3, #1
 80042f8:	ca06      	ldmia	r2, {r1, r2}
 80042fa:	68b8      	ldr	r0, [r7, #8]
 80042fc:	f000 fd42 	bl	8004d84 <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 8004300:	2204      	movs	r2, #4
 8004302:	2100      	movs	r1, #0
 8004304:	68b8      	ldr	r0, [r7, #8]
 8004306:	f005 fb6d 	bl	80099e4 <memset>
			ssd1306_UpdateScreen();
 800430a:	f000 fc2b 	bl	8004b64 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 800430e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004312:	f001 f929 	bl	8005568 <HAL_Delay>
			break;
 8004316:	e043      	b.n	80043a0 <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: NO ANSWER    ");
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <show_sratus_call+0x2ac>)
 800431c:	461d      	mov	r5, r3
 800431e:	4614      	mov	r4, r2
 8004320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004322:	6028      	str	r0, [r5, #0]
 8004324:	6069      	str	r1, [r5, #4]
 8004326:	60aa      	str	r2, [r5, #8]
 8004328:	60eb      	str	r3, [r5, #12]
 800432a:	6820      	ldr	r0, [r4, #0]
 800432c:	6128      	str	r0, [r5, #16]
 800432e:	88a3      	ldrh	r3, [r4, #4]
 8004330:	82ab      	strh	r3, [r5, #20]
			ssd1306_SetCursor(00, 36);
 8004332:	2124      	movs	r1, #36	; 0x24
 8004334:	2000      	movs	r0, #0
 8004336:	f000 fd4b 	bl	8004dd0 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <show_sratus_call+0x294>)
 800433c:	2301      	movs	r3, #1
 800433e:	ca06      	ldmia	r2, {r1, r2}
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	f000 fd1f 	bl	8004d84 <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 8004346:	2204      	movs	r2, #4
 8004348:	2100      	movs	r1, #0
 800434a:	68b8      	ldr	r0, [r7, #8]
 800434c:	f005 fb4a 	bl	80099e4 <memset>
			ssd1306_UpdateScreen();
 8004350:	f000 fc08 	bl	8004b64 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8004354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004358:	f001 f906 	bl	8005568 <HAL_Delay>
			break;
 800435c:	e020      	b.n	80043a0 <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: CALL END   ");
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <show_sratus_call+0x2a4>)
 8004362:	461d      	mov	r5, r3
 8004364:	4614      	mov	r4, r2
 8004366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004368:	6028      	str	r0, [r5, #0]
 800436a:	6069      	str	r1, [r5, #4]
 800436c:	60aa      	str	r2, [r5, #8]
 800436e:	60eb      	str	r3, [r5, #12]
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	6128      	str	r0, [r5, #16]
			ssd1306_SetCursor(00, 36);
 8004374:	2124      	movs	r1, #36	; 0x24
 8004376:	2000      	movs	r0, #0
 8004378:	f000 fd2a 	bl	8004dd0 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <show_sratus_call+0x294>)
 800437e:	2301      	movs	r3, #1
 8004380:	ca06      	ldmia	r2, {r1, r2}
 8004382:	68b8      	ldr	r0, [r7, #8]
 8004384:	f000 fcfe 	bl	8004d84 <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 8004388:	2204      	movs	r2, #4
 800438a:	2100      	movs	r1, #0
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	f005 fb29 	bl	80099e4 <memset>
			ssd1306_UpdateScreen();
 8004392:	f000 fbe7 	bl	8004b64 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8004396:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800439a:	f001 f8e5 	bl	8005568 <HAL_Delay>
			break;
 800439e:	bf00      	nop
}
 80043a0:	bf00      	nop
 80043a2:	3738      	adds	r7, #56	; 0x38
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bdb0      	pop	{r4, r5, r7, pc}
 80043a8:	0800cfd0 	.word	0x0800cfd0
 80043ac:	2000004c 	.word	0x2000004c
 80043b0:	0800d0c8 	.word	0x0800d0c8
 80043b4:	0800d0dc 	.word	0x0800d0dc
 80043b8:	0800d0ec 	.word	0x0800d0ec
 80043bc:	0800d100 	.word	0x0800d100
 80043c0:	0800d114 	.word	0x0800d114
 80043c4:	0800d12c 	.word	0x0800d12c

080043c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <init_oled>:
void print_fingerprint_data(void);


// -----------------------------------------------------------------------------------
void init_oled(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80043d8:	f000 fb36 	bl	8004a48 <ssd1306_Init>
	HAL_Delay(500);
 80043dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043e0:	f001 f8c2 	bl	8005568 <HAL_Delay>
	ssd1306_Fill(Black);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f000 fb9b 	bl	8004b20 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80043ea:	f000 fbbb 	bl	8004b64 <ssd1306_UpdateScreen>
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <OLED_prinr_all_data>:
		}
	}
}
// -----------------------------------------------------------------------------------
void OLED_prinr_all_data(int  select_print_data)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	switch (select_print_data)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3b01      	subs	r3, #1
 8004400:	2b03      	cmp	r3, #3
 8004402:	d817      	bhi.n	8004434 <OLED_prinr_all_data+0x40>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <OLED_prinr_all_data+0x18>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	0800441d 	.word	0x0800441d
 8004410:	08004423 	.word	0x08004423
 8004414:	08004429 	.word	0x08004429
 8004418:	0800442f 	.word	0x0800442f
	{
		case 1:
			print_GPS_data();
 800441c:	f000 f8a8 	bl	8004570 <print_GPS_data>
			break;
 8004420:	e008      	b.n	8004434 <OLED_prinr_all_data+0x40>
		case 2:
			print_GSM_data();
 8004422:	f000 faed 	bl	8004a00 <print_GSM_data>
			break;
 8004426:	e005      	b.n	8004434 <OLED_prinr_all_data+0x40>
		case 3:
			print_fingerprint_data();
 8004428:	f000 faf0 	bl	8004a0c <print_fingerprint_data>
			break;
 800442c:	e002      	b.n	8004434 <OLED_prinr_all_data+0x40>
		case 4:
			print_all_sensors_data();
 800442e:	f000 fa6f 	bl	8004910 <print_all_sensors_data>
			break;
 8004432:	bf00      	nop
	}

//    // Print all data in OLED
    ssd1306_UpdateScreen();
 8004434:	f000 fb96 	bl	8004b64 <ssd1306_UpdateScreen>
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <print_main_menu>:
// -----------------------------------------------------------------------------------
void print_main_menu(void)
{
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8004446:	2000      	movs	r0, #0
 8004448:	f000 fb6a 	bl	8004b20 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800444c:	f000 fb8a 	bl	8004b64 <ssd1306_UpdateScreen>

	char str[50]={0};
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	2232      	movs	r2, #50	; 0x32
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f005 fac4 	bl	80099e4 <memset>
	// Print message
	sprintf(str,"%s", " SELECT MODE...");
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	4a3e      	ldr	r2, [pc, #248]	; (8004558 <print_main_menu+0x118>)
 8004460:	461c      	mov	r4, r3
 8004462:	4613      	mov	r3, r2
 8004464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(00, 00);
 800446a:	2100      	movs	r1, #0
 800446c:	2000      	movs	r0, #0
 800446e:	f000 fcaf 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004472:	4a3a      	ldr	r2, [pc, #232]	; (800455c <print_main_menu+0x11c>)
 8004474:	1d38      	adds	r0, r7, #4
 8004476:	2301      	movs	r3, #1
 8004478:	ca06      	ldmia	r2, {r1, r2}
 800447a:	f000 fc83 	bl	8004d84 <ssd1306_WriteString>

	sprintf(str,"%s", "1.GSM MODE");
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	4a37      	ldr	r2, [pc, #220]	; (8004560 <print_main_menu+0x120>)
 8004482:	ca07      	ldmia	r2, {r0, r1, r2}
 8004484:	c303      	stmia	r3!, {r0, r1}
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	3302      	adds	r3, #2
 800448a:	0c12      	lsrs	r2, r2, #16
 800448c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 16);
 800448e:	2110      	movs	r1, #16
 8004490:	2000      	movs	r0, #0
 8004492:	f000 fc9d 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004496:	4a31      	ldr	r2, [pc, #196]	; (800455c <print_main_menu+0x11c>)
 8004498:	1d38      	adds	r0, r7, #4
 800449a:	2301      	movs	r3, #1
 800449c:	ca06      	ldmia	r2, {r1, r2}
 800449e:	f000 fc71 	bl	8004d84 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	2232      	movs	r2, #50	; 0x32
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f005 fa9b 	bl	80099e4 <memset>

	sprintf(str,"%s", "2.GPS MODE");
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <print_main_menu+0x124>)
 80044b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80044b4:	c303      	stmia	r3!, {r0, r1}
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	3302      	adds	r3, #2
 80044ba:	0c12      	lsrs	r2, r2, #16
 80044bc:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 26);
 80044be:	211a      	movs	r1, #26
 80044c0:	2000      	movs	r0, #0
 80044c2:	f000 fc85 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <print_main_menu+0x11c>)
 80044c8:	1d38      	adds	r0, r7, #4
 80044ca:	2301      	movs	r3, #1
 80044cc:	ca06      	ldmia	r2, {r1, r2}
 80044ce:	f000 fc59 	bl	8004d84 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	2232      	movs	r2, #50	; 0x32
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f005 fa83 	bl	80099e4 <memset>

	sprintf(str,"%s", "3.FINGERPRINT MODE");
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	4a21      	ldr	r2, [pc, #132]	; (8004568 <print_main_menu+0x128>)
 80044e2:	461c      	mov	r4, r3
 80044e4:	4615      	mov	r5, r2
 80044e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	8022      	strh	r2, [r4, #0]
 80044f0:	3402      	adds	r4, #2
 80044f2:	0c1b      	lsrs	r3, r3, #16
 80044f4:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 36);
 80044f6:	2124      	movs	r1, #36	; 0x24
 80044f8:	2000      	movs	r0, #0
 80044fa:	f000 fc69 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <print_main_menu+0x11c>)
 8004500:	1d38      	adds	r0, r7, #4
 8004502:	2301      	movs	r3, #1
 8004504:	ca06      	ldmia	r2, {r1, r2}
 8004506:	f000 fc3d 	bl	8004d84 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 800450a:	1d3b      	adds	r3, r7, #4
 800450c:	2232      	movs	r2, #50	; 0x32
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f005 fa67 	bl	80099e4 <memset>

	sprintf(str,"%s", "4.SENSORS MODE");
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	4a14      	ldr	r2, [pc, #80]	; (800456c <print_main_menu+0x12c>)
 800451a:	461c      	mov	r4, r3
 800451c:	4613      	mov	r3, r2
 800451e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004520:	c407      	stmia	r4!, {r0, r1, r2}
 8004522:	8023      	strh	r3, [r4, #0]
 8004524:	3402      	adds	r4, #2
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 46);
 800452a:	212e      	movs	r1, #46	; 0x2e
 800452c:	2000      	movs	r0, #0
 800452e:	f000 fc4f 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004532:	4a0a      	ldr	r2, [pc, #40]	; (800455c <print_main_menu+0x11c>)
 8004534:	1d38      	adds	r0, r7, #4
 8004536:	2301      	movs	r3, #1
 8004538:	ca06      	ldmia	r2, {r1, r2}
 800453a:	f000 fc23 	bl	8004d84 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	2232      	movs	r2, #50	; 0x32
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f005 fa4d 	bl	80099e4 <memset>

	ssd1306_UpdateScreen();
 800454a:	f000 fb0b 	bl	8004b64 <ssd1306_UpdateScreen>
}
 800454e:	bf00      	nop
 8004550:	3738      	adds	r7, #56	; 0x38
 8004552:	46bd      	mov	sp, r7
 8004554:	bdb0      	pop	{r4, r5, r7, pc}
 8004556:	bf00      	nop
 8004558:	0800d150 	.word	0x0800d150
 800455c:	2000004c 	.word	0x2000004c
 8004560:	0800d160 	.word	0x0800d160
 8004564:	0800d16c 	.word	0x0800d16c
 8004568:	0800d178 	.word	0x0800d178
 800456c:	0800d18c 	.word	0x0800d18c

08004570 <print_GPS_data>:
// -----------------------------------------------------------------------------------
void print_GPS_data(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b09a      	sub	sp, #104	; 0x68
 8004574:	af00      	add	r7, sp, #0
	// 1. Print Lat and Lon ////////////////////////////////
	char str[50]={0};
 8004576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800457a:	2232      	movs	r2, #50	; 0x32
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f005 fa30 	bl	80099e4 <memset>
	memset(str, 0 , sizeof(str));
 8004584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004588:	2232      	movs	r2, #50	; 0x32
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f005 fa29 	bl	80099e4 <memset>

	// Print data from GPS module  ( Lat )
	char lat_str[]="Lat:";
 8004592:	4ad3      	ldr	r2, [pc, #844]	; (80048e0 <print_GPS_data+0x370>)
 8004594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800459c:	6018      	str	r0, [r3, #0]
 800459e:	3304      	adds	r3, #4
 80045a0:	7019      	strb	r1, [r3, #0]
	memcpy(str, lat_str, sizeof(lat_str));
 80045a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80045aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045ae:	6018      	str	r0, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 16);
 80045b4:	2110      	movs	r1, #16
 80045b6:	2000      	movs	r0, #0
 80045b8:	f000 fc0a 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80045bc:	4ac9      	ldr	r2, [pc, #804]	; (80048e4 <print_GPS_data+0x374>)
 80045be:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80045c2:	2301      	movs	r3, #1
 80045c4:	ca06      	ldmia	r2, {r1, r2}
 80045c6:	f000 fbdd 	bl	8004d84 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 80045ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ce:	2232      	movs	r2, #50	; 0x32
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f005 fa06 	bl	80099e4 <memset>
	// Print data
	ssd1306_SetCursor(30, 16);
 80045d8:	2110      	movs	r1, #16
 80045da:	201e      	movs	r0, #30
 80045dc:	f000 fbf8 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_latitude, Font_7x10, White);
 80045e0:	4ac0      	ldr	r2, [pc, #768]	; (80048e4 <print_GPS_data+0x374>)
 80045e2:	2301      	movs	r3, #1
 80045e4:	ca06      	ldmia	r2, {r1, r2}
 80045e6:	48c0      	ldr	r0, [pc, #768]	; (80048e8 <print_GPS_data+0x378>)
 80045e8:	f000 fbcc 	bl	8004d84 <ssd1306_WriteString>

	// Print data from GPS module  ( Lon )
	char lon_str[]="Lon:";
 80045ec:	4abf      	ldr	r2, [pc, #764]	; (80048ec <print_GPS_data+0x37c>)
 80045ee:	f107 031c 	add.w	r3, r7, #28
 80045f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045f6:	6018      	str	r0, [r3, #0]
 80045f8:	3304      	adds	r3, #4
 80045fa:	7019      	strb	r1, [r3, #0]
	memcpy(str, lon_str, sizeof(lon_str));
 80045fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004600:	f107 021c 	add.w	r2, r7, #28
 8004604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004608:	6018      	str	r0, [r3, #0]
 800460a:	3304      	adds	r3, #4
 800460c:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 26);
 800460e:	211a      	movs	r1, #26
 8004610:	2000      	movs	r0, #0
 8004612:	f000 fbdd 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004616:	4ab3      	ldr	r2, [pc, #716]	; (80048e4 <print_GPS_data+0x374>)
 8004618:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800461c:	2301      	movs	r3, #1
 800461e:	ca06      	ldmia	r2, {r1, r2}
 8004620:	f000 fbb0 	bl	8004d84 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004628:	2232      	movs	r2, #50	; 0x32
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f005 f9d9 	bl	80099e4 <memset>

	ssd1306_SetCursor(30, 26);
 8004632:	211a      	movs	r1, #26
 8004634:	201e      	movs	r0, #30
 8004636:	f000 fbcb 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_lontitude, Font_7x10, White);
 800463a:	4aaa      	ldr	r2, [pc, #680]	; (80048e4 <print_GPS_data+0x374>)
 800463c:	2301      	movs	r3, #1
 800463e:	ca06      	ldmia	r2, {r1, r2}
 8004640:	48ab      	ldr	r0, [pc, #684]	; (80048f0 <print_GPS_data+0x380>)
 8004642:	f000 fb9f 	bl	8004d84 <ssd1306_WriteString>

	// 2. Print time  ////////////////////////////////
	if (GPGGA_data_is_ready == 1)
 8004646:	4bab      	ldr	r3, [pc, #684]	; (80048f4 <print_GPS_data+0x384>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	f040 80e3 	bne.w	8004816 <print_GPS_data+0x2a6>
	{
		char hours[2]={0};
 8004650:	2300      	movs	r3, #0
 8004652:	813b      	strh	r3, [r7, #8]
		char minutes[2]={0};
 8004654:	2300      	movs	r3, #0
 8004656:	80bb      	strh	r3, [r7, #4]
		char semicolum = ':';
 8004658:	233a      	movs	r3, #58	; 0x3a
 800465a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		// divide hours and minutes
		uint8_t i=0;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		for(i=0; i<=3; i++)
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800466a:	e020      	b.n	80046ae <print_GPS_data+0x13e>
		{
			if(i<=1)
 800466c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004670:	2b01      	cmp	r3, #1
 8004672:	d80b      	bhi.n	800468c <print_GPS_data+0x11c>
			{
				hours[i] = gps_time[i];
 8004674:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004678:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800467c:	499e      	ldr	r1, [pc, #632]	; (80048f8 <print_GPS_data+0x388>)
 800467e:	5c8a      	ldrb	r2, [r1, r2]
 8004680:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004684:	440b      	add	r3, r1
 8004686:	f803 2c60 	strb.w	r2, [r3, #-96]
 800468a:	e00b      	b.n	80046a4 <print_GPS_data+0x134>
			}
			else
			{
				minutes[i-2] = gps_time[i];
 800468c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004694:	3b02      	subs	r3, #2
 8004696:	4998      	ldr	r1, [pc, #608]	; (80048f8 <print_GPS_data+0x388>)
 8004698:	5c8a      	ldrb	r2, [r1, r2]
 800469a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800469e:	440b      	add	r3, r1
 80046a0:	f803 2c64 	strb.w	r2, [r3, #-100]
		for(i=0; i<=3; i++)
 80046a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046a8:	3301      	adds	r3, #1
 80046aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80046ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d9da      	bls.n	800466c <print_GPS_data+0xfc>
			}
		}
		// Add 3 hours
		int int_hours = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t dozens = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t units = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		dozens = hours[0];
 80046c6:	7a3b      	ldrb	r3, [r7, #8]
 80046c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = hours[1];
 80046cc:	7a7b      	ldrb	r3, [r7, #9]
 80046ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		dozens = dozens - 48;
 80046d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046d6:	3b30      	subs	r3, #48	; 0x30
 80046d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = units - 48;
 80046dc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80046e0:	3b30      	subs	r3, #48	; 0x30
 80046e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		int_hours = units +(dozens *10);
 80046e6:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80046ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	440b      	add	r3, r1
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
		int_hours = int_hours+2;
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fc:	3302      	adds	r3, #2
 80046fe:	663b      	str	r3, [r7, #96]	; 0x60

		dozens = (int_hours/10) + 48;
 8004700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004702:	4a7e      	ldr	r2, [pc, #504]	; (80048fc <print_GPS_data+0x38c>)
 8004704:	fb82 1203 	smull	r1, r2, r2, r3
 8004708:	1092      	asrs	r2, r2, #2
 800470a:	17db      	asrs	r3, r3, #31
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3330      	adds	r3, #48	; 0x30
 8004712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = (int_hours%10) + 48;
 8004716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004718:	4b78      	ldr	r3, [pc, #480]	; (80048fc <print_GPS_data+0x38c>)
 800471a:	fb83 1302 	smull	r1, r3, r3, r2
 800471e:	1099      	asrs	r1, r3, #2
 8004720:	17d3      	asrs	r3, r2, #31
 8004722:	1ac9      	subs	r1, r1, r3
 8004724:	460b      	mov	r3, r1
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	1ad1      	subs	r1, r2, r3
 800472e:	b2cb      	uxtb	r3, r1
 8004730:	3330      	adds	r3, #48	; 0x30
 8004732:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		hours[0] = dozens;
 8004736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800473a:	723b      	strb	r3, [r7, #8]
		hours[1] = units;
 800473c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004740:	727b      	strb	r3, [r7, #9]

		if(int_hours == 24)
 8004742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004744:	2b18      	cmp	r3, #24
 8004746:	d103      	bne.n	8004750 <print_GPS_data+0x1e0>
		{
			hours[0] = '0';
 8004748:	2330      	movs	r3, #48	; 0x30
 800474a:	723b      	strb	r3, [r7, #8]
			hours[1] = '0';
 800474c:	2330      	movs	r3, #48	; 0x30
 800474e:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 25)
 8004750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004752:	2b19      	cmp	r3, #25
 8004754:	d103      	bne.n	800475e <print_GPS_data+0x1ee>
		{
			hours[0] = '0';
 8004756:	2330      	movs	r3, #48	; 0x30
 8004758:	723b      	strb	r3, [r7, #8]
			hours[1] = '1';
 800475a:	2331      	movs	r3, #49	; 0x31
 800475c:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 26)
 800475e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004760:	2b1a      	cmp	r3, #26
 8004762:	d103      	bne.n	800476c <print_GPS_data+0x1fc>
		{
			hours[0] = '0';
 8004764:	2330      	movs	r3, #48	; 0x30
 8004766:	723b      	strb	r3, [r7, #8]
			hours[1] = '2';
 8004768:	2332      	movs	r3, #50	; 0x32
 800476a:	727b      	strb	r3, [r7, #9]
		}

		if((int_hours >=0) && (int_hours<=9))
 800476c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476e:	2b00      	cmp	r3, #0
 8004770:	db09      	blt.n	8004786 <print_GPS_data+0x216>
 8004772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004774:	2b09      	cmp	r3, #9
 8004776:	dc06      	bgt.n	8004786 <print_GPS_data+0x216>
		{
			hours[0] = '0';
 8004778:	2330      	movs	r3, #48	; 0x30
 800477a:	723b      	strb	r3, [r7, #8]
			hours[1] = int_hours +48;
 800477c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800477e:	b2db      	uxtb	r3, r3
 8004780:	3330      	adds	r3, #48	; 0x30
 8004782:	b2db      	uxtb	r3, r3
 8004784:	727b      	strb	r3, [r7, #9]
		}

		// connect  hours and minutes with colon
		//i=5;
		for(i=0; i<5; i++)
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800478c:	e034      	b.n	80047f8 <print_GPS_data+0x288>
		{
			if(i<=1)
 800478e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004792:	2b01      	cmp	r3, #1
 8004794:	d80e      	bhi.n	80047b4 <print_GPS_data+0x244>
			{
				str[i] = hours[i];
 8004796:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800479a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800479e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80047a2:	440a      	add	r2, r1
 80047a4:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 80047a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80047ac:	440b      	add	r3, r1
 80047ae:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80047b2:	e01c      	b.n	80047ee <print_GPS_data+0x27e>
			}
			else
			{
				if(i==2)
 80047b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d109      	bne.n	80047d0 <print_GPS_data+0x260>
				{
					str[i] = semicolum;
 80047bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80047c4:	4413      	add	r3, r2
 80047c6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80047ca:	f803 2c3c 	strb.w	r2, [r3, #-60]
 80047ce:	e00e      	b.n	80047ee <print_GPS_data+0x27e>
				}
				else
				{
					str[i]=minutes[i-3];
 80047d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047d4:	1eda      	subs	r2, r3, #3
 80047d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047da:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80047de:	440a      	add	r2, r1
 80047e0:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 80047e4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80047e8:	440b      	add	r3, r1
 80047ea:	f803 2c3c 	strb.w	r2, [r3, #-60]
		for(i=0; i<5; i++)
 80047ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047f2:	3301      	adds	r3, #1
 80047f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d9c6      	bls.n	800478e <print_GPS_data+0x21e>
				}
			}
		}

		ssd1306_SetCursor(0, 36);
 8004800:	2124      	movs	r1, #36	; 0x24
 8004802:	2000      	movs	r0, #0
 8004804:	f000 fae4 	bl	8004dd0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004808:	4a36      	ldr	r2, [pc, #216]	; (80048e4 <print_GPS_data+0x374>)
 800480a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800480e:	2301      	movs	r3, #1
 8004810:	ca06      	ldmia	r2, {r1, r2}
 8004812:	f000 fab7 	bl	8004d84 <ssd1306_WriteString>
	}

	// 3. Print number of satalits  ////////////////////////////////
	char numbers_of_satalits_str[]="N:  ";
 8004816:	4a3a      	ldr	r2, [pc, #232]	; (8004900 <print_GPS_data+0x390>)
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004820:	6018      	str	r0, [r3, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	7019      	strb	r1, [r3, #0]
	memcpy(str, numbers_of_satalits_str, sizeof(numbers_of_satalits_str));
 8004826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800482a:	f107 0214 	add.w	r2, r7, #20
 800482e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004832:	6018      	str	r0, [r3, #0]
 8004834:	3304      	adds	r3, #4
 8004836:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(40, 36);
 8004838:	2124      	movs	r1, #36	; 0x24
 800483a:	2028      	movs	r0, #40	; 0x28
 800483c:	f000 fac8 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004840:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <print_GPS_data+0x374>)
 8004842:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004846:	2301      	movs	r3, #1
 8004848:	ca06      	ldmia	r2, {r1, r2}
 800484a:	f000 fa9b 	bl	8004d84 <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 800484e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004852:	2232      	movs	r2, #50	; 0x32
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f005 f8c4 	bl	80099e4 <memset>
	ssd1306_SetCursor(55, 36);
 800485c:	2124      	movs	r1, #36	; 0x24
 800485e:	2037      	movs	r0, #55	; 0x37
 8004860:	f000 fab6 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_number_of_satellites, Font_7x10, White);
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <print_GPS_data+0x374>)
 8004866:	2301      	movs	r3, #1
 8004868:	ca06      	ldmia	r2, {r1, r2}
 800486a:	4826      	ldr	r0, [pc, #152]	; (8004904 <print_GPS_data+0x394>)
 800486c:	f000 fa8a 	bl	8004d84 <ssd1306_WriteString>

	// 4. Print number of satalits  ////////////////////////////////
	//gps_speed
	char speed_str[]="S:    ";
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <print_GPS_data+0x398>)
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800487a:	6018      	str	r0, [r3, #0]
 800487c:	3304      	adds	r3, #4
 800487e:	8019      	strh	r1, [r3, #0]
 8004880:	3302      	adds	r3, #2
 8004882:	0c0a      	lsrs	r2, r1, #16
 8004884:	701a      	strb	r2, [r3, #0]
	memcpy(str, speed_str, sizeof(speed_str));
 8004886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800488a:	f107 020c 	add.w	r2, r7, #12
 800488e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004892:	6018      	str	r0, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	8019      	strh	r1, [r3, #0]
 8004898:	3302      	adds	r3, #2
 800489a:	0c0a      	lsrs	r2, r1, #16
 800489c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(75, 36);
 800489e:	2124      	movs	r1, #36	; 0x24
 80048a0:	204b      	movs	r0, #75	; 0x4b
 80048a2:	f000 fa95 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80048a6:	4a0f      	ldr	r2, [pc, #60]	; (80048e4 <print_GPS_data+0x374>)
 80048a8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80048ac:	2301      	movs	r3, #1
 80048ae:	ca06      	ldmia	r2, {r1, r2}
 80048b0:	f000 fa68 	bl	8004d84 <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 80048b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048b8:	2232      	movs	r2, #50	; 0x32
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 f891 	bl	80099e4 <memset>
	ssd1306_SetCursor(90, 36);
 80048c2:	2124      	movs	r1, #36	; 0x24
 80048c4:	205a      	movs	r0, #90	; 0x5a
 80048c6:	f000 fa83 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_speed, Font_7x10, White);
 80048ca:	4a06      	ldr	r2, [pc, #24]	; (80048e4 <print_GPS_data+0x374>)
 80048cc:	2301      	movs	r3, #1
 80048ce:	ca06      	ldmia	r2, {r1, r2}
 80048d0:	480e      	ldr	r0, [pc, #56]	; (800490c <print_GPS_data+0x39c>)
 80048d2:	f000 fa57 	bl	8004d84 <ssd1306_WriteString>
}
 80048d6:	bf00      	nop
 80048d8:	3768      	adds	r7, #104	; 0x68
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	0800d19c 	.word	0x0800d19c
 80048e4:	2000004c 	.word	0x2000004c
 80048e8:	200006dc 	.word	0x200006dc
 80048ec:	0800d1a4 	.word	0x0800d1a4
 80048f0:	20000738 	.word	0x20000738
 80048f4:	20000254 	.word	0x20000254
 80048f8:	20000708 	.word	0x20000708
 80048fc:	66666667 	.word	0x66666667
 8004900:	0800d1ac 	.word	0x0800d1ac
 8004904:	200006f8 	.word	0x200006f8
 8004908:	0800d1b4 	.word	0x0800d1b4
 800490c:	200006d4 	.word	0x200006d4

08004910 <print_all_sensors_data>:
// -----------------------------------------------------------------------------------
void print_all_sensors_data(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
	char str_1[40]={0};
 8004916:	463b      	mov	r3, r7
 8004918:	2228      	movs	r2, #40	; 0x28
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f005 f861 	bl	80099e4 <memset>

	// 1. Print data from si7021 sensor
	strcpy(str_1, "1.si7021 ");
 8004922:	463b      	mov	r3, r7
 8004924:	4a2e      	ldr	r2, [pc, #184]	; (80049e0 <print_all_sensors_data+0xd0>)
 8004926:	ca07      	ldmia	r2, {r0, r1, r2}
 8004928:	c303      	stmia	r3!, {r0, r1}
 800492a:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_si7021);
 800492c:	463b      	mov	r3, r7
 800492e:	492d      	ldr	r1, [pc, #180]	; (80049e4 <print_all_sensors_data+0xd4>)
 8004930:	4618      	mov	r0, r3
 8004932:	f005 f87f 	bl	8009a34 <strcat>
	strcat(str_1, humidity_si7021);
 8004936:	463b      	mov	r3, r7
 8004938:	492b      	ldr	r1, [pc, #172]	; (80049e8 <print_all_sensors_data+0xd8>)
 800493a:	4618      	mov	r0, r3
 800493c:	f005 f87a 	bl	8009a34 <strcat>

	ssd1306_SetCursor(0, 16);
 8004940:	2110      	movs	r1, #16
 8004942:	2000      	movs	r0, #0
 8004944:	f000 fa44 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <print_all_sensors_data+0xdc>)
 800494a:	4638      	mov	r0, r7
 800494c:	2301      	movs	r3, #1
 800494e:	ca06      	ldmia	r2, {r1, r2}
 8004950:	f000 fa18 	bl	8004d84 <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 8004954:	463b      	mov	r3, r7
 8004956:	2228      	movs	r2, #40	; 0x28
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f005 f842 	bl	80099e4 <memset>

	// 2. Print data from AM2302
	strcpy(str_1, "2.AM2302 ");
 8004960:	463b      	mov	r3, r7
 8004962:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <print_all_sensors_data+0xe0>)
 8004964:	ca07      	ldmia	r2, {r0, r1, r2}
 8004966:	c303      	stmia	r3!, {r0, r1}
 8004968:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_am3202);
 800496a:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <print_all_sensors_data+0xe4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	463b      	mov	r3, r7
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f005 f85d 	bl	8009a34 <strcat>
	strcat(str_1, humidity_am3202);
 800497a:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <print_all_sensors_data+0xe8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	463b      	mov	r3, r7
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f005 f855 	bl	8009a34 <strcat>

	ssd1306_SetCursor(0, 26);
 800498a:	211a      	movs	r1, #26
 800498c:	2000      	movs	r0, #0
 800498e:	f000 fa1f 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <print_all_sensors_data+0xdc>)
 8004994:	4638      	mov	r0, r7
 8004996:	2301      	movs	r3, #1
 8004998:	ca06      	ldmia	r2, {r1, r2}
 800499a:	f000 f9f3 	bl	8004d84 <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 800499e:	463b      	mov	r3, r7
 80049a0:	2228      	movs	r2, #40	; 0x28
 80049a2:	2100      	movs	r1, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f005 f81d 	bl	80099e4 <memset>

	// 3. Print data from 9066
	strcpy(str_1, "2.9066 ");
 80049aa:	463b      	mov	r3, r7
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <print_all_sensors_data+0xec>)
 80049ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049b2:	e883 0003 	stmia.w	r3, {r0, r1}

	ssd1306_SetCursor(0, 36);
 80049b6:	2124      	movs	r1, #36	; 0x24
 80049b8:	2000      	movs	r0, #0
 80049ba:	f000 fa09 	bl	8004dd0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <print_all_sensors_data+0xdc>)
 80049c0:	4638      	mov	r0, r7
 80049c2:	2301      	movs	r3, #1
 80049c4:	ca06      	ldmia	r2, {r1, r2}
 80049c6:	f000 f9dd 	bl	8004d84 <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 80049ca:	463b      	mov	r3, r7
 80049cc:	2228      	movs	r2, #40	; 0x28
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f005 f807 	bl	80099e4 <memset>
}
 80049d6:	bf00      	nop
 80049d8:	3728      	adds	r7, #40	; 0x28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	0800d1bc 	.word	0x0800d1bc
 80049e4:	200006c4 	.word	0x200006c4
 80049e8:	200006cc 	.word	0x200006cc
 80049ec:	2000004c 	.word	0x2000004c
 80049f0:	0800d1c8 	.word	0x0800d1c8
 80049f4:	200006e8 	.word	0x200006e8
 80049f8:	20000744 	.word	0x20000744
 80049fc:	0800d1d4 	.word	0x0800d1d4

08004a00 <print_GSM_data>:
// -----------------------------------------------------------------------------------
void print_GSM_data(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0

}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <print_fingerprint_data>:
// -----------------------------------------------------------------------------------
void print_fingerprint_data(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af04      	add	r7, sp, #16
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8004a22:	230a      	movs	r3, #10
 8004a24:	9302      	str	r3, [sp, #8]
 8004a26:	2301      	movs	r3, #1
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	1dfb      	adds	r3, r7, #7
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	2200      	movs	r2, #0
 8004a32:	2178      	movs	r1, #120	; 0x78
 8004a34:	4803      	ldr	r0, [pc, #12]	; (8004a44 <ssd1306_WriteCommand+0x2c>)
 8004a36:	f001 ff45 	bl	80068c4 <HAL_I2C_Mem_Write>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000824 	.word	0x20000824

08004a48 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8004a4c:	2064      	movs	r0, #100	; 0x64
 8004a4e:	f000 fd8b 	bl	8005568 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8004a52:	20ae      	movs	r0, #174	; 0xae
 8004a54:	f7ff ffe0 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004a58:	2020      	movs	r0, #32
 8004a5a:	f7ff ffdd 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004a5e:	2010      	movs	r0, #16
 8004a60:	f7ff ffda 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004a64:	20b0      	movs	r0, #176	; 0xb0
 8004a66:	f7ff ffd7 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004a6a:	20c8      	movs	r0, #200	; 0xc8
 8004a6c:	f7ff ffd4 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7ff ffd1 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004a76:	2010      	movs	r0, #16
 8004a78:	f7ff ffce 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8004a7c:	2040      	movs	r0, #64	; 0x40
 8004a7e:	f7ff ffcb 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8004a82:	2081      	movs	r0, #129	; 0x81
 8004a84:	f7ff ffc8 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8004a88:	20ff      	movs	r0, #255	; 0xff
 8004a8a:	f7ff ffc5 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8004a8e:	20a1      	movs	r0, #161	; 0xa1
 8004a90:	f7ff ffc2 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8004a94:	20a6      	movs	r0, #166	; 0xa6
 8004a96:	f7ff ffbf 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8004a9a:	20a8      	movs	r0, #168	; 0xa8
 8004a9c:	f7ff ffbc 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8004aa0:	203f      	movs	r0, #63	; 0x3f
 8004aa2:	f7ff ffb9 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004aa6:	20a4      	movs	r0, #164	; 0xa4
 8004aa8:	f7ff ffb6 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8004aac:	20d3      	movs	r0, #211	; 0xd3
 8004aae:	f7ff ffb3 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7ff ffb0 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ab8:	20d5      	movs	r0, #213	; 0xd5
 8004aba:	f7ff ffad 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004abe:	20f0      	movs	r0, #240	; 0xf0
 8004ac0:	f7ff ffaa 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004ac4:	20d9      	movs	r0, #217	; 0xd9
 8004ac6:	f7ff ffa7 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004aca:	2022      	movs	r0, #34	; 0x22
 8004acc:	f7ff ffa4 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8004ad0:	20da      	movs	r0, #218	; 0xda
 8004ad2:	f7ff ffa1 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8004ad6:	2012      	movs	r0, #18
 8004ad8:	f7ff ff9e 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004adc:	20db      	movs	r0, #219	; 0xdb
 8004ade:	f7ff ff9b 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004ae2:	2020      	movs	r0, #32
 8004ae4:	f7ff ff98 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004ae8:	208d      	movs	r0, #141	; 0x8d
 8004aea:	f7ff ff95 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004aee:	2014      	movs	r0, #20
 8004af0:	f7ff ff92 	bl	8004a18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004af4:	20af      	movs	r0, #175	; 0xaf
 8004af6:	f7ff ff8f 	bl	8004a18 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 f810 	bl	8004b20 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8004b00:	f000 f830 	bl	8004b64 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <ssd1306_Init+0xd4>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <ssd1306_Init+0xd4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8004b10:	4b02      	ldr	r3, [pc, #8]	; (8004b1c <ssd1306_Init+0xd4>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200006a8 	.word	0x200006a8

08004b20 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e00d      	b.n	8004b4c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <ssd1306_Fill+0x1a>
 8004b36:	2100      	movs	r1, #0
 8004b38:	e000      	b.n	8004b3c <ssd1306_Fill+0x1c>
 8004b3a:	21ff      	movs	r1, #255	; 0xff
 8004b3c:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <ssd1306_Fill+0x40>)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	460a      	mov	r2, r1
 8004b44:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	d3ed      	bcc.n	8004b30 <ssd1306_Fill+0x10>
	}
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200002a8 	.word	0x200002a8

08004b64 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	71fb      	strb	r3, [r7, #7]
 8004b6e:	e01d      	b.n	8004bac <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	3b50      	subs	r3, #80	; 0x50
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ff4e 	bl	8004a18 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f7ff ff4b 	bl	8004a18 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8004b82:	2010      	movs	r0, #16
 8004b84:	f7ff ff48 	bl	8004a18 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	01db      	lsls	r3, r3, #7
 8004b8c:	4a0b      	ldr	r2, [pc, #44]	; (8004bbc <ssd1306_UpdateScreen+0x58>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	2264      	movs	r2, #100	; 0x64
 8004b92:	9202      	str	r2, [sp, #8]
 8004b94:	2280      	movs	r2, #128	; 0x80
 8004b96:	9201      	str	r2, [sp, #4]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	2240      	movs	r2, #64	; 0x40
 8004b9e:	2178      	movs	r1, #120	; 0x78
 8004ba0:	4807      	ldr	r0, [pc, #28]	; (8004bc0 <ssd1306_UpdateScreen+0x5c>)
 8004ba2:	f001 fe8f 	bl	80068c4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	71fb      	strb	r3, [r7, #7]
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	2b07      	cmp	r3, #7
 8004bb0:	d9de      	bls.n	8004b70 <ssd1306_UpdateScreen+0xc>
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	200002a8 	.word	0x200002a8
 8004bc0:	20000824 	.word	0x20000824

08004bc4 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	71bb      	strb	r3, [r7, #6]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db48      	blt.n	8004c70 <ssd1306_DrawPixel+0xac>
 8004bde:	79bb      	ldrb	r3, [r7, #6]
 8004be0:	2b3f      	cmp	r3, #63	; 0x3f
 8004be2:	d845      	bhi.n	8004c70 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <ssd1306_DrawPixel+0xb8>)
 8004be6:	791b      	ldrb	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8004bec:	797b      	ldrb	r3, [r7, #5]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8004bfa:	797b      	ldrb	r3, [r7, #5]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d11a      	bne.n	8004c36 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004c00:	79fa      	ldrb	r2, [r7, #7]
 8004c02:	79bb      	ldrb	r3, [r7, #6]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	b2d8      	uxtb	r0, r3
 8004c08:	4603      	mov	r3, r0
 8004c0a:	01db      	lsls	r3, r3, #7
 8004c0c:	4413      	add	r3, r2
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <ssd1306_DrawPixel+0xbc>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
 8004c12:	b25a      	sxtb	r2, r3
 8004c14:	79bb      	ldrb	r3, [r7, #6]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	b25b      	sxtb	r3, r3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	b259      	sxtb	r1, r3
 8004c26:	79fa      	ldrb	r2, [r7, #7]
 8004c28:	4603      	mov	r3, r0
 8004c2a:	01db      	lsls	r3, r3, #7
 8004c2c:	4413      	add	r3, r2
 8004c2e:	b2c9      	uxtb	r1, r1
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <ssd1306_DrawPixel+0xbc>)
 8004c32:	54d1      	strb	r1, [r2, r3]
 8004c34:	e01d      	b.n	8004c72 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004c36:	79fa      	ldrb	r2, [r7, #7]
 8004c38:	79bb      	ldrb	r3, [r7, #6]
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	b2d8      	uxtb	r0, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	01db      	lsls	r3, r3, #7
 8004c42:	4413      	add	r3, r2
 8004c44:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <ssd1306_DrawPixel+0xbc>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	b25a      	sxtb	r2, r3
 8004c4a:	79bb      	ldrb	r3, [r7, #6]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	b25b      	sxtb	r3, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	b259      	sxtb	r1, r3
 8004c60:	79fa      	ldrb	r2, [r7, #7]
 8004c62:	4603      	mov	r3, r0
 8004c64:	01db      	lsls	r3, r3, #7
 8004c66:	4413      	add	r3, r2
 8004c68:	b2c9      	uxtb	r1, r1
 8004c6a:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <ssd1306_DrawPixel+0xbc>)
 8004c6c:	54d1      	strb	r1, [r2, r3]
 8004c6e:	e000      	b.n	8004c72 <ssd1306_DrawPixel+0xae>
		return;
 8004c70:	bf00      	nop
	}
}
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	200006a8 	.word	0x200006a8
 8004c80:	200002a8 	.word	0x200002a8

08004c84 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	1d38      	adds	r0, r7, #4
 8004c8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004c92:	461a      	mov	r2, r3
 8004c94:	4623      	mov	r3, r4
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004c9c:	4b38      	ldr	r3, [pc, #224]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	793b      	ldrb	r3, [r7, #4]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca8:	dc06      	bgt.n	8004cb8 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004caa:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004cac:	885b      	ldrh	r3, [r3, #2]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	797b      	ldrb	r3, [r7, #5]
 8004cb2:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004cb4:	2b3f      	cmp	r3, #63	; 0x3f
 8004cb6:	dd01      	ble.n	8004cbc <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e05d      	b.n	8004d78 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e04c      	b.n	8004d5c <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	3b20      	subs	r3, #32
 8004cc8:	7979      	ldrb	r1, [r7, #5]
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4619      	mov	r1, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	440b      	add	r3, r1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e034      	b.n	8004d4c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d012      	beq.n	8004d18 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b2d8      	uxtb	r0, r3
 8004d00:	4b1f      	ldr	r3, [pc, #124]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004d02:	885b      	ldrh	r3, [r3, #2]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	7bba      	ldrb	r2, [r7, #14]
 8004d10:	4619      	mov	r1, r3
 8004d12:	f7ff ff57 	bl	8004bc4 <ssd1306_DrawPixel>
 8004d16:	e016      	b.n	8004d46 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	b2d8      	uxtb	r0, r3
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004d28:	885b      	ldrh	r3, [r3, #2]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	b2d9      	uxtb	r1, r3
 8004d34:	7bbb      	ldrb	r3, [r7, #14]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	f7ff ff3f 	bl	8004bc4 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	793b      	ldrb	r3, [r7, #4]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d3c5      	bcc.n	8004ce2 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	797b      	ldrb	r3, [r7, #5]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d3ad      	bcc.n	8004cc2 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	793b      	ldrb	r3, [r7, #4]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <ssd1306_WriteChar+0xfc>)
 8004d74:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3724      	adds	r7, #36	; 0x24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd90      	pop	{r4, r7, pc}
 8004d80:	200006a8 	.word	0x200006a8

08004d84 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	1d38      	adds	r0, r7, #4
 8004d8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004d92:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8004d94:	e012      	b.n	8004dbc <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	7818      	ldrb	r0, [r3, #0]
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	1d3a      	adds	r2, r7, #4
 8004d9e:	ca06      	ldmia	r2, {r1, r2}
 8004da0:	f7ff ff70 	bl	8004c84 <ssd1306_WriteChar>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d002      	beq.n	8004db6 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	e008      	b.n	8004dc8 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3301      	adds	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e8      	bne.n	8004d96 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460a      	mov	r2, r1
 8004dda:	71fb      	strb	r3, [r7, #7]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <ssd1306_SetCursor+0x2c>)
 8004de6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8004de8:	79bb      	ldrb	r3, [r7, #6]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <ssd1306_SetCursor+0x2c>)
 8004dee:	805a      	strh	r2, [r3, #2]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	200006a8 	.word	0x200006a8

08004e00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <HAL_MspInit+0x5c>)
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_MspInit+0x5c>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6193      	str	r3, [r2, #24]
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_MspInit+0x5c>)
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_MspInit+0x5c>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_MspInit+0x5c>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e28:	61d3      	str	r3, [r2, #28]
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_MspInit+0x5c>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_MspInit+0x60>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <HAL_MspInit+0x60>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e52:	bf00      	nop
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40010000 	.word	0x40010000

08004e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6c:	f107 0310 	add.w	r3, r7, #16
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <HAL_I2C_MspInit+0x70>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d123      	bne.n	8004ecc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_I2C_MspInit+0x74>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <HAL_I2C_MspInit+0x74>)
 8004e8a:	f043 0308 	orr.w	r3, r3, #8
 8004e8e:	6193      	str	r3, [r2, #24]
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_I2C_MspInit+0x74>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e9c:	23c0      	movs	r3, #192	; 0xc0
 8004e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea0:	2312      	movs	r3, #18
 8004ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea8:	f107 0310 	add.w	r3, r7, #16
 8004eac:	4619      	mov	r1, r3
 8004eae:	480b      	ldr	r0, [pc, #44]	; (8004edc <HAL_I2C_MspInit+0x78>)
 8004eb0:	f000 feee 	bl	8005c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004eb4:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_I2C_MspInit+0x74>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <HAL_I2C_MspInit+0x74>)
 8004eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ebe:	61d3      	str	r3, [r2, #28]
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_I2C_MspInit+0x74>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ecc:	bf00      	nop
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40005400 	.word	0x40005400
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40010c00 	.word	0x40010c00

08004ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <HAL_SPI_MspInit+0x8c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d131      	bne.n	8004f64 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_SPI_MspInit+0x90>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <HAL_SPI_MspInit+0x90>)
 8004f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f0a:	61d3      	str	r3, [r2, #28]
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_SPI_MspInit+0x90>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <HAL_SPI_MspInit+0x90>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <HAL_SPI_MspInit+0x90>)
 8004f1e:	f043 0308 	orr.w	r3, r3, #8
 8004f22:	6193      	str	r3, [r2, #24]
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <HAL_SPI_MspInit+0x90>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f30:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f36:	2302      	movs	r3, #2
 8004f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f3e:	f107 0310 	add.w	r3, r7, #16
 8004f42:	4619      	mov	r1, r3
 8004f44:	480b      	ldr	r0, [pc, #44]	; (8004f74 <HAL_SPI_MspInit+0x94>)
 8004f46:	f000 fea3 	bl	8005c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f58:	f107 0310 	add.w	r3, r7, #16
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4805      	ldr	r0, [pc, #20]	; (8004f74 <HAL_SPI_MspInit+0x94>)
 8004f60:	f000 fe96 	bl	8005c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004f64:	bf00      	nop
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40003800 	.word	0x40003800
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40010c00 	.word	0x40010c00

08004f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <HAL_TIM_Base_MspInit+0x68>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10c      	bne.n	8004fa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8004f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f94:	6193      	str	r3, [r2, #24]
 8004f96:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004fa2:	e018      	b.n	8004fd6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d113      	bne.n	8004fd6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	61d3      	str	r3, [r2, #28]
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	201c      	movs	r0, #28
 8004fcc:	f000 fbc5 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004fd0:	201c      	movs	r0, #28
 8004fd2:	f000 fbde 	bl	8005792 <HAL_NVIC_EnableIRQ>
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <HAL_TIM_MspPostInit+0x5c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d118      	bne.n	800503a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <HAL_TIM_MspPostInit+0x60>)
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	4a0e      	ldr	r2, [pc, #56]	; (8005048 <HAL_TIM_MspPostInit+0x60>)
 800500e:	f043 0304 	orr.w	r3, r3, #4
 8005012:	6193      	str	r3, [r2, #24]
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <HAL_TIM_MspPostInit+0x60>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005026:	2302      	movs	r3, #2
 8005028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502a:	2302      	movs	r3, #2
 800502c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502e:	f107 0310 	add.w	r3, r7, #16
 8005032:	4619      	mov	r1, r3
 8005034:	4805      	ldr	r0, [pc, #20]	; (800504c <HAL_TIM_MspPostInit+0x64>)
 8005036:	f000 fe2b 	bl	8005c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800503a:	bf00      	nop
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40021000 	.word	0x40021000
 800504c:	40010800 	.word	0x40010800

08005050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08c      	sub	sp, #48	; 0x30
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	f107 0320 	add.w	r3, r7, #32
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a73      	ldr	r2, [pc, #460]	; (8005238 <HAL_UART_MspInit+0x1e8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d13a      	bne.n	80050e6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005070:	4b72      	ldr	r3, [pc, #456]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4a71      	ldr	r2, [pc, #452]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800507a:	6193      	str	r3, [r2, #24]
 800507c:	4b6f      	ldr	r3, [pc, #444]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005088:	4b6c      	ldr	r3, [pc, #432]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4a6b      	ldr	r2, [pc, #428]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800508e:	f043 0304 	orr.w	r3, r3, #4
 8005092:	6193      	str	r3, [r2, #24]
 8005094:	4b69      	ldr	r3, [pc, #420]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ae:	f107 0320 	add.w	r3, r7, #32
 80050b2:	4619      	mov	r1, r3
 80050b4:	4862      	ldr	r0, [pc, #392]	; (8005240 <HAL_UART_MspInit+0x1f0>)
 80050b6:	f000 fdeb 	bl	8005c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050c0:	2300      	movs	r3, #0
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c8:	f107 0320 	add.w	r3, r7, #32
 80050cc:	4619      	mov	r1, r3
 80050ce:	485c      	ldr	r0, [pc, #368]	; (8005240 <HAL_UART_MspInit+0x1f0>)
 80050d0:	f000 fdde 	bl	8005c90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050d4:	2200      	movs	r2, #0
 80050d6:	2100      	movs	r1, #0
 80050d8:	2025      	movs	r0, #37	; 0x25
 80050da:	f000 fb3e 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050de:	2025      	movs	r0, #37	; 0x25
 80050e0:	f000 fb57 	bl	8005792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050e4:	e0a3      	b.n	800522e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a56      	ldr	r2, [pc, #344]	; (8005244 <HAL_UART_MspInit+0x1f4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d138      	bne.n	8005162 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80050f0:	4b52      	ldr	r3, [pc, #328]	; (800523c <HAL_UART_MspInit+0x1ec>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	4a51      	ldr	r2, [pc, #324]	; (800523c <HAL_UART_MspInit+0x1ec>)
 80050f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fa:	61d3      	str	r3, [r2, #28]
 80050fc:	4b4f      	ldr	r3, [pc, #316]	; (800523c <HAL_UART_MspInit+0x1ec>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005108:	4b4c      	ldr	r3, [pc, #304]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	4a4b      	ldr	r2, [pc, #300]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6193      	str	r3, [r2, #24]
 8005114:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005120:	2304      	movs	r3, #4
 8005122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005124:	2302      	movs	r3, #2
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005128:	2303      	movs	r3, #3
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512c:	f107 0320 	add.w	r3, r7, #32
 8005130:	4619      	mov	r1, r3
 8005132:	4843      	ldr	r0, [pc, #268]	; (8005240 <HAL_UART_MspInit+0x1f0>)
 8005134:	f000 fdac 	bl	8005c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005138:	2308      	movs	r3, #8
 800513a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	f107 0320 	add.w	r3, r7, #32
 8005148:	4619      	mov	r1, r3
 800514a:	483d      	ldr	r0, [pc, #244]	; (8005240 <HAL_UART_MspInit+0x1f0>)
 800514c:	f000 fda0 	bl	8005c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005150:	2200      	movs	r2, #0
 8005152:	2100      	movs	r1, #0
 8005154:	2026      	movs	r0, #38	; 0x26
 8005156:	f000 fb00 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800515a:	2026      	movs	r0, #38	; 0x26
 800515c:	f000 fb19 	bl	8005792 <HAL_NVIC_EnableIRQ>
}
 8005160:	e065      	b.n	800522e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a38      	ldr	r2, [pc, #224]	; (8005248 <HAL_UART_MspInit+0x1f8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d160      	bne.n	800522e <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 800516c:	4b33      	ldr	r3, [pc, #204]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4a32      	ldr	r2, [pc, #200]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005176:	61d3      	str	r3, [r2, #28]
 8005178:	4b30      	ldr	r3, [pc, #192]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005184:	4b2d      	ldr	r3, [pc, #180]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <HAL_UART_MspInit+0x1ec>)
 800518a:	f043 0308 	orr.w	r3, r3, #8
 800518e:	6193      	str	r3, [r2, #24]
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <HAL_UART_MspInit+0x1ec>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800519c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051a6:	2303      	movs	r3, #3
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051aa:	f107 0320 	add.w	r3, r7, #32
 80051ae:	4619      	mov	r1, r3
 80051b0:	4826      	ldr	r0, [pc, #152]	; (800524c <HAL_UART_MspInit+0x1fc>)
 80051b2:	f000 fd6d 	bl	8005c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80051b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051bc:	2300      	movs	r3, #0
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c4:	f107 0320 	add.w	r3, r7, #32
 80051c8:	4619      	mov	r1, r3
 80051ca:	4820      	ldr	r0, [pc, #128]	; (800524c <HAL_UART_MspInit+0x1fc>)
 80051cc:	f000 fd60 	bl	8005c90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051d2:	4a20      	ldr	r2, [pc, #128]	; (8005254 <HAL_UART_MspInit+0x204>)
 80051d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051d6:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051d8:	2200      	movs	r2, #0
 80051da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051e4:	2280      	movs	r2, #128	; 0x80
 80051e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051e8:	4b19      	ldr	r3, [pc, #100]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051f6:	2220      	movs	r2, #32
 80051f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <HAL_UART_MspInit+0x200>)
 80051fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005200:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005202:	4813      	ldr	r0, [pc, #76]	; (8005250 <HAL_UART_MspInit+0x200>)
 8005204:	f000 fae0 	bl	80057c8 <HAL_DMA_Init>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800520e:	f7ff f8db 	bl	80043c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_UART_MspInit+0x200>)
 8005216:	635a      	str	r2, [r3, #52]	; 0x34
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <HAL_UART_MspInit+0x200>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2100      	movs	r1, #0
 8005222:	2027      	movs	r0, #39	; 0x27
 8005224:	f000 fa99 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005228:	2027      	movs	r0, #39	; 0x27
 800522a:	f000 fab2 	bl	8005792 <HAL_NVIC_EnableIRQ>
}
 800522e:	bf00      	nop
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40013800 	.word	0x40013800
 800523c:	40021000 	.word	0x40021000
 8005240:	40010800 	.word	0x40010800
 8005244:	40004400 	.word	0x40004400
 8005248:	40004800 	.word	0x40004800
 800524c:	40010c00 	.word	0x40010c00
 8005250:	200007a0 	.word	0x200007a0
 8005254:	40020030 	.word	0x40020030

08005258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800525c:	bf00      	nop
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005268:	e7fe      	b.n	8005268 <HardFault_Handler+0x4>

0800526a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800526e:	e7fe      	b.n	800526e <MemManage_Handler+0x4>

08005270 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005274:	e7fe      	b.n	8005274 <BusFault_Handler+0x4>

08005276 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800527a:	e7fe      	b.n	800527a <UsageFault_Handler+0x4>

0800527c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052a4:	f000 f944 	bl	8005530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}

080052ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80052b0:	4802      	ldr	r0, [pc, #8]	; (80052bc <DMA1_Channel3_IRQHandler+0x10>)
 80052b2:	f000 fbb9 	bl	8005a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200007a0 	.word	0x200007a0

080052c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052c4:	4802      	ldr	r0, [pc, #8]	; (80052d0 <TIM2_IRQHandler+0x10>)
 80052c6:	f003 f802 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052ca:	bf00      	nop
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000af8 	.word	0x20000af8

080052d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <USART1_IRQHandler+0x70>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	2b0d      	cmp	r3, #13
 80052e4:	d013      	beq.n	800530e <USART1_IRQHandler+0x3a>
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2b0a      	cmp	r3, #10
 80052ea:	d010      	beq.n	800530e <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <USART1_IRQHandler+0x74>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d920      	bls.n	8005336 <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 80052f4:	4b15      	ldr	r3, [pc, #84]	; (800534c <USART1_IRQHandler+0x78>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <USART1_IRQHandler+0x7c>)
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <USART1_IRQHandler+0x78>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <USART1_IRQHandler+0x78>)
 800530a:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 800530c:	e013      	b.n	8005336 <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <USART1_IRQHandler+0x78>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <USART1_IRQHandler+0x78>)
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <USART1_IRQHandler+0x80>)
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e002      	b.n	800532a <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <USART1_IRQHandler+0x78>)
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 800532a:	4b07      	ldr	r3, [pc, #28]	; (8005348 <USART1_IRQHandler+0x74>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <USART1_IRQHandler+0x74>)
 8005334:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005336:	4808      	ldr	r0, [pc, #32]	; (8005358 <USART1_IRQHandler+0x84>)
 8005338:	f003 ff02 	bl	8009140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40013800 	.word	0x40013800
 8005348:	20000299 	.word	0x20000299
 800534c:	200006ae 	.word	0x200006ae
 8005350:	2000025c 	.word	0x2000025c
 8005354:	20000298 	.word	0x20000298
 8005358:	20000a78 	.word	0x20000a78

0800535c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <USART2_IRQHandler+0x10>)
 8005362:	f003 feed 	bl	8009140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000b38 	.word	0x20000b38

08005370 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005374:	4802      	ldr	r0, [pc, #8]	; (8005380 <USART3_IRQHandler+0x10>)
 8005376:	f003 fee3 	bl	8009140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200007e4 	.word	0x200007e4

08005384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <_sbrk+0x5c>)
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <_sbrk+0x60>)
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <_sbrk+0x64>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <_sbrk+0x64>)
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <_sbrk+0x68>)
 80053a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <_sbrk+0x64>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d207      	bcs.n	80053c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053b4:	f004 faec 	bl	8009990 <__errno>
 80053b8:	4602      	mov	r2, r0
 80053ba:	230c      	movs	r3, #12
 80053bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c2:	e009      	b.n	80053d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053c4:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <_sbrk+0x64>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <_sbrk+0x64>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4413      	add	r3, r2
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <_sbrk+0x64>)
 80053d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20005000 	.word	0x20005000
 80053e4:	00000400 	.word	0x00000400
 80053e8:	200006b0 	.word	0x200006b0
 80053ec:	20000b80 	.word	0x20000b80

080053f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <SystemInit+0x5c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <SystemInit+0x5c>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <SystemInit+0x5c>)
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	4911      	ldr	r1, [pc, #68]	; (800544c <SystemInit+0x5c>)
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <SystemInit+0x60>)
 8005408:	4013      	ands	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <SystemInit+0x5c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0e      	ldr	r2, [pc, #56]	; (800544c <SystemInit+0x5c>)
 8005412:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <SystemInit+0x5c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <SystemInit+0x5c>)
 8005422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005426:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <SystemInit+0x5c>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <SystemInit+0x5c>)
 800542e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005432:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <SystemInit+0x5c>)
 8005436:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800543a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <SystemInit+0x64>)
 800543e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005442:	609a      	str	r2, [r3, #8]
#endif 
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	40021000 	.word	0x40021000
 8005450:	f8ff0000 	.word	0xf8ff0000
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005458:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800545a:	e003      	b.n	8005464 <LoopCopyDataInit>

0800545c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800545e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005460:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005462:	3104      	adds	r1, #4

08005464 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005464:	480a      	ldr	r0, [pc, #40]	; (8005490 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005468:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800546a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800546c:	d3f6      	bcc.n	800545c <CopyDataInit>
  ldr r2, =_sbss
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005470:	e002      	b.n	8005478 <LoopFillZerobss>

08005472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005472:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005474:	f842 3b04 	str.w	r3, [r2], #4

08005478 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005478:	4b08      	ldr	r3, [pc, #32]	; (800549c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800547a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800547c:	d3f9      	bcc.n	8005472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800547e:	f7ff ffb7 	bl	80053f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005482:	f004 fa8b 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005486:	f7fd fab5 	bl	80029f4 <main>
  bx lr
 800548a:	4770      	bx	lr
  ldr r3, =_sidata
 800548c:	0800dc28 	.word	0x0800dc28
  ldr r0, =_sdata
 8005490:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005494:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 8005498:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 800549c:	20000b80 	.word	0x20000b80

080054a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054a0:	e7fe      	b.n	80054a0 <ADC1_2_IRQHandler>
	...

080054a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_Init+0x28>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a07      	ldr	r2, [pc, #28]	; (80054cc <HAL_Init+0x28>)
 80054ae:	f043 0310 	orr.w	r3, r3, #16
 80054b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b4:	2003      	movs	r0, #3
 80054b6:	f000 f945 	bl	8005744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ba:	2000      	movs	r0, #0
 80054bc:	f000 f808 	bl	80054d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054c0:	f7ff fc9e 	bl	8004e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40022000 	.word	0x40022000

080054d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_InitTick+0x54>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_InitTick+0x58>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f95d 	bl	80057ae <HAL_SYSTICK_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00e      	b.n	800551c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d80a      	bhi.n	800551a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005504:	2200      	movs	r2, #0
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800550c:	f000 f925 	bl	800575a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005510:	4a06      	ldr	r2, [pc, #24]	; (800552c <HAL_InitTick+0x5c>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	2000005c 	.word	0x2000005c
 8005528:	20000064 	.word	0x20000064
 800552c:	20000060 	.word	0x20000060

08005530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_IncTick+0x1c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_IncTick+0x20>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4413      	add	r3, r2
 8005540:	4a03      	ldr	r2, [pc, #12]	; (8005550 <HAL_IncTick+0x20>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	20000064 	.word	0x20000064
 8005550:	20000b78 	.word	0x20000b78

08005554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return uwTick;
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <HAL_GetTick+0x10>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	20000b78 	.word	0x20000b78

08005568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005570:	f7ff fff0 	bl	8005554 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005580:	d005      	beq.n	800558e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <HAL_Delay+0x40>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800558e:	bf00      	nop
 8005590:	f7ff ffe0 	bl	8005554 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	429a      	cmp	r2, r3
 800559e:	d8f7      	bhi.n	8005590 <HAL_Delay+0x28>
  {
  }
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000064 	.word	0x20000064

080055ac <__NVIC_SetPriorityGrouping>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055de:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	60d3      	str	r3, [r2, #12]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <__NVIC_GetPriorityGrouping>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <__NVIC_GetPriorityGrouping+0x18>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 0307 	and.w	r3, r3, #7
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <__NVIC_EnableIRQ>:
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	2b00      	cmp	r3, #0
 8005620:	db0b      	blt.n	800563a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	f003 021f 	and.w	r2, r3, #31
 8005628:	4906      	ldr	r1, [pc, #24]	; (8005644 <__NVIC_EnableIRQ+0x34>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2001      	movs	r0, #1
 8005632:	fa00 f202 	lsl.w	r2, r0, r2
 8005636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr
 8005644:	e000e100 	.word	0xe000e100

08005648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	db0a      	blt.n	8005672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	490c      	ldr	r1, [pc, #48]	; (8005694 <__NVIC_SetPriority+0x4c>)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	440b      	add	r3, r1
 800566c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005670:	e00a      	b.n	8005688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4908      	ldr	r1, [pc, #32]	; (8005698 <__NVIC_SetPriority+0x50>)
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3b04      	subs	r3, #4
 8005680:	0112      	lsls	r2, r2, #4
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	440b      	add	r3, r1
 8005686:	761a      	strb	r2, [r3, #24]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	e000e100 	.word	0xe000e100
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f1c3 0307 	rsb	r3, r3, #7
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	bf28      	it	cs
 80056ba:	2304      	movcs	r3, #4
 80056bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d902      	bls.n	80056cc <NVIC_EncodePriority+0x30>
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3b03      	subs	r3, #3
 80056ca:	e000      	b.n	80056ce <NVIC_EncodePriority+0x32>
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43da      	mvns	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	401a      	ands	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	43d9      	mvns	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f4:	4313      	orrs	r3, r2
         );
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3724      	adds	r7, #36	; 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005710:	d301      	bcc.n	8005716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005712:	2301      	movs	r3, #1
 8005714:	e00f      	b.n	8005736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <SysTick_Config+0x40>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800571e:	210f      	movs	r1, #15
 8005720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005724:	f7ff ff90 	bl	8005648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <SysTick_Config+0x40>)
 800572a:	2200      	movs	r2, #0
 800572c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800572e:	4b04      	ldr	r3, [pc, #16]	; (8005740 <SysTick_Config+0x40>)
 8005730:	2207      	movs	r2, #7
 8005732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	e000e010 	.word	0xe000e010

08005744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff2d 	bl	80055ac <__NVIC_SetPriorityGrouping>
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	4603      	mov	r3, r0
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800576c:	f7ff ff42 	bl	80055f4 <__NVIC_GetPriorityGrouping>
 8005770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f7ff ff90 	bl	800569c <NVIC_EncodePriority>
 800577c:	4602      	mov	r2, r0
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff5f 	bl	8005648 <__NVIC_SetPriority>
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800579c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ff35 	bl	8005610 <__NVIC_EnableIRQ>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ffa2 	bl	8005700 <SysTick_Config>
 80057bc:	4603      	mov	r3, r0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e043      	b.n	8005866 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b22      	ldr	r3, [pc, #136]	; (8005870 <HAL_DMA_Init+0xa8>)
 80057e6:	4413      	add	r3, r2
 80057e8:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_DMA_Init+0xac>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	009a      	lsls	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_DMA_Init+0xb0>)
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005812:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	bffdfff8 	.word	0xbffdfff8
 8005874:	cccccccd 	.word	0xcccccccd
 8005878:	40020000 	.word	0x40020000

0800587c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_DMA_Start_IT+0x20>
 8005898:	2302      	movs	r3, #2
 800589a:	e04a      	b.n	8005932 <HAL_DMA_Start_IT+0xb6>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d13a      	bne.n	8005924 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f9ae 	bl	8005c34 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 020e 	orr.w	r2, r2, #14
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e00f      	b.n	8005912 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0204 	bic.w	r2, r2, #4
 8005900:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 020a 	orr.w	r2, r2, #10
 8005910:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e005      	b.n	8005930 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800592c:	2302      	movs	r3, #2
 800592e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800594e:	2b02      	cmp	r3, #2
 8005950:	d005      	beq.n	800595e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	e051      	b.n	8005a02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 020e 	bic.w	r2, r2, #14
 800596c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <HAL_DMA_Abort_IT+0xd0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d029      	beq.n	80059dc <HAL_DMA_Abort_IT+0xa0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <HAL_DMA_Abort_IT+0xd4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d022      	beq.n	80059d8 <HAL_DMA_Abort_IT+0x9c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <HAL_DMA_Abort_IT+0xd8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01a      	beq.n	80059d2 <HAL_DMA_Abort_IT+0x96>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <HAL_DMA_Abort_IT+0xdc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d012      	beq.n	80059cc <HAL_DMA_Abort_IT+0x90>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_DMA_Abort_IT+0xe0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00a      	beq.n	80059c6 <HAL_DMA_Abort_IT+0x8a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_DMA_Abort_IT+0xe4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d102      	bne.n	80059c0 <HAL_DMA_Abort_IT+0x84>
 80059ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059be:	e00e      	b.n	80059de <HAL_DMA_Abort_IT+0xa2>
 80059c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059c4:	e00b      	b.n	80059de <HAL_DMA_Abort_IT+0xa2>
 80059c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ca:	e008      	b.n	80059de <HAL_DMA_Abort_IT+0xa2>
 80059cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059d0:	e005      	b.n	80059de <HAL_DMA_Abort_IT+0xa2>
 80059d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d6:	e002      	b.n	80059de <HAL_DMA_Abort_IT+0xa2>
 80059d8:	2310      	movs	r3, #16
 80059da:	e000      	b.n	80059de <HAL_DMA_Abort_IT+0xa2>
 80059dc:	2301      	movs	r3, #1
 80059de:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <HAL_DMA_Abort_IT+0xe8>)
 80059e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
    } 
  }
  return status;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40020008 	.word	0x40020008
 8005a10:	4002001c 	.word	0x4002001c
 8005a14:	40020030 	.word	0x40020030
 8005a18:	40020044 	.word	0x40020044
 8005a1c:	40020058 	.word	0x40020058
 8005a20:	4002006c 	.word	0x4002006c
 8005a24:	40020000 	.word	0x40020000

08005a28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	2204      	movs	r2, #4
 8005a46:	409a      	lsls	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d04f      	beq.n	8005af0 <HAL_DMA_IRQHandler+0xc8>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04a      	beq.n	8005af0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d107      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0204 	bic.w	r2, r2, #4
 8005a76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a66      	ldr	r2, [pc, #408]	; (8005c18 <HAL_DMA_IRQHandler+0x1f0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d029      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xae>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a65      	ldr	r2, [pc, #404]	; (8005c1c <HAL_DMA_IRQHandler+0x1f4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xaa>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a63      	ldr	r2, [pc, #396]	; (8005c20 <HAL_DMA_IRQHandler+0x1f8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01a      	beq.n	8005acc <HAL_DMA_IRQHandler+0xa4>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a62      	ldr	r2, [pc, #392]	; (8005c24 <HAL_DMA_IRQHandler+0x1fc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d012      	beq.n	8005ac6 <HAL_DMA_IRQHandler+0x9e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a60      	ldr	r2, [pc, #384]	; (8005c28 <HAL_DMA_IRQHandler+0x200>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0x98>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a5f      	ldr	r2, [pc, #380]	; (8005c2c <HAL_DMA_IRQHandler+0x204>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d102      	bne.n	8005aba <HAL_DMA_IRQHandler+0x92>
 8005ab4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ab8:	e00e      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xb0>
 8005aba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005abe:	e00b      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xb0>
 8005ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ac4:	e008      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xb0>
 8005ac6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aca:	e005      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xb0>
 8005acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad0:	e002      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xb0>
 8005ad2:	2340      	movs	r3, #64	; 0x40
 8005ad4:	e000      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xb0>
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	4a55      	ldr	r2, [pc, #340]	; (8005c30 <HAL_DMA_IRQHandler+0x208>)
 8005ada:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8094 	beq.w	8005c0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005aee:	e08e      	b.n	8005c0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2202      	movs	r2, #2
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d056      	beq.n	8005bae <HAL_DMA_IRQHandler+0x186>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d051      	beq.n	8005bae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 020a 	bic.w	r2, r2, #10
 8005b26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a38      	ldr	r2, [pc, #224]	; (8005c18 <HAL_DMA_IRQHandler+0x1f0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d029      	beq.n	8005b8e <HAL_DMA_IRQHandler+0x166>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <HAL_DMA_IRQHandler+0x1f4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x162>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a35      	ldr	r2, [pc, #212]	; (8005c20 <HAL_DMA_IRQHandler+0x1f8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01a      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x15c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_DMA_IRQHandler+0x1fc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d012      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x156>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <HAL_DMA_IRQHandler+0x200>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00a      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x150>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a31      	ldr	r2, [pc, #196]	; (8005c2c <HAL_DMA_IRQHandler+0x204>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d102      	bne.n	8005b72 <HAL_DMA_IRQHandler+0x14a>
 8005b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b70:	e00e      	b.n	8005b90 <HAL_DMA_IRQHandler+0x168>
 8005b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b76:	e00b      	b.n	8005b90 <HAL_DMA_IRQHandler+0x168>
 8005b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b7c:	e008      	b.n	8005b90 <HAL_DMA_IRQHandler+0x168>
 8005b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b82:	e005      	b.n	8005b90 <HAL_DMA_IRQHandler+0x168>
 8005b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b88:	e002      	b.n	8005b90 <HAL_DMA_IRQHandler+0x168>
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	e000      	b.n	8005b90 <HAL_DMA_IRQHandler+0x168>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <HAL_DMA_IRQHandler+0x208>)
 8005b92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d034      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005bac:	e02f      	b.n	8005c0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d028      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x1e8>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 020e 	bic.w	r2, r2, #14
 8005bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f202 	lsl.w	r2, r1, r2
 8005be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
    }
  }
  return;
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
}
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40020008 	.word	0x40020008
 8005c1c:	4002001c 	.word	0x4002001c
 8005c20:	40020030 	.word	0x40020030
 8005c24:	40020044 	.word	0x40020044
 8005c28:	40020058 	.word	0x40020058
 8005c2c:	4002006c 	.word	0x4002006c
 8005c30:	40020000 	.word	0x40020000

08005c34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d108      	bne.n	8005c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c72:	e007      	b.n	8005c84 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b08b      	sub	sp, #44	; 0x2c
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ca2:	e127      	b.n	8005ef4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	f040 8116 	bne.w	8005eee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b12      	cmp	r3, #18
 8005cc8:	d034      	beq.n	8005d34 <HAL_GPIO_Init+0xa4>
 8005cca:	2b12      	cmp	r3, #18
 8005ccc:	d80d      	bhi.n	8005cea <HAL_GPIO_Init+0x5a>
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d02b      	beq.n	8005d2a <HAL_GPIO_Init+0x9a>
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d804      	bhi.n	8005ce0 <HAL_GPIO_Init+0x50>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d031      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d01c      	beq.n	8005d18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005cde:	e048      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d043      	beq.n	8005d6c <HAL_GPIO_Init+0xdc>
 8005ce4:	2b11      	cmp	r3, #17
 8005ce6:	d01b      	beq.n	8005d20 <HAL_GPIO_Init+0x90>
          break;
 8005ce8:	e043      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005cea:	4a89      	ldr	r2, [pc, #548]	; (8005f10 <HAL_GPIO_Init+0x280>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d026      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
 8005cf0:	4a87      	ldr	r2, [pc, #540]	; (8005f10 <HAL_GPIO_Init+0x280>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d806      	bhi.n	8005d04 <HAL_GPIO_Init+0x74>
 8005cf6:	4a87      	ldr	r2, [pc, #540]	; (8005f14 <HAL_GPIO_Init+0x284>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d020      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
 8005cfc:	4a86      	ldr	r2, [pc, #536]	; (8005f18 <HAL_GPIO_Init+0x288>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
          break;
 8005d02:	e036      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005d04:	4a85      	ldr	r2, [pc, #532]	; (8005f1c <HAL_GPIO_Init+0x28c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d019      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
 8005d0a:	4a85      	ldr	r2, [pc, #532]	; (8005f20 <HAL_GPIO_Init+0x290>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d016      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
 8005d10:	4a84      	ldr	r2, [pc, #528]	; (8005f24 <HAL_GPIO_Init+0x294>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_GPIO_Init+0xae>
          break;
 8005d16:	e02c      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	623b      	str	r3, [r7, #32]
          break;
 8005d1e:	e028      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	3304      	adds	r3, #4
 8005d26:	623b      	str	r3, [r7, #32]
          break;
 8005d28:	e023      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	623b      	str	r3, [r7, #32]
          break;
 8005d32:	e01e      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	623b      	str	r3, [r7, #32]
          break;
 8005d3c:	e019      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005d46:	2304      	movs	r3, #4
 8005d48:	623b      	str	r3, [r7, #32]
          break;
 8005d4a:	e012      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d54:	2308      	movs	r3, #8
 8005d56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	611a      	str	r2, [r3, #16]
          break;
 8005d5e:	e008      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d60:	2308      	movs	r3, #8
 8005d62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	615a      	str	r2, [r3, #20]
          break;
 8005d6a:	e002      	b.n	8005d72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	623b      	str	r3, [r7, #32]
          break;
 8005d70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2bff      	cmp	r3, #255	; 0xff
 8005d76:	d801      	bhi.n	8005d7c <HAL_GPIO_Init+0xec>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	e001      	b.n	8005d80 <HAL_GPIO_Init+0xf0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2bff      	cmp	r3, #255	; 0xff
 8005d86:	d802      	bhi.n	8005d8e <HAL_GPIO_Init+0xfe>
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	e002      	b.n	8005d94 <HAL_GPIO_Init+0x104>
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	3b08      	subs	r3, #8
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	210f      	movs	r1, #15
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	401a      	ands	r2, r3
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dae:	431a      	orrs	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8096 	beq.w	8005eee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005dc2:	4b59      	ldr	r3, [pc, #356]	; (8005f28 <HAL_GPIO_Init+0x298>)
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	4a58      	ldr	r2, [pc, #352]	; (8005f28 <HAL_GPIO_Init+0x298>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	6193      	str	r3, [r2, #24]
 8005dce:	4b56      	ldr	r3, [pc, #344]	; (8005f28 <HAL_GPIO_Init+0x298>)
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005dda:	4a54      	ldr	r2, [pc, #336]	; (8005f2c <HAL_GPIO_Init+0x29c>)
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	3302      	adds	r3, #2
 8005de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	220f      	movs	r2, #15
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a4b      	ldr	r2, [pc, #300]	; (8005f30 <HAL_GPIO_Init+0x2a0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_GPIO_Init+0x19e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a4a      	ldr	r2, [pc, #296]	; (8005f34 <HAL_GPIO_Init+0x2a4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00d      	beq.n	8005e2a <HAL_GPIO_Init+0x19a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a49      	ldr	r2, [pc, #292]	; (8005f38 <HAL_GPIO_Init+0x2a8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <HAL_GPIO_Init+0x196>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a48      	ldr	r2, [pc, #288]	; (8005f3c <HAL_GPIO_Init+0x2ac>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_GPIO_Init+0x192>
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e006      	b.n	8005e30 <HAL_GPIO_Init+0x1a0>
 8005e22:	2304      	movs	r3, #4
 8005e24:	e004      	b.n	8005e30 <HAL_GPIO_Init+0x1a0>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e002      	b.n	8005e30 <HAL_GPIO_Init+0x1a0>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_GPIO_Init+0x1a0>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	f002 0203 	and.w	r2, r2, #3
 8005e36:	0092      	lsls	r2, r2, #2
 8005e38:	4093      	lsls	r3, r2
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005e40:	493a      	ldr	r1, [pc, #232]	; (8005f2c <HAL_GPIO_Init+0x29c>)
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	3302      	adds	r3, #2
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005e5a:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4938      	ldr	r1, [pc, #224]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]
 8005e66:	e006      	b.n	8005e76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005e68:	4b35      	ldr	r3, [pc, #212]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	4933      	ldr	r1, [pc, #204]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005e82:	4b2f      	ldr	r3, [pc, #188]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	492e      	ldr	r1, [pc, #184]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	604b      	str	r3, [r1, #4]
 8005e8e:	e006      	b.n	8005e9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005e90:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	43db      	mvns	r3, r3
 8005e98:	4929      	ldr	r1, [pc, #164]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005eaa:	4b25      	ldr	r3, [pc, #148]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	4924      	ldr	r1, [pc, #144]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
 8005eb6:	e006      	b.n	8005ec6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005eb8:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	491f      	ldr	r1, [pc, #124]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	491a      	ldr	r1, [pc, #104]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60cb      	str	r3, [r1, #12]
 8005ede:	e006      	b.n	8005eee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ee0:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	4915      	ldr	r1, [pc, #84]	; (8005f40 <HAL_GPIO_Init+0x2b0>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f aed0 	bne.w	8005ca4 <HAL_GPIO_Init+0x14>
  }
}
 8005f04:	bf00      	nop
 8005f06:	372c      	adds	r7, #44	; 0x2c
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	10210000 	.word	0x10210000
 8005f14:	10110000 	.word	0x10110000
 8005f18:	10120000 	.word	0x10120000
 8005f1c:	10310000 	.word	0x10310000
 8005f20:	10320000 	.word	0x10320000
 8005f24:	10220000 	.word	0x10220000
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010800 	.word	0x40010800
 8005f34:	40010c00 	.word	0x40010c00
 8005f38:	40011000 	.word	0x40011000
 8005f3c:	40011400 	.word	0x40011400
 8005f40:	40010400 	.word	0x40010400

08005f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	e001      	b.n	8005f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr

08005f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	807b      	strh	r3, [r7, #2]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f82:	787b      	ldrb	r3, [r7, #1]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f88:	887a      	ldrh	r2, [r7, #2]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f8e:	e003      	b.n	8005f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	041a      	lsls	r2, r3, #16
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	611a      	str	r2, [r3, #16]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e11f      	b.n	80061f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fe ff4a 	bl	8004e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006008:	f002 f838 	bl	800807c <HAL_RCC_GetPCLK1Freq>
 800600c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4a7b      	ldr	r2, [pc, #492]	; (8006200 <HAL_I2C_Init+0x25c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d807      	bhi.n	8006028 <HAL_I2C_Init+0x84>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a7a      	ldr	r2, [pc, #488]	; (8006204 <HAL_I2C_Init+0x260>)
 800601c:	4293      	cmp	r3, r2
 800601e:	bf94      	ite	ls
 8006020:	2301      	movls	r3, #1
 8006022:	2300      	movhi	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e006      	b.n	8006036 <HAL_I2C_Init+0x92>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a77      	ldr	r2, [pc, #476]	; (8006208 <HAL_I2C_Init+0x264>)
 800602c:	4293      	cmp	r3, r2
 800602e:	bf94      	ite	ls
 8006030:	2301      	movls	r3, #1
 8006032:	2300      	movhi	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0db      	b.n	80061f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a72      	ldr	r2, [pc, #456]	; (800620c <HAL_I2C_Init+0x268>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	0c9b      	lsrs	r3, r3, #18
 8006048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a64      	ldr	r2, [pc, #400]	; (8006200 <HAL_I2C_Init+0x25c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d802      	bhi.n	8006078 <HAL_I2C_Init+0xd4>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3301      	adds	r3, #1
 8006076:	e009      	b.n	800608c <HAL_I2C_Init+0xe8>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	4a63      	ldr	r2, [pc, #396]	; (8006210 <HAL_I2C_Init+0x26c>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	099b      	lsrs	r3, r3, #6
 800608a:	3301      	adds	r3, #1
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	430b      	orrs	r3, r1
 8006092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800609e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4956      	ldr	r1, [pc, #344]	; (8006200 <HAL_I2C_Init+0x25c>)
 80060a8:	428b      	cmp	r3, r1
 80060aa:	d80d      	bhi.n	80060c8 <HAL_I2C_Init+0x124>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1e59      	subs	r1, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	bf38      	it	cc
 80060c4:	2304      	movcc	r3, #4
 80060c6:	e04f      	b.n	8006168 <HAL_I2C_Init+0x1c4>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d111      	bne.n	80060f4 <HAL_I2C_Init+0x150>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1e58      	subs	r0, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	440b      	add	r3, r1
 80060de:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e2:	3301      	adds	r3, #1
 80060e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf0c      	ite	eq
 80060ec:	2301      	moveq	r3, #1
 80060ee:	2300      	movne	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e012      	b.n	800611a <HAL_I2C_Init+0x176>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1e58      	subs	r0, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6859      	ldr	r1, [r3, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	0099      	lsls	r1, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	fbb0 f3f3 	udiv	r3, r0, r3
 800610a:	3301      	adds	r3, #1
 800610c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_I2C_Init+0x17e>
 800611e:	2301      	movs	r3, #1
 8006120:	e022      	b.n	8006168 <HAL_I2C_Init+0x1c4>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10e      	bne.n	8006148 <HAL_I2C_Init+0x1a4>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1e58      	subs	r0, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	440b      	add	r3, r1
 8006138:	fbb0 f3f3 	udiv	r3, r0, r3
 800613c:	3301      	adds	r3, #1
 800613e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	e00f      	b.n	8006168 <HAL_I2C_Init+0x1c4>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	1e58      	subs	r0, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6859      	ldr	r1, [r3, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	0099      	lsls	r1, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	fbb0 f3f3 	udiv	r3, r0, r3
 800615e:	3301      	adds	r3, #1
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	6809      	ldr	r1, [r1, #0]
 800616c:	4313      	orrs	r3, r2
 800616e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6911      	ldr	r1, [r2, #16]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68d2      	ldr	r2, [r2, #12]
 80061a2:	4311      	orrs	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	000186a0 	.word	0x000186a0
 8006204:	001e847f 	.word	0x001e847f
 8006208:	003d08ff 	.word	0x003d08ff
 800620c:	431bde83 	.word	0x431bde83
 8006210:	10624dd3 	.word	0x10624dd3

08006214 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	461a      	mov	r2, r3
 8006220:	460b      	mov	r3, r1
 8006222:	817b      	strh	r3, [r7, #10]
 8006224:	4613      	mov	r3, r2
 8006226:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006228:	f7ff f994 	bl	8005554 <HAL_GetTick>
 800622c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b20      	cmp	r3, #32
 8006238:	f040 80e0 	bne.w	80063fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2319      	movs	r3, #25
 8006242:	2201      	movs	r2, #1
 8006244:	4970      	ldr	r1, [pc, #448]	; (8006408 <HAL_I2C_Master_Transmit+0x1f4>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 f966 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006252:	2302      	movs	r3, #2
 8006254:	e0d3      	b.n	80063fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_I2C_Master_Transmit+0x50>
 8006260:	2302      	movs	r3, #2
 8006262:	e0cc      	b.n	80063fe <HAL_I2C_Master_Transmit+0x1ea>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d007      	beq.n	800628a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006298:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2221      	movs	r2, #33	; 0x21
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2210      	movs	r2, #16
 80062a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	893a      	ldrh	r2, [r7, #8]
 80062ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4a50      	ldr	r2, [pc, #320]	; (800640c <HAL_I2C_Master_Transmit+0x1f8>)
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062cc:	8979      	ldrh	r1, [r7, #10]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fe52 	bl	8006f7c <I2C_MasterRequestWrite>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e08d      	b.n	80063fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80062f8:	e066      	b.n	80063c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	6a39      	ldr	r1, [r7, #32]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f001 f9e0 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b04      	cmp	r3, #4
 8006310:	d107      	bne.n	8006322 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e06b      	b.n	80063fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	781a      	ldrb	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d11b      	bne.n	800639c <HAL_I2C_Master_Transmit+0x188>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	d017      	beq.n	800639c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	6a39      	ldr	r1, [r7, #32]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f001 f9d0 	bl	8007746 <I2C_WaitOnBTFFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d107      	bne.n	80063c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e01a      	b.n	80063fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d194      	bne.n	80062fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	00100002 	.word	0x00100002
 800640c:	ffff0000 	.word	0xffff0000

08006410 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	461a      	mov	r2, r3
 800641c:	460b      	mov	r3, r1
 800641e:	817b      	strh	r3, [r7, #10]
 8006420:	4613      	mov	r3, r2
 8006422:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006428:	f7ff f894 	bl	8005554 <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b20      	cmp	r3, #32
 8006438:	f040 8238 	bne.w	80068ac <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	2319      	movs	r3, #25
 8006442:	2201      	movs	r2, #1
 8006444:	497e      	ldr	r1, [pc, #504]	; (8006640 <HAL_I2C_Master_Receive+0x230>)
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f001 f866 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
 8006454:	e22b      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_I2C_Master_Receive+0x54>
 8006460:	2302      	movs	r3, #2
 8006462:	e224      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b01      	cmp	r3, #1
 8006478:	d007      	beq.n	800648a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006498:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2222      	movs	r2, #34	; 0x22
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2210      	movs	r2, #16
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	893a      	ldrh	r2, [r7, #8]
 80064ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a5e      	ldr	r2, [pc, #376]	; (8006644 <HAL_I2C_Master_Receive+0x234>)
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064cc:	8979      	ldrh	r1, [r7, #10]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fdd4 	bl	8007080 <I2C_MasterRequestRead>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e1e5      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d113      	bne.n	8006512 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e1b9      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006516:	2b01      	cmp	r3, #1
 8006518:	d11d      	bne.n	8006556 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006528:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800652a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652c:	2300      	movs	r3, #0
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006552:	b662      	cpsie	i
 8006554:	e197      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655a:	2b02      	cmp	r3, #2
 800655c:	d11d      	bne.n	800659a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800656e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006594:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006596:	b662      	cpsie	i
 8006598:	e175      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80065c0:	e161      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	f200 811a 	bhi.w	8006800 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d123      	bne.n	800661c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f001 f8f5 	bl	80077c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e162      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	855a      	strh	r2, [r3, #42]	; 0x2a
 800661a:	e134      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	2b02      	cmp	r3, #2
 8006622:	d150      	bne.n	80066c6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2200      	movs	r2, #0
 800662c:	4906      	ldr	r1, [pc, #24]	; (8006648 <HAL_I2C_Master_Receive+0x238>)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 ff72 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e137      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
 800663e:	bf00      	nop
 8006640:	00100002 	.word	0x00100002
 8006644:	ffff0000 	.word	0xffff0000
 8006648:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800664c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006690:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066c4:	e0df      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2200      	movs	r2, #0
 80066ce:	497a      	ldr	r1, [pc, #488]	; (80068b8 <HAL_I2C_Master_Receive+0x4a8>)
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 ff21 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0e6      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80066f0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006724:	4b65      	ldr	r3, [pc, #404]	; (80068bc <HAL_I2C_Master_Receive+0x4ac>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	4a65      	ldr	r2, [pc, #404]	; (80068c0 <HAL_I2C_Master_Receive+0x4b0>)
 800672c:	fba2 2303 	umull	r2, r3, r2, r3
 8006730:	0a1a      	lsrs	r2, r3, #8
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	00da      	lsls	r2, r3, #3
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	3b01      	subs	r3, #1
 8006742:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d117      	bne.n	800677a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800676c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e099      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b04      	cmp	r3, #4
 8006786:	d1da      	bne.n	800673e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067ca:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067fe:	e042      	b.n	8006886 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 ffdf 	bl	80077c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e04c      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b04      	cmp	r3, #4
 8006852:	d118      	bne.n	8006886 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	f47f ae99 	bne.w	80065c2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e000      	b.n	80068ae <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3728      	adds	r7, #40	; 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	00010004 	.word	0x00010004
 80068bc:	2000005c 	.word	0x2000005c
 80068c0:	14f8b589 	.word	0x14f8b589

080068c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	4608      	mov	r0, r1
 80068ce:	4611      	mov	r1, r2
 80068d0:	461a      	mov	r2, r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	817b      	strh	r3, [r7, #10]
 80068d6:	460b      	mov	r3, r1
 80068d8:	813b      	strh	r3, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068de:	f7fe fe39 	bl	8005554 <HAL_GetTick>
 80068e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	f040 80d9 	bne.w	8006aa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	2319      	movs	r3, #25
 80068f8:	2201      	movs	r2, #1
 80068fa:	496d      	ldr	r1, [pc, #436]	; (8006ab0 <HAL_I2C_Mem_Write+0x1ec>)
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fe0b 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006908:	2302      	movs	r3, #2
 800690a:	e0cc      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_I2C_Mem_Write+0x56>
 8006916:	2302      	movs	r3, #2
 8006918:	e0c5      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x1e2>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d007      	beq.n	8006940 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a3a      	ldr	r2, [r7, #32]
 800696a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a4d      	ldr	r2, [pc, #308]	; (8006ab4 <HAL_I2C_Mem_Write+0x1f0>)
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006982:	88f8      	ldrh	r0, [r7, #6]
 8006984:	893a      	ldrh	r2, [r7, #8]
 8006986:	8979      	ldrh	r1, [r7, #10]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	9301      	str	r3, [sp, #4]
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4603      	mov	r3, r0
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fc42 	bl	800721c <I2C_RequestMemoryWrite>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d052      	beq.n	8006a44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e081      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fe8c 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00d      	beq.n	80069ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d107      	bne.n	80069ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e06b      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d11b      	bne.n	8006a44 <HAL_I2C_Mem_Write+0x180>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d017      	beq.n	8006a44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1aa      	bne.n	80069a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fe78 	bl	8007746 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d107      	bne.n	8006a74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e016      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	00100002 	.word	0x00100002
 8006ab4:	ffff0000 	.word	0xffff0000

08006ab8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08c      	sub	sp, #48	; 0x30
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	817b      	strh	r3, [r7, #10]
 8006aca:	460b      	mov	r3, r1
 8006acc:	813b      	strh	r3, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ad6:	f7fe fd3d 	bl	8005554 <HAL_GetTick>
 8006ada:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	f040 823d 	bne.w	8006f64 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	2319      	movs	r3, #25
 8006af0:	2201      	movs	r2, #1
 8006af2:	4981      	ldr	r1, [pc, #516]	; (8006cf8 <HAL_I2C_Mem_Read+0x240>)
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fd0f 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006b00:	2302      	movs	r3, #2
 8006b02:	e230      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_I2C_Mem_Read+0x5a>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e229      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d007      	beq.n	8006b38 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0201 	orr.w	r2, r2, #1
 8006b36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2222      	movs	r2, #34	; 0x22
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2240      	movs	r2, #64	; 0x40
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a61      	ldr	r2, [pc, #388]	; (8006cfc <HAL_I2C_Mem_Read+0x244>)
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b7a:	88f8      	ldrh	r0, [r7, #6]
 8006b7c:	893a      	ldrh	r2, [r7, #8]
 8006b7e:	8979      	ldrh	r1, [r7, #10]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fbdc 	bl	8007348 <I2C_RequestMemoryRead>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e1e5      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d113      	bne.n	8006bca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e1b9      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d11d      	bne.n	8006c0e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006be2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c0a:	b662      	cpsie	i
 8006c0c:	e197      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d11d      	bne.n	8006c52 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c26:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c4e:	b662      	cpsie	i
 8006c50:	e175      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c62:	2300      	movs	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006c78:	e161      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	f200 811a 	bhi.w	8006eb8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d123      	bne.n	8006cd4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fd99 	bl	80077c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e162      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cd2:	e134      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d150      	bne.n	8006d7e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4906      	ldr	r1, [pc, #24]	; (8006d00 <HAL_I2C_Mem_Read+0x248>)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fc16 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e137      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
 8006cf6:	bf00      	nop
 8006cf8:	00100002 	.word	0x00100002
 8006cfc:	ffff0000 	.word	0xffff0000
 8006d00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006d04:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d14:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d48:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d7c:	e0df      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	2200      	movs	r2, #0
 8006d86:	497a      	ldr	r1, [pc, #488]	; (8006f70 <HAL_I2C_Mem_Read+0x4b8>)
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fbc5 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0e6      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006da8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ddc:	4b65      	ldr	r3, [pc, #404]	; (8006f74 <HAL_I2C_Mem_Read+0x4bc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	08db      	lsrs	r3, r3, #3
 8006de2:	4a65      	ldr	r2, [pc, #404]	; (8006f78 <HAL_I2C_Mem_Read+0x4c0>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	0a1a      	lsrs	r2, r3, #8
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	00da      	lsls	r2, r3, #3
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d117      	bne.n	8006e32 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006e24:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e099      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d1da      	bne.n	8006df6 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e82:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eb6:	e042      	b.n	8006f3e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fc83 	bl	80077c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e04c      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d118      	bne.n	8006f3e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f47f ae99 	bne.w	8006c7a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e000      	b.n	8006f66 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3728      	adds	r7, #40	; 0x28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	00010004 	.word	0x00010004
 8006f74:	2000005c 	.word	0x2000005c
 8006f78:	14f8b589 	.word	0x14f8b589

08006f7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d006      	beq.n	8006fa6 <I2C_MasterRequestWrite+0x2a>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d003      	beq.n	8006fa6 <I2C_MasterRequestWrite+0x2a>
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fa4:	d108      	bne.n	8006fb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e00b      	b.n	8006fd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	2b12      	cmp	r3, #18
 8006fbe:	d107      	bne.n	8006fd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fa9b 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00d      	beq.n	8007004 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff6:	d103      	bne.n	8007000 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e035      	b.n	8007070 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800700c:	d108      	bne.n	8007020 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800700e:	897b      	ldrh	r3, [r7, #10]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800701c:	611a      	str	r2, [r3, #16]
 800701e:	e01b      	b.n	8007058 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007020:	897b      	ldrh	r3, [r7, #10]
 8007022:	11db      	asrs	r3, r3, #7
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0306 	and.w	r3, r3, #6
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f063 030f 	orn	r3, r3, #15
 8007030:	b2da      	uxtb	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	490e      	ldr	r1, [pc, #56]	; (8007078 <I2C_MasterRequestWrite+0xfc>)
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fac1 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e010      	b.n	8007070 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800704e:	897b      	ldrh	r3, [r7, #10]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	4907      	ldr	r1, [pc, #28]	; (800707c <I2C_MasterRequestWrite+0x100>)
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fab1 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	00010008 	.word	0x00010008
 800707c:	00010002 	.word	0x00010002

08007080 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	460b      	mov	r3, r1
 800708e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d006      	beq.n	80070ba <I2C_MasterRequestRead+0x3a>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d003      	beq.n	80070ba <I2C_MasterRequestRead+0x3a>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070b8:	d108      	bne.n	80070cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e00b      	b.n	80070e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	2b11      	cmp	r3, #17
 80070d2:	d107      	bne.n	80070e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fa11 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710a:	d103      	bne.n	8007114 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e079      	b.n	800720c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007120:	d108      	bne.n	8007134 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007122:	897b      	ldrh	r3, [r7, #10]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	611a      	str	r2, [r3, #16]
 8007132:	e05f      	b.n	80071f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007134:	897b      	ldrh	r3, [r7, #10]
 8007136:	11db      	asrs	r3, r3, #7
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0306 	and.w	r3, r3, #6
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f063 030f 	orn	r3, r3, #15
 8007144:	b2da      	uxtb	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4930      	ldr	r1, [pc, #192]	; (8007214 <I2C_MasterRequestRead+0x194>)
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 fa37 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e054      	b.n	800720c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	4929      	ldr	r1, [pc, #164]	; (8007218 <I2C_MasterRequestRead+0x198>)
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fa27 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e044      	b.n	800720c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f9af 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ce:	d103      	bne.n	80071d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e017      	b.n	800720c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80071dc:	897b      	ldrh	r3, [r7, #10]
 80071de:	11db      	asrs	r3, r3, #7
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f003 0306 	and.w	r3, r3, #6
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f063 030e 	orn	r3, r3, #14
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	4907      	ldr	r1, [pc, #28]	; (8007218 <I2C_MasterRequestRead+0x198>)
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f9e3 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	00010008 	.word	0x00010008
 8007218:	00010002 	.word	0x00010002

0800721c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	4603      	mov	r3, r0
 800722c:	817b      	strh	r3, [r7, #10]
 800722e:	460b      	mov	r3, r1
 8007230:	813b      	strh	r3, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007244:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	2200      	movs	r2, #0
 800724e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f960 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00d      	beq.n	800727a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726c:	d103      	bne.n	8007276 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e05f      	b.n	800733a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800727a:	897b      	ldrh	r3, [r7, #10]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007288:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	6a3a      	ldr	r2, [r7, #32]
 800728e:	492d      	ldr	r1, [pc, #180]	; (8007344 <I2C_RequestMemoryWrite+0x128>)
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f998 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e04c      	b.n	800733a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b8:	6a39      	ldr	r1, [r7, #32]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fa02 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d107      	bne.n	80072de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e02b      	b.n	800733a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d105      	bne.n	80072f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072e8:	893b      	ldrh	r3, [r7, #8]
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	611a      	str	r2, [r3, #16]
 80072f2:	e021      	b.n	8007338 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072f4:	893b      	ldrh	r3, [r7, #8]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007304:	6a39      	ldr	r1, [r7, #32]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f9dc 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2b04      	cmp	r3, #4
 8007318:	d107      	bne.n	800732a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007328:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e005      	b.n	800733a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800732e:	893b      	ldrh	r3, [r7, #8]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	00010002 	.word	0x00010002

08007348 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af02      	add	r7, sp, #8
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	4608      	mov	r0, r1
 8007352:	4611      	mov	r1, r2
 8007354:	461a      	mov	r2, r3
 8007356:	4603      	mov	r3, r0
 8007358:	817b      	strh	r3, [r7, #10]
 800735a:	460b      	mov	r3, r1
 800735c:	813b      	strh	r3, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007370:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	2200      	movs	r2, #0
 800738a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f8c2 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a8:	d103      	bne.n	80073b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e0aa      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073b6:	897b      	ldrh	r3, [r7, #10]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	4952      	ldr	r1, [pc, #328]	; (8007514 <I2C_RequestMemoryRead+0x1cc>)
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f8fa 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e097      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f4:	6a39      	ldr	r1, [r7, #32]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f964 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00d      	beq.n	800741e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	2b04      	cmp	r3, #4
 8007408:	d107      	bne.n	800741a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e076      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d105      	bne.n	8007430 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007424:	893b      	ldrh	r3, [r7, #8]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	611a      	str	r2, [r3, #16]
 800742e:	e021      	b.n	8007474 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007430:	893b      	ldrh	r3, [r7, #8]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	b2da      	uxtb	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800743e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007440:	6a39      	ldr	r1, [r7, #32]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f93e 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00d      	beq.n	800746a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	2b04      	cmp	r3, #4
 8007454:	d107      	bne.n	8007466 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e050      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800746a:	893b      	ldrh	r3, [r7, #8]
 800746c:	b2da      	uxtb	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	6a39      	ldr	r1, [r7, #32]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f923 	bl	80076c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	2b04      	cmp	r3, #4
 800748a:	d107      	bne.n	800749c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800749a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e035      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f82b 	bl	8007518 <I2C_WaitOnFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00d      	beq.n	80074e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d6:	d103      	bne.n	80074e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e013      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074e4:	897b      	ldrh	r3, [r7, #10]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	4906      	ldr	r1, [pc, #24]	; (8007514 <I2C_RequestMemoryRead+0x1cc>)
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f863 	bl	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	00010002 	.word	0x00010002

08007518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007528:	e025      	b.n	8007576 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007530:	d021      	beq.n	8007576 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007532:	f7fe f80f 	bl	8005554 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d116      	bne.n	8007576 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f043 0220 	orr.w	r2, r3, #32
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e023      	b.n	80075be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	d10d      	bne.n	800759c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	43da      	mvns	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4013      	ands	r3, r2
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	bf0c      	ite	eq
 8007592:	2301      	moveq	r3, #1
 8007594:	2300      	movne	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	e00c      	b.n	80075b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	43da      	mvns	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	4013      	ands	r3, r2
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf0c      	ite	eq
 80075ae:	2301      	moveq	r3, #1
 80075b0:	2300      	movne	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d0b6      	beq.n	800752a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075d4:	e051      	b.n	800767a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d123      	bne.n	800762e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f043 0204 	orr.w	r2, r3, #4
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e046      	b.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007634:	d021      	beq.n	800767a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007636:	f7fd ff8d 	bl	8005554 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d302      	bcc.n	800764c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d116      	bne.n	800767a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e020      	b.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10c      	bne.n	800769e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	43da      	mvns	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4013      	ands	r3, r2
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf14      	ite	ne
 8007696:	2301      	movne	r3, #1
 8007698:	2300      	moveq	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	e00b      	b.n	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	43da      	mvns	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4013      	ands	r3, r2
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf14      	ite	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	2300      	moveq	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d18d      	bne.n	80075d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076d0:	e02d      	b.n	800772e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 f8ce 	bl	8007874 <I2C_IsAcknowledgeFailed>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e02d      	b.n	800773e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e8:	d021      	beq.n	800772e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ea:	f7fd ff33 	bl	8005554 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d116      	bne.n	800772e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f043 0220 	orr.w	r2, r3, #32
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e007      	b.n	800773e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007738:	2b80      	cmp	r3, #128	; 0x80
 800773a:	d1ca      	bne.n	80076d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007752:	e02d      	b.n	80077b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f88d 	bl	8007874 <I2C_IsAcknowledgeFailed>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e02d      	b.n	80077c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800776a:	d021      	beq.n	80077b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776c:	f7fd fef2 	bl	8005554 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	429a      	cmp	r2, r3
 800777a:	d302      	bcc.n	8007782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d116      	bne.n	80077b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f043 0220 	orr.w	r2, r3, #32
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e007      	b.n	80077c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d1ca      	bne.n	8007754 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077d4:	e042      	b.n	800785c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d119      	bne.n	8007818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0210 	mvn.w	r2, #16
 80077ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e029      	b.n	800786c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007818:	f7fd fe9c 	bl	8005554 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	429a      	cmp	r2, r3
 8007826:	d302      	bcc.n	800782e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d116      	bne.n	800785c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	f043 0220 	orr.w	r2, r3, #32
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e007      	b.n	800786c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d1b5      	bne.n	80077d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788a:	d11b      	bne.n	80078c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	f043 0204 	orr.w	r2, r3, #4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e26c      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8087 	beq.w	80079fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078f0:	4b92      	ldr	r3, [pc, #584]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 030c 	and.w	r3, r3, #12
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d00c      	beq.n	8007916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80078fc:	4b8f      	ldr	r3, [pc, #572]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b08      	cmp	r3, #8
 8007906:	d112      	bne.n	800792e <HAL_RCC_OscConfig+0x5e>
 8007908:	4b8c      	ldr	r3, [pc, #560]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007914:	d10b      	bne.n	800792e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007916:	4b89      	ldr	r3, [pc, #548]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d06c      	beq.n	80079fc <HAL_RCC_OscConfig+0x12c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d168      	bne.n	80079fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e246      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007936:	d106      	bne.n	8007946 <HAL_RCC_OscConfig+0x76>
 8007938:	4b80      	ldr	r3, [pc, #512]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a7f      	ldr	r2, [pc, #508]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800793e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e02e      	b.n	80079a4 <HAL_RCC_OscConfig+0xd4>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <HAL_RCC_OscConfig+0x98>
 800794e:	4b7b      	ldr	r3, [pc, #492]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a7a      	ldr	r2, [pc, #488]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4b78      	ldr	r3, [pc, #480]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a77      	ldr	r2, [pc, #476]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	e01d      	b.n	80079a4 <HAL_RCC_OscConfig+0xd4>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007970:	d10c      	bne.n	800798c <HAL_RCC_OscConfig+0xbc>
 8007972:	4b72      	ldr	r3, [pc, #456]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a71      	ldr	r2, [pc, #452]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	4b6f      	ldr	r3, [pc, #444]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a6e      	ldr	r2, [pc, #440]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e00b      	b.n	80079a4 <HAL_RCC_OscConfig+0xd4>
 800798c:	4b6b      	ldr	r3, [pc, #428]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a6a      	ldr	r2, [pc, #424]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	4b68      	ldr	r3, [pc, #416]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a67      	ldr	r2, [pc, #412]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 800799e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d013      	beq.n	80079d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ac:	f7fd fdd2 	bl	8005554 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b4:	f7fd fdce 	bl	8005554 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b64      	cmp	r3, #100	; 0x64
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e1fa      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c6:	4b5d      	ldr	r3, [pc, #372]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <HAL_RCC_OscConfig+0xe4>
 80079d2:	e014      	b.n	80079fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d4:	f7fd fdbe 	bl	8005554 <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079dc:	f7fd fdba 	bl	8005554 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b64      	cmp	r3, #100	; 0x64
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e1e6      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ee:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f0      	bne.n	80079dc <HAL_RCC_OscConfig+0x10c>
 80079fa:	e000      	b.n	80079fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d063      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a0a:	4b4c      	ldr	r3, [pc, #304]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f003 030c 	and.w	r3, r3, #12
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007a16:	4b49      	ldr	r3, [pc, #292]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d11c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x18c>
 8007a22:	4b46      	ldr	r3, [pc, #280]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d116      	bne.n	8007a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2e:	4b43      	ldr	r3, [pc, #268]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_RCC_OscConfig+0x176>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d001      	beq.n	8007a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e1ba      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a46:	4b3d      	ldr	r3, [pc, #244]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4939      	ldr	r1, [pc, #228]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a5a:	e03a      	b.n	8007ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d020      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a64:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <HAL_RCC_OscConfig+0x270>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6a:	f7fd fd73 	bl	8005554 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a72:	f7fd fd6f 	bl	8005554 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e19b      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a84:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a90:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4927      	ldr	r1, [pc, #156]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	600b      	str	r3, [r1, #0]
 8007aa4:	e015      	b.n	8007ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aa6:	4b26      	ldr	r3, [pc, #152]	; (8007b40 <HAL_RCC_OscConfig+0x270>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aac:	f7fd fd52 	bl	8005554 <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ab4:	f7fd fd4e 	bl	8005554 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e17a      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ac6:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d03a      	beq.n	8007b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d019      	beq.n	8007b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ae6:	4b17      	ldr	r3, [pc, #92]	; (8007b44 <HAL_RCC_OscConfig+0x274>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aec:	f7fd fd32 	bl	8005554 <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007af4:	f7fd fd2e 	bl	8005554 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e15a      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b06:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <HAL_RCC_OscConfig+0x26c>)
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f0      	beq.n	8007af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007b12:	2001      	movs	r0, #1
 8007b14:	f000 fada 	bl	80080cc <RCC_Delay>
 8007b18:	e01c      	b.n	8007b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <HAL_RCC_OscConfig+0x274>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b20:	f7fd fd18 	bl	8005554 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b26:	e00f      	b.n	8007b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b28:	f7fd fd14 	bl	8005554 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d908      	bls.n	8007b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e140      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
 8007b3a:	bf00      	nop
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	42420000 	.word	0x42420000
 8007b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b48:	4b9e      	ldr	r3, [pc, #632]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e9      	bne.n	8007b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80a6 	beq.w	8007cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b66:	4b97      	ldr	r3, [pc, #604]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10d      	bne.n	8007b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b72:	4b94      	ldr	r3, [pc, #592]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4a93      	ldr	r2, [pc, #588]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	61d3      	str	r3, [r2, #28]
 8007b7e:	4b91      	ldr	r3, [pc, #580]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b8e:	4b8e      	ldr	r3, [pc, #568]	; (8007dc8 <HAL_RCC_OscConfig+0x4f8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d118      	bne.n	8007bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b9a:	4b8b      	ldr	r3, [pc, #556]	; (8007dc8 <HAL_RCC_OscConfig+0x4f8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a8a      	ldr	r2, [pc, #552]	; (8007dc8 <HAL_RCC_OscConfig+0x4f8>)
 8007ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ba6:	f7fd fcd5 	bl	8005554 <HAL_GetTick>
 8007baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bac:	e008      	b.n	8007bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bae:	f7fd fcd1 	bl	8005554 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b64      	cmp	r3, #100	; 0x64
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e0fd      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc0:	4b81      	ldr	r3, [pc, #516]	; (8007dc8 <HAL_RCC_OscConfig+0x4f8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0f0      	beq.n	8007bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d106      	bne.n	8007be2 <HAL_RCC_OscConfig+0x312>
 8007bd4:	4b7b      	ldr	r3, [pc, #492]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	4a7a      	ldr	r2, [pc, #488]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	6213      	str	r3, [r2, #32]
 8007be0:	e02d      	b.n	8007c3e <HAL_RCC_OscConfig+0x36e>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10c      	bne.n	8007c04 <HAL_RCC_OscConfig+0x334>
 8007bea:	4b76      	ldr	r3, [pc, #472]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	4a75      	ldr	r2, [pc, #468]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	6213      	str	r3, [r2, #32]
 8007bf6:	4b73      	ldr	r3, [pc, #460]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	4a72      	ldr	r2, [pc, #456]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007bfc:	f023 0304 	bic.w	r3, r3, #4
 8007c00:	6213      	str	r3, [r2, #32]
 8007c02:	e01c      	b.n	8007c3e <HAL_RCC_OscConfig+0x36e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d10c      	bne.n	8007c26 <HAL_RCC_OscConfig+0x356>
 8007c0c:	4b6d      	ldr	r3, [pc, #436]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	4a6c      	ldr	r2, [pc, #432]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c12:	f043 0304 	orr.w	r3, r3, #4
 8007c16:	6213      	str	r3, [r2, #32]
 8007c18:	4b6a      	ldr	r3, [pc, #424]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	4a69      	ldr	r2, [pc, #420]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c1e:	f043 0301 	orr.w	r3, r3, #1
 8007c22:	6213      	str	r3, [r2, #32]
 8007c24:	e00b      	b.n	8007c3e <HAL_RCC_OscConfig+0x36e>
 8007c26:	4b67      	ldr	r3, [pc, #412]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	4a66      	ldr	r2, [pc, #408]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	6213      	str	r3, [r2, #32]
 8007c32:	4b64      	ldr	r3, [pc, #400]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	4a63      	ldr	r2, [pc, #396]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c38:	f023 0304 	bic.w	r3, r3, #4
 8007c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c46:	f7fd fc85 	bl	8005554 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4c:	e00a      	b.n	8007c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4e:	f7fd fc81 	bl	8005554 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e0ab      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c64:	4b57      	ldr	r3, [pc, #348]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0ee      	beq.n	8007c4e <HAL_RCC_OscConfig+0x37e>
 8007c70:	e014      	b.n	8007c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c72:	f7fd fc6f 	bl	8005554 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c78:	e00a      	b.n	8007c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c7a:	f7fd fc6b 	bl	8005554 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e095      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c90:	4b4c      	ldr	r3, [pc, #304]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ee      	bne.n	8007c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d105      	bne.n	8007cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ca2:	4b48      	ldr	r3, [pc, #288]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	4a47      	ldr	r2, [pc, #284]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 8081 	beq.w	8007dba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cb8:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f003 030c 	and.w	r3, r3, #12
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d061      	beq.n	8007d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d146      	bne.n	8007d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ccc:	4b3f      	ldr	r3, [pc, #252]	; (8007dcc <HAL_RCC_OscConfig+0x4fc>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd2:	f7fd fc3f 	bl	8005554 <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cd8:	e008      	b.n	8007cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cda:	f7fd fc3b 	bl	8005554 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d901      	bls.n	8007cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e067      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1f0      	bne.n	8007cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d00:	d108      	bne.n	8007d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007d02:	4b30      	ldr	r3, [pc, #192]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	492d      	ldr	r1, [pc, #180]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d14:	4b2b      	ldr	r3, [pc, #172]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a19      	ldr	r1, [r3, #32]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	430b      	orrs	r3, r1
 8007d26:	4927      	ldr	r1, [pc, #156]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <HAL_RCC_OscConfig+0x4fc>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d32:	f7fd fc0f 	bl	8005554 <HAL_GetTick>
 8007d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d3a:	f7fd fc0b 	bl	8005554 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e037      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <HAL_RCC_OscConfig+0x46a>
 8007d58:	e02f      	b.n	8007dba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d5a:	4b1c      	ldr	r3, [pc, #112]	; (8007dcc <HAL_RCC_OscConfig+0x4fc>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d60:	f7fd fbf8 	bl	8005554 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d68:	f7fd fbf4 	bl	8005554 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e020      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f0      	bne.n	8007d68 <HAL_RCC_OscConfig+0x498>
 8007d86:	e018      	b.n	8007dba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e013      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCC_OscConfig+0x4f4>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d106      	bne.n	8007db6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d001      	beq.n	8007dba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	40007000 	.word	0x40007000
 8007dcc:	42420060 	.word	0x42420060

08007dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0d0      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007de4:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d910      	bls.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 0207 	bic.w	r2, r3, #7
 8007dfa:	4965      	ldr	r1, [pc, #404]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e0b8      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e2c:	4b59      	ldr	r3, [pc, #356]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4a58      	ldr	r2, [pc, #352]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e44:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a52      	ldr	r2, [pc, #328]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e50:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	494d      	ldr	r1, [pc, #308]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d040      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e76:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d115      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e07f      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e8e:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e073      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e9e:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e06b      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eae:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f023 0203 	bic.w	r2, r3, #3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	4936      	ldr	r1, [pc, #216]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ec0:	f7fd fb48 	bl	8005554 <HAL_GetTick>
 8007ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec6:	e00a      	b.n	8007ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec8:	f7fd fb44 	bl	8005554 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e053      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ede:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f003 020c 	and.w	r2, r3, #12
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d1eb      	bne.n	8007ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ef0:	4b27      	ldr	r3, [pc, #156]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d210      	bcs.n	8007f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f023 0207 	bic.w	r2, r3, #7
 8007f06:	4922      	ldr	r1, [pc, #136]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d001      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e032      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f2c:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	4916      	ldr	r1, [pc, #88]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	490e      	ldr	r1, [pc, #56]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f5e:	f000 f821 	bl	8007fa4 <HAL_RCC_GetSysClockFreq>
 8007f62:	4601      	mov	r1, r0
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <HAL_RCC_ClockConfig+0x1c8>)
 8007f70:	5cd3      	ldrb	r3, [r2, r3]
 8007f72:	fa21 f303 	lsr.w	r3, r1, r3
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <HAL_RCC_ClockConfig+0x1cc>)
 8007f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd faa6 	bl	80054d0 <HAL_InitTick>

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40022000 	.word	0x40022000
 8007f94:	40021000 	.word	0x40021000
 8007f98:	0800d95c 	.word	0x0800d95c
 8007f9c:	2000005c 	.word	0x2000005c
 8007fa0:	20000060 	.word	0x20000060

08007fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fa4:	b490      	push	{r4, r7}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007faa:	4b2a      	ldr	r3, [pc, #168]	; (8008054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007fac:	1d3c      	adds	r4, r7, #4
 8007fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007fb4:	4b28      	ldr	r3, [pc, #160]	; (8008058 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007fce:	4b23      	ldr	r3, [pc, #140]	; (800805c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d002      	beq.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d003      	beq.n	8007fea <HAL_RCC_GetSysClockFreq+0x46>
 8007fe2:	e02d      	b.n	8008040 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007fe4:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fe6:	623b      	str	r3, [r7, #32]
      break;
 8007fe8:	e02d      	b.n	8008046 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	0c9b      	lsrs	r3, r3, #18
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007ffc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d013      	beq.n	8008030 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008008:	4b14      	ldr	r3, [pc, #80]	; (800805c <HAL_RCC_GetSysClockFreq+0xb8>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	0c5b      	lsrs	r3, r3, #17
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008016:	4413      	add	r3, r2
 8008018:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800801c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	4a0f      	ldr	r2, [pc, #60]	; (8008060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008022:	fb02 f203 	mul.w	r2, r2, r3
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	fbb2 f3f3 	udiv	r3, r2, r3
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
 800802e:	e004      	b.n	800803a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008034:	fb02 f303 	mul.w	r3, r2, r3
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	623b      	str	r3, [r7, #32]
      break;
 800803e:	e002      	b.n	8008046 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008040:	4b07      	ldr	r3, [pc, #28]	; (8008060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008042:	623b      	str	r3, [r7, #32]
      break;
 8008044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008046:	6a3b      	ldr	r3, [r7, #32]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3728      	adds	r7, #40	; 0x28
 800804c:	46bd      	mov	sp, r7
 800804e:	bc90      	pop	{r4, r7}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	0800d1dc 	.word	0x0800d1dc
 8008058:	0800d1ec 	.word	0x0800d1ec
 800805c:	40021000 	.word	0x40021000
 8008060:	007a1200 	.word	0x007a1200
 8008064:	003d0900 	.word	0x003d0900

08008068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <HAL_RCC_GetHCLKFreq+0x10>)
 800806e:	681b      	ldr	r3, [r3, #0]
}
 8008070:	4618      	mov	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr
 8008078:	2000005c 	.word	0x2000005c

0800807c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008080:	f7ff fff2 	bl	8008068 <HAL_RCC_GetHCLKFreq>
 8008084:	4601      	mov	r1, r0
 8008086:	4b05      	ldr	r3, [pc, #20]	; (800809c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	4a03      	ldr	r2, [pc, #12]	; (80080a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008092:	5cd3      	ldrb	r3, [r2, r3]
 8008094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008098:	4618      	mov	r0, r3
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40021000 	.word	0x40021000
 80080a0:	0800d96c 	.word	0x0800d96c

080080a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080a8:	f7ff ffde 	bl	8008068 <HAL_RCC_GetHCLKFreq>
 80080ac:	4601      	mov	r1, r0
 80080ae:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	0adb      	lsrs	r3, r3, #11
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	4a03      	ldr	r2, [pc, #12]	; (80080c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ba:	5cd3      	ldrb	r3, [r2, r3]
 80080bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40021000 	.word	0x40021000
 80080c8:	0800d96c 	.word	0x0800d96c

080080cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <RCC_Delay+0x34>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a0a      	ldr	r2, [pc, #40]	; (8008104 <RCC_Delay+0x38>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	0a5b      	lsrs	r3, r3, #9
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
 80080e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80080e8:	bf00      	nop
  }
  while (Delay --);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1e5a      	subs	r2, r3, #1
 80080ee:	60fa      	str	r2, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1f9      	bne.n	80080e8 <RCC_Delay+0x1c>
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	2000005c 	.word	0x2000005c
 8008104:	10624dd3 	.word	0x10624dd3

08008108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e053      	b.n	80081c2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7fc fed3 	bl	8004ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2202      	movs	r2, #2
 800813e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008150:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	ea42 0103 	orr.w	r1, r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	0c1a      	lsrs	r2, r3, #16
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f002 0204 	and.w	r2, r2, #4
 80081a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69da      	ldr	r2, [r3, #28]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e01d      	b.n	8008218 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fc fec1 	bl	8004f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f000 fb0b 	bl	8008824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0201 	orr.w	r2, r2, #1
 8008236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b06      	cmp	r3, #6
 8008248:	d007      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0201 	orr.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr

08008266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e01d      	b.n	80082b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d106      	bne.n	8008292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f815 	bl	80082bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2202      	movs	r2, #2
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f000 fabd 	bl	8008824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d122      	bne.n	800832a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d11b      	bne.n	800832a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0202 	mvn.w	r2, #2
 80082fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa6b 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 8008316:	e005      	b.n	8008324 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa5e 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa6d 	bl	80087fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b04      	cmp	r3, #4
 8008336:	d122      	bne.n	800837e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b04      	cmp	r3, #4
 8008344:	d11b      	bne.n	800837e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f06f 0204 	mvn.w	r2, #4
 800834e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa41 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 800836a:	e005      	b.n	8008378 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fa34 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa43 	bl	80087fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b08      	cmp	r3, #8
 800838a:	d122      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b08      	cmp	r3, #8
 8008398:	d11b      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f06f 0208 	mvn.w	r2, #8
 80083a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2204      	movs	r2, #4
 80083a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa17 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 80083be:	e005      	b.n	80083cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa0a 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa19 	bl	80087fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b10      	cmp	r3, #16
 80083de:	d122      	bne.n	8008426 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d11b      	bne.n	8008426 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f06f 0210 	mvn.w	r2, #16
 80083f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2208      	movs	r2, #8
 80083fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f9ed 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 8008412:	e005      	b.n	8008420 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f9e0 	bl	80087da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9ef 	bl	80087fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d10e      	bne.n	8008452 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f06f 0201 	mvn.w	r2, #1
 800844a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fa fe5f 	bl	8003110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d10e      	bne.n	800847e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d107      	bne.n	800847e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fcf1 	bl	8008e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	d10e      	bne.n	80084aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d107      	bne.n	80084aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9b3 	bl	8008810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d10e      	bne.n	80084d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d107      	bne.n	80084d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f06f 0220 	mvn.w	r2, #32
 80084ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcbc 	bl	8008e4e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e0b4      	b.n	8008664 <HAL_TIM_PWM_ConfigChannel+0x184>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2202      	movs	r2, #2
 8008506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b0c      	cmp	r3, #12
 800850e:	f200 809f 	bhi.w	8008650 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	0800854d 	.word	0x0800854d
 800851c:	08008651 	.word	0x08008651
 8008520:	08008651 	.word	0x08008651
 8008524:	08008651 	.word	0x08008651
 8008528:	0800858d 	.word	0x0800858d
 800852c:	08008651 	.word	0x08008651
 8008530:	08008651 	.word	0x08008651
 8008534:	08008651 	.word	0x08008651
 8008538:	080085cf 	.word	0x080085cf
 800853c:	08008651 	.word	0x08008651
 8008540:	08008651 	.word	0x08008651
 8008544:	08008651 	.word	0x08008651
 8008548:	0800860f 	.word	0x0800860f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f9c8 	bl	80088e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0208 	orr.w	r2, r2, #8
 8008566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699a      	ldr	r2, [r3, #24]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0204 	bic.w	r2, r2, #4
 8008576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6999      	ldr	r1, [r3, #24]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	691a      	ldr	r2, [r3, #16]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	619a      	str	r2, [r3, #24]
      break;
 800858a:	e062      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68b9      	ldr	r1, [r7, #8]
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fa0e 	bl	80089b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6999      	ldr	r1, [r3, #24]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	021a      	lsls	r2, r3, #8
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	619a      	str	r2, [r3, #24]
      break;
 80085cc:	e041      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fa57 	bl	8008a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0208 	orr.w	r2, r2, #8
 80085e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0204 	bic.w	r2, r2, #4
 80085f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69d9      	ldr	r1, [r3, #28]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	61da      	str	r2, [r3, #28]
      break;
 800860c:	e021      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 faa1 	bl	8008b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69da      	ldr	r2, [r3, #28]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69d9      	ldr	r1, [r3, #28]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	021a      	lsls	r2, r3, #8
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	61da      	str	r2, [r3, #28]
      break;
 800864e:	e000      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008650:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIM_ConfigClockSource+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e0a6      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x166>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b40      	cmp	r3, #64	; 0x40
 80086ba:	d067      	beq.n	800878c <HAL_TIM_ConfigClockSource+0x120>
 80086bc:	2b40      	cmp	r3, #64	; 0x40
 80086be:	d80b      	bhi.n	80086d8 <HAL_TIM_ConfigClockSource+0x6c>
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d073      	beq.n	80087ac <HAL_TIM_ConfigClockSource+0x140>
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d802      	bhi.n	80086ce <HAL_TIM_ConfigClockSource+0x62>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d06f      	beq.n	80087ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80086cc:	e078      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	d06c      	beq.n	80087ac <HAL_TIM_ConfigClockSource+0x140>
 80086d2:	2b30      	cmp	r3, #48	; 0x30
 80086d4:	d06a      	beq.n	80087ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80086d6:	e073      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086d8:	2b70      	cmp	r3, #112	; 0x70
 80086da:	d00d      	beq.n	80086f8 <HAL_TIM_ConfigClockSource+0x8c>
 80086dc:	2b70      	cmp	r3, #112	; 0x70
 80086de:	d804      	bhi.n	80086ea <HAL_TIM_ConfigClockSource+0x7e>
 80086e0:	2b50      	cmp	r3, #80	; 0x50
 80086e2:	d033      	beq.n	800874c <HAL_TIM_ConfigClockSource+0xe0>
 80086e4:	2b60      	cmp	r3, #96	; 0x60
 80086e6:	d041      	beq.n	800876c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80086e8:	e06a      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ee:	d066      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x152>
 80086f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f4:	d017      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80086f6:	e063      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6899      	ldr	r1, [r3, #8]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f000 faed 	bl	8008ce6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800871a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	609a      	str	r2, [r3, #8]
      break;
 8008724:	e04c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6899      	ldr	r1, [r3, #8]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f000 fad6 	bl	8008ce6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008748:	609a      	str	r2, [r3, #8]
      break;
 800874a:	e039      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	461a      	mov	r2, r3
 800875a:	f000 fa4d 	bl	8008bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2150      	movs	r1, #80	; 0x50
 8008764:	4618      	mov	r0, r3
 8008766:	f000 faa4 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 800876a:	e029      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6818      	ldr	r0, [r3, #0]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6859      	ldr	r1, [r3, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	461a      	mov	r2, r3
 800877a:	f000 fa6b 	bl	8008c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2160      	movs	r1, #96	; 0x60
 8008784:	4618      	mov	r0, r3
 8008786:	f000 fa94 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 800878a:	e019      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	6859      	ldr	r1, [r3, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	461a      	mov	r2, r3
 800879a:	f000 fa2d 	bl	8008bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2140      	movs	r1, #64	; 0x40
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 fa84 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 80087aa:	e009      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f000 fa7b 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 80087bc:	e000      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80087be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr

080087fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr
	...

08008824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a29      	ldr	r2, [pc, #164]	; (80088dc <TIM_Base_SetConfig+0xb8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00b      	beq.n	8008854 <TIM_Base_SetConfig+0x30>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008842:	d007      	beq.n	8008854 <TIM_Base_SetConfig+0x30>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a26      	ldr	r2, [pc, #152]	; (80088e0 <TIM_Base_SetConfig+0xbc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d003      	beq.n	8008854 <TIM_Base_SetConfig+0x30>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a25      	ldr	r2, [pc, #148]	; (80088e4 <TIM_Base_SetConfig+0xc0>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d108      	bne.n	8008866 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <TIM_Base_SetConfig+0xb8>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d00b      	beq.n	8008886 <TIM_Base_SetConfig+0x62>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008874:	d007      	beq.n	8008886 <TIM_Base_SetConfig+0x62>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a19      	ldr	r2, [pc, #100]	; (80088e0 <TIM_Base_SetConfig+0xbc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d003      	beq.n	8008886 <TIM_Base_SetConfig+0x62>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a18      	ldr	r2, [pc, #96]	; (80088e4 <TIM_Base_SetConfig+0xc0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d108      	bne.n	8008898 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800888c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a07      	ldr	r2, [pc, #28]	; (80088dc <TIM_Base_SetConfig+0xb8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d103      	bne.n	80088cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	615a      	str	r2, [r3, #20]
}
 80088d2:	bf00      	nop
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	40012c00 	.word	0x40012c00
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800

080088e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f023 0201 	bic.w	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f023 0302 	bic.w	r3, r3, #2
 8008930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <TIM_OC1_SetConfig+0xc8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d10c      	bne.n	800895e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f023 0308 	bic.w	r3, r3, #8
 800894a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 0304 	bic.w	r3, r3, #4
 800895c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a13      	ldr	r2, [pc, #76]	; (80089b0 <TIM_OC1_SetConfig+0xc8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d111      	bne.n	800898a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800896c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	621a      	str	r2, [r3, #32]
}
 80089a4:	bf00      	nop
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40012c00 	.word	0x40012c00

080089b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	f023 0210 	bic.w	r2, r3, #16
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	021b      	lsls	r3, r3, #8
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0320 	bic.w	r3, r3, #32
 80089fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <TIM_OC2_SetConfig+0xd0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10d      	bne.n	8008a30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <TIM_OC2_SetConfig+0xd0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d113      	bne.n	8008a60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr
 8008a84:	40012c00 	.word	0x40012c00

08008a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <TIM_OC3_SetConfig+0xd0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d10d      	bne.n	8008b02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <TIM_OC3_SetConfig+0xd0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d113      	bne.n	8008b32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	621a      	str	r2, [r3, #32]
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40012c00 	.word	0x40012c00

08008b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	031b      	lsls	r3, r3, #12
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a0f      	ldr	r2, [pc, #60]	; (8008bf4 <TIM_OC4_SetConfig+0x98>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	019b      	lsls	r3, r3, #6
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr
 8008bf4:	40012c00 	.word	0x40012c00

08008bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f023 0201 	bic.w	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	011b      	lsls	r3, r3, #4
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f023 030a 	bic.w	r3, r3, #10
 8008c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	621a      	str	r2, [r3, #32]
}
 8008c4a:	bf00      	nop
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	f023 0210 	bic.w	r2, r3, #16
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	031b      	lsls	r3, r3, #12
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	621a      	str	r2, [r3, #32]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f043 0307 	orr.w	r3, r3, #7
 8008cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	609a      	str	r2, [r3, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bc80      	pop	{r7}
 8008ce4:	4770      	bx	lr

08008ce6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b087      	sub	sp, #28
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
 8008cf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	021a      	lsls	r2, r3, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	609a      	str	r2, [r3, #8]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e032      	b.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d74:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e03d      	b.n	8008e44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr

08008e4e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr

08008e72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e03f      	b.n	8008f04 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d106      	bne.n	8008e9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fc f8d9 	bl	8005050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2224      	movs	r2, #36	; 0x24
 8008ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fc64 	bl	8009784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695a      	ldr	r2, [r3, #20]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	f040 8083 	bne.w	8009034 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_UART_Transmit+0x2e>
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e07b      	b.n	8009036 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_UART_Transmit+0x40>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e074      	b.n	8009036 <HAL_UART_Transmit+0x12a>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2221      	movs	r2, #33	; 0x21
 8008f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008f62:	f7fc faf7 	bl	8005554 <HAL_GetTick>
 8008f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008f74:	e042      	b.n	8008ffc <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8c:	d122      	bne.n	8008fd4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2200      	movs	r2, #0
 8008f96:	2180      	movs	r1, #128	; 0x80
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 fa74 	bl	8009486 <UART_WaitOnFlagUntilTimeout>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e046      	b.n	8009036 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fba:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3302      	adds	r3, #2
 8008fc8:	60bb      	str	r3, [r7, #8]
 8008fca:	e017      	b.n	8008ffc <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60bb      	str	r3, [r7, #8]
 8008fd2:	e013      	b.n	8008ffc <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2180      	movs	r1, #128	; 0x80
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fa51 	bl	8009486 <UART_WaitOnFlagUntilTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e023      	b.n	8009036 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	60ba      	str	r2, [r7, #8]
 8008ff4:	781a      	ldrb	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1b7      	bne.n	8008f76 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	2140      	movs	r1, #64	; 0x40
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fa38 	bl	8009486 <UART_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e00a      	b.n	8009036 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	e000      	b.n	8009036 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009034:	2302      	movs	r3, #2
  }
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b20      	cmp	r3, #32
 8009058:	d166      	bne.n	8009128 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_UART_Receive_DMA+0x26>
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e05f      	b.n	800912a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_UART_Receive_DMA+0x38>
 8009074:	2302      	movs	r3, #2
 8009076:	e058      	b.n	800912a <HAL_UART_Receive_DMA+0xea>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	88fa      	ldrh	r2, [r7, #6]
 800908a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2222      	movs	r2, #34	; 0x22
 8009096:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	4a25      	ldr	r2, [pc, #148]	; (8009134 <HAL_UART_Receive_DMA+0xf4>)
 80090a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a6:	4a24      	ldr	r2, [pc, #144]	; (8009138 <HAL_UART_Receive_DMA+0xf8>)
 80090a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	4a23      	ldr	r2, [pc, #140]	; (800913c <HAL_UART_Receive_DMA+0xfc>)
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b6:	2200      	movs	r2, #0
 80090b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4619      	mov	r1, r3
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	88fb      	ldrh	r3, [r7, #6]
 80090d2:	f7fc fbd3 	bl	800587c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80090d6:	2300      	movs	r3, #0
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	613b      	str	r3, [r7, #16]
 80090ea:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009102:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f042 0201 	orr.w	r2, r2, #1
 8009112:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695a      	ldr	r2, [r3, #20]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009122:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	e000      	b.n	800912a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009128:	2302      	movs	r3, #2
  }
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	0800936f 	.word	0x0800936f
 8009138:	080093d7 	.word	0x080093d7
 800913c:	080093f3 	.word	0x080093f3

08009140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009160:	2300      	movs	r3, #0
 8009162:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f003 030f 	and.w	r3, r3, #15
 800916e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_UART_IRQHandler+0x52>
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa78 	bl	8009680 <UART_Receive_IT>
      return;
 8009190:	e0cc      	b.n	800932c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80ab 	beq.w	80092f0 <HAL_UART_IRQHandler+0x1b0>
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <HAL_UART_IRQHandler+0x70>
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 80a0 	beq.w	80092f0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <HAL_UART_IRQHandler+0x90>
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c8:	f043 0201 	orr.w	r2, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <HAL_UART_IRQHandler+0xb0>
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e8:	f043 0202 	orr.w	r2, r3, #2
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <HAL_UART_IRQHandler+0xd0>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009208:	f043 0204 	orr.w	r2, r3, #4
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_UART_IRQHandler+0xf0>
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009228:	f043 0208 	orr.w	r2, r3, #8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d078      	beq.n	800932a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <HAL_UART_IRQHandler+0x112>
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fa17 	bl	8009680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf14      	ite	ne
 8009260:	2301      	movne	r3, #1
 8009262:	2300      	moveq	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <HAL_UART_IRQHandler+0x13a>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d031      	beq.n	80092de <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f962 	bl	8009544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928a:	2b00      	cmp	r3, #0
 800928c:	d023      	beq.n	80092d6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695a      	ldr	r2, [r3, #20]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800929c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d013      	beq.n	80092ce <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092aa:	4a22      	ldr	r2, [pc, #136]	; (8009334 <HAL_UART_IRQHandler+0x1f4>)
 80092ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fc fb42 	bl	800593c <HAL_DMA_Abort_IT>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d016      	beq.n	80092ec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092cc:	e00e      	b.n	80092ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f844 	bl	800935c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d4:	e00a      	b.n	80092ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f840 	bl	800935c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	e006      	b.n	80092ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f83c 	bl	800935c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80092ea:	e01e      	b.n	800932a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ec:	bf00      	nop
    return;
 80092ee:	e01c      	b.n	800932a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d008      	beq.n	800930c <HAL_UART_IRQHandler+0x1cc>
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f94e 	bl	80095a6 <UART_Transmit_IT>
    return;
 800930a:	e00f      	b.n	800932c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <HAL_UART_IRQHandler+0x1ec>
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f995 	bl	8009650 <UART_EndTransmit_IT>
    return;
 8009326:	bf00      	nop
 8009328:	e000      	b.n	800932c <HAL_UART_IRQHandler+0x1ec>
    return;
 800932a:	bf00      	nop
  }
}
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	0800957f 	.word	0x0800957f

08009338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009352:	bf00      	nop
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr

0800936e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11e      	bne.n	80093c8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800939e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	695a      	ldr	r2, [r3, #20]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0201 	bic.w	r2, r2, #1
 80093ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7f9 fb05 	bl	80029d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f7ff ffb0 	bl	800934a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940e:	2b00      	cmp	r3, #0
 8009410:	bf14      	ite	ne
 8009412:	2301      	movne	r3, #1
 8009414:	2300      	moveq	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b21      	cmp	r3, #33	; 0x21
 8009424:	d108      	bne.n	8009438 <UART_DMAError+0x46>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2200      	movs	r2, #0
 8009430:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009432:	68b8      	ldr	r0, [r7, #8]
 8009434:	f000 f871 	bl	800951a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	bf14      	ite	ne
 8009446:	2301      	movne	r3, #1
 8009448:	2300      	moveq	r3, #0
 800944a:	b2db      	uxtb	r3, r3
 800944c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b22      	cmp	r3, #34	; 0x22
 8009458:	d108      	bne.n	800946c <UART_DMAError+0x7a>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2200      	movs	r2, #0
 8009464:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009466:	68b8      	ldr	r0, [r7, #8]
 8009468:	f000 f86c 	bl	8009544 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009470:	f043 0210 	orr.w	r2, r3, #16
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f7ff ff6f 	bl	800935c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	603b      	str	r3, [r7, #0]
 8009492:	4613      	mov	r3, r2
 8009494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009496:	e02c      	b.n	80094f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800949e:	d028      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d007      	beq.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80094a6:	f7fc f855 	bl	8005554 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d21d      	bcs.n	80094f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695a      	ldr	r2, [r3, #20]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0201 	bic.w	r2, r2, #1
 80094d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2220      	movs	r2, #32
 80094da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e00f      	b.n	8009512 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4013      	ands	r3, r2
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	bf0c      	ite	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	2300      	movne	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	461a      	mov	r2, r3
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	429a      	cmp	r2, r3
 800950e:	d0c3      	beq.n	8009498 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009530:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	bc80      	pop	{r7}
 8009542:	4770      	bx	lr

08009544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800955a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695a      	ldr	r2, [r3, #20]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0201 	bic.w	r2, r2, #1
 800956a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr

0800957e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff fedf 	bl	800935c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b085      	sub	sp, #20
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b21      	cmp	r3, #33	; 0x21
 80095b8:	d144      	bne.n	8009644 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c2:	d11a      	bne.n	80095fa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095d8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d105      	bne.n	80095ee <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	1c9a      	adds	r2, r3, #2
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]
 80095ec:	e00e      	b.n	800960c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	621a      	str	r2, [r3, #32]
 80095f8:	e008      	b.n	800960c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	1c59      	adds	r1, r3, #1
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6211      	str	r1, [r2, #32]
 8009604:	781a      	ldrb	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009610:	b29b      	uxth	r3, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	b29b      	uxth	r3, r3
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	4619      	mov	r1, r3
 800961a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10f      	bne.n	8009640 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800962e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68da      	ldr	r2, [r3, #12]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800963e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e000      	b.n	8009646 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009644:	2302      	movs	r3, #2
  }
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	bc80      	pop	{r7}
 800964e:	4770      	bx	lr

08009650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff fe61 	bl	8009338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b22      	cmp	r3, #34	; 0x22
 8009692:	d171      	bne.n	8009778 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969c:	d123      	bne.n	80096e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10e      	bne.n	80096ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c2:	1c9a      	adds	r2, r3, #2
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	629a      	str	r2, [r3, #40]	; 0x28
 80096c8:	e029      	b.n	800971e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	629a      	str	r2, [r3, #40]	; 0x28
 80096e4:	e01b      	b.n	800971e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6858      	ldr	r0, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	1c59      	adds	r1, r3, #1
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	6291      	str	r1, [r2, #40]	; 0x28
 80096fe:	b2c2      	uxtb	r2, r0
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e00c      	b.n	800971e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	b2da      	uxtb	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009710:	1c58      	adds	r0, r3, #1
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	6288      	str	r0, [r1, #40]	; 0x28
 8009716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009722:	b29b      	uxth	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b29b      	uxth	r3, r3
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	4619      	mov	r1, r3
 800972c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800972e:	2b00      	cmp	r3, #0
 8009730:	d120      	bne.n	8009774 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0220 	bic.w	r2, r2, #32
 8009740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	695a      	ldr	r2, [r3, #20]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7f9 f934 	bl	80029d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	e002      	b.n	800977a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e000      	b.n	800977a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009778:	2302      	movs	r3, #2
  }
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80097be:	f023 030c 	bic.w	r3, r3, #12
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	430b      	orrs	r3, r1
 80097ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a52      	ldr	r2, [pc, #328]	; (8009930 <UART_SetConfig+0x1ac>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d14e      	bne.n	800988a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80097ec:	f7fe fc5a 	bl	80080a4 <HAL_RCC_GetPCLK2Freq>
 80097f0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009a      	lsls	r2, r3, #2
 80097fc:	441a      	add	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	fbb2 f3f3 	udiv	r3, r2, r3
 8009808:	4a4a      	ldr	r2, [pc, #296]	; (8009934 <UART_SetConfig+0x1b0>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	0119      	lsls	r1, r3, #4
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009a      	lsls	r2, r3, #2
 800981c:	441a      	add	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	fbb2 f2f3 	udiv	r2, r2, r3
 8009828:	4b42      	ldr	r3, [pc, #264]	; (8009934 <UART_SetConfig+0x1b0>)
 800982a:	fba3 0302 	umull	r0, r3, r3, r2
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	2064      	movs	r0, #100	; 0x64
 8009832:	fb00 f303 	mul.w	r3, r0, r3
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	3332      	adds	r3, #50	; 0x32
 800983c:	4a3d      	ldr	r2, [pc, #244]	; (8009934 <UART_SetConfig+0x1b0>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009848:	4419      	add	r1, r3
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009a      	lsls	r2, r3, #2
 8009854:	441a      	add	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009860:	4b34      	ldr	r3, [pc, #208]	; (8009934 <UART_SetConfig+0x1b0>)
 8009862:	fba3 0302 	umull	r0, r3, r3, r2
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	2064      	movs	r0, #100	; 0x64
 800986a:	fb00 f303 	mul.w	r3, r0, r3
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	3332      	adds	r3, #50	; 0x32
 8009874:	4a2f      	ldr	r2, [pc, #188]	; (8009934 <UART_SetConfig+0x1b0>)
 8009876:	fba2 2303 	umull	r2, r3, r2, r3
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	f003 020f 	and.w	r2, r3, #15
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	440a      	add	r2, r1
 8009886:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009888:	e04d      	b.n	8009926 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800988a:	f7fe fbf7 	bl	800807c <HAL_RCC_GetPCLK1Freq>
 800988e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009a      	lsls	r2, r3, #2
 800989a:	441a      	add	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a6:	4a23      	ldr	r2, [pc, #140]	; (8009934 <UART_SetConfig+0x1b0>)
 80098a8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	0119      	lsls	r1, r3, #4
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009a      	lsls	r2, r3, #2
 80098ba:	441a      	add	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80098c6:	4b1b      	ldr	r3, [pc, #108]	; (8009934 <UART_SetConfig+0x1b0>)
 80098c8:	fba3 0302 	umull	r0, r3, r3, r2
 80098cc:	095b      	lsrs	r3, r3, #5
 80098ce:	2064      	movs	r0, #100	; 0x64
 80098d0:	fb00 f303 	mul.w	r3, r0, r3
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	3332      	adds	r3, #50	; 0x32
 80098da:	4a16      	ldr	r2, [pc, #88]	; (8009934 <UART_SetConfig+0x1b0>)
 80098dc:	fba2 2303 	umull	r2, r3, r2, r3
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098e6:	4419      	add	r1, r3
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009a      	lsls	r2, r3, #2
 80098f2:	441a      	add	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80098fe:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <UART_SetConfig+0x1b0>)
 8009900:	fba3 0302 	umull	r0, r3, r3, r2
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	2064      	movs	r0, #100	; 0x64
 8009908:	fb00 f303 	mul.w	r3, r0, r3
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	3332      	adds	r3, #50	; 0x32
 8009912:	4a08      	ldr	r2, [pc, #32]	; (8009934 <UART_SetConfig+0x1b0>)
 8009914:	fba2 2303 	umull	r2, r3, r2, r3
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	f003 020f 	and.w	r2, r3, #15
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	440a      	add	r2, r1
 8009924:	609a      	str	r2, [r3, #8]
}
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	40013800 	.word	0x40013800
 8009934:	51eb851f 	.word	0x51eb851f

08009938 <atof>:
 8009938:	2100      	movs	r1, #0
 800993a:	f000 bedd 	b.w	800a6f8 <strtod>

0800993e <atoi>:
 800993e:	220a      	movs	r2, #10
 8009940:	2100      	movs	r1, #0
 8009942:	f000 bf67 	b.w	800a814 <strtol>
	...

08009948 <gcvt>:
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	461c      	mov	r4, r3
 800994c:	b085      	sub	sp, #20
 800994e:	2300      	movs	r3, #0
 8009950:	4615      	mov	r5, r2
 8009952:	2200      	movs	r2, #0
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	f7f7 f830 	bl	80009bc <__aeabi_dcmplt>
 800995c:	4623      	mov	r3, r4
 800995e:	b118      	cbz	r0, 8009968 <gcvt+0x20>
 8009960:	222d      	movs	r2, #45	; 0x2d
 8009962:	3d01      	subs	r5, #1
 8009964:	f803 2b01 	strb.w	r2, [r3], #1
 8009968:	2267      	movs	r2, #103	; 0x67
 800996a:	2100      	movs	r1, #0
 800996c:	e9cd 5300 	strd	r5, r3, [sp]
 8009970:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009974:	4905      	ldr	r1, [pc, #20]	; (800998c <gcvt+0x44>)
 8009976:	4632      	mov	r2, r6
 8009978:	463b      	mov	r3, r7
 800997a:	6808      	ldr	r0, [r1, #0]
 800997c:	f000 ffd4 	bl	800a928 <_gcvt>
 8009980:	2800      	cmp	r0, #0
 8009982:	bf14      	ite	ne
 8009984:	4620      	movne	r0, r4
 8009986:	2000      	moveq	r0, #0
 8009988:	b005      	add	sp, #20
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998c:	20000068 	.word	0x20000068

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	; (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	20000068 	.word	0x20000068

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	2500      	movs	r5, #0
 80099a0:	4e0c      	ldr	r6, [pc, #48]	; (80099d4 <__libc_init_array+0x38>)
 80099a2:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a4:	1ba4      	subs	r4, r4, r6
 80099a6:	10a4      	asrs	r4, r4, #2
 80099a8:	42a5      	cmp	r5, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	f003 fa7a 	bl	800cea4 <_init>
 80099b0:	2500      	movs	r5, #0
 80099b2:	4e0a      	ldr	r6, [pc, #40]	; (80099dc <__libc_init_array+0x40>)
 80099b4:	4c0a      	ldr	r4, [pc, #40]	; (80099e0 <__libc_init_array+0x44>)
 80099b6:	1ba4      	subs	r4, r4, r6
 80099b8:	10a4      	asrs	r4, r4, #2
 80099ba:	42a5      	cmp	r5, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099c4:	4798      	blx	r3
 80099c6:	3501      	adds	r5, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099ce:	4798      	blx	r3
 80099d0:	3501      	adds	r5, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	0800dc20 	.word	0x0800dc20
 80099d8:	0800dc20 	.word	0x0800dc20
 80099dc:	0800dc20 	.word	0x0800dc20
 80099e0:	0800dc24 	.word	0x0800dc24

080099e4 <memset>:
 80099e4:	4603      	mov	r3, r0
 80099e6:	4402      	add	r2, r0
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d100      	bne.n	80099ee <memset+0xa>
 80099ec:	4770      	bx	lr
 80099ee:	f803 1b01 	strb.w	r1, [r3], #1
 80099f2:	e7f9      	b.n	80099e8 <memset+0x4>

080099f4 <siprintf>:
 80099f4:	b40e      	push	{r1, r2, r3}
 80099f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099fa:	b500      	push	{lr}
 80099fc:	b09c      	sub	sp, #112	; 0x70
 80099fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009a00:	9002      	str	r0, [sp, #8]
 8009a02:	9006      	str	r0, [sp, #24]
 8009a04:	9107      	str	r1, [sp, #28]
 8009a06:	9104      	str	r1, [sp, #16]
 8009a08:	4808      	ldr	r0, [pc, #32]	; (8009a2c <siprintf+0x38>)
 8009a0a:	4909      	ldr	r1, [pc, #36]	; (8009a30 <siprintf+0x3c>)
 8009a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a10:	9105      	str	r1, [sp, #20]
 8009a12:	6800      	ldr	r0, [r0, #0]
 8009a14:	a902      	add	r1, sp, #8
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	f002 f89c 	bl	800bb54 <_svfiprintf_r>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	9b02      	ldr	r3, [sp, #8]
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	b01c      	add	sp, #112	; 0x70
 8009a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a28:	b003      	add	sp, #12
 8009a2a:	4770      	bx	lr
 8009a2c:	20000068 	.word	0x20000068
 8009a30:	ffff0208 	.word	0xffff0208

08009a34 <strcat>:
 8009a34:	4603      	mov	r3, r0
 8009a36:	b510      	push	{r4, lr}
 8009a38:	781a      	ldrb	r2, [r3, #0]
 8009a3a:	1c5c      	adds	r4, r3, #1
 8009a3c:	b93a      	cbnz	r2, 8009a4e <strcat+0x1a>
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	d1f9      	bne.n	8009a40 <strcat+0xc>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	4623      	mov	r3, r4
 8009a50:	e7f2      	b.n	8009a38 <strcat+0x4>

08009a52 <strchr>:
 8009a52:	b2c9      	uxtb	r1, r1
 8009a54:	4603      	mov	r3, r0
 8009a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5a:	b11a      	cbz	r2, 8009a64 <strchr+0x12>
 8009a5c:	428a      	cmp	r2, r1
 8009a5e:	d1f9      	bne.n	8009a54 <strchr+0x2>
 8009a60:	4618      	mov	r0, r3
 8009a62:	4770      	bx	lr
 8009a64:	2900      	cmp	r1, #0
 8009a66:	bf18      	it	ne
 8009a68:	2300      	movne	r3, #0
 8009a6a:	e7f9      	b.n	8009a60 <strchr+0xe>

08009a6c <strcpy>:
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a72:	f803 2b01 	strb.w	r2, [r3], #1
 8009a76:	2a00      	cmp	r2, #0
 8009a78:	d1f9      	bne.n	8009a6e <strcpy+0x2>
 8009a7a:	4770      	bx	lr

08009a7c <strstr>:
 8009a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a7e:	7803      	ldrb	r3, [r0, #0]
 8009a80:	b17b      	cbz	r3, 8009aa2 <strstr+0x26>
 8009a82:	4604      	mov	r4, r0
 8009a84:	7823      	ldrb	r3, [r4, #0]
 8009a86:	4620      	mov	r0, r4
 8009a88:	1c66      	adds	r6, r4, #1
 8009a8a:	b17b      	cbz	r3, 8009aac <strstr+0x30>
 8009a8c:	1e4a      	subs	r2, r1, #1
 8009a8e:	1e63      	subs	r3, r4, #1
 8009a90:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009a94:	b14d      	cbz	r5, 8009aaa <strstr+0x2e>
 8009a96:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009a9a:	4634      	mov	r4, r6
 8009a9c:	42af      	cmp	r7, r5
 8009a9e:	d0f7      	beq.n	8009a90 <strstr+0x14>
 8009aa0:	e7f0      	b.n	8009a84 <strstr+0x8>
 8009aa2:	780b      	ldrb	r3, [r1, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bf18      	it	ne
 8009aa8:	2000      	movne	r0, #0
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	4618      	mov	r0, r3
 8009aae:	e7fc      	b.n	8009aaa <strstr+0x2e>

08009ab0 <sulp>:
 8009ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	4690      	mov	r8, r2
 8009ab8:	f001 fe18 	bl	800b6ec <__ulp>
 8009abc:	4604      	mov	r4, r0
 8009abe:	460d      	mov	r5, r1
 8009ac0:	f1b8 0f00 	cmp.w	r8, #0
 8009ac4:	d011      	beq.n	8009aea <sulp+0x3a>
 8009ac6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009aca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dd0b      	ble.n	8009aea <sulp+0x3a>
 8009ad2:	2400      	movs	r4, #0
 8009ad4:	051b      	lsls	r3, r3, #20
 8009ad6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ada:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ade:	4622      	mov	r2, r4
 8009ae0:	462b      	mov	r3, r5
 8009ae2:	f7f6 fcf9 	bl	80004d8 <__aeabi_dmul>
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	460d      	mov	r5, r1
 8009aea:	4620      	mov	r0, r4
 8009aec:	4629      	mov	r1, r5
 8009aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af2:	0000      	movs	r0, r0
 8009af4:	0000      	movs	r0, r0
	...

08009af8 <_strtod_l>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	461f      	mov	r7, r3
 8009afe:	2300      	movs	r3, #0
 8009b00:	b0a1      	sub	sp, #132	; 0x84
 8009b02:	4683      	mov	fp, r0
 8009b04:	4638      	mov	r0, r7
 8009b06:	460e      	mov	r6, r1
 8009b08:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b0a:	931c      	str	r3, [sp, #112]	; 0x70
 8009b0c:	f001 fb05 	bl	800b11a <__localeconv_l>
 8009b10:	4680      	mov	r8, r0
 8009b12:	6800      	ldr	r0, [r0, #0]
 8009b14:	f7f6 fb1c 	bl	8000150 <strlen>
 8009b18:	f04f 0900 	mov.w	r9, #0
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	f04f 0a00 	mov.w	sl, #0
 8009b22:	961b      	str	r6, [sp, #108]	; 0x6c
 8009b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b26:	781a      	ldrb	r2, [r3, #0]
 8009b28:	2a0d      	cmp	r2, #13
 8009b2a:	d832      	bhi.n	8009b92 <_strtod_l+0x9a>
 8009b2c:	2a09      	cmp	r2, #9
 8009b2e:	d236      	bcs.n	8009b9e <_strtod_l+0xa6>
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d03e      	beq.n	8009bb2 <_strtod_l+0xba>
 8009b34:	2300      	movs	r3, #0
 8009b36:	930d      	str	r3, [sp, #52]	; 0x34
 8009b38:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b3a:	782b      	ldrb	r3, [r5, #0]
 8009b3c:	2b30      	cmp	r3, #48	; 0x30
 8009b3e:	f040 80ac 	bne.w	8009c9a <_strtod_l+0x1a2>
 8009b42:	786b      	ldrb	r3, [r5, #1]
 8009b44:	2b58      	cmp	r3, #88	; 0x58
 8009b46:	d001      	beq.n	8009b4c <_strtod_l+0x54>
 8009b48:	2b78      	cmp	r3, #120	; 0x78
 8009b4a:	d167      	bne.n	8009c1c <_strtod_l+0x124>
 8009b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4e:	9702      	str	r7, [sp, #8]
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	ab1c      	add	r3, sp, #112	; 0x70
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	4a89      	ldr	r2, [pc, #548]	; (8009d7c <_strtod_l+0x284>)
 8009b58:	ab1d      	add	r3, sp, #116	; 0x74
 8009b5a:	a91b      	add	r1, sp, #108	; 0x6c
 8009b5c:	4658      	mov	r0, fp
 8009b5e:	f001 f801 	bl	800ab64 <__gethex>
 8009b62:	f010 0407 	ands.w	r4, r0, #7
 8009b66:	4606      	mov	r6, r0
 8009b68:	d005      	beq.n	8009b76 <_strtod_l+0x7e>
 8009b6a:	2c06      	cmp	r4, #6
 8009b6c:	d12b      	bne.n	8009bc6 <_strtod_l+0xce>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	3501      	adds	r5, #1
 8009b72:	951b      	str	r5, [sp, #108]	; 0x6c
 8009b74:	930d      	str	r3, [sp, #52]	; 0x34
 8009b76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f040 85a6 	bne.w	800a6ca <_strtod_l+0xbd2>
 8009b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b80:	b1e3      	cbz	r3, 8009bbc <_strtod_l+0xc4>
 8009b82:	464a      	mov	r2, r9
 8009b84:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	b021      	add	sp, #132	; 0x84
 8009b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b92:	2a2b      	cmp	r2, #43	; 0x2b
 8009b94:	d015      	beq.n	8009bc2 <_strtod_l+0xca>
 8009b96:	2a2d      	cmp	r2, #45	; 0x2d
 8009b98:	d004      	beq.n	8009ba4 <_strtod_l+0xac>
 8009b9a:	2a20      	cmp	r2, #32
 8009b9c:	d1ca      	bne.n	8009b34 <_strtod_l+0x3c>
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ba2:	e7bf      	b.n	8009b24 <_strtod_l+0x2c>
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	920d      	str	r2, [sp, #52]	; 0x34
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1c2      	bne.n	8009b38 <_strtod_l+0x40>
 8009bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bb4:	961b      	str	r6, [sp, #108]	; 0x6c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f040 8585 	bne.w	800a6c6 <_strtod_l+0xbce>
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	4653      	mov	r3, sl
 8009bc0:	e7e2      	b.n	8009b88 <_strtod_l+0x90>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	e7ef      	b.n	8009ba6 <_strtod_l+0xae>
 8009bc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bc8:	b13a      	cbz	r2, 8009bda <_strtod_l+0xe2>
 8009bca:	2135      	movs	r1, #53	; 0x35
 8009bcc:	a81e      	add	r0, sp, #120	; 0x78
 8009bce:	f001 fe9d 	bl	800b90c <__copybits>
 8009bd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bd4:	4658      	mov	r0, fp
 8009bd6:	f001 faf3 	bl	800b1c0 <_Bfree>
 8009bda:	3c01      	subs	r4, #1
 8009bdc:	2c04      	cmp	r4, #4
 8009bde:	d806      	bhi.n	8009bee <_strtod_l+0xf6>
 8009be0:	e8df f004 	tbb	[pc, r4]
 8009be4:	1714030a 	.word	0x1714030a
 8009be8:	0a          	.byte	0x0a
 8009be9:	00          	.byte	0x00
 8009bea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009bee:	0731      	lsls	r1, r6, #28
 8009bf0:	d5c1      	bpl.n	8009b76 <_strtod_l+0x7e>
 8009bf2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8009bf6:	e7be      	b.n	8009b76 <_strtod_l+0x7e>
 8009bf8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009bfa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009bfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c06:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009c0a:	e7f0      	b.n	8009bee <_strtod_l+0xf6>
 8009c0c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009d80 <_strtod_l+0x288>
 8009c10:	e7ed      	b.n	8009bee <_strtod_l+0xf6>
 8009c12:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8009c16:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009c1a:	e7e8      	b.n	8009bee <_strtod_l+0xf6>
 8009c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b30      	cmp	r3, #48	; 0x30
 8009c26:	d0f9      	beq.n	8009c1c <_strtod_l+0x124>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0a4      	beq.n	8009b76 <_strtod_l+0x7e>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	2500      	movs	r5, #0
 8009c30:	220a      	movs	r2, #10
 8009c32:	9307      	str	r3, [sp, #28]
 8009c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c36:	9506      	str	r5, [sp, #24]
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	9504      	str	r5, [sp, #16]
 8009c3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009c3e:	7807      	ldrb	r7, [r0, #0]
 8009c40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009c44:	b2d9      	uxtb	r1, r3
 8009c46:	2909      	cmp	r1, #9
 8009c48:	d929      	bls.n	8009c9e <_strtod_l+0x1a6>
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	f8d8 1000 	ldr.w	r1, [r8]
 8009c50:	f002 fa10 	bl	800c074 <strncmp>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d031      	beq.n	8009cbc <_strtod_l+0x1c4>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	9c04      	ldr	r4, [sp, #16]
 8009c60:	9005      	str	r0, [sp, #20]
 8009c62:	2b65      	cmp	r3, #101	; 0x65
 8009c64:	d001      	beq.n	8009c6a <_strtod_l+0x172>
 8009c66:	2b45      	cmp	r3, #69	; 0x45
 8009c68:	d114      	bne.n	8009c94 <_strtod_l+0x19c>
 8009c6a:	b924      	cbnz	r4, 8009c76 <_strtod_l+0x17e>
 8009c6c:	b910      	cbnz	r0, 8009c74 <_strtod_l+0x17c>
 8009c6e:	9b07      	ldr	r3, [sp, #28]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d09e      	beq.n	8009bb2 <_strtod_l+0xba>
 8009c74:	2400      	movs	r4, #0
 8009c76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009c78:	1c73      	adds	r3, r6, #1
 8009c7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c7c:	7873      	ldrb	r3, [r6, #1]
 8009c7e:	2b2b      	cmp	r3, #43	; 0x2b
 8009c80:	d078      	beq.n	8009d74 <_strtod_l+0x27c>
 8009c82:	2b2d      	cmp	r3, #45	; 0x2d
 8009c84:	d070      	beq.n	8009d68 <_strtod_l+0x270>
 8009c86:	f04f 0c00 	mov.w	ip, #0
 8009c8a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009c8e:	2f09      	cmp	r7, #9
 8009c90:	d97c      	bls.n	8009d8c <_strtod_l+0x294>
 8009c92:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c94:	f04f 0e00 	mov.w	lr, #0
 8009c98:	e09a      	b.n	8009dd0 <_strtod_l+0x2d8>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e7c7      	b.n	8009c2e <_strtod_l+0x136>
 8009c9e:	9904      	ldr	r1, [sp, #16]
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	2908      	cmp	r1, #8
 8009ca4:	bfd7      	itett	le
 8009ca6:	9906      	ldrle	r1, [sp, #24]
 8009ca8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009cac:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cb0:	9306      	strle	r3, [sp, #24]
 8009cb2:	9b04      	ldr	r3, [sp, #16]
 8009cb4:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	e7bf      	b.n	8009c3c <_strtod_l+0x144>
 8009cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cbe:	191a      	adds	r2, r3, r4
 8009cc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	5d1b      	ldrb	r3, [r3, r4]
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d037      	beq.n	8009d3a <_strtod_l+0x242>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	9c04      	ldr	r4, [sp, #16]
 8009cce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009cd2:	2909      	cmp	r1, #9
 8009cd4:	d913      	bls.n	8009cfe <_strtod_l+0x206>
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	9105      	str	r1, [sp, #20]
 8009cda:	e7c2      	b.n	8009c62 <_strtod_l+0x16a>
 8009cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cde:	3001      	adds	r0, #1
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009ce4:	785b      	ldrb	r3, [r3, #1]
 8009ce6:	2b30      	cmp	r3, #48	; 0x30
 8009ce8:	d0f8      	beq.n	8009cdc <_strtod_l+0x1e4>
 8009cea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009cee:	2a08      	cmp	r2, #8
 8009cf0:	f200 84f0 	bhi.w	800a6d4 <_strtod_l+0xbdc>
 8009cf4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009cf6:	9208      	str	r2, [sp, #32]
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009d02:	f100 0101 	add.w	r1, r0, #1
 8009d06:	d012      	beq.n	8009d2e <_strtod_l+0x236>
 8009d08:	440a      	add	r2, r1
 8009d0a:	270a      	movs	r7, #10
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	eb00 0c04 	add.w	ip, r0, r4
 8009d12:	458c      	cmp	ip, r1
 8009d14:	d113      	bne.n	8009d3e <_strtod_l+0x246>
 8009d16:	1821      	adds	r1, r4, r0
 8009d18:	2908      	cmp	r1, #8
 8009d1a:	f104 0401 	add.w	r4, r4, #1
 8009d1e:	4404      	add	r4, r0
 8009d20:	dc19      	bgt.n	8009d56 <_strtod_l+0x25e>
 8009d22:	210a      	movs	r1, #10
 8009d24:	9b06      	ldr	r3, [sp, #24]
 8009d26:	fb01 e303 	mla	r3, r1, r3, lr
 8009d2a:	9306      	str	r3, [sp, #24]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d30:	1c58      	adds	r0, r3, #1
 8009d32:	901b      	str	r0, [sp, #108]	; 0x6c
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	4608      	mov	r0, r1
 8009d38:	e7c9      	b.n	8009cce <_strtod_l+0x1d6>
 8009d3a:	9804      	ldr	r0, [sp, #16]
 8009d3c:	e7d3      	b.n	8009ce6 <_strtod_l+0x1ee>
 8009d3e:	2908      	cmp	r1, #8
 8009d40:	f101 0101 	add.w	r1, r1, #1
 8009d44:	dc03      	bgt.n	8009d4e <_strtod_l+0x256>
 8009d46:	9b06      	ldr	r3, [sp, #24]
 8009d48:	437b      	muls	r3, r7
 8009d4a:	9306      	str	r3, [sp, #24]
 8009d4c:	e7e1      	b.n	8009d12 <_strtod_l+0x21a>
 8009d4e:	2910      	cmp	r1, #16
 8009d50:	bfd8      	it	le
 8009d52:	437d      	mulle	r5, r7
 8009d54:	e7dd      	b.n	8009d12 <_strtod_l+0x21a>
 8009d56:	2c10      	cmp	r4, #16
 8009d58:	bfdc      	itt	le
 8009d5a:	210a      	movle	r1, #10
 8009d5c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009d60:	e7e4      	b.n	8009d2c <_strtod_l+0x234>
 8009d62:	2301      	movs	r3, #1
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	e781      	b.n	8009c6c <_strtod_l+0x174>
 8009d68:	f04f 0c01 	mov.w	ip, #1
 8009d6c:	1cb3      	adds	r3, r6, #2
 8009d6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d70:	78b3      	ldrb	r3, [r6, #2]
 8009d72:	e78a      	b.n	8009c8a <_strtod_l+0x192>
 8009d74:	f04f 0c00 	mov.w	ip, #0
 8009d78:	e7f8      	b.n	8009d6c <_strtod_l+0x274>
 8009d7a:	bf00      	nop
 8009d7c:	0800d97c 	.word	0x0800d97c
 8009d80:	7ff00000 	.word	0x7ff00000
 8009d84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d86:	1c5f      	adds	r7, r3, #1
 8009d88:	971b      	str	r7, [sp, #108]	; 0x6c
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b30      	cmp	r3, #48	; 0x30
 8009d8e:	d0f9      	beq.n	8009d84 <_strtod_l+0x28c>
 8009d90:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009d94:	2f08      	cmp	r7, #8
 8009d96:	f63f af7d 	bhi.w	8009c94 <_strtod_l+0x19c>
 8009d9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009d9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009da0:	9309      	str	r3, [sp, #36]	; 0x24
 8009da2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009da4:	1c5f      	adds	r7, r3, #1
 8009da6:	971b      	str	r7, [sp, #108]	; 0x6c
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009dae:	f1b8 0f09 	cmp.w	r8, #9
 8009db2:	d937      	bls.n	8009e24 <_strtod_l+0x32c>
 8009db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009db6:	1a7f      	subs	r7, r7, r1
 8009db8:	2f08      	cmp	r7, #8
 8009dba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009dbe:	dc37      	bgt.n	8009e30 <_strtod_l+0x338>
 8009dc0:	45be      	cmp	lr, r7
 8009dc2:	bfa8      	it	ge
 8009dc4:	46be      	movge	lr, r7
 8009dc6:	f1bc 0f00 	cmp.w	ip, #0
 8009dca:	d001      	beq.n	8009dd0 <_strtod_l+0x2d8>
 8009dcc:	f1ce 0e00 	rsb	lr, lr, #0
 8009dd0:	2c00      	cmp	r4, #0
 8009dd2:	d151      	bne.n	8009e78 <_strtod_l+0x380>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f47f aece 	bne.w	8009b76 <_strtod_l+0x7e>
 8009dda:	9a07      	ldr	r2, [sp, #28]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	f47f aeca 	bne.w	8009b76 <_strtod_l+0x7e>
 8009de2:	9a05      	ldr	r2, [sp, #20]
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	f47f aee4 	bne.w	8009bb2 <_strtod_l+0xba>
 8009dea:	2b4e      	cmp	r3, #78	; 0x4e
 8009dec:	d027      	beq.n	8009e3e <_strtod_l+0x346>
 8009dee:	dc21      	bgt.n	8009e34 <_strtod_l+0x33c>
 8009df0:	2b49      	cmp	r3, #73	; 0x49
 8009df2:	f47f aede 	bne.w	8009bb2 <_strtod_l+0xba>
 8009df6:	49a4      	ldr	r1, [pc, #656]	; (800a088 <_strtod_l+0x590>)
 8009df8:	a81b      	add	r0, sp, #108	; 0x6c
 8009dfa:	f001 f8e7 	bl	800afcc <__match>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f aed7 	beq.w	8009bb2 <_strtod_l+0xba>
 8009e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e06:	49a1      	ldr	r1, [pc, #644]	; (800a08c <_strtod_l+0x594>)
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	a81b      	add	r0, sp, #108	; 0x6c
 8009e0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e0e:	f001 f8dd 	bl	800afcc <__match>
 8009e12:	b910      	cbnz	r0, 8009e1a <_strtod_l+0x322>
 8009e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e16:	3301      	adds	r3, #1
 8009e18:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e1a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a0a0 <_strtod_l+0x5a8>
 8009e1e:	f04f 0900 	mov.w	r9, #0
 8009e22:	e6a8      	b.n	8009b76 <_strtod_l+0x7e>
 8009e24:	210a      	movs	r1, #10
 8009e26:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009e2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009e2e:	e7b8      	b.n	8009da2 <_strtod_l+0x2aa>
 8009e30:	46be      	mov	lr, r7
 8009e32:	e7c8      	b.n	8009dc6 <_strtod_l+0x2ce>
 8009e34:	2b69      	cmp	r3, #105	; 0x69
 8009e36:	d0de      	beq.n	8009df6 <_strtod_l+0x2fe>
 8009e38:	2b6e      	cmp	r3, #110	; 0x6e
 8009e3a:	f47f aeba 	bne.w	8009bb2 <_strtod_l+0xba>
 8009e3e:	4994      	ldr	r1, [pc, #592]	; (800a090 <_strtod_l+0x598>)
 8009e40:	a81b      	add	r0, sp, #108	; 0x6c
 8009e42:	f001 f8c3 	bl	800afcc <__match>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f aeb3 	beq.w	8009bb2 <_strtod_l+0xba>
 8009e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b28      	cmp	r3, #40	; 0x28
 8009e52:	d10e      	bne.n	8009e72 <_strtod_l+0x37a>
 8009e54:	aa1e      	add	r2, sp, #120	; 0x78
 8009e56:	498f      	ldr	r1, [pc, #572]	; (800a094 <_strtod_l+0x59c>)
 8009e58:	a81b      	add	r0, sp, #108	; 0x6c
 8009e5a:	f001 f8cb 	bl	800aff4 <__hexnan>
 8009e5e:	2805      	cmp	r0, #5
 8009e60:	d107      	bne.n	8009e72 <_strtod_l+0x37a>
 8009e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e64:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8009e68:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8009e6c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8009e70:	e681      	b.n	8009b76 <_strtod_l+0x7e>
 8009e72:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a0a8 <_strtod_l+0x5b0>
 8009e76:	e7d2      	b.n	8009e1e <_strtod_l+0x326>
 8009e78:	ebae 0302 	sub.w	r3, lr, r2
 8009e7c:	9307      	str	r3, [sp, #28]
 8009e7e:	9b04      	ldr	r3, [sp, #16]
 8009e80:	9806      	ldr	r0, [sp, #24]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf08      	it	eq
 8009e86:	4623      	moveq	r3, r4
 8009e88:	2c10      	cmp	r4, #16
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	46a0      	mov	r8, r4
 8009e8e:	bfa8      	it	ge
 8009e90:	f04f 0810 	movge.w	r8, #16
 8009e94:	f7f6 faa6 	bl	80003e4 <__aeabi_ui2d>
 8009e98:	2c09      	cmp	r4, #9
 8009e9a:	4681      	mov	r9, r0
 8009e9c:	468a      	mov	sl, r1
 8009e9e:	dc13      	bgt.n	8009ec8 <_strtod_l+0x3d0>
 8009ea0:	9b07      	ldr	r3, [sp, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f43f ae67 	beq.w	8009b76 <_strtod_l+0x7e>
 8009ea8:	9b07      	ldr	r3, [sp, #28]
 8009eaa:	dd7e      	ble.n	8009faa <_strtod_l+0x4b2>
 8009eac:	2b16      	cmp	r3, #22
 8009eae:	dc65      	bgt.n	8009f7c <_strtod_l+0x484>
 8009eb0:	4a79      	ldr	r2, [pc, #484]	; (800a098 <_strtod_l+0x5a0>)
 8009eb2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009eb6:	464a      	mov	r2, r9
 8009eb8:	e9de 0100 	ldrd	r0, r1, [lr]
 8009ebc:	4653      	mov	r3, sl
 8009ebe:	f7f6 fb0b 	bl	80004d8 <__aeabi_dmul>
 8009ec2:	4681      	mov	r9, r0
 8009ec4:	468a      	mov	sl, r1
 8009ec6:	e656      	b.n	8009b76 <_strtod_l+0x7e>
 8009ec8:	4b73      	ldr	r3, [pc, #460]	; (800a098 <_strtod_l+0x5a0>)
 8009eca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ece:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ed2:	f7f6 fb01 	bl	80004d8 <__aeabi_dmul>
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	4628      	mov	r0, r5
 8009eda:	460f      	mov	r7, r1
 8009edc:	f7f6 fa82 	bl	80003e4 <__aeabi_ui2d>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	f7f6 f940 	bl	800016c <__adddf3>
 8009eec:	2c0f      	cmp	r4, #15
 8009eee:	4681      	mov	r9, r0
 8009ef0:	468a      	mov	sl, r1
 8009ef2:	ddd5      	ble.n	8009ea0 <_strtod_l+0x3a8>
 8009ef4:	9b07      	ldr	r3, [sp, #28]
 8009ef6:	eba4 0808 	sub.w	r8, r4, r8
 8009efa:	4498      	add	r8, r3
 8009efc:	f1b8 0f00 	cmp.w	r8, #0
 8009f00:	f340 809a 	ble.w	800a038 <_strtod_l+0x540>
 8009f04:	f018 030f 	ands.w	r3, r8, #15
 8009f08:	d00a      	beq.n	8009f20 <_strtod_l+0x428>
 8009f0a:	4963      	ldr	r1, [pc, #396]	; (800a098 <_strtod_l+0x5a0>)
 8009f0c:	464a      	mov	r2, r9
 8009f0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f16:	4653      	mov	r3, sl
 8009f18:	f7f6 fade 	bl	80004d8 <__aeabi_dmul>
 8009f1c:	4681      	mov	r9, r0
 8009f1e:	468a      	mov	sl, r1
 8009f20:	f038 080f 	bics.w	r8, r8, #15
 8009f24:	d077      	beq.n	800a016 <_strtod_l+0x51e>
 8009f26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009f2a:	dd4b      	ble.n	8009fc4 <_strtod_l+0x4cc>
 8009f2c:	f04f 0800 	mov.w	r8, #0
 8009f30:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f34:	f8cd 8020 	str.w	r8, [sp, #32]
 8009f38:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f3c:	2322      	movs	r3, #34	; 0x22
 8009f3e:	f04f 0900 	mov.w	r9, #0
 8009f42:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a0a0 <_strtod_l+0x5a8>
 8009f46:	f8cb 3000 	str.w	r3, [fp]
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f43f ae12 	beq.w	8009b76 <_strtod_l+0x7e>
 8009f52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f54:	4658      	mov	r0, fp
 8009f56:	f001 f933 	bl	800b1c0 <_Bfree>
 8009f5a:	9906      	ldr	r1, [sp, #24]
 8009f5c:	4658      	mov	r0, fp
 8009f5e:	f001 f92f 	bl	800b1c0 <_Bfree>
 8009f62:	9904      	ldr	r1, [sp, #16]
 8009f64:	4658      	mov	r0, fp
 8009f66:	f001 f92b 	bl	800b1c0 <_Bfree>
 8009f6a:	9908      	ldr	r1, [sp, #32]
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f001 f927 	bl	800b1c0 <_Bfree>
 8009f72:	4641      	mov	r1, r8
 8009f74:	4658      	mov	r0, fp
 8009f76:	f001 f923 	bl	800b1c0 <_Bfree>
 8009f7a:	e5fc      	b.n	8009b76 <_strtod_l+0x7e>
 8009f7c:	9a07      	ldr	r2, [sp, #28]
 8009f7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009f82:	4293      	cmp	r3, r2
 8009f84:	dbb6      	blt.n	8009ef4 <_strtod_l+0x3fc>
 8009f86:	4d44      	ldr	r5, [pc, #272]	; (800a098 <_strtod_l+0x5a0>)
 8009f88:	f1c4 040f 	rsb	r4, r4, #15
 8009f8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009f90:	464a      	mov	r2, r9
 8009f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f96:	4653      	mov	r3, sl
 8009f98:	f7f6 fa9e 	bl	80004d8 <__aeabi_dmul>
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	1b1c      	subs	r4, r3, r4
 8009fa0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fa8:	e789      	b.n	8009ebe <_strtod_l+0x3c6>
 8009faa:	f113 0f16 	cmn.w	r3, #22
 8009fae:	dba1      	blt.n	8009ef4 <_strtod_l+0x3fc>
 8009fb0:	4a39      	ldr	r2, [pc, #228]	; (800a098 <_strtod_l+0x5a0>)
 8009fb2:	4648      	mov	r0, r9
 8009fb4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009fb8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	f7f6 fbb5 	bl	800072c <__aeabi_ddiv>
 8009fc2:	e77e      	b.n	8009ec2 <_strtod_l+0x3ca>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	4651      	mov	r1, sl
 8009fca:	461d      	mov	r5, r3
 8009fcc:	4e33      	ldr	r6, [pc, #204]	; (800a09c <_strtod_l+0x5a4>)
 8009fce:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009fd2:	f1b8 0f01 	cmp.w	r8, #1
 8009fd6:	dc21      	bgt.n	800a01c <_strtod_l+0x524>
 8009fd8:	b10b      	cbz	r3, 8009fde <_strtod_l+0x4e6>
 8009fda:	4681      	mov	r9, r0
 8009fdc:	468a      	mov	sl, r1
 8009fde:	4b2f      	ldr	r3, [pc, #188]	; (800a09c <_strtod_l+0x5a4>)
 8009fe0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8009fe4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009fe8:	464a      	mov	r2, r9
 8009fea:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009fee:	4653      	mov	r3, sl
 8009ff0:	f7f6 fa72 	bl	80004d8 <__aeabi_dmul>
 8009ff4:	4b2a      	ldr	r3, [pc, #168]	; (800a0a0 <_strtod_l+0x5a8>)
 8009ff6:	460a      	mov	r2, r1
 8009ff8:	400b      	ands	r3, r1
 8009ffa:	492a      	ldr	r1, [pc, #168]	; (800a0a4 <_strtod_l+0x5ac>)
 8009ffc:	4681      	mov	r9, r0
 8009ffe:	428b      	cmp	r3, r1
 800a000:	d894      	bhi.n	8009f2c <_strtod_l+0x434>
 800a002:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a006:	428b      	cmp	r3, r1
 800a008:	bf86      	itte	hi
 800a00a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800a00e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a0ac <_strtod_l+0x5b4>
 800a012:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a016:	2300      	movs	r3, #0
 800a018:	9305      	str	r3, [sp, #20]
 800a01a:	e07b      	b.n	800a114 <_strtod_l+0x61c>
 800a01c:	f018 0f01 	tst.w	r8, #1
 800a020:	d006      	beq.n	800a030 <_strtod_l+0x538>
 800a022:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 fa55 	bl	80004d8 <__aeabi_dmul>
 800a02e:	2301      	movs	r3, #1
 800a030:	3501      	adds	r5, #1
 800a032:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a036:	e7cc      	b.n	8009fd2 <_strtod_l+0x4da>
 800a038:	d0ed      	beq.n	800a016 <_strtod_l+0x51e>
 800a03a:	f1c8 0800 	rsb	r8, r8, #0
 800a03e:	f018 020f 	ands.w	r2, r8, #15
 800a042:	d00a      	beq.n	800a05a <_strtod_l+0x562>
 800a044:	4b14      	ldr	r3, [pc, #80]	; (800a098 <_strtod_l+0x5a0>)
 800a046:	4648      	mov	r0, r9
 800a048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a04c:	4651      	mov	r1, sl
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f7f6 fb6b 	bl	800072c <__aeabi_ddiv>
 800a056:	4681      	mov	r9, r0
 800a058:	468a      	mov	sl, r1
 800a05a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a05e:	d0da      	beq.n	800a016 <_strtod_l+0x51e>
 800a060:	f1b8 0f1f 	cmp.w	r8, #31
 800a064:	dd24      	ble.n	800a0b0 <_strtod_l+0x5b8>
 800a066:	f04f 0800 	mov.w	r8, #0
 800a06a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a06e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a072:	f8cd 8018 	str.w	r8, [sp, #24]
 800a076:	2322      	movs	r3, #34	; 0x22
 800a078:	f04f 0900 	mov.w	r9, #0
 800a07c:	f04f 0a00 	mov.w	sl, #0
 800a080:	f8cb 3000 	str.w	r3, [fp]
 800a084:	e761      	b.n	8009f4a <_strtod_l+0x452>
 800a086:	bf00      	nop
 800a088:	0800d974 	.word	0x0800d974
 800a08c:	0800dc13 	.word	0x0800dc13
 800a090:	0800d977 	.word	0x0800d977
 800a094:	0800d990 	.word	0x0800d990
 800a098:	0800da08 	.word	0x0800da08
 800a09c:	0800d9e0 	.word	0x0800d9e0
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	7ca00000 	.word	0x7ca00000
 800a0a8:	fff80000 	.word	0xfff80000
 800a0ac:	7fefffff 	.word	0x7fefffff
 800a0b0:	f018 0310 	ands.w	r3, r8, #16
 800a0b4:	bf18      	it	ne
 800a0b6:	236a      	movne	r3, #106	; 0x6a
 800a0b8:	4648      	mov	r0, r9
 800a0ba:	9305      	str	r3, [sp, #20]
 800a0bc:	4651      	mov	r1, sl
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4da1      	ldr	r5, [pc, #644]	; (800a348 <_strtod_l+0x850>)
 800a0c2:	f1b8 0f00 	cmp.w	r8, #0
 800a0c6:	f300 8113 	bgt.w	800a2f0 <_strtod_l+0x7f8>
 800a0ca:	b10b      	cbz	r3, 800a0d0 <_strtod_l+0x5d8>
 800a0cc:	4681      	mov	r9, r0
 800a0ce:	468a      	mov	sl, r1
 800a0d0:	9b05      	ldr	r3, [sp, #20]
 800a0d2:	b1bb      	cbz	r3, 800a104 <_strtod_l+0x60c>
 800a0d4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a0d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	4651      	mov	r1, sl
 800a0e0:	dd10      	ble.n	800a104 <_strtod_l+0x60c>
 800a0e2:	2b1f      	cmp	r3, #31
 800a0e4:	f340 8110 	ble.w	800a308 <_strtod_l+0x810>
 800a0e8:	2b34      	cmp	r3, #52	; 0x34
 800a0ea:	bfd8      	it	le
 800a0ec:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800a0f0:	f04f 0900 	mov.w	r9, #0
 800a0f4:	bfcf      	iteee	gt
 800a0f6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a0fa:	3b20      	suble	r3, #32
 800a0fc:	fa02 f303 	lslle.w	r3, r2, r3
 800a100:	ea03 0a01 	andle.w	sl, r3, r1
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4648      	mov	r0, r9
 800a10a:	4651      	mov	r1, sl
 800a10c:	f7f6 fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 800a110:	2800      	cmp	r0, #0
 800a112:	d1a8      	bne.n	800a066 <_strtod_l+0x56e>
 800a114:	9b06      	ldr	r3, [sp, #24]
 800a116:	9a04      	ldr	r2, [sp, #16]
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	9908      	ldr	r1, [sp, #32]
 800a11c:	4623      	mov	r3, r4
 800a11e:	4658      	mov	r0, fp
 800a120:	f001 f8a0 	bl	800b264 <__s2b>
 800a124:	9008      	str	r0, [sp, #32]
 800a126:	2800      	cmp	r0, #0
 800a128:	f43f af00 	beq.w	8009f2c <_strtod_l+0x434>
 800a12c:	9a07      	ldr	r2, [sp, #28]
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	2a00      	cmp	r2, #0
 800a132:	f1c3 0300 	rsb	r3, r3, #0
 800a136:	bfa8      	it	ge
 800a138:	2300      	movge	r3, #0
 800a13a:	f04f 0800 	mov.w	r8, #0
 800a13e:	930e      	str	r3, [sp, #56]	; 0x38
 800a140:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a144:	9316      	str	r3, [sp, #88]	; 0x58
 800a146:	f8cd 8010 	str.w	r8, [sp, #16]
 800a14a:	9b08      	ldr	r3, [sp, #32]
 800a14c:	4658      	mov	r0, fp
 800a14e:	6859      	ldr	r1, [r3, #4]
 800a150:	f001 f802 	bl	800b158 <_Balloc>
 800a154:	9006      	str	r0, [sp, #24]
 800a156:	2800      	cmp	r0, #0
 800a158:	f43f aef0 	beq.w	8009f3c <_strtod_l+0x444>
 800a15c:	9b08      	ldr	r3, [sp, #32]
 800a15e:	300c      	adds	r0, #12
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	f103 010c 	add.w	r1, r3, #12
 800a166:	3202      	adds	r2, #2
 800a168:	0092      	lsls	r2, r2, #2
 800a16a:	f000 ffea 	bl	800b142 <memcpy>
 800a16e:	ab1e      	add	r3, sp, #120	; 0x78
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	ab1d      	add	r3, sp, #116	; 0x74
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	464a      	mov	r2, r9
 800a178:	4653      	mov	r3, sl
 800a17a:	4658      	mov	r0, fp
 800a17c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a180:	f001 fb2a 	bl	800b7d8 <__d2b>
 800a184:	901c      	str	r0, [sp, #112]	; 0x70
 800a186:	2800      	cmp	r0, #0
 800a188:	f43f aed8 	beq.w	8009f3c <_strtod_l+0x444>
 800a18c:	2101      	movs	r1, #1
 800a18e:	4658      	mov	r0, fp
 800a190:	f001 f8f4 	bl	800b37c <__i2b>
 800a194:	9004      	str	r0, [sp, #16]
 800a196:	4603      	mov	r3, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	f43f aecf 	beq.w	8009f3c <_strtod_l+0x444>
 800a19e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a1a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a1a2:	2d00      	cmp	r5, #0
 800a1a4:	bfab      	itete	ge
 800a1a6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a1a8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a1aa:	18ee      	addge	r6, r5, r3
 800a1ac:	1b5c      	sublt	r4, r3, r5
 800a1ae:	9b05      	ldr	r3, [sp, #20]
 800a1b0:	bfa8      	it	ge
 800a1b2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a1b4:	eba5 0503 	sub.w	r5, r5, r3
 800a1b8:	4415      	add	r5, r2
 800a1ba:	4b64      	ldr	r3, [pc, #400]	; (800a34c <_strtod_l+0x854>)
 800a1bc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a1c0:	bfb8      	it	lt
 800a1c2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a1c4:	429d      	cmp	r5, r3
 800a1c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a1ca:	f280 80af 	bge.w	800a32c <_strtod_l+0x834>
 800a1ce:	1b5b      	subs	r3, r3, r5
 800a1d0:	2b1f      	cmp	r3, #31
 800a1d2:	eba2 0203 	sub.w	r2, r2, r3
 800a1d6:	f04f 0701 	mov.w	r7, #1
 800a1da:	f300 809c 	bgt.w	800a316 <_strtod_l+0x81e>
 800a1de:	2500      	movs	r5, #0
 800a1e0:	fa07 f303 	lsl.w	r3, r7, r3
 800a1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e6:	18b7      	adds	r7, r6, r2
 800a1e8:	9b05      	ldr	r3, [sp, #20]
 800a1ea:	42be      	cmp	r6, r7
 800a1ec:	4414      	add	r4, r2
 800a1ee:	441c      	add	r4, r3
 800a1f0:	4633      	mov	r3, r6
 800a1f2:	bfa8      	it	ge
 800a1f4:	463b      	movge	r3, r7
 800a1f6:	42a3      	cmp	r3, r4
 800a1f8:	bfa8      	it	ge
 800a1fa:	4623      	movge	r3, r4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfc2      	ittt	gt
 800a200:	1aff      	subgt	r7, r7, r3
 800a202:	1ae4      	subgt	r4, r4, r3
 800a204:	1af6      	subgt	r6, r6, r3
 800a206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a208:	b1bb      	cbz	r3, 800a23a <_strtod_l+0x742>
 800a20a:	461a      	mov	r2, r3
 800a20c:	9904      	ldr	r1, [sp, #16]
 800a20e:	4658      	mov	r0, fp
 800a210:	f001 f952 	bl	800b4b8 <__pow5mult>
 800a214:	9004      	str	r0, [sp, #16]
 800a216:	2800      	cmp	r0, #0
 800a218:	f43f ae90 	beq.w	8009f3c <_strtod_l+0x444>
 800a21c:	4601      	mov	r1, r0
 800a21e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a220:	4658      	mov	r0, fp
 800a222:	f001 f8b4 	bl	800b38e <__multiply>
 800a226:	9009      	str	r0, [sp, #36]	; 0x24
 800a228:	2800      	cmp	r0, #0
 800a22a:	f43f ae87 	beq.w	8009f3c <_strtod_l+0x444>
 800a22e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a230:	4658      	mov	r0, fp
 800a232:	f000 ffc5 	bl	800b1c0 <_Bfree>
 800a236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a238:	931c      	str	r3, [sp, #112]	; 0x70
 800a23a:	2f00      	cmp	r7, #0
 800a23c:	dc7a      	bgt.n	800a334 <_strtod_l+0x83c>
 800a23e:	9b07      	ldr	r3, [sp, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	dd08      	ble.n	800a256 <_strtod_l+0x75e>
 800a244:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a246:	9906      	ldr	r1, [sp, #24]
 800a248:	4658      	mov	r0, fp
 800a24a:	f001 f935 	bl	800b4b8 <__pow5mult>
 800a24e:	9006      	str	r0, [sp, #24]
 800a250:	2800      	cmp	r0, #0
 800a252:	f43f ae73 	beq.w	8009f3c <_strtod_l+0x444>
 800a256:	2c00      	cmp	r4, #0
 800a258:	dd08      	ble.n	800a26c <_strtod_l+0x774>
 800a25a:	4622      	mov	r2, r4
 800a25c:	9906      	ldr	r1, [sp, #24]
 800a25e:	4658      	mov	r0, fp
 800a260:	f001 f978 	bl	800b554 <__lshift>
 800a264:	9006      	str	r0, [sp, #24]
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f ae68 	beq.w	8009f3c <_strtod_l+0x444>
 800a26c:	2e00      	cmp	r6, #0
 800a26e:	dd08      	ble.n	800a282 <_strtod_l+0x78a>
 800a270:	4632      	mov	r2, r6
 800a272:	9904      	ldr	r1, [sp, #16]
 800a274:	4658      	mov	r0, fp
 800a276:	f001 f96d 	bl	800b554 <__lshift>
 800a27a:	9004      	str	r0, [sp, #16]
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f43f ae5d 	beq.w	8009f3c <_strtod_l+0x444>
 800a282:	9a06      	ldr	r2, [sp, #24]
 800a284:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a286:	4658      	mov	r0, fp
 800a288:	f001 f9d2 	bl	800b630 <__mdiff>
 800a28c:	4680      	mov	r8, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	f43f ae54 	beq.w	8009f3c <_strtod_l+0x444>
 800a294:	2400      	movs	r4, #0
 800a296:	68c3      	ldr	r3, [r0, #12]
 800a298:	9904      	ldr	r1, [sp, #16]
 800a29a:	60c4      	str	r4, [r0, #12]
 800a29c:	930c      	str	r3, [sp, #48]	; 0x30
 800a29e:	f001 f9ad 	bl	800b5fc <__mcmp>
 800a2a2:	42a0      	cmp	r0, r4
 800a2a4:	da54      	bge.n	800a350 <_strtod_l+0x858>
 800a2a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a8:	b9f3      	cbnz	r3, 800a2e8 <_strtod_l+0x7f0>
 800a2aa:	f1b9 0f00 	cmp.w	r9, #0
 800a2ae:	d11b      	bne.n	800a2e8 <_strtod_l+0x7f0>
 800a2b0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a2b4:	b9c3      	cbnz	r3, 800a2e8 <_strtod_l+0x7f0>
 800a2b6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a2ba:	0d1b      	lsrs	r3, r3, #20
 800a2bc:	051b      	lsls	r3, r3, #20
 800a2be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a2c2:	d911      	bls.n	800a2e8 <_strtod_l+0x7f0>
 800a2c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a2c8:	b91b      	cbnz	r3, 800a2d2 <_strtod_l+0x7da>
 800a2ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	dd0a      	ble.n	800a2e8 <_strtod_l+0x7f0>
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f001 f93c 	bl	800b554 <__lshift>
 800a2dc:	9904      	ldr	r1, [sp, #16]
 800a2de:	4680      	mov	r8, r0
 800a2e0:	f001 f98c 	bl	800b5fc <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	dc68      	bgt.n	800a3ba <_strtod_l+0x8c2>
 800a2e8:	9b05      	ldr	r3, [sp, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d172      	bne.n	800a3d4 <_strtod_l+0x8dc>
 800a2ee:	e630      	b.n	8009f52 <_strtod_l+0x45a>
 800a2f0:	f018 0f01 	tst.w	r8, #1
 800a2f4:	d004      	beq.n	800a300 <_strtod_l+0x808>
 800a2f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2fa:	f7f6 f8ed 	bl	80004d8 <__aeabi_dmul>
 800a2fe:	2301      	movs	r3, #1
 800a300:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a304:	3508      	adds	r5, #8
 800a306:	e6dc      	b.n	800a0c2 <_strtod_l+0x5ca>
 800a308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a30c:	fa02 f303 	lsl.w	r3, r2, r3
 800a310:	ea03 0909 	and.w	r9, r3, r9
 800a314:	e6f6      	b.n	800a104 <_strtod_l+0x60c>
 800a316:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a31a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a31e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a322:	35e2      	adds	r5, #226	; 0xe2
 800a324:	fa07 f505 	lsl.w	r5, r7, r5
 800a328:	970f      	str	r7, [sp, #60]	; 0x3c
 800a32a:	e75c      	b.n	800a1e6 <_strtod_l+0x6ee>
 800a32c:	2301      	movs	r3, #1
 800a32e:	2500      	movs	r5, #0
 800a330:	930f      	str	r3, [sp, #60]	; 0x3c
 800a332:	e758      	b.n	800a1e6 <_strtod_l+0x6ee>
 800a334:	463a      	mov	r2, r7
 800a336:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a338:	4658      	mov	r0, fp
 800a33a:	f001 f90b 	bl	800b554 <__lshift>
 800a33e:	901c      	str	r0, [sp, #112]	; 0x70
 800a340:	2800      	cmp	r0, #0
 800a342:	f47f af7c 	bne.w	800a23e <_strtod_l+0x746>
 800a346:	e5f9      	b.n	8009f3c <_strtod_l+0x444>
 800a348:	0800d9a8 	.word	0x0800d9a8
 800a34c:	fffffc02 	.word	0xfffffc02
 800a350:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a354:	f040 8089 	bne.w	800a46a <_strtod_l+0x972>
 800a358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a35a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a35e:	b342      	cbz	r2, 800a3b2 <_strtod_l+0x8ba>
 800a360:	4aaf      	ldr	r2, [pc, #700]	; (800a620 <_strtod_l+0xb28>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d156      	bne.n	800a414 <_strtod_l+0x91c>
 800a366:	9b05      	ldr	r3, [sp, #20]
 800a368:	4648      	mov	r0, r9
 800a36a:	b1eb      	cbz	r3, 800a3a8 <_strtod_l+0x8b0>
 800a36c:	4653      	mov	r3, sl
 800a36e:	4aad      	ldr	r2, [pc, #692]	; (800a624 <_strtod_l+0xb2c>)
 800a370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a374:	401a      	ands	r2, r3
 800a376:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a37a:	d818      	bhi.n	800a3ae <_strtod_l+0x8b6>
 800a37c:	0d12      	lsrs	r2, r2, #20
 800a37e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a382:	fa01 f303 	lsl.w	r3, r1, r3
 800a386:	4298      	cmp	r0, r3
 800a388:	d144      	bne.n	800a414 <_strtod_l+0x91c>
 800a38a:	4ba7      	ldr	r3, [pc, #668]	; (800a628 <_strtod_l+0xb30>)
 800a38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a38e:	429a      	cmp	r2, r3
 800a390:	d102      	bne.n	800a398 <_strtod_l+0x8a0>
 800a392:	3001      	adds	r0, #1
 800a394:	f43f add2 	beq.w	8009f3c <_strtod_l+0x444>
 800a398:	4ba2      	ldr	r3, [pc, #648]	; (800a624 <_strtod_l+0xb2c>)
 800a39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39c:	f04f 0900 	mov.w	r9, #0
 800a3a0:	401a      	ands	r2, r3
 800a3a2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800a3a6:	e79f      	b.n	800a2e8 <_strtod_l+0x7f0>
 800a3a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3ac:	e7eb      	b.n	800a386 <_strtod_l+0x88e>
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	e7e9      	b.n	800a386 <_strtod_l+0x88e>
 800a3b2:	bb7b      	cbnz	r3, 800a414 <_strtod_l+0x91c>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	d12c      	bne.n	800a414 <_strtod_l+0x91c>
 800a3ba:	9905      	ldr	r1, [sp, #20]
 800a3bc:	4653      	mov	r3, sl
 800a3be:	4a99      	ldr	r2, [pc, #612]	; (800a624 <_strtod_l+0xb2c>)
 800a3c0:	b1f1      	cbz	r1, 800a400 <_strtod_l+0x908>
 800a3c2:	ea02 010a 	and.w	r1, r2, sl
 800a3c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3ca:	dc19      	bgt.n	800a400 <_strtod_l+0x908>
 800a3cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3d0:	f77f ae51 	ble.w	800a076 <_strtod_l+0x57e>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4a95      	ldr	r2, [pc, #596]	; (800a62c <_strtod_l+0xb34>)
 800a3d8:	4648      	mov	r0, r9
 800a3da:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a3de:	4651      	mov	r1, sl
 800a3e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a3e4:	f7f6 f878 	bl	80004d8 <__aeabi_dmul>
 800a3e8:	4681      	mov	r9, r0
 800a3ea:	468a      	mov	sl, r1
 800a3ec:	2900      	cmp	r1, #0
 800a3ee:	f47f adb0 	bne.w	8009f52 <_strtod_l+0x45a>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f47f adad 	bne.w	8009f52 <_strtod_l+0x45a>
 800a3f8:	2322      	movs	r3, #34	; 0x22
 800a3fa:	f8cb 3000 	str.w	r3, [fp]
 800a3fe:	e5a8      	b.n	8009f52 <_strtod_l+0x45a>
 800a400:	4013      	ands	r3, r2
 800a402:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a406:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800a40a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a40e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800a412:	e769      	b.n	800a2e8 <_strtod_l+0x7f0>
 800a414:	b19d      	cbz	r5, 800a43e <_strtod_l+0x946>
 800a416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a418:	421d      	tst	r5, r3
 800a41a:	f43f af65 	beq.w	800a2e8 <_strtod_l+0x7f0>
 800a41e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a420:	9a05      	ldr	r2, [sp, #20]
 800a422:	4648      	mov	r0, r9
 800a424:	4651      	mov	r1, sl
 800a426:	b173      	cbz	r3, 800a446 <_strtod_l+0x94e>
 800a428:	f7ff fb42 	bl	8009ab0 <sulp>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a434:	f7f5 fe9a 	bl	800016c <__adddf3>
 800a438:	4681      	mov	r9, r0
 800a43a:	468a      	mov	sl, r1
 800a43c:	e754      	b.n	800a2e8 <_strtod_l+0x7f0>
 800a43e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a440:	ea13 0f09 	tst.w	r3, r9
 800a444:	e7e9      	b.n	800a41a <_strtod_l+0x922>
 800a446:	f7ff fb33 	bl	8009ab0 <sulp>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a452:	f7f5 fe89 	bl	8000168 <__aeabi_dsub>
 800a456:	2200      	movs	r2, #0
 800a458:	2300      	movs	r3, #0
 800a45a:	4681      	mov	r9, r0
 800a45c:	468a      	mov	sl, r1
 800a45e:	f7f6 faa3 	bl	80009a8 <__aeabi_dcmpeq>
 800a462:	2800      	cmp	r0, #0
 800a464:	f47f ae07 	bne.w	800a076 <_strtod_l+0x57e>
 800a468:	e73e      	b.n	800a2e8 <_strtod_l+0x7f0>
 800a46a:	9904      	ldr	r1, [sp, #16]
 800a46c:	4640      	mov	r0, r8
 800a46e:	f001 fa02 	bl	800b876 <__ratio>
 800a472:	2200      	movs	r2, #0
 800a474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	f7f6 faa8 	bl	80009d0 <__aeabi_dcmple>
 800a480:	2800      	cmp	r0, #0
 800a482:	d075      	beq.n	800a570 <_strtod_l+0xa78>
 800a484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a486:	2b00      	cmp	r3, #0
 800a488:	d047      	beq.n	800a51a <_strtod_l+0xa22>
 800a48a:	2600      	movs	r6, #0
 800a48c:	4f68      	ldr	r7, [pc, #416]	; (800a630 <_strtod_l+0xb38>)
 800a48e:	4d68      	ldr	r5, [pc, #416]	; (800a630 <_strtod_l+0xb38>)
 800a490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a496:	0d1b      	lsrs	r3, r3, #20
 800a498:	051b      	lsls	r3, r3, #20
 800a49a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a49c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a49e:	4b65      	ldr	r3, [pc, #404]	; (800a634 <_strtod_l+0xb3c>)
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	f040 80cf 	bne.w	800a644 <_strtod_l+0xb4c>
 800a4a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4aa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	4648      	mov	r0, r9
 800a4b2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800a4b6:	4651      	mov	r1, sl
 800a4b8:	f001 f918 	bl	800b6ec <__ulp>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 f808 	bl	80004d8 <__aeabi_dmul>
 800a4c8:	464a      	mov	r2, r9
 800a4ca:	4653      	mov	r3, sl
 800a4cc:	f7f5 fe4e 	bl	800016c <__adddf3>
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4954      	ldr	r1, [pc, #336]	; (800a624 <_strtod_l+0xb2c>)
 800a4d4:	4a58      	ldr	r2, [pc, #352]	; (800a638 <_strtod_l+0xb40>)
 800a4d6:	4019      	ands	r1, r3
 800a4d8:	4291      	cmp	r1, r2
 800a4da:	4681      	mov	r9, r0
 800a4dc:	d95e      	bls.n	800a59c <_strtod_l+0xaa4>
 800a4de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d103      	bne.n	800a4f0 <_strtod_l+0x9f8>
 800a4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	f43f ad26 	beq.w	8009f3c <_strtod_l+0x444>
 800a4f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a4f4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800a628 <_strtod_l+0xb30>
 800a4f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4fa:	4658      	mov	r0, fp
 800a4fc:	f000 fe60 	bl	800b1c0 <_Bfree>
 800a500:	9906      	ldr	r1, [sp, #24]
 800a502:	4658      	mov	r0, fp
 800a504:	f000 fe5c 	bl	800b1c0 <_Bfree>
 800a508:	9904      	ldr	r1, [sp, #16]
 800a50a:	4658      	mov	r0, fp
 800a50c:	f000 fe58 	bl	800b1c0 <_Bfree>
 800a510:	4641      	mov	r1, r8
 800a512:	4658      	mov	r0, fp
 800a514:	f000 fe54 	bl	800b1c0 <_Bfree>
 800a518:	e617      	b.n	800a14a <_strtod_l+0x652>
 800a51a:	f1b9 0f00 	cmp.w	r9, #0
 800a51e:	d119      	bne.n	800a554 <_strtod_l+0xa5c>
 800a520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a526:	b9e3      	cbnz	r3, 800a562 <_strtod_l+0xa6a>
 800a528:	2200      	movs	r2, #0
 800a52a:	4b41      	ldr	r3, [pc, #260]	; (800a630 <_strtod_l+0xb38>)
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f6 fa44 	bl	80009bc <__aeabi_dcmplt>
 800a534:	b9c8      	cbnz	r0, 800a56a <_strtod_l+0xa72>
 800a536:	2200      	movs	r2, #0
 800a538:	4b40      	ldr	r3, [pc, #256]	; (800a63c <_strtod_l+0xb44>)
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f5 ffcb 	bl	80004d8 <__aeabi_dmul>
 800a542:	4604      	mov	r4, r0
 800a544:	460d      	mov	r5, r1
 800a546:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a54a:	9418      	str	r4, [sp, #96]	; 0x60
 800a54c:	9319      	str	r3, [sp, #100]	; 0x64
 800a54e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a552:	e79d      	b.n	800a490 <_strtod_l+0x998>
 800a554:	f1b9 0f01 	cmp.w	r9, #1
 800a558:	d103      	bne.n	800a562 <_strtod_l+0xa6a>
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f43f ad8a 	beq.w	800a076 <_strtod_l+0x57e>
 800a562:	2600      	movs	r6, #0
 800a564:	4f36      	ldr	r7, [pc, #216]	; (800a640 <_strtod_l+0xb48>)
 800a566:	2400      	movs	r4, #0
 800a568:	e791      	b.n	800a48e <_strtod_l+0x996>
 800a56a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a56c:	4d33      	ldr	r5, [pc, #204]	; (800a63c <_strtod_l+0xb44>)
 800a56e:	e7ea      	b.n	800a546 <_strtod_l+0xa4e>
 800a570:	4b32      	ldr	r3, [pc, #200]	; (800a63c <_strtod_l+0xb44>)
 800a572:	2200      	movs	r2, #0
 800a574:	4630      	mov	r0, r6
 800a576:	4639      	mov	r1, r7
 800a578:	f7f5 ffae 	bl	80004d8 <__aeabi_dmul>
 800a57c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a57e:	4604      	mov	r4, r0
 800a580:	460d      	mov	r5, r1
 800a582:	b933      	cbnz	r3, 800a592 <_strtod_l+0xa9a>
 800a584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a588:	9010      	str	r0, [sp, #64]	; 0x40
 800a58a:	9311      	str	r3, [sp, #68]	; 0x44
 800a58c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a590:	e77e      	b.n	800a490 <_strtod_l+0x998>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a59a:	e7f7      	b.n	800a58c <_strtod_l+0xa94>
 800a59c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800a5a0:	9b05      	ldr	r3, [sp, #20]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1a8      	bne.n	800a4f8 <_strtod_l+0xa00>
 800a5a6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a5aa:	0d1b      	lsrs	r3, r3, #20
 800a5ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5ae:	051b      	lsls	r3, r3, #20
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	4656      	mov	r6, sl
 800a5b4:	d1a0      	bne.n	800a4f8 <_strtod_l+0xa00>
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7f6 fa27 	bl	8000a0c <__aeabi_d2iz>
 800a5be:	f7f5 ff21 	bl	8000404 <__aeabi_i2d>
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7f5 fdcd 	bl	8000168 <__aeabi_dsub>
 800a5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	b933      	cbnz	r3, 800a5e4 <_strtod_l+0xaec>
 800a5d6:	f1b9 0f00 	cmp.w	r9, #0
 800a5da:	d103      	bne.n	800a5e4 <_strtod_l+0xaec>
 800a5dc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800a5e0:	2e00      	cmp	r6, #0
 800a5e2:	d06a      	beq.n	800a6ba <_strtod_l+0xbc2>
 800a5e4:	a30a      	add	r3, pc, #40	; (adr r3, 800a610 <_strtod_l+0xb18>)
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	f7f6 f9e5 	bl	80009bc <__aeabi_dcmplt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f47f acad 	bne.w	8009f52 <_strtod_l+0x45a>
 800a5f8:	a307      	add	r3, pc, #28	; (adr r3, 800a618 <_strtod_l+0xb20>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f6 f9f9 	bl	80009f8 <__aeabi_dcmpgt>
 800a606:	2800      	cmp	r0, #0
 800a608:	f43f af76 	beq.w	800a4f8 <_strtod_l+0xa00>
 800a60c:	e4a1      	b.n	8009f52 <_strtod_l+0x45a>
 800a60e:	bf00      	nop
 800a610:	94a03595 	.word	0x94a03595
 800a614:	3fdfffff 	.word	0x3fdfffff
 800a618:	35afe535 	.word	0x35afe535
 800a61c:	3fe00000 	.word	0x3fe00000
 800a620:	000fffff 	.word	0x000fffff
 800a624:	7ff00000 	.word	0x7ff00000
 800a628:	7fefffff 	.word	0x7fefffff
 800a62c:	39500000 	.word	0x39500000
 800a630:	3ff00000 	.word	0x3ff00000
 800a634:	7fe00000 	.word	0x7fe00000
 800a638:	7c9fffff 	.word	0x7c9fffff
 800a63c:	3fe00000 	.word	0x3fe00000
 800a640:	bff00000 	.word	0xbff00000
 800a644:	9b05      	ldr	r3, [sp, #20]
 800a646:	b313      	cbz	r3, 800a68e <_strtod_l+0xb96>
 800a648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a64a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a64e:	d81e      	bhi.n	800a68e <_strtod_l+0xb96>
 800a650:	a325      	add	r3, pc, #148	; (adr r3, 800a6e8 <_strtod_l+0xbf0>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	4620      	mov	r0, r4
 800a658:	4629      	mov	r1, r5
 800a65a:	f7f6 f9b9 	bl	80009d0 <__aeabi_dcmple>
 800a65e:	b190      	cbz	r0, 800a686 <_strtod_l+0xb8e>
 800a660:	4629      	mov	r1, r5
 800a662:	4620      	mov	r0, r4
 800a664:	f7f6 f9fa 	bl	8000a5c <__aeabi_d2uiz>
 800a668:	2800      	cmp	r0, #0
 800a66a:	bf08      	it	eq
 800a66c:	2001      	moveq	r0, #1
 800a66e:	f7f5 feb9 	bl	80003e4 <__aeabi_ui2d>
 800a672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	b9d3      	cbnz	r3, 800a6b0 <_strtod_l+0xbb8>
 800a67a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a67e:	9012      	str	r0, [sp, #72]	; 0x48
 800a680:	9313      	str	r3, [sp, #76]	; 0x4c
 800a682:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a688:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a68c:	1a9f      	subs	r7, r3, r2
 800a68e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a692:	f001 f82b 	bl	800b6ec <__ulp>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4630      	mov	r0, r6
 800a69c:	4639      	mov	r1, r7
 800a69e:	f7f5 ff1b 	bl	80004d8 <__aeabi_dmul>
 800a6a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6a6:	f7f5 fd61 	bl	800016c <__adddf3>
 800a6aa:	4681      	mov	r9, r0
 800a6ac:	468a      	mov	sl, r1
 800a6ae:	e777      	b.n	800a5a0 <_strtod_l+0xaa8>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a6b8:	e7e3      	b.n	800a682 <_strtod_l+0xb8a>
 800a6ba:	a30d      	add	r3, pc, #52	; (adr r3, 800a6f0 <_strtod_l+0xbf8>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f6 f97c 	bl	80009bc <__aeabi_dcmplt>
 800a6c4:	e79f      	b.n	800a606 <_strtod_l+0xb0e>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	930d      	str	r3, [sp, #52]	; 0x34
 800a6ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	f7ff ba55 	b.w	8009b7e <_strtod_l+0x86>
 800a6d4:	2b65      	cmp	r3, #101	; 0x65
 800a6d6:	f04f 0200 	mov.w	r2, #0
 800a6da:	f43f ab42 	beq.w	8009d62 <_strtod_l+0x26a>
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	9105      	str	r1, [sp, #20]
 800a6e4:	f7ff babf 	b.w	8009c66 <_strtod_l+0x16e>
 800a6e8:	ffc00000 	.word	0xffc00000
 800a6ec:	41dfffff 	.word	0x41dfffff
 800a6f0:	94a03595 	.word	0x94a03595
 800a6f4:	3fcfffff 	.word	0x3fcfffff

0800a6f8 <strtod>:
 800a6f8:	4b06      	ldr	r3, [pc, #24]	; (800a714 <strtod+0x1c>)
 800a6fa:	b410      	push	{r4}
 800a6fc:	681c      	ldr	r4, [r3, #0]
 800a6fe:	4a06      	ldr	r2, [pc, #24]	; (800a718 <strtod+0x20>)
 800a700:	6a23      	ldr	r3, [r4, #32]
 800a702:	2b00      	cmp	r3, #0
 800a704:	bf08      	it	eq
 800a706:	4613      	moveq	r3, r2
 800a708:	460a      	mov	r2, r1
 800a70a:	4601      	mov	r1, r0
 800a70c:	4620      	mov	r0, r4
 800a70e:	bc10      	pop	{r4}
 800a710:	f7ff b9f2 	b.w	8009af8 <_strtod_l>
 800a714:	20000068 	.word	0x20000068
 800a718:	200000cc 	.word	0x200000cc

0800a71c <_strtol_l.isra.0>:
 800a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	4680      	mov	r8, r0
 800a722:	4689      	mov	r9, r1
 800a724:	4692      	mov	sl, r2
 800a726:	461e      	mov	r6, r3
 800a728:	460f      	mov	r7, r1
 800a72a:	463d      	mov	r5, r7
 800a72c:	9808      	ldr	r0, [sp, #32]
 800a72e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a732:	f000 fcef 	bl	800b114 <__locale_ctype_ptr_l>
 800a736:	4420      	add	r0, r4
 800a738:	7843      	ldrb	r3, [r0, #1]
 800a73a:	f013 0308 	ands.w	r3, r3, #8
 800a73e:	d132      	bne.n	800a7a6 <_strtol_l.isra.0+0x8a>
 800a740:	2c2d      	cmp	r4, #45	; 0x2d
 800a742:	d132      	bne.n	800a7aa <_strtol_l.isra.0+0x8e>
 800a744:	2201      	movs	r2, #1
 800a746:	787c      	ldrb	r4, [r7, #1]
 800a748:	1cbd      	adds	r5, r7, #2
 800a74a:	2e00      	cmp	r6, #0
 800a74c:	d05d      	beq.n	800a80a <_strtol_l.isra.0+0xee>
 800a74e:	2e10      	cmp	r6, #16
 800a750:	d109      	bne.n	800a766 <_strtol_l.isra.0+0x4a>
 800a752:	2c30      	cmp	r4, #48	; 0x30
 800a754:	d107      	bne.n	800a766 <_strtol_l.isra.0+0x4a>
 800a756:	782b      	ldrb	r3, [r5, #0]
 800a758:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a75c:	2b58      	cmp	r3, #88	; 0x58
 800a75e:	d14f      	bne.n	800a800 <_strtol_l.isra.0+0xe4>
 800a760:	2610      	movs	r6, #16
 800a762:	786c      	ldrb	r4, [r5, #1]
 800a764:	3502      	adds	r5, #2
 800a766:	2a00      	cmp	r2, #0
 800a768:	bf14      	ite	ne
 800a76a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a76e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a772:	2700      	movs	r7, #0
 800a774:	fbb1 fcf6 	udiv	ip, r1, r6
 800a778:	4638      	mov	r0, r7
 800a77a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a77e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a782:	2b09      	cmp	r3, #9
 800a784:	d817      	bhi.n	800a7b6 <_strtol_l.isra.0+0x9a>
 800a786:	461c      	mov	r4, r3
 800a788:	42a6      	cmp	r6, r4
 800a78a:	dd23      	ble.n	800a7d4 <_strtol_l.isra.0+0xb8>
 800a78c:	1c7b      	adds	r3, r7, #1
 800a78e:	d007      	beq.n	800a7a0 <_strtol_l.isra.0+0x84>
 800a790:	4584      	cmp	ip, r0
 800a792:	d31c      	bcc.n	800a7ce <_strtol_l.isra.0+0xb2>
 800a794:	d101      	bne.n	800a79a <_strtol_l.isra.0+0x7e>
 800a796:	45a6      	cmp	lr, r4
 800a798:	db19      	blt.n	800a7ce <_strtol_l.isra.0+0xb2>
 800a79a:	2701      	movs	r7, #1
 800a79c:	fb00 4006 	mla	r0, r0, r6, r4
 800a7a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7a4:	e7eb      	b.n	800a77e <_strtol_l.isra.0+0x62>
 800a7a6:	462f      	mov	r7, r5
 800a7a8:	e7bf      	b.n	800a72a <_strtol_l.isra.0+0xe>
 800a7aa:	2c2b      	cmp	r4, #43	; 0x2b
 800a7ac:	bf04      	itt	eq
 800a7ae:	1cbd      	addeq	r5, r7, #2
 800a7b0:	787c      	ldrbeq	r4, [r7, #1]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	e7c9      	b.n	800a74a <_strtol_l.isra.0+0x2e>
 800a7b6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a7ba:	2b19      	cmp	r3, #25
 800a7bc:	d801      	bhi.n	800a7c2 <_strtol_l.isra.0+0xa6>
 800a7be:	3c37      	subs	r4, #55	; 0x37
 800a7c0:	e7e2      	b.n	800a788 <_strtol_l.isra.0+0x6c>
 800a7c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a7c6:	2b19      	cmp	r3, #25
 800a7c8:	d804      	bhi.n	800a7d4 <_strtol_l.isra.0+0xb8>
 800a7ca:	3c57      	subs	r4, #87	; 0x57
 800a7cc:	e7dc      	b.n	800a788 <_strtol_l.isra.0+0x6c>
 800a7ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a7d2:	e7e5      	b.n	800a7a0 <_strtol_l.isra.0+0x84>
 800a7d4:	1c7b      	adds	r3, r7, #1
 800a7d6:	d108      	bne.n	800a7ea <_strtol_l.isra.0+0xce>
 800a7d8:	2322      	movs	r3, #34	; 0x22
 800a7da:	4608      	mov	r0, r1
 800a7dc:	f8c8 3000 	str.w	r3, [r8]
 800a7e0:	f1ba 0f00 	cmp.w	sl, #0
 800a7e4:	d107      	bne.n	800a7f6 <_strtol_l.isra.0+0xda>
 800a7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ea:	b102      	cbz	r2, 800a7ee <_strtol_l.isra.0+0xd2>
 800a7ec:	4240      	negs	r0, r0
 800a7ee:	f1ba 0f00 	cmp.w	sl, #0
 800a7f2:	d0f8      	beq.n	800a7e6 <_strtol_l.isra.0+0xca>
 800a7f4:	b10f      	cbz	r7, 800a7fa <_strtol_l.isra.0+0xde>
 800a7f6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a7fa:	f8ca 9000 	str.w	r9, [sl]
 800a7fe:	e7f2      	b.n	800a7e6 <_strtol_l.isra.0+0xca>
 800a800:	2430      	movs	r4, #48	; 0x30
 800a802:	2e00      	cmp	r6, #0
 800a804:	d1af      	bne.n	800a766 <_strtol_l.isra.0+0x4a>
 800a806:	2608      	movs	r6, #8
 800a808:	e7ad      	b.n	800a766 <_strtol_l.isra.0+0x4a>
 800a80a:	2c30      	cmp	r4, #48	; 0x30
 800a80c:	d0a3      	beq.n	800a756 <_strtol_l.isra.0+0x3a>
 800a80e:	260a      	movs	r6, #10
 800a810:	e7a9      	b.n	800a766 <_strtol_l.isra.0+0x4a>
	...

0800a814 <strtol>:
 800a814:	4b08      	ldr	r3, [pc, #32]	; (800a838 <strtol+0x24>)
 800a816:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a818:	681c      	ldr	r4, [r3, #0]
 800a81a:	4d08      	ldr	r5, [pc, #32]	; (800a83c <strtol+0x28>)
 800a81c:	6a23      	ldr	r3, [r4, #32]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf08      	it	eq
 800a822:	462b      	moveq	r3, r5
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	4613      	mov	r3, r2
 800a828:	460a      	mov	r2, r1
 800a82a:	4601      	mov	r1, r0
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7ff ff75 	bl	800a71c <_strtol_l.isra.0>
 800a832:	b003      	add	sp, #12
 800a834:	bd30      	pop	{r4, r5, pc}
 800a836:	bf00      	nop
 800a838:	20000068 	.word	0x20000068
 800a83c:	200000cc 	.word	0x200000cc

0800a840 <print_e>:
 800a840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a842:	b08b      	sub	sp, #44	; 0x2c
 800a844:	460f      	mov	r7, r1
 800a846:	a908      	add	r1, sp, #32
 800a848:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a84a:	9104      	str	r1, [sp, #16]
 800a84c:	a907      	add	r1, sp, #28
 800a84e:	9103      	str	r1, [sp, #12]
 800a850:	a909      	add	r1, sp, #36	; 0x24
 800a852:	9102      	str	r1, [sp, #8]
 800a854:	1c61      	adds	r1, r4, #1
 800a856:	9101      	str	r1, [sp, #4]
 800a858:	2102      	movs	r1, #2
 800a85a:	9100      	str	r1, [sp, #0]
 800a85c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 800a860:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800a862:	f001 fcb5 	bl	800c1d0 <_dtoa_r>
 800a866:	f242 730f 	movw	r3, #9999	; 0x270f
 800a86a:	4601      	mov	r1, r0
 800a86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a86e:	4298      	cmp	r0, r3
 800a870:	d104      	bne.n	800a87c <print_e+0x3c>
 800a872:	4638      	mov	r0, r7
 800a874:	f7ff f8fa 	bl	8009a6c <strcpy>
 800a878:	b00b      	add	sp, #44	; 0x2c
 800a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87c:	780b      	ldrb	r3, [r1, #0]
 800a87e:	703b      	strb	r3, [r7, #0]
 800a880:	2d00      	cmp	r5, #0
 800a882:	d142      	bne.n	800a90a <print_e+0xca>
 800a884:	2c00      	cmp	r4, #0
 800a886:	d140      	bne.n	800a90a <print_e+0xca>
 800a888:	1c7b      	adds	r3, r7, #1
 800a88a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a88e:	b10a      	cbz	r2, 800a894 <print_e+0x54>
 800a890:	2c00      	cmp	r4, #0
 800a892:	dc3e      	bgt.n	800a912 <print_e+0xd2>
 800a894:	2e67      	cmp	r6, #103	; 0x67
 800a896:	d043      	beq.n	800a920 <print_e+0xe0>
 800a898:	2e47      	cmp	r6, #71	; 0x47
 800a89a:	d043      	beq.n	800a924 <print_e+0xe4>
 800a89c:	461a      	mov	r2, r3
 800a89e:	2730      	movs	r7, #48	; 0x30
 800a8a0:	191d      	adds	r5, r3, r4
 800a8a2:	1aa9      	subs	r1, r5, r2
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	dc38      	bgt.n	800a91a <print_e+0xda>
 800a8a8:	2c00      	cmp	r4, #0
 800a8aa:	bfa8      	it	ge
 800a8ac:	191b      	addge	r3, r3, r4
 800a8ae:	1e41      	subs	r1, r0, #1
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	9109      	str	r1, [sp, #36]	; 0x24
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	bfb7      	itett	lt
 800a8b8:	212d      	movlt	r1, #45	; 0x2d
 800a8ba:	212b      	movge	r1, #43	; 0x2b
 800a8bc:	f1c0 0001 	rsblt	r0, r0, #1
 800a8c0:	9009      	strlt	r0, [sp, #36]	; 0x24
 800a8c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c4:	f802 6b02 	strb.w	r6, [r2], #2
 800a8c8:	bfb4      	ite	lt
 800a8ca:	7059      	strblt	r1, [r3, #1]
 800a8cc:	7059      	strbge	r1, [r3, #1]
 800a8ce:	2863      	cmp	r0, #99	; 0x63
 800a8d0:	dd0b      	ble.n	800a8ea <print_e+0xaa>
 800a8d2:	2164      	movs	r1, #100	; 0x64
 800a8d4:	fb90 f1f1 	sdiv	r1, r0, r1
 800a8d8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800a8dc:	1cda      	adds	r2, r3, #3
 800a8de:	709c      	strb	r4, [r3, #2]
 800a8e0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800a8e4:	fb03 0101 	mla	r1, r3, r1, r0
 800a8e8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ea:	230a      	movs	r3, #10
 800a8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ee:	fb91 f3f3 	sdiv	r3, r1, r3
 800a8f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a8f6:	7010      	strb	r0, [r2, #0]
 800a8f8:	f06f 0009 	mvn.w	r0, #9
 800a8fc:	fb00 1303 	mla	r3, r0, r3, r1
 800a900:	3330      	adds	r3, #48	; 0x30
 800a902:	7053      	strb	r3, [r2, #1]
 800a904:	2300      	movs	r3, #0
 800a906:	7093      	strb	r3, [r2, #2]
 800a908:	e7b6      	b.n	800a878 <print_e+0x38>
 800a90a:	222e      	movs	r2, #46	; 0x2e
 800a90c:	1cbb      	adds	r3, r7, #2
 800a90e:	707a      	strb	r2, [r7, #1]
 800a910:	e7bb      	b.n	800a88a <print_e+0x4a>
 800a912:	f803 2b01 	strb.w	r2, [r3], #1
 800a916:	3c01      	subs	r4, #1
 800a918:	e7b7      	b.n	800a88a <print_e+0x4a>
 800a91a:	f802 7b01 	strb.w	r7, [r2], #1
 800a91e:	e7c0      	b.n	800a8a2 <print_e+0x62>
 800a920:	2665      	movs	r6, #101	; 0x65
 800a922:	e7c4      	b.n	800a8ae <print_e+0x6e>
 800a924:	2645      	movs	r6, #69	; 0x45
 800a926:	e7c2      	b.n	800a8ae <print_e+0x6e>

0800a928 <_gcvt>:
 800a928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a92c:	4617      	mov	r7, r2
 800a92e:	461d      	mov	r5, r3
 800a930:	b08b      	sub	sp, #44	; 0x2c
 800a932:	4681      	mov	r9, r0
 800a934:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 800a938:	2200      	movs	r2, #0
 800a93a:	2300      	movs	r3, #0
 800a93c:	4638      	mov	r0, r7
 800a93e:	4629      	mov	r1, r5
 800a940:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800a944:	f7f6 f83a 	bl	80009bc <__aeabi_dcmplt>
 800a948:	b108      	cbz	r0, 800a94e <_gcvt+0x26>
 800a94a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a94e:	2200      	movs	r2, #0
 800a950:	2300      	movs	r3, #0
 800a952:	4638      	mov	r0, r7
 800a954:	4629      	mov	r1, r5
 800a956:	f7f6 f827 	bl	80009a8 <__aeabi_dcmpeq>
 800a95a:	b138      	cbz	r0, 800a96c <_gcvt+0x44>
 800a95c:	2330      	movs	r3, #48	; 0x30
 800a95e:	7023      	strb	r3, [r4, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	7063      	strb	r3, [r4, #1]
 800a964:	4620      	mov	r0, r4
 800a966:	b00b      	add	sp, #44	; 0x2c
 800a968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a96c:	a352      	add	r3, pc, #328	; (adr r3, 800aab8 <_gcvt+0x190>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	4638      	mov	r0, r7
 800a974:	4629      	mov	r1, r5
 800a976:	f7f6 f82b 	bl	80009d0 <__aeabi_dcmple>
 800a97a:	b168      	cbz	r0, 800a998 <_gcvt+0x70>
 800a97c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a980:	3e01      	subs	r6, #1
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	f8cd 8008 	str.w	r8, [sp, #8]
 800a988:	9600      	str	r6, [sp, #0]
 800a98a:	463a      	mov	r2, r7
 800a98c:	462b      	mov	r3, r5
 800a98e:	4621      	mov	r1, r4
 800a990:	4648      	mov	r0, r9
 800a992:	f7ff ff55 	bl	800a840 <print_e>
 800a996:	e7e5      	b.n	800a964 <_gcvt+0x3c>
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 ff9b 	bl	800b8d4 <_mprec_log10>
 800a99e:	463a      	mov	r2, r7
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	f7f6 f815 	bl	80009d0 <__aeabi_dcmple>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d1e8      	bne.n	800a97c <_gcvt+0x54>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4b44      	ldr	r3, [pc, #272]	; (800aac0 <_gcvt+0x198>)
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7f6 f803 	bl	80009bc <__aeabi_dcmplt>
 800a9b6:	a909      	add	r1, sp, #36	; 0x24
 800a9b8:	aa08      	add	r2, sp, #32
 800a9ba:	ab07      	add	r3, sp, #28
 800a9bc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a9c0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a9c4:	b388      	cbz	r0, 800aa2a <_gcvt+0x102>
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	4648      	mov	r0, r9
 800a9d0:	f001 fbfe 	bl	800c1d0 <_dtoa_r>
 800a9d4:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9d8:	9a07      	ldr	r2, [sp, #28]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d027      	beq.n	800aa2e <_gcvt+0x106>
 800a9de:	4623      	mov	r3, r4
 800a9e0:	4426      	add	r6, r4
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a9e8:	1af2      	subs	r2, r6, r3
 800a9ea:	9d07      	ldr	r5, [sp, #28]
 800a9ec:	b349      	cbz	r1, 800aa42 <_gcvt+0x11a>
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	dc22      	bgt.n	800aa38 <_gcvt+0x110>
 800a9f2:	f1b8 0f00 	cmp.w	r8, #0
 800a9f6:	d102      	bne.n	800a9fe <_gcvt+0xd6>
 800a9f8:	7839      	ldrb	r1, [r7, #0]
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	d049      	beq.n	800aa92 <_gcvt+0x16a>
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	bf04      	itt	eq
 800aa02:	2130      	moveq	r1, #48	; 0x30
 800aa04:	7021      	strbeq	r1, [r4, #0]
 800aa06:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800aa0a:	f04f 0000 	mov.w	r0, #0
 800aa0e:	f04f 0630 	mov.w	r6, #48	; 0x30
 800aa12:	bf08      	it	eq
 800aa14:	1c63      	addeq	r3, r4, #1
 800aa16:	7019      	strb	r1, [r3, #0]
 800aa18:	9907      	ldr	r1, [sp, #28]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	460d      	mov	r5, r1
 800aa20:	db24      	blt.n	800aa6c <_gcvt+0x144>
 800aa22:	b100      	cbz	r0, 800aa26 <_gcvt+0xfe>
 800aa24:	9107      	str	r1, [sp, #28]
 800aa26:	1e79      	subs	r1, r7, #1
 800aa28:	e02b      	b.n	800aa82 <_gcvt+0x15a>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	e7cc      	b.n	800a9c8 <_gcvt+0xa0>
 800aa2e:	4601      	mov	r1, r0
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7ff f81b 	bl	8009a6c <strcpy>
 800aa36:	e795      	b.n	800a964 <_gcvt+0x3c>
 800aa38:	3d01      	subs	r5, #1
 800aa3a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3e:	9507      	str	r5, [sp, #28]
 800aa40:	e7cf      	b.n	800a9e2 <_gcvt+0xba>
 800aa42:	1aad      	subs	r5, r5, r2
 800aa44:	2630      	movs	r6, #48	; 0x30
 800aa46:	e005      	b.n	800aa54 <_gcvt+0x12c>
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	dd06      	ble.n	800aa5a <_gcvt+0x132>
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	f803 6b01 	strb.w	r6, [r3], #1
 800aa52:	3a01      	subs	r2, #1
 800aa54:	18a8      	adds	r0, r5, r2
 800aa56:	2800      	cmp	r0, #0
 800aa58:	dcf6      	bgt.n	800aa48 <_gcvt+0x120>
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d0c9      	beq.n	800a9f2 <_gcvt+0xca>
 800aa5e:	9007      	str	r0, [sp, #28]
 800aa60:	e7c7      	b.n	800a9f2 <_gcvt+0xca>
 800aa62:	f803 6b01 	strb.w	r6, [r3], #1
 800aa66:	3a01      	subs	r2, #1
 800aa68:	2001      	movs	r0, #1
 800aa6a:	e7d7      	b.n	800aa1c <_gcvt+0xf4>
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	f101 0101 	add.w	r1, r1, #1
 800aa72:	dcf6      	bgt.n	800aa62 <_gcvt+0x13a>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0d6      	beq.n	800aa26 <_gcvt+0xfe>
 800aa78:	9507      	str	r5, [sp, #28]
 800aa7a:	e7d4      	b.n	800aa26 <_gcvt+0xfe>
 800aa7c:	f803 0b01 	strb.w	r0, [r3], #1
 800aa80:	3a01      	subs	r2, #1
 800aa82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa86:	b108      	cbz	r0, 800aa8c <_gcvt+0x164>
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	dcf7      	bgt.n	800aa7c <_gcvt+0x154>
 800aa8c:	f1b8 0f00 	cmp.w	r8, #0
 800aa90:	d10b      	bne.n	800aaaa <_gcvt+0x182>
 800aa92:	2200      	movs	r2, #0
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	e765      	b.n	800a964 <_gcvt+0x3c>
 800aa98:	f801 6b01 	strb.w	r6, [r1], #1
 800aa9c:	1a68      	subs	r0, r5, r1
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	dcfa      	bgt.n	800aa98 <_gcvt+0x170>
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	bfa8      	it	ge
 800aaa6:	189b      	addge	r3, r3, r2
 800aaa8:	e7f3      	b.n	800aa92 <_gcvt+0x16a>
 800aaaa:	4619      	mov	r1, r3
 800aaac:	189d      	adds	r5, r3, r2
 800aaae:	2630      	movs	r6, #48	; 0x30
 800aab0:	e7f4      	b.n	800aa9c <_gcvt+0x174>
 800aab2:	bf00      	nop
 800aab4:	f3af 8000 	nop.w
 800aab8:	eb1c432d 	.word	0xeb1c432d
 800aabc:	3f1a36e2 	.word	0x3f1a36e2
 800aac0:	3ff00000 	.word	0x3ff00000

0800aac4 <rshift>:
 800aac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aac6:	6906      	ldr	r6, [r0, #16]
 800aac8:	114b      	asrs	r3, r1, #5
 800aaca:	429e      	cmp	r6, r3
 800aacc:	f100 0414 	add.w	r4, r0, #20
 800aad0:	dd31      	ble.n	800ab36 <rshift+0x72>
 800aad2:	f011 011f 	ands.w	r1, r1, #31
 800aad6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800aada:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800aade:	d108      	bne.n	800aaf2 <rshift+0x2e>
 800aae0:	4621      	mov	r1, r4
 800aae2:	42b2      	cmp	r2, r6
 800aae4:	460b      	mov	r3, r1
 800aae6:	d211      	bcs.n	800ab0c <rshift+0x48>
 800aae8:	f852 3b04 	ldr.w	r3, [r2], #4
 800aaec:	f841 3b04 	str.w	r3, [r1], #4
 800aaf0:	e7f7      	b.n	800aae2 <rshift+0x1e>
 800aaf2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	f1c1 0c20 	rsb	ip, r1, #32
 800aafc:	40cd      	lsrs	r5, r1
 800aafe:	3204      	adds	r2, #4
 800ab00:	42b2      	cmp	r2, r6
 800ab02:	4617      	mov	r7, r2
 800ab04:	d30d      	bcc.n	800ab22 <rshift+0x5e>
 800ab06:	601d      	str	r5, [r3, #0]
 800ab08:	b105      	cbz	r5, 800ab0c <rshift+0x48>
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	eba3 0204 	sub.w	r2, r3, r4
 800ab12:	bf08      	it	eq
 800ab14:	2300      	moveq	r3, #0
 800ab16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab1a:	6102      	str	r2, [r0, #16]
 800ab1c:	bf08      	it	eq
 800ab1e:	6143      	streq	r3, [r0, #20]
 800ab20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab22:	683f      	ldr	r7, [r7, #0]
 800ab24:	fa07 f70c 	lsl.w	r7, r7, ip
 800ab28:	433d      	orrs	r5, r7
 800ab2a:	f843 5b04 	str.w	r5, [r3], #4
 800ab2e:	f852 5b04 	ldr.w	r5, [r2], #4
 800ab32:	40cd      	lsrs	r5, r1
 800ab34:	e7e4      	b.n	800ab00 <rshift+0x3c>
 800ab36:	4623      	mov	r3, r4
 800ab38:	e7e8      	b.n	800ab0c <rshift+0x48>

0800ab3a <__hexdig_fun>:
 800ab3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d802      	bhi.n	800ab48 <__hexdig_fun+0xe>
 800ab42:	3820      	subs	r0, #32
 800ab44:	b2c0      	uxtb	r0, r0
 800ab46:	4770      	bx	lr
 800ab48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab4c:	2b05      	cmp	r3, #5
 800ab4e:	d801      	bhi.n	800ab54 <__hexdig_fun+0x1a>
 800ab50:	3847      	subs	r0, #71	; 0x47
 800ab52:	e7f7      	b.n	800ab44 <__hexdig_fun+0xa>
 800ab54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab58:	2b05      	cmp	r3, #5
 800ab5a:	d801      	bhi.n	800ab60 <__hexdig_fun+0x26>
 800ab5c:	3827      	subs	r0, #39	; 0x27
 800ab5e:	e7f1      	b.n	800ab44 <__hexdig_fun+0xa>
 800ab60:	2000      	movs	r0, #0
 800ab62:	4770      	bx	lr

0800ab64 <__gethex>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	b08b      	sub	sp, #44	; 0x2c
 800ab6a:	9002      	str	r0, [sp, #8]
 800ab6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ab6e:	468a      	mov	sl, r1
 800ab70:	4690      	mov	r8, r2
 800ab72:	9306      	str	r3, [sp, #24]
 800ab74:	f000 fad1 	bl	800b11a <__localeconv_l>
 800ab78:	6803      	ldr	r3, [r0, #0]
 800ab7a:	f04f 0b00 	mov.w	fp, #0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	9303      	str	r3, [sp, #12]
 800ab82:	f7f5 fae5 	bl	8000150 <strlen>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	9001      	str	r0, [sp, #4]
 800ab8a:	4403      	add	r3, r0
 800ab8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	f8da 3000 	ldr.w	r3, [sl]
 800ab96:	3302      	adds	r3, #2
 800ab98:	461f      	mov	r7, r3
 800ab9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab9e:	2830      	cmp	r0, #48	; 0x30
 800aba0:	d06c      	beq.n	800ac7c <__gethex+0x118>
 800aba2:	f7ff ffca 	bl	800ab3a <__hexdig_fun>
 800aba6:	4604      	mov	r4, r0
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d16a      	bne.n	800ac82 <__gethex+0x11e>
 800abac:	9a01      	ldr	r2, [sp, #4]
 800abae:	9903      	ldr	r1, [sp, #12]
 800abb0:	4638      	mov	r0, r7
 800abb2:	f001 fa5f 	bl	800c074 <strncmp>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d166      	bne.n	800ac88 <__gethex+0x124>
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	5cf8      	ldrb	r0, [r7, r3]
 800abbe:	18fe      	adds	r6, r7, r3
 800abc0:	f7ff ffbb 	bl	800ab3a <__hexdig_fun>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d062      	beq.n	800ac8e <__gethex+0x12a>
 800abc8:	4633      	mov	r3, r6
 800abca:	7818      	ldrb	r0, [r3, #0]
 800abcc:	461f      	mov	r7, r3
 800abce:	2830      	cmp	r0, #48	; 0x30
 800abd0:	f103 0301 	add.w	r3, r3, #1
 800abd4:	d0f9      	beq.n	800abca <__gethex+0x66>
 800abd6:	f7ff ffb0 	bl	800ab3a <__hexdig_fun>
 800abda:	fab0 f580 	clz	r5, r0
 800abde:	4634      	mov	r4, r6
 800abe0:	f04f 0b01 	mov.w	fp, #1
 800abe4:	096d      	lsrs	r5, r5, #5
 800abe6:	463a      	mov	r2, r7
 800abe8:	4616      	mov	r6, r2
 800abea:	7830      	ldrb	r0, [r6, #0]
 800abec:	3201      	adds	r2, #1
 800abee:	f7ff ffa4 	bl	800ab3a <__hexdig_fun>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d1f8      	bne.n	800abe8 <__gethex+0x84>
 800abf6:	9a01      	ldr	r2, [sp, #4]
 800abf8:	9903      	ldr	r1, [sp, #12]
 800abfa:	4630      	mov	r0, r6
 800abfc:	f001 fa3a 	bl	800c074 <strncmp>
 800ac00:	b950      	cbnz	r0, 800ac18 <__gethex+0xb4>
 800ac02:	b954      	cbnz	r4, 800ac1a <__gethex+0xb6>
 800ac04:	9b01      	ldr	r3, [sp, #4]
 800ac06:	18f4      	adds	r4, r6, r3
 800ac08:	4622      	mov	r2, r4
 800ac0a:	4616      	mov	r6, r2
 800ac0c:	7830      	ldrb	r0, [r6, #0]
 800ac0e:	3201      	adds	r2, #1
 800ac10:	f7ff ff93 	bl	800ab3a <__hexdig_fun>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d1f8      	bne.n	800ac0a <__gethex+0xa6>
 800ac18:	b10c      	cbz	r4, 800ac1e <__gethex+0xba>
 800ac1a:	1ba4      	subs	r4, r4, r6
 800ac1c:	00a4      	lsls	r4, r4, #2
 800ac1e:	7833      	ldrb	r3, [r6, #0]
 800ac20:	2b50      	cmp	r3, #80	; 0x50
 800ac22:	d001      	beq.n	800ac28 <__gethex+0xc4>
 800ac24:	2b70      	cmp	r3, #112	; 0x70
 800ac26:	d140      	bne.n	800acaa <__gethex+0x146>
 800ac28:	7873      	ldrb	r3, [r6, #1]
 800ac2a:	2b2b      	cmp	r3, #43	; 0x2b
 800ac2c:	d031      	beq.n	800ac92 <__gethex+0x12e>
 800ac2e:	2b2d      	cmp	r3, #45	; 0x2d
 800ac30:	d033      	beq.n	800ac9a <__gethex+0x136>
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	1c71      	adds	r1, r6, #1
 800ac38:	7808      	ldrb	r0, [r1, #0]
 800ac3a:	f7ff ff7e 	bl	800ab3a <__hexdig_fun>
 800ac3e:	1e43      	subs	r3, r0, #1
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b18      	cmp	r3, #24
 800ac44:	d831      	bhi.n	800acaa <__gethex+0x146>
 800ac46:	f1a0 0210 	sub.w	r2, r0, #16
 800ac4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac4e:	f7ff ff74 	bl	800ab3a <__hexdig_fun>
 800ac52:	1e43      	subs	r3, r0, #1
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b18      	cmp	r3, #24
 800ac58:	d922      	bls.n	800aca0 <__gethex+0x13c>
 800ac5a:	f1b9 0f00 	cmp.w	r9, #0
 800ac5e:	d000      	beq.n	800ac62 <__gethex+0xfe>
 800ac60:	4252      	negs	r2, r2
 800ac62:	4414      	add	r4, r2
 800ac64:	f8ca 1000 	str.w	r1, [sl]
 800ac68:	b30d      	cbz	r5, 800acae <__gethex+0x14a>
 800ac6a:	f1bb 0f00 	cmp.w	fp, #0
 800ac6e:	bf0c      	ite	eq
 800ac70:	2706      	moveq	r7, #6
 800ac72:	2700      	movne	r7, #0
 800ac74:	4638      	mov	r0, r7
 800ac76:	b00b      	add	sp, #44	; 0x2c
 800ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7c:	f10b 0b01 	add.w	fp, fp, #1
 800ac80:	e78a      	b.n	800ab98 <__gethex+0x34>
 800ac82:	2500      	movs	r5, #0
 800ac84:	462c      	mov	r4, r5
 800ac86:	e7ae      	b.n	800abe6 <__gethex+0x82>
 800ac88:	463e      	mov	r6, r7
 800ac8a:	2501      	movs	r5, #1
 800ac8c:	e7c7      	b.n	800ac1e <__gethex+0xba>
 800ac8e:	4604      	mov	r4, r0
 800ac90:	e7fb      	b.n	800ac8a <__gethex+0x126>
 800ac92:	f04f 0900 	mov.w	r9, #0
 800ac96:	1cb1      	adds	r1, r6, #2
 800ac98:	e7ce      	b.n	800ac38 <__gethex+0xd4>
 800ac9a:	f04f 0901 	mov.w	r9, #1
 800ac9e:	e7fa      	b.n	800ac96 <__gethex+0x132>
 800aca0:	230a      	movs	r3, #10
 800aca2:	fb03 0202 	mla	r2, r3, r2, r0
 800aca6:	3a10      	subs	r2, #16
 800aca8:	e7cf      	b.n	800ac4a <__gethex+0xe6>
 800acaa:	4631      	mov	r1, r6
 800acac:	e7da      	b.n	800ac64 <__gethex+0x100>
 800acae:	4629      	mov	r1, r5
 800acb0:	1bf3      	subs	r3, r6, r7
 800acb2:	3b01      	subs	r3, #1
 800acb4:	2b07      	cmp	r3, #7
 800acb6:	dc49      	bgt.n	800ad4c <__gethex+0x1e8>
 800acb8:	9802      	ldr	r0, [sp, #8]
 800acba:	f000 fa4d 	bl	800b158 <_Balloc>
 800acbe:	f04f 0b00 	mov.w	fp, #0
 800acc2:	4605      	mov	r5, r0
 800acc4:	46da      	mov	sl, fp
 800acc6:	9b01      	ldr	r3, [sp, #4]
 800acc8:	f100 0914 	add.w	r9, r0, #20
 800accc:	f1c3 0301 	rsb	r3, r3, #1
 800acd0:	f8cd 9010 	str.w	r9, [sp, #16]
 800acd4:	9308      	str	r3, [sp, #32]
 800acd6:	42b7      	cmp	r7, r6
 800acd8:	d33b      	bcc.n	800ad52 <__gethex+0x1ee>
 800acda:	9804      	ldr	r0, [sp, #16]
 800acdc:	f840 ab04 	str.w	sl, [r0], #4
 800ace0:	eba0 0009 	sub.w	r0, r0, r9
 800ace4:	1080      	asrs	r0, r0, #2
 800ace6:	6128      	str	r0, [r5, #16]
 800ace8:	0147      	lsls	r7, r0, #5
 800acea:	4650      	mov	r0, sl
 800acec:	f000 faf8 	bl	800b2e0 <__hi0bits>
 800acf0:	f8d8 6000 	ldr.w	r6, [r8]
 800acf4:	1a3f      	subs	r7, r7, r0
 800acf6:	42b7      	cmp	r7, r6
 800acf8:	dd64      	ble.n	800adc4 <__gethex+0x260>
 800acfa:	1bbf      	subs	r7, r7, r6
 800acfc:	4639      	mov	r1, r7
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 fe1e 	bl	800b940 <__any_on>
 800ad04:	4682      	mov	sl, r0
 800ad06:	b178      	cbz	r0, 800ad28 <__gethex+0x1c4>
 800ad08:	f04f 0a01 	mov.w	sl, #1
 800ad0c:	1e7b      	subs	r3, r7, #1
 800ad0e:	1159      	asrs	r1, r3, #5
 800ad10:	f003 021f 	and.w	r2, r3, #31
 800ad14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad18:	fa0a f202 	lsl.w	r2, sl, r2
 800ad1c:	420a      	tst	r2, r1
 800ad1e:	d003      	beq.n	800ad28 <__gethex+0x1c4>
 800ad20:	4553      	cmp	r3, sl
 800ad22:	dc46      	bgt.n	800adb2 <__gethex+0x24e>
 800ad24:	f04f 0a02 	mov.w	sl, #2
 800ad28:	4639      	mov	r1, r7
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f7ff feca 	bl	800aac4 <rshift>
 800ad30:	443c      	add	r4, r7
 800ad32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	da52      	bge.n	800ade0 <__gethex+0x27c>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	9802      	ldr	r0, [sp, #8]
 800ad3e:	f000 fa3f 	bl	800b1c0 <_Bfree>
 800ad42:	2300      	movs	r3, #0
 800ad44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad46:	27a3      	movs	r7, #163	; 0xa3
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e793      	b.n	800ac74 <__gethex+0x110>
 800ad4c:	3101      	adds	r1, #1
 800ad4e:	105b      	asrs	r3, r3, #1
 800ad50:	e7b0      	b.n	800acb4 <__gethex+0x150>
 800ad52:	1e73      	subs	r3, r6, #1
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	9a07      	ldr	r2, [sp, #28]
 800ad58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d018      	beq.n	800ad92 <__gethex+0x22e>
 800ad60:	f1bb 0f20 	cmp.w	fp, #32
 800ad64:	d107      	bne.n	800ad76 <__gethex+0x212>
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	f8c3 a000 	str.w	sl, [r3]
 800ad6c:	f04f 0a00 	mov.w	sl, #0
 800ad70:	46d3      	mov	fp, sl
 800ad72:	3304      	adds	r3, #4
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad7a:	f7ff fede 	bl	800ab3a <__hexdig_fun>
 800ad7e:	f000 000f 	and.w	r0, r0, #15
 800ad82:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad86:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad8a:	f10b 0b04 	add.w	fp, fp, #4
 800ad8e:	9b05      	ldr	r3, [sp, #20]
 800ad90:	e00d      	b.n	800adae <__gethex+0x24a>
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	9a08      	ldr	r2, [sp, #32]
 800ad96:	4413      	add	r3, r2
 800ad98:	42bb      	cmp	r3, r7
 800ad9a:	d3e1      	bcc.n	800ad60 <__gethex+0x1fc>
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	9a01      	ldr	r2, [sp, #4]
 800ada0:	9903      	ldr	r1, [sp, #12]
 800ada2:	9309      	str	r3, [sp, #36]	; 0x24
 800ada4:	f001 f966 	bl	800c074 <strncmp>
 800ada8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adaa:	2800      	cmp	r0, #0
 800adac:	d1d8      	bne.n	800ad60 <__gethex+0x1fc>
 800adae:	461e      	mov	r6, r3
 800adb0:	e791      	b.n	800acd6 <__gethex+0x172>
 800adb2:	1eb9      	subs	r1, r7, #2
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 fdc3 	bl	800b940 <__any_on>
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0b2      	beq.n	800ad24 <__gethex+0x1c0>
 800adbe:	f04f 0a03 	mov.w	sl, #3
 800adc2:	e7b1      	b.n	800ad28 <__gethex+0x1c4>
 800adc4:	da09      	bge.n	800adda <__gethex+0x276>
 800adc6:	1bf7      	subs	r7, r6, r7
 800adc8:	4629      	mov	r1, r5
 800adca:	463a      	mov	r2, r7
 800adcc:	9802      	ldr	r0, [sp, #8]
 800adce:	f000 fbc1 	bl	800b554 <__lshift>
 800add2:	4605      	mov	r5, r0
 800add4:	1be4      	subs	r4, r4, r7
 800add6:	f100 0914 	add.w	r9, r0, #20
 800adda:	f04f 0a00 	mov.w	sl, #0
 800adde:	e7a8      	b.n	800ad32 <__gethex+0x1ce>
 800ade0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ade4:	42a0      	cmp	r0, r4
 800ade6:	dd6b      	ble.n	800aec0 <__gethex+0x35c>
 800ade8:	1b04      	subs	r4, r0, r4
 800adea:	42a6      	cmp	r6, r4
 800adec:	dc2e      	bgt.n	800ae4c <__gethex+0x2e8>
 800adee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d022      	beq.n	800ae3c <__gethex+0x2d8>
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d024      	beq.n	800ae44 <__gethex+0x2e0>
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d115      	bne.n	800ae2a <__gethex+0x2c6>
 800adfe:	42a6      	cmp	r6, r4
 800ae00:	d113      	bne.n	800ae2a <__gethex+0x2c6>
 800ae02:	2e01      	cmp	r6, #1
 800ae04:	dc0b      	bgt.n	800ae1e <__gethex+0x2ba>
 800ae06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae0a:	9a06      	ldr	r2, [sp, #24]
 800ae0c:	2762      	movs	r7, #98	; 0x62
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	2301      	movs	r3, #1
 800ae12:	612b      	str	r3, [r5, #16]
 800ae14:	f8c9 3000 	str.w	r3, [r9]
 800ae18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae1a:	601d      	str	r5, [r3, #0]
 800ae1c:	e72a      	b.n	800ac74 <__gethex+0x110>
 800ae1e:	1e71      	subs	r1, r6, #1
 800ae20:	4628      	mov	r0, r5
 800ae22:	f000 fd8d 	bl	800b940 <__any_on>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d1ed      	bne.n	800ae06 <__gethex+0x2a2>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	9802      	ldr	r0, [sp, #8]
 800ae2e:	f000 f9c7 	bl	800b1c0 <_Bfree>
 800ae32:	2300      	movs	r3, #0
 800ae34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae36:	2750      	movs	r7, #80	; 0x50
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	e71b      	b.n	800ac74 <__gethex+0x110>
 800ae3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0e1      	beq.n	800ae06 <__gethex+0x2a2>
 800ae42:	e7f2      	b.n	800ae2a <__gethex+0x2c6>
 800ae44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1dd      	bne.n	800ae06 <__gethex+0x2a2>
 800ae4a:	e7ee      	b.n	800ae2a <__gethex+0x2c6>
 800ae4c:	1e67      	subs	r7, r4, #1
 800ae4e:	f1ba 0f00 	cmp.w	sl, #0
 800ae52:	d132      	bne.n	800aeba <__gethex+0x356>
 800ae54:	b127      	cbz	r7, 800ae60 <__gethex+0x2fc>
 800ae56:	4639      	mov	r1, r7
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f000 fd71 	bl	800b940 <__any_on>
 800ae5e:	4682      	mov	sl, r0
 800ae60:	2301      	movs	r3, #1
 800ae62:	117a      	asrs	r2, r7, #5
 800ae64:	f007 071f 	and.w	r7, r7, #31
 800ae68:	fa03 f707 	lsl.w	r7, r3, r7
 800ae6c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ae70:	4621      	mov	r1, r4
 800ae72:	421f      	tst	r7, r3
 800ae74:	f04f 0702 	mov.w	r7, #2
 800ae78:	4628      	mov	r0, r5
 800ae7a:	bf18      	it	ne
 800ae7c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae80:	1b36      	subs	r6, r6, r4
 800ae82:	f7ff fe1f 	bl	800aac4 <rshift>
 800ae86:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ae8a:	f1ba 0f00 	cmp.w	sl, #0
 800ae8e:	d048      	beq.n	800af22 <__gethex+0x3be>
 800ae90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d015      	beq.n	800aec4 <__gethex+0x360>
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d017      	beq.n	800aecc <__gethex+0x368>
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d109      	bne.n	800aeb4 <__gethex+0x350>
 800aea0:	f01a 0f02 	tst.w	sl, #2
 800aea4:	d006      	beq.n	800aeb4 <__gethex+0x350>
 800aea6:	f8d9 3000 	ldr.w	r3, [r9]
 800aeaa:	ea4a 0a03 	orr.w	sl, sl, r3
 800aeae:	f01a 0f01 	tst.w	sl, #1
 800aeb2:	d10e      	bne.n	800aed2 <__gethex+0x36e>
 800aeb4:	f047 0710 	orr.w	r7, r7, #16
 800aeb8:	e033      	b.n	800af22 <__gethex+0x3be>
 800aeba:	f04f 0a01 	mov.w	sl, #1
 800aebe:	e7cf      	b.n	800ae60 <__gethex+0x2fc>
 800aec0:	2701      	movs	r7, #1
 800aec2:	e7e2      	b.n	800ae8a <__gethex+0x326>
 800aec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec6:	f1c3 0301 	rsb	r3, r3, #1
 800aeca:	9315      	str	r3, [sp, #84]	; 0x54
 800aecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0f0      	beq.n	800aeb4 <__gethex+0x350>
 800aed2:	f04f 0c00 	mov.w	ip, #0
 800aed6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800aeda:	f105 0314 	add.w	r3, r5, #20
 800aede:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800aee2:	eb03 010a 	add.w	r1, r3, sl
 800aee6:	4618      	mov	r0, r3
 800aee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeec:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800aef0:	d01c      	beq.n	800af2c <__gethex+0x3c8>
 800aef2:	3201      	adds	r2, #1
 800aef4:	6002      	str	r2, [r0, #0]
 800aef6:	2f02      	cmp	r7, #2
 800aef8:	f105 0314 	add.w	r3, r5, #20
 800aefc:	d138      	bne.n	800af70 <__gethex+0x40c>
 800aefe:	f8d8 2000 	ldr.w	r2, [r8]
 800af02:	3a01      	subs	r2, #1
 800af04:	42b2      	cmp	r2, r6
 800af06:	d10a      	bne.n	800af1e <__gethex+0x3ba>
 800af08:	2201      	movs	r2, #1
 800af0a:	1171      	asrs	r1, r6, #5
 800af0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af10:	f006 061f 	and.w	r6, r6, #31
 800af14:	fa02 f606 	lsl.w	r6, r2, r6
 800af18:	421e      	tst	r6, r3
 800af1a:	bf18      	it	ne
 800af1c:	4617      	movne	r7, r2
 800af1e:	f047 0720 	orr.w	r7, r7, #32
 800af22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af24:	601d      	str	r5, [r3, #0]
 800af26:	9b06      	ldr	r3, [sp, #24]
 800af28:	601c      	str	r4, [r3, #0]
 800af2a:	e6a3      	b.n	800ac74 <__gethex+0x110>
 800af2c:	4299      	cmp	r1, r3
 800af2e:	f843 cc04 	str.w	ip, [r3, #-4]
 800af32:	d8d8      	bhi.n	800aee6 <__gethex+0x382>
 800af34:	68ab      	ldr	r3, [r5, #8]
 800af36:	4599      	cmp	r9, r3
 800af38:	db12      	blt.n	800af60 <__gethex+0x3fc>
 800af3a:	6869      	ldr	r1, [r5, #4]
 800af3c:	9802      	ldr	r0, [sp, #8]
 800af3e:	3101      	adds	r1, #1
 800af40:	f000 f90a 	bl	800b158 <_Balloc>
 800af44:	4683      	mov	fp, r0
 800af46:	692a      	ldr	r2, [r5, #16]
 800af48:	f105 010c 	add.w	r1, r5, #12
 800af4c:	3202      	adds	r2, #2
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	300c      	adds	r0, #12
 800af52:	f000 f8f6 	bl	800b142 <memcpy>
 800af56:	4629      	mov	r1, r5
 800af58:	9802      	ldr	r0, [sp, #8]
 800af5a:	f000 f931 	bl	800b1c0 <_Bfree>
 800af5e:	465d      	mov	r5, fp
 800af60:	692b      	ldr	r3, [r5, #16]
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	612a      	str	r2, [r5, #16]
 800af66:	2201      	movs	r2, #1
 800af68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800af6c:	615a      	str	r2, [r3, #20]
 800af6e:	e7c2      	b.n	800aef6 <__gethex+0x392>
 800af70:	692a      	ldr	r2, [r5, #16]
 800af72:	454a      	cmp	r2, r9
 800af74:	dd0b      	ble.n	800af8e <__gethex+0x42a>
 800af76:	2101      	movs	r1, #1
 800af78:	4628      	mov	r0, r5
 800af7a:	f7ff fda3 	bl	800aac4 <rshift>
 800af7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af82:	3401      	adds	r4, #1
 800af84:	42a3      	cmp	r3, r4
 800af86:	f6ff aed8 	blt.w	800ad3a <__gethex+0x1d6>
 800af8a:	2701      	movs	r7, #1
 800af8c:	e7c7      	b.n	800af1e <__gethex+0x3ba>
 800af8e:	f016 061f 	ands.w	r6, r6, #31
 800af92:	d0fa      	beq.n	800af8a <__gethex+0x426>
 800af94:	449a      	add	sl, r3
 800af96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800af9a:	f000 f9a1 	bl	800b2e0 <__hi0bits>
 800af9e:	f1c6 0620 	rsb	r6, r6, #32
 800afa2:	42b0      	cmp	r0, r6
 800afa4:	dbe7      	blt.n	800af76 <__gethex+0x412>
 800afa6:	e7f0      	b.n	800af8a <__gethex+0x426>

0800afa8 <L_shift>:
 800afa8:	f1c2 0208 	rsb	r2, r2, #8
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	b570      	push	{r4, r5, r6, lr}
 800afb0:	f1c2 0620 	rsb	r6, r2, #32
 800afb4:	6843      	ldr	r3, [r0, #4]
 800afb6:	6804      	ldr	r4, [r0, #0]
 800afb8:	fa03 f506 	lsl.w	r5, r3, r6
 800afbc:	432c      	orrs	r4, r5
 800afbe:	40d3      	lsrs	r3, r2
 800afc0:	6004      	str	r4, [r0, #0]
 800afc2:	f840 3f04 	str.w	r3, [r0, #4]!
 800afc6:	4288      	cmp	r0, r1
 800afc8:	d3f4      	bcc.n	800afb4 <L_shift+0xc>
 800afca:	bd70      	pop	{r4, r5, r6, pc}

0800afcc <__match>:
 800afcc:	b530      	push	{r4, r5, lr}
 800afce:	6803      	ldr	r3, [r0, #0]
 800afd0:	3301      	adds	r3, #1
 800afd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afd6:	b914      	cbnz	r4, 800afde <__match+0x12>
 800afd8:	6003      	str	r3, [r0, #0]
 800afda:	2001      	movs	r0, #1
 800afdc:	bd30      	pop	{r4, r5, pc}
 800afde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afe2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800afe6:	2d19      	cmp	r5, #25
 800afe8:	bf98      	it	ls
 800afea:	3220      	addls	r2, #32
 800afec:	42a2      	cmp	r2, r4
 800afee:	d0f0      	beq.n	800afd2 <__match+0x6>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7f3      	b.n	800afdc <__match+0x10>

0800aff4 <__hexnan>:
 800aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	2500      	movs	r5, #0
 800affa:	680b      	ldr	r3, [r1, #0]
 800affc:	4682      	mov	sl, r0
 800affe:	115f      	asrs	r7, r3, #5
 800b000:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b004:	f013 031f 	ands.w	r3, r3, #31
 800b008:	bf18      	it	ne
 800b00a:	3704      	addne	r7, #4
 800b00c:	1f3e      	subs	r6, r7, #4
 800b00e:	4690      	mov	r8, r2
 800b010:	46b1      	mov	r9, r6
 800b012:	4634      	mov	r4, r6
 800b014:	46ab      	mov	fp, r5
 800b016:	b087      	sub	sp, #28
 800b018:	6801      	ldr	r1, [r0, #0]
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	f847 5c04 	str.w	r5, [r7, #-4]
 800b020:	9502      	str	r5, [sp, #8]
 800b022:	784a      	ldrb	r2, [r1, #1]
 800b024:	1c4b      	adds	r3, r1, #1
 800b026:	9303      	str	r3, [sp, #12]
 800b028:	b342      	cbz	r2, 800b07c <__hexnan+0x88>
 800b02a:	4610      	mov	r0, r2
 800b02c:	9105      	str	r1, [sp, #20]
 800b02e:	9204      	str	r2, [sp, #16]
 800b030:	f7ff fd83 	bl	800ab3a <__hexdig_fun>
 800b034:	2800      	cmp	r0, #0
 800b036:	d143      	bne.n	800b0c0 <__hexnan+0xcc>
 800b038:	9a04      	ldr	r2, [sp, #16]
 800b03a:	9905      	ldr	r1, [sp, #20]
 800b03c:	2a20      	cmp	r2, #32
 800b03e:	d818      	bhi.n	800b072 <__hexnan+0x7e>
 800b040:	9b02      	ldr	r3, [sp, #8]
 800b042:	459b      	cmp	fp, r3
 800b044:	dd13      	ble.n	800b06e <__hexnan+0x7a>
 800b046:	454c      	cmp	r4, r9
 800b048:	d206      	bcs.n	800b058 <__hexnan+0x64>
 800b04a:	2d07      	cmp	r5, #7
 800b04c:	dc04      	bgt.n	800b058 <__hexnan+0x64>
 800b04e:	462a      	mov	r2, r5
 800b050:	4649      	mov	r1, r9
 800b052:	4620      	mov	r0, r4
 800b054:	f7ff ffa8 	bl	800afa8 <L_shift>
 800b058:	4544      	cmp	r4, r8
 800b05a:	d944      	bls.n	800b0e6 <__hexnan+0xf2>
 800b05c:	2300      	movs	r3, #0
 800b05e:	f1a4 0904 	sub.w	r9, r4, #4
 800b062:	f844 3c04 	str.w	r3, [r4, #-4]
 800b066:	461d      	mov	r5, r3
 800b068:	464c      	mov	r4, r9
 800b06a:	f8cd b008 	str.w	fp, [sp, #8]
 800b06e:	9903      	ldr	r1, [sp, #12]
 800b070:	e7d7      	b.n	800b022 <__hexnan+0x2e>
 800b072:	2a29      	cmp	r2, #41	; 0x29
 800b074:	d14a      	bne.n	800b10c <__hexnan+0x118>
 800b076:	3102      	adds	r1, #2
 800b078:	f8ca 1000 	str.w	r1, [sl]
 800b07c:	f1bb 0f00 	cmp.w	fp, #0
 800b080:	d044      	beq.n	800b10c <__hexnan+0x118>
 800b082:	454c      	cmp	r4, r9
 800b084:	d206      	bcs.n	800b094 <__hexnan+0xa0>
 800b086:	2d07      	cmp	r5, #7
 800b088:	dc04      	bgt.n	800b094 <__hexnan+0xa0>
 800b08a:	462a      	mov	r2, r5
 800b08c:	4649      	mov	r1, r9
 800b08e:	4620      	mov	r0, r4
 800b090:	f7ff ff8a 	bl	800afa8 <L_shift>
 800b094:	4544      	cmp	r4, r8
 800b096:	d928      	bls.n	800b0ea <__hexnan+0xf6>
 800b098:	4643      	mov	r3, r8
 800b09a:	f854 2b04 	ldr.w	r2, [r4], #4
 800b09e:	42a6      	cmp	r6, r4
 800b0a0:	f843 2b04 	str.w	r2, [r3], #4
 800b0a4:	d2f9      	bcs.n	800b09a <__hexnan+0xa6>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f843 2b04 	str.w	r2, [r3], #4
 800b0ac:	429e      	cmp	r6, r3
 800b0ae:	d2fb      	bcs.n	800b0a8 <__hexnan+0xb4>
 800b0b0:	6833      	ldr	r3, [r6, #0]
 800b0b2:	b91b      	cbnz	r3, 800b0bc <__hexnan+0xc8>
 800b0b4:	4546      	cmp	r6, r8
 800b0b6:	d127      	bne.n	800b108 <__hexnan+0x114>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	6033      	str	r3, [r6, #0]
 800b0bc:	2005      	movs	r0, #5
 800b0be:	e026      	b.n	800b10e <__hexnan+0x11a>
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	2d08      	cmp	r5, #8
 800b0c4:	f10b 0b01 	add.w	fp, fp, #1
 800b0c8:	dd06      	ble.n	800b0d8 <__hexnan+0xe4>
 800b0ca:	4544      	cmp	r4, r8
 800b0cc:	d9cf      	bls.n	800b06e <__hexnan+0x7a>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2501      	movs	r5, #1
 800b0d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0d6:	3c04      	subs	r4, #4
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	f000 000f 	and.w	r0, r0, #15
 800b0de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b0e2:	6020      	str	r0, [r4, #0]
 800b0e4:	e7c3      	b.n	800b06e <__hexnan+0x7a>
 800b0e6:	2508      	movs	r5, #8
 800b0e8:	e7c1      	b.n	800b06e <__hexnan+0x7a>
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0df      	beq.n	800b0b0 <__hexnan+0xbc>
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0f4:	f1c3 0320 	rsb	r3, r3, #32
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b100:	401a      	ands	r2, r3
 800b102:	f847 2c04 	str.w	r2, [r7, #-4]
 800b106:	e7d3      	b.n	800b0b0 <__hexnan+0xbc>
 800b108:	3e04      	subs	r6, #4
 800b10a:	e7d1      	b.n	800b0b0 <__hexnan+0xbc>
 800b10c:	2004      	movs	r0, #4
 800b10e:	b007      	add	sp, #28
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b114 <__locale_ctype_ptr_l>:
 800b114:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b118:	4770      	bx	lr

0800b11a <__localeconv_l>:
 800b11a:	30f0      	adds	r0, #240	; 0xf0
 800b11c:	4770      	bx	lr

0800b11e <__ascii_mbtowc>:
 800b11e:	b082      	sub	sp, #8
 800b120:	b901      	cbnz	r1, 800b124 <__ascii_mbtowc+0x6>
 800b122:	a901      	add	r1, sp, #4
 800b124:	b142      	cbz	r2, 800b138 <__ascii_mbtowc+0x1a>
 800b126:	b14b      	cbz	r3, 800b13c <__ascii_mbtowc+0x1e>
 800b128:	7813      	ldrb	r3, [r2, #0]
 800b12a:	600b      	str	r3, [r1, #0]
 800b12c:	7812      	ldrb	r2, [r2, #0]
 800b12e:	1c10      	adds	r0, r2, #0
 800b130:	bf18      	it	ne
 800b132:	2001      	movne	r0, #1
 800b134:	b002      	add	sp, #8
 800b136:	4770      	bx	lr
 800b138:	4610      	mov	r0, r2
 800b13a:	e7fb      	b.n	800b134 <__ascii_mbtowc+0x16>
 800b13c:	f06f 0001 	mvn.w	r0, #1
 800b140:	e7f8      	b.n	800b134 <__ascii_mbtowc+0x16>

0800b142 <memcpy>:
 800b142:	b510      	push	{r4, lr}
 800b144:	1e43      	subs	r3, r0, #1
 800b146:	440a      	add	r2, r1
 800b148:	4291      	cmp	r1, r2
 800b14a:	d100      	bne.n	800b14e <memcpy+0xc>
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b156:	e7f7      	b.n	800b148 <memcpy+0x6>

0800b158 <_Balloc>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b15c:	4604      	mov	r4, r0
 800b15e:	460e      	mov	r6, r1
 800b160:	b93d      	cbnz	r5, 800b172 <_Balloc+0x1a>
 800b162:	2010      	movs	r0, #16
 800b164:	f001 fde8 	bl	800cd38 <malloc>
 800b168:	6260      	str	r0, [r4, #36]	; 0x24
 800b16a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b16e:	6005      	str	r5, [r0, #0]
 800b170:	60c5      	str	r5, [r0, #12]
 800b172:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b174:	68eb      	ldr	r3, [r5, #12]
 800b176:	b183      	cbz	r3, 800b19a <_Balloc+0x42>
 800b178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b180:	b9b8      	cbnz	r0, 800b1b2 <_Balloc+0x5a>
 800b182:	2101      	movs	r1, #1
 800b184:	fa01 f506 	lsl.w	r5, r1, r6
 800b188:	1d6a      	adds	r2, r5, #5
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 fbf8 	bl	800b982 <_calloc_r>
 800b192:	b160      	cbz	r0, 800b1ae <_Balloc+0x56>
 800b194:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b198:	e00e      	b.n	800b1b8 <_Balloc+0x60>
 800b19a:	2221      	movs	r2, #33	; 0x21
 800b19c:	2104      	movs	r1, #4
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 fbef 	bl	800b982 <_calloc_r>
 800b1a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a6:	60e8      	str	r0, [r5, #12]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e4      	bne.n	800b178 <_Balloc+0x20>
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	6802      	ldr	r2, [r0, #0]
 800b1b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1be:	e7f7      	b.n	800b1b0 <_Balloc+0x58>

0800b1c0 <_Bfree>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	b93c      	cbnz	r4, 800b1da <_Bfree+0x1a>
 800b1ca:	2010      	movs	r0, #16
 800b1cc:	f001 fdb4 	bl	800cd38 <malloc>
 800b1d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b1d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1d6:	6004      	str	r4, [r0, #0]
 800b1d8:	60c4      	str	r4, [r0, #12]
 800b1da:	b13d      	cbz	r5, 800b1ec <_Bfree+0x2c>
 800b1dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b1de:	686a      	ldr	r2, [r5, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1e6:	6029      	str	r1, [r5, #0]
 800b1e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b1ec:	bd70      	pop	{r4, r5, r6, pc}

0800b1ee <__multadd>:
 800b1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f2:	461f      	mov	r7, r3
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	690d      	ldr	r5, [r1, #16]
 800b1fc:	f101 0c14 	add.w	ip, r1, #20
 800b200:	f8dc 0000 	ldr.w	r0, [ip]
 800b204:	3301      	adds	r3, #1
 800b206:	b281      	uxth	r1, r0
 800b208:	fb02 7101 	mla	r1, r2, r1, r7
 800b20c:	0c00      	lsrs	r0, r0, #16
 800b20e:	0c0f      	lsrs	r7, r1, #16
 800b210:	fb02 7000 	mla	r0, r2, r0, r7
 800b214:	b289      	uxth	r1, r1
 800b216:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b21a:	429d      	cmp	r5, r3
 800b21c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b220:	f84c 1b04 	str.w	r1, [ip], #4
 800b224:	dcec      	bgt.n	800b200 <__multadd+0x12>
 800b226:	b1d7      	cbz	r7, 800b25e <__multadd+0x70>
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	42ab      	cmp	r3, r5
 800b22c:	dc12      	bgt.n	800b254 <__multadd+0x66>
 800b22e:	6861      	ldr	r1, [r4, #4]
 800b230:	4630      	mov	r0, r6
 800b232:	3101      	adds	r1, #1
 800b234:	f7ff ff90 	bl	800b158 <_Balloc>
 800b238:	4680      	mov	r8, r0
 800b23a:	6922      	ldr	r2, [r4, #16]
 800b23c:	f104 010c 	add.w	r1, r4, #12
 800b240:	3202      	adds	r2, #2
 800b242:	0092      	lsls	r2, r2, #2
 800b244:	300c      	adds	r0, #12
 800b246:	f7ff ff7c 	bl	800b142 <memcpy>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7ff ffb7 	bl	800b1c0 <_Bfree>
 800b252:	4644      	mov	r4, r8
 800b254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b258:	3501      	adds	r5, #1
 800b25a:	615f      	str	r7, [r3, #20]
 800b25c:	6125      	str	r5, [r4, #16]
 800b25e:	4620      	mov	r0, r4
 800b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b264 <__s2b>:
 800b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b268:	4615      	mov	r5, r2
 800b26a:	2209      	movs	r2, #9
 800b26c:	461f      	mov	r7, r3
 800b26e:	3308      	adds	r3, #8
 800b270:	460c      	mov	r4, r1
 800b272:	fb93 f3f2 	sdiv	r3, r3, r2
 800b276:	4606      	mov	r6, r0
 800b278:	2201      	movs	r2, #1
 800b27a:	2100      	movs	r1, #0
 800b27c:	429a      	cmp	r2, r3
 800b27e:	db20      	blt.n	800b2c2 <__s2b+0x5e>
 800b280:	4630      	mov	r0, r6
 800b282:	f7ff ff69 	bl	800b158 <_Balloc>
 800b286:	9b08      	ldr	r3, [sp, #32]
 800b288:	2d09      	cmp	r5, #9
 800b28a:	6143      	str	r3, [r0, #20]
 800b28c:	f04f 0301 	mov.w	r3, #1
 800b290:	6103      	str	r3, [r0, #16]
 800b292:	dd19      	ble.n	800b2c8 <__s2b+0x64>
 800b294:	f104 0809 	add.w	r8, r4, #9
 800b298:	46c1      	mov	r9, r8
 800b29a:	442c      	add	r4, r5
 800b29c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	3b30      	subs	r3, #48	; 0x30
 800b2a4:	220a      	movs	r2, #10
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7ff ffa1 	bl	800b1ee <__multadd>
 800b2ac:	45a1      	cmp	r9, r4
 800b2ae:	d1f5      	bne.n	800b29c <__s2b+0x38>
 800b2b0:	eb08 0405 	add.w	r4, r8, r5
 800b2b4:	3c08      	subs	r4, #8
 800b2b6:	1b2d      	subs	r5, r5, r4
 800b2b8:	1963      	adds	r3, r4, r5
 800b2ba:	42bb      	cmp	r3, r7
 800b2bc:	db07      	blt.n	800b2ce <__s2b+0x6a>
 800b2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c2:	0052      	lsls	r2, r2, #1
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	e7d9      	b.n	800b27c <__s2b+0x18>
 800b2c8:	340a      	adds	r4, #10
 800b2ca:	2509      	movs	r5, #9
 800b2cc:	e7f3      	b.n	800b2b6 <__s2b+0x52>
 800b2ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2d2:	4601      	mov	r1, r0
 800b2d4:	3b30      	subs	r3, #48	; 0x30
 800b2d6:	220a      	movs	r2, #10
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f7ff ff88 	bl	800b1ee <__multadd>
 800b2de:	e7eb      	b.n	800b2b8 <__s2b+0x54>

0800b2e0 <__hi0bits>:
 800b2e0:	0c02      	lsrs	r2, r0, #16
 800b2e2:	0412      	lsls	r2, r2, #16
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	b9b2      	cbnz	r2, 800b316 <__hi0bits+0x36>
 800b2e8:	0403      	lsls	r3, r0, #16
 800b2ea:	2010      	movs	r0, #16
 800b2ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b2f0:	bf04      	itt	eq
 800b2f2:	021b      	lsleq	r3, r3, #8
 800b2f4:	3008      	addeq	r0, #8
 800b2f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b2fa:	bf04      	itt	eq
 800b2fc:	011b      	lsleq	r3, r3, #4
 800b2fe:	3004      	addeq	r0, #4
 800b300:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b304:	bf04      	itt	eq
 800b306:	009b      	lsleq	r3, r3, #2
 800b308:	3002      	addeq	r0, #2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	db06      	blt.n	800b31c <__hi0bits+0x3c>
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	d503      	bpl.n	800b31a <__hi0bits+0x3a>
 800b312:	3001      	adds	r0, #1
 800b314:	4770      	bx	lr
 800b316:	2000      	movs	r0, #0
 800b318:	e7e8      	b.n	800b2ec <__hi0bits+0xc>
 800b31a:	2020      	movs	r0, #32
 800b31c:	4770      	bx	lr

0800b31e <__lo0bits>:
 800b31e:	6803      	ldr	r3, [r0, #0]
 800b320:	4601      	mov	r1, r0
 800b322:	f013 0207 	ands.w	r2, r3, #7
 800b326:	d00b      	beq.n	800b340 <__lo0bits+0x22>
 800b328:	07da      	lsls	r2, r3, #31
 800b32a:	d423      	bmi.n	800b374 <__lo0bits+0x56>
 800b32c:	0798      	lsls	r0, r3, #30
 800b32e:	bf49      	itett	mi
 800b330:	085b      	lsrmi	r3, r3, #1
 800b332:	089b      	lsrpl	r3, r3, #2
 800b334:	2001      	movmi	r0, #1
 800b336:	600b      	strmi	r3, [r1, #0]
 800b338:	bf5c      	itt	pl
 800b33a:	600b      	strpl	r3, [r1, #0]
 800b33c:	2002      	movpl	r0, #2
 800b33e:	4770      	bx	lr
 800b340:	b298      	uxth	r0, r3
 800b342:	b9a8      	cbnz	r0, 800b370 <__lo0bits+0x52>
 800b344:	2010      	movs	r0, #16
 800b346:	0c1b      	lsrs	r3, r3, #16
 800b348:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b34c:	bf04      	itt	eq
 800b34e:	0a1b      	lsreq	r3, r3, #8
 800b350:	3008      	addeq	r0, #8
 800b352:	071a      	lsls	r2, r3, #28
 800b354:	bf04      	itt	eq
 800b356:	091b      	lsreq	r3, r3, #4
 800b358:	3004      	addeq	r0, #4
 800b35a:	079a      	lsls	r2, r3, #30
 800b35c:	bf04      	itt	eq
 800b35e:	089b      	lsreq	r3, r3, #2
 800b360:	3002      	addeq	r0, #2
 800b362:	07da      	lsls	r2, r3, #31
 800b364:	d402      	bmi.n	800b36c <__lo0bits+0x4e>
 800b366:	085b      	lsrs	r3, r3, #1
 800b368:	d006      	beq.n	800b378 <__lo0bits+0x5a>
 800b36a:	3001      	adds	r0, #1
 800b36c:	600b      	str	r3, [r1, #0]
 800b36e:	4770      	bx	lr
 800b370:	4610      	mov	r0, r2
 800b372:	e7e9      	b.n	800b348 <__lo0bits+0x2a>
 800b374:	2000      	movs	r0, #0
 800b376:	4770      	bx	lr
 800b378:	2020      	movs	r0, #32
 800b37a:	4770      	bx	lr

0800b37c <__i2b>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	460c      	mov	r4, r1
 800b380:	2101      	movs	r1, #1
 800b382:	f7ff fee9 	bl	800b158 <_Balloc>
 800b386:	2201      	movs	r2, #1
 800b388:	6144      	str	r4, [r0, #20]
 800b38a:	6102      	str	r2, [r0, #16]
 800b38c:	bd10      	pop	{r4, pc}

0800b38e <__multiply>:
 800b38e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b392:	4614      	mov	r4, r2
 800b394:	690a      	ldr	r2, [r1, #16]
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	4688      	mov	r8, r1
 800b39a:	429a      	cmp	r2, r3
 800b39c:	bfbe      	ittt	lt
 800b39e:	460b      	movlt	r3, r1
 800b3a0:	46a0      	movlt	r8, r4
 800b3a2:	461c      	movlt	r4, r3
 800b3a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b3ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3b4:	eb07 0609 	add.w	r6, r7, r9
 800b3b8:	42b3      	cmp	r3, r6
 800b3ba:	bfb8      	it	lt
 800b3bc:	3101      	addlt	r1, #1
 800b3be:	f7ff fecb 	bl	800b158 <_Balloc>
 800b3c2:	f100 0514 	add.w	r5, r0, #20
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b3ce:	4573      	cmp	r3, lr
 800b3d0:	d316      	bcc.n	800b400 <__multiply+0x72>
 800b3d2:	f104 0214 	add.w	r2, r4, #20
 800b3d6:	f108 0114 	add.w	r1, r8, #20
 800b3da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b3de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	9b00      	ldr	r3, [sp, #0]
 800b3e6:	9201      	str	r2, [sp, #4]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d80c      	bhi.n	800b406 <__multiply+0x78>
 800b3ec:	2e00      	cmp	r6, #0
 800b3ee:	dd03      	ble.n	800b3f8 <__multiply+0x6a>
 800b3f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d05d      	beq.n	800b4b4 <__multiply+0x126>
 800b3f8:	6106      	str	r6, [r0, #16]
 800b3fa:	b003      	add	sp, #12
 800b3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b400:	f843 2b04 	str.w	r2, [r3], #4
 800b404:	e7e3      	b.n	800b3ce <__multiply+0x40>
 800b406:	f8b2 b000 	ldrh.w	fp, [r2]
 800b40a:	f1bb 0f00 	cmp.w	fp, #0
 800b40e:	d023      	beq.n	800b458 <__multiply+0xca>
 800b410:	4689      	mov	r9, r1
 800b412:	46ac      	mov	ip, r5
 800b414:	f04f 0800 	mov.w	r8, #0
 800b418:	f859 4b04 	ldr.w	r4, [r9], #4
 800b41c:	f8dc a000 	ldr.w	sl, [ip]
 800b420:	b2a3      	uxth	r3, r4
 800b422:	fa1f fa8a 	uxth.w	sl, sl
 800b426:	fb0b a303 	mla	r3, fp, r3, sl
 800b42a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b42e:	f8dc 4000 	ldr.w	r4, [ip]
 800b432:	4443      	add	r3, r8
 800b434:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b438:	fb0b 840a 	mla	r4, fp, sl, r8
 800b43c:	46e2      	mov	sl, ip
 800b43e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b442:	b29b      	uxth	r3, r3
 800b444:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b448:	454f      	cmp	r7, r9
 800b44a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b44e:	f84a 3b04 	str.w	r3, [sl], #4
 800b452:	d82b      	bhi.n	800b4ac <__multiply+0x11e>
 800b454:	f8cc 8004 	str.w	r8, [ip, #4]
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	3204      	adds	r2, #4
 800b45c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b460:	f1ba 0f00 	cmp.w	sl, #0
 800b464:	d020      	beq.n	800b4a8 <__multiply+0x11a>
 800b466:	4689      	mov	r9, r1
 800b468:	46a8      	mov	r8, r5
 800b46a:	f04f 0b00 	mov.w	fp, #0
 800b46e:	682b      	ldr	r3, [r5, #0]
 800b470:	f8b9 c000 	ldrh.w	ip, [r9]
 800b474:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b47e:	46c4      	mov	ip, r8
 800b480:	445c      	add	r4, fp
 800b482:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b486:	f84c 3b04 	str.w	r3, [ip], #4
 800b48a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b48e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b492:	0c1b      	lsrs	r3, r3, #16
 800b494:	fb0a b303 	mla	r3, sl, r3, fp
 800b498:	454f      	cmp	r7, r9
 800b49a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b49e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b4a2:	d805      	bhi.n	800b4b0 <__multiply+0x122>
 800b4a4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b4a8:	3504      	adds	r5, #4
 800b4aa:	e79b      	b.n	800b3e4 <__multiply+0x56>
 800b4ac:	46d4      	mov	ip, sl
 800b4ae:	e7b3      	b.n	800b418 <__multiply+0x8a>
 800b4b0:	46e0      	mov	r8, ip
 800b4b2:	e7dd      	b.n	800b470 <__multiply+0xe2>
 800b4b4:	3e01      	subs	r6, #1
 800b4b6:	e799      	b.n	800b3ec <__multiply+0x5e>

0800b4b8 <__pow5mult>:
 800b4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	4615      	mov	r5, r2
 800b4be:	f012 0203 	ands.w	r2, r2, #3
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	d007      	beq.n	800b4d8 <__pow5mult+0x20>
 800b4c8:	4c21      	ldr	r4, [pc, #132]	; (800b550 <__pow5mult+0x98>)
 800b4ca:	3a01      	subs	r2, #1
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4d2:	f7ff fe8c 	bl	800b1ee <__multadd>
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	10ad      	asrs	r5, r5, #2
 800b4da:	d035      	beq.n	800b548 <__pow5mult+0x90>
 800b4dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4de:	b93c      	cbnz	r4, 800b4f0 <__pow5mult+0x38>
 800b4e0:	2010      	movs	r0, #16
 800b4e2:	f001 fc29 	bl	800cd38 <malloc>
 800b4e6:	6270      	str	r0, [r6, #36]	; 0x24
 800b4e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4ec:	6004      	str	r4, [r0, #0]
 800b4ee:	60c4      	str	r4, [r0, #12]
 800b4f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4f8:	b94c      	cbnz	r4, 800b50e <__pow5mult+0x56>
 800b4fa:	f240 2171 	movw	r1, #625	; 0x271
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7ff ff3c 	bl	800b37c <__i2b>
 800b504:	2300      	movs	r3, #0
 800b506:	4604      	mov	r4, r0
 800b508:	f8c8 0008 	str.w	r0, [r8, #8]
 800b50c:	6003      	str	r3, [r0, #0]
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	07eb      	lsls	r3, r5, #31
 800b514:	d50a      	bpl.n	800b52c <__pow5mult+0x74>
 800b516:	4639      	mov	r1, r7
 800b518:	4622      	mov	r2, r4
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7ff ff37 	bl	800b38e <__multiply>
 800b520:	4681      	mov	r9, r0
 800b522:	4639      	mov	r1, r7
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff fe4b 	bl	800b1c0 <_Bfree>
 800b52a:	464f      	mov	r7, r9
 800b52c:	106d      	asrs	r5, r5, #1
 800b52e:	d00b      	beq.n	800b548 <__pow5mult+0x90>
 800b530:	6820      	ldr	r0, [r4, #0]
 800b532:	b938      	cbnz	r0, 800b544 <__pow5mult+0x8c>
 800b534:	4622      	mov	r2, r4
 800b536:	4621      	mov	r1, r4
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff ff28 	bl	800b38e <__multiply>
 800b53e:	6020      	str	r0, [r4, #0]
 800b540:	f8c0 8000 	str.w	r8, [r0]
 800b544:	4604      	mov	r4, r0
 800b546:	e7e4      	b.n	800b512 <__pow5mult+0x5a>
 800b548:	4638      	mov	r0, r7
 800b54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b54e:	bf00      	nop
 800b550:	0800dad0 	.word	0x0800dad0

0800b554 <__lshift>:
 800b554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b558:	460c      	mov	r4, r1
 800b55a:	4607      	mov	r7, r0
 800b55c:	4616      	mov	r6, r2
 800b55e:	6923      	ldr	r3, [r4, #16]
 800b560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b564:	eb0a 0903 	add.w	r9, sl, r3
 800b568:	6849      	ldr	r1, [r1, #4]
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	f109 0501 	add.w	r5, r9, #1
 800b570:	42ab      	cmp	r3, r5
 800b572:	db32      	blt.n	800b5da <__lshift+0x86>
 800b574:	4638      	mov	r0, r7
 800b576:	f7ff fdef 	bl	800b158 <_Balloc>
 800b57a:	2300      	movs	r3, #0
 800b57c:	4680      	mov	r8, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	f100 0114 	add.w	r1, r0, #20
 800b584:	4553      	cmp	r3, sl
 800b586:	db2b      	blt.n	800b5e0 <__lshift+0x8c>
 800b588:	6920      	ldr	r0, [r4, #16]
 800b58a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b58e:	f104 0314 	add.w	r3, r4, #20
 800b592:	f016 021f 	ands.w	r2, r6, #31
 800b596:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b59a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b59e:	d025      	beq.n	800b5ec <__lshift+0x98>
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	f1c2 0e20 	rsb	lr, r2, #32
 800b5a6:	468a      	mov	sl, r1
 800b5a8:	681e      	ldr	r6, [r3, #0]
 800b5aa:	4096      	lsls	r6, r2
 800b5ac:	4330      	orrs	r0, r6
 800b5ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b5b2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b5b6:	459c      	cmp	ip, r3
 800b5b8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b5bc:	d814      	bhi.n	800b5e8 <__lshift+0x94>
 800b5be:	6048      	str	r0, [r1, #4]
 800b5c0:	b108      	cbz	r0, 800b5c6 <__lshift+0x72>
 800b5c2:	f109 0502 	add.w	r5, r9, #2
 800b5c6:	3d01      	subs	r5, #1
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f8c8 5010 	str.w	r5, [r8, #16]
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	f7ff fdf6 	bl	800b1c0 <_Bfree>
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	3101      	adds	r1, #1
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	e7c7      	b.n	800b570 <__lshift+0x1c>
 800b5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	e7cd      	b.n	800b584 <__lshift+0x30>
 800b5e8:	4651      	mov	r1, sl
 800b5ea:	e7dc      	b.n	800b5a6 <__lshift+0x52>
 800b5ec:	3904      	subs	r1, #4
 800b5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f2:	459c      	cmp	ip, r3
 800b5f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5f8:	d8f9      	bhi.n	800b5ee <__lshift+0x9a>
 800b5fa:	e7e4      	b.n	800b5c6 <__lshift+0x72>

0800b5fc <__mcmp>:
 800b5fc:	6903      	ldr	r3, [r0, #16]
 800b5fe:	690a      	ldr	r2, [r1, #16]
 800b600:	b530      	push	{r4, r5, lr}
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	d10c      	bne.n	800b620 <__mcmp+0x24>
 800b606:	0092      	lsls	r2, r2, #2
 800b608:	3014      	adds	r0, #20
 800b60a:	3114      	adds	r1, #20
 800b60c:	1884      	adds	r4, r0, r2
 800b60e:	4411      	add	r1, r2
 800b610:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b614:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b618:	4295      	cmp	r5, r2
 800b61a:	d003      	beq.n	800b624 <__mcmp+0x28>
 800b61c:	d305      	bcc.n	800b62a <__mcmp+0x2e>
 800b61e:	2301      	movs	r3, #1
 800b620:	4618      	mov	r0, r3
 800b622:	bd30      	pop	{r4, r5, pc}
 800b624:	42a0      	cmp	r0, r4
 800b626:	d3f3      	bcc.n	800b610 <__mcmp+0x14>
 800b628:	e7fa      	b.n	800b620 <__mcmp+0x24>
 800b62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b62e:	e7f7      	b.n	800b620 <__mcmp+0x24>

0800b630 <__mdiff>:
 800b630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b634:	460d      	mov	r5, r1
 800b636:	4607      	mov	r7, r0
 800b638:	4611      	mov	r1, r2
 800b63a:	4628      	mov	r0, r5
 800b63c:	4614      	mov	r4, r2
 800b63e:	f7ff ffdd 	bl	800b5fc <__mcmp>
 800b642:	1e06      	subs	r6, r0, #0
 800b644:	d108      	bne.n	800b658 <__mdiff+0x28>
 800b646:	4631      	mov	r1, r6
 800b648:	4638      	mov	r0, r7
 800b64a:	f7ff fd85 	bl	800b158 <_Balloc>
 800b64e:	2301      	movs	r3, #1
 800b650:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b658:	bfa4      	itt	ge
 800b65a:	4623      	movge	r3, r4
 800b65c:	462c      	movge	r4, r5
 800b65e:	4638      	mov	r0, r7
 800b660:	6861      	ldr	r1, [r4, #4]
 800b662:	bfa6      	itte	ge
 800b664:	461d      	movge	r5, r3
 800b666:	2600      	movge	r6, #0
 800b668:	2601      	movlt	r6, #1
 800b66a:	f7ff fd75 	bl	800b158 <_Balloc>
 800b66e:	f04f 0e00 	mov.w	lr, #0
 800b672:	60c6      	str	r6, [r0, #12]
 800b674:	692b      	ldr	r3, [r5, #16]
 800b676:	6926      	ldr	r6, [r4, #16]
 800b678:	f104 0214 	add.w	r2, r4, #20
 800b67c:	f105 0914 	add.w	r9, r5, #20
 800b680:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b684:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b688:	f100 0114 	add.w	r1, r0, #20
 800b68c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b690:	f859 5b04 	ldr.w	r5, [r9], #4
 800b694:	fa1f f38a 	uxth.w	r3, sl
 800b698:	4473      	add	r3, lr
 800b69a:	b2ac      	uxth	r4, r5
 800b69c:	1b1b      	subs	r3, r3, r4
 800b69e:	0c2c      	lsrs	r4, r5, #16
 800b6a0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b6a4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b6ae:	45c8      	cmp	r8, r9
 800b6b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b6b4:	4694      	mov	ip, r2
 800b6b6:	f841 4b04 	str.w	r4, [r1], #4
 800b6ba:	d8e7      	bhi.n	800b68c <__mdiff+0x5c>
 800b6bc:	45bc      	cmp	ip, r7
 800b6be:	d304      	bcc.n	800b6ca <__mdiff+0x9a>
 800b6c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b6c4:	b183      	cbz	r3, 800b6e8 <__mdiff+0xb8>
 800b6c6:	6106      	str	r6, [r0, #16]
 800b6c8:	e7c4      	b.n	800b654 <__mdiff+0x24>
 800b6ca:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b6ce:	b2a2      	uxth	r2, r4
 800b6d0:	4472      	add	r2, lr
 800b6d2:	1413      	asrs	r3, r2, #16
 800b6d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6d8:	b292      	uxth	r2, r2
 800b6da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6de:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b6e2:	f841 2b04 	str.w	r2, [r1], #4
 800b6e6:	e7e9      	b.n	800b6bc <__mdiff+0x8c>
 800b6e8:	3e01      	subs	r6, #1
 800b6ea:	e7e9      	b.n	800b6c0 <__mdiff+0x90>

0800b6ec <__ulp>:
 800b6ec:	4b10      	ldr	r3, [pc, #64]	; (800b730 <__ulp+0x44>)
 800b6ee:	400b      	ands	r3, r1
 800b6f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd02      	ble.n	800b6fe <__ulp+0x12>
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4770      	bx	lr
 800b6fe:	425b      	negs	r3, r3
 800b700:	151b      	asrs	r3, r3, #20
 800b702:	2b13      	cmp	r3, #19
 800b704:	f04f 0000 	mov.w	r0, #0
 800b708:	f04f 0100 	mov.w	r1, #0
 800b70c:	dc04      	bgt.n	800b718 <__ulp+0x2c>
 800b70e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b712:	fa42 f103 	asr.w	r1, r2, r3
 800b716:	4770      	bx	lr
 800b718:	2201      	movs	r2, #1
 800b71a:	3b14      	subs	r3, #20
 800b71c:	2b1e      	cmp	r3, #30
 800b71e:	bfce      	itee	gt
 800b720:	4613      	movgt	r3, r2
 800b722:	f1c3 031f 	rsble	r3, r3, #31
 800b726:	fa02 f303 	lslle.w	r3, r2, r3
 800b72a:	4618      	mov	r0, r3
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	7ff00000 	.word	0x7ff00000

0800b734 <__b2d>:
 800b734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b738:	6907      	ldr	r7, [r0, #16]
 800b73a:	f100 0914 	add.w	r9, r0, #20
 800b73e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b742:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b746:	f1a7 0804 	sub.w	r8, r7, #4
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff fdc8 	bl	800b2e0 <__hi0bits>
 800b750:	f1c0 0320 	rsb	r3, r0, #32
 800b754:	280a      	cmp	r0, #10
 800b756:	600b      	str	r3, [r1, #0]
 800b758:	491e      	ldr	r1, [pc, #120]	; (800b7d4 <__b2d+0xa0>)
 800b75a:	dc17      	bgt.n	800b78c <__b2d+0x58>
 800b75c:	45c1      	cmp	r9, r8
 800b75e:	bf28      	it	cs
 800b760:	2200      	movcs	r2, #0
 800b762:	f1c0 0c0b 	rsb	ip, r0, #11
 800b766:	fa26 f30c 	lsr.w	r3, r6, ip
 800b76a:	bf38      	it	cc
 800b76c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b770:	ea43 0501 	orr.w	r5, r3, r1
 800b774:	f100 0315 	add.w	r3, r0, #21
 800b778:	fa06 f303 	lsl.w	r3, r6, r3
 800b77c:	fa22 f20c 	lsr.w	r2, r2, ip
 800b780:	ea43 0402 	orr.w	r4, r3, r2
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78c:	45c1      	cmp	r9, r8
 800b78e:	bf3a      	itte	cc
 800b790:	f1a7 0808 	subcc.w	r8, r7, #8
 800b794:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b798:	2200      	movcs	r2, #0
 800b79a:	f1b0 030b 	subs.w	r3, r0, #11
 800b79e:	d015      	beq.n	800b7cc <__b2d+0x98>
 800b7a0:	409e      	lsls	r6, r3
 800b7a2:	f1c3 0720 	rsb	r7, r3, #32
 800b7a6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b7aa:	fa22 f107 	lsr.w	r1, r2, r7
 800b7ae:	45c8      	cmp	r8, r9
 800b7b0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b7b4:	ea46 0501 	orr.w	r5, r6, r1
 800b7b8:	bf94      	ite	ls
 800b7ba:	2100      	movls	r1, #0
 800b7bc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b7c0:	fa02 f003 	lsl.w	r0, r2, r3
 800b7c4:	40f9      	lsrs	r1, r7
 800b7c6:	ea40 0401 	orr.w	r4, r0, r1
 800b7ca:	e7db      	b.n	800b784 <__b2d+0x50>
 800b7cc:	ea46 0501 	orr.w	r5, r6, r1
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	e7d7      	b.n	800b784 <__b2d+0x50>
 800b7d4:	3ff00000 	.word	0x3ff00000

0800b7d8 <__d2b>:
 800b7d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b7dc:	461c      	mov	r4, r3
 800b7de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4690      	mov	r8, r2
 800b7e6:	f7ff fcb7 	bl	800b158 <_Balloc>
 800b7ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b7ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b7f2:	4607      	mov	r7, r0
 800b7f4:	bb34      	cbnz	r4, 800b844 <__d2b+0x6c>
 800b7f6:	9201      	str	r2, [sp, #4]
 800b7f8:	f1b8 0200 	subs.w	r2, r8, #0
 800b7fc:	d027      	beq.n	800b84e <__d2b+0x76>
 800b7fe:	a802      	add	r0, sp, #8
 800b800:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b804:	f7ff fd8b 	bl	800b31e <__lo0bits>
 800b808:	9900      	ldr	r1, [sp, #0]
 800b80a:	b1f0      	cbz	r0, 800b84a <__d2b+0x72>
 800b80c:	9a01      	ldr	r2, [sp, #4]
 800b80e:	f1c0 0320 	rsb	r3, r0, #32
 800b812:	fa02 f303 	lsl.w	r3, r2, r3
 800b816:	430b      	orrs	r3, r1
 800b818:	40c2      	lsrs	r2, r0
 800b81a:	617b      	str	r3, [r7, #20]
 800b81c:	9201      	str	r2, [sp, #4]
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	bf14      	ite	ne
 800b824:	2102      	movne	r1, #2
 800b826:	2101      	moveq	r1, #1
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	6139      	str	r1, [r7, #16]
 800b82c:	b1c4      	cbz	r4, 800b860 <__d2b+0x88>
 800b82e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b832:	4404      	add	r4, r0
 800b834:	6034      	str	r4, [r6, #0]
 800b836:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b83a:	6028      	str	r0, [r5, #0]
 800b83c:	4638      	mov	r0, r7
 800b83e:	b002      	add	sp, #8
 800b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b844:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b848:	e7d5      	b.n	800b7f6 <__d2b+0x1e>
 800b84a:	6179      	str	r1, [r7, #20]
 800b84c:	e7e7      	b.n	800b81e <__d2b+0x46>
 800b84e:	a801      	add	r0, sp, #4
 800b850:	f7ff fd65 	bl	800b31e <__lo0bits>
 800b854:	2101      	movs	r1, #1
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	6139      	str	r1, [r7, #16]
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	3020      	adds	r0, #32
 800b85e:	e7e5      	b.n	800b82c <__d2b+0x54>
 800b860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b864:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b868:	6030      	str	r0, [r6, #0]
 800b86a:	6918      	ldr	r0, [r3, #16]
 800b86c:	f7ff fd38 	bl	800b2e0 <__hi0bits>
 800b870:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b874:	e7e1      	b.n	800b83a <__d2b+0x62>

0800b876 <__ratio>:
 800b876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	4688      	mov	r8, r1
 800b87c:	4669      	mov	r1, sp
 800b87e:	4681      	mov	r9, r0
 800b880:	f7ff ff58 	bl	800b734 <__b2d>
 800b884:	468b      	mov	fp, r1
 800b886:	4606      	mov	r6, r0
 800b888:	460f      	mov	r7, r1
 800b88a:	4640      	mov	r0, r8
 800b88c:	a901      	add	r1, sp, #4
 800b88e:	f7ff ff51 	bl	800b734 <__b2d>
 800b892:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b896:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b89a:	460d      	mov	r5, r1
 800b89c:	eba3 0c02 	sub.w	ip, r3, r2
 800b8a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	bfd5      	itete	le
 800b8ae:	460a      	movle	r2, r1
 800b8b0:	463a      	movgt	r2, r7
 800b8b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b8b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b8ba:	bfd8      	it	le
 800b8bc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800b8c0:	462b      	mov	r3, r5
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f7f4 ff30 	bl	800072c <__aeabi_ddiv>
 800b8cc:	b003      	add	sp, #12
 800b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b8d4 <_mprec_log10>:
 800b8d4:	2817      	cmp	r0, #23
 800b8d6:	b5d0      	push	{r4, r6, r7, lr}
 800b8d8:	4604      	mov	r4, r0
 800b8da:	dc05      	bgt.n	800b8e8 <_mprec_log10+0x14>
 800b8dc:	4b08      	ldr	r3, [pc, #32]	; (800b900 <_mprec_log10+0x2c>)
 800b8de:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800b8e2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b8e6:	bdd0      	pop	{r4, r6, r7, pc}
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	2600      	movs	r6, #0
 800b8ec:	4905      	ldr	r1, [pc, #20]	; (800b904 <_mprec_log10+0x30>)
 800b8ee:	4f06      	ldr	r7, [pc, #24]	; (800b908 <_mprec_log10+0x34>)
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	f7f4 fdf0 	bl	80004d8 <__aeabi_dmul>
 800b8f8:	3c01      	subs	r4, #1
 800b8fa:	d1f9      	bne.n	800b8f0 <_mprec_log10+0x1c>
 800b8fc:	e7f3      	b.n	800b8e6 <_mprec_log10+0x12>
 800b8fe:	bf00      	nop
 800b900:	0800da08 	.word	0x0800da08
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	40240000 	.word	0x40240000

0800b90c <__copybits>:
 800b90c:	3901      	subs	r1, #1
 800b90e:	b510      	push	{r4, lr}
 800b910:	1149      	asrs	r1, r1, #5
 800b912:	6914      	ldr	r4, [r2, #16]
 800b914:	3101      	adds	r1, #1
 800b916:	f102 0314 	add.w	r3, r2, #20
 800b91a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b91e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b922:	42a3      	cmp	r3, r4
 800b924:	4602      	mov	r2, r0
 800b926:	d303      	bcc.n	800b930 <__copybits+0x24>
 800b928:	2300      	movs	r3, #0
 800b92a:	428a      	cmp	r2, r1
 800b92c:	d305      	bcc.n	800b93a <__copybits+0x2e>
 800b92e:	bd10      	pop	{r4, pc}
 800b930:	f853 2b04 	ldr.w	r2, [r3], #4
 800b934:	f840 2b04 	str.w	r2, [r0], #4
 800b938:	e7f3      	b.n	800b922 <__copybits+0x16>
 800b93a:	f842 3b04 	str.w	r3, [r2], #4
 800b93e:	e7f4      	b.n	800b92a <__copybits+0x1e>

0800b940 <__any_on>:
 800b940:	f100 0214 	add.w	r2, r0, #20
 800b944:	6900      	ldr	r0, [r0, #16]
 800b946:	114b      	asrs	r3, r1, #5
 800b948:	4298      	cmp	r0, r3
 800b94a:	b510      	push	{r4, lr}
 800b94c:	db11      	blt.n	800b972 <__any_on+0x32>
 800b94e:	dd0a      	ble.n	800b966 <__any_on+0x26>
 800b950:	f011 011f 	ands.w	r1, r1, #31
 800b954:	d007      	beq.n	800b966 <__any_on+0x26>
 800b956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b95a:	fa24 f001 	lsr.w	r0, r4, r1
 800b95e:	fa00 f101 	lsl.w	r1, r0, r1
 800b962:	428c      	cmp	r4, r1
 800b964:	d10b      	bne.n	800b97e <__any_on+0x3e>
 800b966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d803      	bhi.n	800b976 <__any_on+0x36>
 800b96e:	2000      	movs	r0, #0
 800b970:	bd10      	pop	{r4, pc}
 800b972:	4603      	mov	r3, r0
 800b974:	e7f7      	b.n	800b966 <__any_on+0x26>
 800b976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b97a:	2900      	cmp	r1, #0
 800b97c:	d0f5      	beq.n	800b96a <__any_on+0x2a>
 800b97e:	2001      	movs	r0, #1
 800b980:	e7f6      	b.n	800b970 <__any_on+0x30>

0800b982 <_calloc_r>:
 800b982:	b538      	push	{r3, r4, r5, lr}
 800b984:	fb02 f401 	mul.w	r4, r2, r1
 800b988:	4621      	mov	r1, r4
 800b98a:	f000 f809 	bl	800b9a0 <_malloc_r>
 800b98e:	4605      	mov	r5, r0
 800b990:	b118      	cbz	r0, 800b99a <_calloc_r+0x18>
 800b992:	4622      	mov	r2, r4
 800b994:	2100      	movs	r1, #0
 800b996:	f7fe f825 	bl	80099e4 <memset>
 800b99a:	4628      	mov	r0, r5
 800b99c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b9a0 <_malloc_r>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	1ccd      	adds	r5, r1, #3
 800b9a4:	f025 0503 	bic.w	r5, r5, #3
 800b9a8:	3508      	adds	r5, #8
 800b9aa:	2d0c      	cmp	r5, #12
 800b9ac:	bf38      	it	cc
 800b9ae:	250c      	movcc	r5, #12
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	db01      	blt.n	800b9ba <_malloc_r+0x1a>
 800b9b6:	42a9      	cmp	r1, r5
 800b9b8:	d903      	bls.n	800b9c2 <_malloc_r+0x22>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	6033      	str	r3, [r6, #0]
 800b9be:	2000      	movs	r0, #0
 800b9c0:	bd70      	pop	{r4, r5, r6, pc}
 800b9c2:	f001 f9e8 	bl	800cd96 <__malloc_lock>
 800b9c6:	4a21      	ldr	r2, [pc, #132]	; (800ba4c <_malloc_r+0xac>)
 800b9c8:	6814      	ldr	r4, [r2, #0]
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	b991      	cbnz	r1, 800b9f4 <_malloc_r+0x54>
 800b9ce:	4c20      	ldr	r4, [pc, #128]	; (800ba50 <_malloc_r+0xb0>)
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	b91b      	cbnz	r3, 800b9dc <_malloc_r+0x3c>
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f000 fb3d 	bl	800c054 <_sbrk_r>
 800b9da:	6020      	str	r0, [r4, #0]
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f000 fb38 	bl	800c054 <_sbrk_r>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d124      	bne.n	800ba32 <_malloc_r+0x92>
 800b9e8:	230c      	movs	r3, #12
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	6033      	str	r3, [r6, #0]
 800b9ee:	f001 f9d3 	bl	800cd98 <__malloc_unlock>
 800b9f2:	e7e4      	b.n	800b9be <_malloc_r+0x1e>
 800b9f4:	680b      	ldr	r3, [r1, #0]
 800b9f6:	1b5b      	subs	r3, r3, r5
 800b9f8:	d418      	bmi.n	800ba2c <_malloc_r+0x8c>
 800b9fa:	2b0b      	cmp	r3, #11
 800b9fc:	d90f      	bls.n	800ba1e <_malloc_r+0x7e>
 800b9fe:	600b      	str	r3, [r1, #0]
 800ba00:	18cc      	adds	r4, r1, r3
 800ba02:	50cd      	str	r5, [r1, r3]
 800ba04:	4630      	mov	r0, r6
 800ba06:	f001 f9c7 	bl	800cd98 <__malloc_unlock>
 800ba0a:	f104 000b 	add.w	r0, r4, #11
 800ba0e:	1d23      	adds	r3, r4, #4
 800ba10:	f020 0007 	bic.w	r0, r0, #7
 800ba14:	1ac3      	subs	r3, r0, r3
 800ba16:	d0d3      	beq.n	800b9c0 <_malloc_r+0x20>
 800ba18:	425a      	negs	r2, r3
 800ba1a:	50e2      	str	r2, [r4, r3]
 800ba1c:	e7d0      	b.n	800b9c0 <_malloc_r+0x20>
 800ba1e:	684b      	ldr	r3, [r1, #4]
 800ba20:	428c      	cmp	r4, r1
 800ba22:	bf16      	itet	ne
 800ba24:	6063      	strne	r3, [r4, #4]
 800ba26:	6013      	streq	r3, [r2, #0]
 800ba28:	460c      	movne	r4, r1
 800ba2a:	e7eb      	b.n	800ba04 <_malloc_r+0x64>
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	6849      	ldr	r1, [r1, #4]
 800ba30:	e7cc      	b.n	800b9cc <_malloc_r+0x2c>
 800ba32:	1cc4      	adds	r4, r0, #3
 800ba34:	f024 0403 	bic.w	r4, r4, #3
 800ba38:	42a0      	cmp	r0, r4
 800ba3a:	d005      	beq.n	800ba48 <_malloc_r+0xa8>
 800ba3c:	1a21      	subs	r1, r4, r0
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f000 fb08 	bl	800c054 <_sbrk_r>
 800ba44:	3001      	adds	r0, #1
 800ba46:	d0cf      	beq.n	800b9e8 <_malloc_r+0x48>
 800ba48:	6025      	str	r5, [r4, #0]
 800ba4a:	e7db      	b.n	800ba04 <_malloc_r+0x64>
 800ba4c:	200006b4 	.word	0x200006b4
 800ba50:	200006b8 	.word	0x200006b8

0800ba54 <_realloc_r>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	4607      	mov	r7, r0
 800ba58:	4614      	mov	r4, r2
 800ba5a:	460e      	mov	r6, r1
 800ba5c:	b921      	cbnz	r1, 800ba68 <_realloc_r+0x14>
 800ba5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba62:	4611      	mov	r1, r2
 800ba64:	f7ff bf9c 	b.w	800b9a0 <_malloc_r>
 800ba68:	b922      	cbnz	r2, 800ba74 <_realloc_r+0x20>
 800ba6a:	f001 f997 	bl	800cd9c <_free_r>
 800ba6e:	4625      	mov	r5, r4
 800ba70:	4628      	mov	r0, r5
 800ba72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba74:	f001 f9de 	bl	800ce34 <_malloc_usable_size_r>
 800ba78:	42a0      	cmp	r0, r4
 800ba7a:	d20f      	bcs.n	800ba9c <_realloc_r+0x48>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f7ff ff8e 	bl	800b9a0 <_malloc_r>
 800ba84:	4605      	mov	r5, r0
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d0f2      	beq.n	800ba70 <_realloc_r+0x1c>
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	f7ff fb58 	bl	800b142 <memcpy>
 800ba92:	4631      	mov	r1, r6
 800ba94:	4638      	mov	r0, r7
 800ba96:	f001 f981 	bl	800cd9c <_free_r>
 800ba9a:	e7e9      	b.n	800ba70 <_realloc_r+0x1c>
 800ba9c:	4635      	mov	r5, r6
 800ba9e:	e7e7      	b.n	800ba70 <_realloc_r+0x1c>

0800baa0 <__ssputs_r>:
 800baa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa4:	688e      	ldr	r6, [r1, #8]
 800baa6:	4682      	mov	sl, r0
 800baa8:	429e      	cmp	r6, r3
 800baaa:	460c      	mov	r4, r1
 800baac:	4690      	mov	r8, r2
 800baae:	4699      	mov	r9, r3
 800bab0:	d837      	bhi.n	800bb22 <__ssputs_r+0x82>
 800bab2:	898a      	ldrh	r2, [r1, #12]
 800bab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bab8:	d031      	beq.n	800bb1e <__ssputs_r+0x7e>
 800baba:	2302      	movs	r3, #2
 800babc:	6825      	ldr	r5, [r4, #0]
 800babe:	6909      	ldr	r1, [r1, #16]
 800bac0:	1a6f      	subs	r7, r5, r1
 800bac2:	6965      	ldr	r5, [r4, #20]
 800bac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bac8:	fb95 f5f3 	sdiv	r5, r5, r3
 800bacc:	f109 0301 	add.w	r3, r9, #1
 800bad0:	443b      	add	r3, r7
 800bad2:	429d      	cmp	r5, r3
 800bad4:	bf38      	it	cc
 800bad6:	461d      	movcc	r5, r3
 800bad8:	0553      	lsls	r3, r2, #21
 800bada:	d530      	bpl.n	800bb3e <__ssputs_r+0x9e>
 800badc:	4629      	mov	r1, r5
 800bade:	f7ff ff5f 	bl	800b9a0 <_malloc_r>
 800bae2:	4606      	mov	r6, r0
 800bae4:	b950      	cbnz	r0, 800bafc <__ssputs_r+0x5c>
 800bae6:	230c      	movs	r3, #12
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baec:	f8ca 3000 	str.w	r3, [sl]
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf6:	81a3      	strh	r3, [r4, #12]
 800baf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafc:	463a      	mov	r2, r7
 800bafe:	6921      	ldr	r1, [r4, #16]
 800bb00:	f7ff fb1f 	bl	800b142 <memcpy>
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0e:	81a3      	strh	r3, [r4, #12]
 800bb10:	6126      	str	r6, [r4, #16]
 800bb12:	443e      	add	r6, r7
 800bb14:	6026      	str	r6, [r4, #0]
 800bb16:	464e      	mov	r6, r9
 800bb18:	6165      	str	r5, [r4, #20]
 800bb1a:	1bed      	subs	r5, r5, r7
 800bb1c:	60a5      	str	r5, [r4, #8]
 800bb1e:	454e      	cmp	r6, r9
 800bb20:	d900      	bls.n	800bb24 <__ssputs_r+0x84>
 800bb22:	464e      	mov	r6, r9
 800bb24:	4632      	mov	r2, r6
 800bb26:	4641      	mov	r1, r8
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	f001 f91b 	bl	800cd64 <memmove>
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	2000      	movs	r0, #0
 800bb32:	1b9b      	subs	r3, r3, r6
 800bb34:	60a3      	str	r3, [r4, #8]
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	441e      	add	r6, r3
 800bb3a:	6026      	str	r6, [r4, #0]
 800bb3c:	e7dc      	b.n	800baf8 <__ssputs_r+0x58>
 800bb3e:	462a      	mov	r2, r5
 800bb40:	f7ff ff88 	bl	800ba54 <_realloc_r>
 800bb44:	4606      	mov	r6, r0
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d1e2      	bne.n	800bb10 <__ssputs_r+0x70>
 800bb4a:	6921      	ldr	r1, [r4, #16]
 800bb4c:	4650      	mov	r0, sl
 800bb4e:	f001 f925 	bl	800cd9c <_free_r>
 800bb52:	e7c8      	b.n	800bae6 <__ssputs_r+0x46>

0800bb54 <_svfiprintf_r>:
 800bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb58:	461d      	mov	r5, r3
 800bb5a:	898b      	ldrh	r3, [r1, #12]
 800bb5c:	b09d      	sub	sp, #116	; 0x74
 800bb5e:	061f      	lsls	r7, r3, #24
 800bb60:	4680      	mov	r8, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	4616      	mov	r6, r2
 800bb66:	d50f      	bpl.n	800bb88 <_svfiprintf_r+0x34>
 800bb68:	690b      	ldr	r3, [r1, #16]
 800bb6a:	b96b      	cbnz	r3, 800bb88 <_svfiprintf_r+0x34>
 800bb6c:	2140      	movs	r1, #64	; 0x40
 800bb6e:	f7ff ff17 	bl	800b9a0 <_malloc_r>
 800bb72:	6020      	str	r0, [r4, #0]
 800bb74:	6120      	str	r0, [r4, #16]
 800bb76:	b928      	cbnz	r0, 800bb84 <_svfiprintf_r+0x30>
 800bb78:	230c      	movs	r3, #12
 800bb7a:	f8c8 3000 	str.w	r3, [r8]
 800bb7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb82:	e0c8      	b.n	800bd16 <_svfiprintf_r+0x1c2>
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	6163      	str	r3, [r4, #20]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8c:	2320      	movs	r3, #32
 800bb8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb92:	2330      	movs	r3, #48	; 0x30
 800bb94:	f04f 0b01 	mov.w	fp, #1
 800bb98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb9c:	9503      	str	r5, [sp, #12]
 800bb9e:	4637      	mov	r7, r6
 800bba0:	463d      	mov	r5, r7
 800bba2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bba6:	b10b      	cbz	r3, 800bbac <_svfiprintf_r+0x58>
 800bba8:	2b25      	cmp	r3, #37	; 0x25
 800bbaa:	d13e      	bne.n	800bc2a <_svfiprintf_r+0xd6>
 800bbac:	ebb7 0a06 	subs.w	sl, r7, r6
 800bbb0:	d00b      	beq.n	800bbca <_svfiprintf_r+0x76>
 800bbb2:	4653      	mov	r3, sl
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4640      	mov	r0, r8
 800bbba:	f7ff ff71 	bl	800baa0 <__ssputs_r>
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f000 80a4 	beq.w	800bd0c <_svfiprintf_r+0x1b8>
 800bbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc6:	4453      	add	r3, sl
 800bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbca:	783b      	ldrb	r3, [r7, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 809d 	beq.w	800bd0c <_svfiprintf_r+0x1b8>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbdc:	9304      	str	r3, [sp, #16]
 800bbde:	9307      	str	r3, [sp, #28]
 800bbe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbe4:	931a      	str	r3, [sp, #104]	; 0x68
 800bbe6:	462f      	mov	r7, r5
 800bbe8:	2205      	movs	r2, #5
 800bbea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bbee:	4850      	ldr	r0, [pc, #320]	; (800bd30 <_svfiprintf_r+0x1dc>)
 800bbf0:	f001 f8aa 	bl	800cd48 <memchr>
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	b9d0      	cbnz	r0, 800bc2e <_svfiprintf_r+0xda>
 800bbf8:	06d9      	lsls	r1, r3, #27
 800bbfa:	bf44      	itt	mi
 800bbfc:	2220      	movmi	r2, #32
 800bbfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc02:	071a      	lsls	r2, r3, #28
 800bc04:	bf44      	itt	mi
 800bc06:	222b      	movmi	r2, #43	; 0x2b
 800bc08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc0c:	782a      	ldrb	r2, [r5, #0]
 800bc0e:	2a2a      	cmp	r2, #42	; 0x2a
 800bc10:	d015      	beq.n	800bc3e <_svfiprintf_r+0xea>
 800bc12:	462f      	mov	r7, r5
 800bc14:	2000      	movs	r0, #0
 800bc16:	250a      	movs	r5, #10
 800bc18:	9a07      	ldr	r2, [sp, #28]
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc20:	3b30      	subs	r3, #48	; 0x30
 800bc22:	2b09      	cmp	r3, #9
 800bc24:	d94d      	bls.n	800bcc2 <_svfiprintf_r+0x16e>
 800bc26:	b1b8      	cbz	r0, 800bc58 <_svfiprintf_r+0x104>
 800bc28:	e00f      	b.n	800bc4a <_svfiprintf_r+0xf6>
 800bc2a:	462f      	mov	r7, r5
 800bc2c:	e7b8      	b.n	800bba0 <_svfiprintf_r+0x4c>
 800bc2e:	4a40      	ldr	r2, [pc, #256]	; (800bd30 <_svfiprintf_r+0x1dc>)
 800bc30:	463d      	mov	r5, r7
 800bc32:	1a80      	subs	r0, r0, r2
 800bc34:	fa0b f000 	lsl.w	r0, fp, r0
 800bc38:	4318      	orrs	r0, r3
 800bc3a:	9004      	str	r0, [sp, #16]
 800bc3c:	e7d3      	b.n	800bbe6 <_svfiprintf_r+0x92>
 800bc3e:	9a03      	ldr	r2, [sp, #12]
 800bc40:	1d11      	adds	r1, r2, #4
 800bc42:	6812      	ldr	r2, [r2, #0]
 800bc44:	9103      	str	r1, [sp, #12]
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	db01      	blt.n	800bc4e <_svfiprintf_r+0xfa>
 800bc4a:	9207      	str	r2, [sp, #28]
 800bc4c:	e004      	b.n	800bc58 <_svfiprintf_r+0x104>
 800bc4e:	4252      	negs	r2, r2
 800bc50:	f043 0302 	orr.w	r3, r3, #2
 800bc54:	9207      	str	r2, [sp, #28]
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	783b      	ldrb	r3, [r7, #0]
 800bc5a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc5c:	d10c      	bne.n	800bc78 <_svfiprintf_r+0x124>
 800bc5e:	787b      	ldrb	r3, [r7, #1]
 800bc60:	2b2a      	cmp	r3, #42	; 0x2a
 800bc62:	d133      	bne.n	800bccc <_svfiprintf_r+0x178>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	3702      	adds	r7, #2
 800bc68:	1d1a      	adds	r2, r3, #4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	9203      	str	r2, [sp, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	bfb8      	it	lt
 800bc72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc76:	9305      	str	r3, [sp, #20]
 800bc78:	4d2e      	ldr	r5, [pc, #184]	; (800bd34 <_svfiprintf_r+0x1e0>)
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	7839      	ldrb	r1, [r7, #0]
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f001 f862 	bl	800cd48 <memchr>
 800bc84:	b138      	cbz	r0, 800bc96 <_svfiprintf_r+0x142>
 800bc86:	2340      	movs	r3, #64	; 0x40
 800bc88:	1b40      	subs	r0, r0, r5
 800bc8a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	3701      	adds	r7, #1
 800bc92:	4303      	orrs	r3, r0
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	7839      	ldrb	r1, [r7, #0]
 800bc98:	2206      	movs	r2, #6
 800bc9a:	4827      	ldr	r0, [pc, #156]	; (800bd38 <_svfiprintf_r+0x1e4>)
 800bc9c:	1c7e      	adds	r6, r7, #1
 800bc9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bca2:	f001 f851 	bl	800cd48 <memchr>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d038      	beq.n	800bd1c <_svfiprintf_r+0x1c8>
 800bcaa:	4b24      	ldr	r3, [pc, #144]	; (800bd3c <_svfiprintf_r+0x1e8>)
 800bcac:	bb13      	cbnz	r3, 800bcf4 <_svfiprintf_r+0x1a0>
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	3307      	adds	r3, #7
 800bcb2:	f023 0307 	bic.w	r3, r3, #7
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	9303      	str	r3, [sp, #12]
 800bcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcbc:	444b      	add	r3, r9
 800bcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc0:	e76d      	b.n	800bb9e <_svfiprintf_r+0x4a>
 800bcc2:	fb05 3202 	mla	r2, r5, r2, r3
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	460f      	mov	r7, r1
 800bcca:	e7a6      	b.n	800bc1a <_svfiprintf_r+0xc6>
 800bccc:	2300      	movs	r3, #0
 800bcce:	250a      	movs	r5, #10
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	3701      	adds	r7, #1
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcdc:	3a30      	subs	r2, #48	; 0x30
 800bcde:	2a09      	cmp	r2, #9
 800bce0:	d903      	bls.n	800bcea <_svfiprintf_r+0x196>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0c8      	beq.n	800bc78 <_svfiprintf_r+0x124>
 800bce6:	9105      	str	r1, [sp, #20]
 800bce8:	e7c6      	b.n	800bc78 <_svfiprintf_r+0x124>
 800bcea:	fb05 2101 	mla	r1, r5, r1, r2
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	e7f0      	b.n	800bcd6 <_svfiprintf_r+0x182>
 800bcf4:	ab03      	add	r3, sp, #12
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <_svfiprintf_r+0x1ec>)
 800bcfc:	a904      	add	r1, sp, #16
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f3af 8000 	nop.w
 800bd04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bd08:	4681      	mov	r9, r0
 800bd0a:	d1d6      	bne.n	800bcba <_svfiprintf_r+0x166>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	065b      	lsls	r3, r3, #25
 800bd10:	f53f af35 	bmi.w	800bb7e <_svfiprintf_r+0x2a>
 800bd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd16:	b01d      	add	sp, #116	; 0x74
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	ab03      	add	r3, sp, #12
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	4622      	mov	r2, r4
 800bd22:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <_svfiprintf_r+0x1ec>)
 800bd24:	a904      	add	r1, sp, #16
 800bd26:	4640      	mov	r0, r8
 800bd28:	f000 f882 	bl	800be30 <_printf_i>
 800bd2c:	e7ea      	b.n	800bd04 <_svfiprintf_r+0x1b0>
 800bd2e:	bf00      	nop
 800bd30:	0800dadc 	.word	0x0800dadc
 800bd34:	0800dae2 	.word	0x0800dae2
 800bd38:	0800dae6 	.word	0x0800dae6
 800bd3c:	00000000 	.word	0x00000000
 800bd40:	0800baa1 	.word	0x0800baa1

0800bd44 <_printf_common>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	4691      	mov	r9, r2
 800bd4a:	461f      	mov	r7, r3
 800bd4c:	688a      	ldr	r2, [r1, #8]
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	4606      	mov	r6, r0
 800bd52:	4293      	cmp	r3, r2
 800bd54:	bfb8      	it	lt
 800bd56:	4613      	movlt	r3, r2
 800bd58:	f8c9 3000 	str.w	r3, [r9]
 800bd5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd60:	460c      	mov	r4, r1
 800bd62:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd66:	b112      	cbz	r2, 800bd6e <_printf_common+0x2a>
 800bd68:	3301      	adds	r3, #1
 800bd6a:	f8c9 3000 	str.w	r3, [r9]
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	0699      	lsls	r1, r3, #26
 800bd72:	bf42      	ittt	mi
 800bd74:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bd78:	3302      	addmi	r3, #2
 800bd7a:	f8c9 3000 	strmi.w	r3, [r9]
 800bd7e:	6825      	ldr	r5, [r4, #0]
 800bd80:	f015 0506 	ands.w	r5, r5, #6
 800bd84:	d107      	bne.n	800bd96 <_printf_common+0x52>
 800bd86:	f104 0a19 	add.w	sl, r4, #25
 800bd8a:	68e3      	ldr	r3, [r4, #12]
 800bd8c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	42ab      	cmp	r3, r5
 800bd94:	dc29      	bgt.n	800bdea <_printf_common+0xa6>
 800bd96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bd9a:	6822      	ldr	r2, [r4, #0]
 800bd9c:	3300      	adds	r3, #0
 800bd9e:	bf18      	it	ne
 800bda0:	2301      	movne	r3, #1
 800bda2:	0692      	lsls	r2, r2, #26
 800bda4:	d42e      	bmi.n	800be04 <_printf_common+0xc0>
 800bda6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdaa:	4639      	mov	r1, r7
 800bdac:	4630      	mov	r0, r6
 800bdae:	47c0      	blx	r8
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	d021      	beq.n	800bdf8 <_printf_common+0xb4>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	68e5      	ldr	r5, [r4, #12]
 800bdb8:	f003 0306 	and.w	r3, r3, #6
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	bf18      	it	ne
 800bdc0:	2500      	movne	r5, #0
 800bdc2:	f8d9 2000 	ldr.w	r2, [r9]
 800bdc6:	f04f 0900 	mov.w	r9, #0
 800bdca:	bf08      	it	eq
 800bdcc:	1aad      	subeq	r5, r5, r2
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	6922      	ldr	r2, [r4, #16]
 800bdd2:	bf08      	it	eq
 800bdd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	bfc4      	itt	gt
 800bddc:	1a9b      	subgt	r3, r3, r2
 800bdde:	18ed      	addgt	r5, r5, r3
 800bde0:	341a      	adds	r4, #26
 800bde2:	454d      	cmp	r5, r9
 800bde4:	d11a      	bne.n	800be1c <_printf_common+0xd8>
 800bde6:	2000      	movs	r0, #0
 800bde8:	e008      	b.n	800bdfc <_printf_common+0xb8>
 800bdea:	2301      	movs	r3, #1
 800bdec:	4652      	mov	r2, sl
 800bdee:	4639      	mov	r1, r7
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	47c0      	blx	r8
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d103      	bne.n	800be00 <_printf_common+0xbc>
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be00:	3501      	adds	r5, #1
 800be02:	e7c2      	b.n	800bd8a <_printf_common+0x46>
 800be04:	2030      	movs	r0, #48	; 0x30
 800be06:	18e1      	adds	r1, r4, r3
 800be08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be12:	4422      	add	r2, r4
 800be14:	3302      	adds	r3, #2
 800be16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be1a:	e7c4      	b.n	800bda6 <_printf_common+0x62>
 800be1c:	2301      	movs	r3, #1
 800be1e:	4622      	mov	r2, r4
 800be20:	4639      	mov	r1, r7
 800be22:	4630      	mov	r0, r6
 800be24:	47c0      	blx	r8
 800be26:	3001      	adds	r0, #1
 800be28:	d0e6      	beq.n	800bdf8 <_printf_common+0xb4>
 800be2a:	f109 0901 	add.w	r9, r9, #1
 800be2e:	e7d8      	b.n	800bde2 <_printf_common+0x9e>

0800be30 <_printf_i>:
 800be30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be38:	460c      	mov	r4, r1
 800be3a:	7e09      	ldrb	r1, [r1, #24]
 800be3c:	b085      	sub	sp, #20
 800be3e:	296e      	cmp	r1, #110	; 0x6e
 800be40:	4617      	mov	r7, r2
 800be42:	4606      	mov	r6, r0
 800be44:	4698      	mov	r8, r3
 800be46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be48:	f000 80b3 	beq.w	800bfb2 <_printf_i+0x182>
 800be4c:	d822      	bhi.n	800be94 <_printf_i+0x64>
 800be4e:	2963      	cmp	r1, #99	; 0x63
 800be50:	d036      	beq.n	800bec0 <_printf_i+0x90>
 800be52:	d80a      	bhi.n	800be6a <_printf_i+0x3a>
 800be54:	2900      	cmp	r1, #0
 800be56:	f000 80b9 	beq.w	800bfcc <_printf_i+0x19c>
 800be5a:	2958      	cmp	r1, #88	; 0x58
 800be5c:	f000 8083 	beq.w	800bf66 <_printf_i+0x136>
 800be60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800be68:	e032      	b.n	800bed0 <_printf_i+0xa0>
 800be6a:	2964      	cmp	r1, #100	; 0x64
 800be6c:	d001      	beq.n	800be72 <_printf_i+0x42>
 800be6e:	2969      	cmp	r1, #105	; 0x69
 800be70:	d1f6      	bne.n	800be60 <_printf_i+0x30>
 800be72:	6820      	ldr	r0, [r4, #0]
 800be74:	6813      	ldr	r3, [r2, #0]
 800be76:	0605      	lsls	r5, r0, #24
 800be78:	f103 0104 	add.w	r1, r3, #4
 800be7c:	d52a      	bpl.n	800bed4 <_printf_i+0xa4>
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6011      	str	r1, [r2, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	da03      	bge.n	800be8e <_printf_i+0x5e>
 800be86:	222d      	movs	r2, #45	; 0x2d
 800be88:	425b      	negs	r3, r3
 800be8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be8e:	486f      	ldr	r0, [pc, #444]	; (800c04c <_printf_i+0x21c>)
 800be90:	220a      	movs	r2, #10
 800be92:	e039      	b.n	800bf08 <_printf_i+0xd8>
 800be94:	2973      	cmp	r1, #115	; 0x73
 800be96:	f000 809d 	beq.w	800bfd4 <_printf_i+0x1a4>
 800be9a:	d808      	bhi.n	800beae <_printf_i+0x7e>
 800be9c:	296f      	cmp	r1, #111	; 0x6f
 800be9e:	d020      	beq.n	800bee2 <_printf_i+0xb2>
 800bea0:	2970      	cmp	r1, #112	; 0x70
 800bea2:	d1dd      	bne.n	800be60 <_printf_i+0x30>
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	f043 0320 	orr.w	r3, r3, #32
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	e003      	b.n	800beb6 <_printf_i+0x86>
 800beae:	2975      	cmp	r1, #117	; 0x75
 800beb0:	d017      	beq.n	800bee2 <_printf_i+0xb2>
 800beb2:	2978      	cmp	r1, #120	; 0x78
 800beb4:	d1d4      	bne.n	800be60 <_printf_i+0x30>
 800beb6:	2378      	movs	r3, #120	; 0x78
 800beb8:	4865      	ldr	r0, [pc, #404]	; (800c050 <_printf_i+0x220>)
 800beba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bebe:	e055      	b.n	800bf6c <_printf_i+0x13c>
 800bec0:	6813      	ldr	r3, [r2, #0]
 800bec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bec6:	1d19      	adds	r1, r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6011      	str	r1, [r2, #0]
 800becc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bed0:	2301      	movs	r3, #1
 800bed2:	e08c      	b.n	800bfee <_printf_i+0x1be>
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800beda:	6011      	str	r1, [r2, #0]
 800bedc:	bf18      	it	ne
 800bede:	b21b      	sxthne	r3, r3
 800bee0:	e7cf      	b.n	800be82 <_printf_i+0x52>
 800bee2:	6813      	ldr	r3, [r2, #0]
 800bee4:	6825      	ldr	r5, [r4, #0]
 800bee6:	1d18      	adds	r0, r3, #4
 800bee8:	6010      	str	r0, [r2, #0]
 800beea:	0628      	lsls	r0, r5, #24
 800beec:	d501      	bpl.n	800bef2 <_printf_i+0xc2>
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	e002      	b.n	800bef8 <_printf_i+0xc8>
 800bef2:	0668      	lsls	r0, r5, #25
 800bef4:	d5fb      	bpl.n	800beee <_printf_i+0xbe>
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	296f      	cmp	r1, #111	; 0x6f
 800befa:	bf14      	ite	ne
 800befc:	220a      	movne	r2, #10
 800befe:	2208      	moveq	r2, #8
 800bf00:	4852      	ldr	r0, [pc, #328]	; (800c04c <_printf_i+0x21c>)
 800bf02:	2100      	movs	r1, #0
 800bf04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf08:	6865      	ldr	r5, [r4, #4]
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	60a5      	str	r5, [r4, #8]
 800bf0e:	f2c0 8095 	blt.w	800c03c <_printf_i+0x20c>
 800bf12:	6821      	ldr	r1, [r4, #0]
 800bf14:	f021 0104 	bic.w	r1, r1, #4
 800bf18:	6021      	str	r1, [r4, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d13d      	bne.n	800bf9a <_printf_i+0x16a>
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	f040 808e 	bne.w	800c040 <_printf_i+0x210>
 800bf24:	4665      	mov	r5, ip
 800bf26:	2a08      	cmp	r2, #8
 800bf28:	d10b      	bne.n	800bf42 <_printf_i+0x112>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	07db      	lsls	r3, r3, #31
 800bf2e:	d508      	bpl.n	800bf42 <_printf_i+0x112>
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	6862      	ldr	r2, [r4, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	bfde      	ittt	le
 800bf38:	2330      	movle	r3, #48	; 0x30
 800bf3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf42:	ebac 0305 	sub.w	r3, ip, r5
 800bf46:	6123      	str	r3, [r4, #16]
 800bf48:	f8cd 8000 	str.w	r8, [sp]
 800bf4c:	463b      	mov	r3, r7
 800bf4e:	aa03      	add	r2, sp, #12
 800bf50:	4621      	mov	r1, r4
 800bf52:	4630      	mov	r0, r6
 800bf54:	f7ff fef6 	bl	800bd44 <_printf_common>
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d14d      	bne.n	800bff8 <_printf_i+0x1c8>
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf60:	b005      	add	sp, #20
 800bf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf66:	4839      	ldr	r0, [pc, #228]	; (800c04c <_printf_i+0x21c>)
 800bf68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf6c:	6813      	ldr	r3, [r2, #0]
 800bf6e:	6821      	ldr	r1, [r4, #0]
 800bf70:	1d1d      	adds	r5, r3, #4
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6015      	str	r5, [r2, #0]
 800bf76:	060a      	lsls	r2, r1, #24
 800bf78:	d50b      	bpl.n	800bf92 <_printf_i+0x162>
 800bf7a:	07ca      	lsls	r2, r1, #31
 800bf7c:	bf44      	itt	mi
 800bf7e:	f041 0120 	orrmi.w	r1, r1, #32
 800bf82:	6021      	strmi	r1, [r4, #0]
 800bf84:	b91b      	cbnz	r3, 800bf8e <_printf_i+0x15e>
 800bf86:	6822      	ldr	r2, [r4, #0]
 800bf88:	f022 0220 	bic.w	r2, r2, #32
 800bf8c:	6022      	str	r2, [r4, #0]
 800bf8e:	2210      	movs	r2, #16
 800bf90:	e7b7      	b.n	800bf02 <_printf_i+0xd2>
 800bf92:	064d      	lsls	r5, r1, #25
 800bf94:	bf48      	it	mi
 800bf96:	b29b      	uxthmi	r3, r3
 800bf98:	e7ef      	b.n	800bf7a <_printf_i+0x14a>
 800bf9a:	4665      	mov	r5, ip
 800bf9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfa0:	fb02 3311 	mls	r3, r2, r1, r3
 800bfa4:	5cc3      	ldrb	r3, [r0, r3]
 800bfa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bfaa:	460b      	mov	r3, r1
 800bfac:	2900      	cmp	r1, #0
 800bfae:	d1f5      	bne.n	800bf9c <_printf_i+0x16c>
 800bfb0:	e7b9      	b.n	800bf26 <_printf_i+0xf6>
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	6825      	ldr	r5, [r4, #0]
 800bfb6:	1d18      	adds	r0, r3, #4
 800bfb8:	6961      	ldr	r1, [r4, #20]
 800bfba:	6010      	str	r0, [r2, #0]
 800bfbc:	0628      	lsls	r0, r5, #24
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	d501      	bpl.n	800bfc6 <_printf_i+0x196>
 800bfc2:	6019      	str	r1, [r3, #0]
 800bfc4:	e002      	b.n	800bfcc <_printf_i+0x19c>
 800bfc6:	066a      	lsls	r2, r5, #25
 800bfc8:	d5fb      	bpl.n	800bfc2 <_printf_i+0x192>
 800bfca:	8019      	strh	r1, [r3, #0]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4665      	mov	r5, ip
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	e7b9      	b.n	800bf48 <_printf_i+0x118>
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	1d19      	adds	r1, r3, #4
 800bfd8:	6011      	str	r1, [r2, #0]
 800bfda:	681d      	ldr	r5, [r3, #0]
 800bfdc:	6862      	ldr	r2, [r4, #4]
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	f000 feb1 	bl	800cd48 <memchr>
 800bfe6:	b108      	cbz	r0, 800bfec <_printf_i+0x1bc>
 800bfe8:	1b40      	subs	r0, r0, r5
 800bfea:	6060      	str	r0, [r4, #4]
 800bfec:	6863      	ldr	r3, [r4, #4]
 800bfee:	6123      	str	r3, [r4, #16]
 800bff0:	2300      	movs	r3, #0
 800bff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bff6:	e7a7      	b.n	800bf48 <_printf_i+0x118>
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	462a      	mov	r2, r5
 800bffc:	4639      	mov	r1, r7
 800bffe:	4630      	mov	r0, r6
 800c000:	47c0      	blx	r8
 800c002:	3001      	adds	r0, #1
 800c004:	d0aa      	beq.n	800bf5c <_printf_i+0x12c>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	079b      	lsls	r3, r3, #30
 800c00a:	d413      	bmi.n	800c034 <_printf_i+0x204>
 800c00c:	68e0      	ldr	r0, [r4, #12]
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	4298      	cmp	r0, r3
 800c012:	bfb8      	it	lt
 800c014:	4618      	movlt	r0, r3
 800c016:	e7a3      	b.n	800bf60 <_printf_i+0x130>
 800c018:	2301      	movs	r3, #1
 800c01a:	464a      	mov	r2, r9
 800c01c:	4639      	mov	r1, r7
 800c01e:	4630      	mov	r0, r6
 800c020:	47c0      	blx	r8
 800c022:	3001      	adds	r0, #1
 800c024:	d09a      	beq.n	800bf5c <_printf_i+0x12c>
 800c026:	3501      	adds	r5, #1
 800c028:	68e3      	ldr	r3, [r4, #12]
 800c02a:	9a03      	ldr	r2, [sp, #12]
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	42ab      	cmp	r3, r5
 800c030:	dcf2      	bgt.n	800c018 <_printf_i+0x1e8>
 800c032:	e7eb      	b.n	800c00c <_printf_i+0x1dc>
 800c034:	2500      	movs	r5, #0
 800c036:	f104 0919 	add.w	r9, r4, #25
 800c03a:	e7f5      	b.n	800c028 <_printf_i+0x1f8>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1ac      	bne.n	800bf9a <_printf_i+0x16a>
 800c040:	7803      	ldrb	r3, [r0, #0]
 800c042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c04a:	e76c      	b.n	800bf26 <_printf_i+0xf6>
 800c04c:	0800daed 	.word	0x0800daed
 800c050:	0800dafe 	.word	0x0800dafe

0800c054 <_sbrk_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	2300      	movs	r3, #0
 800c058:	4c05      	ldr	r4, [pc, #20]	; (800c070 <_sbrk_r+0x1c>)
 800c05a:	4605      	mov	r5, r0
 800c05c:	4608      	mov	r0, r1
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	f7f9 f990 	bl	8005384 <_sbrk>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	d102      	bne.n	800c06e <_sbrk_r+0x1a>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	b103      	cbz	r3, 800c06e <_sbrk_r+0x1a>
 800c06c:	602b      	str	r3, [r5, #0]
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
 800c070:	20000b7c 	.word	0x20000b7c

0800c074 <strncmp>:
 800c074:	b510      	push	{r4, lr}
 800c076:	b16a      	cbz	r2, 800c094 <strncmp+0x20>
 800c078:	3901      	subs	r1, #1
 800c07a:	1884      	adds	r4, r0, r2
 800c07c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c080:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c084:	4293      	cmp	r3, r2
 800c086:	d103      	bne.n	800c090 <strncmp+0x1c>
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d001      	beq.n	800c090 <strncmp+0x1c>
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1f5      	bne.n	800c07c <strncmp+0x8>
 800c090:	1a98      	subs	r0, r3, r2
 800c092:	bd10      	pop	{r4, pc}
 800c094:	4610      	mov	r0, r2
 800c096:	e7fc      	b.n	800c092 <strncmp+0x1e>

0800c098 <__ascii_wctomb>:
 800c098:	b149      	cbz	r1, 800c0ae <__ascii_wctomb+0x16>
 800c09a:	2aff      	cmp	r2, #255	; 0xff
 800c09c:	bf8b      	itete	hi
 800c09e:	238a      	movhi	r3, #138	; 0x8a
 800c0a0:	700a      	strbls	r2, [r1, #0]
 800c0a2:	6003      	strhi	r3, [r0, #0]
 800c0a4:	2001      	movls	r0, #1
 800c0a6:	bf88      	it	hi
 800c0a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c0ac:	4770      	bx	lr
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	4770      	bx	lr

0800c0b2 <quorem>:
 800c0b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b6:	6903      	ldr	r3, [r0, #16]
 800c0b8:	690c      	ldr	r4, [r1, #16]
 800c0ba:	4680      	mov	r8, r0
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	f2c0 8084 	blt.w	800c1ca <quorem+0x118>
 800c0c2:	3c01      	subs	r4, #1
 800c0c4:	f101 0714 	add.w	r7, r1, #20
 800c0c8:	f100 0614 	add.w	r6, r0, #20
 800c0cc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c0d0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	fbb0 f5f5 	udiv	r5, r0, r5
 800c0da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c0de:	eb06 030c 	add.w	r3, r6, ip
 800c0e2:	eb07 090c 	add.w	r9, r7, ip
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	b39d      	cbz	r5, 800c152 <quorem+0xa0>
 800c0ea:	f04f 0a00 	mov.w	sl, #0
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	46b6      	mov	lr, r6
 800c0f2:	46d3      	mov	fp, sl
 800c0f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c0f8:	b293      	uxth	r3, r2
 800c0fa:	fb05 a303 	mla	r3, r5, r3, sl
 800c0fe:	0c12      	lsrs	r2, r2, #16
 800c100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c104:	fb05 a202 	mla	r2, r5, r2, sl
 800c108:	b29b      	uxth	r3, r3
 800c10a:	ebab 0303 	sub.w	r3, fp, r3
 800c10e:	f8de b000 	ldr.w	fp, [lr]
 800c112:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c116:	fa1f fb8b 	uxth.w	fp, fp
 800c11a:	445b      	add	r3, fp
 800c11c:	fa1f fb82 	uxth.w	fp, r2
 800c120:	f8de 2000 	ldr.w	r2, [lr]
 800c124:	4581      	cmp	r9, r0
 800c126:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c12a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c12e:	b29b      	uxth	r3, r3
 800c130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c134:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c138:	f84e 3b04 	str.w	r3, [lr], #4
 800c13c:	d2da      	bcs.n	800c0f4 <quorem+0x42>
 800c13e:	f856 300c 	ldr.w	r3, [r6, ip]
 800c142:	b933      	cbnz	r3, 800c152 <quorem+0xa0>
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	3b04      	subs	r3, #4
 800c148:	429e      	cmp	r6, r3
 800c14a:	461a      	mov	r2, r3
 800c14c:	d331      	bcc.n	800c1b2 <quorem+0x100>
 800c14e:	f8c8 4010 	str.w	r4, [r8, #16]
 800c152:	4640      	mov	r0, r8
 800c154:	f7ff fa52 	bl	800b5fc <__mcmp>
 800c158:	2800      	cmp	r0, #0
 800c15a:	db26      	blt.n	800c1aa <quorem+0xf8>
 800c15c:	4630      	mov	r0, r6
 800c15e:	f04f 0c00 	mov.w	ip, #0
 800c162:	3501      	adds	r5, #1
 800c164:	f857 1b04 	ldr.w	r1, [r7], #4
 800c168:	f8d0 e000 	ldr.w	lr, [r0]
 800c16c:	b28b      	uxth	r3, r1
 800c16e:	ebac 0303 	sub.w	r3, ip, r3
 800c172:	fa1f f28e 	uxth.w	r2, lr
 800c176:	4413      	add	r3, r2
 800c178:	0c0a      	lsrs	r2, r1, #16
 800c17a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c17e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c182:	b29b      	uxth	r3, r3
 800c184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c188:	45b9      	cmp	r9, r7
 800c18a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c18e:	f840 3b04 	str.w	r3, [r0], #4
 800c192:	d2e7      	bcs.n	800c164 <quorem+0xb2>
 800c194:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c198:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c19c:	b92a      	cbnz	r2, 800c1aa <quorem+0xf8>
 800c19e:	3b04      	subs	r3, #4
 800c1a0:	429e      	cmp	r6, r3
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	d30b      	bcc.n	800c1be <quorem+0x10c>
 800c1a6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	b003      	add	sp, #12
 800c1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b2:	6812      	ldr	r2, [r2, #0]
 800c1b4:	3b04      	subs	r3, #4
 800c1b6:	2a00      	cmp	r2, #0
 800c1b8:	d1c9      	bne.n	800c14e <quorem+0x9c>
 800c1ba:	3c01      	subs	r4, #1
 800c1bc:	e7c4      	b.n	800c148 <quorem+0x96>
 800c1be:	6812      	ldr	r2, [r2, #0]
 800c1c0:	3b04      	subs	r3, #4
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	d1ef      	bne.n	800c1a6 <quorem+0xf4>
 800c1c6:	3c01      	subs	r4, #1
 800c1c8:	e7ea      	b.n	800c1a0 <quorem+0xee>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	e7ee      	b.n	800c1ac <quorem+0xfa>
	...

0800c1d0 <_dtoa_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4616      	mov	r6, r2
 800c1d6:	461f      	mov	r7, r3
 800c1d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c1da:	b095      	sub	sp, #84	; 0x54
 800c1dc:	4604      	mov	r4, r0
 800c1de:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c1e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c1e6:	b93d      	cbnz	r5, 800c1f8 <_dtoa_r+0x28>
 800c1e8:	2010      	movs	r0, #16
 800c1ea:	f000 fda5 	bl	800cd38 <malloc>
 800c1ee:	6260      	str	r0, [r4, #36]	; 0x24
 800c1f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c1f4:	6005      	str	r5, [r0, #0]
 800c1f6:	60c5      	str	r5, [r0, #12]
 800c1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1fa:	6819      	ldr	r1, [r3, #0]
 800c1fc:	b151      	cbz	r1, 800c214 <_dtoa_r+0x44>
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	2301      	movs	r3, #1
 800c202:	4093      	lsls	r3, r2
 800c204:	604a      	str	r2, [r1, #4]
 800c206:	608b      	str	r3, [r1, #8]
 800c208:	4620      	mov	r0, r4
 800c20a:	f7fe ffd9 	bl	800b1c0 <_Bfree>
 800c20e:	2200      	movs	r2, #0
 800c210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	1e3b      	subs	r3, r7, #0
 800c216:	bfaf      	iteee	ge
 800c218:	2300      	movge	r3, #0
 800c21a:	2201      	movlt	r2, #1
 800c21c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c220:	9303      	strlt	r3, [sp, #12]
 800c222:	bfac      	ite	ge
 800c224:	f8c8 3000 	strge.w	r3, [r8]
 800c228:	f8c8 2000 	strlt.w	r2, [r8]
 800c22c:	4bae      	ldr	r3, [pc, #696]	; (800c4e8 <_dtoa_r+0x318>)
 800c22e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c232:	ea33 0308 	bics.w	r3, r3, r8
 800c236:	d11b      	bne.n	800c270 <_dtoa_r+0xa0>
 800c238:	f242 730f 	movw	r3, #9999	; 0x270f
 800c23c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	9b02      	ldr	r3, [sp, #8]
 800c242:	b923      	cbnz	r3, 800c24e <_dtoa_r+0x7e>
 800c244:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c248:	2800      	cmp	r0, #0
 800c24a:	f000 8545 	beq.w	800ccd8 <_dtoa_r+0xb08>
 800c24e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c250:	b953      	cbnz	r3, 800c268 <_dtoa_r+0x98>
 800c252:	4ba6      	ldr	r3, [pc, #664]	; (800c4ec <_dtoa_r+0x31c>)
 800c254:	e021      	b.n	800c29a <_dtoa_r+0xca>
 800c256:	4ba6      	ldr	r3, [pc, #664]	; (800c4f0 <_dtoa_r+0x320>)
 800c258:	9306      	str	r3, [sp, #24]
 800c25a:	3308      	adds	r3, #8
 800c25c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	9806      	ldr	r0, [sp, #24]
 800c262:	b015      	add	sp, #84	; 0x54
 800c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c268:	4ba0      	ldr	r3, [pc, #640]	; (800c4ec <_dtoa_r+0x31c>)
 800c26a:	9306      	str	r3, [sp, #24]
 800c26c:	3303      	adds	r3, #3
 800c26e:	e7f5      	b.n	800c25c <_dtoa_r+0x8c>
 800c270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c274:	2200      	movs	r2, #0
 800c276:	2300      	movs	r3, #0
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 fb94 	bl	80009a8 <__aeabi_dcmpeq>
 800c280:	4682      	mov	sl, r0
 800c282:	b160      	cbz	r0, 800c29e <_dtoa_r+0xce>
 800c284:	2301      	movs	r3, #1
 800c286:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f000 8520 	beq.w	800ccd2 <_dtoa_r+0xb02>
 800c292:	4b98      	ldr	r3, [pc, #608]	; (800c4f4 <_dtoa_r+0x324>)
 800c294:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	3b01      	subs	r3, #1
 800c29a:	9306      	str	r3, [sp, #24]
 800c29c:	e7e0      	b.n	800c260 <_dtoa_r+0x90>
 800c29e:	ab12      	add	r3, sp, #72	; 0x48
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	ab13      	add	r3, sp, #76	; 0x4c
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4632      	mov	r2, r6
 800c2a8:	463b      	mov	r3, r7
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f7ff fa94 	bl	800b7d8 <__d2b>
 800c2b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c2b4:	4683      	mov	fp, r0
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	d07d      	beq.n	800c3b6 <_dtoa_r+0x1e6>
 800c2ba:	46b0      	mov	r8, r6
 800c2bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c2c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c2c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c2cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	4b89      	ldr	r3, [pc, #548]	; (800c4f8 <_dtoa_r+0x328>)
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	f7f3 ff46 	bl	8000168 <__aeabi_dsub>
 800c2dc:	a37c      	add	r3, pc, #496	; (adr r3, 800c4d0 <_dtoa_r+0x300>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f4 f8f9 	bl	80004d8 <__aeabi_dmul>
 800c2e6:	a37c      	add	r3, pc, #496	; (adr r3, 800c4d8 <_dtoa_r+0x308>)
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f7f3 ff3e 	bl	800016c <__adddf3>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	f7f4 f885 	bl	8000404 <__aeabi_i2d>
 800c2fa:	a379      	add	r3, pc, #484	; (adr r3, 800c4e0 <_dtoa_r+0x310>)
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	f7f4 f8ea 	bl	80004d8 <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4630      	mov	r0, r6
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f3 ff2e 	bl	800016c <__adddf3>
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	f7f4 fb7a 	bl	8000a0c <__aeabi_d2iz>
 800c318:	2200      	movs	r2, #0
 800c31a:	4682      	mov	sl, r0
 800c31c:	2300      	movs	r3, #0
 800c31e:	4630      	mov	r0, r6
 800c320:	4639      	mov	r1, r7
 800c322:	f7f4 fb4b 	bl	80009bc <__aeabi_dcmplt>
 800c326:	b148      	cbz	r0, 800c33c <_dtoa_r+0x16c>
 800c328:	4650      	mov	r0, sl
 800c32a:	f7f4 f86b 	bl	8000404 <__aeabi_i2d>
 800c32e:	4632      	mov	r2, r6
 800c330:	463b      	mov	r3, r7
 800c332:	f7f4 fb39 	bl	80009a8 <__aeabi_dcmpeq>
 800c336:	b908      	cbnz	r0, 800c33c <_dtoa_r+0x16c>
 800c338:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c33c:	f1ba 0f16 	cmp.w	sl, #22
 800c340:	d85a      	bhi.n	800c3f8 <_dtoa_r+0x228>
 800c342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c346:	496d      	ldr	r1, [pc, #436]	; (800c4fc <_dtoa_r+0x32c>)
 800c348:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c350:	f7f4 fb52 	bl	80009f8 <__aeabi_dcmpgt>
 800c354:	2800      	cmp	r0, #0
 800c356:	d051      	beq.n	800c3fc <_dtoa_r+0x22c>
 800c358:	2300      	movs	r3, #0
 800c35a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c35e:	930d      	str	r3, [sp, #52]	; 0x34
 800c360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c362:	1b5d      	subs	r5, r3, r5
 800c364:	1e6b      	subs	r3, r5, #1
 800c366:	9307      	str	r3, [sp, #28]
 800c368:	bf43      	ittte	mi
 800c36a:	2300      	movmi	r3, #0
 800c36c:	f1c5 0901 	rsbmi	r9, r5, #1
 800c370:	9307      	strmi	r3, [sp, #28]
 800c372:	f04f 0900 	movpl.w	r9, #0
 800c376:	f1ba 0f00 	cmp.w	sl, #0
 800c37a:	db41      	blt.n	800c400 <_dtoa_r+0x230>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c382:	4453      	add	r3, sl
 800c384:	9307      	str	r3, [sp, #28]
 800c386:	2300      	movs	r3, #0
 800c388:	9308      	str	r3, [sp, #32]
 800c38a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c38c:	2b09      	cmp	r3, #9
 800c38e:	f200 808f 	bhi.w	800c4b0 <_dtoa_r+0x2e0>
 800c392:	2b05      	cmp	r3, #5
 800c394:	bfc4      	itt	gt
 800c396:	3b04      	subgt	r3, #4
 800c398:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c39a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c39c:	bfc8      	it	gt
 800c39e:	2500      	movgt	r5, #0
 800c3a0:	f1a3 0302 	sub.w	r3, r3, #2
 800c3a4:	bfd8      	it	le
 800c3a6:	2501      	movle	r5, #1
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	f200 808d 	bhi.w	800c4c8 <_dtoa_r+0x2f8>
 800c3ae:	e8df f003 	tbb	[pc, r3]
 800c3b2:	7d7b      	.short	0x7d7b
 800c3b4:	6f2f      	.short	0x6f2f
 800c3b6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c3ba:	441d      	add	r5, r3
 800c3bc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c3c0:	2820      	cmp	r0, #32
 800c3c2:	dd13      	ble.n	800c3ec <_dtoa_r+0x21c>
 800c3c4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c3c8:	9b02      	ldr	r3, [sp, #8]
 800c3ca:	fa08 f800 	lsl.w	r8, r8, r0
 800c3ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c3d2:	fa23 f000 	lsr.w	r0, r3, r0
 800c3d6:	ea48 0000 	orr.w	r0, r8, r0
 800c3da:	f7f4 f803 	bl	80003e4 <__aeabi_ui2d>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4680      	mov	r8, r0
 800c3e2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c3e6:	3d01      	subs	r5, #1
 800c3e8:	9310      	str	r3, [sp, #64]	; 0x40
 800c3ea:	e771      	b.n	800c2d0 <_dtoa_r+0x100>
 800c3ec:	9b02      	ldr	r3, [sp, #8]
 800c3ee:	f1c0 0020 	rsb	r0, r0, #32
 800c3f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c3f6:	e7f0      	b.n	800c3da <_dtoa_r+0x20a>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e7b0      	b.n	800c35e <_dtoa_r+0x18e>
 800c3fc:	900d      	str	r0, [sp, #52]	; 0x34
 800c3fe:	e7af      	b.n	800c360 <_dtoa_r+0x190>
 800c400:	f1ca 0300 	rsb	r3, sl, #0
 800c404:	9308      	str	r3, [sp, #32]
 800c406:	2300      	movs	r3, #0
 800c408:	eba9 090a 	sub.w	r9, r9, sl
 800c40c:	930c      	str	r3, [sp, #48]	; 0x30
 800c40e:	e7bc      	b.n	800c38a <_dtoa_r+0x1ba>
 800c410:	2301      	movs	r3, #1
 800c412:	9309      	str	r3, [sp, #36]	; 0x24
 800c414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c416:	2b00      	cmp	r3, #0
 800c418:	dd74      	ble.n	800c504 <_dtoa_r+0x334>
 800c41a:	4698      	mov	r8, r3
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	2200      	movs	r2, #0
 800c420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c422:	6072      	str	r2, [r6, #4]
 800c424:	2204      	movs	r2, #4
 800c426:	f102 0014 	add.w	r0, r2, #20
 800c42a:	4298      	cmp	r0, r3
 800c42c:	6871      	ldr	r1, [r6, #4]
 800c42e:	d96e      	bls.n	800c50e <_dtoa_r+0x33e>
 800c430:	4620      	mov	r0, r4
 800c432:	f7fe fe91 	bl	800b158 <_Balloc>
 800c436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c438:	6030      	str	r0, [r6, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f1b8 0f0e 	cmp.w	r8, #14
 800c440:	9306      	str	r3, [sp, #24]
 800c442:	f200 80ed 	bhi.w	800c620 <_dtoa_r+0x450>
 800c446:	2d00      	cmp	r5, #0
 800c448:	f000 80ea 	beq.w	800c620 <_dtoa_r+0x450>
 800c44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c450:	f1ba 0f00 	cmp.w	sl, #0
 800c454:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c458:	dd77      	ble.n	800c54a <_dtoa_r+0x37a>
 800c45a:	4a28      	ldr	r2, [pc, #160]	; (800c4fc <_dtoa_r+0x32c>)
 800c45c:	f00a 030f 	and.w	r3, sl, #15
 800c460:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c468:	06f0      	lsls	r0, r6, #27
 800c46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c472:	d568      	bpl.n	800c546 <_dtoa_r+0x376>
 800c474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c478:	4b21      	ldr	r3, [pc, #132]	; (800c500 <_dtoa_r+0x330>)
 800c47a:	2503      	movs	r5, #3
 800c47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c480:	f7f4 f954 	bl	800072c <__aeabi_ddiv>
 800c484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c488:	f006 060f 	and.w	r6, r6, #15
 800c48c:	4f1c      	ldr	r7, [pc, #112]	; (800c500 <_dtoa_r+0x330>)
 800c48e:	e04f      	b.n	800c530 <_dtoa_r+0x360>
 800c490:	2301      	movs	r3, #1
 800c492:	9309      	str	r3, [sp, #36]	; 0x24
 800c494:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c496:	4453      	add	r3, sl
 800c498:	f103 0801 	add.w	r8, r3, #1
 800c49c:	9304      	str	r3, [sp, #16]
 800c49e:	4643      	mov	r3, r8
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	bfb8      	it	lt
 800c4a4:	2301      	movlt	r3, #1
 800c4a6:	e7ba      	b.n	800c41e <_dtoa_r+0x24e>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e7b2      	b.n	800c412 <_dtoa_r+0x242>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e7f0      	b.n	800c492 <_dtoa_r+0x2c2>
 800c4b0:	2501      	movs	r5, #1
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	9509      	str	r5, [sp, #36]	; 0x24
 800c4b6:	931e      	str	r3, [sp, #120]	; 0x78
 800c4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4bc:	2200      	movs	r2, #0
 800c4be:	9304      	str	r3, [sp, #16]
 800c4c0:	4698      	mov	r8, r3
 800c4c2:	2312      	movs	r3, #18
 800c4c4:	921f      	str	r2, [sp, #124]	; 0x7c
 800c4c6:	e7aa      	b.n	800c41e <_dtoa_r+0x24e>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c4cc:	e7f4      	b.n	800c4b8 <_dtoa_r+0x2e8>
 800c4ce:	bf00      	nop
 800c4d0:	636f4361 	.word	0x636f4361
 800c4d4:	3fd287a7 	.word	0x3fd287a7
 800c4d8:	8b60c8b3 	.word	0x8b60c8b3
 800c4dc:	3fc68a28 	.word	0x3fc68a28
 800c4e0:	509f79fb 	.word	0x509f79fb
 800c4e4:	3fd34413 	.word	0x3fd34413
 800c4e8:	7ff00000 	.word	0x7ff00000
 800c4ec:	0800dc19 	.word	0x0800dc19
 800c4f0:	0800dc10 	.word	0x0800dc10
 800c4f4:	0800dc1e 	.word	0x0800dc1e
 800c4f8:	3ff80000 	.word	0x3ff80000
 800c4fc:	0800da08 	.word	0x0800da08
 800c500:	0800d9e0 	.word	0x0800d9e0
 800c504:	2301      	movs	r3, #1
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	4698      	mov	r8, r3
 800c50a:	461a      	mov	r2, r3
 800c50c:	e7da      	b.n	800c4c4 <_dtoa_r+0x2f4>
 800c50e:	3101      	adds	r1, #1
 800c510:	6071      	str	r1, [r6, #4]
 800c512:	0052      	lsls	r2, r2, #1
 800c514:	e787      	b.n	800c426 <_dtoa_r+0x256>
 800c516:	07f1      	lsls	r1, r6, #31
 800c518:	d508      	bpl.n	800c52c <_dtoa_r+0x35c>
 800c51a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c51e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c522:	f7f3 ffd9 	bl	80004d8 <__aeabi_dmul>
 800c526:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c52a:	3501      	adds	r5, #1
 800c52c:	1076      	asrs	r6, r6, #1
 800c52e:	3708      	adds	r7, #8
 800c530:	2e00      	cmp	r6, #0
 800c532:	d1f0      	bne.n	800c516 <_dtoa_r+0x346>
 800c534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c53c:	f7f4 f8f6 	bl	800072c <__aeabi_ddiv>
 800c540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c544:	e01b      	b.n	800c57e <_dtoa_r+0x3ae>
 800c546:	2502      	movs	r5, #2
 800c548:	e7a0      	b.n	800c48c <_dtoa_r+0x2bc>
 800c54a:	f000 80a4 	beq.w	800c696 <_dtoa_r+0x4c6>
 800c54e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c552:	f1ca 0600 	rsb	r6, sl, #0
 800c556:	4ba0      	ldr	r3, [pc, #640]	; (800c7d8 <_dtoa_r+0x608>)
 800c558:	f006 020f 	and.w	r2, r6, #15
 800c55c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f3 ffb8 	bl	80004d8 <__aeabi_dmul>
 800c568:	2502      	movs	r5, #2
 800c56a:	2300      	movs	r3, #0
 800c56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c570:	4f9a      	ldr	r7, [pc, #616]	; (800c7dc <_dtoa_r+0x60c>)
 800c572:	1136      	asrs	r6, r6, #4
 800c574:	2e00      	cmp	r6, #0
 800c576:	f040 8083 	bne.w	800c680 <_dtoa_r+0x4b0>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1e0      	bne.n	800c540 <_dtoa_r+0x370>
 800c57e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 808a 	beq.w	800c69a <_dtoa_r+0x4ca>
 800c586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c58e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c592:	2200      	movs	r2, #0
 800c594:	4b92      	ldr	r3, [pc, #584]	; (800c7e0 <_dtoa_r+0x610>)
 800c596:	f7f4 fa11 	bl	80009bc <__aeabi_dcmplt>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d07d      	beq.n	800c69a <_dtoa_r+0x4ca>
 800c59e:	f1b8 0f00 	cmp.w	r8, #0
 800c5a2:	d07a      	beq.n	800c69a <_dtoa_r+0x4ca>
 800c5a4:	9b04      	ldr	r3, [sp, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dd36      	ble.n	800c618 <_dtoa_r+0x448>
 800c5aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4b8c      	ldr	r3, [pc, #560]	; (800c7e4 <_dtoa_r+0x614>)
 800c5b2:	f7f3 ff91 	bl	80004d8 <__aeabi_dmul>
 800c5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ba:	9e04      	ldr	r6, [sp, #16]
 800c5bc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800c5c0:	3501      	adds	r5, #1
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f7f3 ff1e 	bl	8000404 <__aeabi_i2d>
 800c5c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5cc:	f7f3 ff84 	bl	80004d8 <__aeabi_dmul>
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	4b85      	ldr	r3, [pc, #532]	; (800c7e8 <_dtoa_r+0x618>)
 800c5d4:	f7f3 fdca 	bl	800016c <__adddf3>
 800c5d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c5dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c5e0:	950b      	str	r5, [sp, #44]	; 0x2c
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	d15c      	bne.n	800c6a0 <_dtoa_r+0x4d0>
 800c5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	4b7f      	ldr	r3, [pc, #508]	; (800c7ec <_dtoa_r+0x61c>)
 800c5ee:	f7f3 fdbb 	bl	8000168 <__aeabi_dsub>
 800c5f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5fa:	f7f4 f9fd 	bl	80009f8 <__aeabi_dcmpgt>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f040 8281 	bne.w	800cb06 <_dtoa_r+0x936>
 800c604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c60a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c60e:	f7f4 f9d5 	bl	80009bc <__aeabi_dcmplt>
 800c612:	2800      	cmp	r0, #0
 800c614:	f040 8275 	bne.w	800cb02 <_dtoa_r+0x932>
 800c618:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c61c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c622:	2b00      	cmp	r3, #0
 800c624:	f2c0 814b 	blt.w	800c8be <_dtoa_r+0x6ee>
 800c628:	f1ba 0f0e 	cmp.w	sl, #14
 800c62c:	f300 8147 	bgt.w	800c8be <_dtoa_r+0x6ee>
 800c630:	4b69      	ldr	r3, [pc, #420]	; (800c7d8 <_dtoa_r+0x608>)
 800c632:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c63e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c640:	2b00      	cmp	r3, #0
 800c642:	f280 80d7 	bge.w	800c7f4 <_dtoa_r+0x624>
 800c646:	f1b8 0f00 	cmp.w	r8, #0
 800c64a:	f300 80d3 	bgt.w	800c7f4 <_dtoa_r+0x624>
 800c64e:	f040 8257 	bne.w	800cb00 <_dtoa_r+0x930>
 800c652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c656:	2200      	movs	r2, #0
 800c658:	4b64      	ldr	r3, [pc, #400]	; (800c7ec <_dtoa_r+0x61c>)
 800c65a:	f7f3 ff3d 	bl	80004d8 <__aeabi_dmul>
 800c65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c662:	f7f4 f9bf 	bl	80009e4 <__aeabi_dcmpge>
 800c666:	4646      	mov	r6, r8
 800c668:	4647      	mov	r7, r8
 800c66a:	2800      	cmp	r0, #0
 800c66c:	f040 822d 	bne.w	800caca <_dtoa_r+0x8fa>
 800c670:	9b06      	ldr	r3, [sp, #24]
 800c672:	9a06      	ldr	r2, [sp, #24]
 800c674:	1c5d      	adds	r5, r3, #1
 800c676:	2331      	movs	r3, #49	; 0x31
 800c678:	f10a 0a01 	add.w	sl, sl, #1
 800c67c:	7013      	strb	r3, [r2, #0]
 800c67e:	e228      	b.n	800cad2 <_dtoa_r+0x902>
 800c680:	07f2      	lsls	r2, r6, #31
 800c682:	d505      	bpl.n	800c690 <_dtoa_r+0x4c0>
 800c684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c688:	f7f3 ff26 	bl	80004d8 <__aeabi_dmul>
 800c68c:	2301      	movs	r3, #1
 800c68e:	3501      	adds	r5, #1
 800c690:	1076      	asrs	r6, r6, #1
 800c692:	3708      	adds	r7, #8
 800c694:	e76e      	b.n	800c574 <_dtoa_r+0x3a4>
 800c696:	2502      	movs	r5, #2
 800c698:	e771      	b.n	800c57e <_dtoa_r+0x3ae>
 800c69a:	4657      	mov	r7, sl
 800c69c:	4646      	mov	r6, r8
 800c69e:	e790      	b.n	800c5c2 <_dtoa_r+0x3f2>
 800c6a0:	4b4d      	ldr	r3, [pc, #308]	; (800c7d8 <_dtoa_r+0x608>)
 800c6a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6a6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d048      	beq.n	800c742 <_dtoa_r+0x572>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	494e      	ldr	r1, [pc, #312]	; (800c7f0 <_dtoa_r+0x620>)
 800c6b8:	f7f4 f838 	bl	800072c <__aeabi_ddiv>
 800c6bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6c0:	f7f3 fd52 	bl	8000168 <__aeabi_dsub>
 800c6c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c6c8:	9d06      	ldr	r5, [sp, #24]
 800c6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ce:	f7f4 f99d 	bl	8000a0c <__aeabi_d2iz>
 800c6d2:	9011      	str	r0, [sp, #68]	; 0x44
 800c6d4:	f7f3 fe96 	bl	8000404 <__aeabi_i2d>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6e0:	f7f3 fd42 	bl	8000168 <__aeabi_dsub>
 800c6e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ea:	3330      	adds	r3, #48	; 0x30
 800c6ec:	f805 3b01 	strb.w	r3, [r5], #1
 800c6f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6f4:	f7f4 f962 	bl	80009bc <__aeabi_dcmplt>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d163      	bne.n	800c7c4 <_dtoa_r+0x5f4>
 800c6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c700:	2000      	movs	r0, #0
 800c702:	4937      	ldr	r1, [pc, #220]	; (800c7e0 <_dtoa_r+0x610>)
 800c704:	f7f3 fd30 	bl	8000168 <__aeabi_dsub>
 800c708:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c70c:	f7f4 f956 	bl	80009bc <__aeabi_dcmplt>
 800c710:	2800      	cmp	r0, #0
 800c712:	f040 80b5 	bne.w	800c880 <_dtoa_r+0x6b0>
 800c716:	9b06      	ldr	r3, [sp, #24]
 800c718:	1aeb      	subs	r3, r5, r3
 800c71a:	429e      	cmp	r6, r3
 800c71c:	f77f af7c 	ble.w	800c618 <_dtoa_r+0x448>
 800c720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c724:	2200      	movs	r2, #0
 800c726:	4b2f      	ldr	r3, [pc, #188]	; (800c7e4 <_dtoa_r+0x614>)
 800c728:	f7f3 fed6 	bl	80004d8 <__aeabi_dmul>
 800c72c:	2200      	movs	r2, #0
 800c72e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c736:	4b2b      	ldr	r3, [pc, #172]	; (800c7e4 <_dtoa_r+0x614>)
 800c738:	f7f3 fece 	bl	80004d8 <__aeabi_dmul>
 800c73c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c740:	e7c3      	b.n	800c6ca <_dtoa_r+0x4fa>
 800c742:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c746:	f7f3 fec7 	bl	80004d8 <__aeabi_dmul>
 800c74a:	9b06      	ldr	r3, [sp, #24]
 800c74c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c750:	199d      	adds	r5, r3, r6
 800c752:	461e      	mov	r6, r3
 800c754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c758:	f7f4 f958 	bl	8000a0c <__aeabi_d2iz>
 800c75c:	9011      	str	r0, [sp, #68]	; 0x44
 800c75e:	f7f3 fe51 	bl	8000404 <__aeabi_i2d>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c76a:	f7f3 fcfd 	bl	8000168 <__aeabi_dsub>
 800c76e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c774:	3330      	adds	r3, #48	; 0x30
 800c776:	f806 3b01 	strb.w	r3, [r6], #1
 800c77a:	42ae      	cmp	r6, r5
 800c77c:	f04f 0200 	mov.w	r2, #0
 800c780:	d124      	bne.n	800c7cc <_dtoa_r+0x5fc>
 800c782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c786:	4b1a      	ldr	r3, [pc, #104]	; (800c7f0 <_dtoa_r+0x620>)
 800c788:	f7f3 fcf0 	bl	800016c <__adddf3>
 800c78c:	4602      	mov	r2, r0
 800c78e:	460b      	mov	r3, r1
 800c790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c794:	f7f4 f930 	bl	80009f8 <__aeabi_dcmpgt>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d171      	bne.n	800c880 <_dtoa_r+0x6b0>
 800c79c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	4913      	ldr	r1, [pc, #76]	; (800c7f0 <_dtoa_r+0x620>)
 800c7a4:	f7f3 fce0 	bl	8000168 <__aeabi_dsub>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7b0:	f7f4 f904 	bl	80009bc <__aeabi_dcmplt>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	f43f af2f 	beq.w	800c618 <_dtoa_r+0x448>
 800c7ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7be:	1e6a      	subs	r2, r5, #1
 800c7c0:	2b30      	cmp	r3, #48	; 0x30
 800c7c2:	d001      	beq.n	800c7c8 <_dtoa_r+0x5f8>
 800c7c4:	46ba      	mov	sl, r7
 800c7c6:	e04a      	b.n	800c85e <_dtoa_r+0x68e>
 800c7c8:	4615      	mov	r5, r2
 800c7ca:	e7f6      	b.n	800c7ba <_dtoa_r+0x5ea>
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <_dtoa_r+0x614>)
 800c7ce:	f7f3 fe83 	bl	80004d8 <__aeabi_dmul>
 800c7d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7d6:	e7bd      	b.n	800c754 <_dtoa_r+0x584>
 800c7d8:	0800da08 	.word	0x0800da08
 800c7dc:	0800d9e0 	.word	0x0800d9e0
 800c7e0:	3ff00000 	.word	0x3ff00000
 800c7e4:	40240000 	.word	0x40240000
 800c7e8:	401c0000 	.word	0x401c0000
 800c7ec:	40140000 	.word	0x40140000
 800c7f0:	3fe00000 	.word	0x3fe00000
 800c7f4:	9d06      	ldr	r5, [sp, #24]
 800c7f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7f3 ff93 	bl	800072c <__aeabi_ddiv>
 800c806:	f7f4 f901 	bl	8000a0c <__aeabi_d2iz>
 800c80a:	4681      	mov	r9, r0
 800c80c:	f7f3 fdfa 	bl	8000404 <__aeabi_i2d>
 800c810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c814:	f7f3 fe60 	bl	80004d8 <__aeabi_dmul>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4630      	mov	r0, r6
 800c81e:	4639      	mov	r1, r7
 800c820:	f7f3 fca2 	bl	8000168 <__aeabi_dsub>
 800c824:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800c828:	f805 6b01 	strb.w	r6, [r5], #1
 800c82c:	9e06      	ldr	r6, [sp, #24]
 800c82e:	4602      	mov	r2, r0
 800c830:	1bae      	subs	r6, r5, r6
 800c832:	45b0      	cmp	r8, r6
 800c834:	460b      	mov	r3, r1
 800c836:	d135      	bne.n	800c8a4 <_dtoa_r+0x6d4>
 800c838:	f7f3 fc98 	bl	800016c <__adddf3>
 800c83c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c840:	4606      	mov	r6, r0
 800c842:	460f      	mov	r7, r1
 800c844:	f7f4 f8d8 	bl	80009f8 <__aeabi_dcmpgt>
 800c848:	b9c8      	cbnz	r0, 800c87e <_dtoa_r+0x6ae>
 800c84a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c84e:	4630      	mov	r0, r6
 800c850:	4639      	mov	r1, r7
 800c852:	f7f4 f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 800c856:	b110      	cbz	r0, 800c85e <_dtoa_r+0x68e>
 800c858:	f019 0f01 	tst.w	r9, #1
 800c85c:	d10f      	bne.n	800c87e <_dtoa_r+0x6ae>
 800c85e:	4659      	mov	r1, fp
 800c860:	4620      	mov	r0, r4
 800c862:	f7fe fcad 	bl	800b1c0 <_Bfree>
 800c866:	2300      	movs	r3, #0
 800c868:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c86a:	702b      	strb	r3, [r5, #0]
 800c86c:	f10a 0301 	add.w	r3, sl, #1
 800c870:	6013      	str	r3, [r2, #0]
 800c872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c874:	2b00      	cmp	r3, #0
 800c876:	f43f acf3 	beq.w	800c260 <_dtoa_r+0x90>
 800c87a:	601d      	str	r5, [r3, #0]
 800c87c:	e4f0      	b.n	800c260 <_dtoa_r+0x90>
 800c87e:	4657      	mov	r7, sl
 800c880:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c884:	1e6b      	subs	r3, r5, #1
 800c886:	2a39      	cmp	r2, #57	; 0x39
 800c888:	d106      	bne.n	800c898 <_dtoa_r+0x6c8>
 800c88a:	9a06      	ldr	r2, [sp, #24]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d107      	bne.n	800c8a0 <_dtoa_r+0x6d0>
 800c890:	2330      	movs	r3, #48	; 0x30
 800c892:	7013      	strb	r3, [r2, #0]
 800c894:	4613      	mov	r3, r2
 800c896:	3701      	adds	r7, #1
 800c898:	781a      	ldrb	r2, [r3, #0]
 800c89a:	3201      	adds	r2, #1
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	e791      	b.n	800c7c4 <_dtoa_r+0x5f4>
 800c8a0:	461d      	mov	r5, r3
 800c8a2:	e7ed      	b.n	800c880 <_dtoa_r+0x6b0>
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4b99      	ldr	r3, [pc, #612]	; (800cb0c <_dtoa_r+0x93c>)
 800c8a8:	f7f3 fe16 	bl	80004d8 <__aeabi_dmul>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	460f      	mov	r7, r1
 800c8b4:	f7f4 f878 	bl	80009a8 <__aeabi_dcmpeq>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d09e      	beq.n	800c7fa <_dtoa_r+0x62a>
 800c8bc:	e7cf      	b.n	800c85e <_dtoa_r+0x68e>
 800c8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8c0:	2a00      	cmp	r2, #0
 800c8c2:	f000 8088 	beq.w	800c9d6 <_dtoa_r+0x806>
 800c8c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c8c8:	2a01      	cmp	r2, #1
 800c8ca:	dc6d      	bgt.n	800c9a8 <_dtoa_r+0x7d8>
 800c8cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	d066      	beq.n	800c9a0 <_dtoa_r+0x7d0>
 800c8d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c8d6:	464d      	mov	r5, r9
 800c8d8:	9e08      	ldr	r6, [sp, #32]
 800c8da:	9a07      	ldr	r2, [sp, #28]
 800c8dc:	2101      	movs	r1, #1
 800c8de:	441a      	add	r2, r3
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	4499      	add	r9, r3
 800c8e4:	9207      	str	r2, [sp, #28]
 800c8e6:	f7fe fd49 	bl	800b37c <__i2b>
 800c8ea:	4607      	mov	r7, r0
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	dd0b      	ble.n	800c908 <_dtoa_r+0x738>
 800c8f0:	9b07      	ldr	r3, [sp, #28]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	dd08      	ble.n	800c908 <_dtoa_r+0x738>
 800c8f6:	42ab      	cmp	r3, r5
 800c8f8:	bfa8      	it	ge
 800c8fa:	462b      	movge	r3, r5
 800c8fc:	9a07      	ldr	r2, [sp, #28]
 800c8fe:	eba9 0903 	sub.w	r9, r9, r3
 800c902:	1aed      	subs	r5, r5, r3
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	9307      	str	r3, [sp, #28]
 800c908:	9b08      	ldr	r3, [sp, #32]
 800c90a:	b1eb      	cbz	r3, 800c948 <_dtoa_r+0x778>
 800c90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d065      	beq.n	800c9de <_dtoa_r+0x80e>
 800c912:	b18e      	cbz	r6, 800c938 <_dtoa_r+0x768>
 800c914:	4639      	mov	r1, r7
 800c916:	4632      	mov	r2, r6
 800c918:	4620      	mov	r0, r4
 800c91a:	f7fe fdcd 	bl	800b4b8 <__pow5mult>
 800c91e:	465a      	mov	r2, fp
 800c920:	4601      	mov	r1, r0
 800c922:	4607      	mov	r7, r0
 800c924:	4620      	mov	r0, r4
 800c926:	f7fe fd32 	bl	800b38e <__multiply>
 800c92a:	4659      	mov	r1, fp
 800c92c:	900a      	str	r0, [sp, #40]	; 0x28
 800c92e:	4620      	mov	r0, r4
 800c930:	f7fe fc46 	bl	800b1c0 <_Bfree>
 800c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c936:	469b      	mov	fp, r3
 800c938:	9b08      	ldr	r3, [sp, #32]
 800c93a:	1b9a      	subs	r2, r3, r6
 800c93c:	d004      	beq.n	800c948 <_dtoa_r+0x778>
 800c93e:	4659      	mov	r1, fp
 800c940:	4620      	mov	r0, r4
 800c942:	f7fe fdb9 	bl	800b4b8 <__pow5mult>
 800c946:	4683      	mov	fp, r0
 800c948:	2101      	movs	r1, #1
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7fe fd16 	bl	800b37c <__i2b>
 800c950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c952:	4606      	mov	r6, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 81c6 	beq.w	800cce6 <_dtoa_r+0xb16>
 800c95a:	461a      	mov	r2, r3
 800c95c:	4601      	mov	r1, r0
 800c95e:	4620      	mov	r0, r4
 800c960:	f7fe fdaa 	bl	800b4b8 <__pow5mult>
 800c964:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c966:	4606      	mov	r6, r0
 800c968:	2b01      	cmp	r3, #1
 800c96a:	dc3e      	bgt.n	800c9ea <_dtoa_r+0x81a>
 800c96c:	9b02      	ldr	r3, [sp, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d137      	bne.n	800c9e2 <_dtoa_r+0x812>
 800c972:	9b03      	ldr	r3, [sp, #12]
 800c974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d134      	bne.n	800c9e6 <_dtoa_r+0x816>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c982:	0d1b      	lsrs	r3, r3, #20
 800c984:	051b      	lsls	r3, r3, #20
 800c986:	b12b      	cbz	r3, 800c994 <_dtoa_r+0x7c4>
 800c988:	9b07      	ldr	r3, [sp, #28]
 800c98a:	f109 0901 	add.w	r9, r9, #1
 800c98e:	3301      	adds	r3, #1
 800c990:	9307      	str	r3, [sp, #28]
 800c992:	2301      	movs	r3, #1
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d128      	bne.n	800c9ee <_dtoa_r+0x81e>
 800c99c:	2001      	movs	r0, #1
 800c99e:	e02e      	b.n	800c9fe <_dtoa_r+0x82e>
 800c9a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9a6:	e796      	b.n	800c8d6 <_dtoa_r+0x706>
 800c9a8:	9b08      	ldr	r3, [sp, #32]
 800c9aa:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800c9ae:	42b3      	cmp	r3, r6
 800c9b0:	bfb7      	itett	lt
 800c9b2:	9b08      	ldrlt	r3, [sp, #32]
 800c9b4:	1b9e      	subge	r6, r3, r6
 800c9b6:	1af2      	sublt	r2, r6, r3
 800c9b8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800c9ba:	bfbf      	itttt	lt
 800c9bc:	9608      	strlt	r6, [sp, #32]
 800c9be:	189b      	addlt	r3, r3, r2
 800c9c0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800c9c2:	2600      	movlt	r6, #0
 800c9c4:	f1b8 0f00 	cmp.w	r8, #0
 800c9c8:	bfb9      	ittee	lt
 800c9ca:	eba9 0508 	sublt.w	r5, r9, r8
 800c9ce:	2300      	movlt	r3, #0
 800c9d0:	464d      	movge	r5, r9
 800c9d2:	4643      	movge	r3, r8
 800c9d4:	e781      	b.n	800c8da <_dtoa_r+0x70a>
 800c9d6:	9e08      	ldr	r6, [sp, #32]
 800c9d8:	464d      	mov	r5, r9
 800c9da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9dc:	e786      	b.n	800c8ec <_dtoa_r+0x71c>
 800c9de:	9a08      	ldr	r2, [sp, #32]
 800c9e0:	e7ad      	b.n	800c93e <_dtoa_r+0x76e>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e7d6      	b.n	800c994 <_dtoa_r+0x7c4>
 800c9e6:	9b02      	ldr	r3, [sp, #8]
 800c9e8:	e7d4      	b.n	800c994 <_dtoa_r+0x7c4>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	9308      	str	r3, [sp, #32]
 800c9ee:	6933      	ldr	r3, [r6, #16]
 800c9f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9f4:	6918      	ldr	r0, [r3, #16]
 800c9f6:	f7fe fc73 	bl	800b2e0 <__hi0bits>
 800c9fa:	f1c0 0020 	rsb	r0, r0, #32
 800c9fe:	9b07      	ldr	r3, [sp, #28]
 800ca00:	4418      	add	r0, r3
 800ca02:	f010 001f 	ands.w	r0, r0, #31
 800ca06:	d047      	beq.n	800ca98 <_dtoa_r+0x8c8>
 800ca08:	f1c0 0320 	rsb	r3, r0, #32
 800ca0c:	2b04      	cmp	r3, #4
 800ca0e:	dd3b      	ble.n	800ca88 <_dtoa_r+0x8b8>
 800ca10:	9b07      	ldr	r3, [sp, #28]
 800ca12:	f1c0 001c 	rsb	r0, r0, #28
 800ca16:	4481      	add	r9, r0
 800ca18:	4405      	add	r5, r0
 800ca1a:	4403      	add	r3, r0
 800ca1c:	9307      	str	r3, [sp, #28]
 800ca1e:	f1b9 0f00 	cmp.w	r9, #0
 800ca22:	dd05      	ble.n	800ca30 <_dtoa_r+0x860>
 800ca24:	4659      	mov	r1, fp
 800ca26:	464a      	mov	r2, r9
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f7fe fd93 	bl	800b554 <__lshift>
 800ca2e:	4683      	mov	fp, r0
 800ca30:	9b07      	ldr	r3, [sp, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	dd05      	ble.n	800ca42 <_dtoa_r+0x872>
 800ca36:	4631      	mov	r1, r6
 800ca38:	461a      	mov	r2, r3
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f7fe fd8a 	bl	800b554 <__lshift>
 800ca40:	4606      	mov	r6, r0
 800ca42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca44:	b353      	cbz	r3, 800ca9c <_dtoa_r+0x8cc>
 800ca46:	4631      	mov	r1, r6
 800ca48:	4658      	mov	r0, fp
 800ca4a:	f7fe fdd7 	bl	800b5fc <__mcmp>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	da24      	bge.n	800ca9c <_dtoa_r+0x8cc>
 800ca52:	2300      	movs	r3, #0
 800ca54:	4659      	mov	r1, fp
 800ca56:	220a      	movs	r2, #10
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7fe fbc8 	bl	800b1ee <__multadd>
 800ca5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca60:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca64:	4683      	mov	fp, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 8144 	beq.w	800ccf4 <_dtoa_r+0xb24>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4639      	mov	r1, r7
 800ca70:	220a      	movs	r2, #10
 800ca72:	4620      	mov	r0, r4
 800ca74:	f7fe fbbb 	bl	800b1ee <__multadd>
 800ca78:	9b04      	ldr	r3, [sp, #16]
 800ca7a:	4607      	mov	r7, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	dc4d      	bgt.n	800cb1c <_dtoa_r+0x94c>
 800ca80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	dd4a      	ble.n	800cb1c <_dtoa_r+0x94c>
 800ca86:	e011      	b.n	800caac <_dtoa_r+0x8dc>
 800ca88:	d0c9      	beq.n	800ca1e <_dtoa_r+0x84e>
 800ca8a:	9a07      	ldr	r2, [sp, #28]
 800ca8c:	331c      	adds	r3, #28
 800ca8e:	441a      	add	r2, r3
 800ca90:	4499      	add	r9, r3
 800ca92:	441d      	add	r5, r3
 800ca94:	4613      	mov	r3, r2
 800ca96:	e7c1      	b.n	800ca1c <_dtoa_r+0x84c>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	e7f6      	b.n	800ca8a <_dtoa_r+0x8ba>
 800ca9c:	f1b8 0f00 	cmp.w	r8, #0
 800caa0:	dc36      	bgt.n	800cb10 <_dtoa_r+0x940>
 800caa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	dd33      	ble.n	800cb10 <_dtoa_r+0x940>
 800caa8:	f8cd 8010 	str.w	r8, [sp, #16]
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	b963      	cbnz	r3, 800caca <_dtoa_r+0x8fa>
 800cab0:	4631      	mov	r1, r6
 800cab2:	2205      	movs	r2, #5
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7fe fb9a 	bl	800b1ee <__multadd>
 800caba:	4601      	mov	r1, r0
 800cabc:	4606      	mov	r6, r0
 800cabe:	4658      	mov	r0, fp
 800cac0:	f7fe fd9c 	bl	800b5fc <__mcmp>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	f73f add3 	bgt.w	800c670 <_dtoa_r+0x4a0>
 800caca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cacc:	9d06      	ldr	r5, [sp, #24]
 800cace:	ea6f 0a03 	mvn.w	sl, r3
 800cad2:	f04f 0900 	mov.w	r9, #0
 800cad6:	4631      	mov	r1, r6
 800cad8:	4620      	mov	r0, r4
 800cada:	f7fe fb71 	bl	800b1c0 <_Bfree>
 800cade:	2f00      	cmp	r7, #0
 800cae0:	f43f aebd 	beq.w	800c85e <_dtoa_r+0x68e>
 800cae4:	f1b9 0f00 	cmp.w	r9, #0
 800cae8:	d005      	beq.n	800caf6 <_dtoa_r+0x926>
 800caea:	45b9      	cmp	r9, r7
 800caec:	d003      	beq.n	800caf6 <_dtoa_r+0x926>
 800caee:	4649      	mov	r1, r9
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7fe fb65 	bl	800b1c0 <_Bfree>
 800caf6:	4639      	mov	r1, r7
 800caf8:	4620      	mov	r0, r4
 800cafa:	f7fe fb61 	bl	800b1c0 <_Bfree>
 800cafe:	e6ae      	b.n	800c85e <_dtoa_r+0x68e>
 800cb00:	2600      	movs	r6, #0
 800cb02:	4637      	mov	r7, r6
 800cb04:	e7e1      	b.n	800caca <_dtoa_r+0x8fa>
 800cb06:	46ba      	mov	sl, r7
 800cb08:	4637      	mov	r7, r6
 800cb0a:	e5b1      	b.n	800c670 <_dtoa_r+0x4a0>
 800cb0c:	40240000 	.word	0x40240000
 800cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb12:	f8cd 8010 	str.w	r8, [sp, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 80f3 	beq.w	800cd02 <_dtoa_r+0xb32>
 800cb1c:	2d00      	cmp	r5, #0
 800cb1e:	dd05      	ble.n	800cb2c <_dtoa_r+0x95c>
 800cb20:	4639      	mov	r1, r7
 800cb22:	462a      	mov	r2, r5
 800cb24:	4620      	mov	r0, r4
 800cb26:	f7fe fd15 	bl	800b554 <__lshift>
 800cb2a:	4607      	mov	r7, r0
 800cb2c:	9b08      	ldr	r3, [sp, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d04c      	beq.n	800cbcc <_dtoa_r+0x9fc>
 800cb32:	6879      	ldr	r1, [r7, #4]
 800cb34:	4620      	mov	r0, r4
 800cb36:	f7fe fb0f 	bl	800b158 <_Balloc>
 800cb3a:	4605      	mov	r5, r0
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	f107 010c 	add.w	r1, r7, #12
 800cb42:	3202      	adds	r2, #2
 800cb44:	0092      	lsls	r2, r2, #2
 800cb46:	300c      	adds	r0, #12
 800cb48:	f7fe fafb 	bl	800b142 <memcpy>
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	4629      	mov	r1, r5
 800cb50:	4620      	mov	r0, r4
 800cb52:	f7fe fcff 	bl	800b554 <__lshift>
 800cb56:	46b9      	mov	r9, r7
 800cb58:	4607      	mov	r7, r0
 800cb5a:	9b06      	ldr	r3, [sp, #24]
 800cb5c:	9307      	str	r3, [sp, #28]
 800cb5e:	9b02      	ldr	r3, [sp, #8]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	9308      	str	r3, [sp, #32]
 800cb66:	4631      	mov	r1, r6
 800cb68:	4658      	mov	r0, fp
 800cb6a:	f7ff faa2 	bl	800c0b2 <quorem>
 800cb6e:	4649      	mov	r1, r9
 800cb70:	4605      	mov	r5, r0
 800cb72:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cb76:	4658      	mov	r0, fp
 800cb78:	f7fe fd40 	bl	800b5fc <__mcmp>
 800cb7c:	463a      	mov	r2, r7
 800cb7e:	9002      	str	r0, [sp, #8]
 800cb80:	4631      	mov	r1, r6
 800cb82:	4620      	mov	r0, r4
 800cb84:	f7fe fd54 	bl	800b630 <__mdiff>
 800cb88:	68c3      	ldr	r3, [r0, #12]
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	bb03      	cbnz	r3, 800cbd0 <_dtoa_r+0xa00>
 800cb8e:	4601      	mov	r1, r0
 800cb90:	9009      	str	r0, [sp, #36]	; 0x24
 800cb92:	4658      	mov	r0, fp
 800cb94:	f7fe fd32 	bl	800b5fc <__mcmp>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	4620      	mov	r0, r4
 800cba0:	9309      	str	r3, [sp, #36]	; 0x24
 800cba2:	f7fe fb0d 	bl	800b1c0 <_Bfree>
 800cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba8:	b9a3      	cbnz	r3, 800cbd4 <_dtoa_r+0xa04>
 800cbaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cbac:	b992      	cbnz	r2, 800cbd4 <_dtoa_r+0xa04>
 800cbae:	9a08      	ldr	r2, [sp, #32]
 800cbb0:	b982      	cbnz	r2, 800cbd4 <_dtoa_r+0xa04>
 800cbb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cbb6:	d029      	beq.n	800cc0c <_dtoa_r+0xa3c>
 800cbb8:	9b02      	ldr	r3, [sp, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	dd01      	ble.n	800cbc2 <_dtoa_r+0x9f2>
 800cbbe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cbc2:	9b07      	ldr	r3, [sp, #28]
 800cbc4:	1c5d      	adds	r5, r3, #1
 800cbc6:	f883 8000 	strb.w	r8, [r3]
 800cbca:	e784      	b.n	800cad6 <_dtoa_r+0x906>
 800cbcc:	4638      	mov	r0, r7
 800cbce:	e7c2      	b.n	800cb56 <_dtoa_r+0x986>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e7e3      	b.n	800cb9c <_dtoa_r+0x9cc>
 800cbd4:	9a02      	ldr	r2, [sp, #8]
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	db04      	blt.n	800cbe4 <_dtoa_r+0xa14>
 800cbda:	d123      	bne.n	800cc24 <_dtoa_r+0xa54>
 800cbdc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cbde:	bb0a      	cbnz	r2, 800cc24 <_dtoa_r+0xa54>
 800cbe0:	9a08      	ldr	r2, [sp, #32]
 800cbe2:	b9fa      	cbnz	r2, 800cc24 <_dtoa_r+0xa54>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	ddec      	ble.n	800cbc2 <_dtoa_r+0x9f2>
 800cbe8:	4659      	mov	r1, fp
 800cbea:	2201      	movs	r2, #1
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7fe fcb1 	bl	800b554 <__lshift>
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4683      	mov	fp, r0
 800cbf6:	f7fe fd01 	bl	800b5fc <__mcmp>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	dc03      	bgt.n	800cc06 <_dtoa_r+0xa36>
 800cbfe:	d1e0      	bne.n	800cbc2 <_dtoa_r+0x9f2>
 800cc00:	f018 0f01 	tst.w	r8, #1
 800cc04:	d0dd      	beq.n	800cbc2 <_dtoa_r+0x9f2>
 800cc06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc0a:	d1d8      	bne.n	800cbbe <_dtoa_r+0x9ee>
 800cc0c:	9b07      	ldr	r3, [sp, #28]
 800cc0e:	9a07      	ldr	r2, [sp, #28]
 800cc10:	1c5d      	adds	r5, r3, #1
 800cc12:	2339      	movs	r3, #57	; 0x39
 800cc14:	7013      	strb	r3, [r2, #0]
 800cc16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc1a:	1e6a      	subs	r2, r5, #1
 800cc1c:	2b39      	cmp	r3, #57	; 0x39
 800cc1e:	d04d      	beq.n	800ccbc <_dtoa_r+0xaec>
 800cc20:	3301      	adds	r3, #1
 800cc22:	e052      	b.n	800ccca <_dtoa_r+0xafa>
 800cc24:	9a07      	ldr	r2, [sp, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f102 0501 	add.w	r5, r2, #1
 800cc2c:	dd06      	ble.n	800cc3c <_dtoa_r+0xa6c>
 800cc2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc32:	d0eb      	beq.n	800cc0c <_dtoa_r+0xa3c>
 800cc34:	f108 0801 	add.w	r8, r8, #1
 800cc38:	9b07      	ldr	r3, [sp, #28]
 800cc3a:	e7c4      	b.n	800cbc6 <_dtoa_r+0x9f6>
 800cc3c:	9b06      	ldr	r3, [sp, #24]
 800cc3e:	9a04      	ldr	r2, [sp, #16]
 800cc40:	1aeb      	subs	r3, r5, r3
 800cc42:	4293      	cmp	r3, r2
 800cc44:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cc48:	d021      	beq.n	800cc8e <_dtoa_r+0xabe>
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	220a      	movs	r2, #10
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7fe facc 	bl	800b1ee <__multadd>
 800cc56:	45b9      	cmp	r9, r7
 800cc58:	4683      	mov	fp, r0
 800cc5a:	f04f 0300 	mov.w	r3, #0
 800cc5e:	f04f 020a 	mov.w	r2, #10
 800cc62:	4649      	mov	r1, r9
 800cc64:	4620      	mov	r0, r4
 800cc66:	d105      	bne.n	800cc74 <_dtoa_r+0xaa4>
 800cc68:	f7fe fac1 	bl	800b1ee <__multadd>
 800cc6c:	4681      	mov	r9, r0
 800cc6e:	4607      	mov	r7, r0
 800cc70:	9507      	str	r5, [sp, #28]
 800cc72:	e778      	b.n	800cb66 <_dtoa_r+0x996>
 800cc74:	f7fe fabb 	bl	800b1ee <__multadd>
 800cc78:	4639      	mov	r1, r7
 800cc7a:	4681      	mov	r9, r0
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	220a      	movs	r2, #10
 800cc80:	4620      	mov	r0, r4
 800cc82:	f7fe fab4 	bl	800b1ee <__multadd>
 800cc86:	4607      	mov	r7, r0
 800cc88:	e7f2      	b.n	800cc70 <_dtoa_r+0xaa0>
 800cc8a:	f04f 0900 	mov.w	r9, #0
 800cc8e:	4659      	mov	r1, fp
 800cc90:	2201      	movs	r2, #1
 800cc92:	4620      	mov	r0, r4
 800cc94:	f7fe fc5e 	bl	800b554 <__lshift>
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4683      	mov	fp, r0
 800cc9c:	f7fe fcae 	bl	800b5fc <__mcmp>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	dcb8      	bgt.n	800cc16 <_dtoa_r+0xa46>
 800cca4:	d102      	bne.n	800ccac <_dtoa_r+0xadc>
 800cca6:	f018 0f01 	tst.w	r8, #1
 800ccaa:	d1b4      	bne.n	800cc16 <_dtoa_r+0xa46>
 800ccac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccb0:	1e6a      	subs	r2, r5, #1
 800ccb2:	2b30      	cmp	r3, #48	; 0x30
 800ccb4:	f47f af0f 	bne.w	800cad6 <_dtoa_r+0x906>
 800ccb8:	4615      	mov	r5, r2
 800ccba:	e7f7      	b.n	800ccac <_dtoa_r+0xadc>
 800ccbc:	9b06      	ldr	r3, [sp, #24]
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d105      	bne.n	800ccce <_dtoa_r+0xafe>
 800ccc2:	2331      	movs	r3, #49	; 0x31
 800ccc4:	9a06      	ldr	r2, [sp, #24]
 800ccc6:	f10a 0a01 	add.w	sl, sl, #1
 800ccca:	7013      	strb	r3, [r2, #0]
 800cccc:	e703      	b.n	800cad6 <_dtoa_r+0x906>
 800ccce:	4615      	mov	r5, r2
 800ccd0:	e7a1      	b.n	800cc16 <_dtoa_r+0xa46>
 800ccd2:	4b17      	ldr	r3, [pc, #92]	; (800cd30 <_dtoa_r+0xb60>)
 800ccd4:	f7ff bae1 	b.w	800c29a <_dtoa_r+0xca>
 800ccd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f47f aabb 	bne.w	800c256 <_dtoa_r+0x86>
 800cce0:	4b14      	ldr	r3, [pc, #80]	; (800cd34 <_dtoa_r+0xb64>)
 800cce2:	f7ff bada 	b.w	800c29a <_dtoa_r+0xca>
 800cce6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	f77f ae3f 	ble.w	800c96c <_dtoa_r+0x79c>
 800ccee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccf0:	9308      	str	r3, [sp, #32]
 800ccf2:	e653      	b.n	800c99c <_dtoa_r+0x7cc>
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dc03      	bgt.n	800cd02 <_dtoa_r+0xb32>
 800ccfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	f73f aed5 	bgt.w	800caac <_dtoa_r+0x8dc>
 800cd02:	9d06      	ldr	r5, [sp, #24]
 800cd04:	4631      	mov	r1, r6
 800cd06:	4658      	mov	r0, fp
 800cd08:	f7ff f9d3 	bl	800c0b2 <quorem>
 800cd0c:	9b06      	ldr	r3, [sp, #24]
 800cd0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cd12:	f805 8b01 	strb.w	r8, [r5], #1
 800cd16:	9a04      	ldr	r2, [sp, #16]
 800cd18:	1aeb      	subs	r3, r5, r3
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	ddb5      	ble.n	800cc8a <_dtoa_r+0xaba>
 800cd1e:	4659      	mov	r1, fp
 800cd20:	2300      	movs	r3, #0
 800cd22:	220a      	movs	r2, #10
 800cd24:	4620      	mov	r0, r4
 800cd26:	f7fe fa62 	bl	800b1ee <__multadd>
 800cd2a:	4683      	mov	fp, r0
 800cd2c:	e7ea      	b.n	800cd04 <_dtoa_r+0xb34>
 800cd2e:	bf00      	nop
 800cd30:	0800dc1d 	.word	0x0800dc1d
 800cd34:	0800dc10 	.word	0x0800dc10

0800cd38 <malloc>:
 800cd38:	4b02      	ldr	r3, [pc, #8]	; (800cd44 <malloc+0xc>)
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	f7fe be2f 	b.w	800b9a0 <_malloc_r>
 800cd42:	bf00      	nop
 800cd44:	20000068 	.word	0x20000068

0800cd48 <memchr>:
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	b2c9      	uxtb	r1, r1
 800cd4c:	4402      	add	r2, r0
 800cd4e:	4290      	cmp	r0, r2
 800cd50:	4603      	mov	r3, r0
 800cd52:	d101      	bne.n	800cd58 <memchr+0x10>
 800cd54:	2300      	movs	r3, #0
 800cd56:	e003      	b.n	800cd60 <memchr+0x18>
 800cd58:	781c      	ldrb	r4, [r3, #0]
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	428c      	cmp	r4, r1
 800cd5e:	d1f6      	bne.n	800cd4e <memchr+0x6>
 800cd60:	4618      	mov	r0, r3
 800cd62:	bd10      	pop	{r4, pc}

0800cd64 <memmove>:
 800cd64:	4288      	cmp	r0, r1
 800cd66:	b510      	push	{r4, lr}
 800cd68:	eb01 0302 	add.w	r3, r1, r2
 800cd6c:	d807      	bhi.n	800cd7e <memmove+0x1a>
 800cd6e:	1e42      	subs	r2, r0, #1
 800cd70:	4299      	cmp	r1, r3
 800cd72:	d00a      	beq.n	800cd8a <memmove+0x26>
 800cd74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd78:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cd7c:	e7f8      	b.n	800cd70 <memmove+0xc>
 800cd7e:	4283      	cmp	r3, r0
 800cd80:	d9f5      	bls.n	800cd6e <memmove+0xa>
 800cd82:	1881      	adds	r1, r0, r2
 800cd84:	1ad2      	subs	r2, r2, r3
 800cd86:	42d3      	cmn	r3, r2
 800cd88:	d100      	bne.n	800cd8c <memmove+0x28>
 800cd8a:	bd10      	pop	{r4, pc}
 800cd8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cd94:	e7f7      	b.n	800cd86 <memmove+0x22>

0800cd96 <__malloc_lock>:
 800cd96:	4770      	bx	lr

0800cd98 <__malloc_unlock>:
 800cd98:	4770      	bx	lr
	...

0800cd9c <_free_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4605      	mov	r5, r0
 800cda0:	2900      	cmp	r1, #0
 800cda2:	d043      	beq.n	800ce2c <_free_r+0x90>
 800cda4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda8:	1f0c      	subs	r4, r1, #4
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	bfb8      	it	lt
 800cdae:	18e4      	addlt	r4, r4, r3
 800cdb0:	f7ff fff1 	bl	800cd96 <__malloc_lock>
 800cdb4:	4a1e      	ldr	r2, [pc, #120]	; (800ce30 <_free_r+0x94>)
 800cdb6:	6813      	ldr	r3, [r2, #0]
 800cdb8:	4610      	mov	r0, r2
 800cdba:	b933      	cbnz	r3, 800cdca <_free_r+0x2e>
 800cdbc:	6063      	str	r3, [r4, #4]
 800cdbe:	6014      	str	r4, [r2, #0]
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc6:	f7ff bfe7 	b.w	800cd98 <__malloc_unlock>
 800cdca:	42a3      	cmp	r3, r4
 800cdcc:	d90b      	bls.n	800cde6 <_free_r+0x4a>
 800cdce:	6821      	ldr	r1, [r4, #0]
 800cdd0:	1862      	adds	r2, r4, r1
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	bf01      	itttt	eq
 800cdd6:	681a      	ldreq	r2, [r3, #0]
 800cdd8:	685b      	ldreq	r3, [r3, #4]
 800cdda:	1852      	addeq	r2, r2, r1
 800cddc:	6022      	streq	r2, [r4, #0]
 800cdde:	6063      	str	r3, [r4, #4]
 800cde0:	6004      	str	r4, [r0, #0]
 800cde2:	e7ed      	b.n	800cdc0 <_free_r+0x24>
 800cde4:	4613      	mov	r3, r2
 800cde6:	685a      	ldr	r2, [r3, #4]
 800cde8:	b10a      	cbz	r2, 800cdee <_free_r+0x52>
 800cdea:	42a2      	cmp	r2, r4
 800cdec:	d9fa      	bls.n	800cde4 <_free_r+0x48>
 800cdee:	6819      	ldr	r1, [r3, #0]
 800cdf0:	1858      	adds	r0, r3, r1
 800cdf2:	42a0      	cmp	r0, r4
 800cdf4:	d10b      	bne.n	800ce0e <_free_r+0x72>
 800cdf6:	6820      	ldr	r0, [r4, #0]
 800cdf8:	4401      	add	r1, r0
 800cdfa:	1858      	adds	r0, r3, r1
 800cdfc:	4282      	cmp	r2, r0
 800cdfe:	6019      	str	r1, [r3, #0]
 800ce00:	d1de      	bne.n	800cdc0 <_free_r+0x24>
 800ce02:	6810      	ldr	r0, [r2, #0]
 800ce04:	6852      	ldr	r2, [r2, #4]
 800ce06:	4401      	add	r1, r0
 800ce08:	6019      	str	r1, [r3, #0]
 800ce0a:	605a      	str	r2, [r3, #4]
 800ce0c:	e7d8      	b.n	800cdc0 <_free_r+0x24>
 800ce0e:	d902      	bls.n	800ce16 <_free_r+0x7a>
 800ce10:	230c      	movs	r3, #12
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	e7d4      	b.n	800cdc0 <_free_r+0x24>
 800ce16:	6820      	ldr	r0, [r4, #0]
 800ce18:	1821      	adds	r1, r4, r0
 800ce1a:	428a      	cmp	r2, r1
 800ce1c:	bf01      	itttt	eq
 800ce1e:	6811      	ldreq	r1, [r2, #0]
 800ce20:	6852      	ldreq	r2, [r2, #4]
 800ce22:	1809      	addeq	r1, r1, r0
 800ce24:	6021      	streq	r1, [r4, #0]
 800ce26:	6062      	str	r2, [r4, #4]
 800ce28:	605c      	str	r4, [r3, #4]
 800ce2a:	e7c9      	b.n	800cdc0 <_free_r+0x24>
 800ce2c:	bd38      	pop	{r3, r4, r5, pc}
 800ce2e:	bf00      	nop
 800ce30:	200006b4 	.word	0x200006b4

0800ce34 <_malloc_usable_size_r>:
 800ce34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce38:	1f18      	subs	r0, r3, #4
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	bfbc      	itt	lt
 800ce3e:	580b      	ldrlt	r3, [r1, r0]
 800ce40:	18c0      	addlt	r0, r0, r3
 800ce42:	4770      	bx	lr

0800ce44 <trunc>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800ce4a:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800ce4e:	2a13      	cmp	r2, #19
 800ce50:	4603      	mov	r3, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	dc10      	bgt.n	800ce78 <trunc+0x34>
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	bfb3      	iteet	lt
 800ce5a:	2000      	movlt	r0, #0
 800ce5c:	2000      	movge	r0, #0
 800ce5e:	4b10      	ldrge	r3, [pc, #64]	; (800cea0 <trunc+0x5c>)
 800ce60:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800ce64:	bfa4      	itt	ge
 800ce66:	fa43 f202 	asrge.w	r2, r3, r2
 800ce6a:	ea24 0102 	bicge.w	r1, r4, r2
 800ce6e:	4603      	mov	r3, r0
 800ce70:	460c      	mov	r4, r1
 800ce72:	4618      	mov	r0, r3
 800ce74:	4621      	mov	r1, r4
 800ce76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce78:	2a33      	cmp	r2, #51	; 0x33
 800ce7a:	dd07      	ble.n	800ce8c <trunc+0x48>
 800ce7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ce80:	d1f7      	bne.n	800ce72 <trunc+0x2e>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	f7f3 f971 	bl	800016c <__adddf3>
 800ce8a:	e7f0      	b.n	800ce6e <trunc+0x2a>
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce90:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800ce94:	fa22 f505 	lsr.w	r5, r2, r5
 800ce98:	ea20 0005 	bic.w	r0, r0, r5
 800ce9c:	e7e7      	b.n	800ce6e <trunc+0x2a>
 800ce9e:	bf00      	nop
 800cea0:	000fffff 	.word	0x000fffff

0800cea4 <_init>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	bf00      	nop
 800cea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceaa:	bc08      	pop	{r3}
 800ceac:	469e      	mov	lr, r3
 800ceae:	4770      	bx	lr

0800ceb0 <_fini>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	bf00      	nop
 800ceb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	469e      	mov	lr, r3
 800ceba:	4770      	bx	lr
