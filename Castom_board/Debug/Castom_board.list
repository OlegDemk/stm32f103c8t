
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081ec  080081ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080081ec  080081ec  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081ec  080081ec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080081f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  20000090  08008284  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e60  08008284  00020e60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d11d  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bc9  00000000  00000000  0003d1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  00040da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00042368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4fc  00000000  00000000  000437a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015f3d  00000000  00000000  0005ec9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000914e0  00000000  00000000  00074bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001060b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  00106134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08008114 	.word	0x08008114

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08008114 	.word	0x08008114

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	d1ed      	bne.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <test_flash_W25Q>:
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------
// Work
void test_flash_W25Q(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
	uint8_t init=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000fe0:	f102 021f 	add.w	r2, r2, #31
 8000fe4:	7013      	strb	r3, [r2, #0]
	init = W25qxx_Init();
 8000fe6:	f001 fbd7 	bl	8002798 <W25qxx_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000ff0:	f102 021f 	add.w	r2, r2, #31
 8000ff4:	7013      	strb	r3, [r2, #0]

	uint32_t id=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000ffc:	f102 0218 	add.w	r2, r2, #24
 8001000:	6013      	str	r3, [r2, #0]
	id = W25qxx_ReadID();
 8001002:	f001 fb53 	bl	80026ac <W25qxx_ReadID>
 8001006:	4603      	mov	r3, r0
 8001008:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800100c:	f102 0218 	add.w	r2, r2, #24
 8001010:	6013      	str	r3, [r2, #0]
	//test_function_1();

	// Problems
	//	1. We loose flash_offset after reset MC

	W25qxx_EraseSector(0);					// First to all erase sector 0
 8001012:	2000      	movs	r0, #0
 8001014:	f001 fcd2 	bl	80029bc <W25qxx_EraseSector>



	uint8_t tempetature = 21;
 8001018:	2315      	movs	r3, #21
 800101a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800101e:	f102 0217 	add.w	r2, r2, #23
 8001022:	7013      	strb	r3, [r2, #0]
	uint8_t humidity = 80;
 8001024:	2350      	movs	r3, #80	; 0x50
 8001026:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800102a:	f102 0216 	add.w	r2, r2, #22
 800102e:	7013      	strb	r3, [r2, #0]

	save_data(tempetature, humidity);
 8001030:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001034:	f103 0317 	add.w	r3, r3, #23
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800103e:	f102 0216 	add.w	r2, r2, #22
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f85c 	bl	8001104 <save_data>

	tempetature = 30;
 800104c:	231e      	movs	r3, #30
 800104e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001052:	f102 0217 	add.w	r2, r2, #23
 8001056:	7013      	strb	r3, [r2, #0]
	humidity = 90;
 8001058:	235a      	movs	r3, #90	; 0x5a
 800105a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800105e:	f102 0216 	add.w	r2, r2, #22
 8001062:	7013      	strb	r3, [r2, #0]

	save_data(tempetature, humidity);
 8001064:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001068:	f103 0317 	add.w	r3, r3, #23
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001072:	f102 0216 	add.w	r2, r2, #22
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f842 	bl	8001104 <save_data>

	tempetature = 100;
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001086:	f102 0217 	add.w	r2, r2, #23
 800108a:	7013      	strb	r3, [r2, #0]
	humidity = 60;
 800108c:	233c      	movs	r3, #60	; 0x3c
 800108e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001092:	f102 0216 	add.w	r2, r2, #22
 8001096:	7013      	strb	r3, [r2, #0]

	save_data(tempetature, humidity);
 8001098:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800109c:	f103 0317 	add.w	r3, r3, #23
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80010a6:	f102 0216 	add.w	r2, r2, #22
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f828 	bl	8001104 <save_data>


	// Read sector from flash in the end
	char buff_for_read_from_flash[10000] = {0};			// Buffer for read data from flash
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	3b20      	subs	r3, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80010c0:	461a      	mov	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	f006 fbd2 	bl	800786c <memset>
	memset(buff_for_read_from_flash, 0 , sizeof(buff_for_read_from_flash));
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	3b20      	subs	r3, #32
 80010ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 fbc9 	bl	800786c <memset>
	W25qxx_ReadSector(buff_for_read_from_flash, 0, 0, 0);
 80010da:	f107 0020 	add.w	r0, r7, #32
 80010de:	3820      	subs	r0, #32
 80010e0:	2300      	movs	r3, #0
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	f001 fd9d 	bl	8002c24 <W25qxx_ReadSector>

	int lll = 999;
 80010ea:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010ee:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80010f2:	f102 0210 	add.w	r2, r2, #16
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <save_data>:
//
//	int f =999;
}
// ----------------------------------------------------------------------------
void save_data(uint8_t tempetature, uint8_t humidity)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	static unsigned int number_of_measure = 1;
	static unsigned int flash_offset = 0;				// flash memory offset (One byre writer: flash_offset++)

	flash_offset = save_data_in_flash(tempetature, humidity, number_of_measure, flash_offset);
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <save_data+0x5c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <save_data+0x60>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	79b9      	ldrb	r1, [r7, #6]
 800111e:	79f8      	ldrb	r0, [r7, #7]
 8001120:	f000 f822 	bl	8001168 <save_data_in_flash>
 8001124:	4602      	mov	r2, r0
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <save_data+0x60>)
 8001128:	601a      	str	r2, [r3, #0]

	// For save only in one sector
	if(flash_offset >= 4096)    				// 4096: size of one sector
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <save_data+0x60>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001132:	d305      	bcc.n	8001140 <save_data+0x3c>
	{
		flash_offset = 0;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <save_data+0x60>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
		W25qxx_EraseSector(0);					// First to all erase sector 0
 800113a:	2000      	movs	r0, #0
 800113c:	f001 fc3e 	bl	80029bc <W25qxx_EraseSector>
	}
	number_of_measure ++;						// How many message was saved
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <save_data+0x5c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <save_data+0x5c>)
 8001148:	6013      	str	r3, [r2, #0]
	tempetature ++;								// Simulation temperature
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
	humidity ++;								// Semulation humidity
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	3301      	adds	r3, #1
 8001154:	71bb      	strb	r3, [r7, #6]

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000
 8001164:	200000b0 	.word	0x200000b0

08001168 <save_data_in_flash>:
// ----------------------------------------------------------------------------
unsigned int save_data_in_flash(uint8_t tempetature, uint8_t humidity, unsigned int number_of_measure, unsigned int flash_offset)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af06      	add	r7, sp, #24
 800116e:	60ba      	str	r2, [r7, #8]
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	460b      	mov	r3, r1
 8001178:	73bb      	strb	r3, [r7, #14]
	char test_array [32] = {0};
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2220      	movs	r2, #32
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fb72 	bl	800786c <memset>
	uint8_t q = 0;										// Counter of saved messages
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t pages = 0;									// Counter of pages
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t size_array = sizeof(test_array)-1;
 8001194:	231f      	movs	r3, #31
 8001196:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	sprintf(test_array,"%s %d %s%d%s %s%d%s", "sensor_1", number_of_measure, "T:",tempetature, "C", "H:",humidity, "%");	// Write data on array
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	7bba      	ldrb	r2, [r7, #14]
 800119e:	f107 0010 	add.w	r0, r7, #16
 80011a2:	4915      	ldr	r1, [pc, #84]	; (80011f8 <save_data_in_flash+0x90>)
 80011a4:	9105      	str	r1, [sp, #20]
 80011a6:	9204      	str	r2, [sp, #16]
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <save_data_in_flash+0x94>)
 80011aa:	9203      	str	r2, [sp, #12]
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <save_data_in_flash+0x98>)
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <save_data_in_flash+0x9c>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <save_data_in_flash+0xa0>)
 80011ba:	4914      	ldr	r1, [pc, #80]	; (800120c <save_data_in_flash+0xa4>)
 80011bc:	f006 fc14 	bl	80079e8 <siprintf>

	for(int i = 0; i <=  size_array; i++)						// Write all bytes from array
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
 80011c4:	e00d      	b.n	80011e2 <save_data_in_flash+0x7a>
	{
		W25qxx_WriteByte(test_array[i], flash_offset++);		// Write all bytes from array
 80011c6:	f107 0210 	add.w	r2, r7, #16
 80011ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011cc:	4413      	add	r3, r2
 80011ce:	7818      	ldrb	r0, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f001 fc58 	bl	8002a8c <W25qxx_WriteByte>
	for(int i = 0; i <=  size_array; i++)						// Write all bytes from array
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	3301      	adds	r3, #1
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
 80011e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80011e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e8:	429a      	cmp	r2, r3
 80011ea:	ddec      	ble.n	80011c6 <save_data_in_flash+0x5e>
	}

	return flash_offset;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3738      	adds	r7, #56	; 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800815c 	.word	0x0800815c
 80011fc:	08008160 	.word	0x08008160
 8001200:	08008164 	.word	0x08008164
 8001204:	08008168 	.word	0x08008168
 8001208:	0800813c 	.word	0x0800813c
 800120c:	08008148 	.word	0x08008148

08001210 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af00      	add	r7, sp, #0
	uint8_t size=0;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 8001226:	23ff      	movs	r3, #255	; 0xff
 8001228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 8001232:	463b      	mov	r3, r7
 8001234:	2101      	movs	r1, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f95a 	bl	80014f0 <r_single_Si7021>
 800123c:	4603      	mov	r3, r0
 800123e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001242:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001246:	2b00      	cmp	r3, #0
 8001248:	d000      	beq.n	800124c <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 800124a:	e7fe      	b.n	800124a <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f04f 0100 	mov.w	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fe6e 	bl	8000f34 <__aeabi_fcmplt>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <read_T_and_H_SI7021+0x52>
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <read_T_and_H_SI7021+0x198>)
 8001260:	e000      	b.n	8001264 <read_T_and_H_SI7021+0x54>
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <read_T_and_H_SI7021+0x19c>)
 8001264:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe61 	bl	8000f34 <__aeabi_fcmplt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <read_T_and_H_SI7021+0x70>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800127e:	e000      	b.n	8001282 <read_T_and_H_SI7021+0x72>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 8001284:	69f8      	ldr	r0, [r7, #28]
 8001286:	f7ff fe7d 	bl	8000f84 <__aeabi_f2iz>
 800128a:	4603      	mov	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 800128e:	683c      	ldr	r4, [r7, #0]
 8001290:	69b8      	ldr	r0, [r7, #24]
 8001292:	f7ff fc5d 	bl	8000b50 <__aeabi_i2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4619      	mov	r1, r3
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff fba2 	bl	80009e4 <__aeabi_fsub>
 80012a0:	4603      	mov	r3, r0
 80012a2:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 80012a4:	4942      	ldr	r1, [pc, #264]	; (80013b0 <read_T_and_H_SI7021+0x1a0>)
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_fmul>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f8b2 	bl	8000418 <__aeabi_f2d>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f006 fefa 	bl	80080b4 <trunc>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f7ff fb10 	bl	80008ec <__aeabi_d2iz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 80012d0:	1d38      	adds	r0, r7, #4
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	4937      	ldr	r1, [pc, #220]	; (80013b4 <read_T_and_H_SI7021+0x1a4>)
 80012d8:	f006 fb86 	bl	80079e8 <siprintf>
	strcpy(temperature_si7021, str);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4835      	ldr	r0, [pc, #212]	; (80013b8 <read_T_and_H_SI7021+0x1a8>)
 80012e2:	f006 fba1 	bl	8007a28 <strcpy>
	memset(str, 0 , sizeof(str));
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	220a      	movs	r2, #10
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fabd 	bl	800786c <memset>

	// Read humidity
	STATUS = -1;
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 80012f8:	463b      	mov	r3, r7
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f8f7 	bl	80014f0 <r_single_Si7021>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001308:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800130c:	2b00      	cmp	r3, #0
 800130e:	d000      	beq.n	8001312 <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 8001310:	e7fe      	b.n	8001310 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe0b 	bl	8000f34 <__aeabi_fcmplt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <read_T_and_H_SI7021+0x11c>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800132a:	e000      	b.n	800132e <read_T_and_H_SI7021+0x11e>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8001330:	69f8      	ldr	r0, [r7, #28]
 8001332:	f7ff fe27 	bl	8000f84 <__aeabi_f2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 800133a:	683c      	ldr	r4, [r7, #0]
 800133c:	69b8      	ldr	r0, [r7, #24]
 800133e:	f7ff fc07 	bl	8000b50 <__aeabi_i2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4619      	mov	r1, r3
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fb4c 	bl	80009e4 <__aeabi_fsub>
 800134c:	4603      	mov	r3, r0
 800134e:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8001350:	4917      	ldr	r1, [pc, #92]	; (80013b0 <read_T_and_H_SI7021+0x1a0>)
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff fc50 	bl	8000bf8 <__aeabi_fmul>
 8001358:	4603      	mov	r3, r0
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f85c 	bl	8000418 <__aeabi_f2d>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4618      	mov	r0, r3
 8001366:	4621      	mov	r1, r4
 8001368:	f006 fea4 	bl	80080b4 <trunc>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4618      	mov	r0, r3
 8001372:	4621      	mov	r1, r4
 8001374:	f7ff faba 	bl	80008ec <__aeabi_d2iz>
 8001378:	4603      	mov	r3, r0
 800137a:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	490e      	ldr	r1, [pc, #56]	; (80013bc <read_T_and_H_SI7021+0x1ac>)
 8001382:	4618      	mov	r0, r3
 8001384:	f006 fb30 	bl	80079e8 <siprintf>
	strcpy(humidity_si7021, str);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <read_T_and_H_SI7021+0x1b0>)
 800138e:	f006 fb4b 	bl	8007a28 <strcpy>
	memset(str, 0 , sizeof(str));
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	220a      	movs	r2, #10
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f006 fa67 	bl	800786c <memset>
}
 800139e:	bf00      	nop
 80013a0:	372c      	adds	r7, #44	; 0x2c
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08008174 	.word	0x08008174
 80013ac:	08008178 	.word	0x08008178
 80013b0:	461c4000 	.word	0x461c4000
 80013b4:	0800817c 	.word	0x0800817c
 80013b8:	20000530 	.word	0x20000530
 80013bc:	08008184 	.word	0x08008184
 80013c0:	20000538 	.word	0x20000538
 80013c4:	00000000 	.word	0x00000000

080013c8 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f80d 	bl	80003f4 <__aeabi_i2d>
 80013da:	a311      	add	r3, pc, #68	; (adr r3, 8001420 <process_temp_code+0x58>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f872 	bl	80004c8 <__aeabi_dmul>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	4618      	mov	r0, r3
 80013ea:	4621      	mov	r1, r4
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <process_temp_code+0x68>)
 80013f2:	f7ff f993 	bl	800071c <__aeabi_ddiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4618      	mov	r0, r3
 80013fc:	4621      	mov	r1, r4
 80013fe:	a30a      	add	r3, pc, #40	; (adr r3, 8001428 <process_temp_code+0x60>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe fea8 	bl	8000158 <__aeabi_dsub>
 8001408:	4603      	mov	r3, r0
 800140a:	460c      	mov	r4, r1
 800140c:	4618      	mov	r0, r3
 800140e:	4621      	mov	r1, r4
 8001410:	f7ff fa94 	bl	800093c <__aeabi_d2f>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	3d70a3d7 	.word	0x3d70a3d7
 8001424:	4065f70a 	.word	0x4065f70a
 8001428:	cccccccd 	.word	0xcccccccd
 800142c:	40476ccc 	.word	0x40476ccc
 8001430:	40f00000 	.word	0x40f00000

08001434 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe ffd7 	bl	80003f4 <__aeabi_i2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <process_humi_code+0x84>)
 800144c:	f7ff f83c 	bl	80004c8 <__aeabi_dmul>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <process_humi_code+0x88>)
 800145e:	f7ff f95d 	bl	800071c <__aeabi_ddiv>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <process_humi_code+0x8c>)
 8001470:	f7fe fe72 	bl	8000158 <__aeabi_dsub>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4618      	mov	r0, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f7ff fa5e 	bl	800093c <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fd53 	bl	8000f34 <__aeabi_fcmplt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <process_humi_code+0x66>
    return 0;
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e009      	b.n	80014ae <process_humi_code+0x7a>
  else if(value > 100)
 800149a:	490a      	ldr	r1, [pc, #40]	; (80014c4 <process_humi_code+0x90>)
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff fd67 	bl	8000f70 <__aeabi_fcmpgt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <process_humi_code+0x78>
    return 100;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <process_humi_code+0x90>)
 80014aa:	e000      	b.n	80014ae <process_humi_code+0x7a>
  else
    return (float)value;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	405f4000 	.word	0x405f4000
 80014bc:	40f00000 	.word	0x40f00000
 80014c0:	40180000 	.word	0x40180000
 80014c4:	42c80000 	.word	0x42c80000

080014c8 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 8001502:	23e5      	movs	r3, #229	; 0xe5
 8001504:	737b      	strb	r3, [r7, #13]
 8001506:	e008      	b.n	800151a <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 800150e:	23e3      	movs	r3, #227	; 0xe3
 8001510:	737b      	strb	r3, [r7, #13]
 8001512:	e002      	b.n	800151a <r_single_Si7021+0x2a>
  else
    return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001518:	e03c      	b.n	8001594 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	f107 020d 	add.w	r2, r7, #13
 8001520:	f242 7310 	movw	r3, #10000	; 0x2710
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	481c      	ldr	r0, [pc, #112]	; (800159c <r_single_Si7021+0xac>)
 800152a:	f002 facd 	bl	8003ac8 <HAL_I2C_Master_Transmit>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <r_single_Si7021+0x4a>
    return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001538:	e02c      	b.n	8001594 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	f107 0208 	add.w	r2, r7, #8
 8001540:	f242 7310 	movw	r3, #10000	; 0x2710
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2302      	movs	r3, #2
 8001548:	4814      	ldr	r0, [pc, #80]	; (800159c <r_single_Si7021+0xac>)
 800154a:	f002 fbbb 	bl	8003cc4 <HAL_I2C_Master_Receive>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <r_single_Si7021+0x6a>
    return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001558:	e01c      	b.n	8001594 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ffb2 	bl	80014c8 <convert_to_uint16>
 8001564:	4603      	mov	r3, r0
 8001566:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <process_humi_code>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e009      	b.n	8001592 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff1e 	bl	80013c8 <process_temp_code>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]

  return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000668 	.word	0x20000668

080015a0 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <I2C_1_scaner+0xb4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e043      	b.n	800163a <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f001 fc1a 	bl	8002dec <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <I2C_1_scaner+0xb4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	b299      	uxth	r1, r3
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <I2C_1_scaner+0xb8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b298      	uxth	r0, r3
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <I2C_1_scaner+0xbc>)
 80015ca:	881c      	ldrh	r4, [r3, #0]
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <I2C_1_scaner+0xbc>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <I2C_1_scaner+0xc0>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	9202      	str	r2, [sp, #8]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <I2C_1_scaner+0xc4>)
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4623      	mov	r3, r4
 80015de:	4602      	mov	r2, r0
 80015e0:	4821      	ldr	r0, [pc, #132]	; (8001668 <I2C_1_scaner+0xc8>)
 80015e2:	f002 fec3 	bl	800436c <HAL_I2C_Mem_Read>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <I2C_1_scaner+0xcc>)
 80015ec:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <I2C_1_scaner+0xcc>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d11b      	bne.n	800162e <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	3301      	adds	r3, #1
 80015fa:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <I2C_1_scaner+0xb4>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <I2C_1_scaner+0xb4>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b3c      	cmp	r3, #60	; 0x3c
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <I2C_1_scaner+0xb4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b3c      	cmp	r3, #60	; 0x3c
 8001626:	d001      	beq.n	800162c <I2C_1_scaner+0x8c>
 8001628:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 800162a:	e000      	b.n	800162e <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 800162c:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <I2C_1_scaner+0xb4>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <I2C_1_scaner+0xb4>)
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <I2C_1_scaner+0xb4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d1b7      	bne.n	80015b2 <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8001642:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001646:	f001 fbd1 	bl	8002dec <HAL_Delay>
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	200000f2 	.word	0x200000f2
 8001658:	200000f3 	.word	0x200000f3
 800165c:	20000004 	.word	0x20000004
 8001660:	20000008 	.word	0x20000008
 8001664:	200000f4 	.word	0x200000f4
 8001668:	20000668 	.word	0x20000668
 800166c:	200000f6 	.word	0x200000f6

08001670 <HAL_UART_RxCpltCallback>:
// -----------------------------------------------------------------------------
// Receive data from GPS module
#if GPS
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
		flag = 1;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_UART_RxCpltCallback+0x18>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
	}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	200000f9 	.word	0x200000f9

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f001 fb49 	bl	8002d28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001696:	f000 f84b 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f000 faa7 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 800169e:	f000 fa87 	bl	8001bb0 <MX_DMA_Init>
  MX_I2C1_Init();
 80016a2:	f000 f88b 	bl	80017bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016a6:	f000 fa05 	bl	8001ab4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80016aa:	f000 fa57 	bl	8001b5c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80016ae:	f000 f8b3 	bl	8001818 <MX_SPI2_Init>
  MX_TIM1_Init();
 80016b2:	f000 f8e7 	bl	8001884 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80016b6:	f000 fa27 	bl	8001b08 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016ba:	f000 f985 	bl	80019c8 <MX_TIM2_Init>
  MX_FATFS_Init();
 80016be:	f005 ffef 	bl	80076a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(5000);

	#if I2C_SCANNER
  		I2C_1_scaner();
 80016c2:	f7ff ff6d 	bl	80015a0 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  		read_T_and_H_SI7021();
 80016c6:	f7ff fda3 	bl	8001210 <read_T_and_H_SI7021>
	#endif

	#if OLED
  		init_oled();
 80016ca:	f000 fb8b 	bl	8001de4 <init_oled>
	  //test_oled();
	#endif

	#if GPS
  		memset(GPS_buff ,0 ,sizeof(GPS_buff));
 80016ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d2:	2100      	movs	r1, #0
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <main+0x90>)
 80016d6:	f006 f8c9 	bl	800786c <memset>
  		HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 80016da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016de:	490f      	ldr	r1, [pc, #60]	; (800171c <main+0x90>)
 80016e0:	480f      	ldr	r0, [pc, #60]	; (8001720 <main+0x94>)
 80016e2:	f005 fbfb 	bl	8006edc <HAL_UART_Receive_DMA>

  		//
  	//HAL_TIM_Base_Start_IT(&htim2);


  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016e6:	2100      	movs	r1, #0
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <main+0x98>)
 80016ea:	f004 fe3f 	bl	800636c <HAL_TIM_PWM_Start>
  	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  	///////////////////////////////////////////////////////////////////
  	// Turn on interrupt, if in RX buffer are one byte
  	// Register CR1-> RXNEIE
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <main+0x9c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <main+0x9c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0220 	orr.w	r2, r2, #32
 80016fc:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	// Test led
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <main+0xa0>)
 8001706:	f002 f876 	bl	80037f6 <HAL_GPIO_WritePin>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
  #endif

  int EXIT = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]

while (1)
{
	test_flash_W25Q();
 800170e:	f7ff fc5f 	bl	8000fd0 <test_flash_W25Q>
	while(1)
	{
		HAL_Delay(100);
 8001712:	2064      	movs	r0, #100	; 0x64
 8001714:	f001 fb6a 	bl	8002dec <HAL_Delay>
 8001718:	e7fb      	b.n	8001712 <main+0x86>
 800171a:	bf00      	nop
 800171c:	200006bc 	.word	0x200006bc
 8001720:	20000628 	.word	0x20000628
 8001724:	20000944 	.word	0x20000944
 8001728:	2000098c 	.word	0x2000098c
 800172c:	40011000 	.word	0x40011000

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0318 	add.w	r3, r7, #24
 800173a:	2228      	movs	r2, #40	; 0x28
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f006 f894 	bl	800786c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001752:	2301      	movs	r3, #1
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001760:	2301      	movs	r3, #1
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001764:	2302      	movs	r3, #2
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800176e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fd03 	bl	8005184 <HAL_RCC_OscConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001784:	f000 fb28 	bl	8001dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001788:	230f      	movs	r3, #15
 800178a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178c:	2302      	movs	r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 ff6e 	bl	8005684 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017ae:	f000 fb13 	bl	8001dd8 <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3740      	adds	r7, #64	; 0x40
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C1_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_I2C1_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C1_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_I2C1_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2C1_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2C1_Init+0x50>)
 80017fa:	f002 f82d 	bl	8003858 <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001804:	f000 fae8 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000668 	.word	0x20000668
 8001810:	40005400 	.word	0x40005400
 8001814:	000186a0 	.word	0x000186a0

08001818 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_SPI2_Init+0x64>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <MX_SPI2_Init+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_SPI2_Init+0x64>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_SPI2_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_SPI2_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_SPI2_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_SPI2_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_SPI2_Init+0x64>)
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_SPI2_Init+0x64>)
 800184c:	2210      	movs	r2, #16
 800184e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_SPI2_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_SPI2_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_SPI2_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_SPI2_Init+0x64>)
 8001864:	220a      	movs	r2, #10
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_SPI2_Init+0x64>)
 800186a:	f004 f8a7 	bl	80059bc <HAL_SPI_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001874:	f000 fab0 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000058c 	.word	0x2000058c
 8001880:	40003800 	.word	0x40003800

08001884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b096      	sub	sp, #88	; 0x58
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2220      	movs	r2, #32
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 ffd5 	bl	800786c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018c2:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018c4:	4a3f      	ldr	r2, [pc, #252]	; (80019c4 <MX_TIM1_Init+0x140>)
 80018c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018ca:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80018ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018d8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80018dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80018f2:	f004 fc93 	bl	800621c <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f000 fa6c 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800190a:	4619      	mov	r1, r3
 800190c:	482c      	ldr	r0, [pc, #176]	; (80019c0 <MX_TIM1_Init+0x13c>)
 800190e:	f004 fe8d 	bl	800662c <HAL_TIM_ConfigClockSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001918:	f000 fa5e 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800191c:	4828      	ldr	r0, [pc, #160]	; (80019c0 <MX_TIM1_Init+0x13c>)
 800191e:	f004 fccc 	bl	80062ba <HAL_TIM_PWM_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001928:	f000 fa56 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001938:	4619      	mov	r1, r3
 800193a:	4821      	ldr	r0, [pc, #132]	; (80019c0 <MX_TIM1_Init+0x13c>)
 800193c:	f005 f9d2 	bl	8006ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001946:	f000 fa47 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194a:	2360      	movs	r3, #96	; 0x60
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 800194e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4813      	ldr	r0, [pc, #76]	; (80019c0 <MX_TIM1_Init+0x13c>)
 8001972:	f004 fd9d 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800197c:	f000 fa2c 	bl	8001dd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80019a4:	f005 f9fc 	bl	8006da0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80019ae:	f000 fa13 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MX_TIM1_Init+0x13c>)
 80019b4:	f000 fbe8 	bl	8002188 <HAL_TIM_MspPostInit>

}
 80019b8:	bf00      	nop
 80019ba:	3758      	adds	r7, #88	; 0x58
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200008fc 	.word	0x200008fc
 80019c4:	40012c00 	.word	0x40012c00

080019c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08e      	sub	sp, #56	; 0x38
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 80019fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a02:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a10:	22c8      	movs	r2, #200	; 0xc8
 8001a12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a22:	f004 fbfb 	bl	800621c <HAL_TIM_Base_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a2c:	f000 f9d4 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a3e:	f004 fdf5 	bl	800662c <HAL_TIM_ConfigClockSource>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a48:	f000 f9c6 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a4e:	f004 fc34 	bl	80062ba <HAL_TIM_PWM_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a58:	f000 f9be 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a6c:	f005 f93a 	bl	8006ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a76:	f000 f9af 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7a:	2360      	movs	r3, #96	; 0x60
 8001a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8001a7e:	2319      	movs	r3, #25
 8001a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001a92:	f004 fd0d 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a9c:	f000 f99c 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <MX_TIM2_Init+0xe8>)
 8001aa2:	f000 fb71 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001aa6:	bf00      	nop
 8001aa8:	3738      	adds	r7, #56	; 0x38
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000944 	.word	0x20000944

08001ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART1_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001aec:	f005 f9a9 	bl	8006e42 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f96f 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200008bc 	.word	0x200008bc
 8001b04:	40013800 	.word	0x40013800

08001b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART2_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f005 f97f 	bl	8006e42 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f000 f945 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000098c 	.word	0x2000098c
 8001b58:	40004400 	.word	0x40004400

08001b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_USART3_UART_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b94:	f005 f955 	bl	8006e42 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f000 f91b 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000628 	.word	0x20000628
 8001bac:	40004800 	.word	0x40004800

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_DMA_Init+0x38>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <MX_DMA_Init+0x38>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6153      	str	r3, [r2, #20]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_DMA_Init+0x38>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200d      	movs	r0, #13
 8001bd4:	f001 fa03 	bl	8002fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bd8:	200d      	movs	r0, #13
 8001bda:	f001 fa1c 	bl	8003016 <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c18:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a4a      	ldr	r2, [pc, #296]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <MX_GPIO_Init+0x174>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	483f      	ldr	r0, [pc, #252]	; (8001d64 <MX_GPIO_Init+0x178>)
 8001c68:	f001 fdc5 	bl	80037f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f241 010a 	movw	r1, #4106	; 0x100a
 8001c72:	483d      	ldr	r0, [pc, #244]	; (8001d68 <MX_GPIO_Init+0x17c>)
 8001c74:	f001 fdbf 	bl	80037f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001c7e:	483b      	ldr	r0, [pc, #236]	; (8001d6c <MX_GPIO_Init+0x180>)
 8001c80:	f001 fdb9 	bl	80037f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4831      	ldr	r0, [pc, #196]	; (8001d64 <MX_GPIO_Init+0x178>)
 8001c9e:	f001 fc39 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <MX_GPIO_Init+0x184>)
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482d      	ldr	r0, [pc, #180]	; (8001d6c <MX_GPIO_Init+0x180>)
 8001cb6:	f001 fc2d 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4825      	ldr	r0, [pc, #148]	; (8001d68 <MX_GPIO_Init+0x17c>)
 8001cd2:	f001 fc1f 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	481e      	ldr	r0, [pc, #120]	; (8001d68 <MX_GPIO_Init+0x17c>)
 8001cf0:	f001 fc10 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8001cf4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4817      	ldr	r0, [pc, #92]	; (8001d6c <MX_GPIO_Init+0x180>)
 8001d0e:	f001 fc01 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d12:	2308      	movs	r3, #8
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <MX_GPIO_Init+0x17c>)
 8001d2a:	f001 fbf3 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001d2e:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <MX_GPIO_Init+0x17c>)
 8001d44:	f001 fbe6 	bl	8003514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2007      	movs	r0, #7
 8001d4e:	f001 f946 	bl	8002fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d52:	2007      	movs	r0, #7
 8001d54:	f001 f95f 	bl	8003016 <HAL_NVIC_EnableIRQ>

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	10310000 	.word	0x10310000

08001d74 <HAL_GPIO_EXTI_Callback>:
 * That STATUS must check timer every 0.5 sec
 * If INCOMMING_RING_OR_SMS_STATUS == true
 * 		turn on "incoming call" function
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11f      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x50>
	{
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET)
 8001d84:	2102      	movs	r1, #2
 8001d86:	4811      	ldr	r0, [pc, #68]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x58>)
 8001d88:	f001 fd1e 	bl	80037c8 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_GPIO_EXTI_Callback+0x30>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d9a:	f001 fd2c 	bl	80037f6 <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = true;				// Check it status if it is 'true' we have incoming ring or sms
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_SET)
 8001da4:	2102      	movs	r1, #2
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x58>)
 8001da8:	f001 fd0e 	bl	80037c8 <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x50>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001dba:	f001 fd1c 	bl	80037f6 <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = false;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
		}
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	200000f8 	.word	0x200000f8

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <init_oled>:
void print_GSM_data(void);
void print_fingerprint_data(void);

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001de8:	f000 f824 	bl	8001e34 <ssd1306_Init>
	HAL_Delay(500);
 8001dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df0:	f000 fffc 	bl	8002dec <HAL_Delay>
	ssd1306_Fill(Black);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f889 	bl	8001f0c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001dfa:	f000 f8a9 	bl	8001f50 <ssd1306_UpdateScreen>
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001e0e:	230a      	movs	r3, #10
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2301      	movs	r3, #1
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2178      	movs	r1, #120	; 0x78
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <ssd1306_WriteCommand+0x2c>)
 8001e22:	f002 f9a9 	bl	8004178 <HAL_I2C_Mem_Write>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000668 	.word	0x20000668

08001e34 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001e38:	2064      	movs	r0, #100	; 0x64
 8001e3a:	f000 ffd7 	bl	8002dec <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001e3e:	20ae      	movs	r0, #174	; 0xae
 8001e40:	f7ff ffe0 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001e44:	2020      	movs	r0, #32
 8001e46:	f7ff ffdd 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e4a:	2010      	movs	r0, #16
 8001e4c:	f7ff ffda 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e50:	20b0      	movs	r0, #176	; 0xb0
 8001e52:	f7ff ffd7 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e56:	20c8      	movs	r0, #200	; 0xc8
 8001e58:	f7ff ffd4 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff ffd1 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001e62:	2010      	movs	r0, #16
 8001e64:	f7ff ffce 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001e68:	2040      	movs	r0, #64	; 0x40
 8001e6a:	f7ff ffcb 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001e6e:	2081      	movs	r0, #129	; 0x81
 8001e70:	f7ff ffc8 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001e74:	20ff      	movs	r0, #255	; 0xff
 8001e76:	f7ff ffc5 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001e7a:	20a1      	movs	r0, #161	; 0xa1
 8001e7c:	f7ff ffc2 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001e80:	20a6      	movs	r0, #166	; 0xa6
 8001e82:	f7ff ffbf 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001e86:	20a8      	movs	r0, #168	; 0xa8
 8001e88:	f7ff ffbc 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001e8c:	203f      	movs	r0, #63	; 0x3f
 8001e8e:	f7ff ffb9 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e92:	20a4      	movs	r0, #164	; 0xa4
 8001e94:	f7ff ffb6 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001e98:	20d3      	movs	r0, #211	; 0xd3
 8001e9a:	f7ff ffb3 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff ffb0 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ea4:	20d5      	movs	r0, #213	; 0xd5
 8001ea6:	f7ff ffad 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001eaa:	20f0      	movs	r0, #240	; 0xf0
 8001eac:	f7ff ffaa 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001eb0:	20d9      	movs	r0, #217	; 0xd9
 8001eb2:	f7ff ffa7 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001eb6:	2022      	movs	r0, #34	; 0x22
 8001eb8:	f7ff ffa4 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001ebc:	20da      	movs	r0, #218	; 0xda
 8001ebe:	f7ff ffa1 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001ec2:	2012      	movs	r0, #18
 8001ec4:	f7ff ff9e 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ec8:	20db      	movs	r0, #219	; 0xdb
 8001eca:	f7ff ff9b 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ece:	2020      	movs	r0, #32
 8001ed0:	f7ff ff98 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ed4:	208d      	movs	r0, #141	; 0x8d
 8001ed6:	f7ff ff95 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001eda:	2014      	movs	r0, #20
 8001edc:	f7ff ff92 	bl	8001e04 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001ee0:	20af      	movs	r0, #175	; 0xaf
 8001ee2:	f7ff ff8f 	bl	8001e04 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f810 	bl	8001f0c <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001eec:	f000 f830 	bl	8001f50 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <ssd1306_Init+0xd4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <ssd1306_Init+0xd4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001efc:	4b02      	ldr	r3, [pc, #8]	; (8001f08 <ssd1306_Init+0xd4>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200004fc 	.word	0x200004fc

08001f0c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e00d      	b.n	8001f38 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <ssd1306_Fill+0x1a>
 8001f22:	2100      	movs	r1, #0
 8001f24:	e000      	b.n	8001f28 <ssd1306_Fill+0x1c>
 8001f26:	21ff      	movs	r1, #255	; 0xff
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <ssd1306_Fill+0x40>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	460a      	mov	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d3ed      	bcc.n	8001f1c <ssd1306_Fill+0x10>
	}
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200000fc 	.word	0x200000fc

08001f50 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	e01d      	b.n	8001f98 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	3b50      	subs	r3, #80	; 0x50
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff4e 	bl	8001e04 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff ff4b 	bl	8001e04 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001f6e:	2010      	movs	r0, #16
 8001f70:	f7ff ff48 	bl	8001e04 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <ssd1306_UpdateScreen+0x58>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	2264      	movs	r2, #100	; 0x64
 8001f7e:	9202      	str	r2, [sp, #8]
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	2178      	movs	r1, #120	; 0x78
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <ssd1306_UpdateScreen+0x5c>)
 8001f8e:	f002 f8f3 	bl	8004178 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	3301      	adds	r3, #1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	2b07      	cmp	r3, #7
 8001f9c:	d9de      	bls.n	8001f5c <ssd1306_UpdateScreen+0xc>
	}
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200000fc 	.word	0x200000fc
 8001fac:	20000668 	.word	0x20000668

08001fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_MspInit+0x5c>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_MspInit+0x5c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x5c>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x5c>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_MspInit+0x5c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_MspInit+0x5c>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_MspInit+0x60>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_MspInit+0x60>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000

08002014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_I2C_MspInit+0x70>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d123      	bne.n	800207c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_I2C_MspInit+0x74>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_I2C_MspInit+0x74>)
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_I2C_MspInit+0x74>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002050:	2312      	movs	r3, #18
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	480b      	ldr	r0, [pc, #44]	; (800208c <HAL_I2C_MspInit+0x78>)
 8002060:	f001 fa58 	bl	8003514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_I2C_MspInit+0x74>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_I2C_MspInit+0x74>)
 800206a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800206e:	61d3      	str	r3, [r2, #28]
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_I2C_MspInit+0x74>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40005400 	.word	0x40005400
 8002088:	40021000 	.word	0x40021000
 800208c:	40010c00 	.word	0x40010c00

08002090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_SPI_MspInit+0x8c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d131      	bne.n	8002114 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_SPI_MspInit+0x90>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_SPI_MspInit+0x90>)
 80020b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ba:	61d3      	str	r3, [r2, #28]
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_SPI_MspInit+0x90>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_SPI_MspInit+0x90>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_SPI_MspInit+0x90>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_SPI_MspInit+0x90>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	4619      	mov	r1, r3
 80020f4:	480b      	ldr	r0, [pc, #44]	; (8002124 <HAL_SPI_MspInit+0x94>)
 80020f6:	f001 fa0d 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	4619      	mov	r1, r3
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_SPI_MspInit+0x94>)
 8002110:	f001 fa00 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40003800 	.word	0x40003800
 8002120:	40021000 	.word	0x40021000
 8002124:	40010c00 	.word	0x40010c00

08002128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_TIM_Base_MspInit+0x58>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10c      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 8002140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002144:	6193      	str	r3, [r2, #24]
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002152:	e010      	b.n	8002176 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d10b      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_TIM_MspPostInit+0x98>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d119      	bne.n	80021dc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_TIM_MspPostInit+0x9c>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_TIM_MspPostInit+0x9c>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_TIM_MspPostInit+0x9c>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	4619      	mov	r1, r3
 80021d4:	4814      	ldr	r0, [pc, #80]	; (8002228 <HAL_TIM_MspPostInit+0xa0>)
 80021d6:	f001 f99d 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021da:	e01c      	b.n	8002216 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d117      	bne.n	8002216 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_TIM_MspPostInit+0x9c>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_TIM_MspPostInit+0x9c>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6193      	str	r3, [r2, #24]
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_TIM_MspPostInit+0x9c>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021fe:	2301      	movs	r3, #1
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2302      	movs	r3, #2
 8002208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_TIM_MspPostInit+0xa0>)
 8002212:	f001 f97f 	bl	8003514 <HAL_GPIO_Init>
}
 8002216:	bf00      	nop
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800

0800222c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a73      	ldr	r2, [pc, #460]	; (8002414 <HAL_UART_MspInit+0x1e8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d13a      	bne.n	80022c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b72      	ldr	r3, [pc, #456]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a71      	ldr	r2, [pc, #452]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a6b      	ldr	r2, [pc, #428]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b69      	ldr	r3, [pc, #420]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800227c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4619      	mov	r1, r3
 8002290:	4862      	ldr	r0, [pc, #392]	; (800241c <HAL_UART_MspInit+0x1f0>)
 8002292:	f001 f93f 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0320 	add.w	r3, r7, #32
 80022a8:	4619      	mov	r1, r3
 80022aa:	485c      	ldr	r0, [pc, #368]	; (800241c <HAL_UART_MspInit+0x1f0>)
 80022ac:	f001 f932 	bl	8003514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2025      	movs	r0, #37	; 0x25
 80022b6:	f000 fe92 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	; 0x25
 80022bc:	f000 feab 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022c0:	e0a3      	b.n	800240a <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a56      	ldr	r2, [pc, #344]	; (8002420 <HAL_UART_MspInit+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d138      	bne.n	800233e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022cc:	4b52      	ldr	r3, [pc, #328]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a51      	ldr	r2, [pc, #324]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 80022d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b49      	ldr	r3, [pc, #292]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022fc:	2304      	movs	r3, #4
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0320 	add.w	r3, r7, #32
 800230c:	4619      	mov	r1, r3
 800230e:	4843      	ldr	r0, [pc, #268]	; (800241c <HAL_UART_MspInit+0x1f0>)
 8002310:	f001 f900 	bl	8003514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4619      	mov	r1, r3
 8002326:	483d      	ldr	r0, [pc, #244]	; (800241c <HAL_UART_MspInit+0x1f0>)
 8002328:	f001 f8f4 	bl	8003514 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	2026      	movs	r0, #38	; 0x26
 8002332:	f000 fe54 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002336:	2026      	movs	r0, #38	; 0x26
 8002338:	f000 fe6d 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 800233c:	e065      	b.n	800240a <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_UART_MspInit+0x1f8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d160      	bne.n	800240a <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002348:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a32      	ldr	r2, [pc, #200]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 800234e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_UART_MspInit+0x1ec>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	4619      	mov	r1, r3
 800238c:	4826      	ldr	r0, [pc, #152]	; (8002428 <HAL_UART_MspInit+0x1fc>)
 800238e:	f001 f8c1 	bl	8003514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4619      	mov	r1, r3
 80023a6:	4820      	ldr	r0, [pc, #128]	; (8002428 <HAL_UART_MspInit+0x1fc>)
 80023a8:	f001 f8b4 	bl	8003514 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <HAL_UART_MspInit+0x200>)
 80023ae:	4a20      	ldr	r2, [pc, #128]	; (8002430 <HAL_UART_MspInit+0x204>)
 80023b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <HAL_UART_MspInit+0x200>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_UART_MspInit+0x200>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_UART_MspInit+0x200>)
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_UART_MspInit+0x200>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x200>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_UART_MspInit+0x200>)
 80023d2:	2220      	movs	r2, #32
 80023d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x200>)
 80023d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023de:	4813      	ldr	r0, [pc, #76]	; (800242c <HAL_UART_MspInit+0x200>)
 80023e0:	f000 fe34 	bl	800304c <HAL_DMA_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80023ea:	f7ff fcf5 	bl	8001dd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a0e      	ldr	r2, [pc, #56]	; (800242c <HAL_UART_MspInit+0x200>)
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_UART_MspInit+0x200>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	2027      	movs	r0, #39	; 0x27
 8002400:	f000 fded 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002404:	2027      	movs	r0, #39	; 0x27
 8002406:	f000 fe06 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3730      	adds	r7, #48	; 0x30
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40013800 	.word	0x40013800
 8002418:	40021000 	.word	0x40021000
 800241c:	40010800 	.word	0x40010800
 8002420:	40004400 	.word	0x40004400
 8002424:	40004800 	.word	0x40004800
 8002428:	40010c00 	.word	0x40010c00
 800242c:	200005e4 	.word	0x200005e4
 8002430:	40020030 	.word	0x40020030

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <HardFault_Handler+0x4>

08002446 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <MemManage_Handler+0x4>

0800244c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <BusFault_Handler+0x4>

08002452 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <UsageFault_Handler+0x4>

08002458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002480:	f000 fc98 	bl	8002db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800248c:	2002      	movs	r0, #2
 800248e:	f001 f9cb 	bl	8003828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA1_Channel3_IRQHandler+0x10>)
 800249e:	f000 ff05 	bl	80032ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200005e4 	.word	0x200005e4

080024ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <USART1_IRQHandler+0x70>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b0d      	cmp	r3, #13
 80024bc:	d013      	beq.n	80024e6 <USART1_IRQHandler+0x3a>
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b0a      	cmp	r3, #10
 80024c2:	d010      	beq.n	80024e6 <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <USART1_IRQHandler+0x74>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d920      	bls.n	800250e <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <USART1_IRQHandler+0x78>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4a15      	ldr	r2, [pc, #84]	; (8002528 <USART1_IRQHandler+0x7c>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <USART1_IRQHandler+0x78>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <USART1_IRQHandler+0x78>)
 80024e2:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 80024e4:	e013      	b.n	800250e <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <USART1_IRQHandler+0x78>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <USART1_IRQHandler+0x78>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <USART1_IRQHandler+0x80>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e002      	b.n	8002502 <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <USART1_IRQHandler+0x78>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <USART1_IRQHandler+0x74>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <USART1_IRQHandler+0x74>)
 800250c:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800250e:	4808      	ldr	r0, [pc, #32]	; (8002530 <USART1_IRQHandler+0x84>)
 8002510:	f004 fd64 	bl	8006fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013800 	.word	0x40013800
 8002520:	200000f1 	.word	0x200000f1
 8002524:	20000502 	.word	0x20000502
 8002528:	200000b4 	.word	0x200000b4
 800252c:	200000f0 	.word	0x200000f0
 8002530:	200008bc 	.word	0x200008bc

08002534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  uint8_t data = USART2->DR;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <USART2_IRQHandler+0x50>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	71fb      	strb	r3, [r7, #7]

//  if(data != '\0')
//  {

	  if(fingerprint_count_bytes >= 11)  // 11  // 5
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <USART2_IRQHandler+0x54>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b0a      	cmp	r3, #10
 8002546:	d906      	bls.n	8002556 <USART2_IRQHandler+0x22>
	  {
		  fingerprint_count_bytes = 0;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <USART2_IRQHandler+0x54>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
		  data_from_fingerprint_module = 1;
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <USART2_IRQHandler+0x58>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e00e      	b.n	8002574 <USART2_IRQHandler+0x40>

		  //memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
	  }
	  else
	  {
		  response_packet[fingerprint_count_bytes] = data;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <USART2_IRQHandler+0x54>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <USART2_IRQHandler+0x5c>)
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	5453      	strb	r3, [r2, r1]
		  data_from_fingerprint_module = 0;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <USART2_IRQHandler+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
		  fingerprint_count_bytes ++;
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <USART2_IRQHandler+0x54>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <USART2_IRQHandler+0x54>)
 8002572:	701a      	strb	r2, [r3, #0]
	  }
//  }


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002574:	4807      	ldr	r0, [pc, #28]	; (8002594 <USART2_IRQHandler+0x60>)
 8002576:	f004 fd31 	bl	8006fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40004400 	.word	0x40004400
 8002588:	200000ac 	.word	0x200000ac
 800258c:	200000ad 	.word	0x200000ad
 8002590:	20000504 	.word	0x20000504
 8002594:	2000098c 	.word	0x2000098c

08002598 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <USART3_IRQHandler+0x10>)
 800259e:	f004 fd1d 	bl	8006fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000628 	.word	0x20000628

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f005 f91c 	bl	8007818 <__errno>
 80025e0:	4602      	mov	r2, r0
 80025e2:	230c      	movs	r3, #12
 80025e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20005000 	.word	0x20005000
 800260c:	00000400 	.word	0x00000400
 8002610:	20000510 	.word	0x20000510
 8002614:	20000e60 	.word	0x20000e60

08002618 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <SystemInit+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <SystemInit+0x5c>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <SystemInit+0x5c>)
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4911      	ldr	r1, [pc, #68]	; (8002674 <SystemInit+0x5c>)
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <SystemInit+0x60>)
 8002630:	4013      	ands	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <SystemInit+0x5c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <SystemInit+0x5c>)
 800263a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <SystemInit+0x5c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SystemInit+0x5c>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <SystemInit+0x5c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <SystemInit+0x5c>)
 8002656:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800265a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SystemInit+0x5c>)
 800265e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002662:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <SystemInit+0x64>)
 8002666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800266a:	609a      	str	r2, [r3, #8]
#endif 
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000
 8002678:	f8ff0000 	.word	0xf8ff0000
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 800268a:	f107 020f 	add.w	r2, r7, #15
 800268e:	1df9      	adds	r1, r7, #7
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2301      	movs	r3, #1
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <W25qxx_Spi+0x28>)
 8002698:	f003 fb25 	bl	8005ce6 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000058c 	.word	0x2000058c

080026ac <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 80026c2:	2200      	movs	r2, #0
 80026c4:	2102      	movs	r1, #2
 80026c6:	4813      	ldr	r0, [pc, #76]	; (8002714 <W25qxx_ReadID+0x68>)
 80026c8:	f001 f895 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 80026cc:	209f      	movs	r0, #159	; 0x9f
 80026ce:	f7ff ffd7 	bl	8002680 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026d2:	20a5      	movs	r0, #165	; 0xa5
 80026d4:	f7ff ffd4 	bl	8002680 <W25qxx_Spi>
 80026d8:	4603      	mov	r3, r0
 80026da:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026dc:	20a5      	movs	r0, #165	; 0xa5
 80026de:	f7ff ffcf 	bl	8002680 <W25qxx_Spi>
 80026e2:	4603      	mov	r3, r0
 80026e4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026e6:	20a5      	movs	r0, #165	; 0xa5
 80026e8:	f7ff ffca 	bl	8002680 <W25qxx_Spi>
 80026ec:	4603      	mov	r3, r0
 80026ee:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 80026f0:	2201      	movs	r2, #1
 80026f2:	2102      	movs	r1, #2
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <W25qxx_ReadID+0x68>)
 80026f6:	f001 f87e 	bl	80037f6 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4313      	orrs	r3, r2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

	return Temp;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40010c00 	.word	0x40010c00

08002718 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 800271c:	2200      	movs	r2, #0
 800271e:	2102      	movs	r1, #2
 8002720:	4807      	ldr	r0, [pc, #28]	; (8002740 <W25qxx_WriteEnable+0x28>)
 8002722:	f001 f868 	bl	80037f6 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8002726:	2006      	movs	r0, #6
 8002728:	f7ff ffaa 	bl	8002680 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 800272c:	2201      	movs	r2, #1
 800272e:	2102      	movs	r1, #2
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <W25qxx_WriteEnable+0x28>)
 8002732:	f001 f860 	bl	80037f6 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002736:	2001      	movs	r0, #1
 8002738:	f000 fb58 	bl	8002dec <HAL_Delay>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40010c00 	.word	0x40010c00

08002744 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f000 fb4f 	bl	8002dec <HAL_Delay>
	W25QFLASH_CS_SELECT;
 800274e:	2200      	movs	r2, #0
 8002750:	2102      	movs	r1, #2
 8002752:	480f      	ldr	r0, [pc, #60]	; (8002790 <W25qxx_WaitForWriteEnd+0x4c>)
 8002754:	f001 f84f 	bl	80037f6 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8002758:	2005      	movs	r0, #5
 800275a:	f7ff ff91 	bl	8002680 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800275e:	20a5      	movs	r0, #165	; 0xa5
 8002760:	f7ff ff8e 	bl	8002680 <W25qxx_Spi>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <W25qxx_WaitForWriteEnd+0x50>)
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 fb3c 	bl	8002dec <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <W25qxx_WaitForWriteEnd+0x50>)
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ed      	bne.n	800275e <W25qxx_WaitForWriteEnd+0x1a>

	W25QFLASH_CS_UNSELECT;
 8002782:	2201      	movs	r2, #1
 8002784:	2102      	movs	r1, #2
 8002786:	4802      	ldr	r0, [pc, #8]	; (8002790 <W25qxx_WaitForWriteEnd+0x4c>)
 8002788:	f001 f835 	bl	80037f6 <HAL_GPIO_WritePin>
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40010c00 	.word	0x40010c00
 8002794:	200009cc 	.word	0x200009cc

08002798 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800279e:	4b85      	ldr	r3, [pc, #532]	; (80029b4 <W25qxx_Init+0x21c>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 80027a6:	e002      	b.n	80027ae <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f000 fb1f 	bl	8002dec <HAL_Delay>
	while(HAL_GetTick() < 100)
 80027ae:	f000 fb13 	bl	8002dd8 <HAL_GetTick>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b63      	cmp	r3, #99	; 0x63
 80027b6:	d9f7      	bls.n	80027a8 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 80027b8:	2201      	movs	r2, #1
 80027ba:	2102      	movs	r1, #2
 80027bc:	487e      	ldr	r0, [pc, #504]	; (80029b8 <W25qxx_Init+0x220>)
 80027be:	f001 f81a 	bl	80037f6 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80027c2:	2064      	movs	r0, #100	; 0x64
 80027c4:	f000 fb12 	bl	8002dec <HAL_Delay>

	uint32_t id = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	607b      	str	r3, [r7, #4]

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
	#endif
	
	id = W25qxx_ReadID();
 80027cc:	f7ff ff6e 	bl	80026ac <W25qxx_ReadID>
 80027d0:	6078      	str	r0, [r7, #4]
	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
	#endif

	switch(id & 0x0000FFFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f244 0212 	movw	r2, #16402	; 0x4012
 80027da:	4293      	cmp	r3, r2
 80027dc:	f000 808a 	beq.w	80028f4 <W25qxx_Init+0x15c>
 80027e0:	f244 0212 	movw	r2, #16402	; 0x4012
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d829      	bhi.n	800283c <W25qxx_Init+0xa4>
 80027e8:	f243 0214 	movw	r2, #12308	; 0x3014
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f000 809b 	beq.w	8002928 <W25qxx_Init+0x190>
 80027f2:	f243 0214 	movw	r2, #12308	; 0x3014
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d80f      	bhi.n	800281a <W25qxx_Init+0x82>
 80027fa:	f243 0212 	movw	r2, #12306	; 0x3012
 80027fe:	4293      	cmp	r3, r2
 8002800:	f000 809a 	beq.w	8002938 <W25qxx_Init+0x1a0>
 8002804:	f243 0212 	movw	r2, #12306	; 0x3012
 8002808:	4293      	cmp	r3, r2
 800280a:	f200 8091 	bhi.w	8002930 <W25qxx_Init+0x198>
 800280e:	f243 0211 	movw	r2, #12305	; 0x3011
 8002812:	4293      	cmp	r3, r2
 8002814:	f000 8094 	beq.w	8002940 <W25qxx_Init+0x1a8>
 8002818:	e096      	b.n	8002948 <W25qxx_Init+0x1b0>
 800281a:	f243 0216 	movw	r2, #12310	; 0x3016
 800281e:	4293      	cmp	r3, r2
 8002820:	d07a      	beq.n	8002918 <W25qxx_Init+0x180>
 8002822:	f243 0216 	movw	r2, #12310	; 0x3016
 8002826:	4293      	cmp	r3, r2
 8002828:	d37a      	bcc.n	8002920 <W25qxx_Init+0x188>
 800282a:	f243 0217 	movw	r2, #12311	; 0x3017
 800282e:	4293      	cmp	r3, r2
 8002830:	d06e      	beq.n	8002910 <W25qxx_Init+0x178>
 8002832:	f244 0211 	movw	r2, #16401	; 0x4011
 8002836:	4293      	cmp	r3, r2
 8002838:	d063      	beq.n	8002902 <W25qxx_Init+0x16a>
 800283a:	e085      	b.n	8002948 <W25qxx_Init+0x1b0>
 800283c:	f244 0216 	movw	r2, #16406	; 0x4016
 8002840:	4293      	cmp	r3, r2
 8002842:	d03b      	beq.n	80028bc <W25qxx_Init+0x124>
 8002844:	f244 0216 	movw	r2, #16406	; 0x4016
 8002848:	4293      	cmp	r3, r2
 800284a:	d808      	bhi.n	800285e <W25qxx_Init+0xc6>
 800284c:	f244 0214 	movw	r2, #16404	; 0x4014
 8002850:	4293      	cmp	r3, r2
 8002852:	d041      	beq.n	80028d8 <W25qxx_Init+0x140>
 8002854:	f244 0214 	movw	r2, #16404	; 0x4014
 8002858:	4293      	cmp	r3, r2
 800285a:	d836      	bhi.n	80028ca <W25qxx_Init+0x132>
 800285c:	e043      	b.n	80028e6 <W25qxx_Init+0x14e>
 800285e:	f244 0218 	movw	r2, #16408	; 0x4018
 8002862:	4293      	cmp	r3, r2
 8002864:	d01b      	beq.n	800289e <W25qxx_Init+0x106>
 8002866:	f244 0218 	movw	r2, #16408	; 0x4018
 800286a:	4293      	cmp	r3, r2
 800286c:	d31f      	bcc.n	80028ae <W25qxx_Init+0x116>
 800286e:	f244 0219 	movw	r2, #16409	; 0x4019
 8002872:	4293      	cmp	r3, r2
 8002874:	d00b      	beq.n	800288e <W25qxx_Init+0xf6>
 8002876:	f244 021a 	movw	r2, #16410	; 0x401a
 800287a:	4293      	cmp	r3, r2
 800287c:	d164      	bne.n	8002948 <W25qxx_Init+0x1b0>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 800287e:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <W25qxx_Init+0x21c>)
 8002880:	220a      	movs	r2, #10
 8002882:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8002884:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <W25qxx_Init+0x21c>)
 8002886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
			#endif
		break;
 800288c:	e062      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <W25qxx_Init+0x21c>)
 8002890:	2209      	movs	r2, #9
 8002892:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8002894:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <W25qxx_Init+0x21c>)
 8002896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
			#endif
		break;
 800289c:	e05a      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <W25qxx_Init+0x21c>)
 80028a0:	2208      	movs	r2, #8
 80028a2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 80028a4:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <W25qxx_Init+0x21c>)
 80028a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028aa:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
			#endif
		break;
 80028ac:	e052      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <W25qxx_Init+0x21c>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 80028b4:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <W25qxx_Init+0x21c>)
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
			#endif
		break;
 80028ba:	e04b      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 80028bc:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <W25qxx_Init+0x21c>)
 80028be:	2206      	movs	r2, #6
 80028c0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 80028c2:	4b3c      	ldr	r3, [pc, #240]	; (80029b4 <W25qxx_Init+0x21c>)
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
			#endif
		break;
 80028c8:	e044      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <W25qxx_Init+0x21c>)
 80028cc:	2205      	movs	r2, #5
 80028ce:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <W25qxx_Init+0x21c>)
 80028d2:	2220      	movs	r2, #32
 80028d4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
			#endif
		break;
 80028d6:	e03d      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <W25qxx_Init+0x21c>)
 80028da:	2204      	movs	r2, #4
 80028dc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 80028de:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <W25qxx_Init+0x21c>)
 80028e0:	2210      	movs	r2, #16
 80028e2:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
			#endif
		break;
 80028e4:	e036      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 80028e6:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <W25qxx_Init+0x21c>)
 80028e8:	2203      	movs	r2, #3
 80028ea:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <W25qxx_Init+0x21c>)
 80028ee:	2208      	movs	r2, #8
 80028f0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
			#endif
		break;
 80028f2:	e02f      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <W25qxx_Init+0x21c>)
 80028f6:	2202      	movs	r2, #2
 80028f8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <W25qxx_Init+0x21c>)
 80028fc:	2204      	movs	r2, #4
 80028fe:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
			#endif
		break;
 8002900:	e028      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <W25qxx_Init+0x21c>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <W25qxx_Init+0x21c>)
 800290a:	2202      	movs	r2, #2
 800290c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
			#endif
		break;
 800290e:	e021      	b.n	8002954 <W25qxx_Init+0x1bc>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <W25qxx_Init+0x21c>)
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
			#endif
		break;
 8002916:	e01d      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <W25qxx_Init+0x21c>)
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
			#endif
		break;
 800291e:	e019      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <W25qxx_Init+0x21c>)
 8002922:	2220      	movs	r2, #32
 8002924:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
			#endif
		break;
 8002926:	e015      	b.n	8002954 <W25qxx_Init+0x1bc>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <W25qxx_Init+0x21c>)
 800292a:	2210      	movs	r2, #16
 800292c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
			#endif
		break;
 800292e:	e011      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <W25qxx_Init+0x21c>)
 8002932:	2208      	movs	r2, #8
 8002934:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
			#endif
		break;
 8002936:	e00d      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <W25qxx_Init+0x21c>)
 800293a:	2204      	movs	r2, #4
 800293c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
			#endif
		break;
 800293e:	e009      	b.n	8002954 <W25qxx_Init+0x1bc>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <W25qxx_Init+0x21c>)
 8002942:	2202      	movs	r2, #2
 8002944:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
			#endif
		break;
 8002946:	e005      	b.n	8002954 <W25qxx_Init+0x1bc>
		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
			#endif

			w25qxx.Lock = 0;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <W25qxx_Init+0x21c>)
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8002950:	2300      	movs	r3, #0
 8002952:	e02b      	b.n	80029ac <W25qxx_Init+0x214>
	}


	w25qxx.PageSize = 256;
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <W25qxx_Init+0x21c>)
 8002956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <W25qxx_Init+0x21c>)
 800295e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002962:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <W25qxx_Init+0x21c>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <W25qxx_Init+0x21c>)
 800296c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <W25qxx_Init+0x21c>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <W25qxx_Init+0x21c>)
 8002974:	6912      	ldr	r2, [r2, #16]
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <W25qxx_Init+0x21c>)
 800297c:	8952      	ldrh	r2, [r2, #10]
 800297e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <W25qxx_Init+0x21c>)
 8002984:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <W25qxx_Init+0x21c>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <W25qxx_Init+0x21c>)
 800298e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <W25qxx_Init+0x21c>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <W25qxx_Init+0x21c>)
 8002996:	6912      	ldr	r2, [r2, #16]
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	0a9b      	lsrs	r3, r3, #10
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <W25qxx_Init+0x21c>)
 80029a0:	6213      	str	r3, [r2, #32]
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
	#endif

	w25qxx.Lock = 0;
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <W25qxx_Init+0x21c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80029aa:	2301      	movs	r3, #1
}	
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200009cc 	.word	0x200009cc
 80029b8:	40010c00 	.word	0x40010c00

080029bc <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 80029c4:	e002      	b.n	80029cc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fa10 	bl	8002dec <HAL_Delay>
	while(w25qxx.Lock == 1)
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <W25qxx_EraseSector+0xa0>)
 80029ce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d0f7      	beq.n	80029c6 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <W25qxx_EraseSector+0xa0>)
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80029de:	f7ff feb1 	bl	8002744 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <W25qxx_EraseSector+0xa0>)
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 80029ee:	f7ff fe93 	bl	8002718 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80029f2:	2200      	movs	r2, #0
 80029f4:	2102      	movs	r1, #2
 80029f6:	481a      	ldr	r0, [pc, #104]	; (8002a60 <W25qxx_EraseSector+0xa4>)
 80029f8:	f000 fefd 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 80029fc:	2020      	movs	r0, #32
 80029fe:	f7ff fe3f 	bl	8002680 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <W25qxx_EraseSector+0xa0>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d905      	bls.n	8002a16 <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0e1b      	lsrs	r3, r3, #24
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe35 	bl	8002680 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fe2f 	bl	8002680 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe29 	bl	8002680 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fe24 	bl	8002680 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4808      	ldr	r0, [pc, #32]	; (8002a60 <W25qxx_EraseSector+0xa4>)
 8002a3e:	f000 feda 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8002a42:	f7ff fe7f 	bl	8002744 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f000 f9d0 	bl	8002dec <HAL_Delay>
	w25qxx.Lock = 0;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <W25qxx_EraseSector+0xa0>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	200009cc 	.word	0x200009cc
 8002a60:	40010c00 	.word	0x40010c00

08002a64 <W25qxx_SectorToPage>:
	return((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}

//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	return(SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <W25qxx_SectorToPage+0x24>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <W25qxx_SectorToPage+0x24>)
 8002a78:	8952      	ldrh	r2, [r2, #10]
 8002a7a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	200009cc 	.word	0x200009cc

08002a8c <W25qxx_WriteByte>:
	return 1;
}

//###################################################################################################################
void W25qxx_WriteByte(uint8_t byte, uint32_t addr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock == 1)
 8002a98:	e002      	b.n	8002aa0 <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f000 f9a6 	bl	8002dec <HAL_Delay>
	while(w25qxx.Lock == 1)
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <W25qxx_WriteByte+0x9c>)
 8002aa2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d0f7      	beq.n	8002a9a <W25qxx_WriteByte+0xe>

	w25qxx.Lock = 1;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <W25qxx_WriteByte+0x9c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 8002ab2:	f7ff fe47 	bl	8002744 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002ab6:	f7ff fe2f 	bl	8002718 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8002aba:	2200      	movs	r2, #0
 8002abc:	2102      	movs	r1, #2
 8002abe:	481b      	ldr	r0, [pc, #108]	; (8002b2c <W25qxx_WriteByte+0xa0>)
 8002ac0:	f000 fe99 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f7ff fddb 	bl	8002680 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <W25qxx_WriteByte+0x9c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d905      	bls.n	8002ade <W25qxx_WriteByte+0x52>
		W25qxx_Spi((addr & 0xFF000000) >> 24);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	0e1b      	lsrs	r3, r3, #24
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fdd1 	bl	8002680 <W25qxx_Spi>

	W25qxx_Spi((addr & 0xFF0000) >> 16);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fdcb 	bl	8002680 <W25qxx_Spi>
	W25qxx_Spi((addr & 0xFF00) >> 8);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fdc5 	bl	8002680 <W25qxx_Spi>
	W25qxx_Spi(addr & 0xFF);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fdc0 	bl	8002680 <W25qxx_Spi>

	W25qxx_Spi(byte);
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fdbc 	bl	8002680 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <W25qxx_WriteByte+0xa0>)
 8002b0e:	f000 fe72 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8002b12:	f7ff fe17 	bl	8002744 <W25qxx_WaitForWriteEnd>

	w25qxx.Lock = 0;
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <W25qxx_WriteByte+0x9c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200009cc 	.word	0x200009cc
 8002b2c:	40010c00 	.word	0x40010c00

08002b30 <W25qxx_ReadPage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8002b3e:	e002      	b.n	8002b46 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f000 f953 	bl	8002dec <HAL_Delay>
	while(w25qxx.Lock==1)
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b48:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d0f7      	beq.n	8002b40 <W25qxx_ReadPage+0x10>

	w25qxx.Lock = 1;
 8002b50:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize) || (NumByteToRead_up_to_PageSize==0))
 8002b58:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b5a:	895b      	ldrh	r3, [r3, #10]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d802      	bhi.n	8002b6a <W25qxx_ReadPage+0x3a>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b6c:	895b      	ldrh	r3, [r3, #10]
 8002b6e:	603b      	str	r3, [r7, #0]

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b78:	8952      	ldrh	r2, [r2, #10]
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d905      	bls.n	8002b8a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b80:	895b      	ldrh	r3, [r3, #10]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002b8c:	895b      	ldrh	r3, [r3, #10]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	fb03 f302 	mul.w	r3, r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
	W25QFLASH_CS_SELECT;
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	481e      	ldr	r0, [pc, #120]	; (8002c1c <W25qxx_ReadPage+0xec>)
 8002ba2:	f000 fe28 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8002ba6:	200b      	movs	r0, #11
 8002ba8:	f7ff fd6a 	bl	8002680 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d905      	bls.n	8002bc0 <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	0e1b      	lsrs	r3, r3, #24
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fd60 	bl	8002680 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fd5a 	bl	8002680 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fd54 	bl	8002680 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fd4f 	bl	8002680 <W25qxx_Spi>

	W25qxx_Spi(0);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fd4c 	bl	8002680 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	2364      	movs	r3, #100	; 0x64
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	480b      	ldr	r0, [pc, #44]	; (8002c20 <W25qxx_ReadPage+0xf0>)
 8002bf2:	f002 ff67 	bl	8005ac4 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead_up_to_PageSize--;
	}*/

	W25QFLASH_CS_UNSELECT;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	4808      	ldr	r0, [pc, #32]	; (8002c1c <W25qxx_ReadPage+0xec>)
 8002bfc:	f000 fdfb 	bl	80037f6 <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f000 f8f3 	bl	8002dec <HAL_Delay>
	w25qxx.Lock=0;
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <W25qxx_ReadPage+0xe8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200009cc 	.word	0x200009cc
 8002c1c:	40010c00 	.word	0x40010c00
 8002c20:	2000058c 	.word	0x2000058c

08002c24 <W25qxx_ReadSector>:

//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize==0))
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d802      	bhi.n	8002c42 <W25qxx_ReadSector+0x1e>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	603b      	str	r3, [r7, #0]

	uint32_t StartPage;
	int32_t	BytesToRead;
	uint32_t LocalOffset;

	if((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	441a      	add	r2, r3
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d905      	bls.n	8002c62 <W25qxx_ReadSector+0x3e>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e001      	b.n	8002c66 <W25qxx_ReadSector+0x42>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	61bb      	str	r3, [r7, #24]

	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002c66:	68b8      	ldr	r0, [r7, #8]
 8002c68:	f7ff fefc 	bl	8002a64 <W25qxx_SectorToPage>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002c70:	895b      	ldrh	r3, [r3, #10]
 8002c72:	4619      	mov	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	61fb      	str	r3, [r7, #28]

	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002c80:	895b      	ldrh	r3, [r3, #10]
 8002c82:	461a      	mov	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c8a:	fb02 f201 	mul.w	r2, r2, r1
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

	do
	{		
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff ff49 	bl	8002b30 <W25qxx_ReadPage>
		StartPage++;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize-LocalOffset;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002ca6:	895b      	ldrh	r3, [r3, #10]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1a9a      	subs	r2, r3, r2
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
		//pBuffer+=w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <W25qxx_ReadSector+0xb4>)
 8002cb6:	895b      	ldrh	r3, [r3, #10]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
	}
	while(BytesToRead > 0);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	dce1      	bgt.n	8002c92 <W25qxx_ReadSector+0x6e>
}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200009cc 	.word	0x200009cc

08002cdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cdc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cde:	e003      	b.n	8002ce8 <LoopCopyDataInit>

08002ce0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ce2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ce4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ce6:	3104      	adds	r1, #4

08002ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ce8:	480a      	ldr	r0, [pc, #40]	; (8002d14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cf0:	d3f6      	bcc.n	8002ce0 <CopyDataInit>
  ldr r2, =_sbss
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cf4:	e002      	b.n	8002cfc <LoopFillZerobss>

08002cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cf8:	f842 3b04 	str.w	r3, [r2], #4

08002cfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d00:	d3f9      	bcc.n	8002cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d02:	f7ff fc89 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d06:	f004 fd8d 	bl	8007824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d0a:	f7fe fcbf 	bl	800168c <main>
  bx lr
 8002d0e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d10:	080081f4 	.word	0x080081f4
  ldr r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d18:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8002d1c:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8002d20:	20000e60 	.word	0x20000e60

08002d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC1_2_IRQHandler>
	...

08002d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_Init+0x28>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_Init+0x28>)
 8002d32:	f043 0310 	orr.w	r3, r3, #16
 8002d36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 f945 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f000 f808 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d44:	f7ff f934 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40022000 	.word	0x40022000

08002d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_InitTick+0x54>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_InitTick+0x58>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f95d 	bl	8003032 <HAL_SYSTICK_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00e      	b.n	8002da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d80a      	bhi.n	8002d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d90:	f000 f925 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d94:	4a06      	ldr	r2, [pc, #24]	; (8002db0 <HAL_InitTick+0x5c>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20000014 	.word	0x20000014
 8002db0:	20000010 	.word	0x20000010

08002db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_IncTick+0x1c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	20000014 	.word	0x20000014
 8002dd4:	200009f4 	.word	0x200009f4

08002dd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return uwTick;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_GetTick+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	200009f4 	.word	0x200009f4

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff fff0 	bl	8002dd8 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_Delay+0x40>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e12:	bf00      	nop
 8002e14:	f7ff ffe0 	bl	8002dd8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000014 	.word	0x20000014

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <__NVIC_EnableIRQ+0x34>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	; (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa8:	f7ff ff90 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff2d 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff42 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff90 	bl	8002f20 <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5f 	bl	8002ecc <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff35 	bl	8002e94 <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e043      	b.n	80030ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <HAL_DMA_Init+0xa8>)
 800306a:	4413      	add	r3, r2
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <HAL_DMA_Init+0xac>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <HAL_DMA_Init+0xb0>)
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003096:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800309a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	bffdfff8 	.word	0xbffdfff8
 80030f8:	cccccccd 	.word	0xcccccccd
 80030fc:	40020000 	.word	0x40020000

08003100 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Start_IT+0x20>
 800311c:	2302      	movs	r3, #2
 800311e:	e04a      	b.n	80031b6 <HAL_DMA_Start_IT+0xb6>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800312e:	2b01      	cmp	r3, #1
 8003130:	d13a      	bne.n	80031a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f9ae 	bl	80034b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 020e 	orr.w	r2, r2, #14
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e00f      	b.n	8003196 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0204 	bic.w	r2, r2, #4
 8003184:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 020a 	orr.w	r2, r2, #10
 8003194:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e005      	b.n	80031b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d005      	beq.n	80031e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2204      	movs	r2, #4
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e051      	b.n	8003286 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 020e 	bic.w	r2, r2, #14
 80031f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_DMA_Abort_IT+0xd0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d029      	beq.n	8003260 <HAL_DMA_Abort_IT+0xa0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <HAL_DMA_Abort_IT+0xd4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d022      	beq.n	800325c <HAL_DMA_Abort_IT+0x9c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_DMA_Abort_IT+0xd8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d01a      	beq.n	8003256 <HAL_DMA_Abort_IT+0x96>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <HAL_DMA_Abort_IT+0xdc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d012      	beq.n	8003250 <HAL_DMA_Abort_IT+0x90>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_DMA_Abort_IT+0xe0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00a      	beq.n	800324a <HAL_DMA_Abort_IT+0x8a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_DMA_Abort_IT+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d102      	bne.n	8003244 <HAL_DMA_Abort_IT+0x84>
 800323e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003242:	e00e      	b.n	8003262 <HAL_DMA_Abort_IT+0xa2>
 8003244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003248:	e00b      	b.n	8003262 <HAL_DMA_Abort_IT+0xa2>
 800324a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800324e:	e008      	b.n	8003262 <HAL_DMA_Abort_IT+0xa2>
 8003250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003254:	e005      	b.n	8003262 <HAL_DMA_Abort_IT+0xa2>
 8003256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325a:	e002      	b.n	8003262 <HAL_DMA_Abort_IT+0xa2>
 800325c:	2310      	movs	r3, #16
 800325e:	e000      	b.n	8003262 <HAL_DMA_Abort_IT+0xa2>
 8003260:	2301      	movs	r3, #1
 8003262:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_DMA_Abort_IT+0xe8>)
 8003264:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
    } 
  }
  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40020008 	.word	0x40020008
 8003294:	4002001c 	.word	0x4002001c
 8003298:	40020030 	.word	0x40020030
 800329c:	40020044 	.word	0x40020044
 80032a0:	40020058 	.word	0x40020058
 80032a4:	4002006c 	.word	0x4002006c
 80032a8:	40020000 	.word	0x40020000

080032ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2204      	movs	r2, #4
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d04f      	beq.n	8003374 <HAL_DMA_IRQHandler+0xc8>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_DMA_IRQHandler+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d029      	beq.n	800335a <HAL_DMA_IRQHandler+0xae>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_DMA_IRQHandler+0x1f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0xaa>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a63      	ldr	r2, [pc, #396]	; (80034a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01a      	beq.n	8003350 <HAL_DMA_IRQHandler+0xa4>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a62      	ldr	r2, [pc, #392]	; (80034a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d012      	beq.n	800334a <HAL_DMA_IRQHandler+0x9e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_DMA_IRQHandler+0x200>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00a      	beq.n	8003344 <HAL_DMA_IRQHandler+0x98>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5f      	ldr	r2, [pc, #380]	; (80034b0 <HAL_DMA_IRQHandler+0x204>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d102      	bne.n	800333e <HAL_DMA_IRQHandler+0x92>
 8003338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800333c:	e00e      	b.n	800335c <HAL_DMA_IRQHandler+0xb0>
 800333e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003342:	e00b      	b.n	800335c <HAL_DMA_IRQHandler+0xb0>
 8003344:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003348:	e008      	b.n	800335c <HAL_DMA_IRQHandler+0xb0>
 800334a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800334e:	e005      	b.n	800335c <HAL_DMA_IRQHandler+0xb0>
 8003350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003354:	e002      	b.n	800335c <HAL_DMA_IRQHandler+0xb0>
 8003356:	2340      	movs	r3, #64	; 0x40
 8003358:	e000      	b.n	800335c <HAL_DMA_IRQHandler+0xb0>
 800335a:	2304      	movs	r3, #4
 800335c:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_DMA_IRQHandler+0x208>)
 800335e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8094 	beq.w	8003492 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003372:	e08e      	b.n	8003492 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2202      	movs	r2, #2
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d056      	beq.n	8003432 <HAL_DMA_IRQHandler+0x186>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d051      	beq.n	8003432 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020a 	bic.w	r2, r2, #10
 80033aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_DMA_IRQHandler+0x1f0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d029      	beq.n	8003412 <HAL_DMA_IRQHandler+0x166>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a37      	ldr	r2, [pc, #220]	; (80034a0 <HAL_DMA_IRQHandler+0x1f4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d022      	beq.n	800340e <HAL_DMA_IRQHandler+0x162>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <HAL_DMA_IRQHandler+0x1f8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01a      	beq.n	8003408 <HAL_DMA_IRQHandler+0x15c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a34      	ldr	r2, [pc, #208]	; (80034a8 <HAL_DMA_IRQHandler+0x1fc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d012      	beq.n	8003402 <HAL_DMA_IRQHandler+0x156>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a32      	ldr	r2, [pc, #200]	; (80034ac <HAL_DMA_IRQHandler+0x200>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00a      	beq.n	80033fc <HAL_DMA_IRQHandler+0x150>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <HAL_DMA_IRQHandler+0x204>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d102      	bne.n	80033f6 <HAL_DMA_IRQHandler+0x14a>
 80033f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f4:	e00e      	b.n	8003414 <HAL_DMA_IRQHandler+0x168>
 80033f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fa:	e00b      	b.n	8003414 <HAL_DMA_IRQHandler+0x168>
 80033fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003400:	e008      	b.n	8003414 <HAL_DMA_IRQHandler+0x168>
 8003402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003406:	e005      	b.n	8003414 <HAL_DMA_IRQHandler+0x168>
 8003408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340c:	e002      	b.n	8003414 <HAL_DMA_IRQHandler+0x168>
 800340e:	2320      	movs	r3, #32
 8003410:	e000      	b.n	8003414 <HAL_DMA_IRQHandler+0x168>
 8003412:	2302      	movs	r3, #2
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <HAL_DMA_IRQHandler+0x208>)
 8003416:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d034      	beq.n	8003492 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003430:	e02f      	b.n	8003492 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2208      	movs	r2, #8
 8003438:	409a      	lsls	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d028      	beq.n	8003494 <HAL_DMA_IRQHandler+0x1e8>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020e 	bic.w	r2, r2, #14
 800345a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
    }
  }
  return;
 8003492:	bf00      	nop
 8003494:	bf00      	nop
}
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40020008 	.word	0x40020008
 80034a0:	4002001c 	.word	0x4002001c
 80034a4:	40020030 	.word	0x40020030
 80034a8:	40020044 	.word	0x40020044
 80034ac:	40020058 	.word	0x40020058
 80034b0:	4002006c 	.word	0x4002006c
 80034b4:	40020000 	.word	0x40020000

080034b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d108      	bne.n	80034f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034f6:	e007      	b.n	8003508 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	60da      	str	r2, [r3, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
	...

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b08b      	sub	sp, #44	; 0x2c
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003526:	e127      	b.n	8003778 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003528:	2201      	movs	r2, #1
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	429a      	cmp	r2, r3
 8003542:	f040 8116 	bne.w	8003772 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b12      	cmp	r3, #18
 800354c:	d034      	beq.n	80035b8 <HAL_GPIO_Init+0xa4>
 800354e:	2b12      	cmp	r3, #18
 8003550:	d80d      	bhi.n	800356e <HAL_GPIO_Init+0x5a>
 8003552:	2b02      	cmp	r3, #2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_Init+0x9a>
 8003556:	2b02      	cmp	r3, #2
 8003558:	d804      	bhi.n	8003564 <HAL_GPIO_Init+0x50>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d031      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
 800355e:	2b01      	cmp	r3, #1
 8003560:	d01c      	beq.n	800359c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003562:	e048      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003564:	2b03      	cmp	r3, #3
 8003566:	d043      	beq.n	80035f0 <HAL_GPIO_Init+0xdc>
 8003568:	2b11      	cmp	r3, #17
 800356a:	d01b      	beq.n	80035a4 <HAL_GPIO_Init+0x90>
          break;
 800356c:	e043      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800356e:	4a89      	ldr	r2, [pc, #548]	; (8003794 <HAL_GPIO_Init+0x280>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d026      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
 8003574:	4a87      	ldr	r2, [pc, #540]	; (8003794 <HAL_GPIO_Init+0x280>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d806      	bhi.n	8003588 <HAL_GPIO_Init+0x74>
 800357a:	4a87      	ldr	r2, [pc, #540]	; (8003798 <HAL_GPIO_Init+0x284>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d020      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
 8003580:	4a86      	ldr	r2, [pc, #536]	; (800379c <HAL_GPIO_Init+0x288>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01d      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
          break;
 8003586:	e036      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003588:	4a85      	ldr	r2, [pc, #532]	; (80037a0 <HAL_GPIO_Init+0x28c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d019      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
 800358e:	4a85      	ldr	r2, [pc, #532]	; (80037a4 <HAL_GPIO_Init+0x290>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d016      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
 8003594:	4a84      	ldr	r2, [pc, #528]	; (80037a8 <HAL_GPIO_Init+0x294>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0xae>
          break;
 800359a:	e02c      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	623b      	str	r3, [r7, #32]
          break;
 80035a2:	e028      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	3304      	adds	r3, #4
 80035aa:	623b      	str	r3, [r7, #32]
          break;
 80035ac:	e023      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	3308      	adds	r3, #8
 80035b4:	623b      	str	r3, [r7, #32]
          break;
 80035b6:	e01e      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	330c      	adds	r3, #12
 80035be:	623b      	str	r3, [r7, #32]
          break;
 80035c0:	e019      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035ca:	2304      	movs	r3, #4
 80035cc:	623b      	str	r3, [r7, #32]
          break;
 80035ce:	e012      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d8:	2308      	movs	r3, #8
 80035da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	611a      	str	r2, [r3, #16]
          break;
 80035e2:	e008      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e4:	2308      	movs	r3, #8
 80035e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	615a      	str	r2, [r3, #20]
          break;
 80035ee:	e002      	b.n	80035f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035f0:	2300      	movs	r3, #0
 80035f2:	623b      	str	r3, [r7, #32]
          break;
 80035f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2bff      	cmp	r3, #255	; 0xff
 80035fa:	d801      	bhi.n	8003600 <HAL_GPIO_Init+0xec>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	e001      	b.n	8003604 <HAL_GPIO_Init+0xf0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2bff      	cmp	r3, #255	; 0xff
 800360a:	d802      	bhi.n	8003612 <HAL_GPIO_Init+0xfe>
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	e002      	b.n	8003618 <HAL_GPIO_Init+0x104>
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	3b08      	subs	r3, #8
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	210f      	movs	r1, #15
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	401a      	ands	r2, r3
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	431a      	orrs	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8096 	beq.w	8003772 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003646:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_GPIO_Init+0x298>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_GPIO_Init+0x298>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6193      	str	r3, [r2, #24]
 8003652:	4b56      	ldr	r3, [pc, #344]	; (80037ac <HAL_GPIO_Init+0x298>)
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800365e:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <HAL_GPIO_Init+0x29c>)
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4b      	ldr	r2, [pc, #300]	; (80037b4 <HAL_GPIO_Init+0x2a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0x19e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4a      	ldr	r2, [pc, #296]	; (80037b8 <HAL_GPIO_Init+0x2a4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00d      	beq.n	80036ae <HAL_GPIO_Init+0x19a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a49      	ldr	r2, [pc, #292]	; (80037bc <HAL_GPIO_Init+0x2a8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x196>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a48      	ldr	r2, [pc, #288]	; (80037c0 <HAL_GPIO_Init+0x2ac>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_GPIO_Init+0x192>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x1a0>
 80036a6:	2304      	movs	r3, #4
 80036a8:	e004      	b.n	80036b4 <HAL_GPIO_Init+0x1a0>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_Init+0x1a0>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_GPIO_Init+0x1a0>
 80036b2:	2300      	movs	r3, #0
 80036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b6:	f002 0203 	and.w	r2, r2, #3
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	4093      	lsls	r3, r2
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036c4:	493a      	ldr	r1, [pc, #232]	; (80037b0 <HAL_GPIO_Init+0x29c>)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036de:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4938      	ldr	r1, [pc, #224]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
 80036ea:	e006      	b.n	80036fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036ec:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	4933      	ldr	r1, [pc, #204]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003706:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	492e      	ldr	r1, [pc, #184]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
 8003712:	e006      	b.n	8003722 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	43db      	mvns	r3, r3
 800371c:	4929      	ldr	r1, [pc, #164]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 800371e:	4013      	ands	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800372e:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	4924      	ldr	r1, [pc, #144]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
 800373a:	e006      	b.n	800374a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	43db      	mvns	r3, r3
 8003744:	491f      	ldr	r1, [pc, #124]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003746:	4013      	ands	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d006      	beq.n	8003764 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	491a      	ldr	r1, [pc, #104]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]
 8003762:	e006      	b.n	8003772 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003764:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	43db      	mvns	r3, r3
 800376c:	4915      	ldr	r1, [pc, #84]	; (80037c4 <HAL_GPIO_Init+0x2b0>)
 800376e:	4013      	ands	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	3301      	adds	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	f47f aed0 	bne.w	8003528 <HAL_GPIO_Init+0x14>
  }
}
 8003788:	bf00      	nop
 800378a:	372c      	adds	r7, #44	; 0x2c
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	10210000 	.word	0x10210000
 8003798:	10110000 	.word	0x10110000
 800379c:	10120000 	.word	0x10120000
 80037a0:	10310000 	.word	0x10310000
 80037a4:	10320000 	.word	0x10320000
 80037a8:	10220000 	.word	0x10220000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	40010400 	.word	0x40010400

080037c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e001      	b.n	80037ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	807b      	strh	r3, [r7, #2]
 8003802:	4613      	mov	r3, r2
 8003804:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003806:	787b      	ldrb	r3, [r7, #1]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003812:	e003      	b.n	800381c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	041a      	lsls	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
	...

08003828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fa94 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e11f      	b.n	8003aaa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fe fbc8 	bl	8002014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2224      	movs	r2, #36	; 0x24
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038bc:	f002 f838 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 80038c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a7b      	ldr	r2, [pc, #492]	; (8003ab4 <HAL_I2C_Init+0x25c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d807      	bhi.n	80038dc <HAL_I2C_Init+0x84>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a7a      	ldr	r2, [pc, #488]	; (8003ab8 <HAL_I2C_Init+0x260>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf94      	ite	ls
 80038d4:	2301      	movls	r3, #1
 80038d6:	2300      	movhi	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e006      	b.n	80038ea <HAL_I2C_Init+0x92>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a77      	ldr	r2, [pc, #476]	; (8003abc <HAL_I2C_Init+0x264>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf94      	ite	ls
 80038e4:	2301      	movls	r3, #1
 80038e6:	2300      	movhi	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0db      	b.n	8003aaa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a72      	ldr	r2, [pc, #456]	; (8003ac0 <HAL_I2C_Init+0x268>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a64      	ldr	r2, [pc, #400]	; (8003ab4 <HAL_I2C_Init+0x25c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d802      	bhi.n	800392c <HAL_I2C_Init+0xd4>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	3301      	adds	r3, #1
 800392a:	e009      	b.n	8003940 <HAL_I2C_Init+0xe8>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	4a63      	ldr	r2, [pc, #396]	; (8003ac4 <HAL_I2C_Init+0x26c>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	3301      	adds	r3, #1
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	430b      	orrs	r3, r1
 8003946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003952:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4956      	ldr	r1, [pc, #344]	; (8003ab4 <HAL_I2C_Init+0x25c>)
 800395c:	428b      	cmp	r3, r1
 800395e:	d80d      	bhi.n	800397c <HAL_I2C_Init+0x124>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e59      	subs	r1, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fbb1 f3f3 	udiv	r3, r1, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	2b04      	cmp	r3, #4
 8003976:	bf38      	it	cc
 8003978:	2304      	movcc	r3, #4
 800397a:	e04f      	b.n	8003a1c <HAL_I2C_Init+0x1c4>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d111      	bne.n	80039a8 <HAL_I2C_Init+0x150>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e58      	subs	r0, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	440b      	add	r3, r1
 8003992:	fbb0 f3f3 	udiv	r3, r0, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e012      	b.n	80039ce <HAL_I2C_Init+0x176>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	0099      	lsls	r1, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Init+0x17e>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e022      	b.n	8003a1c <HAL_I2C_Init+0x1c4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10e      	bne.n	80039fc <HAL_I2C_Init+0x1a4>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e58      	subs	r0, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	440b      	add	r3, r1
 80039ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Init+0x1c4>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e58      	subs	r0, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	0099      	lsls	r1, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	6809      	ldr	r1, [r1, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6911      	ldr	r1, [r2, #16]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	4311      	orrs	r1, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	000186a0 	.word	0x000186a0
 8003ab8:	001e847f 	.word	0x001e847f
 8003abc:	003d08ff 	.word	0x003d08ff
 8003ac0:	431bde83 	.word	0x431bde83
 8003ac4:	10624dd3 	.word	0x10624dd3

08003ac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	817b      	strh	r3, [r7, #10]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff f97c 	bl	8002dd8 <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	f040 80e0 	bne.w	8003cb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2319      	movs	r3, #25
 8003af6:	2201      	movs	r2, #1
 8003af8:	4970      	ldr	r1, [pc, #448]	; (8003cbc <HAL_I2C_Master_Transmit+0x1f4>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f001 f966 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0d3      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_I2C_Master_Transmit+0x50>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0cc      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d007      	beq.n	8003b3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2221      	movs	r2, #33	; 0x21
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	893a      	ldrh	r2, [r7, #8]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b80:	8979      	ldrh	r1, [r7, #10]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fe52 	bl	8004830 <I2C_MasterRequestWrite>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e08d      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bac:	e066      	b.n	8003c7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6a39      	ldr	r1, [r7, #32]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f001 f9e0 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06b      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x188>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	6a39      	ldr	r1, [r7, #32]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f001 f9d0 	bl	8004ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d107      	bne.n	8003c78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e01a      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d194      	bne.n	8003bae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	817b      	strh	r3, [r7, #10]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cdc:	f7ff f87c 	bl	8002dd8 <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 8238 	bne.w	8004160 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2319      	movs	r3, #25
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	497e      	ldr	r1, [pc, #504]	; (8003ef4 <HAL_I2C_Master_Receive+0x230>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f001 f866 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	e22b      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2C_Master_Receive+0x54>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e224      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d007      	beq.n	8003d3e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2222      	movs	r2, #34	; 0x22
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	893a      	ldrh	r2, [r7, #8]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a5e      	ldr	r2, [pc, #376]	; (8003ef8 <HAL_I2C_Master_Receive+0x234>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d80:	8979      	ldrh	r1, [r7, #10]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fdd4 	bl	8004934 <I2C_MasterRequestRead>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1e5      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e1b9      	b.n	800413a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11d      	bne.n	8003e0a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dde:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e06:	b662      	cpsie	i
 8003e08:	e197      	b.n	800413a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d11d      	bne.n	8003e4e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e22:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e4a:	b662      	cpsie	i
 8003e4c:	e175      	b.n	800413a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e74:	e161      	b.n	800413a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 811a 	bhi.w	80040b4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d123      	bne.n	8003ed0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f001 f8f5 	bl	800507c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e162      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ece:	e134      	b.n	800413a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d150      	bne.n	8003f7a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4906      	ldr	r1, [pc, #24]	; (8003efc <HAL_I2C_Master_Receive+0x238>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 ff72 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e137      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
 8003ef2:	bf00      	nop
 8003ef4:	00100002 	.word	0x00100002
 8003ef8:	ffff0000 	.word	0xffff0000
 8003efc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f00:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f10:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f44:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f78:	e0df      	b.n	800413a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	2200      	movs	r2, #0
 8003f82:	497a      	ldr	r1, [pc, #488]	; (800416c <HAL_I2C_Master_Receive+0x4a8>)
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 ff21 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0e6      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fa4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd8:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_I2C_Master_Receive+0x4ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	4a65      	ldr	r2, [pc, #404]	; (8004174 <HAL_I2C_Master_Receive+0x4b0>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	0a1a      	lsrs	r2, r3, #8
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	00da      	lsls	r2, r3, #3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d117      	bne.n	800402e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004020:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e099      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d1da      	bne.n	8003ff2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800407e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040b2:	e042      	b.n	800413a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 ffdf 	bl	800507c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e04c      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d118      	bne.n	800413a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	f47f ae99 	bne.w	8003e76 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	e000      	b.n	8004162 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004160:	2302      	movs	r3, #2
  }
}
 8004162:	4618      	mov	r0, r3
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	00010004 	.word	0x00010004
 8004170:	2000000c 	.word	0x2000000c
 8004174:	14f8b589 	.word	0x14f8b589

08004178 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004192:	f7fe fe21 	bl	8002dd8 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	f040 80d9 	bne.w	8004358 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2319      	movs	r3, #25
 80041ac:	2201      	movs	r2, #1
 80041ae:	496d      	ldr	r1, [pc, #436]	; (8004364 <HAL_I2C_Mem_Write+0x1ec>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fe0b 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
 80041be:	e0cc      	b.n	800435a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_I2C_Mem_Write+0x56>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0c5      	b.n	800435a <HAL_I2C_Mem_Write+0x1e2>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d007      	beq.n	80041f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2221      	movs	r2, #33	; 0x21
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_I2C_Mem_Write+0x1f0>)
 8004234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004236:	88f8      	ldrh	r0, [r7, #6]
 8004238:	893a      	ldrh	r2, [r7, #8]
 800423a:	8979      	ldrh	r1, [r7, #10]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	4603      	mov	r3, r0
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fc42 	bl	8004ad0 <I2C_RequestMemoryWrite>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d052      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e081      	b.n	800435a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fe8c 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d107      	bne.n	800427e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06b      	b.n	800435a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d11b      	bne.n	80042f8 <HAL_I2C_Mem_Write+0x180>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1aa      	bne.n	8004256 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fe78 	bl	8004ffa <I2C_WaitOnBTFFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	2b04      	cmp	r3, #4
 8004316:	d107      	bne.n	8004328 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e016      	b.n	800435a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	00100002 	.word	0x00100002
 8004368:	ffff0000 	.word	0xffff0000

0800436c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	4608      	mov	r0, r1
 8004376:	4611      	mov	r1, r2
 8004378:	461a      	mov	r2, r3
 800437a:	4603      	mov	r3, r0
 800437c:	817b      	strh	r3, [r7, #10]
 800437e:	460b      	mov	r3, r1
 8004380:	813b      	strh	r3, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438a:	f7fe fd25 	bl	8002dd8 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	f040 823d 	bne.w	8004818 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2319      	movs	r3, #25
 80043a4:	2201      	movs	r2, #1
 80043a6:	4981      	ldr	r1, [pc, #516]	; (80045ac <HAL_I2C_Mem_Read+0x240>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fd0f 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
 80043b6:	e230      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Mem_Read+0x5a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e229      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d007      	beq.n	80043ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2222      	movs	r2, #34	; 0x22
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a61      	ldr	r2, [pc, #388]	; (80045b0 <HAL_I2C_Mem_Read+0x244>)
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800442e:	88f8      	ldrh	r0, [r7, #6]
 8004430:	893a      	ldrh	r2, [r7, #8]
 8004432:	8979      	ldrh	r1, [r7, #10]
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4603      	mov	r3, r0
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fbdc 	bl	8004bfc <I2C_RequestMemoryRead>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e1e5      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e1b9      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	2b01      	cmp	r3, #1
 8004484:	d11d      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004494:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004496:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044be:	b662      	cpsie	i
 80044c0:	e197      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11d      	bne.n	8004506 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044da:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004502:	b662      	cpsie	i
 8004504:	e175      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800452c:	e161      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	2b03      	cmp	r3, #3
 8004534:	f200 811a 	bhi.w	800476c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b01      	cmp	r3, #1
 800453e:	d123      	bne.n	8004588 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fd99 	bl	800507c <I2C_WaitOnRXNEFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e162      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004586:	e134      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	2b02      	cmp	r3, #2
 800458e:	d150      	bne.n	8004632 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	2200      	movs	r2, #0
 8004598:	4906      	ldr	r1, [pc, #24]	; (80045b4 <HAL_I2C_Mem_Read+0x248>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fc16 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e137      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
 80045aa:	bf00      	nop
 80045ac:	00100002 	.word	0x00100002
 80045b0:	ffff0000 	.word	0xffff0000
 80045b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045b8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045fc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004630:	e0df      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	2200      	movs	r2, #0
 800463a:	497a      	ldr	r1, [pc, #488]	; (8004824 <HAL_I2C_Mem_Read+0x4b8>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fbc5 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0e6      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800465c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004690:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_I2C_Mem_Read+0x4bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	08db      	lsrs	r3, r3, #3
 8004696:	4a65      	ldr	r2, [pc, #404]	; (800482c <HAL_I2C_Mem_Read+0x4c0>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	0a1a      	lsrs	r2, r3, #8
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	00da      	lsls	r2, r3, #3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d117      	bne.n	80046e6 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046d8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e099      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d1da      	bne.n	80046aa <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004736:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476a:	e042      	b.n	80047f2 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fc83 	bl	800507c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e04c      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d118      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f47f ae99 	bne.w	800452e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004818:	2302      	movs	r3, #2
  }
}
 800481a:	4618      	mov	r0, r3
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	00010004 	.word	0x00010004
 8004828:	2000000c 	.word	0x2000000c
 800482c:	14f8b589 	.word	0x14f8b589

08004830 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	460b      	mov	r3, r1
 800483e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d006      	beq.n	800485a <I2C_MasterRequestWrite+0x2a>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d003      	beq.n	800485a <I2C_MasterRequestWrite+0x2a>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004858:	d108      	bne.n	800486c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e00b      	b.n	8004884 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	2b12      	cmp	r3, #18
 8004872:	d107      	bne.n	8004884 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fa9b 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048aa:	d103      	bne.n	80048b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e035      	b.n	8004924 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c0:	d108      	bne.n	80048d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048d0:	611a      	str	r2, [r3, #16]
 80048d2:	e01b      	b.n	800490c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048d4:	897b      	ldrh	r3, [r7, #10]
 80048d6:	11db      	asrs	r3, r3, #7
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0306 	and.w	r3, r3, #6
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f063 030f 	orn	r3, r3, #15
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	490e      	ldr	r1, [pc, #56]	; (800492c <I2C_MasterRequestWrite+0xfc>)
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fac1 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e010      	b.n	8004924 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4907      	ldr	r1, [pc, #28]	; (8004930 <I2C_MasterRequestWrite+0x100>)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fab1 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	00010008 	.word	0x00010008
 8004930:	00010002 	.word	0x00010002

08004934 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	460b      	mov	r3, r1
 8004942:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004958:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d006      	beq.n	800496e <I2C_MasterRequestRead+0x3a>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d003      	beq.n	800496e <I2C_MasterRequestRead+0x3a>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800496c:	d108      	bne.n	8004980 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e00b      	b.n	8004998 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	2b11      	cmp	r3, #17
 8004986:	d107      	bne.n	8004998 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa11 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049be:	d103      	bne.n	80049c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e079      	b.n	8004ac0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d4:	d108      	bne.n	80049e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e05f      	b.n	8004aa8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	11db      	asrs	r3, r3, #7
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f063 030f 	orn	r3, r3, #15
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4930      	ldr	r1, [pc, #192]	; (8004ac8 <I2C_MasterRequestRead+0x194>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa37 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e054      	b.n	8004ac0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4929      	ldr	r1, [pc, #164]	; (8004acc <I2C_MasterRequestRead+0x198>)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fa27 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e044      	b.n	8004ac0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f9af 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d103      	bne.n	8004a8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e017      	b.n	8004ac0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a90:	897b      	ldrh	r3, [r7, #10]
 8004a92:	11db      	asrs	r3, r3, #7
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0306 	and.w	r3, r3, #6
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f063 030e 	orn	r3, r3, #14
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4907      	ldr	r1, [pc, #28]	; (8004acc <I2C_MasterRequestRead+0x198>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f9e3 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	00010008 	.word	0x00010008
 8004acc:	00010002 	.word	0x00010002

08004ad0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f960 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b20:	d103      	bne.n	8004b2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e05f      	b.n	8004bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	492d      	ldr	r1, [pc, #180]	; (8004bf8 <I2C_RequestMemoryWrite+0x128>)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f998 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e04c      	b.n	8004bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	6a39      	ldr	r1, [r7, #32]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fa02 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d107      	bne.n	8004b92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02b      	b.n	8004bee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]
 8004ba6:	e021      	b.n	8004bec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba8:	893b      	ldrh	r3, [r7, #8]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f9dc 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d107      	bne.n	8004bde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e005      	b.n	8004bee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004be2:	893b      	ldrh	r3, [r7, #8]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	00010002 	.word	0x00010002

08004bfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	817b      	strh	r3, [r7, #10]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	813b      	strh	r3, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f8c2 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5c:	d103      	bne.n	8004c66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e0aa      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	4952      	ldr	r1, [pc, #328]	; (8004dc8 <I2C_RequestMemoryRead+0x1cc>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f8fa 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e097      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	6a39      	ldr	r1, [r7, #32]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f964 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d107      	bne.n	8004cce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e076      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd8:	893b      	ldrh	r3, [r7, #8]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]
 8004ce2:	e021      	b.n	8004d28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf4:	6a39      	ldr	r1, [r7, #32]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f93e 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00d      	beq.n	8004d1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d107      	bne.n	8004d1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e050      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	6a39      	ldr	r1, [r7, #32]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f923 	bl	8004f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00d      	beq.n	8004d54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d107      	bne.n	8004d50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e035      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f82b 	bl	8004dcc <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8a:	d103      	bne.n	8004d94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e013      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d98:	897b      	ldrh	r3, [r7, #10]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	4906      	ldr	r1, [pc, #24]	; (8004dc8 <I2C_RequestMemoryRead+0x1cc>)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f863 	bl	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	00010002 	.word	0x00010002

08004dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ddc:	e025      	b.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de4:	d021      	beq.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fd fff7 	bl	8002dd8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e023      	b.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10d      	bne.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	43da      	mvns	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	e00c      	b.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	43da      	mvns	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bf0c      	ite	eq
 8004e62:	2301      	moveq	r3, #1
 8004e64:	2300      	movne	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d0b6      	beq.n	8004dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e88:	e051      	b.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d123      	bne.n	8004ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f043 0204 	orr.w	r2, r3, #4
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e046      	b.n	8004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee8:	d021      	beq.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fd ff75 	bl	8002dd8 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d116      	bne.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e020      	b.n	8004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d10c      	bne.n	8004f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bf14      	ite	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	2300      	moveq	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	e00b      	b.n	8004f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	43da      	mvns	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d18d      	bne.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f84:	e02d      	b.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f8ce 	bl	8005128 <I2C_IsAcknowledgeFailed>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e02d      	b.n	8004ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9c:	d021      	beq.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9e:	f7fd ff1b 	bl	8002dd8 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d302      	bcc.n	8004fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d116      	bne.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e007      	b.n	8004ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d1ca      	bne.n	8004f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005006:	e02d      	b.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f88d 	bl	8005128 <I2C_IsAcknowledgeFailed>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e02d      	b.n	8005074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501e:	d021      	beq.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005020:	f7fd feda 	bl	8002dd8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	d302      	bcc.n	8005036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d116      	bne.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e007      	b.n	8005074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b04      	cmp	r3, #4
 8005070:	d1ca      	bne.n	8005008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005088:	e042      	b.n	8005110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d119      	bne.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e029      	b.n	8005120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050cc:	f7fd fe84 	bl	8002dd8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d302      	bcc.n	80050e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d116      	bne.n	8005110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e007      	b.n	8005120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d1b5      	bne.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513e:	d11b      	bne.n	8005178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	f043 0204 	orr.w	r2, r3, #4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e26c      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8087 	beq.w	80052b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a4:	4b92      	ldr	r3, [pc, #584]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d00c      	beq.n	80051ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051b0:	4b8f      	ldr	r3, [pc, #572]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d112      	bne.n	80051e2 <HAL_RCC_OscConfig+0x5e>
 80051bc:	4b8c      	ldr	r3, [pc, #560]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d10b      	bne.n	80051e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ca:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d06c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x12c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d168      	bne.n	80052b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e246      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x76>
 80051ec:	4b80      	ldr	r3, [pc, #512]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a7f      	ldr	r2, [pc, #508]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e02e      	b.n	8005258 <HAL_RCC_OscConfig+0xd4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x98>
 8005202:	4b7b      	ldr	r3, [pc, #492]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7a      	ldr	r2, [pc, #488]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b78      	ldr	r3, [pc, #480]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a77      	ldr	r2, [pc, #476]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xd4>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0xbc>
 8005226:	4b72      	ldr	r3, [pc, #456]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a71      	ldr	r2, [pc, #452]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b6f      	ldr	r3, [pc, #444]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6e      	ldr	r2, [pc, #440]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xd4>
 8005240:	4b6b      	ldr	r3, [pc, #428]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6a      	ldr	r2, [pc, #424]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b68      	ldr	r3, [pc, #416]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a67      	ldr	r2, [pc, #412]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fd fdba 	bl	8002dd8 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005268:	f7fd fdb6 	bl	8002dd8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1fa      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xe4>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7fd fda6 	bl	8002dd8 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005290:	f7fd fda2 	bl	8002dd8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1e6      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x10c>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d063      	beq.n	8005386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052be:	4b4c      	ldr	r3, [pc, #304]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052ca:	4b49      	ldr	r3, [pc, #292]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d11c      	bne.n	8005310 <HAL_RCC_OscConfig+0x18c>
 80052d6:	4b46      	ldr	r3, [pc, #280]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e2:	4b43      	ldr	r3, [pc, #268]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCC_OscConfig+0x176>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e1ba      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	4b3d      	ldr	r3, [pc, #244]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4939      	ldr	r1, [pc, #228]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530e:	e03a      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005318:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fd fd5b 	bl	8002dd8 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005326:	f7fd fd57 	bl	8002dd8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e19b      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4927      	ldr	r1, [pc, #156]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]
 8005358:	e015      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535a:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fd fd3a 	bl	8002dd8 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005368:	f7fd fd36 	bl	8002dd8 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e17a      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537a:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d03a      	beq.n	8005408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d019      	beq.n	80053ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539a:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <HAL_RCC_OscConfig+0x274>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a0:	f7fd fd1a 	bl	8002dd8 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a8:	f7fd fd16 	bl	8002dd8 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e15a      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053c6:	2001      	movs	r0, #1
 80053c8:	f000 fada 	bl	8005980 <RCC_Delay>
 80053cc:	e01c      	b.n	8005408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d4:	f7fd fd00 	bl	8002dd8 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053da:	e00f      	b.n	80053fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053dc:	f7fd fcfc 	bl	8002dd8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e140      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	42420000 	.word	0x42420000
 80053f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053fc:	4b9e      	ldr	r3, [pc, #632]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e9      	bne.n	80053dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a6 	beq.w	8005562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541a:	4b97      	ldr	r3, [pc, #604]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	4b94      	ldr	r3, [pc, #592]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4a93      	ldr	r2, [pc, #588]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800542c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005430:	61d3      	str	r3, [r2, #28]
 8005432:	4b91      	ldr	r3, [pc, #580]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005442:	4b8e      	ldr	r3, [pc, #568]	; (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d118      	bne.n	8005480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544e:	4b8b      	ldr	r3, [pc, #556]	; (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a8a      	ldr	r2, [pc, #552]	; (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545a:	f7fd fcbd 	bl	8002dd8 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005462:	f7fd fcb9 	bl	8002dd8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0fd      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	4b81      	ldr	r3, [pc, #516]	; (800567c <HAL_RCC_OscConfig+0x4f8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d106      	bne.n	8005496 <HAL_RCC_OscConfig+0x312>
 8005488:	4b7b      	ldr	r3, [pc, #492]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	4a7a      	ldr	r2, [pc, #488]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6213      	str	r3, [r2, #32]
 8005494:	e02d      	b.n	80054f2 <HAL_RCC_OscConfig+0x36e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x334>
 800549e:	4b76      	ldr	r3, [pc, #472]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4a75      	ldr	r2, [pc, #468]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6213      	str	r3, [r2, #32]
 80054aa:	4b73      	ldr	r3, [pc, #460]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	4a72      	ldr	r2, [pc, #456]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	6213      	str	r3, [r2, #32]
 80054b6:	e01c      	b.n	80054f2 <HAL_RCC_OscConfig+0x36e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	d10c      	bne.n	80054da <HAL_RCC_OscConfig+0x356>
 80054c0:	4b6d      	ldr	r3, [pc, #436]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4a6c      	ldr	r2, [pc, #432]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054c6:	f043 0304 	orr.w	r3, r3, #4
 80054ca:	6213      	str	r3, [r2, #32]
 80054cc:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4a69      	ldr	r2, [pc, #420]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6213      	str	r3, [r2, #32]
 80054d8:	e00b      	b.n	80054f2 <HAL_RCC_OscConfig+0x36e>
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	4a66      	ldr	r2, [pc, #408]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6213      	str	r3, [r2, #32]
 80054e6:	4b64      	ldr	r3, [pc, #400]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	4a63      	ldr	r2, [pc, #396]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80054ec:	f023 0304 	bic.w	r3, r3, #4
 80054f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d015      	beq.n	8005526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fa:	f7fd fc6d 	bl	8002dd8 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005500:	e00a      	b.n	8005518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005502:	f7fd fc69 	bl	8002dd8 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e0ab      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005518:	4b57      	ldr	r3, [pc, #348]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ee      	beq.n	8005502 <HAL_RCC_OscConfig+0x37e>
 8005524:	e014      	b.n	8005550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005526:	f7fd fc57 	bl	8002dd8 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fd fc53 	bl	8002dd8 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e095      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005544:	4b4c      	ldr	r3, [pc, #304]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1ee      	bne.n	800552e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005556:	4b48      	ldr	r3, [pc, #288]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4a47      	ldr	r2, [pc, #284]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800555c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8081 	beq.w	800566e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800556c:	4b42      	ldr	r3, [pc, #264]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b08      	cmp	r3, #8
 8005576:	d061      	beq.n	800563c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d146      	bne.n	800560e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <HAL_RCC_OscConfig+0x4fc>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005586:	f7fd fc27 	bl	8002dd8 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558e:	f7fd fc23 	bl	8002dd8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e067      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a0:	4b35      	ldr	r3, [pc, #212]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d108      	bne.n	80055c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	492d      	ldr	r1, [pc, #180]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c8:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a19      	ldr	r1, [r3, #32]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	430b      	orrs	r3, r1
 80055da:	4927      	ldr	r1, [pc, #156]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e0:	4b27      	ldr	r3, [pc, #156]	; (8005680 <HAL_RCC_OscConfig+0x4fc>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fd fbf7 	bl	8002dd8 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fd fbf3 	bl	8002dd8 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e037      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x46a>
 800560c:	e02f      	b.n	800566e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <HAL_RCC_OscConfig+0x4fc>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fd fbe0 	bl	8002dd8 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561c:	f7fd fbdc 	bl	8002dd8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e020      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x498>
 800563a:	e018      	b.n	800566e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e013      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_RCC_OscConfig+0x4f4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	429a      	cmp	r2, r3
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d001      	beq.n	800566e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40021000 	.word	0x40021000
 800567c:	40007000 	.word	0x40007000
 8005680:	42420060 	.word	0x42420060

08005684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0d0      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005698:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d910      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b67      	ldr	r3, [pc, #412]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 0207 	bic.w	r2, r3, #7
 80056ae:	4965      	ldr	r1, [pc, #404]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0b8      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e0:	4b59      	ldr	r3, [pc, #356]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a58      	ldr	r2, [pc, #352]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a52      	ldr	r2, [pc, #328]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	494d      	ldr	r1, [pc, #308]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d040      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d115      	bne.n	8005762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e07f      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d107      	bne.n	8005752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e073      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005752:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e06b      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005762:	4b39      	ldr	r3, [pc, #228]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f023 0203 	bic.w	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4936      	ldr	r1, [pc, #216]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005774:	f7fd fb30 	bl	8002dd8 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577a:	e00a      	b.n	8005792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800577c:	f7fd fb2c 	bl	8002dd8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	f241 3288 	movw	r2, #5000	; 0x1388
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e053      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005792:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 020c 	and.w	r2, r3, #12
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1eb      	bne.n	800577c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057a4:	4b27      	ldr	r3, [pc, #156]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d210      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 0207 	bic.w	r2, r3, #7
 80057ba:	4922      	ldr	r1, [pc, #136]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x1c0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e032      	b.n	800583a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e0:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4916      	ldr	r1, [pc, #88]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	490e      	ldr	r1, [pc, #56]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 800580e:	4313      	orrs	r3, r2
 8005810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005812:	f000 f821 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005816:	4601      	mov	r1, r0
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	4a0a      	ldr	r2, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005824:	5cd3      	ldrb	r3, [r2, r3]
 8005826:	fa21 f303 	lsr.w	r3, r1, r3
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1cc>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1d0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fd fa8e 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40022000 	.word	0x40022000
 8005848:	40021000 	.word	0x40021000
 800584c:	080081a0 	.word	0x080081a0
 8005850:	2000000c 	.word	0x2000000c
 8005854:	20000010 	.word	0x20000010

08005858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	b490      	push	{r4, r7}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800585e:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005860:	1d3c      	adds	r4, r7, #4
 8005862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005868:	4b28      	ldr	r3, [pc, #160]	; (800590c <HAL_RCC_GetSysClockFreq+0xb4>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005882:	4b23      	ldr	r3, [pc, #140]	; (8005910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b04      	cmp	r3, #4
 8005890:	d002      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 8005892:	2b08      	cmp	r3, #8
 8005894:	d003      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x46>
 8005896:	e02d      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <HAL_RCC_GetSysClockFreq+0xbc>)
 800589a:	623b      	str	r3, [r7, #32]
      break;
 800589c:	e02d      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	0c9b      	lsrs	r3, r3, #18
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058aa:	4413      	add	r3, r2
 80058ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80058b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d013      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	0c5b      	lsrs	r3, r3, #17
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058ca:	4413      	add	r3, r2
 80058cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80058d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058d6:	fb02 f203 	mul.w	r2, r2, r3
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
 80058e2:	e004      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	623b      	str	r3, [r7, #32]
      break;
 80058f2:	e002      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058f6:	623b      	str	r3, [r7, #32]
      break;
 80058f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fa:	6a3b      	ldr	r3, [r7, #32]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3728      	adds	r7, #40	; 0x28
 8005900:	46bd      	mov	sp, r7
 8005902:	bc90      	pop	{r4, r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	0800818c 	.word	0x0800818c
 800590c:	0800819c 	.word	0x0800819c
 8005910:	40021000 	.word	0x40021000
 8005914:	007a1200 	.word	0x007a1200
 8005918:	003d0900 	.word	0x003d0900

0800591c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005920:	4b02      	ldr	r3, [pc, #8]	; (800592c <HAL_RCC_GetHCLKFreq+0x10>)
 8005922:	681b      	ldr	r3, [r3, #0]
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	2000000c 	.word	0x2000000c

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff2 	bl	800591c <HAL_RCC_GetHCLKFreq>
 8005938:	4601      	mov	r1, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4a03      	ldr	r2, [pc, #12]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000
 8005954:	080081b0 	.word	0x080081b0

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800595c:	f7ff ffde 	bl	800591c <HAL_RCC_GetHCLKFreq>
 8005960:	4601      	mov	r1, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	0adb      	lsrs	r3, r3, #11
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4a03      	ldr	r2, [pc, #12]	; (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40021000 	.word	0x40021000
 800597c:	080081b0 	.word	0x080081b0

08005980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <RCC_Delay+0x34>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <RCC_Delay+0x38>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	0a5b      	lsrs	r3, r3, #9
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800599c:	bf00      	nop
  }
  while (Delay --);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1e5a      	subs	r2, r3, #1
 80059a2:	60fa      	str	r2, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f9      	bne.n	800599c <RCC_Delay+0x1c>
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	2000000c 	.word	0x2000000c
 80059b8:	10624dd3 	.word	0x10624dd3

080059bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e076      	b.n	8005abc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059de:	d009      	beq.n	80059f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	61da      	str	r2, [r3, #28]
 80059e6:	e005      	b.n	80059f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fb3e 	bl	8002090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	ea42 0103 	orr.w	r1, r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	0c1a      	lsrs	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f002 0204 	and.w	r2, r2, #4
 8005a9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae0:	d112      	bne.n	8005b08 <HAL_SPI_Receive+0x44>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10e      	bne.n	8005b08 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2204      	movs	r2, #4
 8005aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f8f1 	bl	8005ce6 <HAL_SPI_TransmitReceive>
 8005b04:	4603      	mov	r3, r0
 8005b06:	e0ea      	b.n	8005cde <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_SPI_Receive+0x52>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0e3      	b.n	8005cde <HAL_SPI_Receive+0x21a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b1e:	f7fd f95b 	bl	8002dd8 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
 8005b32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b34:	e0ca      	b.n	8005ccc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Receive+0x7e>
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b46:	e0c1      	b.n	8005ccc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8e:	d10f      	bne.n	8005bb0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d007      	beq.n	8005bce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d162      	bne.n	8005c9c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bd6:	e02e      	b.n	8005c36 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d115      	bne.n	8005c12 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f103 020c 	add.w	r2, r3, #12
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	7812      	ldrb	r2, [r2, #0]
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c10:	e011      	b.n	8005c36 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c12:	f7fd f8e1 	bl	8002dd8 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d803      	bhi.n	8005c2a <HAL_SPI_Receive+0x166>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c28:	d102      	bne.n	8005c30 <HAL_SPI_Receive+0x16c>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c34:	e04a      	b.n	8005ccc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1cb      	bne.n	8005bd8 <HAL_SPI_Receive+0x114>
 8005c40:	e031      	b.n	8005ca6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d113      	bne.n	8005c78 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	1c9a      	adds	r2, r3, #2
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c76:	e011      	b.n	8005c9c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c78:	f7fd f8ae 	bl	8002dd8 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d803      	bhi.n	8005c90 <HAL_SPI_Receive+0x1cc>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c8e:	d102      	bne.n	8005c96 <HAL_SPI_Receive+0x1d2>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c9a:	e017      	b.n	8005ccc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1cd      	bne.n	8005c42 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fa46 	bl	800613c <SPI_EndRxTransaction>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
 8005cc8:	e000      	b.n	8005ccc <HAL_SPI_Receive+0x208>
  }

error :
 8005cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08c      	sub	sp, #48	; 0x30
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x26>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e18a      	b.n	8006022 <HAL_SPI_TransmitReceive+0x33c>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d14:	f7fd f860 	bl	8002dd8 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d00f      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x70>
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d3c:	d107      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x68>
 8005d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d003      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d54:	e15b      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_SPI_TransmitReceive+0x82>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_TransmitReceive+0x82>
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d6e:	e14e      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d003      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2205      	movs	r2, #5
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	887a      	ldrh	r2, [r7, #2]
 8005da6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d007      	beq.n	8005dd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de0:	d178      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x10a>
 8005dea:	8b7b      	ldrh	r3, [r7, #26]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d166      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e14:	e053      	b.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d11b      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x176>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x176>
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d113      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d119      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x1b8>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d014      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e9e:	f7fc ff9b 	bl	8002dd8 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d807      	bhi.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ebc:	e0a7      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1a6      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x130>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1a1      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x130>
 8005ed2:	e07c      	b.n	8005fce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x1fc>
 8005edc:	8b7b      	ldrh	r3, [r7, #26]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d16b      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f08:	e057      	b.n	8005fba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11c      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x26c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d017      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x26c>
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d114      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	7812      	ldrb	r2, [r2, #0]
 8005f34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d119      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x2ae>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f90:	2301      	movs	r3, #1
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f94:	f7fc ff20 	bl	8002dd8 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d803      	bhi.n	8005fac <HAL_SPI_TransmitReceive+0x2c6>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005faa:	d102      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x2cc>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fb8:	e029      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1a2      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x224>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d19d      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f904 	bl	80061e0 <SPI_EndRxTxTransaction>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fea:	e010      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	e000      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800600c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800601e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800603c:	f7fc fecc 	bl	8002dd8 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	4413      	add	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800604c:	f7fc fec4 	bl	8002dd8 <HAL_GetTick>
 8006050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006052:	4b39      	ldr	r3, [pc, #228]	; (8006138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	015b      	lsls	r3, r3, #5
 8006058:	0d1b      	lsrs	r3, r3, #20
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006062:	e054      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800606a:	d050      	beq.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606c:	f7fc feb4 	bl	8002dd8 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	429a      	cmp	r2, r3
 800607a:	d902      	bls.n	8006082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d13d      	bne.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609a:	d111      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	d004      	beq.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d107      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c8:	d10f      	bne.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e017      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3b01      	subs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d19b      	bne.n	8006064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	2000000c 	.word	0x2000000c

0800613c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006150:	d111      	bne.n	8006176 <SPI_EndRxTransaction+0x3a>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615a:	d004      	beq.n	8006166 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d107      	bne.n	8006176 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006174:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617e:	d117      	bne.n	80061b0 <SPI_EndRxTransaction+0x74>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d112      	bne.n	80061b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	2101      	movs	r1, #1
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff49 	bl	800602c <SPI_WaitFlagStateUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01a      	beq.n	80061d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e013      	b.n	80061d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff ff36 	bl	800602c <SPI_WaitFlagStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e000      	b.n	80061d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff ff18 	bl	800602c <SPI_WaitFlagStateUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e000      	b.n	8006214 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e041      	b.n	80062b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fb ff70 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fa9e 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e041      	b.n	8006350 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f839 	bl	8006358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f000 fa4f 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr
	...

0800636c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <HAL_TIM_PWM_Start+0x24>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e022      	b.n	80063d6 <HAL_TIM_PWM_Start+0x6a>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b04      	cmp	r3, #4
 8006394:	d109      	bne.n	80063aa <HAL_TIM_PWM_Start+0x3e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	bf14      	ite	ne
 80063a2:	2301      	movne	r3, #1
 80063a4:	2300      	moveq	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	e015      	b.n	80063d6 <HAL_TIM_PWM_Start+0x6a>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d109      	bne.n	80063c4 <HAL_TIM_PWM_Start+0x58>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e008      	b.n	80063d6 <HAL_TIM_PWM_Start+0x6a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e05e      	b.n	800649c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_PWM_Start+0x82>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ec:	e013      	b.n	8006416 <HAL_TIM_PWM_Start+0xaa>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0x92>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fc:	e00b      	b.n	8006416 <HAL_TIM_PWM_Start+0xaa>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800640c:	e003      	b.n	8006416 <HAL_TIM_PWM_Start+0xaa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fc3c 	bl	8006c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_TIM_PWM_Start+0x138>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d107      	bne.n	800643e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <HAL_TIM_PWM_Start+0x138>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_TIM_PWM_Start+0xfa>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d009      	beq.n	8006466 <HAL_TIM_PWM_Start+0xfa>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <HAL_TIM_PWM_Start+0x13c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIM_PWM_Start+0xfa>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a12      	ldr	r2, [pc, #72]	; (80064ac <HAL_TIM_PWM_Start+0x140>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d111      	bne.n	800648a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b06      	cmp	r3, #6
 8006476:	d010      	beq.n	800649a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	e007      	b.n	800649a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800

080064b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e0ac      	b.n	8006624 <HAL_TIM_PWM_ConfigChannel+0x174>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b0c      	cmp	r3, #12
 80064d6:	f200 809f 	bhi.w	8006618 <HAL_TIM_PWM_ConfigChannel+0x168>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006619 	.word	0x08006619
 80064e8:	08006619 	.word	0x08006619
 80064ec:	08006619 	.word	0x08006619
 80064f0:	08006555 	.word	0x08006555
 80064f4:	08006619 	.word	0x08006619
 80064f8:	08006619 	.word	0x08006619
 80064fc:	08006619 	.word	0x08006619
 8006500:	08006597 	.word	0x08006597
 8006504:	08006619 	.word	0x08006619
 8006508:	08006619 	.word	0x08006619
 800650c:	08006619 	.word	0x08006619
 8006510:	080065d7 	.word	0x080065d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f9a0 	bl	8006860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0208 	orr.w	r2, r2, #8
 800652e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0204 	bic.w	r2, r2, #4
 800653e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6999      	ldr	r1, [r3, #24]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	619a      	str	r2, [r3, #24]
      break;
 8006552:	e062      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 f9e6 	bl	800692c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	619a      	str	r2, [r3, #24]
      break;
 8006594:	e041      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fa2f 	bl	8006a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0208 	orr.w	r2, r2, #8
 80065b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0204 	bic.w	r2, r2, #4
 80065c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69d9      	ldr	r1, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	61da      	str	r2, [r3, #28]
      break;
 80065d4:	e021      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fa79 	bl	8006ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	61da      	str	r2, [r3, #28]
      break;
 8006616:	e000      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_TIM_ConfigClockSource+0x18>
 8006640:	2302      	movs	r3, #2
 8006642:	e0a6      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x166>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d067      	beq.n	800674c <HAL_TIM_ConfigClockSource+0x120>
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d80b      	bhi.n	8006698 <HAL_TIM_ConfigClockSource+0x6c>
 8006680:	2b10      	cmp	r3, #16
 8006682:	d073      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x140>
 8006684:	2b10      	cmp	r3, #16
 8006686:	d802      	bhi.n	800668e <HAL_TIM_ConfigClockSource+0x62>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d06f      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800668c:	e078      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800668e:	2b20      	cmp	r3, #32
 8006690:	d06c      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x140>
 8006692:	2b30      	cmp	r3, #48	; 0x30
 8006694:	d06a      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006696:	e073      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006698:	2b70      	cmp	r3, #112	; 0x70
 800669a:	d00d      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0x8c>
 800669c:	2b70      	cmp	r3, #112	; 0x70
 800669e:	d804      	bhi.n	80066aa <HAL_TIM_ConfigClockSource+0x7e>
 80066a0:	2b50      	cmp	r3, #80	; 0x50
 80066a2:	d033      	beq.n	800670c <HAL_TIM_ConfigClockSource+0xe0>
 80066a4:	2b60      	cmp	r3, #96	; 0x60
 80066a6:	d041      	beq.n	800672c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80066a8:	e06a      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d066      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x152>
 80066b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b4:	d017      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80066b6:	e063      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f000 fac9 	bl	8006c5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	609a      	str	r2, [r3, #8]
      break;
 80066e4:	e04c      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6899      	ldr	r1, [r3, #8]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f000 fab2 	bl	8006c5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006708:	609a      	str	r2, [r3, #8]
      break;
 800670a:	e039      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6859      	ldr	r1, [r3, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	461a      	mov	r2, r3
 800671a:	f000 fa29 	bl	8006b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2150      	movs	r1, #80	; 0x50
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fa80 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 800672a:	e029      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	461a      	mov	r2, r3
 800673a:	f000 fa47 	bl	8006bcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2160      	movs	r1, #96	; 0x60
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fa70 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 800674a:	e019      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6859      	ldr	r1, [r3, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	461a      	mov	r2, r3
 800675a:	f000 fa09 	bl	8006b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2140      	movs	r1, #64	; 0x40
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fa60 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 800676a:	e009      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f000 fa57 	bl	8006c2a <TIM_ITRx_SetConfig>
        break;
 800677c:	e000      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800677e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a29      	ldr	r2, [pc, #164]	; (8006854 <TIM_Base_SetConfig+0xb8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_Base_SetConfig+0x30>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d007      	beq.n	80067cc <TIM_Base_SetConfig+0x30>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a26      	ldr	r2, [pc, #152]	; (8006858 <TIM_Base_SetConfig+0xbc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_Base_SetConfig+0x30>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a25      	ldr	r2, [pc, #148]	; (800685c <TIM_Base_SetConfig+0xc0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <TIM_Base_SetConfig+0xb8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_Base_SetConfig+0x62>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ec:	d007      	beq.n	80067fe <TIM_Base_SetConfig+0x62>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a19      	ldr	r2, [pc, #100]	; (8006858 <TIM_Base_SetConfig+0xbc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_Base_SetConfig+0x62>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a18      	ldr	r2, [pc, #96]	; (800685c <TIM_Base_SetConfig+0xc0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d108      	bne.n	8006810 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <TIM_Base_SetConfig+0xb8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d103      	bne.n	8006844 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	615a      	str	r2, [r3, #20]
}
 800684a:	bf00      	nop
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40000400 	.word	0x40000400
 800685c:	40000800 	.word	0x40000800

08006860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f023 0201 	bic.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 0302 	bic.w	r3, r3, #2
 80068a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a1c      	ldr	r2, [pc, #112]	; (8006928 <TIM_OC1_SetConfig+0xc8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d10c      	bne.n	80068d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f023 0308 	bic.w	r3, r3, #8
 80068c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <TIM_OC1_SetConfig+0xc8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d111      	bne.n	8006902 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00

0800692c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0210 	bic.w	r2, r3, #16
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a1d      	ldr	r2, [pc, #116]	; (80069fc <TIM_OC2_SetConfig+0xd0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d10d      	bne.n	80069a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a14      	ldr	r2, [pc, #80]	; (80069fc <TIM_OC2_SetConfig+0xd0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d113      	bne.n	80069d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr
 80069fc:	40012c00 	.word	0x40012c00

08006a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <TIM_OC3_SetConfig+0xd0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10d      	bne.n	8006a7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a14      	ldr	r2, [pc, #80]	; (8006ad0 <TIM_OC3_SetConfig+0xd0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d113      	bne.n	8006aaa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	621a      	str	r2, [r3, #32]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00

08006ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a0f      	ldr	r2, [pc, #60]	; (8006b6c <TIM_OC4_SetConfig+0x98>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d109      	bne.n	8006b48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00

08006b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 030a 	bic.w	r3, r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f023 0210 	bic.w	r2, r3, #16
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	031b      	lsls	r3, r3, #12
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	621a      	str	r2, [r3, #32]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f043 0307 	orr.w	r3, r3, #7
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	609a      	str	r2, [r3, #8]
}
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	021a      	lsls	r2, r3, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	609a      	str	r2, [r3, #8]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2201      	movs	r2, #1
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1a      	ldr	r2, [r3, #32]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e046      	b.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d009      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d10c      	bne.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800

08006da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e03d      	b.n	8006e38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e03f      	b.n	8006ed4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fb f9df 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2224      	movs	r2, #36	; 0x24
 8006e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fb7c 	bl	8007584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eaa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d166      	bne.n	8006fc4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_UART_Receive_DMA+0x26>
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e05f      	b.n	8006fc6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_UART_Receive_DMA+0x38>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e058      	b.n	8006fc6 <HAL_UART_Receive_DMA+0xea>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2222      	movs	r2, #34	; 0x22
 8006f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3a:	4a25      	ldr	r2, [pc, #148]	; (8006fd0 <HAL_UART_Receive_DMA+0xf4>)
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	4a24      	ldr	r2, [pc, #144]	; (8006fd4 <HAL_UART_Receive_DMA+0xf8>)
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4a:	4a23      	ldr	r2, [pc, #140]	; (8006fd8 <HAL_UART_Receive_DMA+0xfc>)
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	2200      	movs	r2, #0
 8006f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8006f56:	f107 0308 	add.w	r3, r7, #8
 8006f5a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4619      	mov	r1, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	f7fc f8c7 	bl	8003100 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f9e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695a      	ldr	r2, [r3, #20]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fbe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e000      	b.n	8006fc6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006fc4:	2302      	movs	r3, #2
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	08007213 	.word	0x08007213
 8006fd4:	0800727b 	.word	0x0800727b
 8006fd8:	08007297 	.word	0x08007297

08006fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_UART_IRQHandler+0x52>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa2c 	bl	8007484 <UART_Receive_IT>
      return;
 800702c:	e0d1      	b.n	80071d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 80b0 	beq.w	8007196 <HAL_UART_IRQHandler+0x1ba>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <HAL_UART_IRQHandler+0x70>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80a5 	beq.w	8007196 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <HAL_UART_IRQHandler+0x90>
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007064:	f043 0201 	orr.w	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_UART_IRQHandler+0xb0>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007084:	f043 0202 	orr.w	r2, r3, #2
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_UART_IRQHandler+0xd0>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a4:	f043 0204 	orr.w	r2, r3, #4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00f      	beq.n	80070d6 <HAL_UART_IRQHandler+0xfa>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <HAL_UART_IRQHandler+0xee>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	f043 0208 	orr.w	r2, r3, #8
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d078      	beq.n	80071d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <HAL_UART_IRQHandler+0x11c>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9c6 	bl	8007484 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <HAL_UART_IRQHandler+0x144>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d031      	beq.n	8007184 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f917 	bl	8007354 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d023      	beq.n	800717c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007142:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007148:	2b00      	cmp	r3, #0
 800714a:	d013      	beq.n	8007174 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <HAL_UART_IRQHandler+0x1fc>)
 8007152:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007158:	4618      	mov	r0, r3
 800715a:	f7fc f831 	bl	80031c0 <HAL_DMA_Abort_IT>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d016      	beq.n	8007192 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800716e:	4610      	mov	r0, r2
 8007170:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007172:	e00e      	b.n	8007192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f843 	bl	8007200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717a:	e00a      	b.n	8007192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f83f 	bl	8007200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007182:	e006      	b.n	8007192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f83b 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007190:	e01e      	b.n	80071d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007192:	bf00      	nop
    return;
 8007194:	e01c      	b.n	80071d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_UART_IRQHandler+0x1d6>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f903 	bl	80073b6 <UART_Transmit_IT>
    return;
 80071b0:	e00f      	b.n	80071d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <HAL_UART_IRQHandler+0x1f6>
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f944 	bl	8007454 <UART_EndTransmit_IT>
    return;
 80071cc:	bf00      	nop
 80071ce:	e000      	b.n	80071d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80071d0:	bf00      	nop
  }
}
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	0800738f 	.word	0x0800738f

080071dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d11e      	bne.n	800726c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007242:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695a      	ldr	r2, [r3, #20]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0201 	bic.w	r2, r2, #1
 8007252:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007262:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7fa f9ff 	bl	8001670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7ff ffb0 	bl	80071ee <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800728e:	bf00      	nop
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b21      	cmp	r3, #33	; 0x21
 80072c8:	d108      	bne.n	80072dc <UART_DMAError+0x46>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f000 f827 	bl	800732a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bf14      	ite	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	2300      	moveq	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b22      	cmp	r3, #34	; 0x22
 80072fc:	d108      	bne.n	8007310 <UART_DMAError+0x7a>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800730a:	68b8      	ldr	r0, [r7, #8]
 800730c:	f000 f822 	bl	8007354 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007314:	f043 0210 	orr.w	r2, r3, #16
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800731c:	68b8      	ldr	r0, [r7, #8]
 800731e:	f7ff ff6f 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007340:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800736a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr

0800738e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff ff29 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b21      	cmp	r3, #33	; 0x21
 80073c8:	d13e      	bne.n	8007448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	d114      	bne.n	80073fe <UART_Transmit_IT+0x48>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d110      	bne.n	80073fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	1c9a      	adds	r2, r3, #2
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	621a      	str	r2, [r3, #32]
 80073fc:	e008      	b.n	8007410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	1c59      	adds	r1, r3, #1
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6211      	str	r1, [r2, #32]
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29b      	uxth	r3, r3
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4619      	mov	r1, r3
 800741e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10f      	bne.n	8007444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	e000      	b.n	800744a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr

08007454 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800746a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff feb1 	bl	80071dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b22      	cmp	r3, #34	; 0x22
 8007496:	d170      	bne.n	800757a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a0:	d117      	bne.n	80074d2 <UART_Receive_IT+0x4e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d113      	bne.n	80074d2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	1c9a      	adds	r2, r3, #2
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28
 80074d0:	e026      	b.n	8007520 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e4:	d007      	beq.n	80074f6 <UART_Receive_IT+0x72>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <UART_Receive_IT+0x80>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e008      	b.n	8007516 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007510:	b2da      	uxtb	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29b      	uxth	r3, r3
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4619      	mov	r1, r3
 800752e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007530:	2b00      	cmp	r3, #0
 8007532:	d120      	bne.n	8007576 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0220 	bic.w	r2, r2, #32
 8007542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695a      	ldr	r2, [r3, #20]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0201 	bic.w	r2, r2, #1
 8007562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fa f87f 	bl	8001670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e002      	b.n	800757c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	e000      	b.n	800757c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800757a:	2302      	movs	r3, #2
  }
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075be:	f023 030c 	bic.w	r3, r3, #12
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	430b      	orrs	r3, r1
 80075ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2c      	ldr	r2, [pc, #176]	; (8007698 <UART_SetConfig+0x114>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d103      	bne.n	80075f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075ec:	f7fe f9b4 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	e002      	b.n	80075fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075f4:	f7fe f99c 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 80075f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009a      	lsls	r2, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	4a22      	ldr	r2, [pc, #136]	; (800769c <UART_SetConfig+0x118>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	0119      	lsls	r1, r3, #4
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009a      	lsls	r2, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <UART_SetConfig+0x118>)
 8007632:	fba3 0302 	umull	r0, r3, r3, r2
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	2064      	movs	r0, #100	; 0x64
 800763a:	fb00 f303 	mul.w	r3, r0, r3
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	3332      	adds	r3, #50	; 0x32
 8007644:	4a15      	ldr	r2, [pc, #84]	; (800769c <UART_SetConfig+0x118>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007650:	4419      	add	r1, r3
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009a      	lsls	r2, r3, #2
 800765c:	441a      	add	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	fbb2 f2f3 	udiv	r2, r2, r3
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <UART_SetConfig+0x118>)
 800766a:	fba3 0302 	umull	r0, r3, r3, r2
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	2064      	movs	r0, #100	; 0x64
 8007672:	fb00 f303 	mul.w	r3, r0, r3
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	3332      	adds	r3, #50	; 0x32
 800767c:	4a07      	ldr	r2, [pc, #28]	; (800769c <UART_SetConfig+0x118>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	440a      	add	r2, r1
 800768e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40013800 	.word	0x40013800
 800769c:	51eb851f 	.word	0x51eb851f

080076a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <MX_FATFS_Init+0x18>)
 80076a6:	4805      	ldr	r0, [pc, #20]	; (80076bc <MX_FATFS_Init+0x1c>)
 80076a8:	f000 f8a6 	bl	80077f8 <FATFS_LinkDriver>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	4b03      	ldr	r3, [pc, #12]	; (80076c0 <MX_FATFS_Init+0x20>)
 80076b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076b4:	bf00      	nop
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	200009f8 	.word	0x200009f8
 80076bc:	20000018 	.word	0x20000018
 80076c0:	200009fc 	.word	0x200009fc

080076c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <USER_initialize+0x20>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80076d4:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <USER_initialize+0x20>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	20000015 	.word	0x20000015

080076e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <USER_status+0x20>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80076f8:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USER_status+0x20>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr
 8007708:	20000015 	.word	0x20000015

0800770c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800771c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007738:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	603a      	str	r2, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
 8007750:	460b      	mov	r3, r1
 8007752:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
    return res;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 800777c:	7a5b      	ldrb	r3, [r3, #9]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	d831      	bhi.n	80077e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007784:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 8007786:	7a5b      	ldrb	r3, [r3, #9]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 800778e:	2100      	movs	r1, #0
 8007790:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 8007794:	7a5b      	ldrb	r3, [r3, #9]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	4a16      	ldr	r2, [pc, #88]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 80077a4:	7a5b      	ldrb	r3, [r3, #9]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 80077ac:	4413      	add	r3, r2
 80077ae:	79fa      	ldrb	r2, [r7, #7]
 80077b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077b2:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 80077b4:	7a5b      	ldrb	r3, [r3, #9]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	b2d1      	uxtb	r1, r2
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <FATFS_LinkDriverEx+0x90>)
 80077be:	7251      	strb	r1, [r2, #9]
 80077c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80077c2:	7dbb      	ldrb	r3, [r7, #22]
 80077c4:	3330      	adds	r3, #48	; 0x30
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	3301      	adds	r3, #1
 80077d0:	223a      	movs	r2, #58	; 0x3a
 80077d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	3302      	adds	r3, #2
 80077d8:	222f      	movs	r2, #47	; 0x2f
 80077da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3303      	adds	r3, #3
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr
 80077f4:	20000514 	.word	0x20000514

080077f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007802:	2200      	movs	r2, #0
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff ffac 	bl	8007764 <FATFS_LinkDriverEx>
 800780c:	4603      	mov	r3, r0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <__errno>:
 8007818:	4b01      	ldr	r3, [pc, #4]	; (8007820 <__errno+0x8>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	2000002c 	.word	0x2000002c

08007824 <__libc_init_array>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	2500      	movs	r5, #0
 8007828:	4e0c      	ldr	r6, [pc, #48]	; (800785c <__libc_init_array+0x38>)
 800782a:	4c0d      	ldr	r4, [pc, #52]	; (8007860 <__libc_init_array+0x3c>)
 800782c:	1ba4      	subs	r4, r4, r6
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	42a5      	cmp	r5, r4
 8007832:	d109      	bne.n	8007848 <__libc_init_array+0x24>
 8007834:	f000 fc6e 	bl	8008114 <_init>
 8007838:	2500      	movs	r5, #0
 800783a:	4e0a      	ldr	r6, [pc, #40]	; (8007864 <__libc_init_array+0x40>)
 800783c:	4c0a      	ldr	r4, [pc, #40]	; (8007868 <__libc_init_array+0x44>)
 800783e:	1ba4      	subs	r4, r4, r6
 8007840:	10a4      	asrs	r4, r4, #2
 8007842:	42a5      	cmp	r5, r4
 8007844:	d105      	bne.n	8007852 <__libc_init_array+0x2e>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800784c:	4798      	blx	r3
 800784e:	3501      	adds	r5, #1
 8007850:	e7ee      	b.n	8007830 <__libc_init_array+0xc>
 8007852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007856:	4798      	blx	r3
 8007858:	3501      	adds	r5, #1
 800785a:	e7f2      	b.n	8007842 <__libc_init_array+0x1e>
 800785c:	080081ec 	.word	0x080081ec
 8007860:	080081ec 	.word	0x080081ec
 8007864:	080081ec 	.word	0x080081ec
 8007868:	080081f0 	.word	0x080081f0

0800786c <memset>:
 800786c:	4603      	mov	r3, r0
 800786e:	4402      	add	r2, r0
 8007870:	4293      	cmp	r3, r2
 8007872:	d100      	bne.n	8007876 <memset+0xa>
 8007874:	4770      	bx	lr
 8007876:	f803 1b01 	strb.w	r1, [r3], #1
 800787a:	e7f9      	b.n	8007870 <memset+0x4>

0800787c <_free_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4605      	mov	r5, r0
 8007880:	2900      	cmp	r1, #0
 8007882:	d043      	beq.n	800790c <_free_r+0x90>
 8007884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007888:	1f0c      	subs	r4, r1, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	bfb8      	it	lt
 800788e:	18e4      	addlt	r4, r4, r3
 8007890:	f000 f8dd 	bl	8007a4e <__malloc_lock>
 8007894:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <_free_r+0x94>)
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	4610      	mov	r0, r2
 800789a:	b933      	cbnz	r3, 80078aa <_free_r+0x2e>
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	6014      	str	r4, [r2, #0]
 80078a0:	4628      	mov	r0, r5
 80078a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a6:	f000 b8d3 	b.w	8007a50 <__malloc_unlock>
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	d90b      	bls.n	80078c6 <_free_r+0x4a>
 80078ae:	6821      	ldr	r1, [r4, #0]
 80078b0:	1862      	adds	r2, r4, r1
 80078b2:	4293      	cmp	r3, r2
 80078b4:	bf01      	itttt	eq
 80078b6:	681a      	ldreq	r2, [r3, #0]
 80078b8:	685b      	ldreq	r3, [r3, #4]
 80078ba:	1852      	addeq	r2, r2, r1
 80078bc:	6022      	streq	r2, [r4, #0]
 80078be:	6063      	str	r3, [r4, #4]
 80078c0:	6004      	str	r4, [r0, #0]
 80078c2:	e7ed      	b.n	80078a0 <_free_r+0x24>
 80078c4:	4613      	mov	r3, r2
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	b10a      	cbz	r2, 80078ce <_free_r+0x52>
 80078ca:	42a2      	cmp	r2, r4
 80078cc:	d9fa      	bls.n	80078c4 <_free_r+0x48>
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	1858      	adds	r0, r3, r1
 80078d2:	42a0      	cmp	r0, r4
 80078d4:	d10b      	bne.n	80078ee <_free_r+0x72>
 80078d6:	6820      	ldr	r0, [r4, #0]
 80078d8:	4401      	add	r1, r0
 80078da:	1858      	adds	r0, r3, r1
 80078dc:	4282      	cmp	r2, r0
 80078de:	6019      	str	r1, [r3, #0]
 80078e0:	d1de      	bne.n	80078a0 <_free_r+0x24>
 80078e2:	6810      	ldr	r0, [r2, #0]
 80078e4:	6852      	ldr	r2, [r2, #4]
 80078e6:	4401      	add	r1, r0
 80078e8:	6019      	str	r1, [r3, #0]
 80078ea:	605a      	str	r2, [r3, #4]
 80078ec:	e7d8      	b.n	80078a0 <_free_r+0x24>
 80078ee:	d902      	bls.n	80078f6 <_free_r+0x7a>
 80078f0:	230c      	movs	r3, #12
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	e7d4      	b.n	80078a0 <_free_r+0x24>
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	1821      	adds	r1, r4, r0
 80078fa:	428a      	cmp	r2, r1
 80078fc:	bf01      	itttt	eq
 80078fe:	6811      	ldreq	r1, [r2, #0]
 8007900:	6852      	ldreq	r2, [r2, #4]
 8007902:	1809      	addeq	r1, r1, r0
 8007904:	6021      	streq	r1, [r4, #0]
 8007906:	6062      	str	r2, [r4, #4]
 8007908:	605c      	str	r4, [r3, #4]
 800790a:	e7c9      	b.n	80078a0 <_free_r+0x24>
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	20000520 	.word	0x20000520

08007914 <_malloc_r>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	1ccd      	adds	r5, r1, #3
 8007918:	f025 0503 	bic.w	r5, r5, #3
 800791c:	3508      	adds	r5, #8
 800791e:	2d0c      	cmp	r5, #12
 8007920:	bf38      	it	cc
 8007922:	250c      	movcc	r5, #12
 8007924:	2d00      	cmp	r5, #0
 8007926:	4606      	mov	r6, r0
 8007928:	db01      	blt.n	800792e <_malloc_r+0x1a>
 800792a:	42a9      	cmp	r1, r5
 800792c:	d903      	bls.n	8007936 <_malloc_r+0x22>
 800792e:	230c      	movs	r3, #12
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	2000      	movs	r0, #0
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	f000 f88a 	bl	8007a4e <__malloc_lock>
 800793a:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <_malloc_r+0xac>)
 800793c:	6814      	ldr	r4, [r2, #0]
 800793e:	4621      	mov	r1, r4
 8007940:	b991      	cbnz	r1, 8007968 <_malloc_r+0x54>
 8007942:	4c20      	ldr	r4, [pc, #128]	; (80079c4 <_malloc_r+0xb0>)
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	b91b      	cbnz	r3, 8007950 <_malloc_r+0x3c>
 8007948:	4630      	mov	r0, r6
 800794a:	f000 f83d 	bl	80079c8 <_sbrk_r>
 800794e:	6020      	str	r0, [r4, #0]
 8007950:	4629      	mov	r1, r5
 8007952:	4630      	mov	r0, r6
 8007954:	f000 f838 	bl	80079c8 <_sbrk_r>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d124      	bne.n	80079a6 <_malloc_r+0x92>
 800795c:	230c      	movs	r3, #12
 800795e:	4630      	mov	r0, r6
 8007960:	6033      	str	r3, [r6, #0]
 8007962:	f000 f875 	bl	8007a50 <__malloc_unlock>
 8007966:	e7e4      	b.n	8007932 <_malloc_r+0x1e>
 8007968:	680b      	ldr	r3, [r1, #0]
 800796a:	1b5b      	subs	r3, r3, r5
 800796c:	d418      	bmi.n	80079a0 <_malloc_r+0x8c>
 800796e:	2b0b      	cmp	r3, #11
 8007970:	d90f      	bls.n	8007992 <_malloc_r+0x7e>
 8007972:	600b      	str	r3, [r1, #0]
 8007974:	18cc      	adds	r4, r1, r3
 8007976:	50cd      	str	r5, [r1, r3]
 8007978:	4630      	mov	r0, r6
 800797a:	f000 f869 	bl	8007a50 <__malloc_unlock>
 800797e:	f104 000b 	add.w	r0, r4, #11
 8007982:	1d23      	adds	r3, r4, #4
 8007984:	f020 0007 	bic.w	r0, r0, #7
 8007988:	1ac3      	subs	r3, r0, r3
 800798a:	d0d3      	beq.n	8007934 <_malloc_r+0x20>
 800798c:	425a      	negs	r2, r3
 800798e:	50e2      	str	r2, [r4, r3]
 8007990:	e7d0      	b.n	8007934 <_malloc_r+0x20>
 8007992:	684b      	ldr	r3, [r1, #4]
 8007994:	428c      	cmp	r4, r1
 8007996:	bf16      	itet	ne
 8007998:	6063      	strne	r3, [r4, #4]
 800799a:	6013      	streq	r3, [r2, #0]
 800799c:	460c      	movne	r4, r1
 800799e:	e7eb      	b.n	8007978 <_malloc_r+0x64>
 80079a0:	460c      	mov	r4, r1
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	e7cc      	b.n	8007940 <_malloc_r+0x2c>
 80079a6:	1cc4      	adds	r4, r0, #3
 80079a8:	f024 0403 	bic.w	r4, r4, #3
 80079ac:	42a0      	cmp	r0, r4
 80079ae:	d005      	beq.n	80079bc <_malloc_r+0xa8>
 80079b0:	1a21      	subs	r1, r4, r0
 80079b2:	4630      	mov	r0, r6
 80079b4:	f000 f808 	bl	80079c8 <_sbrk_r>
 80079b8:	3001      	adds	r0, #1
 80079ba:	d0cf      	beq.n	800795c <_malloc_r+0x48>
 80079bc:	6025      	str	r5, [r4, #0]
 80079be:	e7db      	b.n	8007978 <_malloc_r+0x64>
 80079c0:	20000520 	.word	0x20000520
 80079c4:	20000524 	.word	0x20000524

080079c8 <_sbrk_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	2300      	movs	r3, #0
 80079cc:	4c05      	ldr	r4, [pc, #20]	; (80079e4 <_sbrk_r+0x1c>)
 80079ce:	4605      	mov	r5, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	f7fa fdea 	bl	80025ac <_sbrk>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_sbrk_r+0x1a>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_sbrk_r+0x1a>
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	20000e5c 	.word	0x20000e5c

080079e8 <siprintf>:
 80079e8:	b40e      	push	{r1, r2, r3}
 80079ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079ee:	b500      	push	{lr}
 80079f0:	b09c      	sub	sp, #112	; 0x70
 80079f2:	ab1d      	add	r3, sp, #116	; 0x74
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	9006      	str	r0, [sp, #24]
 80079f8:	9107      	str	r1, [sp, #28]
 80079fa:	9104      	str	r1, [sp, #16]
 80079fc:	4808      	ldr	r0, [pc, #32]	; (8007a20 <siprintf+0x38>)
 80079fe:	4909      	ldr	r1, [pc, #36]	; (8007a24 <siprintf+0x3c>)
 8007a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a04:	9105      	str	r1, [sp, #20]
 8007a06:	6800      	ldr	r0, [r0, #0]
 8007a08:	a902      	add	r1, sp, #8
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	f000 f8a2 	bl	8007b54 <_svfiprintf_r>
 8007a10:	2200      	movs	r2, #0
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	b01c      	add	sp, #112	; 0x70
 8007a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a1c:	b003      	add	sp, #12
 8007a1e:	4770      	bx	lr
 8007a20:	2000002c 	.word	0x2000002c
 8007a24:	ffff0208 	.word	0xffff0208

08007a28 <strcpy>:
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a2e:	f803 2b01 	strb.w	r2, [r3], #1
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d1f9      	bne.n	8007a2a <strcpy+0x2>
 8007a36:	4770      	bx	lr

08007a38 <memcpy>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	1e43      	subs	r3, r0, #1
 8007a3c:	440a      	add	r2, r1
 8007a3e:	4291      	cmp	r1, r2
 8007a40:	d100      	bne.n	8007a44 <memcpy+0xc>
 8007a42:	bd10      	pop	{r4, pc}
 8007a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a4c:	e7f7      	b.n	8007a3e <memcpy+0x6>

08007a4e <__malloc_lock>:
 8007a4e:	4770      	bx	lr

08007a50 <__malloc_unlock>:
 8007a50:	4770      	bx	lr

08007a52 <_realloc_r>:
 8007a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a54:	4607      	mov	r7, r0
 8007a56:	4614      	mov	r4, r2
 8007a58:	460e      	mov	r6, r1
 8007a5a:	b921      	cbnz	r1, 8007a66 <_realloc_r+0x14>
 8007a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a60:	4611      	mov	r1, r2
 8007a62:	f7ff bf57 	b.w	8007914 <_malloc_r>
 8007a66:	b922      	cbnz	r2, 8007a72 <_realloc_r+0x20>
 8007a68:	f7ff ff08 	bl	800787c <_free_r>
 8007a6c:	4625      	mov	r5, r4
 8007a6e:	4628      	mov	r0, r5
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a72:	f000 fb16 	bl	80080a2 <_malloc_usable_size_r>
 8007a76:	42a0      	cmp	r0, r4
 8007a78:	d20f      	bcs.n	8007a9a <_realloc_r+0x48>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff ff49 	bl	8007914 <_malloc_r>
 8007a82:	4605      	mov	r5, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d0f2      	beq.n	8007a6e <_realloc_r+0x1c>
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	f7ff ffd4 	bl	8007a38 <memcpy>
 8007a90:	4631      	mov	r1, r6
 8007a92:	4638      	mov	r0, r7
 8007a94:	f7ff fef2 	bl	800787c <_free_r>
 8007a98:	e7e9      	b.n	8007a6e <_realloc_r+0x1c>
 8007a9a:	4635      	mov	r5, r6
 8007a9c:	e7e7      	b.n	8007a6e <_realloc_r+0x1c>

08007a9e <__ssputs_r>:
 8007a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa2:	688e      	ldr	r6, [r1, #8]
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	429e      	cmp	r6, r3
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	4690      	mov	r8, r2
 8007aac:	4699      	mov	r9, r3
 8007aae:	d837      	bhi.n	8007b20 <__ssputs_r+0x82>
 8007ab0:	898a      	ldrh	r2, [r1, #12]
 8007ab2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ab6:	d031      	beq.n	8007b1c <__ssputs_r+0x7e>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	6909      	ldr	r1, [r1, #16]
 8007abe:	1a6f      	subs	r7, r5, r1
 8007ac0:	6965      	ldr	r5, [r4, #20]
 8007ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ac6:	fb95 f5f3 	sdiv	r5, r5, r3
 8007aca:	f109 0301 	add.w	r3, r9, #1
 8007ace:	443b      	add	r3, r7
 8007ad0:	429d      	cmp	r5, r3
 8007ad2:	bf38      	it	cc
 8007ad4:	461d      	movcc	r5, r3
 8007ad6:	0553      	lsls	r3, r2, #21
 8007ad8:	d530      	bpl.n	8007b3c <__ssputs_r+0x9e>
 8007ada:	4629      	mov	r1, r5
 8007adc:	f7ff ff1a 	bl	8007914 <_malloc_r>
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	b950      	cbnz	r0, 8007afa <__ssputs_r+0x5c>
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aea:	f8ca 3000 	str.w	r3, [sl]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	463a      	mov	r2, r7
 8007afc:	6921      	ldr	r1, [r4, #16]
 8007afe:	f7ff ff9b 	bl	8007a38 <memcpy>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	6126      	str	r6, [r4, #16]
 8007b10:	443e      	add	r6, r7
 8007b12:	6026      	str	r6, [r4, #0]
 8007b14:	464e      	mov	r6, r9
 8007b16:	6165      	str	r5, [r4, #20]
 8007b18:	1bed      	subs	r5, r5, r7
 8007b1a:	60a5      	str	r5, [r4, #8]
 8007b1c:	454e      	cmp	r6, r9
 8007b1e:	d900      	bls.n	8007b22 <__ssputs_r+0x84>
 8007b20:	464e      	mov	r6, r9
 8007b22:	4632      	mov	r2, r6
 8007b24:	4641      	mov	r1, r8
 8007b26:	6820      	ldr	r0, [r4, #0]
 8007b28:	f000 faa2 	bl	8008070 <memmove>
 8007b2c:	68a3      	ldr	r3, [r4, #8]
 8007b2e:	2000      	movs	r0, #0
 8007b30:	1b9b      	subs	r3, r3, r6
 8007b32:	60a3      	str	r3, [r4, #8]
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	441e      	add	r6, r3
 8007b38:	6026      	str	r6, [r4, #0]
 8007b3a:	e7dc      	b.n	8007af6 <__ssputs_r+0x58>
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	f7ff ff88 	bl	8007a52 <_realloc_r>
 8007b42:	4606      	mov	r6, r0
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d1e2      	bne.n	8007b0e <__ssputs_r+0x70>
 8007b48:	6921      	ldr	r1, [r4, #16]
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	f7ff fe96 	bl	800787c <_free_r>
 8007b50:	e7c8      	b.n	8007ae4 <__ssputs_r+0x46>
	...

08007b54 <_svfiprintf_r>:
 8007b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b58:	461d      	mov	r5, r3
 8007b5a:	898b      	ldrh	r3, [r1, #12]
 8007b5c:	b09d      	sub	sp, #116	; 0x74
 8007b5e:	061f      	lsls	r7, r3, #24
 8007b60:	4680      	mov	r8, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4616      	mov	r6, r2
 8007b66:	d50f      	bpl.n	8007b88 <_svfiprintf_r+0x34>
 8007b68:	690b      	ldr	r3, [r1, #16]
 8007b6a:	b96b      	cbnz	r3, 8007b88 <_svfiprintf_r+0x34>
 8007b6c:	2140      	movs	r1, #64	; 0x40
 8007b6e:	f7ff fed1 	bl	8007914 <_malloc_r>
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	6120      	str	r0, [r4, #16]
 8007b76:	b928      	cbnz	r0, 8007b84 <_svfiprintf_r+0x30>
 8007b78:	230c      	movs	r3, #12
 8007b7a:	f8c8 3000 	str.w	r3, [r8]
 8007b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b82:	e0c8      	b.n	8007d16 <_svfiprintf_r+0x1c2>
 8007b84:	2340      	movs	r3, #64	; 0x40
 8007b86:	6163      	str	r3, [r4, #20]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b92:	2330      	movs	r3, #48	; 0x30
 8007b94:	f04f 0b01 	mov.w	fp, #1
 8007b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b9c:	9503      	str	r5, [sp, #12]
 8007b9e:	4637      	mov	r7, r6
 8007ba0:	463d      	mov	r5, r7
 8007ba2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ba6:	b10b      	cbz	r3, 8007bac <_svfiprintf_r+0x58>
 8007ba8:	2b25      	cmp	r3, #37	; 0x25
 8007baa:	d13e      	bne.n	8007c2a <_svfiprintf_r+0xd6>
 8007bac:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bb0:	d00b      	beq.n	8007bca <_svfiprintf_r+0x76>
 8007bb2:	4653      	mov	r3, sl
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4640      	mov	r0, r8
 8007bba:	f7ff ff70 	bl	8007a9e <__ssputs_r>
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f000 80a4 	beq.w	8007d0c <_svfiprintf_r+0x1b8>
 8007bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc6:	4453      	add	r3, sl
 8007bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bca:	783b      	ldrb	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 809d 	beq.w	8007d0c <_svfiprintf_r+0x1b8>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007be4:	931a      	str	r3, [sp, #104]	; 0x68
 8007be6:	462f      	mov	r7, r5
 8007be8:	2205      	movs	r2, #5
 8007bea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007bee:	4850      	ldr	r0, [pc, #320]	; (8007d30 <_svfiprintf_r+0x1dc>)
 8007bf0:	f000 fa30 	bl	8008054 <memchr>
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	b9d0      	cbnz	r0, 8007c2e <_svfiprintf_r+0xda>
 8007bf8:	06d9      	lsls	r1, r3, #27
 8007bfa:	bf44      	itt	mi
 8007bfc:	2220      	movmi	r2, #32
 8007bfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c02:	071a      	lsls	r2, r3, #28
 8007c04:	bf44      	itt	mi
 8007c06:	222b      	movmi	r2, #43	; 0x2b
 8007c08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c0c:	782a      	ldrb	r2, [r5, #0]
 8007c0e:	2a2a      	cmp	r2, #42	; 0x2a
 8007c10:	d015      	beq.n	8007c3e <_svfiprintf_r+0xea>
 8007c12:	462f      	mov	r7, r5
 8007c14:	2000      	movs	r0, #0
 8007c16:	250a      	movs	r5, #10
 8007c18:	9a07      	ldr	r2, [sp, #28]
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c20:	3b30      	subs	r3, #48	; 0x30
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d94d      	bls.n	8007cc2 <_svfiprintf_r+0x16e>
 8007c26:	b1b8      	cbz	r0, 8007c58 <_svfiprintf_r+0x104>
 8007c28:	e00f      	b.n	8007c4a <_svfiprintf_r+0xf6>
 8007c2a:	462f      	mov	r7, r5
 8007c2c:	e7b8      	b.n	8007ba0 <_svfiprintf_r+0x4c>
 8007c2e:	4a40      	ldr	r2, [pc, #256]	; (8007d30 <_svfiprintf_r+0x1dc>)
 8007c30:	463d      	mov	r5, r7
 8007c32:	1a80      	subs	r0, r0, r2
 8007c34:	fa0b f000 	lsl.w	r0, fp, r0
 8007c38:	4318      	orrs	r0, r3
 8007c3a:	9004      	str	r0, [sp, #16]
 8007c3c:	e7d3      	b.n	8007be6 <_svfiprintf_r+0x92>
 8007c3e:	9a03      	ldr	r2, [sp, #12]
 8007c40:	1d11      	adds	r1, r2, #4
 8007c42:	6812      	ldr	r2, [r2, #0]
 8007c44:	9103      	str	r1, [sp, #12]
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	db01      	blt.n	8007c4e <_svfiprintf_r+0xfa>
 8007c4a:	9207      	str	r2, [sp, #28]
 8007c4c:	e004      	b.n	8007c58 <_svfiprintf_r+0x104>
 8007c4e:	4252      	negs	r2, r2
 8007c50:	f043 0302 	orr.w	r3, r3, #2
 8007c54:	9207      	str	r2, [sp, #28]
 8007c56:	9304      	str	r3, [sp, #16]
 8007c58:	783b      	ldrb	r3, [r7, #0]
 8007c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c5c:	d10c      	bne.n	8007c78 <_svfiprintf_r+0x124>
 8007c5e:	787b      	ldrb	r3, [r7, #1]
 8007c60:	2b2a      	cmp	r3, #42	; 0x2a
 8007c62:	d133      	bne.n	8007ccc <_svfiprintf_r+0x178>
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	3702      	adds	r7, #2
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	9203      	str	r2, [sp, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c76:	9305      	str	r3, [sp, #20]
 8007c78:	4d2e      	ldr	r5, [pc, #184]	; (8007d34 <_svfiprintf_r+0x1e0>)
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	7839      	ldrb	r1, [r7, #0]
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f9e8 	bl	8008054 <memchr>
 8007c84:	b138      	cbz	r0, 8007c96 <_svfiprintf_r+0x142>
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	1b40      	subs	r0, r0, r5
 8007c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	3701      	adds	r7, #1
 8007c92:	4303      	orrs	r3, r0
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	7839      	ldrb	r1, [r7, #0]
 8007c98:	2206      	movs	r2, #6
 8007c9a:	4827      	ldr	r0, [pc, #156]	; (8007d38 <_svfiprintf_r+0x1e4>)
 8007c9c:	1c7e      	adds	r6, r7, #1
 8007c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ca2:	f000 f9d7 	bl	8008054 <memchr>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d038      	beq.n	8007d1c <_svfiprintf_r+0x1c8>
 8007caa:	4b24      	ldr	r3, [pc, #144]	; (8007d3c <_svfiprintf_r+0x1e8>)
 8007cac:	bb13      	cbnz	r3, 8007cf4 <_svfiprintf_r+0x1a0>
 8007cae:	9b03      	ldr	r3, [sp, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	f023 0307 	bic.w	r3, r3, #7
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	9303      	str	r3, [sp, #12]
 8007cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbc:	444b      	add	r3, r9
 8007cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc0:	e76d      	b.n	8007b9e <_svfiprintf_r+0x4a>
 8007cc2:	fb05 3202 	mla	r2, r5, r2, r3
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	460f      	mov	r7, r1
 8007cca:	e7a6      	b.n	8007c1a <_svfiprintf_r+0xc6>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	250a      	movs	r5, #10
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	3701      	adds	r7, #1
 8007cd4:	9305      	str	r3, [sp, #20]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cdc:	3a30      	subs	r2, #48	; 0x30
 8007cde:	2a09      	cmp	r2, #9
 8007ce0:	d903      	bls.n	8007cea <_svfiprintf_r+0x196>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0c8      	beq.n	8007c78 <_svfiprintf_r+0x124>
 8007ce6:	9105      	str	r1, [sp, #20]
 8007ce8:	e7c6      	b.n	8007c78 <_svfiprintf_r+0x124>
 8007cea:	fb05 2101 	mla	r1, r5, r1, r2
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	e7f0      	b.n	8007cd6 <_svfiprintf_r+0x182>
 8007cf4:	ab03      	add	r3, sp, #12
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <_svfiprintf_r+0x1ec>)
 8007cfc:	a904      	add	r1, sp, #16
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f3af 8000 	nop.w
 8007d04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007d08:	4681      	mov	r9, r0
 8007d0a:	d1d6      	bne.n	8007cba <_svfiprintf_r+0x166>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	065b      	lsls	r3, r3, #25
 8007d10:	f53f af35 	bmi.w	8007b7e <_svfiprintf_r+0x2a>
 8007d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d16:	b01d      	add	sp, #116	; 0x74
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	ab03      	add	r3, sp, #12
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4622      	mov	r2, r4
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <_svfiprintf_r+0x1ec>)
 8007d24:	a904      	add	r1, sp, #16
 8007d26:	4640      	mov	r0, r8
 8007d28:	f000 f882 	bl	8007e30 <_printf_i>
 8007d2c:	e7ea      	b.n	8007d04 <_svfiprintf_r+0x1b0>
 8007d2e:	bf00      	nop
 8007d30:	080081b8 	.word	0x080081b8
 8007d34:	080081be 	.word	0x080081be
 8007d38:	080081c2 	.word	0x080081c2
 8007d3c:	00000000 	.word	0x00000000
 8007d40:	08007a9f 	.word	0x08007a9f

08007d44 <_printf_common>:
 8007d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	4691      	mov	r9, r2
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	688a      	ldr	r2, [r1, #8]
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	4606      	mov	r6, r0
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bfb8      	it	lt
 8007d56:	4613      	movlt	r3, r2
 8007d58:	f8c9 3000 	str.w	r3, [r9]
 8007d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d60:	460c      	mov	r4, r1
 8007d62:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d66:	b112      	cbz	r2, 8007d6e <_printf_common+0x2a>
 8007d68:	3301      	adds	r3, #1
 8007d6a:	f8c9 3000 	str.w	r3, [r9]
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	0699      	lsls	r1, r3, #26
 8007d72:	bf42      	ittt	mi
 8007d74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d78:	3302      	addmi	r3, #2
 8007d7a:	f8c9 3000 	strmi.w	r3, [r9]
 8007d7e:	6825      	ldr	r5, [r4, #0]
 8007d80:	f015 0506 	ands.w	r5, r5, #6
 8007d84:	d107      	bne.n	8007d96 <_printf_common+0x52>
 8007d86:	f104 0a19 	add.w	sl, r4, #25
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	42ab      	cmp	r3, r5
 8007d94:	dc29      	bgt.n	8007dea <_printf_common+0xa6>
 8007d96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	3300      	adds	r3, #0
 8007d9e:	bf18      	it	ne
 8007da0:	2301      	movne	r3, #1
 8007da2:	0692      	lsls	r2, r2, #26
 8007da4:	d42e      	bmi.n	8007e04 <_printf_common+0xc0>
 8007da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007daa:	4639      	mov	r1, r7
 8007dac:	4630      	mov	r0, r6
 8007dae:	47c0      	blx	r8
 8007db0:	3001      	adds	r0, #1
 8007db2:	d021      	beq.n	8007df8 <_printf_common+0xb4>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	68e5      	ldr	r5, [r4, #12]
 8007db8:	f003 0306 	and.w	r3, r3, #6
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	bf18      	it	ne
 8007dc0:	2500      	movne	r5, #0
 8007dc2:	f8d9 2000 	ldr.w	r2, [r9]
 8007dc6:	f04f 0900 	mov.w	r9, #0
 8007dca:	bf08      	it	eq
 8007dcc:	1aad      	subeq	r5, r5, r2
 8007dce:	68a3      	ldr	r3, [r4, #8]
 8007dd0:	6922      	ldr	r2, [r4, #16]
 8007dd2:	bf08      	it	eq
 8007dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bfc4      	itt	gt
 8007ddc:	1a9b      	subgt	r3, r3, r2
 8007dde:	18ed      	addgt	r5, r5, r3
 8007de0:	341a      	adds	r4, #26
 8007de2:	454d      	cmp	r5, r9
 8007de4:	d11a      	bne.n	8007e1c <_printf_common+0xd8>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e008      	b.n	8007dfc <_printf_common+0xb8>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4652      	mov	r2, sl
 8007dee:	4639      	mov	r1, r7
 8007df0:	4630      	mov	r0, r6
 8007df2:	47c0      	blx	r8
 8007df4:	3001      	adds	r0, #1
 8007df6:	d103      	bne.n	8007e00 <_printf_common+0xbc>
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e00:	3501      	adds	r5, #1
 8007e02:	e7c2      	b.n	8007d8a <_printf_common+0x46>
 8007e04:	2030      	movs	r0, #48	; 0x30
 8007e06:	18e1      	adds	r1, r4, r3
 8007e08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e12:	4422      	add	r2, r4
 8007e14:	3302      	adds	r3, #2
 8007e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e1a:	e7c4      	b.n	8007da6 <_printf_common+0x62>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4639      	mov	r1, r7
 8007e22:	4630      	mov	r0, r6
 8007e24:	47c0      	blx	r8
 8007e26:	3001      	adds	r0, #1
 8007e28:	d0e6      	beq.n	8007df8 <_printf_common+0xb4>
 8007e2a:	f109 0901 	add.w	r9, r9, #1
 8007e2e:	e7d8      	b.n	8007de2 <_printf_common+0x9e>

08007e30 <_printf_i>:
 8007e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e38:	460c      	mov	r4, r1
 8007e3a:	7e09      	ldrb	r1, [r1, #24]
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	296e      	cmp	r1, #110	; 0x6e
 8007e40:	4617      	mov	r7, r2
 8007e42:	4606      	mov	r6, r0
 8007e44:	4698      	mov	r8, r3
 8007e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e48:	f000 80b3 	beq.w	8007fb2 <_printf_i+0x182>
 8007e4c:	d822      	bhi.n	8007e94 <_printf_i+0x64>
 8007e4e:	2963      	cmp	r1, #99	; 0x63
 8007e50:	d036      	beq.n	8007ec0 <_printf_i+0x90>
 8007e52:	d80a      	bhi.n	8007e6a <_printf_i+0x3a>
 8007e54:	2900      	cmp	r1, #0
 8007e56:	f000 80b9 	beq.w	8007fcc <_printf_i+0x19c>
 8007e5a:	2958      	cmp	r1, #88	; 0x58
 8007e5c:	f000 8083 	beq.w	8007f66 <_printf_i+0x136>
 8007e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e68:	e032      	b.n	8007ed0 <_printf_i+0xa0>
 8007e6a:	2964      	cmp	r1, #100	; 0x64
 8007e6c:	d001      	beq.n	8007e72 <_printf_i+0x42>
 8007e6e:	2969      	cmp	r1, #105	; 0x69
 8007e70:	d1f6      	bne.n	8007e60 <_printf_i+0x30>
 8007e72:	6820      	ldr	r0, [r4, #0]
 8007e74:	6813      	ldr	r3, [r2, #0]
 8007e76:	0605      	lsls	r5, r0, #24
 8007e78:	f103 0104 	add.w	r1, r3, #4
 8007e7c:	d52a      	bpl.n	8007ed4 <_printf_i+0xa4>
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da03      	bge.n	8007e8e <_printf_i+0x5e>
 8007e86:	222d      	movs	r2, #45	; 0x2d
 8007e88:	425b      	negs	r3, r3
 8007e8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e8e:	486f      	ldr	r0, [pc, #444]	; (800804c <_printf_i+0x21c>)
 8007e90:	220a      	movs	r2, #10
 8007e92:	e039      	b.n	8007f08 <_printf_i+0xd8>
 8007e94:	2973      	cmp	r1, #115	; 0x73
 8007e96:	f000 809d 	beq.w	8007fd4 <_printf_i+0x1a4>
 8007e9a:	d808      	bhi.n	8007eae <_printf_i+0x7e>
 8007e9c:	296f      	cmp	r1, #111	; 0x6f
 8007e9e:	d020      	beq.n	8007ee2 <_printf_i+0xb2>
 8007ea0:	2970      	cmp	r1, #112	; 0x70
 8007ea2:	d1dd      	bne.n	8007e60 <_printf_i+0x30>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	f043 0320 	orr.w	r3, r3, #32
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	e003      	b.n	8007eb6 <_printf_i+0x86>
 8007eae:	2975      	cmp	r1, #117	; 0x75
 8007eb0:	d017      	beq.n	8007ee2 <_printf_i+0xb2>
 8007eb2:	2978      	cmp	r1, #120	; 0x78
 8007eb4:	d1d4      	bne.n	8007e60 <_printf_i+0x30>
 8007eb6:	2378      	movs	r3, #120	; 0x78
 8007eb8:	4865      	ldr	r0, [pc, #404]	; (8008050 <_printf_i+0x220>)
 8007eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ebe:	e055      	b.n	8007f6c <_printf_i+0x13c>
 8007ec0:	6813      	ldr	r3, [r2, #0]
 8007ec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec6:	1d19      	adds	r1, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6011      	str	r1, [r2, #0]
 8007ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e08c      	b.n	8007fee <_printf_i+0x1be>
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eda:	6011      	str	r1, [r2, #0]
 8007edc:	bf18      	it	ne
 8007ede:	b21b      	sxthne	r3, r3
 8007ee0:	e7cf      	b.n	8007e82 <_printf_i+0x52>
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	6825      	ldr	r5, [r4, #0]
 8007ee6:	1d18      	adds	r0, r3, #4
 8007ee8:	6010      	str	r0, [r2, #0]
 8007eea:	0628      	lsls	r0, r5, #24
 8007eec:	d501      	bpl.n	8007ef2 <_printf_i+0xc2>
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	e002      	b.n	8007ef8 <_printf_i+0xc8>
 8007ef2:	0668      	lsls	r0, r5, #25
 8007ef4:	d5fb      	bpl.n	8007eee <_printf_i+0xbe>
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	296f      	cmp	r1, #111	; 0x6f
 8007efa:	bf14      	ite	ne
 8007efc:	220a      	movne	r2, #10
 8007efe:	2208      	moveq	r2, #8
 8007f00:	4852      	ldr	r0, [pc, #328]	; (800804c <_printf_i+0x21c>)
 8007f02:	2100      	movs	r1, #0
 8007f04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f08:	6865      	ldr	r5, [r4, #4]
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	60a5      	str	r5, [r4, #8]
 8007f0e:	f2c0 8095 	blt.w	800803c <_printf_i+0x20c>
 8007f12:	6821      	ldr	r1, [r4, #0]
 8007f14:	f021 0104 	bic.w	r1, r1, #4
 8007f18:	6021      	str	r1, [r4, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d13d      	bne.n	8007f9a <_printf_i+0x16a>
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	f040 808e 	bne.w	8008040 <_printf_i+0x210>
 8007f24:	4665      	mov	r5, ip
 8007f26:	2a08      	cmp	r2, #8
 8007f28:	d10b      	bne.n	8007f42 <_printf_i+0x112>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	07db      	lsls	r3, r3, #31
 8007f2e:	d508      	bpl.n	8007f42 <_printf_i+0x112>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	bfde      	ittt	le
 8007f38:	2330      	movle	r3, #48	; 0x30
 8007f3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f42:	ebac 0305 	sub.w	r3, ip, r5
 8007f46:	6123      	str	r3, [r4, #16]
 8007f48:	f8cd 8000 	str.w	r8, [sp]
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	aa03      	add	r2, sp, #12
 8007f50:	4621      	mov	r1, r4
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff fef6 	bl	8007d44 <_printf_common>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d14d      	bne.n	8007ff8 <_printf_i+0x1c8>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f60:	b005      	add	sp, #20
 8007f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f66:	4839      	ldr	r0, [pc, #228]	; (800804c <_printf_i+0x21c>)
 8007f68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f6c:	6813      	ldr	r3, [r2, #0]
 8007f6e:	6821      	ldr	r1, [r4, #0]
 8007f70:	1d1d      	adds	r5, r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6015      	str	r5, [r2, #0]
 8007f76:	060a      	lsls	r2, r1, #24
 8007f78:	d50b      	bpl.n	8007f92 <_printf_i+0x162>
 8007f7a:	07ca      	lsls	r2, r1, #31
 8007f7c:	bf44      	itt	mi
 8007f7e:	f041 0120 	orrmi.w	r1, r1, #32
 8007f82:	6021      	strmi	r1, [r4, #0]
 8007f84:	b91b      	cbnz	r3, 8007f8e <_printf_i+0x15e>
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	f022 0220 	bic.w	r2, r2, #32
 8007f8c:	6022      	str	r2, [r4, #0]
 8007f8e:	2210      	movs	r2, #16
 8007f90:	e7b7      	b.n	8007f02 <_printf_i+0xd2>
 8007f92:	064d      	lsls	r5, r1, #25
 8007f94:	bf48      	it	mi
 8007f96:	b29b      	uxthmi	r3, r3
 8007f98:	e7ef      	b.n	8007f7a <_printf_i+0x14a>
 8007f9a:	4665      	mov	r5, ip
 8007f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fa0:	fb02 3311 	mls	r3, r2, r1, r3
 8007fa4:	5cc3      	ldrb	r3, [r0, r3]
 8007fa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007faa:	460b      	mov	r3, r1
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d1f5      	bne.n	8007f9c <_printf_i+0x16c>
 8007fb0:	e7b9      	b.n	8007f26 <_printf_i+0xf6>
 8007fb2:	6813      	ldr	r3, [r2, #0]
 8007fb4:	6825      	ldr	r5, [r4, #0]
 8007fb6:	1d18      	adds	r0, r3, #4
 8007fb8:	6961      	ldr	r1, [r4, #20]
 8007fba:	6010      	str	r0, [r2, #0]
 8007fbc:	0628      	lsls	r0, r5, #24
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	d501      	bpl.n	8007fc6 <_printf_i+0x196>
 8007fc2:	6019      	str	r1, [r3, #0]
 8007fc4:	e002      	b.n	8007fcc <_printf_i+0x19c>
 8007fc6:	066a      	lsls	r2, r5, #25
 8007fc8:	d5fb      	bpl.n	8007fc2 <_printf_i+0x192>
 8007fca:	8019      	strh	r1, [r3, #0]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4665      	mov	r5, ip
 8007fd0:	6123      	str	r3, [r4, #16]
 8007fd2:	e7b9      	b.n	8007f48 <_printf_i+0x118>
 8007fd4:	6813      	ldr	r3, [r2, #0]
 8007fd6:	1d19      	adds	r1, r3, #4
 8007fd8:	6011      	str	r1, [r2, #0]
 8007fda:	681d      	ldr	r5, [r3, #0]
 8007fdc:	6862      	ldr	r2, [r4, #4]
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f837 	bl	8008054 <memchr>
 8007fe6:	b108      	cbz	r0, 8007fec <_printf_i+0x1bc>
 8007fe8:	1b40      	subs	r0, r0, r5
 8007fea:	6060      	str	r0, [r4, #4]
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff6:	e7a7      	b.n	8007f48 <_printf_i+0x118>
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	4630      	mov	r0, r6
 8008000:	47c0      	blx	r8
 8008002:	3001      	adds	r0, #1
 8008004:	d0aa      	beq.n	8007f5c <_printf_i+0x12c>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	079b      	lsls	r3, r3, #30
 800800a:	d413      	bmi.n	8008034 <_printf_i+0x204>
 800800c:	68e0      	ldr	r0, [r4, #12]
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	4298      	cmp	r0, r3
 8008012:	bfb8      	it	lt
 8008014:	4618      	movlt	r0, r3
 8008016:	e7a3      	b.n	8007f60 <_printf_i+0x130>
 8008018:	2301      	movs	r3, #1
 800801a:	464a      	mov	r2, r9
 800801c:	4639      	mov	r1, r7
 800801e:	4630      	mov	r0, r6
 8008020:	47c0      	blx	r8
 8008022:	3001      	adds	r0, #1
 8008024:	d09a      	beq.n	8007f5c <_printf_i+0x12c>
 8008026:	3501      	adds	r5, #1
 8008028:	68e3      	ldr	r3, [r4, #12]
 800802a:	9a03      	ldr	r2, [sp, #12]
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	42ab      	cmp	r3, r5
 8008030:	dcf2      	bgt.n	8008018 <_printf_i+0x1e8>
 8008032:	e7eb      	b.n	800800c <_printf_i+0x1dc>
 8008034:	2500      	movs	r5, #0
 8008036:	f104 0919 	add.w	r9, r4, #25
 800803a:	e7f5      	b.n	8008028 <_printf_i+0x1f8>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1ac      	bne.n	8007f9a <_printf_i+0x16a>
 8008040:	7803      	ldrb	r3, [r0, #0]
 8008042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800804a:	e76c      	b.n	8007f26 <_printf_i+0xf6>
 800804c:	080081c9 	.word	0x080081c9
 8008050:	080081da 	.word	0x080081da

08008054 <memchr>:
 8008054:	b510      	push	{r4, lr}
 8008056:	b2c9      	uxtb	r1, r1
 8008058:	4402      	add	r2, r0
 800805a:	4290      	cmp	r0, r2
 800805c:	4603      	mov	r3, r0
 800805e:	d101      	bne.n	8008064 <memchr+0x10>
 8008060:	2300      	movs	r3, #0
 8008062:	e003      	b.n	800806c <memchr+0x18>
 8008064:	781c      	ldrb	r4, [r3, #0]
 8008066:	3001      	adds	r0, #1
 8008068:	428c      	cmp	r4, r1
 800806a:	d1f6      	bne.n	800805a <memchr+0x6>
 800806c:	4618      	mov	r0, r3
 800806e:	bd10      	pop	{r4, pc}

08008070 <memmove>:
 8008070:	4288      	cmp	r0, r1
 8008072:	b510      	push	{r4, lr}
 8008074:	eb01 0302 	add.w	r3, r1, r2
 8008078:	d807      	bhi.n	800808a <memmove+0x1a>
 800807a:	1e42      	subs	r2, r0, #1
 800807c:	4299      	cmp	r1, r3
 800807e:	d00a      	beq.n	8008096 <memmove+0x26>
 8008080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008084:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008088:	e7f8      	b.n	800807c <memmove+0xc>
 800808a:	4283      	cmp	r3, r0
 800808c:	d9f5      	bls.n	800807a <memmove+0xa>
 800808e:	1881      	adds	r1, r0, r2
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	42d3      	cmn	r3, r2
 8008094:	d100      	bne.n	8008098 <memmove+0x28>
 8008096:	bd10      	pop	{r4, pc}
 8008098:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800809c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080a0:	e7f7      	b.n	8008092 <memmove+0x22>

080080a2 <_malloc_usable_size_r>:
 80080a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a6:	1f18      	subs	r0, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfbc      	itt	lt
 80080ac:	580b      	ldrlt	r3, [r1, r0]
 80080ae:	18c0      	addlt	r0, r0, r3
 80080b0:	4770      	bx	lr
	...

080080b4 <trunc>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80080ba:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 80080be:	2a13      	cmp	r2, #19
 80080c0:	4603      	mov	r3, r0
 80080c2:	460c      	mov	r4, r1
 80080c4:	dc10      	bgt.n	80080e8 <trunc+0x34>
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	bfb3      	iteet	lt
 80080ca:	2000      	movlt	r0, #0
 80080cc:	2000      	movge	r0, #0
 80080ce:	4b10      	ldrge	r3, [pc, #64]	; (8008110 <trunc+0x5c>)
 80080d0:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 80080d4:	bfa4      	itt	ge
 80080d6:	fa43 f202 	asrge.w	r2, r3, r2
 80080da:	ea24 0102 	bicge.w	r1, r4, r2
 80080de:	4603      	mov	r3, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	4618      	mov	r0, r3
 80080e4:	4621      	mov	r1, r4
 80080e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e8:	2a33      	cmp	r2, #51	; 0x33
 80080ea:	dd07      	ble.n	80080fc <trunc+0x48>
 80080ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80080f0:	d1f7      	bne.n	80080e2 <trunc+0x2e>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	f7f8 f831 	bl	800015c <__adddf3>
 80080fa:	e7f0      	b.n	80080de <trunc+0x2a>
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008100:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8008104:	fa22 f505 	lsr.w	r5, r2, r5
 8008108:	ea20 0005 	bic.w	r0, r0, r5
 800810c:	e7e7      	b.n	80080de <trunc+0x2a>
 800810e:	bf00      	nop
 8008110:	000fffff 	.word	0x000fffff

08008114 <_init>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr

08008120 <_fini>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr
