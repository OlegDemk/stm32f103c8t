
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007100  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a64  08007a64  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007a64  08007a64  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a64  08007a64  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  20000080  08007aec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08007aec  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dbc  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d26  00000000  00000000  00035e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00038b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  00039de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003a7a  00000000  00000000  0003aee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea87  00000000  00000000  0003e962  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000781ee  00000000  00000000  0004d3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c55d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052bc  00000000  00000000  000c5654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080071f8 	.word	0x080071f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080071f8 	.word	0x080071f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000aa8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aac:	d1ed      	bne.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2iz>:
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30f      	bcc.n	8000fbe <__aeabi_f2iz+0x2a>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d90d      	bls.n	8000fc4 <__aeabi_f2iz+0x30>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	bf18      	it	ne
 8000fba:	4240      	negne	r0, r0
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2iz+0x3a>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d105      	bne.n	8000fda <__aeabi_f2iz+0x46>
 8000fce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd2:	bf08      	it	eq
 8000fd4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b08b      	sub	sp, #44	; 0x2c
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t size=0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 8000ff6:	23ff      	movs	r3, #255	; 0xff
 8000ff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 8001002:	463b      	mov	r3, r7
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f95a 	bl	80012c0 <r_single_Si7021>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001012:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001016:	2b00      	cmp	r3, #0
 8001018:	d000      	beq.n	800101c <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 800101a:	e7fe      	b.n	800101a <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f04f 0100 	mov.w	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff8e 	bl	8000f44 <__aeabi_fcmplt>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <read_T_and_H_SI7021+0x52>
 800102e:	4b52      	ldr	r3, [pc, #328]	; (8001178 <read_T_and_H_SI7021+0x198>)
 8001030:	e000      	b.n	8001034 <read_T_and_H_SI7021+0x54>
 8001032:	4b52      	ldr	r3, [pc, #328]	; (800117c <read_T_and_H_SI7021+0x19c>)
 8001034:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff81 	bl	8000f44 <__aeabi_fcmplt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <read_T_and_H_SI7021+0x70>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800104e:	e000      	b.n	8001052 <read_T_and_H_SI7021+0x72>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 8001054:	69f8      	ldr	r0, [r7, #28]
 8001056:	f7ff ff9d 	bl	8000f94 <__aeabi_f2iz>
 800105a:	4603      	mov	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 800105e:	683c      	ldr	r4, [r7, #0]
 8001060:	69b8      	ldr	r0, [r7, #24]
 8001062:	f7ff fd7d 	bl	8000b60 <__aeabi_i2f>
 8001066:	4603      	mov	r3, r0
 8001068:	4619      	mov	r1, r3
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fcc2 	bl	80009f4 <__aeabi_fsub>
 8001070:	4603      	mov	r3, r0
 8001072:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 8001074:	4942      	ldr	r1, [pc, #264]	; (8001180 <read_T_and_H_SI7021+0x1a0>)
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff fdc6 	bl	8000c08 <__aeabi_fmul>
 800107c:	4603      	mov	r3, r0
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9d2 	bl	8000428 <__aeabi_f2d>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	f006 f884 	bl	8007198 <trunc>
 8001090:	4603      	mov	r3, r0
 8001092:	460c      	mov	r4, r1
 8001094:	4618      	mov	r0, r3
 8001096:	4621      	mov	r1, r4
 8001098:	f7ff fc30 	bl	80008fc <__aeabi_d2iz>
 800109c:	4603      	mov	r3, r0
 800109e:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 80010a0:	1d38      	adds	r0, r7, #4
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6a3a      	ldr	r2, [r7, #32]
 80010a6:	4937      	ldr	r1, [pc, #220]	; (8001184 <read_T_and_H_SI7021+0x1a4>)
 80010a8:	f005 fc40 	bl	800692c <siprintf>
	strcpy(temperature_si7021, str);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4835      	ldr	r0, [pc, #212]	; (8001188 <read_T_and_H_SI7021+0x1a8>)
 80010b2:	f005 fc5b 	bl	800696c <strcpy>
	memset(str, 0 , sizeof(str));
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	220a      	movs	r2, #10
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 fc2d 	bl	800691c <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 80010c8:	463b      	mov	r3, r7
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f8f7 	bl	80012c0 <r_single_Si7021>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80010d8:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d000      	beq.n	80010e2 <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 80010e0:	e7fe      	b.n	80010e0 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f04f 0100 	mov.w	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff2b 	bl	8000f44 <__aeabi_fcmplt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <read_T_and_H_SI7021+0x11c>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010fa:	e000      	b.n	80010fe <read_T_and_H_SI7021+0x11e>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8001100:	69f8      	ldr	r0, [r7, #28]
 8001102:	f7ff ff47 	bl	8000f94 <__aeabi_f2iz>
 8001106:	4603      	mov	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 800110a:	683c      	ldr	r4, [r7, #0]
 800110c:	69b8      	ldr	r0, [r7, #24]
 800110e:	f7ff fd27 	bl	8000b60 <__aeabi_i2f>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fc6c 	bl	80009f4 <__aeabi_fsub>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8001120:	4917      	ldr	r1, [pc, #92]	; (8001180 <read_T_and_H_SI7021+0x1a0>)
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff fd70 	bl	8000c08 <__aeabi_fmul>
 8001128:	4603      	mov	r3, r0
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f97c 	bl	8000428 <__aeabi_f2d>
 8001130:	4603      	mov	r3, r0
 8001132:	460c      	mov	r4, r1
 8001134:	4618      	mov	r0, r3
 8001136:	4621      	mov	r1, r4
 8001138:	f006 f82e 	bl	8007198 <trunc>
 800113c:	4603      	mov	r3, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4618      	mov	r0, r3
 8001142:	4621      	mov	r1, r4
 8001144:	f7ff fbda 	bl	80008fc <__aeabi_d2iz>
 8001148:	4603      	mov	r3, r0
 800114a:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	490e      	ldr	r1, [pc, #56]	; (800118c <read_T_and_H_SI7021+0x1ac>)
 8001152:	4618      	mov	r0, r3
 8001154:	f005 fbea 	bl	800692c <siprintf>
	strcpy(humidity_si7021, str);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <read_T_and_H_SI7021+0x1b0>)
 800115e:	f005 fc05 	bl	800696c <strcpy>
	memset(str, 0 , sizeof(str));
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	220a      	movs	r2, #10
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fbd7 	bl	800691c <memset>
}
 800116e:	bf00      	nop
 8001170:	372c      	adds	r7, #44	; 0x2c
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	08007210 	.word	0x08007210
 800117c:	08007214 	.word	0x08007214
 8001180:	461c4000 	.word	0x461c4000
 8001184:	08007218 	.word	0x08007218
 8001188:	20000500 	.word	0x20000500
 800118c:	08007220 	.word	0x08007220
 8001190:	20000508 	.word	0x20000508
 8001194:	00000000 	.word	0x00000000

08001198 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f92d 	bl	8000404 <__aeabi_i2d>
 80011aa:	a311      	add	r3, pc, #68	; (adr r3, 80011f0 <process_temp_code+0x58>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f992 	bl	80004d8 <__aeabi_dmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <process_temp_code+0x68>)
 80011c2:	f7ff fab3 	bl	800072c <__aeabi_ddiv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	a30a      	add	r3, pc, #40	; (adr r3, 80011f8 <process_temp_code+0x60>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7fe ffc8 	bl	8000168 <__aeabi_dsub>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4618      	mov	r0, r3
 80011de:	4621      	mov	r1, r4
 80011e0:	f7ff fbb4 	bl	800094c <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	3d70a3d7 	.word	0x3d70a3d7
 80011f4:	4065f70a 	.word	0x4065f70a
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	40476ccc 	.word	0x40476ccc
 8001200:	40f00000 	.word	0x40f00000

08001204 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f8f7 	bl	8000404 <__aeabi_i2d>
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <process_humi_code+0x84>)
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	4618      	mov	r0, r3
 8001226:	4621      	mov	r1, r4
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <process_humi_code+0x88>)
 800122e:	f7ff fa7d 	bl	800072c <__aeabi_ddiv>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	4618      	mov	r0, r3
 8001238:	4621      	mov	r1, r4
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <process_humi_code+0x8c>)
 8001240:	f7fe ff92 	bl	8000168 <__aeabi_dsub>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fb7e 	bl	800094c <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001254:	f04f 0100 	mov.w	r1, #0
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff fe73 	bl	8000f44 <__aeabi_fcmplt>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <process_humi_code+0x66>
    return 0;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e009      	b.n	800127e <process_humi_code+0x7a>
  else if(value > 100)
 800126a:	490a      	ldr	r1, [pc, #40]	; (8001294 <process_humi_code+0x90>)
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff fe87 	bl	8000f80 <__aeabi_fcmpgt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <process_humi_code+0x78>
    return 100;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <process_humi_code+0x90>)
 800127a:	e000      	b.n	800127e <process_humi_code+0x7a>
  else
    return (float)value;
 800127c:	68fb      	ldr	r3, [r7, #12]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	405f4000 	.word	0x405f4000
 800128c:	40f00000 	.word	0x40f00000
 8001290:	40180000 	.word	0x40180000
 8001294:	42c80000 	.word	0x42c80000

08001298 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b29b      	uxth	r3, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 80012d2:	23e5      	movs	r3, #229	; 0xe5
 80012d4:	737b      	strb	r3, [r7, #13]
 80012d6:	e008      	b.n	80012ea <r_single_Si7021+0x2a>
  else if(type == Temperature)
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 80012de:	23e3      	movs	r3, #227	; 0xe3
 80012e0:	737b      	strb	r3, [r7, #13]
 80012e2:	e002      	b.n	80012ea <r_single_Si7021+0x2a>
  else
    return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	e03c      	b.n	8001364 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	f107 020d 	add.w	r2, r7, #13
 80012f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <r_single_Si7021+0xac>)
 80012fa:	f002 f875 	bl	80033e8 <HAL_I2C_Master_Transmit>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <r_single_Si7021+0x4a>
    return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001308:	e02c      	b.n	8001364 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	f242 7310 	movw	r3, #10000	; 0x2710
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2302      	movs	r3, #2
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <r_single_Si7021+0xac>)
 800131a:	f002 f963 	bl	80035e4 <HAL_I2C_Master_Receive>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <r_single_Si7021+0x6a>
    return -1;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001328:	e01c      	b.n	8001364 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffb2 	bl	8001298 <convert_to_uint16>
 8001334:	4603      	mov	r3, r0
 8001336:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <process_humi_code>
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e009      	b.n	8001362 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff1e 	bl	8001198 <process_temp_code>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]

  return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000660 	.word	0x20000660

08001370 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <I2C_1_scaner+0xb4>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e043      	b.n	800140a <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f001 fa80 	bl	8002888 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <I2C_1_scaner+0xb4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	b299      	uxth	r1, r3
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <I2C_1_scaner+0xb8>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b298      	uxth	r0, r3
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <I2C_1_scaner+0xbc>)
 800139a:	881c      	ldrh	r4, [r3, #0]
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <I2C_1_scaner+0xbc>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	4a23      	ldr	r2, [pc, #140]	; (8001430 <I2C_1_scaner+0xc0>)
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	9202      	str	r2, [sp, #8]
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <I2C_1_scaner+0xc4>)
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4623      	mov	r3, r4
 80013ae:	4602      	mov	r2, r0
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <I2C_1_scaner+0xc8>)
 80013b2:	f002 fc6b 	bl	8003c8c <HAL_I2C_Mem_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <I2C_1_scaner+0xcc>)
 80013bc:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <I2C_1_scaner+0xcc>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11b      	bne.n	80013fe <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3301      	adds	r3, #1
 80013ca:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <I2C_1_scaner+0xb4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b40      	cmp	r3, #64	; 0x40
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <I2C_1_scaner+0xb4>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b3c      	cmp	r3, #60	; 0x3c
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <I2C_1_scaner+0xb4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b3c      	cmp	r3, #60	; 0x3c
 80013f6:	d001      	beq.n	80013fc <I2C_1_scaner+0x8c>
 80013f8:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 80013fa:	e000      	b.n	80013fe <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 80013fc:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <I2C_1_scaner+0xb4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <I2C_1_scaner+0xb4>)
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <I2C_1_scaner+0xb4>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2bff      	cmp	r3, #255	; 0xff
 8001410:	d1b7      	bne.n	8001382 <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8001412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001416:	f001 fa37 	bl	8002888 <HAL_Delay>
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	2000009c 	.word	0x2000009c
 8001428:	2000009d 	.word	0x2000009d
 800142c:	20000008 	.word	0x20000008
 8001430:	2000000c 	.word	0x2000000c
 8001434:	2000009e 	.word	0x2000009e
 8001438:	20000660 	.word	0x20000660
 800143c:	200000a0 	.word	0x200000a0

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4906      	ldr	r1, [pc, #24]	; (8001474 <__NVIC_EnableIRQ+0x34>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f001 f9a1 	bl	80027c4 <HAL_Init>
//
//  } global_data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f875 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 faa9 	bl	80019dc <MX_GPIO_Init>
  MX_DMA_Init();
 800148a:	f000 fa89 	bl	80019a0 <MX_DMA_Init>
  MX_TIM2_Init();
 800148e:	f000 f9bb 	bl	8001808 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001492:	f000 f8b3 	bl	80015fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001496:	f000 fa05 	bl	80018a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800149a:	f000 fa57 	bl	800194c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800149e:	f000 f8db 	bl	8001658 <MX_SPI2_Init>
  MX_TIM1_Init();
 80014a2:	f000 f90f 	bl	80016c4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80014a6:	f000 fa27 	bl	80018f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



	#if I2C_SCANNER
  	  I2C_1_scaner();
 80014aa:	f7ff ff61 	bl	8001370 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  	  read_T_and_H_SI7021();
 80014ae:	f7ff fd97 	bl	8000fe0 <read_T_and_H_SI7021>
	#endif

	#if OLED
  	  init_oled();
 80014b2:	f000 fc31 	bl	8001d18 <init_oled>
	  //test_oled();
	#endif

  	  HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4829      	ldr	r0, [pc, #164]	; (800155c <main+0xe4>)
 80014b8:	f003 ff9c 	bl	80053f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */



  /////////////  RECEIVE DATA FROM UART 1. FIRST METHOD //////////////////////////////
  HAL_Delay(4000);
 80014bc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80014c0:	f001 f9e2 	bl	8002888 <HAL_Delay>
  // Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
  USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <main+0xe8>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <main+0xe8>)
 80014ca:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80014ce:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ (USART1_IRQn);
 80014d0:	2025      	movs	r0, #37	; 0x25
 80014d2:	f7ff ffb5 	bl	8001440 <__NVIC_EnableIRQ>
  HAL_Delay(100);
 80014d6:	2064      	movs	r0, #100	; 0x64
 80014d8:	f001 f9d6 	bl	8002888 <HAL_Delay>
//	  ssd1306_WriteString(str, Font_7x10, White);
//
//	  ssd1306_UpdateScreen();

  // Init GSM module
  char str[50]={0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fa1a 	bl	800691c <memset>
  memset(str, 0 , sizeof(str));
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2232      	movs	r2, #50	; 0x32
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fa14 	bl	800691c <memset>

  if(init_gsm_module())
 80014f4:	f000 faf4 	bl	8001ae0 <init_gsm_module>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d014      	beq.n	8001528 <main+0xb0>
  {
	  // init OK
	  sprintf(str,"%s", "GSM STATE: READY");
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4a18      	ldr	r2, [pc, #96]	; (8001564 <main+0xec>)
 8001502:	461c      	mov	r4, r3
 8001504:	4615      	mov	r5, r2
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	7023      	strb	r3, [r4, #0]
	  ssd1306_SetCursor(00, 36);
 800150e:	2124      	movs	r1, #36	; 0x24
 8001510:	2000      	movs	r0, #0
 8001512:	f000 fded 	bl	80020f0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_7x10, White);
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <main+0xf0>)
 8001518:	1d38      	adds	r0, r7, #4
 800151a:	2301      	movs	r3, #1
 800151c:	ca06      	ldmia	r2, {r1, r2}
 800151e:	f000 fdc1 	bl	80020a4 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8001522:	f000 fcaf 	bl	8001e84 <ssd1306_UpdateScreen>
 8001526:	e017      	b.n	8001558 <main+0xe0>
  }
  else
  {
	  // GSM didn't init
	  sprintf(str,"%s", "GSM STATE: ERROR !");
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <main+0xf4>)
 800152c:	461c      	mov	r4, r3
 800152e:	4615      	mov	r5, r2
 8001530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	8022      	strh	r2, [r4, #0]
 800153a:	3402      	adds	r4, #2
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	7023      	strb	r3, [r4, #0]
	  ssd1306_SetCursor(00, 36);
 8001540:	2124      	movs	r1, #36	; 0x24
 8001542:	2000      	movs	r0, #0
 8001544:	f000 fdd4 	bl	80020f0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_7x10, White);
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <main+0xf0>)
 800154a:	1d38      	adds	r0, r7, #4
 800154c:	2301      	movs	r3, #1
 800154e:	ca06      	ldmia	r2, {r1, r2}
 8001550:	f000 fda8 	bl	80020a4 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8001554:	f000 fc96 	bl	8001e84 <ssd1306_UpdateScreen>
  }

while (1)
 8001558:	e7fe      	b.n	8001558 <main+0xe0>
 800155a:	bf00      	nop
 800155c:	20000734 	.word	0x20000734
 8001560:	40013800 	.word	0x40013800
 8001564:	08007228 	.word	0x08007228
 8001568:	20000000 	.word	0x20000000
 800156c:	0800723c 	.word	0x0800723c

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	; 0x40
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2228      	movs	r2, #40	; 0x28
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f005 f9cc 	bl	800691c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fa73 	bl	8004aa4 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015c4:	f000 fba2 	bl	8001d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015cc:	2302      	movs	r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2102      	movs	r1, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fcde 	bl	8004fa4 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ee:	f000 fb8d 	bl	8001d0c <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	; 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_I2C1_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_I2C1_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_I2C1_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_I2C1_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C1_Init+0x50>)
 800163a:	f001 fd9d 	bl	8003178 <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 fb62 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000660 	.word	0x20000660
 8001650:	40005400 	.word	0x40005400
 8001654:	000186a0 	.word	0x000186a0

08001658 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_SPI2_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <MX_SPI2_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_SPI2_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI2_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_SPI2_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI2_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI2_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_SPI2_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_SPI2_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_SPI2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_SPI2_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_SPI2_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_SPI2_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_SPI2_Init+0x64>)
 80016aa:	f003 fe17 	bl	80052dc <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016b4:	f000 fb2a 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000584 	.word	0x20000584
 80016c0:	40003800 	.word	0x40003800

080016c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b096      	sub	sp, #88	; 0x58
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2220      	movs	r2, #32
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f005 f90d 	bl	800691c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <MX_TIM1_Init+0x13c>)
 8001704:	4a3f      	ldr	r2, [pc, #252]	; (8001804 <MX_TIM1_Init+0x140>)
 8001706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <MX_TIM1_Init+0x13c>)
 800170a:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 800170e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <MX_TIM1_Init+0x13c>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <MX_TIM1_Init+0x13c>)
 8001718:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800171c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <MX_TIM1_Init+0x13c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <MX_TIM1_Init+0x13c>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <MX_TIM1_Init+0x13c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001730:	4833      	ldr	r0, [pc, #204]	; (8001800 <MX_TIM1_Init+0x13c>)
 8001732:	f003 fe34 	bl	800539e <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800173c:	f000 fae6 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800174a:	4619      	mov	r1, r3
 800174c:	482c      	ldr	r0, [pc, #176]	; (8001800 <MX_TIM1_Init+0x13c>)
 800174e:	f004 f877 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001758:	f000 fad8 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <MX_TIM1_Init+0x13c>)
 800175e:	f003 fe6c 	bl	800543a <HAL_TIM_PWM_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001768:	f000 fad0 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001774:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001778:	4619      	mov	r1, r3
 800177a:	4821      	ldr	r0, [pc, #132]	; (8001800 <MX_TIM1_Init+0x13c>)
 800177c:	f004 fbbc 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001786:	f000 fac1 	bl	8001d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178a:	2360      	movs	r3, #96	; 0x60
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 800178e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_TIM1_Init+0x13c>)
 80017b2:	f003 ff7f 	bl	80056b4 <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80017bc:	f000 faa6 	bl	8001d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <MX_TIM1_Init+0x13c>)
 80017e4:	f004 fbcc 	bl	8005f80 <HAL_TIMEx_ConfigBreakDeadTime>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80017ee:	f000 fa8d 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <MX_TIM1_Init+0x13c>)
 80017f4:	f000 fd88 	bl	8002308 <HAL_TIM_MspPostInit>

}
 80017f8:	bf00      	nop
 80017fa:	3758      	adds	r7, #88	; 0x58
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200006f4 	.word	0x200006f4
 8001804:	40012c00 	.word	0x40012c00

08001808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_TIM2_Init+0x98>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_TIM2_Init+0x98>)
 800182e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_TIM2_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_TIM2_Init+0x98>)
 800183c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_TIM2_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_TIM2_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184e:	4814      	ldr	r0, [pc, #80]	; (80018a0 <MX_TIM2_Init+0x98>)
 8001850:	f003 fda5 	bl	800539e <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800185a:	f000 fa57 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_TIM2_Init+0x98>)
 800186c:	f003 ffe8 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001876:	f000 fa49 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_TIM2_Init+0x98>)
 8001888:	f004 fb36 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001892:	f000 fa3b 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000734 	.word	0x20000734

080018a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_USART1_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018dc:	f004 fbb3 	bl	8006046 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f000 fa11 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200006b4 	.word	0x200006b4
 80018f4:	40013800 	.word	0x40013800

080018f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <MX_USART2_UART_Init+0x50>)
 8001900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001930:	f004 fb89 	bl	8006046 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193a:	f000 f9e7 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000774 	.word	0x20000774
 8001948:	40004400 	.word	0x40004400

0800194c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_USART3_UART_Init+0x50>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001984:	f004 fb5f 	bl	8006046 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800198e:	f000 f9bd 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000620 	.word	0x20000620
 800199c:	40004800 	.word	0x40004800

080019a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_DMA_Init+0x38>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <MX_DMA_Init+0x38>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_DMA_Init+0x38>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	200d      	movs	r0, #13
 80019c4:	f001 f859 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019c8:	200d      	movs	r0, #13
 80019ca:	f001 f872 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <MX_GPIO_Init+0xd0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a2d      	ldr	r2, [pc, #180]	; (8001aac <MX_GPIO_Init+0xd0>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <MX_GPIO_Init+0xd0>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a0e:	f043 0320 	orr.w	r3, r3, #32
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_GPIO_Init+0xd0>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a56:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <MX_GPIO_Init+0xd4>)
 8001a58:	f001 fb76 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_M25Q_GPIO_Port, CS_M25Q_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	4814      	ldr	r0, [pc, #80]	; (8001ab4 <MX_GPIO_Init+0xd8>)
 8001a64:	f001 fb70 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <MX_GPIO_Init+0xd4>)
 8001a82:	f001 fa07 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_GPIO_Init+0xd8>)
 8001aa0:	f001 f9f8 	bl	8002e94 <HAL_GPIO_Init>

}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac8:	d102      	bne.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
        }
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200000e2 	.word	0x200000e2

08001ae0 <init_gsm_module>:
//
//}


int init_gsm_module(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b090      	sub	sp, #64	; 0x40
 8001ae4:	af00      	add	r7, sp, #0
//	  strcpy(buffer_output_comand, command_4);
//	  HAL_UART_Transmit(&huart1 , (uint8_t *)buffer_output_comand, strlen(buffer_output_comand), 0xFFFF);              // Send data into GSM module

	///////////////////////////////////////////////////////////////////////////////////

	char turn_off_echo[]="ATE 0\r\n";    			// Turn OFF echo
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <init_gsm_module+0x200>)
 8001ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af0:	e883 0003 	stmia.w	r3, {r0, r1}
	char AT[]="AT\r\n";                           // Simple command
 8001af4:	4a7b      	ldr	r2, [pc, #492]	; (8001ce4 <init_gsm_module+0x204>)
 8001af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001afe:	6018      	str	r0, [r3, #0]
 8001b00:	3304      	adds	r3, #4
 8001b02:	7019      	strb	r1, [r3, #0]
	char AT_CSQ[]="AT+CSQ\r\n";                   // signal reception quality
 8001b04:	4a78      	ldr	r2, [pc, #480]	; (8001ce8 <init_gsm_module+0x208>)
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b0c:	c303      	stmia	r3!, {r0, r1}
 8001b0e:	701a      	strb	r2, [r3, #0]
	char CCID[] = "AT+CCID\r\n";
 8001b10:	4a76      	ldr	r2, [pc, #472]	; (8001cec <init_gsm_module+0x20c>)
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b18:	c303      	stmia	r3!, {r0, r1}
 8001b1a:	801a      	strh	r2, [r3, #0]

	char AT_CREG[] = "AT+CREG?\n\r";              // Registration in network
 8001b1c:	4a74      	ldr	r2, [pc, #464]	; (8001cf0 <init_gsm_module+0x210>)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b22:	c303      	stmia	r3!, {r0, r1}
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	3302      	adds	r3, #2
 8001b28:	0c12      	lsrs	r2, r2, #16
 8001b2a:	701a      	strb	r2, [r3, #0]


	uint8_t answer_1 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t answer_2 = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t answer_3 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t answer_4 = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t answer_5 = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	// 1. Send command " Turn off echo" ///////////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 100);
 8001b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fafe 	bl	8000150 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	4865      	ldr	r0, [pc, #404]	; (8001cf4 <init_gsm_module+0x214>)
 8001b60:	f004 fabe 	bl	80060e0 <HAL_UART_Transmit>

    // Waite for answer
	while (ansver_flag != 1)
 8001b64:	bf00      	nop
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <init_gsm_module+0x218>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d1fb      	bne.n	8001b66 <init_gsm_module+0x86>
	{
		// waite for answer
	}
		if(ansver_flag ==1)
 8001b6e:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <init_gsm_module+0x218>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d111      	bne.n	8001b9a <init_gsm_module+0xba>
		{
		 	if (strstr(GSM_RX_buffer, "OK"))
 8001b76:	4961      	ldr	r1, [pc, #388]	; (8001cfc <init_gsm_module+0x21c>)
 8001b78:	4861      	ldr	r0, [pc, #388]	; (8001d00 <init_gsm_module+0x220>)
 8001b7a:	f004 feff 	bl	800697c <strstr>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <init_gsm_module+0xba>
		 	{
		 	  	memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001b84:	223c      	movs	r2, #60	; 0x3c
 8001b86:	2100      	movs	r1, #0
 8001b88:	485d      	ldr	r0, [pc, #372]	; (8001d00 <init_gsm_module+0x220>)
 8001b8a:	f004 fec7 	bl	800691c <memset>
		 	  	answer_1 = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		 	  	ansver_flag = 0;
 8001b94:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <init_gsm_module+0x218>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
		 	}
		 }

    HAL_Delay(100);
 8001b9a:	2064      	movs	r0, #100	; 0x64
 8001b9c:	f000 fe74 	bl	8002888 <HAL_Delay>
    ////////////////////////////////////////////////////////////////

	// 2. Send command "signal reception quality" //////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 100);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fad3 	bl	8000150 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	f107 011c 	add.w	r1, r7, #28
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	484f      	ldr	r0, [pc, #316]	; (8001cf4 <init_gsm_module+0x214>)
 8001bb6:	f004 fa93 	bl	80060e0 <HAL_UART_Transmit>

	while (ansver_flag != 1)
 8001bba:	bf00      	nop
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <init_gsm_module+0x218>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d1fb      	bne.n	8001bbc <init_gsm_module+0xdc>
	{
		// waite for answer
	}
		if(ansver_flag ==1)
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <init_gsm_module+0x218>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d111      	bne.n	8001bf0 <init_gsm_module+0x110>
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
 8001bcc:	494d      	ldr	r1, [pc, #308]	; (8001d04 <init_gsm_module+0x224>)
 8001bce:	484c      	ldr	r0, [pc, #304]	; (8001d00 <init_gsm_module+0x220>)
 8001bd0:	f004 fed4 	bl	800697c <strstr>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00a      	beq.n	8001bf0 <init_gsm_module+0x110>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001bda:	223c      	movs	r2, #60	; 0x3c
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4848      	ldr	r0, [pc, #288]	; (8001d00 <init_gsm_module+0x220>)
 8001be0:	f004 fe9c 	bl	800691c <memset>
				answer_2 = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				ansver_flag = 0;
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <init_gsm_module+0x218>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
			}
		}

	while (ansver_flag != 1)                     // Waite for answer "OK"
 8001bf0:	bf00      	nop
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <init_gsm_module+0x218>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d1fb      	bne.n	8001bf2 <init_gsm_module+0x112>
	{
		// waite for answer
	}
	if(ansver_flag ==1)
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <init_gsm_module+0x218>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d111      	bne.n	8001c26 <init_gsm_module+0x146>
	{
		if (strstr(GSM_RX_buffer, "OK"))
 8001c02:	493e      	ldr	r1, [pc, #248]	; (8001cfc <init_gsm_module+0x21c>)
 8001c04:	483e      	ldr	r0, [pc, #248]	; (8001d00 <init_gsm_module+0x220>)
 8001c06:	f004 feb9 	bl	800697c <strstr>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <init_gsm_module+0x146>
		{
			// answer "+CSQ: 23,99"
			memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001c10:	223c      	movs	r2, #60	; 0x3c
 8001c12:	2100      	movs	r1, #0
 8001c14:	483a      	ldr	r0, [pc, #232]	; (8001d00 <init_gsm_module+0x220>)
 8001c16:	f004 fe81 	bl	800691c <memset>
			answer_2 = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			ansver_flag = 0;
 8001c20:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <init_gsm_module+0x218>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_Delay(200);
 8001c26:	20c8      	movs	r0, #200	; 0xc8
 8001c28:	f000 fe2e 	bl	8002888 <HAL_Delay>
	//////////////////////////////////////////////////////////////////


	// 3. Send command "signal reception quality" /////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 100);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fa8d 	bl	8000150 <strlen>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	f107 0110 	add.w	r1, r7, #16
 8001c3e:	2364      	movs	r3, #100	; 0x64
 8001c40:	482c      	ldr	r0, [pc, #176]	; (8001cf4 <init_gsm_module+0x214>)
 8001c42:	f004 fa4d 	bl	80060e0 <HAL_UART_Transmit>

	while (ansver_flag != 1)
 8001c46:	bf00      	nop
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <init_gsm_module+0x218>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d1fb      	bne.n	8001c48 <init_gsm_module+0x168>
	{
		// waite for answer
	}
		if(ansver_flag ==1)
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <init_gsm_module+0x218>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d111      	bne.n	8001c7c <init_gsm_module+0x19c>
		{
			if (strstr(GSM_RX_buffer, "89380"))
 8001c58:	492b      	ldr	r1, [pc, #172]	; (8001d08 <init_gsm_module+0x228>)
 8001c5a:	4829      	ldr	r0, [pc, #164]	; (8001d00 <init_gsm_module+0x220>)
 8001c5c:	f004 fe8e 	bl	800697c <strstr>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <init_gsm_module+0x19c>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001c66:	223c      	movs	r2, #60	; 0x3c
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4825      	ldr	r0, [pc, #148]	; (8001d00 <init_gsm_module+0x220>)
 8001c6c:	f004 fe56 	bl	800691c <memset>
				answer_3 = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				ansver_flag = 0;
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <init_gsm_module+0x218>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
			}
		}

	while (ansver_flag != 1)                    // Waite for answer "OK"
 8001c7c:	bf00      	nop
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <init_gsm_module+0x218>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d1fb      	bne.n	8001c7e <init_gsm_module+0x19e>
	{
				// waite for answer
	}
	if(ansver_flag ==1)
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <init_gsm_module+0x218>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d111      	bne.n	8001cb2 <init_gsm_module+0x1d2>
	{
		if (strstr(GSM_RX_buffer, "OK"))
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <init_gsm_module+0x21c>)
 8001c90:	481b      	ldr	r0, [pc, #108]	; (8001d00 <init_gsm_module+0x220>)
 8001c92:	f004 fe73 	bl	800697c <strstr>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <init_gsm_module+0x1d2>
		{
			// answer "+CSQ: 23,99"
			memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001c9c:	223c      	movs	r2, #60	; 0x3c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <init_gsm_module+0x220>)
 8001ca2:	f004 fe3b 	bl	800691c <memset>
			answer_3 = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			ansver_flag = 0;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <init_gsm_module+0x218>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_Delay(200);
 8001cb2:	20c8      	movs	r0, #200	; 0xc8
 8001cb4:	f000 fde8 	bl	8002888 <HAL_Delay>
//	}
//	HAL_Delay(100);
	///////////////////////////////////////////////////////////////////


	if(answer_1 && answer_2 && answer_3 )
 8001cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <init_gsm_module+0x1f4>
 8001cc0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <init_gsm_module+0x1f4>
 8001cc8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <init_gsm_module+0x1f4>
	{
		return 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <init_gsm_module+0x1f6>
	}
	else
	{
		return 0;
 8001cd4:	2300      	movs	r3, #0
	}


}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3740      	adds	r7, #64	; 0x40
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	08007264 	.word	0x08007264
 8001ce4:	0800726c 	.word	0x0800726c
 8001ce8:	08007274 	.word	0x08007274
 8001cec:	08007280 	.word	0x08007280
 8001cf0:	0800728c 	.word	0x0800728c
 8001cf4:	200006b4 	.word	0x200006b4
 8001cf8:	200000e0 	.word	0x200000e0
 8001cfc:	08007250 	.word	0x08007250
 8001d00:	200000a4 	.word	0x200000a4
 8001d04:	08007254 	.word	0x08007254
 8001d08:	0800725c 	.word	0x0800725c

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <init_oled>:

extern TIM_HandleTypeDef htim1;

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001d1c:	f000 f824 	bl	8001d68 <ssd1306_Init>
	HAL_Delay(500);
 8001d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d24:	f000 fdb0 	bl	8002888 <HAL_Delay>
	ssd1306_Fill(Black);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 f889 	bl	8001e40 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001d2e:	f000 f8a9 	bl	8001e84 <ssd1306_UpdateScreen>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001d42:	230a      	movs	r3, #10
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2301      	movs	r3, #1
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	2200      	movs	r2, #0
 8001d52:	2178      	movs	r1, #120	; 0x78
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <ssd1306_WriteCommand+0x2c>)
 8001d56:	f001 fe9f 	bl	8003a98 <HAL_I2C_Mem_Write>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000660 	.word	0x20000660

08001d68 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	f000 fd8b 	bl	8002888 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001d72:	20ae      	movs	r0, #174	; 0xae
 8001d74:	f7ff ffe0 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001d78:	2020      	movs	r0, #32
 8001d7a:	f7ff ffdd 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f7ff ffda 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d84:	20b0      	movs	r0, #176	; 0xb0
 8001d86:	f7ff ffd7 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d8a:	20c8      	movs	r0, #200	; 0xc8
 8001d8c:	f7ff ffd4 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff ffd1 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001d96:	2010      	movs	r0, #16
 8001d98:	f7ff ffce 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001d9c:	2040      	movs	r0, #64	; 0x40
 8001d9e:	f7ff ffcb 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001da2:	2081      	movs	r0, #129	; 0x81
 8001da4:	f7ff ffc8 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001da8:	20ff      	movs	r0, #255	; 0xff
 8001daa:	f7ff ffc5 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001dae:	20a1      	movs	r0, #161	; 0xa1
 8001db0:	f7ff ffc2 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001db4:	20a6      	movs	r0, #166	; 0xa6
 8001db6:	f7ff ffbf 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001dba:	20a8      	movs	r0, #168	; 0xa8
 8001dbc:	f7ff ffbc 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001dc0:	203f      	movs	r0, #63	; 0x3f
 8001dc2:	f7ff ffb9 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dc6:	20a4      	movs	r0, #164	; 0xa4
 8001dc8:	f7ff ffb6 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001dcc:	20d3      	movs	r0, #211	; 0xd3
 8001dce:	f7ff ffb3 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff ffb0 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001dd8:	20d5      	movs	r0, #213	; 0xd5
 8001dda:	f7ff ffad 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001dde:	20f0      	movs	r0, #240	; 0xf0
 8001de0:	f7ff ffaa 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001de4:	20d9      	movs	r0, #217	; 0xd9
 8001de6:	f7ff ffa7 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001dea:	2022      	movs	r0, #34	; 0x22
 8001dec:	f7ff ffa4 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001df0:	20da      	movs	r0, #218	; 0xda
 8001df2:	f7ff ffa1 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001df6:	2012      	movs	r0, #18
 8001df8:	f7ff ff9e 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001dfc:	20db      	movs	r0, #219	; 0xdb
 8001dfe:	f7ff ff9b 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e02:	2020      	movs	r0, #32
 8001e04:	f7ff ff98 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e08:	208d      	movs	r0, #141	; 0x8d
 8001e0a:	f7ff ff95 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001e0e:	2014      	movs	r0, #20
 8001e10:	f7ff ff92 	bl	8001d38 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001e14:	20af      	movs	r0, #175	; 0xaf
 8001e16:	f7ff ff8f 	bl	8001d38 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f810 	bl	8001e40 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001e20:	f000 f830 	bl	8001e84 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <ssd1306_Init+0xd4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <ssd1306_Init+0xd4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <ssd1306_Init+0xd4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200004e4 	.word	0x200004e4

08001e40 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e00d      	b.n	8001e6c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <ssd1306_Fill+0x1a>
 8001e56:	2100      	movs	r1, #0
 8001e58:	e000      	b.n	8001e5c <ssd1306_Fill+0x1c>
 8001e5a:	21ff      	movs	r1, #255	; 0xff
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <ssd1306_Fill+0x40>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	460a      	mov	r2, r1
 8001e64:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d3ed      	bcc.n	8001e50 <ssd1306_Fill+0x10>
	}
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200000e4 	.word	0x200000e4

08001e84 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	e01d      	b.n	8001ecc <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	3b50      	subs	r3, #80	; 0x50
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff4e 	bl	8001d38 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff ff4b 	bl	8001d38 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001ea2:	2010      	movs	r0, #16
 8001ea4:	f7ff ff48 	bl	8001d38 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <ssd1306_UpdateScreen+0x58>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	2264      	movs	r2, #100	; 0x64
 8001eb2:	9202      	str	r2, [sp, #8]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	2178      	movs	r1, #120	; 0x78
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <ssd1306_UpdateScreen+0x5c>)
 8001ec2:	f001 fde9 	bl	8003a98 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b07      	cmp	r3, #7
 8001ed0:	d9de      	bls.n	8001e90 <ssd1306_UpdateScreen+0xc>
	}
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200000e4 	.word	0x200000e4
 8001ee0:	20000660 	.word	0x20000660

08001ee4 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	71bb      	strb	r3, [r7, #6]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db48      	blt.n	8001f90 <ssd1306_DrawPixel+0xac>
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	2b3f      	cmp	r3, #63	; 0x3f
 8001f02:	d845      	bhi.n	8001f90 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <ssd1306_DrawPixel+0xb8>)
 8001f06:	791b      	ldrb	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d11a      	bne.n	8001f56 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	b2d8      	uxtb	r0, r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	01db      	lsls	r3, r3, #7
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <ssd1306_DrawPixel+0xbc>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	b25a      	sxtb	r2, r3
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b259      	sxtb	r1, r3
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b2c9      	uxtb	r1, r1
 8001f50:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <ssd1306_DrawPixel+0xbc>)
 8001f52:	54d1      	strb	r1, [r2, r3]
 8001f54:	e01d      	b.n	8001f92 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	b2d8      	uxtb	r0, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	01db      	lsls	r3, r3, #7
 8001f62:	4413      	add	r3, r2
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <ssd1306_DrawPixel+0xbc>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	b25a      	sxtb	r2, r3
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b259      	sxtb	r1, r3
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	4603      	mov	r3, r0
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4413      	add	r3, r2
 8001f88:	b2c9      	uxtb	r1, r1
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <ssd1306_DrawPixel+0xbc>)
 8001f8c:	54d1      	strb	r1, [r2, r3]
 8001f8e:	e000      	b.n	8001f92 <ssd1306_DrawPixel+0xae>
		return;
 8001f90:	bf00      	nop
	}
}
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200004e4 	.word	0x200004e4
 8001fa0:	200000e4 	.word	0x200000e4

08001fa4 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4604      	mov	r4, r0
 8001fac:	1d38      	adds	r0, r7, #4
 8001fae:	e880 0006 	stmia.w	r0, {r1, r2}
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	793b      	ldrb	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc8:	dc06      	bgt.n	8001fd8 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8001fcc:	885b      	ldrh	r3, [r3, #2]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	797b      	ldrb	r3, [r7, #5]
 8001fd2:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001fd4:	2b3f      	cmp	r3, #63	; 0x3f
 8001fd6:	dd01      	ble.n	8001fdc <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e05d      	b.n	8002098 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	e04c      	b.n	800207c <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	3b20      	subs	r3, #32
 8001fe8:	7979      	ldrb	r1, [r7, #5]
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	e034      	b.n	800206c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4413      	add	r3, r2
 800201e:	b2d8      	uxtb	r0, r3
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8002022:	885b      	ldrh	r3, [r3, #2]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4413      	add	r3, r2
 800202c:	b2db      	uxtb	r3, r3
 800202e:	7bba      	ldrb	r2, [r7, #14]
 8002030:	4619      	mov	r1, r3
 8002032:	f7ff ff57 	bl	8001ee4 <ssd1306_DrawPixel>
 8002036:	e016      	b.n	8002066 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4413      	add	r3, r2
 8002044:	b2d8      	uxtb	r0, r3
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8002048:	885b      	ldrh	r3, [r3, #2]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4413      	add	r3, r2
 8002052:	b2d9      	uxtb	r1, r3
 8002054:	7bbb      	ldrb	r3, [r7, #14]
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	f7ff ff3f 	bl	8001ee4 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	3301      	adds	r3, #1
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	4293      	cmp	r3, r2
 8002074:	d3c5      	bcc.n	8002002 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	797b      	ldrb	r3, [r7, #5]
 800207e:	461a      	mov	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4293      	cmp	r3, r2
 8002084:	d3ad      	bcc.n	8001fe2 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8002088:	881a      	ldrh	r2, [r3, #0]
 800208a:	793b      	ldrb	r3, [r7, #4]
 800208c:	b29b      	uxth	r3, r3
 800208e:	4413      	add	r3, r2
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <ssd1306_WriteChar+0xfc>)
 8002094:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3724      	adds	r7, #36	; 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	200004e4 	.word	0x200004e4

080020a4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	1d38      	adds	r0, r7, #4
 80020ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80020b2:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 80020b4:	e012      	b.n	80020dc <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	7818      	ldrb	r0, [r3, #0]
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	1d3a      	adds	r2, r7, #4
 80020be:	ca06      	ldmia	r2, {r1, r2}
 80020c0:	f7ff ff70 	bl	8001fa4 <ssd1306_WriteChar>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d002      	beq.n	80020d6 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	e008      	b.n	80020e8 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
	while (*str) 
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e8      	bne.n	80020b6 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	781b      	ldrb	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <ssd1306_SetCursor+0x2c>)
 8002106:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <ssd1306_SetCursor+0x2c>)
 800210e:	805a      	strh	r2, [r3, #2]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200004e4 	.word	0x200004e4

08002120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_MspInit+0x5c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_MspInit+0x5c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6193      	str	r3, [r2, #24]
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_MspInit+0x5c>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_MspInit+0x5c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_MspInit+0x5c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_MspInit+0x5c>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_MspInit+0x60>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_MspInit+0x60>)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000

08002184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_I2C_MspInit+0x70>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d123      	bne.n	80021ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_I2C_MspInit+0x74>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_I2C_MspInit+0x74>)
 80021aa:	f043 0308 	orr.w	r3, r3, #8
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_I2C_MspInit+0x74>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021bc:	23c0      	movs	r3, #192	; 0xc0
 80021be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c0:	2312      	movs	r3, #18
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	4619      	mov	r1, r3
 80021ce:	480b      	ldr	r0, [pc, #44]	; (80021fc <HAL_I2C_MspInit+0x78>)
 80021d0:	f000 fe60 	bl	8002e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_I2C_MspInit+0x74>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_I2C_MspInit+0x74>)
 80021da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021de:	61d3      	str	r3, [r2, #28]
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_I2C_MspInit+0x74>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40005400 	.word	0x40005400
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010c00 	.word	0x40010c00

08002200 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_SPI_MspInit+0x8c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d131      	bne.n	8002284 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_SPI_MspInit+0x90>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_SPI_MspInit+0x90>)
 8002226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222a:	61d3      	str	r3, [r2, #28]
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_SPI_MspInit+0x90>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_SPI_MspInit+0x90>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_SPI_MspInit+0x90>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_SPI_MspInit+0x90>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002250:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <HAL_SPI_MspInit+0x94>)
 8002266:	f000 fe15 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800226a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800226e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	4619      	mov	r1, r3
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <HAL_SPI_MspInit+0x94>)
 8002280:	f000 fe08 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40003800 	.word	0x40003800
 8002290:	40021000 	.word	0x40021000
 8002294:	40010c00 	.word	0x40010c00

08002298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a16      	ldr	r2, [pc, #88]	; (8002300 <HAL_TIM_Base_MspInit+0x68>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10c      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_TIM_Base_MspInit+0x6c>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <HAL_TIM_Base_MspInit+0x6c>)
 80022b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b4:	6193      	str	r3, [r2, #24]
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_TIM_Base_MspInit+0x6c>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022c2:	e018      	b.n	80022f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d113      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_TIM_Base_MspInit+0x6c>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0x6c>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	61d3      	str	r3, [r2, #28]
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_TIM_Base_MspInit+0x6c>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	201c      	movs	r0, #28
 80022ec:	f000 fbc5 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f0:	201c      	movs	r0, #28
 80022f2:	f000 fbde 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_TIM_MspPostInit+0x5c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d118      	bne.n	800235a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_TIM_MspPostInit+0x60>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <HAL_TIM_MspPostInit+0x60>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_TIM_MspPostInit+0x60>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2302      	movs	r3, #2
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_TIM_MspPostInit+0x64>)
 8002356:	f000 fd9d 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40010800 	.word	0x40010800

08002370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a73      	ldr	r2, [pc, #460]	; (8002558 <HAL_UART_MspInit+0x1e8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d13a      	bne.n	8002406 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002390:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_UART_MspInit+0x1ec>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a71      	ldr	r2, [pc, #452]	; (800255c <HAL_UART_MspInit+0x1ec>)
 8002396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b6f      	ldr	r3, [pc, #444]	; (800255c <HAL_UART_MspInit+0x1ec>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b6c      	ldr	r3, [pc, #432]	; (800255c <HAL_UART_MspInit+0x1ec>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a6b      	ldr	r2, [pc, #428]	; (800255c <HAL_UART_MspInit+0x1ec>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b69      	ldr	r3, [pc, #420]	; (800255c <HAL_UART_MspInit+0x1ec>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	4619      	mov	r1, r3
 80023d4:	4862      	ldr	r0, [pc, #392]	; (8002560 <HAL_UART_MspInit+0x1f0>)
 80023d6:	f000 fd5d 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0320 	add.w	r3, r7, #32
 80023ec:	4619      	mov	r1, r3
 80023ee:	485c      	ldr	r0, [pc, #368]	; (8002560 <HAL_UART_MspInit+0x1f0>)
 80023f0:	f000 fd50 	bl	8002e94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2025      	movs	r0, #37	; 0x25
 80023fa:	f000 fb3e 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023fe:	2025      	movs	r0, #37	; 0x25
 8002400:	f000 fb57 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002404:	e0a3      	b.n	800254e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a56      	ldr	r2, [pc, #344]	; (8002564 <HAL_UART_MspInit+0x1f4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d138      	bne.n	8002482 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002410:	4b52      	ldr	r3, [pc, #328]	; (800255c <HAL_UART_MspInit+0x1ec>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_UART_MspInit+0x1ec>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241a:	61d3      	str	r3, [r2, #28]
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_UART_MspInit+0x1ec>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b4c      	ldr	r3, [pc, #304]	; (800255c <HAL_UART_MspInit+0x1ec>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_UART_MspInit+0x1ec>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6193      	str	r3, [r2, #24]
 8002434:	4b49      	ldr	r3, [pc, #292]	; (800255c <HAL_UART_MspInit+0x1ec>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002440:	2304      	movs	r3, #4
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0320 	add.w	r3, r7, #32
 8002450:	4619      	mov	r1, r3
 8002452:	4843      	ldr	r0, [pc, #268]	; (8002560 <HAL_UART_MspInit+0x1f0>)
 8002454:	f000 fd1e 	bl	8002e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 0320 	add.w	r3, r7, #32
 8002468:	4619      	mov	r1, r3
 800246a:	483d      	ldr	r0, [pc, #244]	; (8002560 <HAL_UART_MspInit+0x1f0>)
 800246c:	f000 fd12 	bl	8002e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2026      	movs	r0, #38	; 0x26
 8002476:	f000 fb00 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800247a:	2026      	movs	r0, #38	; 0x26
 800247c:	f000 fb19 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 8002480:	e065      	b.n	800254e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_UART_MspInit+0x1f8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d160      	bne.n	800254e <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_UART_MspInit+0x1ec>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_UART_MspInit+0x1ec>)
 8002492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002496:	61d3      	str	r3, [r2, #28]
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_UART_MspInit+0x1ec>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_UART_MspInit+0x1ec>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a2c      	ldr	r2, [pc, #176]	; (800255c <HAL_UART_MspInit+0x1ec>)
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_UART_MspInit+0x1ec>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	4619      	mov	r1, r3
 80024d0:	4826      	ldr	r0, [pc, #152]	; (800256c <HAL_UART_MspInit+0x1fc>)
 80024d2:	f000 fcdf 	bl	8002e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	4619      	mov	r1, r3
 80024ea:	4820      	ldr	r0, [pc, #128]	; (800256c <HAL_UART_MspInit+0x1fc>)
 80024ec:	f000 fcd2 	bl	8002e94 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_UART_MspInit+0x200>)
 80024f2:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_UART_MspInit+0x204>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_UART_MspInit+0x200>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_UART_MspInit+0x200>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_UART_MspInit+0x200>)
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_UART_MspInit+0x200>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_UART_MspInit+0x200>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_UART_MspInit+0x200>)
 8002516:	2220      	movs	r2, #32
 8002518:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_UART_MspInit+0x200>)
 800251c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002520:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002522:	4813      	ldr	r0, [pc, #76]	; (8002570 <HAL_UART_MspInit+0x200>)
 8002524:	f000 fae0 	bl	8002ae8 <HAL_DMA_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800252e:	f7ff fbed 	bl	8001d0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_UART_MspInit+0x200>)
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_UART_MspInit+0x200>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	2027      	movs	r0, #39	; 0x27
 8002544:	f000 fa99 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002548:	2027      	movs	r0, #39	; 0x27
 800254a:	f000 fab2 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3730      	adds	r7, #48	; 0x30
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40013800 	.word	0x40013800
 800255c:	40021000 	.word	0x40021000
 8002560:	40010800 	.word	0x40010800
 8002564:	40004400 	.word	0x40004400
 8002568:	40004800 	.word	0x40004800
 800256c:	40010c00 	.word	0x40010c00
 8002570:	200005dc 	.word	0x200005dc
 8002574:	40020030 	.word	0x40020030

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <HardFault_Handler+0x4>

0800258a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <MemManage_Handler+0x4>

08002590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <BusFault_Handler+0x4>

08002596 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <UsageFault_Handler+0x4>

0800259c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c4:	f000 f944 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Channel3_IRQHandler+0x10>)
 80025d2:	f000 fb59 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200005dc 	.word	0x200005dc

080025e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <TIM2_IRQHandler+0x10>)
 80025e6:	f002 ff5c 	bl	80054a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000734 	.word	0x20000734

080025f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
	/* Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	// Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <USART1_IRQHandler+0x70>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2b0d      	cmp	r3, #13
 8002604:	d013      	beq.n	800262e <USART1_IRQHandler+0x3a>
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b0a      	cmp	r3, #10
 800260a:	d010      	beq.n	800262e <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <USART1_IRQHandler+0x74>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d920      	bls.n	8002656 <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <USART1_IRQHandler+0x78>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <USART1_IRQHandler+0x7c>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <USART1_IRQHandler+0x78>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <USART1_IRQHandler+0x78>)
 800262a:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 800262c:	e013      	b.n	8002656 <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <USART1_IRQHandler+0x78>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <USART1_IRQHandler+0x78>)
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <USART1_IRQHandler+0x80>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e002      	b.n	800264a <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <USART1_IRQHandler+0x78>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <USART1_IRQHandler+0x74>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <USART1_IRQHandler+0x74>)
 8002654:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002656:	4808      	ldr	r0, [pc, #32]	; (8002678 <USART1_IRQHandler+0x84>)
 8002658:	f003 fddc 	bl	8006214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40013800 	.word	0x40013800
 8002668:	200000e1 	.word	0x200000e1
 800266c:	200004ea 	.word	0x200004ea
 8002670:	200000a4 	.word	0x200000a4
 8002674:	200000e0 	.word	0x200000e0
 8002678:	200006b4 	.word	0x200006b4

0800267c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <USART2_IRQHandler+0x10>)
 8002682:	f003 fdc7 	bl	8006214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000774 	.word	0x20000774

08002690 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <USART3_IRQHandler+0x10>)
 8002696:	f003 fdbd 	bl	8006214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000620 	.word	0x20000620

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f004 f8f8 	bl	80068c8 <__errno>
 80026d8:	4602      	mov	r2, r0
 80026da:	230c      	movs	r3, #12
 80026dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20005000 	.word	0x20005000
 8002704:	00000400 	.word	0x00000400
 8002708:	200004ec 	.word	0x200004ec
 800270c:	200007c0 	.word	0x200007c0

08002710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002714:	4b15      	ldr	r3, [pc, #84]	; (800276c <SystemInit+0x5c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <SystemInit+0x5c>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <SystemInit+0x5c>)
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4911      	ldr	r1, [pc, #68]	; (800276c <SystemInit+0x5c>)
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <SystemInit+0x60>)
 8002728:	4013      	ands	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <SystemInit+0x5c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <SystemInit+0x5c>)
 8002732:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <SystemInit+0x5c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SystemInit+0x5c>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <SystemInit+0x5c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <SystemInit+0x5c>)
 800274e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002752:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SystemInit+0x5c>)
 8002756:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800275a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SystemInit+0x64>)
 800275e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002762:	609a      	str	r2, [r3, #8]
#endif 
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40021000 	.word	0x40021000
 8002770:	f8ff0000 	.word	0xf8ff0000
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002778:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800277a:	e003      	b.n	8002784 <LoopCopyDataInit>

0800277c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800277e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002780:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002782:	3104      	adds	r1, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002784:	480a      	ldr	r0, [pc, #40]	; (80027b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002788:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800278a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800278c:	d3f6      	bcc.n	800277c <CopyDataInit>
  ldr r2, =_sbss
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002790:	e002      	b.n	8002798 <LoopFillZerobss>

08002792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002794:	f842 3b04 	str.w	r3, [r2], #4

08002798 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800279a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800279c:	d3f9      	bcc.n	8002792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800279e:	f7ff ffb7 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a2:	f004 f897 	bl	80068d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a6:	f7fe fe67 	bl	8001478 <main>
  bx lr
 80027aa:	4770      	bx	lr
  ldr r3, =_sidata
 80027ac:	08007a6c 	.word	0x08007a6c
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027b4:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80027b8:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80027bc:	200007bc 	.word	0x200007bc

080027c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC1_2_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x28>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x28>)
 80027ce:	f043 0310 	orr.w	r3, r3, #16
 80027d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f945 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fc9e 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f95d 	bl	8002ace <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282c:	f000 f925 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000010 	.word	0x20000010
 8002848:	20000018 	.word	0x20000018
 800284c:	20000014 	.word	0x20000014

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_IncTick+0x20>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000018 	.word	0x20000018
 8002870:	200007b4 	.word	0x200007b4

08002874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	200007b4 	.word	0x200007b4

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_Delay+0x40>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000018 	.word	0x20000018

080028cc <__NVIC_SetPriorityGrouping>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4906      	ldr	r1, [pc, #24]	; (8002964 <__NVIC_EnableIRQ+0x34>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a44:	f7ff ff90 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff2d 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff42 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff90 	bl	80029bc <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5f 	bl	8002968 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff35 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e043      	b.n	8002b86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_DMA_Init+0xa8>)
 8002b06:	4413      	add	r3, r2
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_DMA_Init+0xac>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	009a      	lsls	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <HAL_DMA_Init+0xb0>)
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	bffdfff8 	.word	0xbffdfff8
 8002b94:	cccccccd 	.word	0xcccccccd
 8002b98:	40020000 	.word	0x40020000

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d005      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	e051      	b.n	8002c62 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 020e 	bic.w	r2, r2, #14
 8002bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_DMA_Abort_IT+0xd0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d029      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xa0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a20      	ldr	r2, [pc, #128]	; (8002c70 <HAL_DMA_Abort_IT+0xd4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d022      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x9c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_DMA_Abort_IT+0xd8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d01a      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x96>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_DMA_Abort_IT+0xdc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d012      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x90>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_DMA_Abort_IT+0xe0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00a      	beq.n	8002c26 <HAL_DMA_Abort_IT+0x8a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_DMA_Abort_IT+0xe4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d102      	bne.n	8002c20 <HAL_DMA_Abort_IT+0x84>
 8002c1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c1e:	e00e      	b.n	8002c3e <HAL_DMA_Abort_IT+0xa2>
 8002c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c24:	e00b      	b.n	8002c3e <HAL_DMA_Abort_IT+0xa2>
 8002c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c2a:	e008      	b.n	8002c3e <HAL_DMA_Abort_IT+0xa2>
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	e005      	b.n	8002c3e <HAL_DMA_Abort_IT+0xa2>
 8002c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c36:	e002      	b.n	8002c3e <HAL_DMA_Abort_IT+0xa2>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	e000      	b.n	8002c3e <HAL_DMA_Abort_IT+0xa2>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_DMA_Abort_IT+0xe8>)
 8002c40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    } 
  }
  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40020008 	.word	0x40020008
 8002c70:	4002001c 	.word	0x4002001c
 8002c74:	40020030 	.word	0x40020030
 8002c78:	40020044 	.word	0x40020044
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	4002006c 	.word	0x4002006c
 8002c84:	40020000 	.word	0x40020000

08002c88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d04f      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xc8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d04a      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a66      	ldr	r2, [pc, #408]	; (8002e78 <HAL_DMA_IRQHandler+0x1f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d029      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xae>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <HAL_DMA_IRQHandler+0x1f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xaa>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a63      	ldr	r2, [pc, #396]	; (8002e80 <HAL_DMA_IRQHandler+0x1f8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01a      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xa4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a62      	ldr	r2, [pc, #392]	; (8002e84 <HAL_DMA_IRQHandler+0x1fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d012      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x9e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a60      	ldr	r2, [pc, #384]	; (8002e88 <HAL_DMA_IRQHandler+0x200>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00a      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x98>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5f      	ldr	r2, [pc, #380]	; (8002e8c <HAL_DMA_IRQHandler+0x204>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_DMA_IRQHandler+0x92>
 8002d14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d18:	e00e      	b.n	8002d38 <HAL_DMA_IRQHandler+0xb0>
 8002d1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d1e:	e00b      	b.n	8002d38 <HAL_DMA_IRQHandler+0xb0>
 8002d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d24:	e008      	b.n	8002d38 <HAL_DMA_IRQHandler+0xb0>
 8002d26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d2a:	e005      	b.n	8002d38 <HAL_DMA_IRQHandler+0xb0>
 8002d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d30:	e002      	b.n	8002d38 <HAL_DMA_IRQHandler+0xb0>
 8002d32:	2340      	movs	r3, #64	; 0x40
 8002d34:	e000      	b.n	8002d38 <HAL_DMA_IRQHandler+0xb0>
 8002d36:	2304      	movs	r3, #4
 8002d38:	4a55      	ldr	r2, [pc, #340]	; (8002e90 <HAL_DMA_IRQHandler+0x208>)
 8002d3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8094 	beq.w	8002e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d4e:	e08e      	b.n	8002e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2202      	movs	r2, #2
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d056      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x186>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d051      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020a 	bic.w	r2, r2, #10
 8002d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <HAL_DMA_IRQHandler+0x1f0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d029      	beq.n	8002dee <HAL_DMA_IRQHandler+0x166>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_DMA_IRQHandler+0x1f4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_IRQHandler+0x162>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <HAL_DMA_IRQHandler+0x1f8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x15c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_DMA_IRQHandler+0x1fc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d012      	beq.n	8002dde <HAL_DMA_IRQHandler+0x156>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_DMA_IRQHandler+0x200>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x150>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_DMA_IRQHandler+0x204>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d102      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x14a>
 8002dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dd0:	e00e      	b.n	8002df0 <HAL_DMA_IRQHandler+0x168>
 8002dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd6:	e00b      	b.n	8002df0 <HAL_DMA_IRQHandler+0x168>
 8002dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ddc:	e008      	b.n	8002df0 <HAL_DMA_IRQHandler+0x168>
 8002dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de2:	e005      	b.n	8002df0 <HAL_DMA_IRQHandler+0x168>
 8002de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de8:	e002      	b.n	8002df0 <HAL_DMA_IRQHandler+0x168>
 8002dea:	2320      	movs	r3, #32
 8002dec:	e000      	b.n	8002df0 <HAL_DMA_IRQHandler+0x168>
 8002dee:	2302      	movs	r3, #2
 8002df0:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <HAL_DMA_IRQHandler+0x208>)
 8002df2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d034      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e0c:	e02f      	b.n	8002e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2208      	movs	r2, #8
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d028      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x1e8>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 020e 	bic.w	r2, r2, #14
 8002e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	2101      	movs	r1, #1
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
    }
  }
  return;
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
}
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40020008 	.word	0x40020008
 8002e7c:	4002001c 	.word	0x4002001c
 8002e80:	40020030 	.word	0x40020030
 8002e84:	40020044 	.word	0x40020044
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	4002006c 	.word	0x4002006c
 8002e90:	40020000 	.word	0x40020000

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b08b      	sub	sp, #44	; 0x2c
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e127      	b.n	80030f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f040 8116 	bne.w	80030f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	d034      	beq.n	8002f38 <HAL_GPIO_Init+0xa4>
 8002ece:	2b12      	cmp	r3, #18
 8002ed0:	d80d      	bhi.n	8002eee <HAL_GPIO_Init+0x5a>
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d02b      	beq.n	8002f2e <HAL_GPIO_Init+0x9a>
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d804      	bhi.n	8002ee4 <HAL_GPIO_Init+0x50>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d031      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d01c      	beq.n	8002f1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ee2:	e048      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d043      	beq.n	8002f70 <HAL_GPIO_Init+0xdc>
 8002ee8:	2b11      	cmp	r3, #17
 8002eea:	d01b      	beq.n	8002f24 <HAL_GPIO_Init+0x90>
          break;
 8002eec:	e043      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002eee:	4a89      	ldr	r2, [pc, #548]	; (8003114 <HAL_GPIO_Init+0x280>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d026      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002ef4:	4a87      	ldr	r2, [pc, #540]	; (8003114 <HAL_GPIO_Init+0x280>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d806      	bhi.n	8002f08 <HAL_GPIO_Init+0x74>
 8002efa:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_GPIO_Init+0x284>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d020      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002f00:	4a86      	ldr	r2, [pc, #536]	; (800311c <HAL_GPIO_Init+0x288>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
          break;
 8002f06:	e036      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f08:	4a85      	ldr	r2, [pc, #532]	; (8003120 <HAL_GPIO_Init+0x28c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002f0e:	4a85      	ldr	r2, [pc, #532]	; (8003124 <HAL_GPIO_Init+0x290>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d016      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002f14:	4a84      	ldr	r2, [pc, #528]	; (8003128 <HAL_GPIO_Init+0x294>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
          break;
 8002f1a:	e02c      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e028      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e023      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	3308      	adds	r3, #8
 8002f34:	623b      	str	r3, [r7, #32]
          break;
 8002f36:	e01e      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	623b      	str	r3, [r7, #32]
          break;
 8002f40:	e019      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	623b      	str	r3, [r7, #32]
          break;
 8002f4e:	e012      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	611a      	str	r2, [r3, #16]
          break;
 8002f62:	e008      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f64:	2308      	movs	r3, #8
 8002f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	615a      	str	r2, [r3, #20]
          break;
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
          break;
 8002f74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2bff      	cmp	r3, #255	; 0xff
 8002f7a:	d801      	bhi.n	8002f80 <HAL_GPIO_Init+0xec>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e001      	b.n	8002f84 <HAL_GPIO_Init+0xf0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d802      	bhi.n	8002f92 <HAL_GPIO_Init+0xfe>
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x104>
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	3b08      	subs	r3, #8
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	401a      	ands	r2, r3
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8096 	beq.w	80030f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc6:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_GPIO_Init+0x298>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_GPIO_Init+0x298>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6193      	str	r3, [r2, #24]
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_GPIO_Init+0x298>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fde:	4a54      	ldr	r2, [pc, #336]	; (8003130 <HAL_GPIO_Init+0x29c>)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4b      	ldr	r2, [pc, #300]	; (8003134 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0x19e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <HAL_GPIO_Init+0x2a4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00d      	beq.n	800302e <HAL_GPIO_Init+0x19a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_GPIO_Init+0x2a8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <HAL_GPIO_Init+0x196>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_GPIO_Init+0x2ac>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_GPIO_Init+0x192>
 8003022:	2303      	movs	r3, #3
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 8003026:	2304      	movs	r3, #4
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 800302a:	2302      	movs	r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 8003032:	2300      	movs	r3, #0
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	f002 0203 	and.w	r2, r2, #3
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	4093      	lsls	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003044:	493a      	ldr	r1, [pc, #232]	; (8003130 <HAL_GPIO_Init+0x29c>)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4938      	ldr	r1, [pc, #224]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
 800306a:	e006      	b.n	800307a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	43db      	mvns	r3, r3
 8003074:	4933      	ldr	r1, [pc, #204]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003076:	4013      	ands	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	492e      	ldr	r1, [pc, #184]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	43db      	mvns	r3, r3
 800309c:	4929      	ldr	r1, [pc, #164]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 800309e:	4013      	ands	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030ae:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	4924      	ldr	r1, [pc, #144]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
 80030ba:	e006      	b.n	80030ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	491f      	ldr	r1, [pc, #124]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	491a      	ldr	r1, [pc, #104]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030e4:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	4915      	ldr	r1, [pc, #84]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	f47f aed0 	bne.w	8002ea8 <HAL_GPIO_Init+0x14>
  }
}
 8003108:	bf00      	nop
 800310a:	372c      	adds	r7, #44	; 0x2c
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	10210000 	.word	0x10210000
 8003118:	10110000 	.word	0x10110000
 800311c:	10120000 	.word	0x10120000
 8003120:	10310000 	.word	0x10310000
 8003124:	10320000 	.word	0x10320000
 8003128:	10220000 	.word	0x10220000
 800312c:	40021000 	.word	0x40021000
 8003130:	40010000 	.word	0x40010000
 8003134:	40010800 	.word	0x40010800
 8003138:	40010c00 	.word	0x40010c00
 800313c:	40011000 	.word	0x40011000
 8003140:	40011400 	.word	0x40011400
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e11f      	b.n	80033ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe fff0 	bl	8002184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031dc:	f002 f838 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 80031e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a7b      	ldr	r2, [pc, #492]	; (80033d4 <HAL_I2C_Init+0x25c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d807      	bhi.n	80031fc <HAL_I2C_Init+0x84>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <HAL_I2C_Init+0x260>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	bf94      	ite	ls
 80031f4:	2301      	movls	r3, #1
 80031f6:	2300      	movhi	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e006      	b.n	800320a <HAL_I2C_Init+0x92>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a77      	ldr	r2, [pc, #476]	; (80033dc <HAL_I2C_Init+0x264>)
 8003200:	4293      	cmp	r3, r2
 8003202:	bf94      	ite	ls
 8003204:	2301      	movls	r3, #1
 8003206:	2300      	movhi	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0db      	b.n	80033ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a72      	ldr	r2, [pc, #456]	; (80033e0 <HAL_I2C_Init+0x268>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0c9b      	lsrs	r3, r3, #18
 800321c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a64      	ldr	r2, [pc, #400]	; (80033d4 <HAL_I2C_Init+0x25c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d802      	bhi.n	800324c <HAL_I2C_Init+0xd4>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3301      	adds	r3, #1
 800324a:	e009      	b.n	8003260 <HAL_I2C_Init+0xe8>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_I2C_Init+0x26c>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	3301      	adds	r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	430b      	orrs	r3, r1
 8003266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4956      	ldr	r1, [pc, #344]	; (80033d4 <HAL_I2C_Init+0x25c>)
 800327c:	428b      	cmp	r3, r1
 800327e:	d80d      	bhi.n	800329c <HAL_I2C_Init+0x124>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e59      	subs	r1, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fbb1 f3f3 	udiv	r3, r1, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b04      	cmp	r3, #4
 8003296:	bf38      	it	cc
 8003298:	2304      	movcc	r3, #4
 800329a:	e04f      	b.n	800333c <HAL_I2C_Init+0x1c4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d111      	bne.n	80032c8 <HAL_I2C_Init+0x150>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e012      	b.n	80032ee <HAL_I2C_Init+0x176>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	0099      	lsls	r1, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	fbb0 f3f3 	udiv	r3, r0, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Init+0x17e>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e022      	b.n	800333c <HAL_I2C_Init+0x1c4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <HAL_I2C_Init+0x1a4>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1e58      	subs	r0, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	440b      	add	r3, r1
 800330c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331a:	e00f      	b.n	800333c <HAL_I2C_Init+0x1c4>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6809      	ldr	r1, [r1, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800336a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6911      	ldr	r1, [r2, #16]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68d2      	ldr	r2, [r2, #12]
 8003376:	4311      	orrs	r1, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	000186a0 	.word	0x000186a0
 80033d8:	001e847f 	.word	0x001e847f
 80033dc:	003d08ff 	.word	0x003d08ff
 80033e0:	431bde83 	.word	0x431bde83
 80033e4:	10624dd3 	.word	0x10624dd3

080033e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	461a      	mov	r2, r3
 80033f4:	460b      	mov	r3, r1
 80033f6:	817b      	strh	r3, [r7, #10]
 80033f8:	4613      	mov	r3, r2
 80033fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7ff fa3a 	bl	8002874 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80e0 	bne.w	80035d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	4970      	ldr	r1, [pc, #448]	; (80035dc <HAL_I2C_Master_Transmit+0x1f4>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f001 f966 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	e0d3      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_I2C_Master_Transmit+0x50>
 8003434:	2302      	movs	r3, #2
 8003436:	e0cc      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d007      	beq.n	800345e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2210      	movs	r2, #16
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	893a      	ldrh	r2, [r7, #8]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a50      	ldr	r2, [pc, #320]	; (80035e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a0:	8979      	ldrh	r1, [r7, #10]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fe52 	bl	8004150 <I2C_MasterRequestWrite>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e08d      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034cc:	e066      	b.n	800359c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f001 f9e0 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06b      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d11b      	bne.n	8003570 <HAL_I2C_Master_Transmit+0x188>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f001 f9d0 	bl	800491a <I2C_WaitOnBTFFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	2b04      	cmp	r3, #4
 8003586:	d107      	bne.n	8003598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01a      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d194      	bne.n	80034ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000

080035e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08c      	sub	sp, #48	; 0x30
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	461a      	mov	r2, r3
 80035f0:	460b      	mov	r3, r1
 80035f2:	817b      	strh	r3, [r7, #10]
 80035f4:	4613      	mov	r3, r2
 80035f6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff f93a 	bl	8002874 <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b20      	cmp	r3, #32
 800360c:	f040 8238 	bne.w	8003a80 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2319      	movs	r3, #25
 8003616:	2201      	movs	r2, #1
 8003618:	497e      	ldr	r1, [pc, #504]	; (8003814 <HAL_I2C_Master_Receive+0x230>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f001 f866 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	e22b      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_I2C_Master_Receive+0x54>
 8003634:	2302      	movs	r3, #2
 8003636:	e224      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d007      	beq.n	800365e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2222      	movs	r2, #34	; 0x22
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2210      	movs	r2, #16
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_I2C_Master_Receive+0x234>)
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fdd4 	bl	8004254 <I2C_MasterRequestRead>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1e5      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e1b9      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11d      	bne.n	800372a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036fe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003726:	b662      	cpsie	i
 8003728:	e197      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b02      	cmp	r3, #2
 8003730:	d11d      	bne.n	800376e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003742:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800376a:	b662      	cpsie	i
 800376c:	e175      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003794:	e161      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b03      	cmp	r3, #3
 800379c:	f200 811a 	bhi.w	80039d4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d123      	bne.n	80037f0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f001 f8f5 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e162      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ee:	e134      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d150      	bne.n	800389a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	4906      	ldr	r1, [pc, #24]	; (800381c <HAL_I2C_Master_Receive+0x238>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 ff72 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e137      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
 8003812:	bf00      	nop
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000
 800381c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003864:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003898:	e0df      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	497a      	ldr	r1, [pc, #488]	; (8003a8c <HAL_I2C_Master_Receive+0x4a8>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 ff21 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0e6      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038f8:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_I2C_Master_Receive+0x4ac>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	08db      	lsrs	r3, r3, #3
 80038fe:	4a65      	ldr	r2, [pc, #404]	; (8003a94 <HAL_I2C_Master_Receive+0x4b0>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	0a1a      	lsrs	r2, r3, #8
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	00da      	lsls	r2, r3, #3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	3b01      	subs	r3, #1
 8003916:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d117      	bne.n	800394e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003940:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e099      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d1da      	bne.n	8003912 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800399e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d2:	e042      	b.n	8003a5a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 ffdf 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e04c      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d118      	bne.n	8003a5a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f47f ae99 	bne.w	8003796 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	00010004 	.word	0x00010004
 8003a90:	20000010 	.word	0x20000010
 8003a94:	14f8b589 	.word	0x14f8b589

08003a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab2:	f7fe fedf 	bl	8002874 <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	f040 80d9 	bne.w	8003c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2319      	movs	r3, #25
 8003acc:	2201      	movs	r2, #1
 8003ace:	496d      	ldr	r1, [pc, #436]	; (8003c84 <HAL_I2C_Mem_Write+0x1ec>)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fe0b 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0cc      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Mem_Write+0x56>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0c5      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d007      	beq.n	8003b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2221      	movs	r2, #33	; 0x21
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a4d      	ldr	r2, [pc, #308]	; (8003c88 <HAL_I2C_Mem_Write+0x1f0>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b56:	88f8      	ldrh	r0, [r7, #6]
 8003b58:	893a      	ldrh	r2, [r7, #8]
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4603      	mov	r3, r0
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fc42 	bl	80043f0 <I2C_RequestMemoryWrite>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d052      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e081      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fe8c 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06b      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_I2C_Mem_Write+0x180>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d017      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1aa      	bne.n	8003b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fe78 	bl	800491a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d107      	bne.n	8003c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e016      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	00100002 	.word	0x00100002
 8003c88:	ffff0000 	.word	0xffff0000

08003c8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08c      	sub	sp, #48	; 0x30
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	4608      	mov	r0, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	817b      	strh	r3, [r7, #10]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	813b      	strh	r3, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003caa:	f7fe fde3 	bl	8002874 <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	f040 823d 	bne.w	8004138 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2319      	movs	r3, #25
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4981      	ldr	r1, [pc, #516]	; (8003ecc <HAL_I2C_Mem_Read+0x240>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fd0f 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e230      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x5a>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e229      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d007      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2222      	movs	r2, #34	; 0x22
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <HAL_I2C_Mem_Read+0x244>)
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d4e:	88f8      	ldrh	r0, [r7, #6]
 8003d50:	893a      	ldrh	r2, [r7, #8]
 8003d52:	8979      	ldrh	r1, [r7, #10]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fbdc 	bl	800451c <I2C_RequestMemoryRead>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1e5      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e1b9      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d11d      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003db6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dde:	b662      	cpsie	i
 8003de0:	e197      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d11d      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e22:	b662      	cpsie	i
 8003e24:	e175      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e34:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e4c:	e161      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	f200 811a 	bhi.w	800408c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d123      	bne.n	8003ea8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fd99 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e162      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea6:	e134      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d150      	bne.n	8003f52 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4906      	ldr	r1, [pc, #24]	; (8003ed4 <HAL_I2C_Mem_Read+0x248>)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fc16 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e137      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
 8003eca:	bf00      	nop
 8003ecc:	00100002 	.word	0x00100002
 8003ed0:	ffff0000 	.word	0xffff0000
 8003ed4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f1c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f50:	e0df      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2200      	movs	r2, #0
 8003f5a:	497a      	ldr	r1, [pc, #488]	; (8004144 <HAL_I2C_Mem_Read+0x4b8>)
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fbc5 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0e6      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fb0:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_I2C_Mem_Read+0x4bc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_I2C_Mem_Read+0x4c0>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	0a1a      	lsrs	r2, r3, #8
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00da      	lsls	r2, r3, #3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d117      	bne.n	8004006 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f043 0220 	orr.w	r2, r3, #32
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ff8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e099      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d1da      	bne.n	8003fca <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004056:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a
 800408a:	e042      	b.n	8004112 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fc83 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e04c      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d118      	bne.n	8004112 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	f47f ae99 	bne.w	8003e4e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3728      	adds	r7, #40	; 0x28
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	00010004 	.word	0x00010004
 8004148:	20000010 	.word	0x20000010
 800414c:	14f8b589 	.word	0x14f8b589

08004150 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	460b      	mov	r3, r1
 800415e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d006      	beq.n	800417a <I2C_MasterRequestWrite+0x2a>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d003      	beq.n	800417a <I2C_MasterRequestWrite+0x2a>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004178:	d108      	bne.n	800418c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e00b      	b.n	80041a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	2b12      	cmp	r3, #18
 8004192:	d107      	bne.n	80041a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fa9b 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d103      	bne.n	80041d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e035      	b.n	8004244 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e0:	d108      	bne.n	80041f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	e01b      	b.n	800422c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	11db      	asrs	r3, r3, #7
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0306 	and.w	r3, r3, #6
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f063 030f 	orn	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <I2C_MasterRequestWrite+0xfc>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fac1 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e010      	b.n	8004244 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004222:	897b      	ldrh	r3, [r7, #10]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4907      	ldr	r1, [pc, #28]	; (8004250 <I2C_MasterRequestWrite+0x100>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fab1 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010008 	.word	0x00010008
 8004250:	00010002 	.word	0x00010002

08004254 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	460b      	mov	r3, r1
 8004262:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d006      	beq.n	800428e <I2C_MasterRequestRead+0x3a>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d003      	beq.n	800428e <I2C_MasterRequestRead+0x3a>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800428c:	d108      	bne.n	80042a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e00b      	b.n	80042b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	2b11      	cmp	r3, #17
 80042a6:	d107      	bne.n	80042b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fa11 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d103      	bne.n	80042e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e079      	b.n	80043e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f4:	d108      	bne.n	8004308 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042f6:	897b      	ldrh	r3, [r7, #10]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	e05f      	b.n	80043c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004308:	897b      	ldrh	r3, [r7, #10]
 800430a:	11db      	asrs	r3, r3, #7
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 0306 	and.w	r3, r3, #6
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f063 030f 	orn	r3, r3, #15
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4930      	ldr	r1, [pc, #192]	; (80043e8 <I2C_MasterRequestRead+0x194>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa37 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e054      	b.n	80043e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004336:	897b      	ldrh	r3, [r7, #10]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4929      	ldr	r1, [pc, #164]	; (80043ec <I2C_MasterRequestRead+0x198>)
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa27 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e044      	b.n	80043e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f9af 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d103      	bne.n	80043ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e017      	b.n	80043e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	11db      	asrs	r3, r3, #7
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0306 	and.w	r3, r3, #6
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f063 030e 	orn	r3, r3, #14
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4907      	ldr	r1, [pc, #28]	; (80043ec <I2C_MasterRequestRead+0x198>)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f9e3 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00010008 	.word	0x00010008
 80043ec:	00010002 	.word	0x00010002

080043f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2200      	movs	r2, #0
 8004422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f960 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004440:	d103      	bne.n	800444a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e05f      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800445c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	492d      	ldr	r1, [pc, #180]	; (8004518 <I2C_RequestMemoryWrite+0x128>)
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f998 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e04c      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fa02 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d107      	bne.n	80044b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e02b      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	e021      	b.n	800450c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	6a39      	ldr	r1, [r7, #32]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f9dc 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d107      	bne.n	80044fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e005      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	00010002 	.word	0x00010002

0800451c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	817b      	strh	r3, [r7, #10]
 800452e:	460b      	mov	r3, r1
 8004530:	813b      	strh	r3, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2200      	movs	r2, #0
 800455e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f8c2 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	d103      	bne.n	8004586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e0aa      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	4952      	ldr	r1, [pc, #328]	; (80046e8 <I2C_RequestMemoryRead+0x1cc>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f8fa 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e097      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6a39      	ldr	r1, [r7, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f964 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d107      	bne.n	80045ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e076      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	e021      	b.n	8004648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004604:	893b      	ldrh	r3, [r7, #8]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b29b      	uxth	r3, r3
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	6a39      	ldr	r1, [r7, #32]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f93e 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e050      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	6a39      	ldr	r1, [r7, #32]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f923 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b04      	cmp	r3, #4
 800465e:	d107      	bne.n	8004670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e035      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2200      	movs	r2, #0
 800468c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f82b 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d103      	bne.n	80046b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e013      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046b8:	897b      	ldrh	r3, [r7, #10]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	4906      	ldr	r1, [pc, #24]	; (80046e8 <I2C_RequestMemoryRead+0x1cc>)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f863 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	00010002 	.word	0x00010002

080046ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046fc:	e025      	b.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004704:	d021      	beq.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fe f8b5 	bl	8002874 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d116      	bne.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e023      	b.n	8004792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10d      	bne.n	8004770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	e00c      	b.n	800478a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	429a      	cmp	r2, r3
 800478e:	d0b6      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a8:	e051      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d123      	bne.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e046      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004808:	d021      	beq.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe f833 	bl	8002874 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d116      	bne.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e020      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10c      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e00b      	b.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d18d      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a4:	e02d      	b.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8ce 	bl	8004a48 <I2C_IsAcknowledgeFailed>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02d      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048bc:	d021      	beq.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fd ffd9 	bl	8002874 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e007      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d1ca      	bne.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004926:	e02d      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f88d 	bl	8004a48 <I2C_IsAcknowledgeFailed>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e02d      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493e:	d021      	beq.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fd ff98 	bl	8002874 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e007      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d1ca      	bne.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a8:	e042      	b.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d119      	bne.n	80049ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e029      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fd ff42 	bl	8002874 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d1b5      	bne.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d11b      	bne.n	8004a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f043 0204 	orr.w	r2, r3, #4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e26c      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8087 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00c      	beq.n	8004aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ad0:	4b8f      	ldr	r3, [pc, #572]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_OscConfig+0x5e>
 8004adc:	4b8c      	ldr	r3, [pc, #560]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d10b      	bne.n	8004b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aea:	4b89      	ldr	r3, [pc, #548]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x12c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d168      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e246      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x76>
 8004b0c:	4b80      	ldr	r3, [pc, #512]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a7f      	ldr	r2, [pc, #508]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02e      	b.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x98>
 8004b22:	4b7b      	ldr	r3, [pc, #492]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a7a      	ldr	r2, [pc, #488]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b78      	ldr	r3, [pc, #480]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a77      	ldr	r2, [pc, #476]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0xbc>
 8004b46:	4b72      	ldr	r3, [pc, #456]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a71      	ldr	r2, [pc, #452]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6e      	ldr	r2, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004b60:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6a      	ldr	r2, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b68      	ldr	r3, [pc, #416]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a67      	ldr	r2, [pc, #412]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd fe78 	bl	8002874 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fe74 	bl	8002874 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e1fa      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b5d      	ldr	r3, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xe4>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fe64 	bl	8002874 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd fe60 	bl	8002874 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1e6      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x10c>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bea:	4b49      	ldr	r3, [pc, #292]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x18c>
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x176>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1ba      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4939      	ldr	r1, [pc, #228]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e03a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fe19 	bl	8002874 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fd fe15 	bl	8002874 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e19b      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4927      	ldr	r1, [pc, #156]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fd fdf8 	bl	8002874 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fd fdf4 	bl	8002874 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e17a      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d03a      	beq.n	8004d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d019      	beq.n	8004cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fdd8 	bl	8002874 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fd fdd4 	bl	8002874 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e15a      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	f000 fada 	bl	80052a0 <RCC_Delay>
 8004cec:	e01c      	b.n	8004d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fdbe 	bl	8002874 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfc:	f7fd fdba 	bl	8002874 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d908      	bls.n	8004d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e140      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	42420000 	.word	0x42420000
 8004d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1c:	4b9e      	ldr	r3, [pc, #632]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e9      	bne.n	8004cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80a6 	beq.w	8004e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b97      	ldr	r3, [pc, #604]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b94      	ldr	r3, [pc, #592]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4a93      	ldr	r2, [pc, #588]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	61d3      	str	r3, [r2, #28]
 8004d52:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b8e      	ldr	r3, [pc, #568]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b8b      	ldr	r3, [pc, #556]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a8a      	ldr	r2, [pc, #552]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fd fd7b 	bl	8002874 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fd fd77 	bl	8002874 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0fd      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b81      	ldr	r3, [pc, #516]	; (8004f9c <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x312>
 8004da8:	4b7b      	ldr	r3, [pc, #492]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	4a7a      	ldr	r2, [pc, #488]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6213      	str	r3, [r2, #32]
 8004db4:	e02d      	b.n	8004e12 <HAL_RCC_OscConfig+0x36e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x334>
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4a75      	ldr	r2, [pc, #468]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6213      	str	r3, [r2, #32]
 8004dca:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4a72      	ldr	r2, [pc, #456]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6213      	str	r3, [r2, #32]
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x36e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x356>
 8004de0:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4a6c      	ldr	r2, [pc, #432]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6213      	str	r3, [r2, #32]
 8004dec:	4b6a      	ldr	r3, [pc, #424]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	4a69      	ldr	r2, [pc, #420]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6213      	str	r3, [r2, #32]
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x36e>
 8004dfa:	4b67      	ldr	r3, [pc, #412]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	4a66      	ldr	r2, [pc, #408]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6213      	str	r3, [r2, #32]
 8004e06:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4a63      	ldr	r2, [pc, #396]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fd2b 	bl	8002874 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fd27 	bl	8002874 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0ab      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x37e>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fd fd15 	bl	8002874 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fd fd11 	bl	8002874 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e095      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b48      	ldr	r3, [pc, #288]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	4a47      	ldr	r2, [pc, #284]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8081 	beq.w	8004f8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d061      	beq.n	8004f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d146      	bne.n	8004f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea0:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <HAL_RCC_OscConfig+0x4fc>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fd fce5 	bl	8002874 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd fce1 	bl	8002874 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e067      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec0:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ed6:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	492d      	ldr	r1, [pc, #180]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a19      	ldr	r1, [r3, #32]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	4927      	ldr	r1, [pc, #156]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x4fc>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd fcb5 	bl	8002874 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd fcb1 	bl	8002874 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e037      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x46a>
 8004f2c:	e02f      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <HAL_RCC_OscConfig+0x4fc>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd fc9e 	bl	8002874 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd fc9a 	bl	8002874 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e020      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x498>
 8004f5a:	e018      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e013      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42420060 	.word	0x42420060

08004fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0d0      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d910      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 0207 	bic.w	r2, r3, #7
 8004fce:	4965      	ldr	r1, [pc, #404]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a58      	ldr	r2, [pc, #352]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800500a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d040      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d115      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e073      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e06b      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4936      	ldr	r1, [pc, #216]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005094:	f7fd fbee 	bl	8002874 <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fd fbea 	bl	8002874 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e053      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d210      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 0207 	bic.w	r2, r3, #7
 80050da:	4922      	ldr	r1, [pc, #136]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4601      	mov	r1, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	5cd3      	ldrb	r3, [r2, r3]
 8005146:	fa21 f303 	lsr.w	r3, r1, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1cc>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_ClockConfig+0x1d0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fb4c 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40022000 	.word	0x40022000
 8005168:	40021000 	.word	0x40021000
 800516c:	08007a18 	.word	0x08007a18
 8005170:	20000010 	.word	0x20000010
 8005174:	20000014 	.word	0x20000014

08005178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	b490      	push	{r4, r7}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800517e:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005180:	1d3c      	adds	r4, r7, #4
 8005182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005188:	4b28      	ldr	r3, [pc, #160]	; (800522c <HAL_RCC_GetSysClockFreq+0xb4>)
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051a2:	4b23      	ldr	r3, [pc, #140]	; (8005230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x40>
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d003      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x46>
 80051b6:	e02d      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ba:	623b      	str	r3, [r7, #32]
      break;
 80051bc:	e02d      	b.n	800521a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	0c9b      	lsrs	r3, r3, #18
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051ca:	4413      	add	r3, r2
 80051cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c5b      	lsrs	r3, r3, #17
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051ea:	4413      	add	r3, r2
 80051ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4a0f      	ldr	r2, [pc, #60]	; (8005234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051f6:	fb02 f203 	mul.w	r2, r2, r3
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	e004      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	623b      	str	r3, [r7, #32]
      break;
 8005212:	e002      	b.n	800521a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005216:	623b      	str	r3, [r7, #32]
      break;
 8005218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521a:	6a3b      	ldr	r3, [r7, #32]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	; 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bc90      	pop	{r4, r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	08007298 	.word	0x08007298
 800522c:	080072a8 	.word	0x080072a8
 8005230:	40021000 	.word	0x40021000
 8005234:	007a1200 	.word	0x007a1200
 8005238:	003d0900 	.word	0x003d0900

0800523c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005240:	4b02      	ldr	r3, [pc, #8]	; (800524c <HAL_RCC_GetHCLKFreq+0x10>)
 8005242:	681b      	ldr	r3, [r3, #0]
}
 8005244:	4618      	mov	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	20000010 	.word	0x20000010

08005250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005254:	f7ff fff2 	bl	800523c <HAL_RCC_GetHCLKFreq>
 8005258:	4601      	mov	r1, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4a03      	ldr	r2, [pc, #12]	; (8005274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	fa21 f303 	lsr.w	r3, r1, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000
 8005274:	08007a28 	.word	0x08007a28

08005278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800527c:	f7ff ffde 	bl	800523c <HAL_RCC_GetHCLKFreq>
 8005280:	4601      	mov	r1, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	0adb      	lsrs	r3, r3, #11
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4a03      	ldr	r2, [pc, #12]	; (800529c <HAL_RCC_GetPCLK2Freq+0x24>)
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40021000 	.word	0x40021000
 800529c:	08007a28 	.word	0x08007a28

080052a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <RCC_Delay+0x34>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <RCC_Delay+0x38>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0a5b      	lsrs	r3, r3, #9
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052bc:	bf00      	nop
  }
  while (Delay --);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1e5a      	subs	r2, r3, #1
 80052c2:	60fa      	str	r2, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f9      	bne.n	80052bc <RCC_Delay+0x1c>
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010
 80052d8:	10624dd3 	.word	0x10624dd3

080052dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e053      	b.n	8005396 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fc ff79 	bl	8002200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005324:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	ea42 0103 	orr.w	r1, r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	0c1a      	lsrs	r2, r3, #16
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f002 0204 	and.w	r2, r2, #4
 8005374:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005384:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e01d      	b.n	80053ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fc ff67 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f000 fb0b 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d007      	beq.n	800542e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e01d      	b.n	8005488 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f815 	bl	8005490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f000 fabd 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d122      	bne.n	80054fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d11b      	bne.n	80054fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0202 	mvn.w	r2, #2
 80054ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa6b 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 80054ea:	e005      	b.n	80054f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa5e 	bl	80059ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa6d 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b04      	cmp	r3, #4
 800550a:	d122      	bne.n	8005552 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d11b      	bne.n	8005552 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0204 	mvn.w	r2, #4
 8005522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa41 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 800553e:	e005      	b.n	800554c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa34 	bl	80059ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa43 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b08      	cmp	r3, #8
 800555e:	d122      	bne.n	80055a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b08      	cmp	r3, #8
 800556c:	d11b      	bne.n	80055a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0208 	mvn.w	r2, #8
 8005576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2204      	movs	r2, #4
 800557c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa17 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 8005592:	e005      	b.n	80055a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa0a 	bl	80059ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa19 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d122      	bne.n	80055fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d11b      	bne.n	80055fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f06f 0210 	mvn.w	r2, #16
 80055ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2208      	movs	r2, #8
 80055d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9ed 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 80055e6:	e005      	b.n	80055f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f9e0 	bl	80059ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9ef 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10e      	bne.n	8005626 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d107      	bne.n	8005626 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f06f 0201 	mvn.w	r2, #1
 800561e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fc fa49 	bl	8001ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d10e      	bne.n	8005652 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d107      	bne.n	8005652 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800564a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fcf1 	bl	8006034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d10e      	bne.n	800567e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d107      	bne.n	800567e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f9b3 	bl	80059e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b20      	cmp	r3, #32
 800568a:	d10e      	bne.n	80056aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b20      	cmp	r3, #32
 8005698:	d107      	bne.n	80056aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0220 	mvn.w	r2, #32
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fcbc 	bl	8006022 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e0b4      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x184>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	f200 809f 	bhi.w	8005824 <HAL_TIM_PWM_ConfigChannel+0x170>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005825 	.word	0x08005825
 80056f4:	08005825 	.word	0x08005825
 80056f8:	08005825 	.word	0x08005825
 80056fc:	08005761 	.word	0x08005761
 8005700:	08005825 	.word	0x08005825
 8005704:	08005825 	.word	0x08005825
 8005708:	08005825 	.word	0x08005825
 800570c:	080057a3 	.word	0x080057a3
 8005710:	08005825 	.word	0x08005825
 8005714:	08005825 	.word	0x08005825
 8005718:	08005825 	.word	0x08005825
 800571c:	080057e3 	.word	0x080057e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f9c8 	bl	8005abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0208 	orr.w	r2, r2, #8
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0204 	bic.w	r2, r2, #4
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	619a      	str	r2, [r3, #24]
      break;
 800575e:	e062      	b.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fa0e 	bl	8005b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6999      	ldr	r1, [r3, #24]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	619a      	str	r2, [r3, #24]
      break;
 80057a0:	e041      	b.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fa57 	bl	8005c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0208 	orr.w	r2, r2, #8
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0204 	bic.w	r2, r2, #4
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	61da      	str	r2, [r3, #28]
      break;
 80057e0:	e021      	b.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 faa1 	bl	8005d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69d9      	ldr	r1, [r3, #28]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	021a      	lsls	r2, r3, #8
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	61da      	str	r2, [r3, #28]
      break;
 8005822:	e000      	b.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005824:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIM_ConfigClockSource+0x18>
 8005854:	2302      	movs	r3, #2
 8005856:	e0a6      	b.n	80059a6 <HAL_TIM_ConfigClockSource+0x166>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d067      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x120>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d80b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x6c>
 8005894:	2b10      	cmp	r3, #16
 8005896:	d073      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x140>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d802      	bhi.n	80058a2 <HAL_TIM_ConfigClockSource+0x62>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d06f      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80058a0:	e078      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d06c      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x140>
 80058a6:	2b30      	cmp	r3, #48	; 0x30
 80058a8:	d06a      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058aa:	e073      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058ac:	2b70      	cmp	r3, #112	; 0x70
 80058ae:	d00d      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x8c>
 80058b0:	2b70      	cmp	r3, #112	; 0x70
 80058b2:	d804      	bhi.n	80058be <HAL_TIM_ConfigClockSource+0x7e>
 80058b4:	2b50      	cmp	r3, #80	; 0x50
 80058b6:	d033      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0xe0>
 80058b8:	2b60      	cmp	r3, #96	; 0x60
 80058ba:	d041      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058bc:	e06a      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c2:	d066      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x152>
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c8:	d017      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058ca:	e063      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f000 faed 	bl	8005eba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	609a      	str	r2, [r3, #8]
      break;
 80058f8:	e04c      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6899      	ldr	r1, [r3, #8]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f000 fad6 	bl	8005eba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591c:	609a      	str	r2, [r3, #8]
      break;
 800591e:	e039      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	461a      	mov	r2, r3
 800592e:	f000 fa4d 	bl	8005dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2150      	movs	r1, #80	; 0x50
 8005938:	4618      	mov	r0, r3
 800593a:	f000 faa4 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 800593e:	e029      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	461a      	mov	r2, r3
 800594e:	f000 fa6b 	bl	8005e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2160      	movs	r1, #96	; 0x60
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fa94 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 800595e:	e019      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	461a      	mov	r2, r3
 800596e:	f000 fa2d 	bl	8005dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa84 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 800597e:	e009      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f000 fa7b 	bl	8005e86 <TIM_ITRx_SetConfig>
      break;
 8005990:	e000      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
	...

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <TIM_Base_SetConfig+0xb8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x30>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x30>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <TIM_Base_SetConfig+0xbc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x30>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <TIM_Base_SetConfig+0xc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <TIM_Base_SetConfig+0xb8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_Base_SetConfig+0x62>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d007      	beq.n	8005a5a <TIM_Base_SetConfig+0x62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <TIM_Base_SetConfig+0xbc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_Base_SetConfig+0x62>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <TIM_Base_SetConfig+0xc0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d108      	bne.n	8005a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a07      	ldr	r2, [pc, #28]	; (8005ab0 <TIM_Base_SetConfig+0xb8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d103      	bne.n	8005aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800

08005abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f023 0302 	bic.w	r3, r3, #2
 8005b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <TIM_OC1_SetConfig+0xc8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10c      	bne.n	8005b32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0308 	bic.w	r3, r3, #8
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <TIM_OC1_SetConfig+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d111      	bne.n	8005b5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00

08005b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0210 	bic.w	r2, r3, #16
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0320 	bic.w	r3, r3, #32
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <TIM_OC2_SetConfig+0xd0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10d      	bne.n	8005c04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <TIM_OC2_SetConfig+0xd0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d113      	bne.n	8005c34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	40012c00 	.word	0x40012c00

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <TIM_OC3_SetConfig+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10d      	bne.n	8005cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <TIM_OC3_SetConfig+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00

08005d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	; (8005dc8 <TIM_OC4_SetConfig+0x98>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d109      	bne.n	8005da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	019b      	lsls	r3, r3, #6
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr
 8005dc8:	40012c00 	.word	0x40012c00

08005dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 030a 	bic.w	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f023 0210 	bic.w	r2, r3, #16
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	031b      	lsls	r3, r3, #12
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f043 0307 	orr.w	r3, r3, #7
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	609a      	str	r2, [r3, #8]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr

08005eba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	021a      	lsls	r2, r3, #8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	609a      	str	r2, [r3, #8]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e032      	b.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e03d      	b.n	8006018 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e03f      	b.n	80060d8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fc f97f 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2224      	movs	r2, #36	; 0x24
 8006076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006088:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fb42 	bl	8006714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800609e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	f040 8083 	bne.w	8006208 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_UART_Transmit+0x2e>
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07b      	b.n	800620a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_UART_Transmit+0x40>
 800611c:	2302      	movs	r3, #2
 800611e:	e074      	b.n	800620a <HAL_UART_Transmit+0x12a>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2221      	movs	r2, #33	; 0x21
 8006132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006136:	f7fc fb9d 	bl	8002874 <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006148:	e042      	b.n	80061d0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006160:	d122      	bne.n	80061a8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	2180      	movs	r1, #128	; 0x80
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f968 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e046      	b.n	800620a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d103      	bne.n	80061a0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	3302      	adds	r3, #2
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	e017      	b.n	80061d0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	e013      	b.n	80061d0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2200      	movs	r2, #0
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f945 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e023      	b.n	800620a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	60ba      	str	r2, [r7, #8]
 80061c8:	781a      	ldrb	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1b7      	bne.n	800614a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2140      	movs	r1, #64	; 0x40
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f92c 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e00a      	b.n	800620a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10d      	bne.n	8006266 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_UART_IRQHandler+0x52>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9d7 	bl	8006612 <UART_Receive_IT>
      return;
 8006264:	e0cc      	b.n	8006400 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80ab 	beq.w	80063c4 <HAL_UART_IRQHandler+0x1b0>
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <HAL_UART_IRQHandler+0x70>
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80a0 	beq.w	80063c4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_UART_IRQHandler+0x90>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	f043 0201 	orr.w	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_UART_IRQHandler+0xb0>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062bc:	f043 0202 	orr.w	r2, r3, #2
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_UART_IRQHandler+0xd0>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062dc:	f043 0204 	orr.w	r2, r3, #4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_UART_IRQHandler+0xf0>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	f043 0208 	orr.w	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d078      	beq.n	80063fe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_UART_IRQHandler+0x112>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f976 	bl	8006612 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <HAL_UART_IRQHandler+0x13a>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d031      	beq.n	80063b2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8c1 	bl	80064d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d023      	beq.n	80063aa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	2b00      	cmp	r3, #0
 8006378:	d013      	beq.n	80063a2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	4a22      	ldr	r2, [pc, #136]	; (8006408 <HAL_UART_IRQHandler+0x1f4>)
 8006380:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	4618      	mov	r0, r3
 8006388:	f7fc fc08 	bl	8002b9c <HAL_DMA_Abort_IT>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d016      	beq.n	80063c0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	e00e      	b.n	80063c0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f844 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e00a      	b.n	80063c0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f840 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e006      	b.n	80063c0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f83c 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80063be:	e01e      	b.n	80063fe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	bf00      	nop
    return;
 80063c2:	e01c      	b.n	80063fe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x1cc>
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8ad 	bl	8006538 <UART_Transmit_IT>
    return;
 80063de:	e00f      	b.n	8006400 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_UART_IRQHandler+0x1ec>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f8f4 	bl	80065e2 <UART_EndTransmit_IT>
    return;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_UART_IRQHandler+0x1ec>
    return;
 80063fe:	bf00      	nop
  }
}
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08006511 	.word	0x08006511

0800640c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4613      	mov	r3, r2
 8006450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006452:	e02c      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800645a:	d028      	beq.n	80064ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0x30>
 8006462:	f7fc fa07 	bl	8002874 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	429a      	cmp	r2, r3
 8006470:	d21d      	bcs.n	80064ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006480:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e00f      	b.n	80064ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4013      	ands	r3, r2
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	bf0c      	ite	eq
 80064be:	2301      	moveq	r3, #1
 80064c0:	2300      	movne	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d0c3      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff ff80 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b21      	cmp	r3, #33	; 0x21
 800654a:	d144      	bne.n	80065d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d11a      	bne.n	800658c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]
 800657e:	e00e      	b.n	800659e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	621a      	str	r2, [r3, #32]
 800658a:	e008      	b.n	800659e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6211      	str	r1, [r2, #32]
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	4619      	mov	r1, r3
 80065ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10f      	bne.n	80065d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80065d6:	2302      	movs	r3, #2
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff ff02 	bl	800640c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b22      	cmp	r3, #34	; 0x22
 8006624:	d171      	bne.n	800670a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d123      	bne.n	8006678 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10e      	bne.n	800665c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	1c9a      	adds	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	629a      	str	r2, [r3, #40]	; 0x28
 800665a:	e029      	b.n	80066b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b29b      	uxth	r3, r3
 8006664:	b2db      	uxtb	r3, r3
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
 8006676:	e01b      	b.n	80066b0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6858      	ldr	r0, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	1c59      	adds	r1, r3, #1
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6291      	str	r1, [r2, #40]	; 0x28
 8006690:	b2c2      	uxtb	r2, r0
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	e00c      	b.n	80066b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	1c58      	adds	r0, r3, #1
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	6288      	str	r0, [r1, #40]	; 0x28
 80066a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4619      	mov	r1, r3
 80066be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d120      	bne.n	8006706 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0220 	bic.w	r2, r2, #32
 80066d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fe8e 	bl	800641e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e002      	b.n	800670c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e000      	b.n	800670c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800670a:	2302      	movs	r3, #2
  }
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800674e:	f023 030c 	bic.w	r3, r3, #12
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	430b      	orrs	r3, r1
 800675a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a52      	ldr	r2, [pc, #328]	; (80068c0 <UART_SetConfig+0x1ac>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d14e      	bne.n	800681a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800677c:	f7fe fd7c 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 8006780:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009a      	lsls	r2, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	fbb2 f3f3 	udiv	r3, r2, r3
 8006798:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <UART_SetConfig+0x1b0>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	0119      	lsls	r1, r3, #4
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009a      	lsls	r2, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067b8:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <UART_SetConfig+0x1b0>)
 80067ba:	fba3 0302 	umull	r0, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2064      	movs	r0, #100	; 0x64
 80067c2:	fb00 f303 	mul.w	r3, r0, r3
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	3332      	adds	r3, #50	; 0x32
 80067cc:	4a3d      	ldr	r2, [pc, #244]	; (80068c4 <UART_SetConfig+0x1b0>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067d8:	4419      	add	r1, r3
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009a      	lsls	r2, r3, #2
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f0:	4b34      	ldr	r3, [pc, #208]	; (80068c4 <UART_SetConfig+0x1b0>)
 80067f2:	fba3 0302 	umull	r0, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2064      	movs	r0, #100	; 0x64
 80067fa:	fb00 f303 	mul.w	r3, r0, r3
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	3332      	adds	r3, #50	; 0x32
 8006804:	4a2f      	ldr	r2, [pc, #188]	; (80068c4 <UART_SetConfig+0x1b0>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	f003 020f 	and.w	r2, r3, #15
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	440a      	add	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006818:	e04d      	b.n	80068b6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800681a:	f7fe fd19 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 800681e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009a      	lsls	r2, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <UART_SetConfig+0x1b0>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	0119      	lsls	r1, r3, #4
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009a      	lsls	r2, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	fbb2 f2f3 	udiv	r2, r2, r3
 8006856:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <UART_SetConfig+0x1b0>)
 8006858:	fba3 0302 	umull	r0, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	2064      	movs	r0, #100	; 0x64
 8006860:	fb00 f303 	mul.w	r3, r0, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	3332      	adds	r3, #50	; 0x32
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <UART_SetConfig+0x1b0>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006876:	4419      	add	r1, r3
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009a      	lsls	r2, r3, #2
 8006882:	441a      	add	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	fbb2 f2f3 	udiv	r2, r2, r3
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <UART_SetConfig+0x1b0>)
 8006890:	fba3 0302 	umull	r0, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	2064      	movs	r0, #100	; 0x64
 8006898:	fb00 f303 	mul.w	r3, r0, r3
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	3332      	adds	r3, #50	; 0x32
 80068a2:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <UART_SetConfig+0x1b0>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	f003 020f 	and.w	r2, r3, #15
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	440a      	add	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40013800 	.word	0x40013800
 80068c4:	51eb851f 	.word	0x51eb851f

080068c8 <__errno>:
 80068c8:	4b01      	ldr	r3, [pc, #4]	; (80068d0 <__errno+0x8>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	2000001c 	.word	0x2000001c

080068d4 <__libc_init_array>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	2500      	movs	r5, #0
 80068d8:	4e0c      	ldr	r6, [pc, #48]	; (800690c <__libc_init_array+0x38>)
 80068da:	4c0d      	ldr	r4, [pc, #52]	; (8006910 <__libc_init_array+0x3c>)
 80068dc:	1ba4      	subs	r4, r4, r6
 80068de:	10a4      	asrs	r4, r4, #2
 80068e0:	42a5      	cmp	r5, r4
 80068e2:	d109      	bne.n	80068f8 <__libc_init_array+0x24>
 80068e4:	f000 fc88 	bl	80071f8 <_init>
 80068e8:	2500      	movs	r5, #0
 80068ea:	4e0a      	ldr	r6, [pc, #40]	; (8006914 <__libc_init_array+0x40>)
 80068ec:	4c0a      	ldr	r4, [pc, #40]	; (8006918 <__libc_init_array+0x44>)
 80068ee:	1ba4      	subs	r4, r4, r6
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	42a5      	cmp	r5, r4
 80068f4:	d105      	bne.n	8006902 <__libc_init_array+0x2e>
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068fc:	4798      	blx	r3
 80068fe:	3501      	adds	r5, #1
 8006900:	e7ee      	b.n	80068e0 <__libc_init_array+0xc>
 8006902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006906:	4798      	blx	r3
 8006908:	3501      	adds	r5, #1
 800690a:	e7f2      	b.n	80068f2 <__libc_init_array+0x1e>
 800690c:	08007a64 	.word	0x08007a64
 8006910:	08007a64 	.word	0x08007a64
 8006914:	08007a64 	.word	0x08007a64
 8006918:	08007a68 	.word	0x08007a68

0800691c <memset>:
 800691c:	4603      	mov	r3, r0
 800691e:	4402      	add	r2, r0
 8006920:	4293      	cmp	r3, r2
 8006922:	d100      	bne.n	8006926 <memset+0xa>
 8006924:	4770      	bx	lr
 8006926:	f803 1b01 	strb.w	r1, [r3], #1
 800692a:	e7f9      	b.n	8006920 <memset+0x4>

0800692c <siprintf>:
 800692c:	b40e      	push	{r1, r2, r3}
 800692e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006932:	b500      	push	{lr}
 8006934:	b09c      	sub	sp, #112	; 0x70
 8006936:	ab1d      	add	r3, sp, #116	; 0x74
 8006938:	9002      	str	r0, [sp, #8]
 800693a:	9006      	str	r0, [sp, #24]
 800693c:	9107      	str	r1, [sp, #28]
 800693e:	9104      	str	r1, [sp, #16]
 8006940:	4808      	ldr	r0, [pc, #32]	; (8006964 <siprintf+0x38>)
 8006942:	4909      	ldr	r1, [pc, #36]	; (8006968 <siprintf+0x3c>)
 8006944:	f853 2b04 	ldr.w	r2, [r3], #4
 8006948:	9105      	str	r1, [sp, #20]
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	a902      	add	r1, sp, #8
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	f000 f914 	bl	8006b7c <_svfiprintf_r>
 8006954:	2200      	movs	r2, #0
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	b01c      	add	sp, #112	; 0x70
 800695c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006960:	b003      	add	sp, #12
 8006962:	4770      	bx	lr
 8006964:	2000001c 	.word	0x2000001c
 8006968:	ffff0208 	.word	0xffff0208

0800696c <strcpy>:
 800696c:	4603      	mov	r3, r0
 800696e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006972:	f803 2b01 	strb.w	r2, [r3], #1
 8006976:	2a00      	cmp	r2, #0
 8006978:	d1f9      	bne.n	800696e <strcpy+0x2>
 800697a:	4770      	bx	lr

0800697c <strstr>:
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	7803      	ldrb	r3, [r0, #0]
 8006980:	b17b      	cbz	r3, 80069a2 <strstr+0x26>
 8006982:	4604      	mov	r4, r0
 8006984:	7823      	ldrb	r3, [r4, #0]
 8006986:	4620      	mov	r0, r4
 8006988:	1c66      	adds	r6, r4, #1
 800698a:	b17b      	cbz	r3, 80069ac <strstr+0x30>
 800698c:	1e4a      	subs	r2, r1, #1
 800698e:	1e63      	subs	r3, r4, #1
 8006990:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006994:	b14d      	cbz	r5, 80069aa <strstr+0x2e>
 8006996:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800699a:	4634      	mov	r4, r6
 800699c:	42af      	cmp	r7, r5
 800699e:	d0f7      	beq.n	8006990 <strstr+0x14>
 80069a0:	e7f0      	b.n	8006984 <strstr+0x8>
 80069a2:	780b      	ldrb	r3, [r1, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf18      	it	ne
 80069a8:	2000      	movne	r0, #0
 80069aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ac:	4618      	mov	r0, r3
 80069ae:	e7fc      	b.n	80069aa <strstr+0x2e>

080069b0 <memcpy>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	1e43      	subs	r3, r0, #1
 80069b4:	440a      	add	r2, r1
 80069b6:	4291      	cmp	r1, r2
 80069b8:	d100      	bne.n	80069bc <memcpy+0xc>
 80069ba:	bd10      	pop	{r4, pc}
 80069bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c4:	e7f7      	b.n	80069b6 <memcpy+0x6>
	...

080069c8 <_malloc_r>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	1ccd      	adds	r5, r1, #3
 80069cc:	f025 0503 	bic.w	r5, r5, #3
 80069d0:	3508      	adds	r5, #8
 80069d2:	2d0c      	cmp	r5, #12
 80069d4:	bf38      	it	cc
 80069d6:	250c      	movcc	r5, #12
 80069d8:	2d00      	cmp	r5, #0
 80069da:	4606      	mov	r6, r0
 80069dc:	db01      	blt.n	80069e2 <_malloc_r+0x1a>
 80069de:	42a9      	cmp	r1, r5
 80069e0:	d903      	bls.n	80069ea <_malloc_r+0x22>
 80069e2:	230c      	movs	r3, #12
 80069e4:	6033      	str	r3, [r6, #0]
 80069e6:	2000      	movs	r0, #0
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
 80069ea:	f000 fb7e 	bl	80070ea <__malloc_lock>
 80069ee:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <_malloc_r+0xac>)
 80069f0:	6814      	ldr	r4, [r2, #0]
 80069f2:	4621      	mov	r1, r4
 80069f4:	b991      	cbnz	r1, 8006a1c <_malloc_r+0x54>
 80069f6:	4c20      	ldr	r4, [pc, #128]	; (8006a78 <_malloc_r+0xb0>)
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	b91b      	cbnz	r3, 8006a04 <_malloc_r+0x3c>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 fb3d 	bl	800707c <_sbrk_r>
 8006a02:	6020      	str	r0, [r4, #0]
 8006a04:	4629      	mov	r1, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	f000 fb38 	bl	800707c <_sbrk_r>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d124      	bne.n	8006a5a <_malloc_r+0x92>
 8006a10:	230c      	movs	r3, #12
 8006a12:	4630      	mov	r0, r6
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	f000 fb69 	bl	80070ec <__malloc_unlock>
 8006a1a:	e7e4      	b.n	80069e6 <_malloc_r+0x1e>
 8006a1c:	680b      	ldr	r3, [r1, #0]
 8006a1e:	1b5b      	subs	r3, r3, r5
 8006a20:	d418      	bmi.n	8006a54 <_malloc_r+0x8c>
 8006a22:	2b0b      	cmp	r3, #11
 8006a24:	d90f      	bls.n	8006a46 <_malloc_r+0x7e>
 8006a26:	600b      	str	r3, [r1, #0]
 8006a28:	18cc      	adds	r4, r1, r3
 8006a2a:	50cd      	str	r5, [r1, r3]
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 fb5d 	bl	80070ec <__malloc_unlock>
 8006a32:	f104 000b 	add.w	r0, r4, #11
 8006a36:	1d23      	adds	r3, r4, #4
 8006a38:	f020 0007 	bic.w	r0, r0, #7
 8006a3c:	1ac3      	subs	r3, r0, r3
 8006a3e:	d0d3      	beq.n	80069e8 <_malloc_r+0x20>
 8006a40:	425a      	negs	r2, r3
 8006a42:	50e2      	str	r2, [r4, r3]
 8006a44:	e7d0      	b.n	80069e8 <_malloc_r+0x20>
 8006a46:	684b      	ldr	r3, [r1, #4]
 8006a48:	428c      	cmp	r4, r1
 8006a4a:	bf16      	itet	ne
 8006a4c:	6063      	strne	r3, [r4, #4]
 8006a4e:	6013      	streq	r3, [r2, #0]
 8006a50:	460c      	movne	r4, r1
 8006a52:	e7eb      	b.n	8006a2c <_malloc_r+0x64>
 8006a54:	460c      	mov	r4, r1
 8006a56:	6849      	ldr	r1, [r1, #4]
 8006a58:	e7cc      	b.n	80069f4 <_malloc_r+0x2c>
 8006a5a:	1cc4      	adds	r4, r0, #3
 8006a5c:	f024 0403 	bic.w	r4, r4, #3
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d005      	beq.n	8006a70 <_malloc_r+0xa8>
 8006a64:	1a21      	subs	r1, r4, r0
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 fb08 	bl	800707c <_sbrk_r>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d0cf      	beq.n	8006a10 <_malloc_r+0x48>
 8006a70:	6025      	str	r5, [r4, #0]
 8006a72:	e7db      	b.n	8006a2c <_malloc_r+0x64>
 8006a74:	200004f0 	.word	0x200004f0
 8006a78:	200004f4 	.word	0x200004f4

08006a7c <_realloc_r>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	4607      	mov	r7, r0
 8006a80:	4614      	mov	r4, r2
 8006a82:	460e      	mov	r6, r1
 8006a84:	b921      	cbnz	r1, 8006a90 <_realloc_r+0x14>
 8006a86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	f7ff bf9c 	b.w	80069c8 <_malloc_r>
 8006a90:	b922      	cbnz	r2, 8006a9c <_realloc_r+0x20>
 8006a92:	f000 fb2d 	bl	80070f0 <_free_r>
 8006a96:	4625      	mov	r5, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a9c:	f000 fb74 	bl	8007188 <_malloc_usable_size_r>
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d20f      	bcs.n	8006ac4 <_realloc_r+0x48>
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f7ff ff8e 	bl	80069c8 <_malloc_r>
 8006aac:	4605      	mov	r5, r0
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0f2      	beq.n	8006a98 <_realloc_r+0x1c>
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	f7ff ff7b 	bl	80069b0 <memcpy>
 8006aba:	4631      	mov	r1, r6
 8006abc:	4638      	mov	r0, r7
 8006abe:	f000 fb17 	bl	80070f0 <_free_r>
 8006ac2:	e7e9      	b.n	8006a98 <_realloc_r+0x1c>
 8006ac4:	4635      	mov	r5, r6
 8006ac6:	e7e7      	b.n	8006a98 <_realloc_r+0x1c>

08006ac8 <__ssputs_r>:
 8006ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006acc:	688e      	ldr	r6, [r1, #8]
 8006ace:	4682      	mov	sl, r0
 8006ad0:	429e      	cmp	r6, r3
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	4690      	mov	r8, r2
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	d837      	bhi.n	8006b4a <__ssputs_r+0x82>
 8006ada:	898a      	ldrh	r2, [r1, #12]
 8006adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ae0:	d031      	beq.n	8006b46 <__ssputs_r+0x7e>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	6825      	ldr	r5, [r4, #0]
 8006ae6:	6909      	ldr	r1, [r1, #16]
 8006ae8:	1a6f      	subs	r7, r5, r1
 8006aea:	6965      	ldr	r5, [r4, #20]
 8006aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006af0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006af4:	f109 0301 	add.w	r3, r9, #1
 8006af8:	443b      	add	r3, r7
 8006afa:	429d      	cmp	r5, r3
 8006afc:	bf38      	it	cc
 8006afe:	461d      	movcc	r5, r3
 8006b00:	0553      	lsls	r3, r2, #21
 8006b02:	d530      	bpl.n	8006b66 <__ssputs_r+0x9e>
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7ff ff5f 	bl	80069c8 <_malloc_r>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b950      	cbnz	r0, 8006b24 <__ssputs_r+0x5c>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b14:	f8ca 3000 	str.w	r3, [sl]
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b24:	463a      	mov	r2, r7
 8006b26:	6921      	ldr	r1, [r4, #16]
 8006b28:	f7ff ff42 	bl	80069b0 <memcpy>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	6126      	str	r6, [r4, #16]
 8006b3a:	443e      	add	r6, r7
 8006b3c:	6026      	str	r6, [r4, #0]
 8006b3e:	464e      	mov	r6, r9
 8006b40:	6165      	str	r5, [r4, #20]
 8006b42:	1bed      	subs	r5, r5, r7
 8006b44:	60a5      	str	r5, [r4, #8]
 8006b46:	454e      	cmp	r6, r9
 8006b48:	d900      	bls.n	8006b4c <__ssputs_r+0x84>
 8006b4a:	464e      	mov	r6, r9
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4641      	mov	r1, r8
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	f000 fab1 	bl	80070b8 <memmove>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	2000      	movs	r0, #0
 8006b5a:	1b9b      	subs	r3, r3, r6
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	441e      	add	r6, r3
 8006b62:	6026      	str	r6, [r4, #0]
 8006b64:	e7dc      	b.n	8006b20 <__ssputs_r+0x58>
 8006b66:	462a      	mov	r2, r5
 8006b68:	f7ff ff88 	bl	8006a7c <_realloc_r>
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1e2      	bne.n	8006b38 <__ssputs_r+0x70>
 8006b72:	6921      	ldr	r1, [r4, #16]
 8006b74:	4650      	mov	r0, sl
 8006b76:	f000 fabb 	bl	80070f0 <_free_r>
 8006b7a:	e7c8      	b.n	8006b0e <__ssputs_r+0x46>

08006b7c <_svfiprintf_r>:
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	461d      	mov	r5, r3
 8006b82:	898b      	ldrh	r3, [r1, #12]
 8006b84:	b09d      	sub	sp, #116	; 0x74
 8006b86:	061f      	lsls	r7, r3, #24
 8006b88:	4680      	mov	r8, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	4616      	mov	r6, r2
 8006b8e:	d50f      	bpl.n	8006bb0 <_svfiprintf_r+0x34>
 8006b90:	690b      	ldr	r3, [r1, #16]
 8006b92:	b96b      	cbnz	r3, 8006bb0 <_svfiprintf_r+0x34>
 8006b94:	2140      	movs	r1, #64	; 0x40
 8006b96:	f7ff ff17 	bl	80069c8 <_malloc_r>
 8006b9a:	6020      	str	r0, [r4, #0]
 8006b9c:	6120      	str	r0, [r4, #16]
 8006b9e:	b928      	cbnz	r0, 8006bac <_svfiprintf_r+0x30>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	f8c8 3000 	str.w	r3, [r8]
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006baa:	e0c8      	b.n	8006d3e <_svfiprintf_r+0x1c2>
 8006bac:	2340      	movs	r3, #64	; 0x40
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bba:	2330      	movs	r3, #48	; 0x30
 8006bbc:	f04f 0b01 	mov.w	fp, #1
 8006bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bc4:	9503      	str	r5, [sp, #12]
 8006bc6:	4637      	mov	r7, r6
 8006bc8:	463d      	mov	r5, r7
 8006bca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bce:	b10b      	cbz	r3, 8006bd4 <_svfiprintf_r+0x58>
 8006bd0:	2b25      	cmp	r3, #37	; 0x25
 8006bd2:	d13e      	bne.n	8006c52 <_svfiprintf_r+0xd6>
 8006bd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006bd8:	d00b      	beq.n	8006bf2 <_svfiprintf_r+0x76>
 8006bda:	4653      	mov	r3, sl
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4621      	mov	r1, r4
 8006be0:	4640      	mov	r0, r8
 8006be2:	f7ff ff71 	bl	8006ac8 <__ssputs_r>
 8006be6:	3001      	adds	r0, #1
 8006be8:	f000 80a4 	beq.w	8006d34 <_svfiprintf_r+0x1b8>
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	4453      	add	r3, sl
 8006bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf2:	783b      	ldrb	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 809d 	beq.w	8006d34 <_svfiprintf_r+0x1b8>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c04:	9304      	str	r3, [sp, #16]
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c0e:	462f      	mov	r7, r5
 8006c10:	2205      	movs	r2, #5
 8006c12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c16:	4850      	ldr	r0, [pc, #320]	; (8006d58 <_svfiprintf_r+0x1dc>)
 8006c18:	f000 fa40 	bl	800709c <memchr>
 8006c1c:	9b04      	ldr	r3, [sp, #16]
 8006c1e:	b9d0      	cbnz	r0, 8006c56 <_svfiprintf_r+0xda>
 8006c20:	06d9      	lsls	r1, r3, #27
 8006c22:	bf44      	itt	mi
 8006c24:	2220      	movmi	r2, #32
 8006c26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c2a:	071a      	lsls	r2, r3, #28
 8006c2c:	bf44      	itt	mi
 8006c2e:	222b      	movmi	r2, #43	; 0x2b
 8006c30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c34:	782a      	ldrb	r2, [r5, #0]
 8006c36:	2a2a      	cmp	r2, #42	; 0x2a
 8006c38:	d015      	beq.n	8006c66 <_svfiprintf_r+0xea>
 8006c3a:	462f      	mov	r7, r5
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	250a      	movs	r5, #10
 8006c40:	9a07      	ldr	r2, [sp, #28]
 8006c42:	4639      	mov	r1, r7
 8006c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c48:	3b30      	subs	r3, #48	; 0x30
 8006c4a:	2b09      	cmp	r3, #9
 8006c4c:	d94d      	bls.n	8006cea <_svfiprintf_r+0x16e>
 8006c4e:	b1b8      	cbz	r0, 8006c80 <_svfiprintf_r+0x104>
 8006c50:	e00f      	b.n	8006c72 <_svfiprintf_r+0xf6>
 8006c52:	462f      	mov	r7, r5
 8006c54:	e7b8      	b.n	8006bc8 <_svfiprintf_r+0x4c>
 8006c56:	4a40      	ldr	r2, [pc, #256]	; (8006d58 <_svfiprintf_r+0x1dc>)
 8006c58:	463d      	mov	r5, r7
 8006c5a:	1a80      	subs	r0, r0, r2
 8006c5c:	fa0b f000 	lsl.w	r0, fp, r0
 8006c60:	4318      	orrs	r0, r3
 8006c62:	9004      	str	r0, [sp, #16]
 8006c64:	e7d3      	b.n	8006c0e <_svfiprintf_r+0x92>
 8006c66:	9a03      	ldr	r2, [sp, #12]
 8006c68:	1d11      	adds	r1, r2, #4
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	9103      	str	r1, [sp, #12]
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	db01      	blt.n	8006c76 <_svfiprintf_r+0xfa>
 8006c72:	9207      	str	r2, [sp, #28]
 8006c74:	e004      	b.n	8006c80 <_svfiprintf_r+0x104>
 8006c76:	4252      	negs	r2, r2
 8006c78:	f043 0302 	orr.w	r3, r3, #2
 8006c7c:	9207      	str	r2, [sp, #28]
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	783b      	ldrb	r3, [r7, #0]
 8006c82:	2b2e      	cmp	r3, #46	; 0x2e
 8006c84:	d10c      	bne.n	8006ca0 <_svfiprintf_r+0x124>
 8006c86:	787b      	ldrb	r3, [r7, #1]
 8006c88:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8a:	d133      	bne.n	8006cf4 <_svfiprintf_r+0x178>
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	3702      	adds	r7, #2
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	9203      	str	r2, [sp, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bfb8      	it	lt
 8006c9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c9e:	9305      	str	r3, [sp, #20]
 8006ca0:	4d2e      	ldr	r5, [pc, #184]	; (8006d5c <_svfiprintf_r+0x1e0>)
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	7839      	ldrb	r1, [r7, #0]
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 f9f8 	bl	800709c <memchr>
 8006cac:	b138      	cbz	r0, 8006cbe <_svfiprintf_r+0x142>
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	1b40      	subs	r0, r0, r5
 8006cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	3701      	adds	r7, #1
 8006cba:	4303      	orrs	r3, r0
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	7839      	ldrb	r1, [r7, #0]
 8006cc0:	2206      	movs	r2, #6
 8006cc2:	4827      	ldr	r0, [pc, #156]	; (8006d60 <_svfiprintf_r+0x1e4>)
 8006cc4:	1c7e      	adds	r6, r7, #1
 8006cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cca:	f000 f9e7 	bl	800709c <memchr>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d038      	beq.n	8006d44 <_svfiprintf_r+0x1c8>
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <_svfiprintf_r+0x1e8>)
 8006cd4:	bb13      	cbnz	r3, 8006d1c <_svfiprintf_r+0x1a0>
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	3307      	adds	r3, #7
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	3308      	adds	r3, #8
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce4:	444b      	add	r3, r9
 8006ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce8:	e76d      	b.n	8006bc6 <_svfiprintf_r+0x4a>
 8006cea:	fb05 3202 	mla	r2, r5, r2, r3
 8006cee:	2001      	movs	r0, #1
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	e7a6      	b.n	8006c42 <_svfiprintf_r+0xc6>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	250a      	movs	r5, #10
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	3701      	adds	r7, #1
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d04:	3a30      	subs	r2, #48	; 0x30
 8006d06:	2a09      	cmp	r2, #9
 8006d08:	d903      	bls.n	8006d12 <_svfiprintf_r+0x196>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0c8      	beq.n	8006ca0 <_svfiprintf_r+0x124>
 8006d0e:	9105      	str	r1, [sp, #20]
 8006d10:	e7c6      	b.n	8006ca0 <_svfiprintf_r+0x124>
 8006d12:	fb05 2101 	mla	r1, r5, r1, r2
 8006d16:	2301      	movs	r3, #1
 8006d18:	4607      	mov	r7, r0
 8006d1a:	e7f0      	b.n	8006cfe <_svfiprintf_r+0x182>
 8006d1c:	ab03      	add	r3, sp, #12
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4622      	mov	r2, r4
 8006d22:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <_svfiprintf_r+0x1ec>)
 8006d24:	a904      	add	r1, sp, #16
 8006d26:	4640      	mov	r0, r8
 8006d28:	f3af 8000 	nop.w
 8006d2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006d30:	4681      	mov	r9, r0
 8006d32:	d1d6      	bne.n	8006ce2 <_svfiprintf_r+0x166>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	065b      	lsls	r3, r3, #25
 8006d38:	f53f af35 	bmi.w	8006ba6 <_svfiprintf_r+0x2a>
 8006d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d3e:	b01d      	add	sp, #116	; 0x74
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	ab03      	add	r3, sp, #12
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4622      	mov	r2, r4
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <_svfiprintf_r+0x1ec>)
 8006d4c:	a904      	add	r1, sp, #16
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f000 f882 	bl	8006e58 <_printf_i>
 8006d54:	e7ea      	b.n	8006d2c <_svfiprintf_r+0x1b0>
 8006d56:	bf00      	nop
 8006d58:	08007a30 	.word	0x08007a30
 8006d5c:	08007a36 	.word	0x08007a36
 8006d60:	08007a3a 	.word	0x08007a3a
 8006d64:	00000000 	.word	0x00000000
 8006d68:	08006ac9 	.word	0x08006ac9

08006d6c <_printf_common>:
 8006d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	4691      	mov	r9, r2
 8006d72:	461f      	mov	r7, r3
 8006d74:	688a      	ldr	r2, [r1, #8]
 8006d76:	690b      	ldr	r3, [r1, #16]
 8006d78:	4606      	mov	r6, r0
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bfb8      	it	lt
 8006d7e:	4613      	movlt	r3, r2
 8006d80:	f8c9 3000 	str.w	r3, [r9]
 8006d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d88:	460c      	mov	r4, r1
 8006d8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d8e:	b112      	cbz	r2, 8006d96 <_printf_common+0x2a>
 8006d90:	3301      	adds	r3, #1
 8006d92:	f8c9 3000 	str.w	r3, [r9]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	0699      	lsls	r1, r3, #26
 8006d9a:	bf42      	ittt	mi
 8006d9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006da0:	3302      	addmi	r3, #2
 8006da2:	f8c9 3000 	strmi.w	r3, [r9]
 8006da6:	6825      	ldr	r5, [r4, #0]
 8006da8:	f015 0506 	ands.w	r5, r5, #6
 8006dac:	d107      	bne.n	8006dbe <_printf_common+0x52>
 8006dae:	f104 0a19 	add.w	sl, r4, #25
 8006db2:	68e3      	ldr	r3, [r4, #12]
 8006db4:	f8d9 2000 	ldr.w	r2, [r9]
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	42ab      	cmp	r3, r5
 8006dbc:	dc29      	bgt.n	8006e12 <_printf_common+0xa6>
 8006dbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006dc2:	6822      	ldr	r2, [r4, #0]
 8006dc4:	3300      	adds	r3, #0
 8006dc6:	bf18      	it	ne
 8006dc8:	2301      	movne	r3, #1
 8006dca:	0692      	lsls	r2, r2, #26
 8006dcc:	d42e      	bmi.n	8006e2c <_printf_common+0xc0>
 8006dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	47c0      	blx	r8
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d021      	beq.n	8006e20 <_printf_common+0xb4>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	68e5      	ldr	r5, [r4, #12]
 8006de0:	f003 0306 	and.w	r3, r3, #6
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	bf18      	it	ne
 8006de8:	2500      	movne	r5, #0
 8006dea:	f8d9 2000 	ldr.w	r2, [r9]
 8006dee:	f04f 0900 	mov.w	r9, #0
 8006df2:	bf08      	it	eq
 8006df4:	1aad      	subeq	r5, r5, r2
 8006df6:	68a3      	ldr	r3, [r4, #8]
 8006df8:	6922      	ldr	r2, [r4, #16]
 8006dfa:	bf08      	it	eq
 8006dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e00:	4293      	cmp	r3, r2
 8006e02:	bfc4      	itt	gt
 8006e04:	1a9b      	subgt	r3, r3, r2
 8006e06:	18ed      	addgt	r5, r5, r3
 8006e08:	341a      	adds	r4, #26
 8006e0a:	454d      	cmp	r5, r9
 8006e0c:	d11a      	bne.n	8006e44 <_printf_common+0xd8>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	e008      	b.n	8006e24 <_printf_common+0xb8>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4652      	mov	r2, sl
 8006e16:	4639      	mov	r1, r7
 8006e18:	4630      	mov	r0, r6
 8006e1a:	47c0      	blx	r8
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d103      	bne.n	8006e28 <_printf_common+0xbc>
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e28:	3501      	adds	r5, #1
 8006e2a:	e7c2      	b.n	8006db2 <_printf_common+0x46>
 8006e2c:	2030      	movs	r0, #48	; 0x30
 8006e2e:	18e1      	adds	r1, r4, r3
 8006e30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e3a:	4422      	add	r2, r4
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e42:	e7c4      	b.n	8006dce <_printf_common+0x62>
 8006e44:	2301      	movs	r3, #1
 8006e46:	4622      	mov	r2, r4
 8006e48:	4639      	mov	r1, r7
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d0e6      	beq.n	8006e20 <_printf_common+0xb4>
 8006e52:	f109 0901 	add.w	r9, r9, #1
 8006e56:	e7d8      	b.n	8006e0a <_printf_common+0x9e>

08006e58 <_printf_i>:
 8006e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e60:	460c      	mov	r4, r1
 8006e62:	7e09      	ldrb	r1, [r1, #24]
 8006e64:	b085      	sub	sp, #20
 8006e66:	296e      	cmp	r1, #110	; 0x6e
 8006e68:	4617      	mov	r7, r2
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	4698      	mov	r8, r3
 8006e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e70:	f000 80b3 	beq.w	8006fda <_printf_i+0x182>
 8006e74:	d822      	bhi.n	8006ebc <_printf_i+0x64>
 8006e76:	2963      	cmp	r1, #99	; 0x63
 8006e78:	d036      	beq.n	8006ee8 <_printf_i+0x90>
 8006e7a:	d80a      	bhi.n	8006e92 <_printf_i+0x3a>
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	f000 80b9 	beq.w	8006ff4 <_printf_i+0x19c>
 8006e82:	2958      	cmp	r1, #88	; 0x58
 8006e84:	f000 8083 	beq.w	8006f8e <_printf_i+0x136>
 8006e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e90:	e032      	b.n	8006ef8 <_printf_i+0xa0>
 8006e92:	2964      	cmp	r1, #100	; 0x64
 8006e94:	d001      	beq.n	8006e9a <_printf_i+0x42>
 8006e96:	2969      	cmp	r1, #105	; 0x69
 8006e98:	d1f6      	bne.n	8006e88 <_printf_i+0x30>
 8006e9a:	6820      	ldr	r0, [r4, #0]
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	0605      	lsls	r5, r0, #24
 8006ea0:	f103 0104 	add.w	r1, r3, #4
 8006ea4:	d52a      	bpl.n	8006efc <_printf_i+0xa4>
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6011      	str	r1, [r2, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da03      	bge.n	8006eb6 <_printf_i+0x5e>
 8006eae:	222d      	movs	r2, #45	; 0x2d
 8006eb0:	425b      	negs	r3, r3
 8006eb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006eb6:	486f      	ldr	r0, [pc, #444]	; (8007074 <_printf_i+0x21c>)
 8006eb8:	220a      	movs	r2, #10
 8006eba:	e039      	b.n	8006f30 <_printf_i+0xd8>
 8006ebc:	2973      	cmp	r1, #115	; 0x73
 8006ebe:	f000 809d 	beq.w	8006ffc <_printf_i+0x1a4>
 8006ec2:	d808      	bhi.n	8006ed6 <_printf_i+0x7e>
 8006ec4:	296f      	cmp	r1, #111	; 0x6f
 8006ec6:	d020      	beq.n	8006f0a <_printf_i+0xb2>
 8006ec8:	2970      	cmp	r1, #112	; 0x70
 8006eca:	d1dd      	bne.n	8006e88 <_printf_i+0x30>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	f043 0320 	orr.w	r3, r3, #32
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	e003      	b.n	8006ede <_printf_i+0x86>
 8006ed6:	2975      	cmp	r1, #117	; 0x75
 8006ed8:	d017      	beq.n	8006f0a <_printf_i+0xb2>
 8006eda:	2978      	cmp	r1, #120	; 0x78
 8006edc:	d1d4      	bne.n	8006e88 <_printf_i+0x30>
 8006ede:	2378      	movs	r3, #120	; 0x78
 8006ee0:	4865      	ldr	r0, [pc, #404]	; (8007078 <_printf_i+0x220>)
 8006ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ee6:	e055      	b.n	8006f94 <_printf_i+0x13c>
 8006ee8:	6813      	ldr	r3, [r2, #0]
 8006eea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eee:	1d19      	adds	r1, r3, #4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6011      	str	r1, [r2, #0]
 8006ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e08c      	b.n	8007016 <_printf_i+0x1be>
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f02:	6011      	str	r1, [r2, #0]
 8006f04:	bf18      	it	ne
 8006f06:	b21b      	sxthne	r3, r3
 8006f08:	e7cf      	b.n	8006eaa <_printf_i+0x52>
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	6825      	ldr	r5, [r4, #0]
 8006f0e:	1d18      	adds	r0, r3, #4
 8006f10:	6010      	str	r0, [r2, #0]
 8006f12:	0628      	lsls	r0, r5, #24
 8006f14:	d501      	bpl.n	8006f1a <_printf_i+0xc2>
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	e002      	b.n	8006f20 <_printf_i+0xc8>
 8006f1a:	0668      	lsls	r0, r5, #25
 8006f1c:	d5fb      	bpl.n	8006f16 <_printf_i+0xbe>
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	296f      	cmp	r1, #111	; 0x6f
 8006f22:	bf14      	ite	ne
 8006f24:	220a      	movne	r2, #10
 8006f26:	2208      	moveq	r2, #8
 8006f28:	4852      	ldr	r0, [pc, #328]	; (8007074 <_printf_i+0x21c>)
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f30:	6865      	ldr	r5, [r4, #4]
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	60a5      	str	r5, [r4, #8]
 8006f36:	f2c0 8095 	blt.w	8007064 <_printf_i+0x20c>
 8006f3a:	6821      	ldr	r1, [r4, #0]
 8006f3c:	f021 0104 	bic.w	r1, r1, #4
 8006f40:	6021      	str	r1, [r4, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d13d      	bne.n	8006fc2 <_printf_i+0x16a>
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	f040 808e 	bne.w	8007068 <_printf_i+0x210>
 8006f4c:	4665      	mov	r5, ip
 8006f4e:	2a08      	cmp	r2, #8
 8006f50:	d10b      	bne.n	8006f6a <_printf_i+0x112>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	07db      	lsls	r3, r3, #31
 8006f56:	d508      	bpl.n	8006f6a <_printf_i+0x112>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	6862      	ldr	r2, [r4, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	bfde      	ittt	le
 8006f60:	2330      	movle	r3, #48	; 0x30
 8006f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f6a:	ebac 0305 	sub.w	r3, ip, r5
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	f8cd 8000 	str.w	r8, [sp]
 8006f74:	463b      	mov	r3, r7
 8006f76:	aa03      	add	r2, sp, #12
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff fef6 	bl	8006d6c <_printf_common>
 8006f80:	3001      	adds	r0, #1
 8006f82:	d14d      	bne.n	8007020 <_printf_i+0x1c8>
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f88:	b005      	add	sp, #20
 8006f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f8e:	4839      	ldr	r0, [pc, #228]	; (8007074 <_printf_i+0x21c>)
 8006f90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f94:	6813      	ldr	r3, [r2, #0]
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	1d1d      	adds	r5, r3, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6015      	str	r5, [r2, #0]
 8006f9e:	060a      	lsls	r2, r1, #24
 8006fa0:	d50b      	bpl.n	8006fba <_printf_i+0x162>
 8006fa2:	07ca      	lsls	r2, r1, #31
 8006fa4:	bf44      	itt	mi
 8006fa6:	f041 0120 	orrmi.w	r1, r1, #32
 8006faa:	6021      	strmi	r1, [r4, #0]
 8006fac:	b91b      	cbnz	r3, 8006fb6 <_printf_i+0x15e>
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	f022 0220 	bic.w	r2, r2, #32
 8006fb4:	6022      	str	r2, [r4, #0]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	e7b7      	b.n	8006f2a <_printf_i+0xd2>
 8006fba:	064d      	lsls	r5, r1, #25
 8006fbc:	bf48      	it	mi
 8006fbe:	b29b      	uxthmi	r3, r3
 8006fc0:	e7ef      	b.n	8006fa2 <_printf_i+0x14a>
 8006fc2:	4665      	mov	r5, ip
 8006fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fc8:	fb02 3311 	mls	r3, r2, r1, r3
 8006fcc:	5cc3      	ldrb	r3, [r0, r3]
 8006fce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d1f5      	bne.n	8006fc4 <_printf_i+0x16c>
 8006fd8:	e7b9      	b.n	8006f4e <_printf_i+0xf6>
 8006fda:	6813      	ldr	r3, [r2, #0]
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	1d18      	adds	r0, r3, #4
 8006fe0:	6961      	ldr	r1, [r4, #20]
 8006fe2:	6010      	str	r0, [r2, #0]
 8006fe4:	0628      	lsls	r0, r5, #24
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	d501      	bpl.n	8006fee <_printf_i+0x196>
 8006fea:	6019      	str	r1, [r3, #0]
 8006fec:	e002      	b.n	8006ff4 <_printf_i+0x19c>
 8006fee:	066a      	lsls	r2, r5, #25
 8006ff0:	d5fb      	bpl.n	8006fea <_printf_i+0x192>
 8006ff2:	8019      	strh	r1, [r3, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4665      	mov	r5, ip
 8006ff8:	6123      	str	r3, [r4, #16]
 8006ffa:	e7b9      	b.n	8006f70 <_printf_i+0x118>
 8006ffc:	6813      	ldr	r3, [r2, #0]
 8006ffe:	1d19      	adds	r1, r3, #4
 8007000:	6011      	str	r1, [r2, #0]
 8007002:	681d      	ldr	r5, [r3, #0]
 8007004:	6862      	ldr	r2, [r4, #4]
 8007006:	2100      	movs	r1, #0
 8007008:	4628      	mov	r0, r5
 800700a:	f000 f847 	bl	800709c <memchr>
 800700e:	b108      	cbz	r0, 8007014 <_printf_i+0x1bc>
 8007010:	1b40      	subs	r0, r0, r5
 8007012:	6060      	str	r0, [r4, #4]
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	2300      	movs	r3, #0
 800701a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800701e:	e7a7      	b.n	8006f70 <_printf_i+0x118>
 8007020:	6923      	ldr	r3, [r4, #16]
 8007022:	462a      	mov	r2, r5
 8007024:	4639      	mov	r1, r7
 8007026:	4630      	mov	r0, r6
 8007028:	47c0      	blx	r8
 800702a:	3001      	adds	r0, #1
 800702c:	d0aa      	beq.n	8006f84 <_printf_i+0x12c>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	079b      	lsls	r3, r3, #30
 8007032:	d413      	bmi.n	800705c <_printf_i+0x204>
 8007034:	68e0      	ldr	r0, [r4, #12]
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	4298      	cmp	r0, r3
 800703a:	bfb8      	it	lt
 800703c:	4618      	movlt	r0, r3
 800703e:	e7a3      	b.n	8006f88 <_printf_i+0x130>
 8007040:	2301      	movs	r3, #1
 8007042:	464a      	mov	r2, r9
 8007044:	4639      	mov	r1, r7
 8007046:	4630      	mov	r0, r6
 8007048:	47c0      	blx	r8
 800704a:	3001      	adds	r0, #1
 800704c:	d09a      	beq.n	8006f84 <_printf_i+0x12c>
 800704e:	3501      	adds	r5, #1
 8007050:	68e3      	ldr	r3, [r4, #12]
 8007052:	9a03      	ldr	r2, [sp, #12]
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	42ab      	cmp	r3, r5
 8007058:	dcf2      	bgt.n	8007040 <_printf_i+0x1e8>
 800705a:	e7eb      	b.n	8007034 <_printf_i+0x1dc>
 800705c:	2500      	movs	r5, #0
 800705e:	f104 0919 	add.w	r9, r4, #25
 8007062:	e7f5      	b.n	8007050 <_printf_i+0x1f8>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1ac      	bne.n	8006fc2 <_printf_i+0x16a>
 8007068:	7803      	ldrb	r3, [r0, #0]
 800706a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800706e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007072:	e76c      	b.n	8006f4e <_printf_i+0xf6>
 8007074:	08007a41 	.word	0x08007a41
 8007078:	08007a52 	.word	0x08007a52

0800707c <_sbrk_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	2300      	movs	r3, #0
 8007080:	4c05      	ldr	r4, [pc, #20]	; (8007098 <_sbrk_r+0x1c>)
 8007082:	4605      	mov	r5, r0
 8007084:	4608      	mov	r0, r1
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	f7fb fb0c 	bl	80026a4 <_sbrk>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_sbrk_r+0x1a>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	b103      	cbz	r3, 8007096 <_sbrk_r+0x1a>
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200007b8 	.word	0x200007b8

0800709c <memchr>:
 800709c:	b510      	push	{r4, lr}
 800709e:	b2c9      	uxtb	r1, r1
 80070a0:	4402      	add	r2, r0
 80070a2:	4290      	cmp	r0, r2
 80070a4:	4603      	mov	r3, r0
 80070a6:	d101      	bne.n	80070ac <memchr+0x10>
 80070a8:	2300      	movs	r3, #0
 80070aa:	e003      	b.n	80070b4 <memchr+0x18>
 80070ac:	781c      	ldrb	r4, [r3, #0]
 80070ae:	3001      	adds	r0, #1
 80070b0:	428c      	cmp	r4, r1
 80070b2:	d1f6      	bne.n	80070a2 <memchr+0x6>
 80070b4:	4618      	mov	r0, r3
 80070b6:	bd10      	pop	{r4, pc}

080070b8 <memmove>:
 80070b8:	4288      	cmp	r0, r1
 80070ba:	b510      	push	{r4, lr}
 80070bc:	eb01 0302 	add.w	r3, r1, r2
 80070c0:	d807      	bhi.n	80070d2 <memmove+0x1a>
 80070c2:	1e42      	subs	r2, r0, #1
 80070c4:	4299      	cmp	r1, r3
 80070c6:	d00a      	beq.n	80070de <memmove+0x26>
 80070c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80070d0:	e7f8      	b.n	80070c4 <memmove+0xc>
 80070d2:	4283      	cmp	r3, r0
 80070d4:	d9f5      	bls.n	80070c2 <memmove+0xa>
 80070d6:	1881      	adds	r1, r0, r2
 80070d8:	1ad2      	subs	r2, r2, r3
 80070da:	42d3      	cmn	r3, r2
 80070dc:	d100      	bne.n	80070e0 <memmove+0x28>
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80070e8:	e7f7      	b.n	80070da <memmove+0x22>

080070ea <__malloc_lock>:
 80070ea:	4770      	bx	lr

080070ec <__malloc_unlock>:
 80070ec:	4770      	bx	lr
	...

080070f0 <_free_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4605      	mov	r5, r0
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d043      	beq.n	8007180 <_free_r+0x90>
 80070f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fc:	1f0c      	subs	r4, r1, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	18e4      	addlt	r4, r4, r3
 8007104:	f7ff fff1 	bl	80070ea <__malloc_lock>
 8007108:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <_free_r+0x94>)
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	4610      	mov	r0, r2
 800710e:	b933      	cbnz	r3, 800711e <_free_r+0x2e>
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	6014      	str	r4, [r2, #0]
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800711a:	f7ff bfe7 	b.w	80070ec <__malloc_unlock>
 800711e:	42a3      	cmp	r3, r4
 8007120:	d90b      	bls.n	800713a <_free_r+0x4a>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	1862      	adds	r2, r4, r1
 8007126:	4293      	cmp	r3, r2
 8007128:	bf01      	itttt	eq
 800712a:	681a      	ldreq	r2, [r3, #0]
 800712c:	685b      	ldreq	r3, [r3, #4]
 800712e:	1852      	addeq	r2, r2, r1
 8007130:	6022      	streq	r2, [r4, #0]
 8007132:	6063      	str	r3, [r4, #4]
 8007134:	6004      	str	r4, [r0, #0]
 8007136:	e7ed      	b.n	8007114 <_free_r+0x24>
 8007138:	4613      	mov	r3, r2
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	b10a      	cbz	r2, 8007142 <_free_r+0x52>
 800713e:	42a2      	cmp	r2, r4
 8007140:	d9fa      	bls.n	8007138 <_free_r+0x48>
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	1858      	adds	r0, r3, r1
 8007146:	42a0      	cmp	r0, r4
 8007148:	d10b      	bne.n	8007162 <_free_r+0x72>
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	4401      	add	r1, r0
 800714e:	1858      	adds	r0, r3, r1
 8007150:	4282      	cmp	r2, r0
 8007152:	6019      	str	r1, [r3, #0]
 8007154:	d1de      	bne.n	8007114 <_free_r+0x24>
 8007156:	6810      	ldr	r0, [r2, #0]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	4401      	add	r1, r0
 800715c:	6019      	str	r1, [r3, #0]
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	e7d8      	b.n	8007114 <_free_r+0x24>
 8007162:	d902      	bls.n	800716a <_free_r+0x7a>
 8007164:	230c      	movs	r3, #12
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	e7d4      	b.n	8007114 <_free_r+0x24>
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1821      	adds	r1, r4, r0
 800716e:	428a      	cmp	r2, r1
 8007170:	bf01      	itttt	eq
 8007172:	6811      	ldreq	r1, [r2, #0]
 8007174:	6852      	ldreq	r2, [r2, #4]
 8007176:	1809      	addeq	r1, r1, r0
 8007178:	6021      	streq	r1, [r4, #0]
 800717a:	6062      	str	r2, [r4, #4]
 800717c:	605c      	str	r4, [r3, #4]
 800717e:	e7c9      	b.n	8007114 <_free_r+0x24>
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	200004f0 	.word	0x200004f0

08007188 <_malloc_usable_size_r>:
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f18      	subs	r0, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfbc      	itt	lt
 8007192:	580b      	ldrlt	r3, [r1, r0]
 8007194:	18c0      	addlt	r0, r0, r3
 8007196:	4770      	bx	lr

08007198 <trunc>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800719e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 80071a2:	2a13      	cmp	r2, #19
 80071a4:	4603      	mov	r3, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	dc10      	bgt.n	80071cc <trunc+0x34>
 80071aa:	2a00      	cmp	r2, #0
 80071ac:	bfb3      	iteet	lt
 80071ae:	2000      	movlt	r0, #0
 80071b0:	2000      	movge	r0, #0
 80071b2:	4b10      	ldrge	r3, [pc, #64]	; (80071f4 <trunc+0x5c>)
 80071b4:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 80071b8:	bfa4      	itt	ge
 80071ba:	fa43 f202 	asrge.w	r2, r3, r2
 80071be:	ea24 0102 	bicge.w	r1, r4, r2
 80071c2:	4603      	mov	r3, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	4618      	mov	r0, r3
 80071c8:	4621      	mov	r1, r4
 80071ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071cc:	2a33      	cmp	r2, #51	; 0x33
 80071ce:	dd07      	ble.n	80071e0 <trunc+0x48>
 80071d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80071d4:	d1f7      	bne.n	80071c6 <trunc+0x2e>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	f7f8 ffc7 	bl	800016c <__adddf3>
 80071de:	e7f0      	b.n	80071c2 <trunc+0x2a>
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e4:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80071e8:	fa22 f505 	lsr.w	r5, r2, r5
 80071ec:	ea20 0005 	bic.w	r0, r0, r5
 80071f0:	e7e7      	b.n	80071c2 <trunc+0x2a>
 80071f2:	bf00      	nop
 80071f4:	000fffff 	.word	0x000fffff

080071f8 <_init>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr

08007204 <_fini>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	bf00      	nop
 8007208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720a:	bc08      	pop	{r3}
 800720c:	469e      	mov	lr, r3
 800720e:	4770      	bx	lr
