
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  0800d5c0  0800d5c0  0001d5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e388  0800e388  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800e388  0800e388  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e388  0800e388  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e388  0800e388  0001e388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e38c  0800e38c  0001e38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800e390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000240  0800e5d0  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  0800e5d0  00020b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181b4  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000308b  00000000  00000000  0003841d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  0003b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ed1  00000000  00000000  0003d970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faf9  00000000  00000000  00041841  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007867f  00000000  00000000  0005133a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c99b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff0  00000000  00000000  000c9a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5a4 	.word	0x0800d5a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800d5a4 	.word	0x0800d5a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <nmea0183_checksum>:
	}
}
//--------------------------------------------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]

	for(j = 1; j < strlen(msg) - 4; j++)
 8001140:	2301      	movs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	e00a      	b.n	800115c <nmea0183_checksum+0x2c>
	{
		checksum = checksum^(unsigned)msg[j];
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4053      	eors	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
	for(j = 1; j < strlen(msg) - 4; j++)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7fe fff7 	bl	8000150 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	1f1a      	subs	r2, r3, #4
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8ec      	bhi.n	8001146 <nmea0183_checksum+0x16>
	}
	return checksum;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <parsing_GPGLL_line>:

//--------------------------------------------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b0a9      	sub	sp, #164	; 0xa4
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];										// Main buffer for GPGLL line
	int size = sizeof(nmeaSnt);
 8001180:	2331      	movs	r3, #49	; 0x31
 8001182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	memset(nmeaSnt, 0, size);
 8001186:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800118a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 ffa7 	bl	800a0e4 <memset>

	//Copy to  "*" from str_GPGLL in nmeaSnt
	int i=0;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011a2:	e010      	b.n	80011c6 <parsing_GPGLL_line+0x4e>
	{
		nmeaSnt[i]=str_GPGLL[i];    						// copy bytes from str_GPGLL in nmeaSnt
 80011a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	7819      	ldrb	r1, [r3, #0]
 80011ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 80011bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b2a      	cmp	r3, #42	; 0x2a
 80011d2:	d003      	beq.n	80011dc <parsing_GPGLL_line+0x64>
 80011d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011d8:	2b31      	cmp	r3, #49	; 0x31
 80011da:	dde3      	ble.n	80011a4 <parsing_GPGLL_line+0x2c>
	}
	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 80011dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011e0:	2100      	movs	r1, #0
 80011e2:	460a      	mov	r2, r1
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	460a      	mov	r2, r1
 80011e8:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"  (after '*' are checksum two numbers)
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 80011ea:	212a      	movs	r1, #42	; 0x2a
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f008 ffb0 	bl	800a152 <strchr>
 80011f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 80011f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fa:	3301      	adds	r3, #1
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	873b      	strh	r3, [r7, #56]	; 0x38
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001202:	2300      	movs	r3, #0
 8001204:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff8f 	bl	8001130 <nmea0183_checksum>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	char hex[3];
	sprintf(hex, "%x", intSum);
 8001218:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800121c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001220:	49b2      	ldr	r1, [pc, #712]	; (80014ec <parsing_GPGLL_line+0x374>)
 8001222:	4618      	mov	r0, r3
 8001224:	f008 ff66 	bl	800a0f4 <siprintf>

	if(strstr(smNmbr, hex) != NULL)                         // Check if checksum line equal checksum after '*'
 8001228:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800122c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f008 ffa2 	bl	800a17c <strstr>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8234 	beq.w	80016a8 <parsing_GPGLL_line+0x530>
	{
		// Parsing string
		int i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		int count = 0;                                      // Count of elements
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		while(nmeaSnt[i] != '\0')							// not and of line
 800124c:	e224      	b.n	8001698 <parsing_GPGLL_line+0x520>
		{
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
			{
				int g=0;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				char str[12]={0};
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
				i++;										// Count of chars in nmeaSnt[i] array
 8001260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001264:	3301      	adds	r3, #1
 8001266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				switch (count)
 800126a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800126e:	2b04      	cmp	r3, #4
 8001270:	f200 81ff 	bhi.w	8001672 <parsing_GPGLL_line+0x4fa>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <parsing_GPGLL_line+0x104>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	08001291 	.word	0x08001291
 8001280:	080013e1 	.word	0x080013e1
 8001284:	08001433 	.word	0x08001433
 8001288:	080015a1 	.word	0x080015a1
 800128c:	080015f3 	.word	0x080015f3
				{
					case 0:
						for(g=0; g<10; g++)
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001296:	e014      	b.n	80012c2 <parsing_GPGLL_line+0x14a>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 8001298:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800129c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a0:	4413      	add	r3, r2
 80012a2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80012a6:	4413      	add	r3, r2
 80012a8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80012ac:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	4413      	add	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 80012b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	dde6      	ble.n	8001298 <parsing_GPGLL_line+0x120>
						}
						GPS_data.lat[10] = '\0';
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	729a      	strb	r2, [r3, #10]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 80012d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d4:	220c      	movs	r2, #12
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 ff03 	bl	800a0e4 <memset>
						sprintf(str,"%s", GPS_data.lat);
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	4983      	ldr	r1, [pc, #524]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 ff41 	bl	800a16c <strcpy>
						strcpy(gps_lat, str);
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4880      	ldr	r0, [pc, #512]	; (80014f4 <parsing_GPGLL_line+0x37c>)
 80012f2:	f008 ff3b 	bl	800a16c <strcpy>

						// Convert lat in coordinate for google mups
						// 1. Separate degrees from minutes
						float integer_part_lat = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	677b      	str	r3, [r7, #116]	; 0x74
						float fractional_part_lat = 0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	673b      	str	r3, [r7, #112]	; 0x70
						char integer_part_char_lat[3]={0};
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	2100      	movs	r1, #0
 8001308:	460a      	mov	r2, r1
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	460a      	mov	r2, r1
 800130e:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lat[9]={0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	721a      	strb	r2, [r3, #8]
						uint8_t k=0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

						for(k=0; k<=11; k++)
 8001322:	2300      	movs	r3, #0
 8001324:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001328:	e020      	b.n	800136c <parsing_GPGLL_line+0x1f4>
						{
							if(k<=1)
 800132a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800132e:	2b01      	cmp	r3, #1
 8001330:	d80b      	bhi.n	800134a <parsing_GPGLL_line+0x1d2>
							{
								integer_part_char_lat[k] = GPS_data.lat[k];        	  // Degrees
 8001332:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001336:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800133a:	496d      	ldr	r1, [pc, #436]	; (80014f0 <parsing_GPGLL_line+0x378>)
 800133c:	5c8a      	ldrb	r2, [r1, r2]
 800133e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001342:	440b      	add	r3, r1
 8001344:	f803 2c7c 	strb.w	r2, [r3, #-124]
 8001348:	e00b      	b.n	8001362 <parsing_GPGLL_line+0x1ea>
							}
							else
							{
								fractional_part_char_lat[k-2] = GPS_data.lat[k];      // Minutes
 800134a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800134e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001352:	3b02      	subs	r3, #2
 8001354:	4966      	ldr	r1, [pc, #408]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001356:	5c8a      	ldrb	r2, [r1, r2]
 8001358:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800135c:	440b      	add	r3, r1
 800135e:	f803 2c88 	strb.w	r2, [r3, #-136]
						for(k=0; k<=11; k++)
 8001362:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001366:	3301      	adds	r3, #1
 8001368:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800136c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001370:	2b0b      	cmp	r3, #11
 8001372:	d9da      	bls.n	800132a <parsing_GPGLL_line+0x1b2>
							}
						}

						// 2. Convert string in numbers
						integer_part_lat = atoi(integer_part_char_lat);          // save int part
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4618      	mov	r0, r3
 800137a:	f008 fe60 	bl	800a03e <atoi>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fc95 	bl	8000cb0 <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	677b      	str	r3, [r7, #116]	; 0x74
						fractional_part_lat = atof(fractional_part_char_lat);	 // float part
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f008 fe52 	bl	800a038 <atof>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4618      	mov	r0, r3
 800139a:	4621      	mov	r1, r4
 800139c:	f7ff fb7e 	bl	8000a9c <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
 						// 3. Convert in degrees
						fractional_part_lat = (fractional_part_lat/60);
 80013a4:	4954      	ldr	r1, [pc, #336]	; (80014f8 <parsing_GPGLL_line+0x380>)
 80013a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013a8:	f7ff fd8a 	bl	8000ec0 <__aeabi_fdiv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	673b      	str	r3, [r7, #112]	; 0x70
						integer_part_lat = integer_part_lat + fractional_part_lat;
 80013b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80013b2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013b4:	f7ff fbc8 	bl	8000b48 <__addsf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
						// 4. Convert in string and save it in global variable
                        gcvt(integer_part_lat, 11, gps_latitude );
 80013bc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013be:	f7ff f833 	bl	8000428 <__aeabi_f2d>
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <parsing_GPGLL_line+0x384>)
 80013c4:	220b      	movs	r2, #11
 80013c6:	f008 fe3f 	bl	800a048 <gcvt>
                        gps_latitude[9] = '\0';
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <parsing_GPGLL_line+0x384>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	725a      	strb	r2, [r3, #9]

						i = i+g;
 80013d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d8:	4413      	add	r3, r2
 80013da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80013de:	e148      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 1:
						for (g =0; g<1; g++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013e6:	e015      	b.n	8001414 <parsing_GPGLL_line+0x29c>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 80013e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013f0:	4413      	add	r3, r2
 80013f2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80013f6:	4413      	add	r3, r2
 80013f8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80013fc:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80013fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001402:	4413      	add	r3, r2
 8001404:	330b      	adds	r3, #11
 8001406:	460a      	mov	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 800140a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800140e:	3301      	adds	r3, #1
 8001410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001418:	2b00      	cmp	r3, #0
 800141a:	dde5      	ble.n	80013e8 <parsing_GPGLL_line+0x270>
						}
						GPS_data.lat_letter[2] = '\0';
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <parsing_GPGLL_line+0x378>)
 800141e:	2200      	movs	r2, #0
 8001420:	735a      	strb	r2, [r3, #13]
						i = i+g;
 8001422:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800142a:	4413      	add	r3, r2
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001430:	e11f      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 2:
						for(g=0; g<11; g++)
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001438:	e015      	b.n	8001466 <parsing_GPGLL_line+0x2ee>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 800143a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001442:	4413      	add	r3, r2
 8001444:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001448:	4413      	add	r3, r2
 800144a:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800144e:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001454:	4413      	add	r3, r2
 8001456:	330d      	adds	r3, #13
 8001458:	460a      	mov	r2, r1
 800145a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 800145c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800146a:	2b0a      	cmp	r3, #10
 800146c:	dde5      	ble.n	800143a <parsing_GPGLL_line+0x2c2>
						}
						GPS_data.lon[11] = '\0';
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <parsing_GPGLL_line+0x378>)
 8001470:	2200      	movs	r2, #0
 8001472:	761a      	strb	r2, [r3, #24]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	220c      	movs	r2, #12
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fe31 	bl	800a0e4 <memset>
						sprintf(str,"%s", GPS_data.lon);
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	491e      	ldr	r1, [pc, #120]	; (8001500 <parsing_GPGLL_line+0x388>)
 8001488:	4618      	mov	r0, r3
 800148a:	f008 fe6f 	bl	800a16c <strcpy>
						strcpy(gps_lon, str);
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	4619      	mov	r1, r3
 8001494:	481b      	ldr	r0, [pc, #108]	; (8001504 <parsing_GPGLL_line+0x38c>)
 8001496:	f008 fe69 	bl	800a16c <strcpy>

						// Convert lon in coordinate for google mups
						// // 1. Separate degrees from minutes
						float integer_part_lon = 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	67fb      	str	r3, [r7, #124]	; 0x7c
						float fractional_part_lon = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	67bb      	str	r3, [r7, #120]	; 0x78
						char integer_part_char_lon[3]={0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2100      	movs	r1, #0
 80014ac:	460a      	mov	r2, r1
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	460a      	mov	r2, r1
 80014b2:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lon[10]={0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	811a      	strh	r2, [r3, #8]

						for(k=0; k<=11; k++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80014c6:	e031      	b.n	800152c <parsing_GPGLL_line+0x3b4>
						{
							if(k<=2)
 80014c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d81b      	bhi.n	8001508 <parsing_GPGLL_line+0x390>
							{
								integer_part_char_lon[k] = GPS_data.lon[k];
 80014d0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80014d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <parsing_GPGLL_line+0x378>)
 80014da:	440a      	add	r2, r1
 80014dc:	7b52      	ldrb	r2, [r2, #13]
 80014de:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80014e2:	440b      	add	r3, r1
 80014e4:	f803 2c8c 	strb.w	r2, [r3, #-140]
 80014e8:	e01b      	b.n	8001522 <parsing_GPGLL_line+0x3aa>
 80014ea:	bf00      	nop
 80014ec:	0800d5c0 	.word	0x0800d5c0
 80014f0:	20000718 	.word	0x20000718
 80014f4:	200006f4 	.word	0x200006f4
 80014f8:	42700000 	.word	0x42700000
 80014fc:	200006e4 	.word	0x200006e4
 8001500:	20000725 	.word	0x20000725
 8001504:	20000704 	.word	0x20000704
							}
							else
							{
								fractional_part_char_lon[k-3] = GPS_data.lon[k];
 8001508:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800150c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001510:	3b03      	subs	r3, #3
 8001512:	4967      	ldr	r1, [pc, #412]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001514:	440a      	add	r2, r1
 8001516:	7b52      	ldrb	r2, [r2, #13]
 8001518:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800151c:	440b      	add	r3, r1
 800151e:	f803 2c98 	strb.w	r2, [r3, #-152]
						for(k=0; k<=11; k++)
 8001522:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001526:	3301      	adds	r3, #1
 8001528:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800152c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001530:	2b0b      	cmp	r3, #11
 8001532:	d9c9      	bls.n	80014c8 <parsing_GPGLL_line+0x350>
							}
						}

						// 2. Convert string in numbers
						integer_part_lon = atoi(integer_part_char_lon);          // save int part
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4618      	mov	r0, r3
 800153a:	f008 fd80 	bl	800a03e <atoi>
 800153e:	4603      	mov	r3, r0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fbb5 	bl	8000cb0 <__aeabi_i2f>
 8001546:	4603      	mov	r3, r0
 8001548:	67fb      	str	r3, [r7, #124]	; 0x7c
						fractional_part_lon = atof(fractional_part_char_lon);	 // float part
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f008 fd72 	bl	800a038 <atof>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4618      	mov	r0, r3
 800155a:	4621      	mov	r1, r4
 800155c:	f7ff fa9e 	bl	8000a9c <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	67bb      	str	r3, [r7, #120]	; 0x78
						// 3. Convert in degrees
						fractional_part_lon = (fractional_part_lon/60);
 8001564:	4953      	ldr	r1, [pc, #332]	; (80016b4 <parsing_GPGLL_line+0x53c>)
 8001566:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001568:	f7ff fcaa 	bl	8000ec0 <__aeabi_fdiv>
 800156c:	4603      	mov	r3, r0
 800156e:	67bb      	str	r3, [r7, #120]	; 0x78
						integer_part_lon = integer_part_lon + fractional_part_lon;
 8001570:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001572:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001574:	f7ff fae8 	bl	8000b48 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	67fb      	str	r3, [r7, #124]	; 0x7c
						// 4. Convert in string and save it in global variable
					    gcvt(integer_part_lon, 11, gps_lontitude );
 800157c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800157e:	f7fe ff53 	bl	8000428 <__aeabi_f2d>
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <parsing_GPGLL_line+0x540>)
 8001584:	220b      	movs	r2, #11
 8001586:	f008 fd5f 	bl	800a048 <gcvt>
					    gps_lontitude[10] = '\0';
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <parsing_GPGLL_line+0x540>)
 800158c:	2200      	movs	r2, #0
 800158e:	729a      	strb	r2, [r3, #10]

						i = i+g;
 8001590:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001598:	4413      	add	r3, r2
 800159a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 800159e:	e068      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 3:
						for(g=0; g<1; g++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a6:	e015      	b.n	80015d4 <parsing_GPGLL_line+0x45c>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 80015a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b0:	4413      	add	r3, r2
 80015b2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <parsing_GPGLL_line+0x538>)
 80015be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c2:	4413      	add	r3, r2
 80015c4:	3319      	adds	r3, #25
 80015c6:	460a      	mov	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 80015ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ce:	3301      	adds	r3, #1
 80015d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dde5      	ble.n	80015a8 <parsing_GPGLL_line+0x430>
						}
						GPS_data.lon_letter[2] = '\0';
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <parsing_GPGLL_line+0x538>)
 80015de:	2200      	movs	r2, #0
 80015e0:	76da      	strb	r2, [r3, #27]
						i = i+g;
 80015e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ea:	4413      	add	r3, r2
 80015ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 80015f0:	e03f      	b.n	8001672 <parsing_GPGLL_line+0x4fa>

					case 4:
						for(g=0; g<6; g++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015f8:	e015      	b.n	8001626 <parsing_GPGLL_line+0x4ae>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 80015fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001602:	4413      	add	r3, r2
 8001604:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001608:	4413      	add	r3, r2
 800160a:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800160e:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001614:	4413      	add	r3, r2
 8001616:	331b      	adds	r3, #27
 8001618:	460a      	mov	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 800161c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800162a:	2b05      	cmp	r3, #5
 800162c:	dde5      	ble.n	80015fa <parsing_GPGLL_line+0x482>
						}
						GPS_data.time[6] = '\0';
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <parsing_GPGLL_line+0x538>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 8001636:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800163a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163e:	4413      	add	r3, r2
 8001640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

						// Save time in global variable
						memset(str, 0 , sizeof(str));
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	220c      	movs	r2, #12
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f008 fd49 	bl	800a0e4 <memset>
						sprintf(str,"%s", GPS_data.time);
 8001652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001656:	4919      	ldr	r1, [pc, #100]	; (80016bc <parsing_GPGLL_line+0x544>)
 8001658:	4618      	mov	r0, r3
 800165a:	f008 fd87 	bl	800a16c <strcpy>
						strcpy(gps_time, str);
 800165e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001662:	4619      	mov	r1, r3
 8001664:	4816      	ldr	r0, [pc, #88]	; (80016c0 <parsing_GPGLL_line+0x548>)
 8001666:	f008 fd81 	bl	800a16c <strcpy>

						GPGGA_data_is_ready = 1;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <parsing_GPGLL_line+0x54c>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

						break;
 8001670:	bf00      	nop
				}
				count++;
 8001672:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
 800167c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b2c      	cmp	r3, #44	; 0x2c
 800168a:	f43f ade0 	beq.w	800124e <parsing_GPGLL_line+0xd6>
			}
			i++;
 800168e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while(nmeaSnt[i] != '\0')							// not and of line
 8001698:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e9      	bne.n	800167c <parsing_GPGLL_line+0x504>
		}
	}
}
 80016a8:	bf00      	nop
 80016aa:	37a4      	adds	r7, #164	; 0xa4
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	20000718 	.word	0x20000718
 80016b4:	42700000 	.word	0x42700000
 80016b8:	20000740 	.word	0x20000740
 80016bc:	20000733 	.word	0x20000733
 80016c0:	20000710 	.word	0x20000710
 80016c4:	2000025c 	.word	0x2000025c

080016c8 <parsing_GPGGA_line>:
//--------------------------------------------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a2      	sub	sp, #136	; 0x88
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 80016d0:	2346      	movs	r3, #70	; 0x46
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
		memset(nmeaSnt, 0, size);
 80016d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 fd01 	bl	800a0e4 <memset>
		char number_of_satalits_str[4] = {0};
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24

		//Copy to  "*" from str_GPGGA in nmeaSnt
		int i=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016f2:	e010      	b.n	8001716 <parsing_GPGGA_line+0x4e>
		{
			nmeaSnt[i]=str_GPGGA[i];
 80016f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	7819      	ldrb	r1, [r3, #0]
 80016fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001706:	4413      	add	r3, r2
 8001708:	460a      	mov	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 800170c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001710:	3301      	adds	r3, #1
 8001712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b2a      	cmp	r3, #42	; 0x2a
 8001722:	d003      	beq.n	800172c <parsing_GPGGA_line+0x64>
 8001724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001728:	2b45      	cmp	r3, #69	; 0x45
 800172a:	dde3      	ble.n	80016f4 <parsing_GPGGA_line+0x2c>
		}

		// Check check sum
		char smNmbr[3]={0};     								// array for checksum
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2100      	movs	r1, #0
 8001732:	460a      	mov	r2, r1
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	460a      	mov	r2, r1
 8001738:	709a      	strb	r2, [r3, #2]
		char *rawSum;
		char not_used[12] = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001746:	212a      	movs	r1, #42	; 0x2a
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f008 fd02 	bl	800a152 <strchr>
 800174e:	6778      	str	r0, [r7, #116]	; 0x74
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001752:	3301      	adds	r3, #1
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	843b      	strh	r3, [r7, #32]
		smNmbr[2]='\0';											// Add and of line '\0' sing
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        // PROBLEM: Checksum !=
		char hex[3];
		memset(hex, 0 , sizeof(hex));
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2203      	movs	r2, #3
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fcbb 	bl	800a0e4 <memset>
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 800176e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fcdc 	bl	8001130 <nmea0183_checksum>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		sprintf(hex, "%x", intSum);
 800177e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	49c4      	ldr	r1, [pc, #784]	; (8001a98 <parsing_GPGGA_line+0x3d0>)
 8001788:	4618      	mov	r0, r3
 800178a:	f008 fcb3 	bl	800a0f4 <siprintf>

//		if(strstr(smNmbr, hex) != NULL)
//		{
			// Parsing string

			i = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int count = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(nmeaSnt[i] != '\0')
 800179a:	e170      	b.n	8001a7e <parsing_GPGGA_line+0x3b6>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 800179c:	2300      	movs	r3, #0
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
					i++;
 80017a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					switch (count)
 80017aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	f200 8152 	bhi.w	8001a58 <parsing_GPGGA_line+0x390>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <parsing_GPGGA_line+0xf4>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017d9 	.word	0x080017d9
 80017c0:	0800181b 	.word	0x0800181b
 80017c4:	0800185d 	.word	0x0800185d
 80017c8:	0800189f 	.word	0x0800189f
 80017cc:	080018e1 	.word	0x080018e1
 80017d0:	08001923 	.word	0x08001923
 80017d4:	08001965 	.word	0x08001965
					{
						case 0:                     // Time
							for(g=0; g<8; g++)
 80017d8:	2300      	movs	r3, #0
 80017da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017dc:	e011      	b.n	8001802 <parsing_GPGGA_line+0x13a>
							{
								not_used[g] = nmeaSnt[i+g];
 80017de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017e4:	4413      	add	r3, r2
 80017e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017ea:	4413      	add	r3, r2
 80017ec:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80017f0:	f107 0214 	add.w	r2, r7, #20
 80017f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
							for(g=0; g<8; g++)
 80017fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017fe:	3301      	adds	r3, #1
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001804:	2b07      	cmp	r3, #7
 8001806:	ddea      	ble.n	80017de <parsing_GPGGA_line+0x116>
							}
							not_used[9] = '\0';
 8001808:	2300      	movs	r3, #0
 800180a:	777b      	strb	r3, [r7, #29]
							i = i+g;
 800180c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001812:	4413      	add	r3, r2
 8001814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001818:	e11e      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 1:   					// Lat
							for (g =0; g<10; g++)
 800181a:	2300      	movs	r3, #0
 800181c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800181e:	e011      	b.n	8001844 <parsing_GPGGA_line+0x17c>
							{
								not_used[g] = nmeaSnt[i+g];
 8001820:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001826:	4413      	add	r3, r2
 8001828:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800182c:	4413      	add	r3, r2
 800182e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
							for (g =0; g<10; g++)
 800183e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001840:	3301      	adds	r3, #1
 8001842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001846:	2b09      	cmp	r3, #9
 8001848:	ddea      	ble.n	8001820 <parsing_GPGGA_line+0x158>
							}
							not_used[10] = '\0';
 800184a:	2300      	movs	r3, #0
 800184c:	77bb      	strb	r3, [r7, #30]
							i = i+g;
 800184e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800185a:	e0fd      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 2:						// N
							for(g=0; g<1; g++)
 800185c:	2300      	movs	r3, #0
 800185e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001860:	e011      	b.n	8001886 <parsing_GPGGA_line+0x1be>
							{
								not_used[g] = nmeaSnt[i+g];
 8001862:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001868:	4413      	add	r3, r2
 800186a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800186e:	4413      	add	r3, r2
 8001870:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001874:	f107 0214 	add.w	r2, r7, #20
 8001878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800187a:	4413      	add	r3, r2
 800187c:	460a      	mov	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001882:	3301      	adds	r3, #1
 8001884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001888:	2b00      	cmp	r3, #0
 800188a:	ddea      	ble.n	8001862 <parsing_GPGGA_line+0x19a>
							}
							not_used[1] = '\0';
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001896:	4413      	add	r3, r2
 8001898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800189c:	e0dc      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 3:                     // Lat
							for(g=0; g<11; g++)
 800189e:	2300      	movs	r3, #0
 80018a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018a2:	e011      	b.n	80018c8 <parsing_GPGGA_line+0x200>
							{
								not_used[g] = nmeaSnt[i+g];
 80018a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018aa:	4413      	add	r3, r2
 80018ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018b0:	4413      	add	r3, r2
 80018b2:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018b6:	f107 0214 	add.w	r2, r7, #20
 80018ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018bc:	4413      	add	r3, r2
 80018be:	460a      	mov	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
							for(g=0; g<11; g++)
 80018c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018c4:	3301      	adds	r3, #1
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	ddea      	ble.n	80018a4 <parsing_GPGGA_line+0x1dc>
							}
							not_used[11] = '\0';
 80018ce:	2300      	movs	r3, #0
 80018d0:	77fb      	strb	r3, [r7, #31]
							i = i+g;
 80018d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 80018de:	e0bb      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 4:                      // E
							for(g=0; g<1; g++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018e4:	e011      	b.n	800190a <parsing_GPGGA_line+0x242>
							{
								not_used[g] = nmeaSnt[i+g];
 80018e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ec:	4413      	add	r3, r2
 80018ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f2:	4413      	add	r3, r2
 80018f4:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018f8:	f107 0214 	add.w	r2, r7, #20
 80018fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018fe:	4413      	add	r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001906:	3301      	adds	r3, #1
 8001908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800190a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800190c:	2b00      	cmp	r3, #0
 800190e:	ddea      	ble.n	80018e6 <parsing_GPGGA_line+0x21e>
							}
							not_used[1] = '\0';
 8001910:	2300      	movs	r3, #0
 8001912:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001914:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800191a:	4413      	add	r3, r2
 800191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001920:	e09a      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 5:                      // Fix Quality
							for(g=0; g<1; g++)
 8001922:	2300      	movs	r3, #0
 8001924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001926:	e011      	b.n	800194c <parsing_GPGGA_line+0x284>
							{
								not_used[g] = nmeaSnt[i+g];
 8001928:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800192c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800192e:	4413      	add	r3, r2
 8001930:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001934:	4413      	add	r3, r2
 8001936:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800193a:	f107 0214 	add.w	r2, r7, #20
 800193e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001940:	4413      	add	r3, r2
 8001942:	460a      	mov	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001948:	3301      	adds	r3, #1
 800194a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800194c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800194e:	2b00      	cmp	r3, #0
 8001950:	ddea      	ble.n	8001928 <parsing_GPGGA_line+0x260>
							}
							not_used[1] = '\0';
 8001952:	2300      	movs	r3, #0
 8001954:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8001956:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800195a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800195c:	4413      	add	r3, r2
 800195e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001962:	e079      	b.n	8001a58 <parsing_GPGGA_line+0x390>

						case 6:                      // Number of Satellites
							memset(number_of_satalits_str, 0 , sizeof(number_of_satalits_str));    // clean buffer
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	2204      	movs	r2, #4
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f008 fbb9 	bl	800a0e4 <memset>

							for(g=0; g<2; g++)
 8001972:	2300      	movs	r3, #0
 8001974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001976:	e011      	b.n	800199c <parsing_GPGGA_line+0x2d4>
							{
								number_of_satalits_str[g] = nmeaSnt[i+g];
 8001978:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800197c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197e:	4413      	add	r3, r2
 8001980:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001984:	4413      	add	r3, r2
 8001986:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800198a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800198e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001990:	4413      	add	r3, r2
 8001992:	460a      	mov	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
							for(g=0; g<2; g++)
 8001996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001998:	3301      	adds	r3, #1
 800199a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800199c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	ddea      	ble.n	8001978 <parsing_GPGGA_line+0x2b0>
							}
							number_of_satalits_str[2] = '\0';
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							// Convert two digits string on number
							uint8_t dozens_number_of_satalits = (uint8_t)number_of_satalits_str[0] - 48;
 80019a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ac:	3b30      	subs	r3, #48	; 0x30
 80019ae:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							dozens_number_of_satalits = dozens_number_of_satalits *10;
 80019b2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80019b6:	461a      	mov	r2, r3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							uint8_t units_number_of_satalits = (uint8_t)number_of_satalits_str[1]  - 48;
 80019c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019c6:	3b30      	subs	r3, #48	; 0x30
 80019c8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
							uint8_t digit_number_of_satalites = dozens_number_of_satalits + units_number_of_satalits;
 80019cc:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80019d0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80019d4:	4413      	add	r3, r2
 80019d6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

							// Chesk if data id number
							if((digit_number_of_satalites >= 3 || digit_number_of_satalites <= 14))   // Check if data correct
 80019da:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d803      	bhi.n	80019ea <parsing_GPGGA_line+0x322>
 80019e2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80019e6:	2b0e      	cmp	r3, #14
 80019e8:	d826      	bhi.n	8001a38 <parsing_GPGGA_line+0x370>
							{
								// Convert uint8_t in char
								char buff_char_number_of_satalites[3]={0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2100      	movs	r1, #0
 80019f0:	460a      	mov	r2, r1
 80019f2:	801a      	strh	r2, [r3, #0]
 80019f4:	460a      	mov	r2, r1
 80019f6:	709a      	strb	r2, [r3, #2]
								memset(buff_char_number_of_satalites, 0 ,sizeof(buff_char_number_of_satalites));
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2203      	movs	r2, #3
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f008 fb6f 	bl	800a0e4 <memset>
								buff_char_number_of_satalites[0] = (char)((dozens_number_of_satalits/10) + 48);
 8001a06:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <parsing_GPGGA_line+0x3d4>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3330      	adds	r3, #48	; 0x30
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	733b      	strb	r3, [r7, #12]
								buff_char_number_of_satalites[1] = (char)units_number_of_satalits + 48;
 8001a1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	737b      	strb	r3, [r7, #13]
								buff_char_number_of_satalites[2] = '\0';
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]

								// write in global variable
								strcpy(gps_number_of_satellites, buff_char_number_of_satalites);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <parsing_GPGGA_line+0x3d8>)
 8001a30:	f008 fb9c 	bl	800a16c <strcpy>
							{
 8001a34:	bf00      	nop
							{
								char error_message[] = "Er";
								strcpy(gps_number_of_satellites, error_message);
							}

							break;
 8001a36:	e00e      	b.n	8001a56 <parsing_GPGGA_line+0x38e>
								char error_message[] = "Er";
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <parsing_GPGGA_line+0x3dc>)
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	8019      	strh	r1, [r3, #0]
 8001a44:	3302      	adds	r3, #2
 8001a46:	0c12      	lsrs	r2, r2, #16
 8001a48:	701a      	strb	r2, [r3, #0]
								strcpy(gps_number_of_satellites, error_message);
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <parsing_GPGGA_line+0x3d8>)
 8001a52:	f008 fb8b 	bl	800a16c <strcpy>
							break;
 8001a56:	bf00      	nop
					}
					count++;
 8001a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(nmeaSnt[i] == ',')
 8001a62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001a70:	f43f ae94 	beq.w	800179c <parsing_GPGGA_line+0xd4>
				}
				i++;
 8001a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(nmeaSnt[i] != '\0')
 8001a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e9      	bne.n	8001a62 <parsing_GPGGA_line+0x39a>
			}
		//}
}
 8001a8e:	bf00      	nop
 8001a90:	3788      	adds	r7, #136	; 0x88
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800d5c0 	.word	0x0800d5c0
 8001a9c:	cccccccd 	.word	0xcccccccd
 8001aa0:	20000700 	.word	0x20000700
 8001aa4:	0800d5c4 	.word	0x0800d5c4

08001aa8 <parsing_GPVTG_line>:


//--------------------------------------------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b098      	sub	sp, #96	; 0x60
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001ab0:	2331      	movs	r3, #49	; 0x31
 8001ab2:	653b      	str	r3, [r7, #80]	; 0x50
	memset(nmeaSnt, 0, size);
 8001ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 fb11 	bl	800a0e4 <memset>

	char str[6]={0};
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	809a      	strh	r2, [r3, #4]

	//Copy to  "*" from str_GPVTG in nmeaSnt
	int i=0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ad4:	e00c      	b.n	8001af0 <parsing_GPVTG_line+0x48>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 8001ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	f107 0218 	add.w	r2, r7, #24
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	3301      	adds	r3, #1
 8001aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b2a      	cmp	r3, #42	; 0x2a
 8001afa:	d002      	beq.n	8001b02 <parsing_GPVTG_line+0x5a>
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	2b31      	cmp	r3, #49	; 0x31
 8001b00:	dde9      	ble.n	8001ad6 <parsing_GPVTG_line+0x2e>
	}

	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2100      	movs	r1, #0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001b10:	212a      	movs	r1, #42	; 0x2a
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f008 fb1d 	bl	800a152 <strchr>
 8001b18:	64f8      	str	r0, [r7, #76]	; 0x4c
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]

//	// PROBLEM: Checksum !=

	i = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int count = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t speed_data_readed = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(speed_data_readed == 1)
 8001b36:	e07d      	b.n	8001c34 <parsing_GPVTG_line+0x18c>
	{
		if(nmeaSnt[i] == ',')
 8001b38:	f107 0218 	add.w	r2, r7, #24
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b2c      	cmp	r3, #44	; 0x2c
 8001b44:	d102      	bne.n	8001b4c <parsing_GPVTG_line+0xa4>
		{
			count++;
 8001b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b48:	3301      	adds	r3, #1
 8001b4a:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if(count == 7)				// Find seven part (speed)
 8001b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d16d      	bne.n	8001c2e <parsing_GPVTG_line+0x186>
		{
			i++;
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	3301      	adds	r3, #1
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t k = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			char speed_test_variable[4]={0};    // for debug
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
			uint8_t error = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			do
			{
				//GPS_data.speed[k] = nmeaSnt[i+k];
				if(((nmeaSnt[i+k]-48) >= 0) && ((nmeaSnt[i+k]-48)  <= 9))   // Ok
 8001b68:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6e:	4413      	add	r3, r2
 8001b70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b74:	4413      	add	r3, r2
 8001b76:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001b7a:	3b30      	subs	r3, #48	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db1c      	blt.n	8001bba <parsing_GPVTG_line+0x112>
 8001b80:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b86:	4413      	add	r3, r2
 8001b88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001b92:	3b30      	subs	r3, #48	; 0x30
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	dc10      	bgt.n	8001bba <parsing_GPVTG_line+0x112>
				{
					speed_test_variable[k] = nmeaSnt[i+k];
 8001b98:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	441a      	add	r2, r3
 8001ba0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ba4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ba8:	440a      	add	r2, r1
 8001baa:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8001bae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001bb8:	e009      	b.n	8001bce <parsing_GPVTG_line+0x126>
				}
				else	// if error value. delete value.
				{
					// Error
					error = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
					memset(speed_test_variable, 0 ,sizeof(speed_test_variable));
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f008 fa8b 	bl	800a0e4 <memset>
				}
				k++;
 8001bce:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			}while ((k < 3) && (nmeaSnt[i+k] != '.') && (error != 1));    // Problem where !!!!
 8001bd8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d80e      	bhi.n	8001bfe <parsing_GPVTG_line+0x156>
 8001be0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	4413      	add	r3, r2
 8001be8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bec:	4413      	add	r3, r2
 8001bee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf4:	d003      	beq.n	8001bfe <parsing_GPVTG_line+0x156>
 8001bf6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1b4      	bne.n	8001b68 <parsing_GPVTG_line+0xc0>


			// Save in global variable
			memset(str, 0 , sizeof(str));
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2206      	movs	r2, #6
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f008 fa6c 	bl	800a0e4 <memset>
			//sprintf(str,"%s", GPS_data.speed);
			sprintf(str,"%s", speed_test_variable);
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f008 faa8 	bl	800a16c <strcpy>
			strcpy(gps_speed, str);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <parsing_GPVTG_line+0x1a0>)
 8001c24:	f008 faa2 	bl	800a16c <strcpy>

			speed_data_readed = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		i++;
 8001c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c30:	3301      	adds	r3, #1
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(speed_data_readed == 1)
 8001c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	f43f af7d 	beq.w	8001b38 <parsing_GPVTG_line+0x90>
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3760      	adds	r7, #96	; 0x60
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200006dc 	.word	0x200006dc

08001c4c <parsing_GPS>:
// Parsing only three lines from NMIA
// 1. From GPGLL - coordinates
// 2. From GPGGA - number of satellites
// 3. From GPVTG - speed
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	6018      	str	r0, [r3, #0]
 8001c58:	463b      	mov	r3, r7
 8001c5a:	6019      	str	r1, [r3, #0]
	char buffStr[512];										 // Main buffer in this function

	if(flag == 1)    										 // If data from GPS module in buffer
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <parsing_GPS+0xcc>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d153      	bne.n	8001d0c <parsing_GPS+0xc0>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 fa38 	bl	800a0e4 <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	f107 020c 	add.w	r2, r7, #12
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f008 fa75 	bl	800a16c <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL in buffStr
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4925      	ldr	r1, [pc, #148]	; (8001d1c <parsing_GPS+0xd0>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f008 fa77 	bl	800a17c <strstr>
 8001c8e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 8001c92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <parsing_GPS+0x62>
		{
			parsing_GPGLL_line(str_GPGLL);
 8001c9a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001c9e:	f7ff fa6b 	bl	8001178 <parsing_GPGLL_line>
			receive_gps_signal++;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <parsing_GPS+0xd4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <parsing_GPS+0xd4>)
 8001cac:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPGGA in buffStr
		str_GPGGA = strstr(buffStr, "$GPGGA");    //$GPGGA,154423.00,4948.74034,N,02359.70944,E,1,05A,154422.00,4948.74052,N,02359.70973,E,1,05,3.71,351.1,M,34.8,M,,*53\r\n
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	491c      	ldr	r1, [pc, #112]	; (8001d24 <parsing_GPS+0xd8>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fa61 	bl	800a17c <strstr>
 8001cba:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 8001cbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <parsing_GPS+0x8e>
		{
			parsing_GPGGA_line(str_GPGGA);
 8001cc6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8001cca:	f7ff fcfd 	bl	80016c8 <parsing_GPGGA_line>
			receive_gps_signal++;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <parsing_GPS+0xd4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <parsing_GPS+0xd4>)
 8001cd8:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPVTG in buffStr
		str_GPVTG = strstr(buffStr, "$GPVTG");    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4912      	ldr	r1, [pc, #72]	; (8001d28 <parsing_GPS+0xdc>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f008 fa4b 	bl	800a17c <strstr>
 8001ce6:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 8001cea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <parsing_GPS+0xba>
		{
			parsing_GPVTG_line(str_GPVTG);
 8001cf2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001cf6:	f7ff fed7 	bl	8001aa8 <parsing_GPVTG_line>
			receive_gps_signal++;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <parsing_GPS+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <parsing_GPS+0xd4>)
 8001d04:	701a      	strb	r2, [r3, #0]
		}

		flag = 0;			// Flag = 0 means: Data was readed
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <parsing_GPS+0xcc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002ac 	.word	0x200002ac
 8001d1c:	0800d5c8 	.word	0x0800d5c8
 8001d20:	20000260 	.word	0x20000260
 8001d24:	0800d5d0 	.word	0x0800d5d0
 8001d28:	0800d5d8 	.word	0x0800d5d8

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <DelayMicro>:

uint8_t GSM_INIT = 0;

// -------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <DelayMicro+0x34>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <DelayMicro+0x38>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0ddb      	lsrs	r3, r3, #23
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--);
 8001d80:	bf00      	nop
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1fa      	bne.n	8001d82 <DelayMicro+0x1e>
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000064 	.word	0x20000064
 8001d9c:	ee9bfab5 	.word	0xee9bfab5

08001da0 <init_GSM_uart_comunication>:

// -------------------------------------------------------------------
void init_GSM_uart_comunication(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
		// Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
		USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <init_GSM_uart_comunication+0x20>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <init_GSM_uart_comunication+0x20>)
 8001daa:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001dae:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ (USART1_IRQn);
 8001db0:	2025      	movs	r0, #37	; 0x25
 8001db2:	f7ff ffbb 	bl	8001d2c <__NVIC_EnableIRQ>
		HAL_Delay(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f003 ff56 	bl	8005c68 <HAL_Delay>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <init_gsm_module>:
// -------------------------------------------------------------------
int init_gsm_module(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
		// 1. Send command "AT" answer "OK"
		// 2. Send command "AT+CSQ" answer "+CSQ: 23,99" and "OK". 23,99 value can be from 0 to 31.
		// 3. Send command "AT+CCID" answer "89380062300517128558" and "OK"
		// 4. Send command "AT+CREG?" answer "+CREG: 1,1" and "OK"

	uint8_t answer_1 = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t answer_2 = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73bb      	strb	r3, [r7, #14]
	uint8_t answer_3 = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	737b      	strb	r3, [r7, #13]
	uint8_t answer_4 = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	733b      	strb	r3, [r7, #12]

	// Whaite only first time init
	static bool init_GSM = false;
	if (init_GSM == false)
 8001dda:	4b90      	ldr	r3, [pc, #576]	; (800201c <init_gsm_module+0x258>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <init_gsm_module+0x2c>
	{
		HAL_Delay(8000);     // Must be near 7-8 sec
 8001de8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001dec:	f003 ff3c 	bl	8005c68 <HAL_Delay>
	}
	init_GSM = true;
 8001df0:	4b8a      	ldr	r3, [pc, #552]	; (800201c <init_gsm_module+0x258>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
	//

	//HAL_Delay(1000);     // Must be near 7-8 sec

	uint32_t id =0;               				 // Variable for timeout
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
	bool no_answer = false;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	ansver_flag =0;
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <init_gsm_module+0x25c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

	int timeout_counter = 10000;    //10000
 8001e04:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e08:	603b      	str	r3, [r7, #0]

	// 1. Send command " Turn off echo" ///////////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 10000);
 8001e0a:	4886      	ldr	r0, [pc, #536]	; (8002024 <init_gsm_module+0x260>)
 8001e0c:	f7fe f9a0 	bl	8000150 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e18:	4982      	ldr	r1, [pc, #520]	; (8002024 <init_gsm_module+0x260>)
 8001e1a:	4883      	ldr	r0, [pc, #524]	; (8002028 <init_gsm_module+0x264>)
 8001e1c:	f007 fbf6 	bl	800960c <HAL_UART_Transmit>

    // Waite for answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e20:	e020      	b.n	8001e64 <init_gsm_module+0xa0>
	{
		id++;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f7ff ff9b 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	; (8002020 <init_gsm_module+0x25c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d110      	bne.n	8001e58 <init_gsm_module+0x94>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8001e36:	497d      	ldr	r1, [pc, #500]	; (800202c <init_gsm_module+0x268>)
 8001e38:	487d      	ldr	r0, [pc, #500]	; (8002030 <init_gsm_module+0x26c>)
 8001e3a:	f008 f99f 	bl	800a17c <strstr>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <init_gsm_module+0x94>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001e44:	223c      	movs	r2, #60	; 0x3c
 8001e46:	2100      	movs	r1, #0
 8001e48:	4879      	ldr	r0, [pc, #484]	; (8002030 <init_gsm_module+0x26c>)
 8001e4a:	f008 f94b 	bl	800a0e4 <memset>
				answer_1 = 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
				ansver_flag = 1;
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <init_gsm_module+0x25c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d301      	bcc.n	8001e64 <init_gsm_module+0xa0>
		{
			no_answer = true;               // Out from waiting answer
 8001e60:	2301      	movs	r3, #1
 8001e62:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001e64:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <init_gsm_module+0x25c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d009      	beq.n	8001e80 <init_gsm_module+0xbc>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d805      	bhi.n	8001e80 <init_gsm_module+0xbc>
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1d0      	bne.n	8001e22 <init_gsm_module+0x5e>
		}
	}

    HAL_Delay(DELAY);
 8001e80:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <init_gsm_module+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 feef 	bl	8005c68 <HAL_Delay>
    ////////////////////////////////////////////////////////////////

	// 2. Send command "signal reception quality" //////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 1000);
 8001e8a:	486b      	ldr	r0, [pc, #428]	; (8002038 <init_gsm_module+0x274>)
 8001e8c:	f7fe f960 	bl	8000150 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e98:	4967      	ldr	r1, [pc, #412]	; (8002038 <init_gsm_module+0x274>)
 8001e9a:	4863      	ldr	r0, [pc, #396]	; (8002028 <init_gsm_module+0x264>)
 8001e9c:	f007 fbb6 	bl	800960c <HAL_UART_Transmit>

	id = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001ea8:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <init_gsm_module+0x25c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001eae:	e020      	b.n	8001ef2 <init_gsm_module+0x12e>
	{
		id++;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001eb6:	2064      	movs	r0, #100	; 0x64
 8001eb8:	f7ff ff54 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <init_gsm_module+0x25c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d110      	bne.n	8001ee6 <init_gsm_module+0x122>
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
 8001ec4:	495d      	ldr	r1, [pc, #372]	; (800203c <init_gsm_module+0x278>)
 8001ec6:	485a      	ldr	r0, [pc, #360]	; (8002030 <init_gsm_module+0x26c>)
 8001ec8:	f008 f958 	bl	800a17c <strstr>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <init_gsm_module+0x122>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001ed2:	223c      	movs	r2, #60	; 0x3c
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4856      	ldr	r0, [pc, #344]	; (8002030 <init_gsm_module+0x26c>)
 8001ed8:	f008 f904 	bl	800a0e4 <memset>
				answer_2 = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8001ee0:	4b4f      	ldr	r3, [pc, #316]	; (8002020 <init_gsm_module+0x25c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d301      	bcc.n	8001ef2 <init_gsm_module+0x12e>
		{
			no_answer = true;               // Out from waiting answer
 8001eee:	2301      	movs	r3, #1
 8001ef0:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <init_gsm_module+0x25c>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d009      	beq.n	8001f0e <init_gsm_module+0x14a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d805      	bhi.n	8001f0e <init_gsm_module+0x14a>
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1d0      	bne.n	8001eb0 <init_gsm_module+0xec>
		}
	}

	// Waite for answer "OK" after  "+CSQ"
	id = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001f16:	4b42      	ldr	r3, [pc, #264]	; (8002020 <init_gsm_module+0x25c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f1c:	e020      	b.n	8001f60 <init_gsm_module+0x19c>
	{
		id++;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f7ff ff1d 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <init_gsm_module+0x25c>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d110      	bne.n	8001f54 <init_gsm_module+0x190>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8001f32:	493e      	ldr	r1, [pc, #248]	; (800202c <init_gsm_module+0x268>)
 8001f34:	483e      	ldr	r0, [pc, #248]	; (8002030 <init_gsm_module+0x26c>)
 8001f36:	f008 f921 	bl	800a17c <strstr>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <init_gsm_module+0x190>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001f40:	223c      	movs	r2, #60	; 0x3c
 8001f42:	2100      	movs	r1, #0
 8001f44:	483a      	ldr	r0, [pc, #232]	; (8002030 <init_gsm_module+0x26c>)
 8001f46:	f008 f8cd 	bl	800a0e4 <memset>
				answer_2 = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <init_gsm_module+0x25c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d301      	bcc.n	8001f60 <init_gsm_module+0x19c>
		{
			no_answer = true;               // Out from waiting answer
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <init_gsm_module+0x25c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d009      	beq.n	8001f7c <init_gsm_module+0x1b8>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d805      	bhi.n	8001f7c <init_gsm_module+0x1b8>
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1d0      	bne.n	8001f1e <init_gsm_module+0x15a>
		}
	}
	HAL_Delay(DELAY);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <init_gsm_module+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fe71 	bl	8005c68 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	// 3. Send command "signal reception quality" /////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 1000);
 8001f86:	482e      	ldr	r0, [pc, #184]	; (8002040 <init_gsm_module+0x27c>)
 8001f88:	f7fe f8e2 	bl	8000150 <strlen>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f94:	492a      	ldr	r1, [pc, #168]	; (8002040 <init_gsm_module+0x27c>)
 8001f96:	4824      	ldr	r0, [pc, #144]	; (8002028 <init_gsm_module+0x264>)
 8001f98:	f007 fb38 	bl	800960c <HAL_UART_Transmit>

	id = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <init_gsm_module+0x25c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001faa:	e020      	b.n	8001fee <init_gsm_module+0x22a>
	{
		id++;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8001fb2:	2064      	movs	r0, #100	; 0x64
 8001fb4:	f7ff fed6 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <init_gsm_module+0x25c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d110      	bne.n	8001fe2 <init_gsm_module+0x21e>
		{
			if (strstr(GSM_RX_buffer, "89380"))
 8001fc0:	4920      	ldr	r1, [pc, #128]	; (8002044 <init_gsm_module+0x280>)
 8001fc2:	481b      	ldr	r0, [pc, #108]	; (8002030 <init_gsm_module+0x26c>)
 8001fc4:	f008 f8da 	bl	800a17c <strstr>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <init_gsm_module+0x21e>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8001fce:	223c      	movs	r2, #60	; 0x3c
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4817      	ldr	r0, [pc, #92]	; (8002030 <init_gsm_module+0x26c>)
 8001fd4:	f008 f886 	bl	800a0e4 <memset>
				answer_3 = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <init_gsm_module+0x25c>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d301      	bcc.n	8001fee <init_gsm_module+0x22a>
		{
			no_answer = true;               // Out from waiting answer
 8001fea:	2301      	movs	r3, #1
 8001fec:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <init_gsm_module+0x25c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d009      	beq.n	800200a <init_gsm_module+0x246>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d805      	bhi.n	800200a <init_gsm_module+0x246>
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1d0      	bne.n	8001fac <init_gsm_module+0x1e8>
		}
	}

	// Waite for answer "OK"
	id = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <init_gsm_module+0x25c>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002018:	e037      	b.n	800208a <init_gsm_module+0x2c6>
 800201a:	bf00      	nop
 800201c:	200002a2 	.word	0x200002a2
 8002020:	200002a0 	.word	0x200002a0
 8002024:	20000004 	.word	0x20000004
 8002028:	20000a80 	.word	0x20000a80
 800202c:	0800d5e0 	.word	0x0800d5e0
 8002030:	20000264 	.word	0x20000264
 8002034:	20000000 	.word	0x20000000
 8002038:	2000000c 	.word	0x2000000c
 800203c:	0800d5e4 	.word	0x0800d5e4
 8002040:	20000018 	.word	0x20000018
 8002044:	0800d5ec 	.word	0x0800d5ec
	{
		id++;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 800204e:	200a      	movs	r0, #10
 8002050:	f7ff fe88 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8002054:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <init_gsm_module+0x410>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d110      	bne.n	800207e <init_gsm_module+0x2ba>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 800205c:	495e      	ldr	r1, [pc, #376]	; (80021d8 <init_gsm_module+0x414>)
 800205e:	485f      	ldr	r0, [pc, #380]	; (80021dc <init_gsm_module+0x418>)
 8002060:	f008 f88c 	bl	800a17c <strstr>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <init_gsm_module+0x2ba>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800206a:	223c      	movs	r2, #60	; 0x3c
 800206c:	2100      	movs	r1, #0
 800206e:	485b      	ldr	r0, [pc, #364]	; (80021dc <init_gsm_module+0x418>)
 8002070:	f008 f838 	bl	800a0e4 <memset>
				answer_3 = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8002078:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <init_gsm_module+0x410>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d301      	bcc.n	800208a <init_gsm_module+0x2c6>
		{
			no_answer = true;               // Out from waiting answer
 8002086:	2301      	movs	r3, #1
 8002088:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <init_gsm_module+0x410>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d009      	beq.n	80020a6 <init_gsm_module+0x2e2>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d805      	bhi.n	80020a6 <init_gsm_module+0x2e2>
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1d0      	bne.n	8002048 <init_gsm_module+0x284>
		}
	}
	HAL_Delay(DELAY);
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <init_gsm_module+0x41c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fddc 	bl	8005c68 <HAL_Delay>
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	// 4. Send command "Check registration in network"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CREG, strlen(AT_CREG), 1000);
 80020b0:	484c      	ldr	r0, [pc, #304]	; (80021e4 <init_gsm_module+0x420>)
 80020b2:	f7fe f84d 	bl	8000150 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	4949      	ldr	r1, [pc, #292]	; (80021e4 <init_gsm_module+0x420>)
 80020c0:	4849      	ldr	r0, [pc, #292]	; (80021e8 <init_gsm_module+0x424>)
 80020c2:	f007 faa3 	bl	800960c <HAL_UART_Transmit>

	id = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <init_gsm_module+0x410>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80020d4:	e020      	b.n	8002118 <init_gsm_module+0x354>
	{
		id++;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3301      	adds	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 80020dc:	2064      	movs	r0, #100	; 0x64
 80020de:	f7ff fe41 	bl	8001d64 <DelayMicro>

		if(ansver_flag == 1)
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <init_gsm_module+0x410>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d110      	bne.n	800210c <init_gsm_module+0x348>
		{
			if (strstr(GSM_RX_buffer, "+CREG: 0,1"))
 80020ea:	4940      	ldr	r1, [pc, #256]	; (80021ec <init_gsm_module+0x428>)
 80020ec:	483b      	ldr	r0, [pc, #236]	; (80021dc <init_gsm_module+0x418>)
 80020ee:	f008 f845 	bl	800a17c <strstr>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <init_gsm_module+0x348>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80020f8:	223c      	movs	r2, #60	; 0x3c
 80020fa:	2100      	movs	r1, #0
 80020fc:	4837      	ldr	r0, [pc, #220]	; (80021dc <init_gsm_module+0x418>)
 80020fe:	f007 fff1 	bl	800a0e4 <memset>
				answer_4 = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <init_gsm_module+0x410>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d301      	bcc.n	8002118 <init_gsm_module+0x354>
		{
			no_answer = true;               // Out from waiting answer
 8002114:	2301      	movs	r3, #1
 8002116:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <init_gsm_module+0x410>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d009      	beq.n	8002134 <init_gsm_module+0x370>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d805      	bhi.n	8002134 <init_gsm_module+0x370>
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1d0      	bne.n	80020d6 <init_gsm_module+0x312>
		}
	}

	// Waite for answer "OK"
	id = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002138:	2300      	movs	r3, #0
 800213a:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <init_gsm_module+0x410>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002142:	e020      	b.n	8002186 <init_gsm_module+0x3c2>
	{
		id++;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3301      	adds	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 800214a:	200a      	movs	r0, #10
 800214c:	f7ff fe0a 	bl	8001d64 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <init_gsm_module+0x410>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d110      	bne.n	800217a <init_gsm_module+0x3b6>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002158:	491f      	ldr	r1, [pc, #124]	; (80021d8 <init_gsm_module+0x414>)
 800215a:	4820      	ldr	r0, [pc, #128]	; (80021dc <init_gsm_module+0x418>)
 800215c:	f008 f80e 	bl	800a17c <strstr>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <init_gsm_module+0x3b6>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002166:	223c      	movs	r2, #60	; 0x3c
 8002168:	2100      	movs	r1, #0
 800216a:	481c      	ldr	r0, [pc, #112]	; (80021dc <init_gsm_module+0x418>)
 800216c:	f007 ffba 	bl	800a0e4 <memset>
				answer_4 = 1;
 8002170:	2301      	movs	r3, #1
 8002172:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <init_gsm_module+0x410>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d301      	bcc.n	8002186 <init_gsm_module+0x3c2>
		{
			no_answer = true;               // Out from waiting answer
 8002182:	2301      	movs	r3, #1
 8002184:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <init_gsm_module+0x410>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d009      	beq.n	80021a2 <init_gsm_module+0x3de>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d805      	bhi.n	80021a2 <init_gsm_module+0x3de>
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1d0      	bne.n	8002144 <init_gsm_module+0x380>
		}
	}
	HAL_Delay(DELAY);
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <init_gsm_module+0x41c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fd5e 	bl	8005c68 <HAL_Delay>
	////////////////////////////////////////////////////////////////


	if(answer_1 && answer_2 && answer_3 && answer_4)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <init_gsm_module+0x404>
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <init_gsm_module+0x404>
 80021b8:	7b7b      	ldrb	r3, [r7, #13]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <init_gsm_module+0x404>
 80021be:	7b3b      	ldrb	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <init_gsm_module+0x404>
	{
		return 0;            // If init OK
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <init_gsm_module+0x406>
	}
	else
	{
		return 1;
 80021c8:	2301      	movs	r3, #1
	}
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200002a0 	.word	0x200002a0
 80021d8:	0800d5e0 	.word	0x0800d5e0
 80021dc:	20000264 	.word	0x20000264
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000024 	.word	0x20000024
 80021e8:	20000a80 	.word	0x20000a80
 80021ec:	0800d5f4 	.word	0x0800d5f4

080021f0 <call_on_mu_number>:
// -------------------------------------------------------------------
int call_on_mu_number(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 80021fa:	2300      	movs	r3, #0
 80021fc:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 80021fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8002202:	607b      	str	r3, [r7, #4]
	//

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_to_my_mobile_number, strlen(call_to_my_mobile_number), 1000);
 8002204:	4822      	ldr	r0, [pc, #136]	; (8002290 <call_on_mu_number+0xa0>)
 8002206:	f7fd ffa3 	bl	8000150 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	b29a      	uxth	r2, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	491f      	ldr	r1, [pc, #124]	; (8002290 <call_on_mu_number+0xa0>)
 8002214:	481f      	ldr	r0, [pc, #124]	; (8002294 <call_on_mu_number+0xa4>)
 8002216:	f007 f9f9 	bl	800960c <HAL_UART_Transmit>

	ansver_flag = 0;
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <call_on_mu_number+0xa8>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002220:	2300      	movs	r3, #0
 8002222:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002224:	e022      	b.n	800226c <call_on_mu_number+0x7c>
	{
		id++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
	    DelayMicro(10);
 800222c:	200a      	movs	r0, #10
 800222e:	f7ff fd99 	bl	8001d64 <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <call_on_mu_number+0xa8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d110      	bne.n	800225c <call_on_mu_number+0x6c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 800223a:	4918      	ldr	r1, [pc, #96]	; (800229c <call_on_mu_number+0xac>)
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <call_on_mu_number+0xb0>)
 800223e:	f007 ff9d 	bl	800a17c <strstr>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <call_on_mu_number+0x6c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002248:	223c      	movs	r2, #60	; 0x3c
 800224a:	2100      	movs	r1, #0
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <call_on_mu_number+0xb0>)
 800224e:	f007 ff49 	bl	800a0e4 <memset>
	    		ansver_flag = 1;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <call_on_mu_number+0xa8>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
	    		return 1;
 8002258:	2301      	movs	r3, #1
 800225a:	e015      	b.n	8002288 <call_on_mu_number+0x98>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d303      	bcc.n	800226c <call_on_mu_number+0x7c>
	    {
	    	no_answer = true;               // Out from waiting answer
 8002264:	2301      	movs	r3, #1
 8002266:	72fb      	strb	r3, [r7, #11]
	    	return 0;
 8002268:	2300      	movs	r3, #0
 800226a:	e00d      	b.n	8002288 <call_on_mu_number+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <call_on_mu_number+0xa8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d009      	beq.n	8002288 <call_on_mu_number+0x98>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d805      	bhi.n	8002288 <call_on_mu_number+0x98>
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ce      	bne.n	8002226 <call_on_mu_number+0x36>
	    }
	}
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000040 	.word	0x20000040
 8002294:	20000a80 	.word	0x20000a80
 8002298:	200002a0 	.word	0x200002a0
 800229c:	0800d5e0 	.word	0x0800d5e0
 80022a0:	20000264 	.word	0x20000264

080022a4 <call_on_number>:
// -------------------------------------------------------------------

int call_on_number(char *number, uint8_t size_number)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool no_answer = false;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	int timeout_counter = 10000;
 80022ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
	//
	//char call_to_my_mobile_number[]="ATD+380931482354;\r\n";
	char call_command[21]="ATD+ ";
 80022c0:	4a55      	ldr	r2, [pc, #340]	; (8002418 <call_on_number+0x174>)
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ca:	6018      	str	r0, [r3, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	8019      	strh	r1, [r3, #0]
 80022d0:	f107 0312 	add.w	r3, r7, #18
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	f8c3 200b 	str.w	r2, [r3, #11]
	char end_call_command[] = ";\r\n";
 80022e0:	4b4e      	ldr	r3, [pc, #312]	; (800241c <call_on_number+0x178>)
 80022e2:	60bb      	str	r3, [r7, #8]
	// 1. Finr end of string call_command
	uint8_t i = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 80022ea:	e004      	b.n	80022f6 <call_on_number+0x52>
	{
		i++;
 80022ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022f0:	3301      	adds	r3, #1
 80022f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 80022f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022fe:	4413      	add	r3, r2
 8002300:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f1      	bne.n	80022ec <call_on_number+0x48>
	}
	// 2. Add number to end of dtring
	uint8_t k = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 800230e:	e015      	b.n	800233c <call_on_number+0x98>
	{
		call_command[i] = number[k];
 8002310:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	441a      	add	r2, r3
 8002318:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002322:	440b      	add	r3, r1
 8002324:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 8002328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800232c:	3301      	adds	r3, #1
 800232e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		k++;
 8002332:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002336:	3301      	adds	r3, #1
 8002338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 800233c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	429a      	cmp	r2, r3
 8002344:	d1e4      	bne.n	8002310 <call_on_number+0x6c>
	}
	// 3. Add ';\r\n' to the end of string
	for(k = 0; k <= 4; k ++)
 8002346:	2300      	movs	r3, #0
 8002348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800234c:	e017      	b.n	800237e <call_on_number+0xda>
	{
		call_command[i] = end_call_command[k];
 800234e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002356:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800235a:	440a      	add	r2, r1
 800235c:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002360:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002364:	440b      	add	r3, r1
 8002366:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 800236a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800236e:	3301      	adds	r3, #1
 8002370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for(k = 0; k <= 4; k ++)
 8002374:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002378:	3301      	adds	r3, #1
 800237a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800237e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002382:	2b04      	cmp	r3, #4
 8002384:	d9e3      	bls.n	800234e <call_on_number+0xaa>
	}

	// 4. Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_command, strlen(call_command), 1000);
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd fee0 	bl	8000150 <strlen>
 8002390:	4603      	mov	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	f107 010c 	add.w	r1, r7, #12
 8002398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239c:	4820      	ldr	r0, [pc, #128]	; (8002420 <call_on_number+0x17c>)
 800239e:	f007 f935 	bl	800960c <HAL_UART_Transmit>

	ansver_flag = 0;
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <call_on_number+0x180>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80023a8:	e023      	b.n	80023f2 <call_on_number+0x14e>
	{
		id++;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3301      	adds	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	    DelayMicro(10);
 80023b0:	200a      	movs	r0, #10
 80023b2:	f7ff fcd7 	bl	8001d64 <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <call_on_number+0x180>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d110      	bne.n	80023e0 <call_on_number+0x13c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 80023be:	491a      	ldr	r1, [pc, #104]	; (8002428 <call_on_number+0x184>)
 80023c0:	481a      	ldr	r0, [pc, #104]	; (800242c <call_on_number+0x188>)
 80023c2:	f007 fedb 	bl	800a17c <strstr>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <call_on_number+0x13c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80023cc:	223c      	movs	r2, #60	; 0x3c
 80023ce:	2100      	movs	r1, #0
 80023d0:	4816      	ldr	r0, [pc, #88]	; (800242c <call_on_number+0x188>)
 80023d2:	f007 fe87 	bl	800a0e4 <memset>
	    		ansver_flag = 1;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <call_on_number+0x180>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
	    		return 1;
 80023dc:	2301      	movs	r3, #1
 80023de:	e017      	b.n	8002410 <call_on_number+0x16c>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d304      	bcc.n	80023f2 <call_on_number+0x14e>
	    {
	    	no_answer = true;               // Out from waiting answer
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	    	return 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e00e      	b.n	8002410 <call_on_number+0x16c>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <call_on_number+0x180>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d00a      	beq.n	8002410 <call_on_number+0x16c>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	429a      	cmp	r2, r3
 8002400:	d806      	bhi.n	8002410 <call_on_number+0x16c>
 8002402:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002406:	f083 0301 	eor.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1cc      	bne.n	80023aa <call_on_number+0x106>
	    }
	}
}
 8002410:	4618      	mov	r0, r3
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	0800d600 	.word	0x0800d600
 800241c:	000a0d3b 	.word	0x000a0d3b
 8002420:	20000a80 	.word	0x20000a80
 8002424:	200002a0 	.word	0x200002a0
 8002428:	0800d5e0 	.word	0x0800d5e0
 800242c:	20000264 	.word	0x20000264

08002430 <end_of_call>:
// -------------------------------------------------------------------

// -------------------------------------------------------------------
int end_of_call(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
	////////////////////////
		uint32_t id =0;               				 // Variable for timeout
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
		bool no_answer = false;
 800243a:	2300      	movs	r3, #0
 800243c:	72fb      	strb	r3, [r7, #11]
		int timeout_counter = 10000;
 800243e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002442:	607b      	str	r3, [r7, #4]
		//

		// Call on number
		HAL_UART_Transmit(&huart1 , (uint8_t *)AT_END_OF_CALL, strlen(AT_END_OF_CALL), 1000);
 8002444:	4822      	ldr	r0, [pc, #136]	; (80024d0 <end_of_call+0xa0>)
 8002446:	f7fd fe83 	bl	8000150 <strlen>
 800244a:	4603      	mov	r3, r0
 800244c:	b29a      	uxth	r2, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	491f      	ldr	r1, [pc, #124]	; (80024d0 <end_of_call+0xa0>)
 8002454:	481f      	ldr	r0, [pc, #124]	; (80024d4 <end_of_call+0xa4>)
 8002456:	f007 f8d9 	bl	800960c <HAL_UART_Transmit>

		ansver_flag = 0;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <end_of_call+0xa8>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
		no_answer = false;
 8002460:	2300      	movs	r3, #0
 8002462:	72fb      	strb	r3, [r7, #11]

		while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002464:	e022      	b.n	80024ac <end_of_call+0x7c>
		{
			id++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
		    DelayMicro(100);
 800246c:	2064      	movs	r0, #100	; 0x64
 800246e:	f7ff fc79 	bl	8001d64 <DelayMicro>

		    if(ansver_flag ==1)					// waite flag from interrupt
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <end_of_call+0xa8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d110      	bne.n	800249c <end_of_call+0x6c>
		    {
		    	if (strstr(GSM_RX_buffer, "OK"))
 800247a:	4918      	ldr	r1, [pc, #96]	; (80024dc <end_of_call+0xac>)
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <end_of_call+0xb0>)
 800247e:	f007 fe7d 	bl	800a17c <strstr>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <end_of_call+0x6c>
		    	{
		    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002488:	223c      	movs	r2, #60	; 0x3c
 800248a:	2100      	movs	r1, #0
 800248c:	4814      	ldr	r0, [pc, #80]	; (80024e0 <end_of_call+0xb0>)
 800248e:	f007 fe29 	bl	800a0e4 <memset>
		    		ansver_flag = 1;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <end_of_call+0xa8>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
		    		return 1;
 8002498:	2301      	movs	r3, #1
 800249a:	e015      	b.n	80024c8 <end_of_call+0x98>
		    	}

		    }

		    if(id  >= timeout_counter)						// Timeout is goon
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d303      	bcc.n	80024ac <end_of_call+0x7c>
		    {
		    	no_answer = true;               // Out from waiting answer
 80024a4:	2301      	movs	r3, #1
 80024a6:	72fb      	strb	r3, [r7, #11]
		    	return 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e00d      	b.n	80024c8 <end_of_call+0x98>
		while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <end_of_call+0xa8>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d009      	beq.n	80024c8 <end_of_call+0x98>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d805      	bhi.n	80024c8 <end_of_call+0x98>
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ce      	bne.n	8002466 <end_of_call+0x36>
		    }

		}

}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000030 	.word	0x20000030
 80024d4:	20000a80 	.word	0x20000a80
 80024d8:	200002a0 	.word	0x200002a0
 80024dc:	0800d5e0 	.word	0x0800d5e0
 80024e0:	20000264 	.word	0x20000264

080024e4 <accepts_on_incomming_call>:
// -------------------------------------------------------------------
int accepts_on_incomming_call(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
	////////////////////////
	uint32_t id =0;               				 // Variable for timeout
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 80024ee:	2300      	movs	r3, #0
 80024f0:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 80024f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80024f6:	607b      	str	r3, [r7, #4]
	//

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)ACCEPTS_INCOMMING_CALL, strlen(ACCEPTS_INCOMMING_CALL), 1000);
 80024f8:	4822      	ldr	r0, [pc, #136]	; (8002584 <accepts_on_incomming_call+0xa0>)
 80024fa:	f7fd fe29 	bl	8000150 <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	b29a      	uxth	r2, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	491f      	ldr	r1, [pc, #124]	; (8002584 <accepts_on_incomming_call+0xa0>)
 8002508:	481f      	ldr	r0, [pc, #124]	; (8002588 <accepts_on_incomming_call+0xa4>)
 800250a:	f007 f87f 	bl	800960c <HAL_UART_Transmit>

	ansver_flag = 0;
 800250e:	4b1f      	ldr	r3, [pc, #124]	; (800258c <accepts_on_incomming_call+0xa8>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002514:	2300      	movs	r3, #0
 8002516:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002518:	e022      	b.n	8002560 <accepts_on_incomming_call+0x7c>
	{
		id++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
		DelayMicro(100);
 8002520:	2064      	movs	r0, #100	; 0x64
 8002522:	f7ff fc1f 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <accepts_on_incomming_call+0xa8>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d110      	bne.n	8002550 <accepts_on_incomming_call+0x6c>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 800252e:	4918      	ldr	r1, [pc, #96]	; (8002590 <accepts_on_incomming_call+0xac>)
 8002530:	4818      	ldr	r0, [pc, #96]	; (8002594 <accepts_on_incomming_call+0xb0>)
 8002532:	f007 fe23 	bl	800a17c <strstr>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <accepts_on_incomming_call+0x6c>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800253c:	223c      	movs	r2, #60	; 0x3c
 800253e:	2100      	movs	r1, #0
 8002540:	4814      	ldr	r0, [pc, #80]	; (8002594 <accepts_on_incomming_call+0xb0>)
 8002542:	f007 fdcf 	bl	800a0e4 <memset>
				ansver_flag = 1;
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <accepts_on_incomming_call+0xa8>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
				return 1;
 800254c:	2301      	movs	r3, #1
 800254e:	e015      	b.n	800257c <accepts_on_incomming_call+0x98>
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d303      	bcc.n	8002560 <accepts_on_incomming_call+0x7c>
		{
			no_answer = true;               // Out from waiting answer
 8002558:	2301      	movs	r3, #1
 800255a:	72fb      	strb	r3, [r7, #11]
			return 0;
 800255c:	2300      	movs	r3, #0
 800255e:	e00d      	b.n	800257c <accepts_on_incomming_call+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <accepts_on_incomming_call+0xa8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d009      	beq.n	800257c <accepts_on_incomming_call+0x98>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d805      	bhi.n	800257c <accepts_on_incomming_call+0x98>
 8002570:	7afb      	ldrb	r3, [r7, #11]
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ce      	bne.n	800251a <accepts_on_incomming_call+0x36>
		}
	}
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000038 	.word	0x20000038
 8002588:	20000a80 	.word	0x20000a80
 800258c:	200002a0 	.word	0x200002a0
 8002590:	0800d5e0 	.word	0x0800d5e0
 8002594:	20000264 	.word	0x20000264

08002598 <wait_ansver_after_make_call_in_blok_mode>:


// -------------------------------------------------------------------
//	 // waite answer "BUSY" from GSM    WORK OK
int wait_ansver_after_make_call_in_blok_mode(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0

		 while (ansver_flag != 1)
 800259c:	bf00      	nop
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d1fb      	bne.n	800259e <wait_ansver_after_make_call_in_blok_mode+0x6>
		 {
			// waite for answer
		 }
		 if(ansver_flag == 1)
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d132      	bne.n	8002614 <wait_ansver_after_make_call_in_blok_mode+0x7c>
		 {
				if (strstr(GSM_RX_buffer, "BUSY"))                        // Звінок збитий  // Work OK
 80025ae:	491b      	ldr	r1, [pc, #108]	; (800261c <wait_ansver_after_make_call_in_blok_mode+0x84>)
 80025b0:	481b      	ldr	r0, [pc, #108]	; (8002620 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80025b2:	f007 fde3 	bl	800a17c <strstr>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <wait_ansver_after_make_call_in_blok_mode+0x38>
			    {
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80025bc:	223c      	movs	r2, #60	; 0x3c
 80025be:	2100      	movs	r1, #0
 80025c0:	4817      	ldr	r0, [pc, #92]	; (8002620 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80025c2:	f007 fd8f 	bl	800a0e4 <memset>
					ansver_flag = 1;
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
					return 1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e021      	b.n	8002614 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}

				if (strstr(GSM_RX_buffer, "NO ANSWER"))					  // Не відповідає  // Work OK
 80025d0:	4914      	ldr	r1, [pc, #80]	; (8002624 <wait_ansver_after_make_call_in_blok_mode+0x8c>)
 80025d2:	4813      	ldr	r0, [pc, #76]	; (8002620 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80025d4:	f007 fdd2 	bl	800a17c <strstr>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <wait_ansver_after_make_call_in_blok_mode+0x5a>
			    {
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80025de:	223c      	movs	r2, #60	; 0x3c
 80025e0:	2100      	movs	r1, #0
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80025e4:	f007 fd7e 	bl	800a0e4 <memset>
				    ansver_flag = 1;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
				    return 2;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e010      	b.n	8002614 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}

				if (strstr(GSM_RX_buffer, "NO CARRIER"))					  // Трубка піднята
 80025f2:	490d      	ldr	r1, [pc, #52]	; (8002628 <wait_ansver_after_make_call_in_blok_mode+0x90>)
 80025f4:	480a      	ldr	r0, [pc, #40]	; (8002620 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 80025f6:	f007 fdc1 	bl	800a17c <strstr>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				{
					memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002600:	223c      	movs	r2, #60	; 0x3c
 8002602:	2100      	movs	r1, #0
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002606:	f007 fd6d 	bl	800a0e4 <memset>
				    ansver_flag = 1;
 800260a:	4b03      	ldr	r3, [pc, #12]	; (8002618 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
				    return 3;
 8002610:	2303      	movs	r3, #3
 8002612:	e7ff      	b.n	8002614 <wait_ansver_after_make_call_in_blok_mode+0x7c>
				}
		}
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200002a0 	.word	0x200002a0
 800261c:	0800d618 	.word	0x0800d618
 8002620:	20000264 	.word	0x20000264
 8002624:	0800d620 	.word	0x0800d620
 8002628:	0800d62c 	.word	0x0800d62c

0800262c <wait_incoming_call>:
 * 		0 - Error(Timeout)
 * 		1 - No input call
 * 		2 - input call
 */
int wait_incoming_call(char *incoming_number)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	uint32_t id =0;               				 // Variable for timeout
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
	bool no_answer = false;
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
	int timeout_counter = 10000;                 // Variable for compare timeout
 800263c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002640:	61bb      	str	r3, [r7, #24]
	ansver_flag = 0;
 8002642:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <wait_incoming_call+0x188>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002648:	2300      	movs	r3, #0
 800264a:	77fb      	strb	r3, [r7, #31]

	// Senc check command
	char AT_CLCC[] = "AT+CLCC\r\n";
 800264c:	4a5a      	ldr	r2, [pc, #360]	; (80027b8 <wait_incoming_call+0x18c>)
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	ca07      	ldmia	r2, {r0, r1, r2}
 8002654:	c303      	stmia	r3!, {r0, r1}
 8002656:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CLCC, strlen(AT_CLCC), 1000);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd fd77 	bl	8000150 <strlen>
 8002662:	4603      	mov	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	f107 010c 	add.w	r1, r7, #12
 800266a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266e:	4853      	ldr	r0, [pc, #332]	; (80027bc <wait_incoming_call+0x190>)
 8002670:	f006 ffcc 	bl	800960c <HAL_UART_Transmit>

	// Wait for an answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002674:	e08b      	b.n	800278e <wait_incoming_call+0x162>
	{
		id++;														// Increment timeout
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	3301      	adds	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
		DelayMicro(10);
 800267c:	200a      	movs	r0, #10
 800267e:	f7ff fb71 	bl	8001d64 <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <wait_incoming_call+0x188>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d179      	bne.n	800277e <wait_incoming_call+0x152>
		{
			if (strstr(GSM_RX_buffer, "OK"))   					// NO incoming call
 800268a:	494d      	ldr	r1, [pc, #308]	; (80027c0 <wait_incoming_call+0x194>)
 800268c:	484d      	ldr	r0, [pc, #308]	; (80027c4 <wait_incoming_call+0x198>)
 800268e:	f007 fd75 	bl	800a17c <strstr>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <wait_incoming_call+0x80>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002698:	223c      	movs	r2, #60	; 0x3c
 800269a:	2100      	movs	r1, #0
 800269c:	4849      	ldr	r0, [pc, #292]	; (80027c4 <wait_incoming_call+0x198>)
 800269e:	f007 fd21 	bl	800a0e4 <memset>
				ansver_flag = 1;
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <wait_incoming_call+0x188>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
				return 1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e07f      	b.n	80027ac <wait_incoming_call+0x180>
			}
			uint8_t find_edigit_counter = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			//+CLCC: 1,1,4,0,0,"+380931482354",145,""
			if(strstr(GSM_RX_buffer, "+CLCC: 1,1,4,0,0,"))
 80026b2:	4945      	ldr	r1, [pc, #276]	; (80027c8 <wait_incoming_call+0x19c>)
 80026b4:	4843      	ldr	r0, [pc, #268]	; (80027c4 <wait_incoming_call+0x198>)
 80026b6:	f007 fd61 	bl	800a17c <strstr>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05e      	beq.n	800277e <wait_incoming_call+0x152>
			{
				// Parsing number
				uint8_t i = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				for(i = 0; i <= sizeof(GSM_RX_buffer); i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80026cc:	e049      	b.n	8002762 <wait_incoming_call+0x136>
				{
					if(GSM_RX_buffer[i] == '+')										// Find start number
 80026ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80026d2:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <wait_incoming_call+0x198>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	2b2b      	cmp	r3, #43	; 0x2b
 80026d8:	d13e      	bne.n	8002758 <wait_incoming_call+0x12c>
					{
						find_edigit_counter ++;										// We have two '+' sign because we must miss first sign
 80026da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026de:	3301      	adds	r3, #1
 80026e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						if(find_edigit_counter == 2)
 80026e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d135      	bne.n	8002758 <wait_incoming_call+0x12c>
						{
							i++;
 80026ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80026f0:	3301      	adds	r3, #1
 80026f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
							uint8_t k = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							uint8_t j = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3020 	strb.w	r3, [r7, #32]
							for(j = 0; j<= 12; j ++)								// 12 - mobile number long
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3020 	strb.w	r3, [r7, #32]
 8002708:	e022      	b.n	8002750 <wait_incoming_call+0x124>
							{
								if(j == 12)											// Add '\0' in last element
 800270a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d106      	bne.n	8002720 <wait_incoming_call+0xf4>
								{
									incoming_number[k] = '\0';
 8002712:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e012      	b.n	8002746 <wait_incoming_call+0x11a>
								}
								else
								{
									incoming_number[k] = GSM_RX_buffer[i];			// Copy
 8002720:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	440b      	add	r3, r1
 800272c:	4925      	ldr	r1, [pc, #148]	; (80027c4 <wait_incoming_call+0x198>)
 800272e:	5c8a      	ldrb	r2, [r1, r2]
 8002730:	701a      	strb	r2, [r3, #0]
									i++;
 8002732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002736:	3301      	adds	r3, #1
 8002738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
									k++;
 800273c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002740:	3301      	adds	r3, #1
 8002742:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							for(j = 0; j<= 12; j ++)								// 12 - mobile number long
 8002746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800274a:	3301      	adds	r3, #1
 800274c:	f887 3020 	strb.w	r3, [r7, #32]
 8002750:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d9d8      	bls.n	800270a <wait_incoming_call+0xde>
				for(i = 0; i <= sizeof(GSM_RX_buffer); i++)
 8002758:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800275c:	3301      	adds	r3, #1
 800275e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002762:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002766:	2b3c      	cmp	r3, #60	; 0x3c
 8002768:	d9b1      	bls.n	80026ce <wait_incoming_call+0xa2>
							}
						}
					}
				}

				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));					// Сlean the buffer
 800276a:	223c      	movs	r2, #60	; 0x3c
 800276c:	2100      	movs	r1, #0
 800276e:	4815      	ldr	r0, [pc, #84]	; (80027c4 <wait_incoming_call+0x198>)
 8002770:	f007 fcb8 	bl	800a0e4 <memset>
				ansver_flag = 1;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <wait_incoming_call+0x188>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]

				return 2;
 800277a:	2302      	movs	r3, #2
 800277c:	e016      	b.n	80027ac <wait_incoming_call+0x180>
			}
		}

		if(id  >= timeout_counter)													// Out of timeout
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	429a      	cmp	r2, r3
 8002784:	d303      	bcc.n	800278e <wait_incoming_call+0x162>
		{
			no_answer = true;														 // Out from waiting answer
 8002786:	2301      	movs	r3, #1
 8002788:	77fb      	strb	r3, [r7, #31]

			return 0;
 800278a:	2300      	movs	r3, #0
 800278c:	e00e      	b.n	80027ac <wait_incoming_call+0x180>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <wait_incoming_call+0x188>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d00a      	beq.n	80027ac <wait_incoming_call+0x180>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d806      	bhi.n	80027ac <wait_incoming_call+0x180>
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	f083 0301 	eor.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f47f af65 	bne.w	8002676 <wait_incoming_call+0x4a>
		}
	}
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200002a0 	.word	0x200002a0
 80027b8:	0800d64c 	.word	0x0800d64c
 80027bc:	20000a80 	.word	0x20000a80
 80027c0:	0800d5e0 	.word	0x0800d5e0
 80027c4:	20000264 	.word	0x20000264
 80027c8:	0800d638 	.word	0x0800d638

080027cc <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
 80027d0:	af00      	add	r7, sp, #0
	uint8_t size=0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 80027e2:	23ff      	movs	r3, #255	; 0xff
 80027e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 80027ee:	463b      	mov	r3, r7
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f958 	bl	8002aa8 <r_single_Si7021>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80027fe:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002802:	2b00      	cmp	r3, #0
 8002804:	d000      	beq.n	8002808 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 8002806:	e7fe      	b.n	8002806 <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fc40 	bl	8001094 <__aeabi_fcmplt>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <read_T_and_H_SI7021+0x52>
 800281a:	4b52      	ldr	r3, [pc, #328]	; (8002964 <read_T_and_H_SI7021+0x198>)
 800281c:	e000      	b.n	8002820 <read_T_and_H_SI7021+0x54>
 800281e:	4b52      	ldr	r3, [pc, #328]	; (8002968 <read_T_and_H_SI7021+0x19c>)
 8002820:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fc33 	bl	8001094 <__aeabi_fcmplt>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <read_T_and_H_SI7021+0x70>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800283a:	e000      	b.n	800283e <read_T_and_H_SI7021+0x72>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 8002840:	69f8      	ldr	r0, [r7, #28]
 8002842:	f7fe fc4f 	bl	80010e4 <__aeabi_f2iz>
 8002846:	4603      	mov	r3, r0
 8002848:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 800284a:	683c      	ldr	r4, [r7, #0]
 800284c:	69b8      	ldr	r0, [r7, #24]
 800284e:	f7fe fa2f 	bl	8000cb0 <__aeabi_i2f>
 8002852:	4603      	mov	r3, r0
 8002854:	4619      	mov	r1, r3
 8002856:	4620      	mov	r0, r4
 8002858:	f7fe f974 	bl	8000b44 <__aeabi_fsub>
 800285c:	4603      	mov	r3, r0
 800285e:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 8002860:	4942      	ldr	r1, [pc, #264]	; (800296c <read_T_and_H_SI7021+0x1a0>)
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7fe fa78 	bl	8000d58 <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fddc 	bl	8000428 <__aeabi_f2d>
 8002870:	4603      	mov	r3, r0
 8002872:	460c      	mov	r4, r1
 8002874:	4618      	mov	r0, r3
 8002876:	4621      	mov	r1, r4
 8002878:	f00a fe64 	bl	800d544 <trunc>
 800287c:	4603      	mov	r3, r0
 800287e:	460c      	mov	r4, r1
 8002880:	4618      	mov	r0, r3
 8002882:	4621      	mov	r1, r4
 8002884:	f7fe f8c2 	bl	8000a0c <__aeabi_d2iz>
 8002888:	4603      	mov	r3, r0
 800288a:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 800288c:	1d38      	adds	r0, r7, #4
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	4937      	ldr	r1, [pc, #220]	; (8002970 <read_T_and_H_SI7021+0x1a4>)
 8002894:	f007 fc2e 	bl	800a0f4 <siprintf>
	strcpy(temperature_si7021, str);
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	4619      	mov	r1, r3
 800289c:	4835      	ldr	r0, [pc, #212]	; (8002974 <read_T_and_H_SI7021+0x1a8>)
 800289e:	f007 fc65 	bl	800a16c <strcpy>
	memset(str, 0 , sizeof(str));
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	220a      	movs	r2, #10
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 fc1b 	bl	800a0e4 <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 80028ae:	23ff      	movs	r3, #255	; 0xff
 80028b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 80028b4:	463b      	mov	r3, r7
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f8f5 	bl	8002aa8 <r_single_Si7021>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80028c4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d000      	beq.n	80028ce <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 80028cc:	e7fe      	b.n	80028cc <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fbdd 	bl	8001094 <__aeabi_fcmplt>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <read_T_and_H_SI7021+0x11c>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028e6:	e000      	b.n	80028ea <read_T_and_H_SI7021+0x11e>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 80028ec:	69f8      	ldr	r0, [r7, #28]
 80028ee:	f7fe fbf9 	bl	80010e4 <__aeabi_f2iz>
 80028f2:	4603      	mov	r3, r0
 80028f4:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 80028f6:	683c      	ldr	r4, [r7, #0]
 80028f8:	69b8      	ldr	r0, [r7, #24]
 80028fa:	f7fe f9d9 	bl	8000cb0 <__aeabi_i2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7fe f91e 	bl	8000b44 <__aeabi_fsub>
 8002908:	4603      	mov	r3, r0
 800290a:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 800290c:	4917      	ldr	r1, [pc, #92]	; (800296c <read_T_and_H_SI7021+0x1a0>)
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7fe fa22 	bl	8000d58 <__aeabi_fmul>
 8002914:	4603      	mov	r3, r0
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fd86 	bl	8000428 <__aeabi_f2d>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	4618      	mov	r0, r3
 8002922:	4621      	mov	r1, r4
 8002924:	f00a fe0e 	bl	800d544 <trunc>
 8002928:	4603      	mov	r3, r0
 800292a:	460c      	mov	r4, r1
 800292c:	4618      	mov	r0, r3
 800292e:	4621      	mov	r1, r4
 8002930:	f7fe f86c 	bl	8000a0c <__aeabi_d2iz>
 8002934:	4603      	mov	r3, r0
 8002936:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <read_T_and_H_SI7021+0x1ac>)
 800293e:	4618      	mov	r0, r3
 8002940:	f007 fbd8 	bl	800a0f4 <siprintf>
	strcpy(humidity_si7021, str);
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	4619      	mov	r1, r3
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <read_T_and_H_SI7021+0x1b0>)
 800294a:	f007 fc0f 	bl	800a16c <strcpy>
	memset(str, 0 , sizeof(str));
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	220a      	movs	r2, #10
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f007 fbc5 	bl	800a0e4 <memset>
}
 800295a:	bf00      	nop
 800295c:	372c      	adds	r7, #44	; 0x2c
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	0800d658 	.word	0x0800d658
 8002968:	0800d65c 	.word	0x0800d65c
 800296c:	461c4000 	.word	0x461c4000
 8002970:	0800d660 	.word	0x0800d660
 8002974:	200006cc 	.word	0x200006cc
 8002978:	0800d668 	.word	0x0800d668
 800297c:	200006d4 	.word	0x200006d4

08002980 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fd39 	bl	8000404 <__aeabi_i2d>
 8002992:	a311      	add	r3, pc, #68	; (adr r3, 80029d8 <process_temp_code+0x58>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fd9e 	bl	80004d8 <__aeabi_dmul>
 800299c:	4603      	mov	r3, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	4618      	mov	r0, r3
 80029a2:	4621      	mov	r1, r4
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <process_temp_code+0x68>)
 80029aa:	f7fd febf 	bl	800072c <__aeabi_ddiv>
 80029ae:	4603      	mov	r3, r0
 80029b0:	460c      	mov	r4, r1
 80029b2:	4618      	mov	r0, r3
 80029b4:	4621      	mov	r1, r4
 80029b6:	a30a      	add	r3, pc, #40	; (adr r3, 80029e0 <process_temp_code+0x60>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fbd4 	bl	8000168 <__aeabi_dsub>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	4618      	mov	r0, r3
 80029c6:	4621      	mov	r1, r4
 80029c8:	f7fe f868 	bl	8000a9c <__aeabi_d2f>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	3d70a3d7 	.word	0x3d70a3d7
 80029dc:	4065f70a 	.word	0x4065f70a
 80029e0:	cccccccd 	.word	0xcccccccd
 80029e4:	40476ccc 	.word	0x40476ccc
 80029e8:	40f00000 	.word	0x40f00000

080029ec <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fd03 	bl	8000404 <__aeabi_i2d>
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <process_humi_code+0x84>)
 8002a04:	f7fd fd68 	bl	80004d8 <__aeabi_dmul>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	4621      	mov	r1, r4
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <process_humi_code+0x88>)
 8002a16:	f7fd fe89 	bl	800072c <__aeabi_ddiv>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	460c      	mov	r4, r1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	4621      	mov	r1, r4
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <process_humi_code+0x8c>)
 8002a28:	f7fd fb9e 	bl	8000168 <__aeabi_dsub>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	4618      	mov	r0, r3
 8002a32:	4621      	mov	r1, r4
 8002a34:	f7fe f832 	bl	8000a9c <__aeabi_d2f>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7fe fb27 	bl	8001094 <__aeabi_fcmplt>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <process_humi_code+0x66>
    return 0;
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e009      	b.n	8002a66 <process_humi_code+0x7a>
  else if(value > 100)
 8002a52:	490a      	ldr	r1, [pc, #40]	; (8002a7c <process_humi_code+0x90>)
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7fe fb3b 	bl	80010d0 <__aeabi_fcmpgt>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <process_humi_code+0x78>
    return 100;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <process_humi_code+0x90>)
 8002a62:	e000      	b.n	8002a66 <process_humi_code+0x7a>
  else
    return (float)value;
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	405f4000 	.word	0x405f4000
 8002a74:	40f00000 	.word	0x40f00000
 8002a78:	40180000 	.word	0x40180000
 8002a7c:	42c80000 	.word	0x42c80000

08002a80 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3301      	adds	r3, #1
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b21b      	sxth	r3, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b21b      	sxth	r3, r3
 8002a9c:	b29b      	uxth	r3, r3
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 8002aba:	23e5      	movs	r3, #229	; 0xe5
 8002abc:	737b      	strb	r3, [r7, #13]
 8002abe:	e008      	b.n	8002ad2 <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <r_single_Si7021+0x24>
    cmd = Temp_HM;
 8002ac6:	23e3      	movs	r3, #227	; 0xe3
 8002ac8:	737b      	strb	r3, [r7, #13]
 8002aca:	e002      	b.n	8002ad2 <r_single_Si7021+0x2a>
  else
    return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad0:	e03c      	b.n	8002b4c <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	f107 020d 	add.w	r2, r7, #13
 8002ad8:	f242 7310 	movw	r3, #10000	; 0x2710
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	481c      	ldr	r0, [pc, #112]	; (8002b54 <r_single_Si7021+0xac>)
 8002ae2:	f003 ff17 	bl	8006914 <HAL_I2C_Master_Transmit>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <r_single_Si7021+0x4a>
    return -1;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af0:	e02c      	b.n	8002b4c <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	f107 0208 	add.w	r2, r7, #8
 8002af8:	f242 7310 	movw	r3, #10000	; 0x2710
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2302      	movs	r3, #2
 8002b00:	4814      	ldr	r0, [pc, #80]	; (8002b54 <r_single_Si7021+0xac>)
 8002b02:	f004 f805 	bl	8006b10 <HAL_I2C_Master_Receive>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <r_single_Si7021+0x6a>
    return -1;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b10:	e01c      	b.n	8002b4c <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ffb2 	bl	8002a80 <convert_to_uint16>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 8002b26:	89fb      	ldrh	r3, [r7, #14]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5f 	bl	80029ec <process_humi_code>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e009      	b.n	8002b4a <r_single_Si7021+0xa2>
  else if(type == Temperature)
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff1e 	bl	8002980 <process_temp_code>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]

  return 0;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000082c 	.word	0x2000082c

08002b58 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 8002b5e:	2300      	movs	r3, #0
 8002b60:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e043      	b.n	8002bf2 <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f003 f87c 	bl	8005c68 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <I2C_1_scaner+0xb8>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b298      	uxth	r0, r3
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <I2C_1_scaner+0xbc>)
 8002b82:	881c      	ldrh	r4, [r3, #0]
 8002b84:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <I2C_1_scaner+0xbc>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <I2C_1_scaner+0xc0>)
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	9202      	str	r2, [sp, #8]
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <I2C_1_scaner+0xc4>)
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4623      	mov	r3, r4
 8002b96:	4602      	mov	r2, r0
 8002b98:	4821      	ldr	r0, [pc, #132]	; (8002c20 <I2C_1_scaner+0xc8>)
 8002b9a:	f004 fb0d 	bl	80071b8 <HAL_I2C_Mem_Read>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <I2C_1_scaner+0xcc>)
 8002ba4:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <I2C_1_scaner+0xcc>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11b      	bne.n	8002be6 <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b3c      	cmp	r3, #60	; 0x3c
 8002bde:	d001      	beq.n	8002be4 <I2C_1_scaner+0x8c>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 8002be2:	e000      	b.n	8002be6 <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8002be4:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <I2C_1_scaner+0xb4>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2bff      	cmp	r3, #255	; 0xff
 8002bf8:	d1b7      	bne.n	8002b6a <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8002bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bfe:	f003 f833 	bl	8005c68 <HAL_Delay>
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200002a3 	.word	0x200002a3
 8002c10:	200002a4 	.word	0x200002a4
 8002c14:	2000005c 	.word	0x2000005c
 8002c18:	20000060 	.word	0x20000060
 8002c1c:	200002a5 	.word	0x200002a5
 8002c20:	2000082c 	.word	0x2000082c
 8002c24:	200002a6 	.word	0x200002a6

08002c28 <HAL_UART_RxCpltCallback>:
// Receive data from GPS module
#if GPS
	// GPS receive part///////////////////////////////////////////////////////
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
		flag = 1;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_UART_RxCpltCallback+0x18>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
	}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	200002ac 	.word	0x200002ac

08002c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4a:	f002 ffab 	bl	8005ba4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c4e:	f000 f8b1 	bl	8002db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c52:	f000 fae5 	bl	8003220 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c56:	f000 fac5 	bl	80031e4 <MX_DMA_Init>
  MX_TIM2_Init();
 8002c5a:	f000 f9f7 	bl	800304c <MX_TIM2_Init>
  MX_I2C1_Init();
 8002c5e:	f000 f8ef 	bl	8002e40 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002c62:	f000 fa41 	bl	80030e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002c66:	f000 fa93 	bl	8003190 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8002c6a:	f000 f917 	bl	8002e9c <MX_SPI2_Init>
  MX_TIM1_Init();
 8002c6e:	f000 f94b 	bl	8002f08 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002c72:	f000 fa63 	bl	800313c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	#if I2C_SCANNER
  	  I2C_1_scaner();
 8002c76:	f7ff ff6f 	bl	8002b58 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  	  read_T_and_H_SI7021();
 8002c7a:	f7ff fda7 	bl	80027cc <read_T_and_H_SI7021>
	#endif

	#if OLED
  	  init_oled();
 8002c7e:	f001 ff29 	bl	8004ad4 <init_oled>
	  //test_oled();
	#endif

  	  HAL_TIM_Base_Start_IT(&htim2);
 8002c82:	4845      	ldr	r0, [pc, #276]	; (8002d98 <main+0x154>)
 8002c84:	f005 fe4c 	bl	8008920 <HAL_TIM_Base_Start_IT>

	#if GPS
//  	  uint8_t GPS_buff[512];      						// main buffer for stream from GPS
  	  memset(GPS_buff ,0 ,sizeof(GPS_buff));
 8002c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4843      	ldr	r0, [pc, #268]	; (8002d9c <main+0x158>)
 8002c90:	f007 fa28 	bl	800a0e4 <memset>
  	  HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 8002c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c98:	4940      	ldr	r1, [pc, #256]	; (8002d9c <main+0x158>)
 8002c9a:	4841      	ldr	r0, [pc, #260]	; (8002da0 <main+0x15c>)
 8002c9c:	f006 fd50 	bl	8009740 <HAL_UART_Receive_DMA>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
  #endif

  int EXIT = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
/////////////////////////////////////////////////////////////////////////////////////////////////
while (1)
{
	EXIT = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34

	char str[50]={0};
 8002ca8:	463b      	mov	r3, r7
 8002caa:	2232      	movs	r2, #50	; 0x32
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f007 fa18 	bl	800a0e4 <memset>
	char sign = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	print_main_menu();  // Print main menu on OLED
 8002cba:	f001 ff41 	bl	8004b40 <print_main_menu>

	do                                                            // Wait for choice
	{
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8002cbe:	f000 fb63 	bl	8003388 <read_one_sign_from_keyboard>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// For debug ///////////
		//sign = '1';    // turn on GSM mode
		/////////////////////

		if(sign == '1')    							// If select GSM mode
 8002cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ccc:	2b31      	cmp	r3, #49	; 0x31
 8002cce:	d110      	bne.n	8002cf2 <main+0xae>
		{
			GSM_MODE = true;
 8002cd0:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <main+0x160>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
			while(GSM_MODE && (EXIT == 0))
 8002cd6:	e005      	b.n	8002ce4 <main+0xa0>
			{
				EXIT = gsm_mode(sign);
 8002cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fd6b 	bl	80037b8 <gsm_mode>
 8002ce2:	6378      	str	r0, [r7, #52]	; 0x34
			while(GSM_MODE && (EXIT == 0))
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <main+0x160>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <main+0xae>
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f2      	beq.n	8002cd8 <main+0x94>
			}
		}
		if(sign == '2')    							// If select GPS mode
 8002cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cf6:	2b32      	cmp	r3, #50	; 0x32
 8002cf8:	d110      	bne.n	8002d1c <main+0xd8>
		{
			GPS_MODE = true;
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <main+0x164>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
			while (GPS_MODE && (EXIT == 0))
 8002d00:	e005      	b.n	8002d0e <main+0xca>
			{
				EXIT = gps_mode(sign);
 8002d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fc72 	bl	80035f0 <gps_mode>
 8002d0c:	6378      	str	r0, [r7, #52]	; 0x34
			while (GPS_MODE && (EXIT == 0))
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <main+0x164>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <main+0xd8>
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f2      	beq.n	8002d02 <main+0xbe>
			}
		}
		if(sign == '3')    							// If select FINGERPRINT MODE
 8002d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d20:	2b33      	cmp	r3, #51	; 0x33
 8002d22:	d110      	bne.n	8002d46 <main+0x102>
		{
			FINGERPRINT_MODE = true;
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <main+0x168>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
			while (FINGERPRINT_MODE && (EXIT == 0))
 8002d2a:	e005      	b.n	8002d38 <main+0xf4>
			{
				EXIT = fingerprint_mode(sign);
 8002d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f853 	bl	8003ddc <fingerprint_mode>
 8002d36:	6378      	str	r0, [r7, #52]	; 0x34
			while (FINGERPRINT_MODE && (EXIT == 0))
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <main+0x168>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <main+0x102>
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f2      	beq.n	8002d2c <main+0xe8>
			}
		}
		if(sign == '4')    							// If select SENSORS MODE
 8002d46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d4a:	2b34      	cmp	r3, #52	; 0x34
 8002d4c:	d110      	bne.n	8002d70 <main+0x12c>
		{
			SENSORS_MODE = true;
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <main+0x16c>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
			while (SENSORS_MODE && (EXIT == 0))
 8002d54:	e005      	b.n	8002d62 <main+0x11e>
			{
				EXIT = sensors_mode(sign);
 8002d56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f9ee 	bl	800413c <sensors_mode>
 8002d60:	6378      	str	r0, [r7, #52]	; 0x34
			while (SENSORS_MODE && (EXIT == 0))
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <main+0x16c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <main+0x12c>
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f2      	beq.n	8002d56 <main+0x112>
			}
		}

		ssd1306_UpdateScreen();
 8002d70:	f002 fa78 	bl	8005264 <ssd1306_UpdateScreen>
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '4'));     // Select one from 3 modes
 8002d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d78:	2b31      	cmp	r3, #49	; 0x31
 8002d7a:	d093      	beq.n	8002ca4 <main+0x60>
 8002d7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d80:	2b32      	cmp	r3, #50	; 0x32
 8002d82:	d08f      	beq.n	8002ca4 <main+0x60>
 8002d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d88:	2b33      	cmp	r3, #51	; 0x33
 8002d8a:	d08b      	beq.n	8002ca4 <main+0x60>
 8002d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d90:	2b34      	cmp	r3, #52	; 0x34
 8002d92:	d194      	bne.n	8002cbe <main+0x7a>
{
 8002d94:	e786      	b.n	8002ca4 <main+0x60>
 8002d96:	bf00      	nop
 8002d98:	20000b00 	.word	0x20000b00
 8002d9c:	20000880 	.word	0x20000880
 8002da0:	200007ec 	.word	0x200007ec
 8002da4:	200002a8 	.word	0x200002a8
 8002da8:	200002a9 	.word	0x200002a9
 8002dac:	200002aa 	.word	0x200002aa
 8002db0:	200002ab 	.word	0x200002ab

08002db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b090      	sub	sp, #64	; 0x40
 8002db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dba:	f107 0318 	add.w	r3, r7, #24
 8002dbe:	2228      	movs	r2, #40	; 0x28
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f007 f98e 	bl	800a0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de8:	2302      	movs	r3, #2
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002df2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 f8e7 	bl	8007fd0 <HAL_RCC_OscConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002e08:	f001 fe5e 	bl	8004ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f005 fb52 	bl	80084d0 <HAL_RCC_ClockConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002e32:	f001 fe49 	bl	8004ac8 <Error_Handler>
  }
}
 8002e36:	bf00      	nop
 8002e38:	3740      	adds	r7, #64	; 0x40
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <MX_I2C1_Init+0x54>)
 8002e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <MX_I2C1_Init+0x58>)
 8002e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <MX_I2C1_Init+0x50>)
 8002e7e:	f003 fc11 	bl	80066a4 <HAL_I2C_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e88:	f001 fe1e 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000082c 	.word	0x2000082c
 8002e94:	40005400 	.word	0x40005400
 8002e98:	000186a0 	.word	0x000186a0

08002e9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <MX_SPI2_Init+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ecc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002ee8:	220a      	movs	r2, #10
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002eec:	4804      	ldr	r0, [pc, #16]	; (8002f00 <MX_SPI2_Init+0x64>)
 8002eee:	f005 fc8b 	bl	8008808 <HAL_SPI_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ef8:	f001 fde6 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000750 	.word	0x20000750
 8002f04:	40003800 	.word	0x40003800

08002f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b096      	sub	sp, #88	; 0x58
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]
 8002f36:	615a      	str	r2, [r3, #20]
 8002f38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f007 f8cf 	bl	800a0e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f46:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f48:	4a3f      	ldr	r2, [pc, #252]	; (8003048 <MX_TIM1_Init+0x140>)
 8002f4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f4e:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002f52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8002f5a:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002f60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f62:	4b38      	ldr	r3, [pc, #224]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6e:	4b35      	ldr	r3, [pc, #212]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f74:	4833      	ldr	r0, [pc, #204]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f76:	f005 fca8 	bl	80088ca <HAL_TIM_Base_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f80:	f001 fda2 	bl	8004ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f8e:	4619      	mov	r1, r3
 8002f90:	482c      	ldr	r0, [pc, #176]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002f92:	f005 feeb 	bl	8008d6c <HAL_TIM_ConfigClockSource>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f9c:	f001 fd94 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fa0:	4828      	ldr	r0, [pc, #160]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002fa2:	f005 fce0 	bl	8008966 <HAL_TIM_PWM_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002fac:	f001 fd8c 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4821      	ldr	r0, [pc, #132]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002fc0:	f006 fa30 	bl	8009424 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002fca:	f001 fd7d 	bl	8004ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fce:	2360      	movs	r3, #96	; 0x60
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8002fd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4813      	ldr	r0, [pc, #76]	; (8003044 <MX_TIM1_Init+0x13c>)
 8002ff6:	f005 fdf3 	bl	8008be0 <HAL_TIM_PWM_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003000:	f001 fd62 	bl	8004ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800301c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4807      	ldr	r0, [pc, #28]	; (8003044 <MX_TIM1_Init+0x13c>)
 8003028:	f006 fa40 	bl	80094ac <HAL_TIMEx_ConfigBreakDeadTime>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003032:	f001 fd49 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003036:	4803      	ldr	r0, [pc, #12]	; (8003044 <MX_TIM1_Init+0x13c>)
 8003038:	f002 fb56 	bl	80056e8 <HAL_TIM_MspPostInit>

}
 800303c:	bf00      	nop
 800303e:	3758      	adds	r7, #88	; 0x58
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000ac0 	.word	0x20000ac0
 8003048:	40012c00 	.word	0x40012c00

0800304c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <MX_TIM2_Init+0x98>)
 800306a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800306e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8003070:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <MX_TIM2_Init+0x98>)
 8003072:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8003076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <MX_TIM2_Init+0x98>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <MX_TIM2_Init+0x98>)
 8003080:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <MX_TIM2_Init+0x98>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <MX_TIM2_Init+0x98>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003092:	4814      	ldr	r0, [pc, #80]	; (80030e4 <MX_TIM2_Init+0x98>)
 8003094:	f005 fc19 	bl	80088ca <HAL_TIM_Base_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800309e:	f001 fd13 	bl	8004ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	4619      	mov	r1, r3
 80030ae:	480d      	ldr	r0, [pc, #52]	; (80030e4 <MX_TIM2_Init+0x98>)
 80030b0:	f005 fe5c 	bl	8008d6c <HAL_TIM_ConfigClockSource>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80030ba:	f001 fd05 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030c6:	463b      	mov	r3, r7
 80030c8:	4619      	mov	r1, r3
 80030ca:	4806      	ldr	r0, [pc, #24]	; (80030e4 <MX_TIM2_Init+0x98>)
 80030cc:	f006 f9aa 	bl	8009424 <HAL_TIMEx_MasterConfigSynchronization>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030d6:	f001 fcf7 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000b00 	.word	0x20000b00

080030e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	; (8003138 <MX_USART1_UART_Init+0x50>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 80030f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_USART1_UART_Init+0x4c>)
 8003120:	f006 fa27 	bl	8009572 <HAL_UART_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800312a:	f001 fccd 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000a80 	.word	0x20000a80
 8003138:	40013800 	.word	0x40013800

0800313c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <MX_USART2_UART_Init+0x50>)
 8003144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003148:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800314c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003162:	220c      	movs	r2, #12
 8003164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003174:	f006 f9fd 	bl	8009572 <HAL_UART_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800317e:	f001 fca3 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000b40 	.word	0x20000b40
 800318c:	40004400 	.word	0x40004400

08003190 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <MX_USART3_UART_Init+0x50>)
 8003198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 800319c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031c8:	f006 f9d3 	bl	8009572 <HAL_UART_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031d2:	f001 fc79 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200007ec 	.word	0x200007ec
 80031e0:	40004800 	.word	0x40004800

080031e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_DMA_Init+0x38>)
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <MX_DMA_Init+0x38>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6153      	str	r3, [r2, #20]
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_DMA_Init+0x38>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	200d      	movs	r0, #13
 8003208:	f002 fe27 	bl	8005e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800320c:	200d      	movs	r0, #13
 800320e:	f002 fe40 	bl	8005e92 <HAL_NVIC_EnableIRQ>

}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003226:	f107 0310 	add.w	r3, r7, #16
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003234:	4b46      	ldr	r3, [pc, #280]	; (8003350 <MX_GPIO_Init+0x130>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a45      	ldr	r2, [pc, #276]	; (8003350 <MX_GPIO_Init+0x130>)
 800323a:	f043 0310 	orr.w	r3, r3, #16
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <MX_GPIO_Init+0x130>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <MX_GPIO_Init+0x130>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <MX_GPIO_Init+0x130>)
 8003252:	f043 0320 	orr.w	r3, r3, #32
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <MX_GPIO_Init+0x130>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003264:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <MX_GPIO_Init+0x130>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4a39      	ldr	r2, [pc, #228]	; (8003350 <MX_GPIO_Init+0x130>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6193      	str	r3, [r2, #24]
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <MX_GPIO_Init+0x130>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <MX_GPIO_Init+0x130>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	4a33      	ldr	r2, [pc, #204]	; (8003350 <MX_GPIO_Init+0x130>)
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	6193      	str	r3, [r2, #24]
 8003288:	4b31      	ldr	r3, [pc, #196]	; (8003350 <MX_GPIO_Init+0x130>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800329a:	482e      	ldr	r0, [pc, #184]	; (8003354 <MX_GPIO_Init+0x134>)
 800329c:	f003 f9e9 	bl	8006672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	f241 0108 	movw	r1, #4104	; 0x1008
 80032a6:	482c      	ldr	r0, [pc, #176]	; (8003358 <MX_GPIO_Init+0x138>)
 80032a8:	f003 f9e3 	bl	8006672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80032b2:	482a      	ldr	r0, [pc, #168]	; (800335c <MX_GPIO_Init+0x13c>)
 80032b4:	f003 f9dd 	bl	8006672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	2302      	movs	r3, #2
 80032c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	4619      	mov	r1, r3
 80032d0:	4820      	ldr	r0, [pc, #128]	; (8003354 <MX_GPIO_Init+0x134>)
 80032d2:	f003 f85d 	bl	8006390 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 80032d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032dc:	2301      	movs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032e4:	2301      	movs	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 80032e8:	f107 0310 	add.w	r3, r7, #16
 80032ec:	4619      	mov	r1, r3
 80032ee:	481a      	ldr	r0, [pc, #104]	; (8003358 <MX_GPIO_Init+0x138>)
 80032f0:	f003 f84e 	bl	8006390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80032f4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80032f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2302      	movs	r3, #2
 8003304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	4619      	mov	r1, r3
 800330c:	4813      	ldr	r0, [pc, #76]	; (800335c <MX_GPIO_Init+0x13c>)
 800330e:	f003 f83f 	bl	8006390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003312:	2308      	movs	r3, #8
 8003314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003316:	2301      	movs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2302      	movs	r3, #2
 8003320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003322:	f107 0310 	add.w	r3, r7, #16
 8003326:	4619      	mov	r1, r3
 8003328:	480b      	ldr	r0, [pc, #44]	; (8003358 <MX_GPIO_Init+0x138>)
 800332a:	f003 f831 	bl	8006390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800332e:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003338:	2302      	movs	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333c:	f107 0310 	add.w	r3, r7, #16
 8003340:	4619      	mov	r1, r3
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_GPIO_Init+0x138>)
 8003344:	f003 f824 	bl	8006390 <HAL_GPIO_Init>

}
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40011000 	.word	0x40011000
 8003358:	40010c00 	.word	0x40010c00
 800335c:	40010800 	.word	0x40010800

08003360 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d102      	bne.n	8003378 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
        }
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200002ad 	.word	0x200002ad

08003388 <read_one_sign_from_keyboard>:
// ---------------------------------------------------------------------------
/*
  Its function read one sing from keyboard
 */
char read_one_sign_from_keyboard(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
	// 2. Зробити зчитування даних з клавіатури як переривання
	char sign = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	71fb      	strb	r3, [r7, #7]
	uint8_t readed_status = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	71bb      	strb	r3, [r7, #6]

	readed_status = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	717b      	strb	r3, [r7, #5]

	for(i=1; i<=4; i++)
 800339e:	2301      	movs	r3, #1
 80033a0:	717b      	strb	r3, [r7, #5]
 80033a2:	e118      	b.n	80035d6 <read_one_sign_from_keyboard+0x24e>
	{
		if((i == 1) && (readed_status != 1))
 80033a4:	797b      	ldrb	r3, [r7, #5]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d142      	bne.n	8003430 <read_one_sign_from_keyboard+0xa8>
 80033aa:	79bb      	ldrb	r3, [r7, #6]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d03f      	beq.n	8003430 <read_one_sign_from_keyboard+0xa8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);     // For detect 123A
 80033b0:	2201      	movs	r2, #1
 80033b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033b6:	488c      	ldr	r0, [pc, #560]	; (80035e8 <read_one_sign_from_keyboard+0x260>)
 80033b8:	f003 f95b 	bl	8006672 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80033bc:	2001      	movs	r0, #1
 80033be:	f002 fc53 	bl	8005c68 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80033c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c6:	4889      	ldr	r0, [pc, #548]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80033c8:	f003 f93c 	bl	8006644 <HAL_GPIO_ReadPin>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <read_one_sign_from_keyboard+0x54>
			{
			  	sign = 'A';
 80033d2:	2341      	movs	r3, #65	; 0x41
 80033d4:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	71bb      	strb	r3, [r7, #6]
 80033da:	e023      	b.n	8003424 <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80033dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033e0:	4882      	ldr	r0, [pc, #520]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80033e2:	f003 f92f 	bl	8006644 <HAL_GPIO_ReadPin>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <read_one_sign_from_keyboard+0x6e>
			{
			  	sign = '3';
 80033ec:	2333      	movs	r3, #51	; 0x33
 80033ee:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	71bb      	strb	r3, [r7, #6]
 80033f4:	e016      	b.n	8003424 <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80033f6:	2120      	movs	r1, #32
 80033f8:	487c      	ldr	r0, [pc, #496]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80033fa:	f003 f923 	bl	8006644 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <read_one_sign_from_keyboard+0x86>
			{
			  	sign = '2';
 8003404:	2332      	movs	r3, #50	; 0x32
 8003406:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003408:	2301      	movs	r3, #1
 800340a:	71bb      	strb	r3, [r7, #6]
 800340c:	e00a      	b.n	8003424 <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800340e:	2110      	movs	r1, #16
 8003410:	4876      	ldr	r0, [pc, #472]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 8003412:	f003 f917 	bl	8006644 <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <read_one_sign_from_keyboard+0x9c>
			{
			  	sign = '1';
 800341c:	2331      	movs	r3, #49	; 0x31
 800341e:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003420:	2301      	movs	r3, #1
 8003422:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800342a:	486f      	ldr	r0, [pc, #444]	; (80035e8 <read_one_sign_from_keyboard+0x260>)
 800342c:	f003 f921 	bl	8006672 <HAL_GPIO_WritePin>
		}

		if((i == 2) && (readed_status != 1))
 8003430:	797b      	ldrb	r3, [r7, #5]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d142      	bne.n	80034bc <read_one_sign_from_keyboard+0x134>
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d03f      	beq.n	80034bc <read_one_sign_from_keyboard+0x134>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);     // For detect 123A
 800343c:	2201      	movs	r2, #1
 800343e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003442:	4869      	ldr	r0, [pc, #420]	; (80035e8 <read_one_sign_from_keyboard+0x260>)
 8003444:	f003 f915 	bl	8006672 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003448:	2001      	movs	r0, #1
 800344a:	f002 fc0d 	bl	8005c68 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800344e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003452:	4866      	ldr	r0, [pc, #408]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 8003454:	f003 f8f6 	bl	8006644 <HAL_GPIO_ReadPin>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <read_one_sign_from_keyboard+0xe0>
			{
				sign = 'B';
 800345e:	2342      	movs	r3, #66	; 0x42
 8003460:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	71bb      	strb	r3, [r7, #6]
 8003466:	e023      	b.n	80034b0 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800346c:	485f      	ldr	r0, [pc, #380]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 800346e:	f003 f8e9 	bl	8006644 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <read_one_sign_from_keyboard+0xfa>
			{
				sign = '6';
 8003478:	2336      	movs	r3, #54	; 0x36
 800347a:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 800347c:	2301      	movs	r3, #1
 800347e:	71bb      	strb	r3, [r7, #6]
 8003480:	e016      	b.n	80034b0 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003482:	2120      	movs	r1, #32
 8003484:	4859      	ldr	r0, [pc, #356]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 8003486:	f003 f8dd 	bl	8006644 <HAL_GPIO_ReadPin>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <read_one_sign_from_keyboard+0x112>
			{
				sign = '5';
 8003490:	2335      	movs	r3, #53	; 0x35
 8003492:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003494:	2301      	movs	r3, #1
 8003496:	71bb      	strb	r3, [r7, #6]
 8003498:	e00a      	b.n	80034b0 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800349a:	2110      	movs	r1, #16
 800349c:	4853      	ldr	r0, [pc, #332]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 800349e:	f003 f8d1 	bl	8006644 <HAL_GPIO_ReadPin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <read_one_sign_from_keyboard+0x128>
			{
				sign = '4';
 80034a8:	2334      	movs	r3, #52	; 0x34
 80034aa:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034b6:	484c      	ldr	r0, [pc, #304]	; (80035e8 <read_one_sign_from_keyboard+0x260>)
 80034b8:	f003 f8db 	bl	8006672 <HAL_GPIO_WritePin>
		}

		if((i == 3) && (readed_status != 1))
 80034bc:	797b      	ldrb	r3, [r7, #5]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d142      	bne.n	8003548 <read_one_sign_from_keyboard+0x1c0>
 80034c2:	79bb      	ldrb	r3, [r7, #6]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d03f      	beq.n	8003548 <read_one_sign_from_keyboard+0x1c0>
		{
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);     // For detect 123A
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034ce:	4846      	ldr	r0, [pc, #280]	; (80035e8 <read_one_sign_from_keyboard+0x260>)
 80034d0:	f003 f8cf 	bl	8006672 <HAL_GPIO_WritePin>
		 	HAL_Delay(1);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f002 fbc7 	bl	8005c68 <HAL_Delay>
		 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80034da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034de:	4843      	ldr	r0, [pc, #268]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80034e0:	f003 f8b0 	bl	8006644 <HAL_GPIO_ReadPin>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <read_one_sign_from_keyboard+0x16c>
		 	{
		 		sign = 'C';
 80034ea:	2343      	movs	r3, #67	; 0x43
 80034ec:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	71bb      	strb	r3, [r7, #6]
 80034f2:	e023      	b.n	800353c <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80034f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034f8:	483c      	ldr	r0, [pc, #240]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80034fa:	f003 f8a3 	bl	8006644 <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <read_one_sign_from_keyboard+0x186>
		 	{
		 		sign = '9';
 8003504:	2339      	movs	r3, #57	; 0x39
 8003506:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003508:	2301      	movs	r3, #1
 800350a:	71bb      	strb	r3, [r7, #6]
 800350c:	e016      	b.n	800353c <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 800350e:	2120      	movs	r1, #32
 8003510:	4836      	ldr	r0, [pc, #216]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 8003512:	f003 f897 	bl	8006644 <HAL_GPIO_ReadPin>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <read_one_sign_from_keyboard+0x19e>
		 	{
		 		sign = '8';
 800351c:	2338      	movs	r3, #56	; 0x38
 800351e:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003520:	2301      	movs	r3, #1
 8003522:	71bb      	strb	r3, [r7, #6]
 8003524:	e00a      	b.n	800353c <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003526:	2110      	movs	r1, #16
 8003528:	4830      	ldr	r0, [pc, #192]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 800352a:	f003 f88b 	bl	8006644 <HAL_GPIO_ReadPin>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <read_one_sign_from_keyboard+0x1b4>
		 	{
		 		 sign = '7';
 8003534:	2337      	movs	r3, #55	; 0x37
 8003536:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003538:	2301      	movs	r3, #1
 800353a:	71bb      	strb	r3, [r7, #6]
		 	}
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003542:	4829      	ldr	r0, [pc, #164]	; (80035e8 <read_one_sign_from_keyboard+0x260>)
 8003544:	f003 f895 	bl	8006672 <HAL_GPIO_WritePin>
		}


		if((i == 3) && (readed_status != 1))
 8003548:	797b      	ldrb	r3, [r7, #5]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d140      	bne.n	80035d0 <read_one_sign_from_keyboard+0x248>
 800354e:	79bb      	ldrb	r3, [r7, #6]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d03d      	beq.n	80035d0 <read_one_sign_from_keyboard+0x248>
		{
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);     // For detect 123A
 8003554:	2201      	movs	r2, #1
 8003556:	2108      	movs	r1, #8
 8003558:	4824      	ldr	r0, [pc, #144]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 800355a:	f003 f88a 	bl	8006672 <HAL_GPIO_WritePin>
		    HAL_Delay(1);
 800355e:	2001      	movs	r0, #1
 8003560:	f002 fb82 	bl	8005c68 <HAL_Delay>

		   	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003568:	4820      	ldr	r0, [pc, #128]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 800356a:	f003 f86b 	bl	8006644 <HAL_GPIO_ReadPin>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <read_one_sign_from_keyboard+0x1f6>
		   	{
		   		sign = 'D';
 8003574:	2344      	movs	r3, #68	; 0x44
 8003576:	71fb      	strb	r3, [r7, #7]
		   		readed_status = 1;
 8003578:	2301      	movs	r3, #1
 800357a:	71bb      	strb	r3, [r7, #6]
 800357c:	e023      	b.n	80035c6 <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 800357e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003582:	481a      	ldr	r0, [pc, #104]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 8003584:	f003 f85e 	bl	8006644 <HAL_GPIO_ReadPin>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <read_one_sign_from_keyboard+0x210>
		   	{
		   		 sign = '#';
 800358e:	2323      	movs	r3, #35	; 0x23
 8003590:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	71bb      	strb	r3, [r7, #6]
 8003596:	e016      	b.n	80035c6 <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003598:	2120      	movs	r1, #32
 800359a:	4814      	ldr	r0, [pc, #80]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 800359c:	f003 f852 	bl	8006644 <HAL_GPIO_ReadPin>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <read_one_sign_from_keyboard+0x228>
		   	{
		   		 sign = '0';
 80035a6:	2330      	movs	r3, #48	; 0x30
 80035a8:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	71bb      	strb	r3, [r7, #6]
 80035ae:	e00a      	b.n	80035c6 <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80035b0:	2110      	movs	r1, #16
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80035b4:	f003 f846 	bl	8006644 <HAL_GPIO_ReadPin>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <read_one_sign_from_keyboard+0x23e>
		   	{
		   		 sign = '*';
 80035be:	232a      	movs	r3, #42	; 0x2a
 80035c0:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	71bb      	strb	r3, [r7, #6]
		   	}
		   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2108      	movs	r1, #8
 80035ca:	4808      	ldr	r0, [pc, #32]	; (80035ec <read_one_sign_from_keyboard+0x264>)
 80035cc:	f003 f851 	bl	8006672 <HAL_GPIO_WritePin>
	for(i=1; i<=4; i++)
 80035d0:	797b      	ldrb	r3, [r7, #5]
 80035d2:	3301      	adds	r3, #1
 80035d4:	717b      	strb	r3, [r7, #5]
 80035d6:	797b      	ldrb	r3, [r7, #5]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	f67f aee3 	bls.w	80033a4 <read_one_sign_from_keyboard+0x1c>
		}
	}
	return sign;
 80035de:	79fb      	ldrb	r3, [r7, #7]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40010800 	.word	0x40010800
 80035ec:	40010c00 	.word	0x40010c00

080035f0 <gps_mode>:
// ----------------------------------------------------------------------------
int gps_mode(char sign)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b092      	sub	sp, #72	; 0x48
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f001 fe10 	bl	8005220 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003600:	f001 fe30 	bl	8005264 <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gps[50]={0};
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	2232      	movs	r2, #50	; 0x32
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f006 fd69 	bl	800a0e4 <memset>
	memset(str_gps, 0 , sizeof(str_gps));
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	2232      	movs	r2, #50	; 0x32
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f006 fd62 	bl	800a0e4 <memset>
	sprintf(str_gps,"%s", "2.GPS: waiting...");
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	4a5a      	ldr	r2, [pc, #360]	; (8003790 <gps_mode+0x1a0>)
 8003626:	461c      	mov	r4, r3
 8003628:	4615      	mov	r5, r2
 800362a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 8003632:	2100      	movs	r1, #0
 8003634:	2000      	movs	r0, #0
 8003636:	f001 ff4b 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_gps, Font_7x10, White);
 800363a:	4a56      	ldr	r2, [pc, #344]	; (8003794 <gps_mode+0x1a4>)
 800363c:	f107 000c 	add.w	r0, r7, #12
 8003640:	2301      	movs	r3, #1
 8003642:	ca06      	ldmia	r2, {r1, r2}
 8003644:	f001 ff1e 	bl	8005484 <ssd1306_WriteString>
	memset(str_gps, 0 , sizeof(str_gps));
 8003648:	f107 030c 	add.w	r3, r7, #12
 800364c:	2232      	movs	r2, #50	; 0x32
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f006 fd47 	bl	800a0e4 <memset>

	ssd1306_UpdateScreen();
 8003656:	f001 fe05 	bl	8005264 <ssd1306_UpdateScreen>

	uint8_t broken_packet_counter = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	do                                                            	// Wait on choiсe
	{
		sign = read_one_sign_from_keyboard();                       // Read sign from keyboard
 8003660:	f7ff fe92 	bl	8003388 <read_one_sign_from_keyboard>
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]

		if(sign == '*')    	// If select EXIT  // Exit in main menu
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	2b2a      	cmp	r3, #42	; 0x2a
 800366c:	d112      	bne.n	8003694 <gps_mode+0xa4>
		{
			// Clear all OLED
			ssd1306_Fill(Black);
 800366e:	2000      	movs	r0, #0
 8003670:	f001 fdd6 	bl	8005220 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8003674:	f001 fdf6 	bl	8005264 <ssd1306_UpdateScreen>

			GPS_MODE = false;
 8003678:	4b47      	ldr	r3, [pc, #284]	; (8003798 <gps_mode+0x1a8>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
			GSM_MODE = false;
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <gps_mode+0x1ac>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
			FINGERPRINT_MODE = false;
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <gps_mode+0x1b0>)
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
			SENSORS_MODE = false;
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <gps_mode+0x1b4>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

			return 1;   // Flag_fro exit from there
 8003690:	2301      	movs	r3, #1
 8003692:	e078      	b.n	8003786 <gps_mode+0x196>
		}
		else
		{
			// Parsing data form GPS
			parsing_GPS(GPS_buff, 512);
 8003694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003698:	4843      	ldr	r0, [pc, #268]	; (80037a8 <gps_mode+0x1b8>)
 800369a:	f7fe fad7 	bl	8001c4c <parsing_GPS>
			int select_print_data = 1;							// Flag for print GPS data on OLED
 800369e:	2301      	movs	r3, #1
 80036a0:	643b      	str	r3, [r7, #64]	; 0x40
			OLED_prinr_all_data(select_print_data);
 80036a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80036a4:	f001 fa26 	bl	8004af4 <OLED_prinr_all_data>

			if(GPGGA_data_is_ready == 1)					// Check if data from GPS device was correct ( parsed GPGLL line correct)
 80036a8:	4b40      	ldr	r3, [pc, #256]	; (80037ac <gps_mode+0x1bc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d12b      	bne.n	8003708 <gps_mode+0x118>
			{
				// Print the data that GPS is valid
				memset(str_gps, 0 , sizeof(str_gps));
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f006 fd13 	bl	800a0e4 <memset>
				sprintf(str_gps,"%s", "1.GPS: OK            ");
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4a3b      	ldr	r2, [pc, #236]	; (80037b0 <gps_mode+0x1c0>)
 80036c4:	461c      	mov	r4, r3
 80036c6:	4615      	mov	r5, r2
 80036c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80036d0:	6020      	str	r0, [r4, #0]
 80036d2:	3404      	adds	r4, #4
 80036d4:	8021      	strh	r1, [r4, #0]
				ssd1306_SetCursor(00, 00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	2000      	movs	r0, #0
 80036da:	f001 fef9 	bl	80054d0 <ssd1306_SetCursor>
				ssd1306_WriteString(str_gps, Font_7x10, White);
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <gps_mode+0x1a4>)
 80036e0:	f107 000c 	add.w	r0, r7, #12
 80036e4:	2301      	movs	r3, #1
 80036e6:	ca06      	ldmia	r2, {r1, r2}
 80036e8:	f001 fecc 	bl	8005484 <ssd1306_WriteString>
				memset(str_gps, 0 , sizeof(str_gps));
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	2232      	movs	r2, #50	; 0x32
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f006 fcf5 	bl	800a0e4 <memset>

				//receive_gps_signal = 0;
				broken_packet_counter = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				GPGGA_data_is_ready = 0;
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <gps_mode+0x1bc>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e038      	b.n	800377a <gps_mode+0x18a>
			}
			else
			{
				broken_packet_counter ++;
 8003708:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800370c:	3301      	adds	r3, #1
 800370e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				//HAL_Delay(500);
				if((GPGGA_data_is_ready != 1) && (broken_packet_counter >= 20))
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <gps_mode+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d02f      	beq.n	800377a <gps_mode+0x18a>
 800371a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800371e:	2b13      	cmp	r3, #19
 8003720:	d92b      	bls.n	800377a <gps_mode+0x18a>
				{
					// Print the data that GPS is does not valid
					GPGGA_data_is_ready = 0;
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <gps_mode+0x1bc>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
					broken_packet_counter = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					memset(str_gps, 0 , sizeof(str_gps));
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	2232      	movs	r2, #50	; 0x32
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f006 fcd4 	bl	800a0e4 <memset>
					sprintf(str_gps,"%s", "1.GPS: NO SIGNAL  ");
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <gps_mode+0x1c4>)
 8003742:	461c      	mov	r4, r3
 8003744:	4615      	mov	r5, r2
 8003746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800374a:	682b      	ldr	r3, [r5, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	8022      	strh	r2, [r4, #0]
 8003750:	3402      	adds	r4, #2
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 00);
 8003756:	2100      	movs	r1, #0
 8003758:	2000      	movs	r0, #0
 800375a:	f001 feb9 	bl	80054d0 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gps, Font_7x10, White);
 800375e:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <gps_mode+0x1a4>)
 8003760:	f107 000c 	add.w	r0, r7, #12
 8003764:	2301      	movs	r3, #1
 8003766:	ca06      	ldmia	r2, {r1, r2}
 8003768:	f001 fe8c 	bl	8005484 <ssd1306_WriteString>
					memset(str_gps, 0 , sizeof(str_gps));
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	2232      	movs	r2, #50	; 0x32
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f006 fcb5 	bl	800a0e4 <memset>
				}
			}

			ssd1306_UpdateScreen();
 800377a:	f001 fd73 	bl	8005264 <ssd1306_UpdateScreen>
		}
	}while ( (sign != '*'));     // Select one from 3 modes
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	f47f af6d 	bne.w	8003660 <gps_mode+0x70>
}
 8003786:	4618      	mov	r0, r3
 8003788:	3748      	adds	r7, #72	; 0x48
 800378a:	46bd      	mov	sp, r7
 800378c:	bdb0      	pop	{r4, r5, r7, pc}
 800378e:	bf00      	nop
 8003790:	0800d670 	.word	0x0800d670
 8003794:	20000054 	.word	0x20000054
 8003798:	200002a9 	.word	0x200002a9
 800379c:	200002a8 	.word	0x200002a8
 80037a0:	200002aa 	.word	0x200002aa
 80037a4:	200002ab 	.word	0x200002ab
 80037a8:	20000880 	.word	0x20000880
 80037ac:	2000025c 	.word	0x2000025c
 80037b0:	0800d684 	.word	0x0800d684
 80037b4:	0800d69c 	.word	0x0800d69c

080037b8 <gsm_mode>:
// ----------------------------------------------------------------------------
int gsm_mode(char sign)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b0a0      	sub	sp, #128	; 0x80
 80037bc:	af02      	add	r7, sp, #8
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f001 fd2c 	bl	8005220 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80037c8:	f001 fd4c 	bl	8005264 <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gsm[50]={0};
 80037cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d0:	2232      	movs	r2, #50	; 0x32
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f006 fc85 	bl	800a0e4 <memset>
	sprintf(str_gsm,"%s", "1.GSM: waiting...");
 80037da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037de:	4a96      	ldr	r2, [pc, #600]	; (8003a38 <gsm_mode+0x280>)
 80037e0:	461c      	mov	r4, r3
 80037e2:	4615      	mov	r5, r2
 80037e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 80037ec:	2100      	movs	r1, #0
 80037ee:	2000      	movs	r0, #0
 80037f0:	f001 fe6e 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_gsm, Font_7x10, White);
 80037f4:	4a91      	ldr	r2, [pc, #580]	; (8003a3c <gsm_mode+0x284>)
 80037f6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80037fa:	2301      	movs	r3, #1
 80037fc:	ca06      	ldmia	r2, {r1, r2}
 80037fe:	f001 fe41 	bl	8005484 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003802:	f001 fd2f 	bl	8005264 <ssd1306_UpdateScreen>

	// Init GSM module///
	init_GSM_uart_comunication();
 8003806:	f7fe facb 	bl	8001da0 <init_GSM_uart_comunication>
	if(init_gsm_module() == HAL_OK)
 800380a:	f7fe fadb 	bl	8001dc4 <init_gsm_module>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d12f      	bne.n	8003874 <gsm_mode+0xbc>
	{
		// init OK
		GSM_INIT = 1;
 8003814:	4b8a      	ldr	r3, [pc, #552]	; (8003a40 <gsm_mode+0x288>)
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]

		sprintf(str_gsm,"%s", "                    ");
 800381a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800381e:	4a89      	ldr	r2, [pc, #548]	; (8003a44 <gsm_mode+0x28c>)
 8003820:	461c      	mov	r4, r3
 8003822:	4615      	mov	r5, r2
 8003824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003828:	e895 0003 	ldmia.w	r5, {r0, r1}
 800382c:	6020      	str	r0, [r4, #0]
 800382e:	3404      	adds	r4, #4
 8003830:	7021      	strb	r1, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8003832:	2100      	movs	r1, #0
 8003834:	2000      	movs	r0, #0
 8003836:	f001 fe4b 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 800383a:	4a80      	ldr	r2, [pc, #512]	; (8003a3c <gsm_mode+0x284>)
 800383c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003840:	2301      	movs	r3, #1
 8003842:	ca06      	ldmia	r2, {r1, r2}
 8003844:	f001 fe1e 	bl	8005484 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003848:	f001 fd0c 	bl	8005264 <ssd1306_UpdateScreen>

		sprintf(str_gsm,"%s", "2.GSM: OK");
 800384c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003850:	4a7d      	ldr	r2, [pc, #500]	; (8003a48 <gsm_mode+0x290>)
 8003852:	ca07      	ldmia	r2, {r0, r1, r2}
 8003854:	c303      	stmia	r3!, {r0, r1}
 8003856:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 8003858:	2100      	movs	r1, #0
 800385a:	2000      	movs	r0, #0
 800385c:	f001 fe38 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003860:	4a76      	ldr	r2, [pc, #472]	; (8003a3c <gsm_mode+0x284>)
 8003862:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003866:	2301      	movs	r3, #1
 8003868:	ca06      	ldmia	r2, {r1, r2}
 800386a:	f001 fe0b 	bl	8005484 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800386e:	f001 fcf9 	bl	8005264 <ssd1306_UpdateScreen>
 8003872:	e034      	b.n	80038de <gsm_mode+0x126>
	}
	else
	{
		// GSM didn't init
		GSM_INIT = 0;
 8003874:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <gsm_mode+0x288>)
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]

		sprintf(str_gsm,"%s", "                    ");
 800387a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387e:	4a71      	ldr	r2, [pc, #452]	; (8003a44 <gsm_mode+0x28c>)
 8003880:	461c      	mov	r4, r3
 8003882:	4615      	mov	r5, r2
 8003884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003888:	e895 0003 	ldmia.w	r5, {r0, r1}
 800388c:	6020      	str	r0, [r4, #0]
 800388e:	3404      	adds	r4, #4
 8003890:	7021      	strb	r1, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8003892:	2100      	movs	r1, #0
 8003894:	2000      	movs	r0, #0
 8003896:	f001 fe1b 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 800389a:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <gsm_mode+0x284>)
 800389c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80038a0:	2301      	movs	r3, #1
 80038a2:	ca06      	ldmia	r2, {r1, r2}
 80038a4:	f001 fdee 	bl	8005484 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80038a8:	f001 fcdc 	bl	8005264 <ssd1306_UpdateScreen>

		sprintf(str_gsm,"%s", "2.GSM: ERROR");
 80038ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b0:	4a66      	ldr	r2, [pc, #408]	; (8003a4c <gsm_mode+0x294>)
 80038b2:	461c      	mov	r4, r3
 80038b4:	4613      	mov	r3, r2
 80038b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b8:	c407      	stmia	r4!, {r0, r1, r2}
 80038ba:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 80038bc:	2100      	movs	r1, #0
 80038be:	2000      	movs	r0, #0
 80038c0:	f001 fe06 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80038c4:	4a5d      	ldr	r2, [pc, #372]	; (8003a3c <gsm_mode+0x284>)
 80038c6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80038ca:	2301      	movs	r3, #1
 80038cc:	ca06      	ldmia	r2, {r1, r2}
 80038ce:	f001 fdd9 	bl	8005484 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80038d2:	f001 fcc7 	bl	8005264 <ssd1306_UpdateScreen>

		HAL_Delay(2000);
 80038d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038da:	f002 f9c5 	bl	8005c68 <HAL_Delay>
	}
		// END INIT GSM MODULE  //////////////////////////

    if(GSM_INIT == 1)
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <gsm_mode+0x288>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 824b 	bne.w	8003d7e <gsm_mode+0x5c6>
    {
    	char incoming_call_status = 0;					// Call status.
 80038e8:	2300      	movs	r3, #0
 80038ea:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    	bool first_time_after_call = false;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    	bool incoming_call_status_oled = false;			// Status for blinky
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    	int print_oled_status = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	673b      	str	r3, [r7, #112]	; 0x70

		// Print GSM menu
		sprintf(str_gsm,"%s", "1.CALL to me");
 80038fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003902:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <gsm_mode+0x298>)
 8003904:	461c      	mov	r4, r3
 8003906:	4613      	mov	r3, r2
 8003908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800390a:	c407      	stmia	r4!, {r0, r1, r2}
 800390c:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 800390e:	2110      	movs	r1, #16
 8003910:	2000      	movs	r0, #0
 8003912:	f001 fddd 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003916:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <gsm_mode+0x284>)
 8003918:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800391c:	2301      	movs	r3, #1
 800391e:	ca06      	ldmia	r2, {r1, r2}
 8003920:	f001 fdb0 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8003924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003928:	2232      	movs	r2, #50	; 0x32
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f006 fbd9 	bl	800a0e4 <memset>

		sprintf(str_gsm,"%s", "2.CALL on number");
 8003932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003936:	4a47      	ldr	r2, [pc, #284]	; (8003a54 <gsm_mode+0x29c>)
 8003938:	461c      	mov	r4, r3
 800393a:	4615      	mov	r5, r2
 800393c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8003944:	211a      	movs	r1, #26
 8003946:	2000      	movs	r0, #0
 8003948:	f001 fdc2 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 800394c:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <gsm_mode+0x284>)
 800394e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003952:	2301      	movs	r3, #1
 8003954:	ca06      	ldmia	r2, {r1, r2}
 8003956:	f001 fd95 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 800395a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800395e:	2232      	movs	r2, #50	; 0x32
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f006 fbbe 	bl	800a0e4 <memset>

		sprintf(str_gsm,"%s", "3.For send SMS");
 8003968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <gsm_mode+0x2a0>)
 800396e:	461c      	mov	r4, r3
 8003970:	4613      	mov	r3, r2
 8003972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003974:	c407      	stmia	r4!, {r0, r1, r2}
 8003976:	8023      	strh	r3, [r4, #0]
 8003978:	3402      	adds	r4, #2
 800397a:	0c1b      	lsrs	r3, r3, #16
 800397c:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 800397e:	2124      	movs	r1, #36	; 0x24
 8003980:	2000      	movs	r0, #0
 8003982:	f001 fda5 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003986:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <gsm_mode+0x284>)
 8003988:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800398c:	2301      	movs	r3, #1
 800398e:	ca06      	ldmia	r2, {r1, r2}
 8003990:	f001 fd78 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8003994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003998:	2232      	movs	r2, #50	; 0x32
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f006 fba1 	bl	800a0e4 <memset>


		ssd1306_UpdateScreen();
 80039a2:	f001 fc5f 	bl	8005264 <ssd1306_UpdateScreen>

		// Select GSM menu or EXIT
		do																		// Wait on your choice
		{
			// 1. Select mode
			sign = read_one_sign_from_keyboard();								// Read sign from keyboard
 80039a6:	f7ff fcef 	bl	8003388 <read_one_sign_from_keyboard>
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]

			// 2. Wait incoming call
			char incoming_number[15] = {0};										// Buffer for incoming number
 80039ae:	f107 031c 	add.w	r3, r7, #28
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	f8c3 200b 	str.w	r2, [r3, #11]
			incoming_call_status = wait_incoming_call(incoming_number);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fe32 	bl	800262c <wait_incoming_call>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

			if(incoming_call_status == 2)										// If are incomming call
 80039ce:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	f040 8152 	bne.w	8003c7c <gsm_mode+0x4c4>
			{
				// 1. Clean OLED.
				if(print_oled_status == 0)
 80039d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <gsm_mode+0x236>
				{
					claen_oled_lines(false, true, true, true, true);
 80039de:	2301      	movs	r3, #1
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2301      	movs	r3, #1
 80039e4:	2201      	movs	r2, #1
 80039e6:	2101      	movs	r1, #1
 80039e8:	2000      	movs	r0, #0
 80039ea:	f000 ff9d 	bl	8004928 <claen_oled_lines>
				}

				// 2. Print message and incoming number.
				if(incoming_call_status_oled == true)
 80039ee:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d034      	beq.n	8003a60 <gsm_mode+0x2a8>
				{
					sprintf(str_gsm,"%s", "Incoming CALL...");
 80039f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <gsm_mode+0x2a4>)
 80039fc:	461c      	mov	r4, r3
 80039fe:	4615      	mov	r5, r2
 8003a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 16);
 8003a08:	2110      	movs	r1, #16
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f001 fd60 	bl	80054d0 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <gsm_mode+0x284>)
 8003a12:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003a16:	2301      	movs	r3, #1
 8003a18:	ca06      	ldmia	r2, {r1, r2}
 8003a1a:	f001 fd33 	bl	8005484 <ssd1306_WriteString>
					memset(str_gsm, 0 , sizeof(str_gsm));
 8003a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a22:	2232      	movs	r2, #50	; 0x32
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f006 fb5c 	bl	800a0e4 <memset>
					ssd1306_UpdateScreen();
 8003a2c:	f001 fc1a 	bl	8005264 <ssd1306_UpdateScreen>

					incoming_call_status_oled = false;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003a36:	e01e      	b.n	8003a76 <gsm_mode+0x2be>
 8003a38:	0800d6b0 	.word	0x0800d6b0
 8003a3c:	20000054 	.word	0x20000054
 8003a40:	20000261 	.word	0x20000261
 8003a44:	0800d6c4 	.word	0x0800d6c4
 8003a48:	0800d6dc 	.word	0x0800d6dc
 8003a4c:	0800d6e8 	.word	0x0800d6e8
 8003a50:	0800d6f8 	.word	0x0800d6f8
 8003a54:	0800d708 	.word	0x0800d708
 8003a58:	0800d71c 	.word	0x0800d71c
 8003a5c:	0800d72c 	.word	0x0800d72c
				}
				else
				{
					claen_oled_lines(false, true, false, false, false);		// Clean OLED
 8003a60:	2300      	movs	r3, #0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	2200      	movs	r2, #0
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f000 ff5c 	bl	8004928 <claen_oled_lines>

					incoming_call_status_oled = true;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				}

				if (print_oled_status == 0)											// Print only one time
 8003a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d14e      	bne.n	8003b1a <gsm_mode+0x362>
				{
					sprintf(str_gsm,"%s", incoming_number);
 8003a7c:	f107 021c 	add.w	r2, r7, #28
 8003a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f006 fb70 	bl	800a16c <strcpy>
					ssd1306_SetCursor(00, 26);
 8003a8c:	211a      	movs	r1, #26
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f001 fd1e 	bl	80054d0 <ssd1306_SetCursor>
					ssd1306_WriteString(incoming_number, Font_7x10, White);
 8003a94:	4ac7      	ldr	r2, [pc, #796]	; (8003db4 <gsm_mode+0x5fc>)
 8003a96:	f107 001c 	add.w	r0, r7, #28
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	ca06      	ldmia	r2, {r1, r2}
 8003a9e:	f001 fcf1 	bl	8005484 <ssd1306_WriteString>
					memset(incoming_number, 0 , sizeof(incoming_number));
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f006 fb1a 	bl	800a0e4 <memset>

					// 3. Print key action.
					sprintf(str_gsm,"%s", "'A':pick up phone");
 8003ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab4:	4ac0      	ldr	r2, [pc, #768]	; (8003db8 <gsm_mode+0x600>)
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	4615      	mov	r5, r2
 8003aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	8023      	strh	r3, [r4, #0]
					ssd1306_SetCursor(00, 36);
 8003ac2:	2124      	movs	r1, #36	; 0x24
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f001 fd03 	bl	80054d0 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003aca:	4aba      	ldr	r2, [pc, #744]	; (8003db4 <gsm_mode+0x5fc>)
 8003acc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	ca06      	ldmia	r2, {r1, r2}
 8003ad4:	f001 fcd6 	bl	8005484 <ssd1306_WriteString>
					memset(str_gsm, 0 , sizeof(str_gsm));
 8003ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003adc:	2232      	movs	r2, #50	; 0x32
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f006 faff 	bl	800a0e4 <memset>

					sprintf(str_gsm,"%s", "'*':end call");
 8003ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aea:	4ab4      	ldr	r2, [pc, #720]	; (8003dbc <gsm_mode+0x604>)
 8003aec:	461c      	mov	r4, r3
 8003aee:	4613      	mov	r3, r2
 8003af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af2:	c407      	stmia	r4!, {r0, r1, r2}
 8003af4:	7023      	strb	r3, [r4, #0]
					ssd1306_SetCursor(00, 46);
 8003af6:	212e      	movs	r1, #46	; 0x2e
 8003af8:	2000      	movs	r0, #0
 8003afa:	f001 fce9 	bl	80054d0 <ssd1306_SetCursor>
					ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003afe:	4aad      	ldr	r2, [pc, #692]	; (8003db4 <gsm_mode+0x5fc>)
 8003b00:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003b04:	2301      	movs	r3, #1
 8003b06:	ca06      	ldmia	r2, {r1, r2}
 8003b08:	f001 fcbc 	bl	8005484 <ssd1306_WriteString>
					memset(str_gsm, 0 , sizeof(str_gsm));
 8003b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b10:	2232      	movs	r2, #50	; 0x32
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f006 fae5 	bl	800a0e4 <memset>
				}
				print_oled_status++;
 8003b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	673b      	str	r3, [r7, #112]	; 0x70

				//ssd1306_UpdateScreen();

				// 4. Read action from keyboard
				sign = read_one_sign_from_keyboard();							// Read sign from keyboard
 8003b20:	f7ff fc32 	bl	8003388 <read_one_sign_from_keyboard>
 8003b24:	4603      	mov	r3, r0
 8003b26:	71fb      	strb	r3, [r7, #7]
				if(sign == '*')													// Call end
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b2c:	d12c      	bne.n	8003b88 <gsm_mode+0x3d0>
				{
					if(end_of_call() == 1)										// Send "end call" command in GSM module
 8003b2e:	f7fe fc7f 	bl	8002430 <end_of_call>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d127      	bne.n	8003b88 <gsm_mode+0x3d0>
					{
						claen_oled_lines(false, true, true, true, true);		// Clean OLED
 8003b38:	2301      	movs	r3, #1
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2101      	movs	r1, #1
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 fef0 	bl	8004928 <claen_oled_lines>

						sprintf(str_gsm,"%s", "CALL END");
 8003b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b4c:	4a9c      	ldr	r2, [pc, #624]	; (8003dc0 <gsm_mode+0x608>)
 8003b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b50:	c303      	stmia	r3!, {r0, r1}
 8003b52:	701a      	strb	r2, [r3, #0]
						ssd1306_SetCursor(00, 16);
 8003b54:	2110      	movs	r1, #16
 8003b56:	2000      	movs	r0, #0
 8003b58:	f001 fcba 	bl	80054d0 <ssd1306_SetCursor>
						ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003b5c:	4a95      	ldr	r2, [pc, #596]	; (8003db4 <gsm_mode+0x5fc>)
 8003b5e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003b62:	2301      	movs	r3, #1
 8003b64:	ca06      	ldmia	r2, {r1, r2}
 8003b66:	f001 fc8d 	bl	8005484 <ssd1306_WriteString>
						memset(str_gsm, 0 , sizeof(str_gsm));
 8003b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6e:	2232      	movs	r2, #50	; 0x32
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f006 fab6 	bl	800a0e4 <memset>

						ssd1306_UpdateScreen();
 8003b78:	f001 fb74 	bl	8005264 <ssd1306_UpdateScreen>

						HAL_Delay(2000);
 8003b7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003b80:	f002 f872 	bl	8005c68 <HAL_Delay>

						sign = '*';
 8003b84:	232a      	movs	r3, #42	; 0x2a
 8003b86:	71fb      	strb	r3, [r7, #7]
					}
				}
				if(sign == 'A')													// Pick up the phone
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	2b41      	cmp	r3, #65	; 0x41
 8003b8c:	d173      	bne.n	8003c76 <gsm_mode+0x4be>
				{
					if(accepts_on_incomming_call() == 1);						// Send "pick up the phone" command in GSM module
 8003b8e:	f7fe fca9 	bl	80024e4 <accepts_on_incomming_call>
					{
						claen_oled_lines(false, true, true, true, true);		// Clean OLED
 8003b92:	2301      	movs	r3, #1
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2301      	movs	r3, #1
 8003b98:	2201      	movs	r2, #1
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f000 fec3 	bl	8004928 <claen_oled_lines>

						sprintf(str_gsm,"%s", "SPEAK...");
 8003ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba6:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <gsm_mode+0x60c>)
 8003ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003baa:	c303      	stmia	r3!, {r0, r1}
 8003bac:	701a      	strb	r2, [r3, #0]
						ssd1306_SetCursor(00, 16);
 8003bae:	2110      	movs	r1, #16
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f001 fc8d 	bl	80054d0 <ssd1306_SetCursor>
						ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003bb6:	4a7f      	ldr	r2, [pc, #508]	; (8003db4 <gsm_mode+0x5fc>)
 8003bb8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	ca06      	ldmia	r2, {r1, r2}
 8003bc0:	f001 fc60 	bl	8005484 <ssd1306_WriteString>
						memset(str_gsm, 0 , sizeof(str_gsm));
 8003bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bc8:	2232      	movs	r2, #50	; 0x32
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f006 fa89 	bl	800a0e4 <memset>

						sprintf(str_gsm,"%s", "#:end call");
 8003bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bd6:	4a7c      	ldr	r2, [pc, #496]	; (8003dc8 <gsm_mode+0x610>)
 8003bd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bda:	c303      	stmia	r3!, {r0, r1}
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	3302      	adds	r3, #2
 8003be0:	0c12      	lsrs	r2, r2, #16
 8003be2:	701a      	strb	r2, [r3, #0]
						ssd1306_SetCursor(00, 46);
 8003be4:	212e      	movs	r1, #46	; 0x2e
 8003be6:	2000      	movs	r0, #0
 8003be8:	f001 fc72 	bl	80054d0 <ssd1306_SetCursor>
						ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003bec:	4a71      	ldr	r2, [pc, #452]	; (8003db4 <gsm_mode+0x5fc>)
 8003bee:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	ca06      	ldmia	r2, {r1, r2}
 8003bf6:	f001 fc45 	bl	8005484 <ssd1306_WriteString>
						memset(str_gsm, 0 , sizeof(str_gsm));
 8003bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfe:	2232      	movs	r2, #50	; 0x32
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f006 fa6e 	bl	800a0e4 <memset>

						ssd1306_UpdateScreen();
 8003c08:	f001 fb2c 	bl	8005264 <ssd1306_UpdateScreen>

						do{
							sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003c0c:	f7ff fbbc 	bl	8003388 <read_one_sign_from_keyboard>
 8003c10:	4603      	mov	r3, r0
 8003c12:	71fb      	strb	r3, [r7, #7]
							HAL_Delay(200);
 8003c14:	20c8      	movs	r0, #200	; 0xc8
 8003c16:	f002 f827 	bl	8005c68 <HAL_Delay>
						}while (sign != '#');
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b23      	cmp	r3, #35	; 0x23
 8003c1e:	d1f5      	bne.n	8003c0c <gsm_mode+0x454>

						if(sign == '#')											// Call end
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	2b23      	cmp	r3, #35	; 0x23
 8003c24:	d127      	bne.n	8003c76 <gsm_mode+0x4be>
						{
							end_of_call();
 8003c26:	f7fe fc03 	bl	8002430 <end_of_call>

							claen_oled_lines(false, true, true, true, true);
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2201      	movs	r2, #1
 8003c32:	2101      	movs	r1, #1
 8003c34:	2000      	movs	r0, #0
 8003c36:	f000 fe77 	bl	8004928 <claen_oled_lines>

							sprintf(str_gsm,"%s", "CALL END");
 8003c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c3e:	4a60      	ldr	r2, [pc, #384]	; (8003dc0 <gsm_mode+0x608>)
 8003c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c42:	c303      	stmia	r3!, {r0, r1}
 8003c44:	701a      	strb	r2, [r3, #0]
							ssd1306_SetCursor(00, 16);
 8003c46:	2110      	movs	r1, #16
 8003c48:	2000      	movs	r0, #0
 8003c4a:	f001 fc41 	bl	80054d0 <ssd1306_SetCursor>
							ssd1306_WriteString(str_gsm, Font_7x10, White);
 8003c4e:	4a59      	ldr	r2, [pc, #356]	; (8003db4 <gsm_mode+0x5fc>)
 8003c50:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003c54:	2301      	movs	r3, #1
 8003c56:	ca06      	ldmia	r2, {r1, r2}
 8003c58:	f001 fc14 	bl	8005484 <ssd1306_WriteString>
							memset(str_gsm, 0 , sizeof(str_gsm));
 8003c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c60:	2232      	movs	r2, #50	; 0x32
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f006 fa3d 	bl	800a0e4 <memset>

							ssd1306_UpdateScreen();
 8003c6a:	f001 fafb 	bl	8005264 <ssd1306_UpdateScreen>

							HAL_Delay(2000);
 8003c6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c72:	f001 fff9 	bl	8005c68 <HAL_Delay>
						}
					}

				}

				first_time_after_call = true;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}

			// PROBLEM !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			// деколи програма злітає сюди і виводить логовне меню
			//жжж
			if((incoming_call_status == 1) && (first_time_after_call == true))   // For exit from incoming call menu
 8003c7c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d108      	bne.n	8003c96 <gsm_mode+0x4de>
 8003c84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <gsm_mode+0x4de>
			{
				sign = '*';
 8003c8c:	232a      	movs	r3, #42	; 0x2a
 8003c8e:	71fb      	strb	r3, [r7, #7]
				first_time_after_call = false;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}

			if(sign == '1')    // If select Call mode
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2b31      	cmp	r3, #49	; 0x31
 8003c9a:	d109      	bne.n	8003cb0 <gsm_mode+0x4f8>
			{
				int call_status = call_on_mu_number();
 8003c9c:	f7fe faa8 	bl	80021f0 <call_on_mu_number>
 8003ca0:	66b8      	str	r0, [r7, #104]	; 0x68
				show_sratus_call (call_status, str_gsm, sign, 1);
 8003ca2:	79fa      	ldrb	r2, [r7, #7]
 8003ca4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003ca8:	2301      	movs	r3, #1
 8003caa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003cac:	f000 fc06 	bl	80044bc <show_sratus_call>
			}

			if(sign == '2')
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	2b32      	cmp	r3, #50	; 0x32
 8003cb4:	d13a      	bne.n	8003d2c <gsm_mode+0x574>
			{
				// 1. Type mobile number.
				char number[13]={0};										// Buffer where will be save entered number
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	731a      	strb	r2, [r3, #12]
				uint8_t size_number = 0;									// How many entered digits in number
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				bool entered_number_status = false;							// Status number buffer.
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				entered_number_status = enter_a_mobile_number(number);		// Enter number
 8003cd0:	f107 030c 	add.w	r3, r7, #12
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fd49 	bl	800476c <enter_a_mobile_number>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				for(size_number = 0; number[size_number] != '\0'; size_number++){}		// Count digits
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003ce6:	e004      	b.n	8003cf2 <gsm_mode+0x53a>
 8003ce8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003cec:	3301      	adds	r3, #1
 8003cee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003cf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003cf6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f1      	bne.n	8003ce8 <gsm_mode+0x530>

				// 2. Call on entered number.
				if(entered_number_status == true)										// If entered all digits will be call on this number
 8003d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <gsm_mode+0x574>
				{
					int call_status = call_on_number(number, size_number);
 8003d0c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fac4 	bl	80022a4 <call_on_number>
 8003d1c:	6638      	str	r0, [r7, #96]	; 0x60
					show_sratus_call(call_status, str_gsm, sign, 0);
 8003d1e:	79fa      	ldrb	r2, [r7, #7]
 8003d20:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003d24:	2300      	movs	r3, #0
 8003d26:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003d28:	f000 fbc8 	bl	80044bc <show_sratus_call>
			if(sign == '3')    // If select SMS mode (don't realised)
			{

			}

			if(sign == '*')    // If select EXIT  // Exit in main menu
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d30:	d112      	bne.n	8003d58 <gsm_mode+0x5a0>
			{
				// Clear all OLED
				ssd1306_Fill(Black);
 8003d32:	2000      	movs	r0, #0
 8003d34:	f001 fa74 	bl	8005220 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8003d38:	f001 fa94 	bl	8005264 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <gsm_mode+0x614>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <gsm_mode+0x618>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <gsm_mode+0x61c>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <gsm_mode+0x620>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]

				return 1;  			 // Flag_fro exit from there
 8003d54:	2301      	movs	r3, #1
 8003d56:	e028      	b.n	8003daa <gsm_mode+0x5f2>
			}

			ssd1306_UpdateScreen();
 8003d58:	f001 fa84 	bl	8005264 <ssd1306_UpdateScreen>
			HAL_Delay(200);
 8003d5c:	20c8      	movs	r0, #200	; 0xc8
 8003d5e:	f001 ff83 	bl	8005c68 <HAL_Delay>

		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*'));     // Select one from 3 modes
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b31      	cmp	r3, #49	; 0x31
 8003d66:	d009      	beq.n	8003d7c <gsm_mode+0x5c4>
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b32      	cmp	r3, #50	; 0x32
 8003d6c:	d006      	beq.n	8003d7c <gsm_mode+0x5c4>
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b33      	cmp	r3, #51	; 0x33
 8003d72:	d003      	beq.n	8003d7c <gsm_mode+0x5c4>
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	2b2a      	cmp	r3, #42	; 0x2a
 8003d78:	f47f ae15 	bne.w	80039a6 <gsm_mode+0x1ee>
        FINGERPRINT_MODE = false;
        SENSORS_MODE = false;

        return 1;  			 // Flag_fro exit from there
    }
}
 8003d7c:	e015      	b.n	8003daa <gsm_mode+0x5f2>
        HAL_Delay(2000);
 8003d7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d82:	f001 ff71 	bl	8005c68 <HAL_Delay>
        ssd1306_Fill(Black);
 8003d86:	2000      	movs	r0, #0
 8003d88:	f001 fa4a 	bl	8005220 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8003d8c:	f001 fa6a 	bl	8005264 <ssd1306_UpdateScreen>
        GSM_MODE = false;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <gsm_mode+0x618>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
        GPS_MODE = false;
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <gsm_mode+0x614>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
        FINGERPRINT_MODE = false;
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <gsm_mode+0x61c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
        SENSORS_MODE = false;
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <gsm_mode+0x620>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
        return 1;  			 // Flag_fro exit from there
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3778      	adds	r7, #120	; 0x78
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bdb0      	pop	{r4, r5, r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000054 	.word	0x20000054
 8003db8:	0800d740 	.word	0x0800d740
 8003dbc:	0800d754 	.word	0x0800d754
 8003dc0:	0800d764 	.word	0x0800d764
 8003dc4:	0800d770 	.word	0x0800d770
 8003dc8:	0800d77c 	.word	0x0800d77c
 8003dcc:	200002a9 	.word	0x200002a9
 8003dd0:	200002a8 	.word	0x200002a8
 8003dd4:	200002aa 	.word	0x200002aa
 8003dd8:	200002ab 	.word	0x200002ab

08003ddc <fingerprint_mode>:
// ----------------------------------------------------------------------------
int fingerprint_mode(char sign)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b091      	sub	sp, #68	; 0x44
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003de6:	2000      	movs	r0, #0
 8003de8:	f001 fa1a 	bl	8005220 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003dec:	f001 fa3a 	bl	8005264 <ssd1306_UpdateScreen>
	// Fingerprint code place where
	// Print mode in head
	char str_fingerprint[50]={0};
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	2232      	movs	r2, #50	; 0x32
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f006 f973 	bl	800a0e4 <memset>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003dfe:	f107 030c 	add.w	r3, r7, #12
 8003e02:	2232      	movs	r2, #50	; 0x32
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f006 f96c 	bl	800a0e4 <memset>
	sprintf(str_fingerprint,"%s", "3.FINGERPRINT");
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	4abf      	ldr	r2, [pc, #764]	; (8004110 <fingerprint_mode+0x334>)
 8003e12:	461c      	mov	r4, r3
 8003e14:	4613      	mov	r3, r2
 8003e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e18:	c407      	stmia	r4!, {r0, r1, r2}
 8003e1a:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 00);
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f001 fb56 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003e24:	4abb      	ldr	r2, [pc, #748]	; (8004114 <fingerprint_mode+0x338>)
 8003e26:	f107 000c 	add.w	r0, r7, #12
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	ca06      	ldmia	r2, {r1, r2}
 8003e2e:	f001 fb29 	bl	8005484 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003e32:	f107 030c 	add.w	r3, r7, #12
 8003e36:	2232      	movs	r2, #50	; 0x32
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f006 f952 	bl	800a0e4 <memset>

	// Print meu fingerprint
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	2232      	movs	r2, #50	; 0x32
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f006 f94b 	bl	800a0e4 <memset>
	sprintf(str_fingerprint,"%s", "1. function 1");
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	4ab1      	ldr	r2, [pc, #708]	; (8004118 <fingerprint_mode+0x33c>)
 8003e54:	461c      	mov	r4, r3
 8003e56:	4613      	mov	r3, r2
 8003e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5a:	c407      	stmia	r4!, {r0, r1, r2}
 8003e5c:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 16);
 8003e5e:	2110      	movs	r1, #16
 8003e60:	2000      	movs	r0, #0
 8003e62:	f001 fb35 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003e66:	4aab      	ldr	r2, [pc, #684]	; (8004114 <fingerprint_mode+0x338>)
 8003e68:	f107 000c 	add.w	r0, r7, #12
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	ca06      	ldmia	r2, {r1, r2}
 8003e70:	f001 fb08 	bl	8005484 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2232      	movs	r2, #50	; 0x32
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f006 f931 	bl	800a0e4 <memset>

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	2232      	movs	r2, #50	; 0x32
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f006 f92a 	bl	800a0e4 <memset>
	sprintf(str_fingerprint,"%s", "2. function 2");
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	4aa1      	ldr	r2, [pc, #644]	; (800411c <fingerprint_mode+0x340>)
 8003e96:	461c      	mov	r4, r3
 8003e98:	4613      	mov	r3, r2
 8003e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e9c:	c407      	stmia	r4!, {r0, r1, r2}
 8003e9e:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 26);
 8003ea0:	211a      	movs	r1, #26
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f001 fb14 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003ea8:	4a9a      	ldr	r2, [pc, #616]	; (8004114 <fingerprint_mode+0x338>)
 8003eaa:	f107 000c 	add.w	r0, r7, #12
 8003eae:	2301      	movs	r3, #1
 8003eb0:	ca06      	ldmia	r2, {r1, r2}
 8003eb2:	f001 fae7 	bl	8005484 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003eb6:	f107 030c 	add.w	r3, r7, #12
 8003eba:	2232      	movs	r2, #50	; 0x32
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f006 f910 	bl	800a0e4 <memset>

	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	2232      	movs	r2, #50	; 0x32
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f006 f909 	bl	800a0e4 <memset>
	sprintf(str_fingerprint,"%s", "3. function 3");
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	4a92      	ldr	r2, [pc, #584]	; (8004120 <fingerprint_mode+0x344>)
 8003ed8:	461c      	mov	r4, r3
 8003eda:	4613      	mov	r3, r2
 8003edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ede:	c407      	stmia	r4!, {r0, r1, r2}
 8003ee0:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 36);
 8003ee2:	2124      	movs	r1, #36	; 0x24
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f001 faf3 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003eea:	4a8a      	ldr	r2, [pc, #552]	; (8004114 <fingerprint_mode+0x338>)
 8003eec:	f107 000c 	add.w	r0, r7, #12
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	ca06      	ldmia	r2, {r1, r2}
 8003ef4:	f001 fac6 	bl	8005484 <ssd1306_WriteString>
	memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	2232      	movs	r2, #50	; 0x32
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f006 f8ef 	bl	800a0e4 <memset>

	ssd1306_UpdateScreen();
 8003f06:	f001 f9ad 	bl	8005264 <ssd1306_UpdateScreen>

	do                                                            // Whaite for choise
	{
		// Place for sensors code
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003f0a:	f7ff fa3d 	bl	8003388 <read_one_sign_from_keyboard>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
	    if(sign == '1')
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	2b31      	cmp	r3, #49	; 0x31
 8003f16:	d144      	bne.n	8003fa2 <fingerprint_mode+0x1c6>
	    {
	    	// Clear all OLED
	        ssd1306_Fill(Black);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f001 f981 	bl	8005220 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 8003f1e:	f001 f9a1 	bl	8005264 <ssd1306_UpdateScreen>
	        // Print mode in head

	        // Ptint selected menu
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003f22:	f107 030c 	add.w	r3, r7, #12
 8003f26:	2232      	movs	r2, #50	; 0x32
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f006 f8da 	bl	800a0e4 <memset>
	        sprintf(str_fingerprint,"%s", "1. function 1");
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4a78      	ldr	r2, [pc, #480]	; (8004118 <fingerprint_mode+0x33c>)
 8003f36:	461c      	mov	r4, r3
 8003f38:	4613      	mov	r3, r2
 8003f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f3c:	c407      	stmia	r4!, {r0, r1, r2}
 8003f3e:	8023      	strh	r3, [r4, #0]
	        ssd1306_SetCursor(00, 00);
 8003f40:	2100      	movs	r1, #0
 8003f42:	2000      	movs	r0, #0
 8003f44:	f001 fac4 	bl	80054d0 <ssd1306_SetCursor>
	        ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003f48:	4a72      	ldr	r2, [pc, #456]	; (8004114 <fingerprint_mode+0x338>)
 8003f4a:	f107 000c 	add.w	r0, r7, #12
 8003f4e:	2301      	movs	r3, #1
 8003f50:	ca06      	ldmia	r2, {r1, r2}
 8003f52:	f001 fa97 	bl	8005484 <ssd1306_WriteString>
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	2232      	movs	r2, #50	; 0x32
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f006 f8c0 	bl	800a0e4 <memset>

	        ssd1306_UpdateScreen();
 8003f64:	f001 f97e 	bl	8005264 <ssd1306_UpdateScreen>

	        do                                                            // Whaite for choise
	        {
	            // Place for code function 1

	            sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003f68:	f7ff fa0e 	bl	8003388 <read_one_sign_from_keyboard>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]

	            if(sign == '*')    // If select EXIT  // Exit in main menu
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	2b2a      	cmp	r3, #42	; 0x2a
 8003f74:	d112      	bne.n	8003f9c <fingerprint_mode+0x1c0>
	            {
	            	// Clear all OLED
	            	ssd1306_Fill(Black);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f001 f952 	bl	8005220 <ssd1306_Fill>
	            	ssd1306_UpdateScreen();
 8003f7c:	f001 f972 	bl	8005264 <ssd1306_UpdateScreen>

	            	GPS_MODE = false;
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <fingerprint_mode+0x348>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
	            	GSM_MODE = false;
 8003f86:	4b68      	ldr	r3, [pc, #416]	; (8004128 <fingerprint_mode+0x34c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
	            	FINGERPRINT_MODE = false;
 8003f8c:	4b67      	ldr	r3, [pc, #412]	; (800412c <fingerprint_mode+0x350>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
	            	SENSORS_MODE = false;
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <fingerprint_mode+0x354>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]

	            	return 1;          // Flag_fro exit from there
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b5      	b.n	8004108 <fingerprint_mode+0x32c>
	            }
	         }while (sign != '*');     // Select EXIT
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa0:	d1e2      	bne.n	8003f68 <fingerprint_mode+0x18c>
	     }

	     if(sign == '2')
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	2b32      	cmp	r3, #50	; 0x32
 8003fa6:	d144      	bne.n	8004032 <fingerprint_mode+0x256>
	     {
	        // Clear all OLED
	        ssd1306_Fill(Black);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f001 f939 	bl	8005220 <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 8003fae:	f001 f959 	bl	8005264 <ssd1306_UpdateScreen>
	        // Print mode in head

	        // Ptint selected menu
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	2232      	movs	r2, #50	; 0x32
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f006 f892 	bl	800a0e4 <memset>
	        sprintf(str_fingerprint,"%s", "1. function 2");
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	4a5b      	ldr	r2, [pc, #364]	; (8004134 <fingerprint_mode+0x358>)
 8003fc6:	461c      	mov	r4, r3
 8003fc8:	4613      	mov	r3, r2
 8003fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fcc:	c407      	stmia	r4!, {r0, r1, r2}
 8003fce:	8023      	strh	r3, [r4, #0]
	        ssd1306_SetCursor(00, 00);
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f001 fa7c 	bl	80054d0 <ssd1306_SetCursor>
	        ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8003fd8:	4a4e      	ldr	r2, [pc, #312]	; (8004114 <fingerprint_mode+0x338>)
 8003fda:	f107 000c 	add.w	r0, r7, #12
 8003fde:	2301      	movs	r3, #1
 8003fe0:	ca06      	ldmia	r2, {r1, r2}
 8003fe2:	f001 fa4f 	bl	8005484 <ssd1306_WriteString>
	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	2232      	movs	r2, #50	; 0x32
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f006 f878 	bl	800a0e4 <memset>

	        ssd1306_UpdateScreen();
 8003ff4:	f001 f936 	bl	8005264 <ssd1306_UpdateScreen>

	        do                                                            // Whaite for choise
	        {
	        	// Place for code function 2

	        	sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8003ff8:	f7ff f9c6 	bl	8003388 <read_one_sign_from_keyboard>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	71fb      	strb	r3, [r7, #7]

	            if(sign == '*')    // If select EXIT  // Exit in main menu
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b2a      	cmp	r3, #42	; 0x2a
 8004004:	d112      	bne.n	800402c <fingerprint_mode+0x250>
	            {
	                // Clear all OLED
	                ssd1306_Fill(Black);
 8004006:	2000      	movs	r0, #0
 8004008:	f001 f90a 	bl	8005220 <ssd1306_Fill>
	                ssd1306_UpdateScreen();
 800400c:	f001 f92a 	bl	8005264 <ssd1306_UpdateScreen>

	                GPS_MODE = false;
 8004010:	4b44      	ldr	r3, [pc, #272]	; (8004124 <fingerprint_mode+0x348>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
	                GSM_MODE = false;
 8004016:	4b44      	ldr	r3, [pc, #272]	; (8004128 <fingerprint_mode+0x34c>)
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
	                FINGERPRINT_MODE = false;
 800401c:	4b43      	ldr	r3, [pc, #268]	; (800412c <fingerprint_mode+0x350>)
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
	                SENSORS_MODE = false;
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <fingerprint_mode+0x354>)
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]

	                return 1;          // Flag_fro exit from there
 8004028:	2301      	movs	r3, #1
 800402a:	e06d      	b.n	8004108 <fingerprint_mode+0x32c>
	            }
	         }while (sign != '*');     // Select EXIT
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	2b2a      	cmp	r3, #42	; 0x2a
 8004030:	d1e2      	bne.n	8003ff8 <fingerprint_mode+0x21c>
	      }

	      if(sign == '3')
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	2b33      	cmp	r3, #51	; 0x33
 8004036:	d144      	bne.n	80040c2 <fingerprint_mode+0x2e6>
	      {
	    	  // Clear all OLED
	          ssd1306_Fill(Black);
 8004038:	2000      	movs	r0, #0
 800403a:	f001 f8f1 	bl	8005220 <ssd1306_Fill>
	          ssd1306_UpdateScreen();
 800403e:	f001 f911 	bl	8005264 <ssd1306_UpdateScreen>
	          // Print mode in head

	          // Ptint selected menu
	          memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	2232      	movs	r2, #50	; 0x32
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f006 f84a 	bl	800a0e4 <memset>
	          sprintf(str_fingerprint,"%s", "1. function 3");
 8004050:	f107 030c 	add.w	r3, r7, #12
 8004054:	4a38      	ldr	r2, [pc, #224]	; (8004138 <fingerprint_mode+0x35c>)
 8004056:	461c      	mov	r4, r3
 8004058:	4613      	mov	r3, r2
 800405a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800405c:	c407      	stmia	r4!, {r0, r1, r2}
 800405e:	8023      	strh	r3, [r4, #0]
	          ssd1306_SetCursor(00, 00);
 8004060:	2100      	movs	r1, #0
 8004062:	2000      	movs	r0, #0
 8004064:	f001 fa34 	bl	80054d0 <ssd1306_SetCursor>
	          ssd1306_WriteString(str_fingerprint, Font_7x10, White);
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <fingerprint_mode+0x338>)
 800406a:	f107 000c 	add.w	r0, r7, #12
 800406e:	2301      	movs	r3, #1
 8004070:	ca06      	ldmia	r2, {r1, r2}
 8004072:	f001 fa07 	bl	8005484 <ssd1306_WriteString>
	          memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	2232      	movs	r2, #50	; 0x32
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f006 f830 	bl	800a0e4 <memset>

	          ssd1306_UpdateScreen();
 8004084:	f001 f8ee 	bl	8005264 <ssd1306_UpdateScreen>

	          do                                                            // Whaite for choise
	          {
	        	  // Place for code function 3

	               sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004088:	f7ff f97e 	bl	8003388 <read_one_sign_from_keyboard>
 800408c:	4603      	mov	r3, r0
 800408e:	71fb      	strb	r3, [r7, #7]

	               if(sign == '*')    // If select EXIT  // Exit in main menu
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	2b2a      	cmp	r3, #42	; 0x2a
 8004094:	d112      	bne.n	80040bc <fingerprint_mode+0x2e0>
	               {
	                   // Clear all OLED
	                   ssd1306_Fill(Black);
 8004096:	2000      	movs	r0, #0
 8004098:	f001 f8c2 	bl	8005220 <ssd1306_Fill>
	                   ssd1306_UpdateScreen();
 800409c:	f001 f8e2 	bl	8005264 <ssd1306_UpdateScreen>

	                   GPS_MODE = false;
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <fingerprint_mode+0x348>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
	                   GSM_MODE = false;
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <fingerprint_mode+0x34c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
	                   FINGERPRINT_MODE = false;
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <fingerprint_mode+0x350>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
	                   SENSORS_MODE = false;
 80040b2:	4b1f      	ldr	r3, [pc, #124]	; (8004130 <fingerprint_mode+0x354>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]

	                   return 1;          // Flag_fro exit from there
 80040b8:	2301      	movs	r3, #1
 80040ba:	e025      	b.n	8004108 <fingerprint_mode+0x32c>
	                }
	           }while (sign != '*');     // Select EXIT
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	2b2a      	cmp	r3, #42	; 0x2a
 80040c0:	d1e2      	bne.n	8004088 <fingerprint_mode+0x2ac>
	       }

		   if(sign == '*')    // If select EXIT  // Exit in main menu
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b2a      	cmp	r3, #42	; 0x2a
 80040c6:	d112      	bne.n	80040ee <fingerprint_mode+0x312>
		   {
			    // Clear all OLED
				ssd1306_Fill(Black);
 80040c8:	2000      	movs	r0, #0
 80040ca:	f001 f8a9 	bl	8005220 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 80040ce:	f001 f8c9 	bl	8005264 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <fingerprint_mode+0x348>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <fingerprint_mode+0x34c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <fingerprint_mode+0x350>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <fingerprint_mode+0x354>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00c      	b.n	8004108 <fingerprint_mode+0x32c>
			}
		   }while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	2b31      	cmp	r3, #49	; 0x31
 80040f2:	d009      	beq.n	8004108 <fingerprint_mode+0x32c>
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b32      	cmp	r3, #50	; 0x32
 80040f8:	d006      	beq.n	8004108 <fingerprint_mode+0x32c>
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	2b33      	cmp	r3, #51	; 0x33
 80040fe:	d003      	beq.n	8004108 <fingerprint_mode+0x32c>
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b2a      	cmp	r3, #42	; 0x2a
 8004104:	f47f af01 	bne.w	8003f0a <fingerprint_mode+0x12e>
}
 8004108:	4618      	mov	r0, r3
 800410a:	3744      	adds	r7, #68	; 0x44
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	0800d788 	.word	0x0800d788
 8004114:	20000054 	.word	0x20000054
 8004118:	0800d798 	.word	0x0800d798
 800411c:	0800d7a8 	.word	0x0800d7a8
 8004120:	0800d7b8 	.word	0x0800d7b8
 8004124:	200002a9 	.word	0x200002a9
 8004128:	200002a8 	.word	0x200002a8
 800412c:	200002aa 	.word	0x200002aa
 8004130:	200002ab 	.word	0x200002ab
 8004134:	0800d7c8 	.word	0x0800d7c8
 8004138:	0800d7d8 	.word	0x0800d7d8

0800413c <sensors_mode>:
// ----------------------------------------------------------------------------

int sensors_mode(char sign)
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b090      	sub	sp, #64	; 0x40
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
		// Clear all OLED
		ssd1306_Fill(Black);
 8004146:	2000      	movs	r0, #0
 8004148:	f001 f86a 	bl	8005220 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 800414c:	f001 f88a 	bl	8005264 <ssd1306_UpdateScreen>
		// Sensors code place where
		// Print mode in head
		char str_sensors[50]={0};
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	2232      	movs	r2, #50	; 0x32
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f005 ffc3 	bl	800a0e4 <memset>
		memset(str_sensors, 0 , sizeof(str_sensors));
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	2232      	movs	r2, #50	; 0x32
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f005 ffbc 	bl	800a0e4 <memset>
		sprintf(str_sensors,"%s", "4.SENSORS");
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4ac7      	ldr	r2, [pc, #796]	; (8004490 <sensors_mode+0x354>)
 8004172:	ca07      	ldmia	r2, {r0, r1, r2}
 8004174:	c303      	stmia	r3!, {r0, r1}
 8004176:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(00, 00);
 8004178:	2100      	movs	r1, #0
 800417a:	2000      	movs	r0, #0
 800417c:	f001 f9a8 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004180:	4ac4      	ldr	r2, [pc, #784]	; (8004494 <sensors_mode+0x358>)
 8004182:	f107 0008 	add.w	r0, r7, #8
 8004186:	2301      	movs	r3, #1
 8004188:	ca06      	ldmia	r2, {r1, r2}
 800418a:	f001 f97b 	bl	8005484 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	2232      	movs	r2, #50	; 0x32
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f005 ffa4 	bl	800a0e4 <memset>

		// Print meu fingerprint
		memset(str_sensors, 0 , sizeof(str_sensors));
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	2232      	movs	r2, #50	; 0x32
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f005 ff9d 	bl	800a0e4 <memset>
		sprintf(str_sensors,"%s", "1. Run all sensors");
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	4aba      	ldr	r2, [pc, #744]	; (8004498 <sensors_mode+0x35c>)
 80041b0:	461c      	mov	r4, r3
 80041b2:	4615      	mov	r5, r2
 80041b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	8022      	strh	r2, [r4, #0]
 80041be:	3402      	adds	r4, #2
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 80041c4:	2110      	movs	r1, #16
 80041c6:	2000      	movs	r0, #0
 80041c8:	f001 f982 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 80041cc:	4ab1      	ldr	r2, [pc, #708]	; (8004494 <sensors_mode+0x358>)
 80041ce:	f107 0008 	add.w	r0, r7, #8
 80041d2:	2301      	movs	r3, #1
 80041d4:	ca06      	ldmia	r2, {r1, r2}
 80041d6:	f001 f955 	bl	8005484 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 80041da:	f107 0308 	add.w	r3, r7, #8
 80041de:	2232      	movs	r2, #50	; 0x32
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f005 ff7e 	bl	800a0e4 <memset>

		memset(str_sensors, 0 , sizeof(str_sensors));
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	2232      	movs	r2, #50	; 0x32
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f005 ff77 	bl	800a0e4 <memset>
		sprintf(str_sensors,"%s", "2. function 2");
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	4aa8      	ldr	r2, [pc, #672]	; (800449c <sensors_mode+0x360>)
 80041fc:	461c      	mov	r4, r3
 80041fe:	4613      	mov	r3, r2
 8004200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004202:	c407      	stmia	r4!, {r0, r1, r2}
 8004204:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8004206:	211a      	movs	r1, #26
 8004208:	2000      	movs	r0, #0
 800420a:	f001 f961 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 800420e:	4aa1      	ldr	r2, [pc, #644]	; (8004494 <sensors_mode+0x358>)
 8004210:	f107 0008 	add.w	r0, r7, #8
 8004214:	2301      	movs	r3, #1
 8004216:	ca06      	ldmia	r2, {r1, r2}
 8004218:	f001 f934 	bl	8005484 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	2232      	movs	r2, #50	; 0x32
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f005 ff5d 	bl	800a0e4 <memset>

		memset(str_sensors, 0 , sizeof(str_sensors));
 800422a:	f107 0308 	add.w	r3, r7, #8
 800422e:	2232      	movs	r2, #50	; 0x32
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f005 ff56 	bl	800a0e4 <memset>
		sprintf(str_sensors,"%s", "3. function 3");
 8004238:	f107 0308 	add.w	r3, r7, #8
 800423c:	4a98      	ldr	r2, [pc, #608]	; (80044a0 <sensors_mode+0x364>)
 800423e:	461c      	mov	r4, r3
 8004240:	4613      	mov	r3, r2
 8004242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004244:	c407      	stmia	r4!, {r0, r1, r2}
 8004246:	8023      	strh	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8004248:	2124      	movs	r1, #36	; 0x24
 800424a:	2000      	movs	r0, #0
 800424c:	f001 f940 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004250:	4a90      	ldr	r2, [pc, #576]	; (8004494 <sensors_mode+0x358>)
 8004252:	f107 0008 	add.w	r0, r7, #8
 8004256:	2301      	movs	r3, #1
 8004258:	ca06      	ldmia	r2, {r1, r2}
 800425a:	f001 f913 	bl	8005484 <ssd1306_WriteString>
		memset(str_sensors, 0 , sizeof(str_sensors));
 800425e:	f107 0308 	add.w	r3, r7, #8
 8004262:	2232      	movs	r2, #50	; 0x32
 8004264:	2100      	movs	r1, #0
 8004266:	4618      	mov	r0, r3
 8004268:	f005 ff3c 	bl	800a0e4 <memset>

		ssd1306_UpdateScreen();
 800426c:	f000 fffa 	bl	8005264 <ssd1306_UpdateScreen>

		do                                                            // Whaite for choise
			{
			// Place for sensors code

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004270:	f7ff f88a 	bl	8003388 <read_one_sign_from_keyboard>
 8004274:	4603      	mov	r3, r0
 8004276:	71fb      	strb	r3, [r7, #7]
            if(sign == '1')
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	2b31      	cmp	r3, #49	; 0x31
 800427c:	d150      	bne.n	8004320 <sensors_mode+0x1e4>
            {
            	// Clear all OLED
            	ssd1306_Fill(Black);
 800427e:	2000      	movs	r0, #0
 8004280:	f000 ffce 	bl	8005220 <ssd1306_Fill>
            	ssd1306_UpdateScreen();
 8004284:	f000 ffee 	bl	8005264 <ssd1306_UpdateScreen>

            	// Ptint selected menu
            	memset(str_sensors, 0 , sizeof(str_sensors));
 8004288:	f107 0308 	add.w	r3, r7, #8
 800428c:	2232      	movs	r2, #50	; 0x32
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f005 ff27 	bl	800a0e4 <memset>
            	sprintf(str_sensors,"%s", "1. Run all sensors");
 8004296:	f107 0308 	add.w	r3, r7, #8
 800429a:	4a7f      	ldr	r2, [pc, #508]	; (8004498 <sensors_mode+0x35c>)
 800429c:	461c      	mov	r4, r3
 800429e:	4615      	mov	r5, r2
 80042a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	8022      	strh	r2, [r4, #0]
 80042aa:	3402      	adds	r4, #2
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	7023      	strb	r3, [r4, #0]
            	ssd1306_SetCursor(00, 00);
 80042b0:	2100      	movs	r1, #0
 80042b2:	2000      	movs	r0, #0
 80042b4:	f001 f90c 	bl	80054d0 <ssd1306_SetCursor>
            	ssd1306_WriteString(str_sensors, Font_7x10, White);
 80042b8:	4a76      	ldr	r2, [pc, #472]	; (8004494 <sensors_mode+0x358>)
 80042ba:	f107 0008 	add.w	r0, r7, #8
 80042be:	2301      	movs	r3, #1
 80042c0:	ca06      	ldmia	r2, {r1, r2}
 80042c2:	f001 f8df 	bl	8005484 <ssd1306_WriteString>
            	memset(str_sensors, 0 , sizeof(str_sensors));
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	2232      	movs	r2, #50	; 0x32
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f005 ff08 	bl	800a0e4 <memset>

            	ssd1306_UpdateScreen();
 80042d4:	f000 ffc6 	bl	8005264 <ssd1306_UpdateScreen>

            	do                                                            // Whaite for choise
            	{
            		// Place for code function 1
            		// Create timer for measure
            		read_T_and_H_SI7021();
 80042d8:	f7fe fa78 	bl	80027cc <read_T_and_H_SI7021>
            		int select_print_data = 4;							// Flag for print sensors data on OLED
 80042dc:	2304      	movs	r3, #4
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
            		OLED_prinr_all_data(select_print_data);
 80042e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042e2:	f000 fc07 	bl	8004af4 <OLED_prinr_all_data>

            		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80042e6:	f7ff f84f 	bl	8003388 <read_one_sign_from_keyboard>
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]

            		if(sign == '*')    // If select EXIT  // Exit in main menu
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b2a      	cmp	r3, #42	; 0x2a
 80042f2:	d112      	bne.n	800431a <sensors_mode+0x1de>
            		{
            			// Stop timer for measure

            			// Clear all OLED
            			ssd1306_Fill(Black);
 80042f4:	2000      	movs	r0, #0
 80042f6:	f000 ff93 	bl	8005220 <ssd1306_Fill>
            			ssd1306_UpdateScreen();
 80042fa:	f000 ffb3 	bl	8005264 <ssd1306_UpdateScreen>

            			GPS_MODE = false;
 80042fe:	4b69      	ldr	r3, [pc, #420]	; (80044a4 <sensors_mode+0x368>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
            			GSM_MODE = false;
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <sensors_mode+0x36c>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
            			FINGERPRINT_MODE = false;
 800430a:	4b68      	ldr	r3, [pc, #416]	; (80044ac <sensors_mode+0x370>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
            			SENSORS_MODE = false;
 8004310:	4b67      	ldr	r3, [pc, #412]	; (80044b0 <sensors_mode+0x374>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]

            			return 1;          // Flag_fro exit from there
 8004316:	2301      	movs	r3, #1
 8004318:	e0b5      	b.n	8004486 <sensors_mode+0x34a>
            		}
            	}while (sign != '*');     // Select EXIT
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	2b2a      	cmp	r3, #42	; 0x2a
 800431e:	d1db      	bne.n	80042d8 <sensors_mode+0x19c>
            }

            if(sign == '2')
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	2b32      	cmp	r3, #50	; 0x32
 8004324:	d144      	bne.n	80043b0 <sensors_mode+0x274>
            {
                // Clear all OLED
                ssd1306_Fill(Black);
 8004326:	2000      	movs	r0, #0
 8004328:	f000 ff7a 	bl	8005220 <ssd1306_Fill>
               	ssd1306_UpdateScreen();
 800432c:	f000 ff9a 	bl	8005264 <ssd1306_UpdateScreen>

                // Ptint selected menu
                memset(str_sensors, 0 , sizeof(str_sensors));
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	2232      	movs	r2, #50	; 0x32
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f005 fed3 	bl	800a0e4 <memset>
                sprintf(str_sensors,"%s", "1. function 2");
 800433e:	f107 0308 	add.w	r3, r7, #8
 8004342:	4a5c      	ldr	r2, [pc, #368]	; (80044b4 <sensors_mode+0x378>)
 8004344:	461c      	mov	r4, r3
 8004346:	4613      	mov	r3, r2
 8004348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800434a:	c407      	stmia	r4!, {r0, r1, r2}
 800434c:	8023      	strh	r3, [r4, #0]
                ssd1306_SetCursor(00, 00);
 800434e:	2100      	movs	r1, #0
 8004350:	2000      	movs	r0, #0
 8004352:	f001 f8bd 	bl	80054d0 <ssd1306_SetCursor>
                ssd1306_WriteString(str_sensors, Font_7x10, White);
 8004356:	4a4f      	ldr	r2, [pc, #316]	; (8004494 <sensors_mode+0x358>)
 8004358:	f107 0008 	add.w	r0, r7, #8
 800435c:	2301      	movs	r3, #1
 800435e:	ca06      	ldmia	r2, {r1, r2}
 8004360:	f001 f890 	bl	8005484 <ssd1306_WriteString>
                memset(str_sensors, 0 , sizeof(str_sensors));
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	2232      	movs	r2, #50	; 0x32
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f005 feb9 	bl	800a0e4 <memset>

                ssd1306_UpdateScreen();
 8004372:	f000 ff77 	bl	8005264 <ssd1306_UpdateScreen>

                do                                                            // Whaite for choise
                {
                       // Place for code function 2

                       sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004376:	f7ff f807 	bl	8003388 <read_one_sign_from_keyboard>
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]

                       if(sign == '*')    // If select EXIT  // Exit in main menu
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b2a      	cmp	r3, #42	; 0x2a
 8004382:	d112      	bne.n	80043aa <sensors_mode+0x26e>
                       {
                            // Clear all OLED
                            ssd1306_Fill(Black);
 8004384:	2000      	movs	r0, #0
 8004386:	f000 ff4b 	bl	8005220 <ssd1306_Fill>
                            ssd1306_UpdateScreen();
 800438a:	f000 ff6b 	bl	8005264 <ssd1306_UpdateScreen>

                            GPS_MODE = false;
 800438e:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <sensors_mode+0x368>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
                            GSM_MODE = false;
 8004394:	4b44      	ldr	r3, [pc, #272]	; (80044a8 <sensors_mode+0x36c>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
                            FINGERPRINT_MODE = false;
 800439a:	4b44      	ldr	r3, [pc, #272]	; (80044ac <sensors_mode+0x370>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
                            SENSORS_MODE = false;
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <sensors_mode+0x374>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]

                            return 1;          // Flag_fro exit from there
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06d      	b.n	8004486 <sensors_mode+0x34a>
                       }
                 }while (sign != '*');     // Select EXIT
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b2a      	cmp	r3, #42	; 0x2a
 80043ae:	d1e2      	bne.n	8004376 <sensors_mode+0x23a>

                // Place for code function 2
            }

            if(sign == '3')
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	2b33      	cmp	r3, #51	; 0x33
 80043b4:	d144      	bne.n	8004440 <sensors_mode+0x304>
            {
                 // Clear all OLED
                 ssd1306_Fill(Black);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f000 ff32 	bl	8005220 <ssd1306_Fill>
                 ssd1306_UpdateScreen();
 80043bc:	f000 ff52 	bl	8005264 <ssd1306_UpdateScreen>
                 // Print mode in head

                 // Ptint selected menu
                 memset(str_sensors, 0 , sizeof(str_sensors));
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	2232      	movs	r2, #50	; 0x32
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f005 fe8b 	bl	800a0e4 <memset>
                 sprintf(str_sensors,"%s", "1. function 3");
 80043ce:	f107 0308 	add.w	r3, r7, #8
 80043d2:	4a39      	ldr	r2, [pc, #228]	; (80044b8 <sensors_mode+0x37c>)
 80043d4:	461c      	mov	r4, r3
 80043d6:	4613      	mov	r3, r2
 80043d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043da:	c407      	stmia	r4!, {r0, r1, r2}
 80043dc:	8023      	strh	r3, [r4, #0]
                 ssd1306_SetCursor(00, 00);
 80043de:	2100      	movs	r1, #0
 80043e0:	2000      	movs	r0, #0
 80043e2:	f001 f875 	bl	80054d0 <ssd1306_SetCursor>
                 ssd1306_WriteString(str_sensors, Font_7x10, White);
 80043e6:	4a2b      	ldr	r2, [pc, #172]	; (8004494 <sensors_mode+0x358>)
 80043e8:	f107 0008 	add.w	r0, r7, #8
 80043ec:	2301      	movs	r3, #1
 80043ee:	ca06      	ldmia	r2, {r1, r2}
 80043f0:	f001 f848 	bl	8005484 <ssd1306_WriteString>
                 memset(str_sensors, 0 , sizeof(str_sensors));
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	2232      	movs	r2, #50	; 0x32
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 fe71 	bl	800a0e4 <memset>

                 ssd1306_UpdateScreen();
 8004402:	f000 ff2f 	bl	8005264 <ssd1306_UpdateScreen>

                 do                                                            // Whaite for choise
                 {
                      // Place for code function 3

                      sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004406:	f7fe ffbf 	bl	8003388 <read_one_sign_from_keyboard>
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]

                      if(sign == '*')    // If select EXIT  // Exit in main menu
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	2b2a      	cmp	r3, #42	; 0x2a
 8004412:	d112      	bne.n	800443a <sensors_mode+0x2fe>
                      {
                           // Clear all OLED
                           ssd1306_Fill(Black);
 8004414:	2000      	movs	r0, #0
 8004416:	f000 ff03 	bl	8005220 <ssd1306_Fill>
                           ssd1306_UpdateScreen();
 800441a:	f000 ff23 	bl	8005264 <ssd1306_UpdateScreen>

                           GPS_MODE = false;
 800441e:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <sensors_mode+0x368>)
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
                           GSM_MODE = false;
 8004424:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <sensors_mode+0x36c>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
                           FINGERPRINT_MODE = false;
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <sensors_mode+0x370>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
                           SENSORS_MODE = false;
 8004430:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <sensors_mode+0x374>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]

                           return 1;          // Flag_fro exit from there
 8004436:	2301      	movs	r3, #1
 8004438:	e025      	b.n	8004486 <sensors_mode+0x34a>
                      }
                  }while (sign != '*');     // Select EXIT
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b2a      	cmp	r3, #42	; 0x2a
 800443e:	d1e2      	bne.n	8004406 <sensors_mode+0x2ca>

                 // Place for code function 3
            }

			if(sign == '*')    // If select EXIT  // Exit in main menu
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b2a      	cmp	r3, #42	; 0x2a
 8004444:	d112      	bne.n	800446c <sensors_mode+0x330>
			{
				// Clear all OLED
				ssd1306_Fill(Black);
 8004446:	2000      	movs	r0, #0
 8004448:	f000 feea 	bl	8005220 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800444c:	f000 ff0a 	bl	8005264 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <sensors_mode+0x368>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <sensors_mode+0x36c>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <sensors_mode+0x370>)
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <sensors_mode+0x374>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 8004468:	2301      	movs	r3, #1
 800446a:	e00c      	b.n	8004486 <sensors_mode+0x34a>
			}
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	2b31      	cmp	r3, #49	; 0x31
 8004470:	d009      	beq.n	8004486 <sensors_mode+0x34a>
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	2b32      	cmp	r3, #50	; 0x32
 8004476:	d006      	beq.n	8004486 <sensors_mode+0x34a>
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2b33      	cmp	r3, #51	; 0x33
 800447c:	d003      	beq.n	8004486 <sensors_mode+0x34a>
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b2a      	cmp	r3, #42	; 0x2a
 8004482:	f47f aef5 	bne.w	8004270 <sensors_mode+0x134>
}
 8004486:	4618      	mov	r0, r3
 8004488:	3740      	adds	r7, #64	; 0x40
 800448a:	46bd      	mov	sp, r7
 800448c:	bdb0      	pop	{r4, r5, r7, pc}
 800448e:	bf00      	nop
 8004490:	0800d7e8 	.word	0x0800d7e8
 8004494:	20000054 	.word	0x20000054
 8004498:	0800d7f4 	.word	0x0800d7f4
 800449c:	0800d7a8 	.word	0x0800d7a8
 80044a0:	0800d7b8 	.word	0x0800d7b8
 80044a4:	200002a9 	.word	0x200002a9
 80044a8:	200002a8 	.word	0x200002a8
 80044ac:	200002aa 	.word	0x200002aa
 80044b0:	200002ab 	.word	0x200002ab
 80044b4:	0800d7c8 	.word	0x0800d7c8
 80044b8:	0800d7d8 	.word	0x0800d7d8

080044bc <show_sratus_call>:
// ----------------------------------------------------------------------------
/* After output call this function show call status
 */
void show_sratus_call(int call_status, char *str_gsm, char sign, uint8_t where_call)
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	460b      	mov	r3, r1
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	4613      	mov	r3, r2
 80044d0:	71bb      	strb	r3, [r7, #6]
	if (where_call == 1)   // If call to me
 80044d2:	79bb      	ldrb	r3, [r7, #6]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d135      	bne.n	8004544 <show_sratus_call+0x88>
	{
		// 1. Clean OLED
		int h = 16;
 80044d8:	2310      	movs	r3, #16
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
		char str[30] = {0};
 80044dc:	f107 0310 	add.w	r3, r7, #16
 80044e0:	221e      	movs	r2, #30
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f005 fdfd 	bl	800a0e4 <memset>
		while(h != 46)
 80044ea:	e022      	b.n	8004532 <show_sratus_call+0x76>
		{
			sprintf(str,"%s", "                    ");
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	4a96      	ldr	r2, [pc, #600]	; (800474c <show_sratus_call+0x290>)
 80044f2:	461c      	mov	r4, r3
 80044f4:	4615      	mov	r5, r2
 80044f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044fe:	6020      	str	r0, [r4, #0]
 8004500:	3404      	adds	r4, #4
 8004502:	7021      	strb	r1, [r4, #0]
			ssd1306_SetCursor(00, h);
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	2000      	movs	r0, #0
 800450c:	f000 ffe0 	bl	80054d0 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 8004510:	4a8f      	ldr	r2, [pc, #572]	; (8004750 <show_sratus_call+0x294>)
 8004512:	f107 0010 	add.w	r0, r7, #16
 8004516:	2301      	movs	r3, #1
 8004518:	ca06      	ldmia	r2, {r1, r2}
 800451a:	f000 ffb3 	bl	8005484 <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 800451e:	f107 0310 	add.w	r3, r7, #16
 8004522:	221e      	movs	r2, #30
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f005 fddc 	bl	800a0e4 <memset>

			h = h +10;
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452e:	330a      	adds	r3, #10
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
		while(h != 46)
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2b2e      	cmp	r3, #46	; 0x2e
 8004536:	d1d9      	bne.n	80044ec <show_sratus_call+0x30>
		}
		ssd1306_UpdateScreen();
 8004538:	f000 fe94 	bl	8005264 <ssd1306_UpdateScreen>
		HAL_Delay(500);
 800453c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004540:	f001 fb92 	bl	8005c68 <HAL_Delay>
	}

	if (call_status == 1)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d134      	bne.n	80045b4 <show_sratus_call+0xf8>
	{
		sprintf(str_gsm,"%s", "STATUS: Call out...");
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a81      	ldr	r2, [pc, #516]	; (8004754 <show_sratus_call+0x298>)
 800454e:	461d      	mov	r5, r3
 8004550:	4614      	mov	r4, r2
 8004552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004554:	6028      	str	r0, [r5, #0]
 8004556:	6069      	str	r1, [r5, #4]
 8004558:	60aa      	str	r2, [r5, #8]
 800455a:	60eb      	str	r3, [r5, #12]
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	6128      	str	r0, [r5, #16]
		ssd1306_SetCursor(00, 36);
 8004560:	2124      	movs	r1, #36	; 0x24
 8004562:	2000      	movs	r0, #0
 8004564:	f000 ffb4 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004568:	4a79      	ldr	r2, [pc, #484]	; (8004750 <show_sratus_call+0x294>)
 800456a:	2301      	movs	r3, #1
 800456c:	ca06      	ldmia	r2, {r1, r2}
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f000 ff88 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004574:	2204      	movs	r2, #4
 8004576:	2100      	movs	r1, #0
 8004578:	68b8      	ldr	r0, [r7, #8]
 800457a:	f005 fdb3 	bl	800a0e4 <memset>

		sprintf(str_gsm,"%s", "#: for end call");
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a75      	ldr	r2, [pc, #468]	; (8004758 <show_sratus_call+0x29c>)
 8004582:	461c      	mov	r4, r3
 8004584:	4615      	mov	r5, r2
 8004586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004588:	6020      	str	r0, [r4, #0]
 800458a:	6061      	str	r1, [r4, #4]
 800458c:	60a2      	str	r2, [r4, #8]
 800458e:	60e3      	str	r3, [r4, #12]
		ssd1306_SetCursor(00, 46);
 8004590:	212e      	movs	r1, #46	; 0x2e
 8004592:	2000      	movs	r0, #0
 8004594:	f000 ff9c 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004598:	4a6d      	ldr	r2, [pc, #436]	; (8004750 <show_sratus_call+0x294>)
 800459a:	2301      	movs	r3, #1
 800459c:	ca06      	ldmia	r2, {r1, r2}
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f000 ff70 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 80045a4:	2204      	movs	r2, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f005 fd9b 	bl	800a0e4 <memset>

		ssd1306_UpdateScreen();
 80045ae:	f000 fe59 	bl	8005264 <ssd1306_UpdateScreen>
 80045b2:	e01e      	b.n	80045f2 <show_sratus_call+0x136>
	}
	else
	{
		sprintf(str_gsm,"%s", "STATUS: ERROR CALL");
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a69      	ldr	r2, [pc, #420]	; (800475c <show_sratus_call+0x2a0>)
 80045b8:	461d      	mov	r5, r3
 80045ba:	4614      	mov	r4, r2
 80045bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045be:	6028      	str	r0, [r5, #0]
 80045c0:	6069      	str	r1, [r5, #4]
 80045c2:	60aa      	str	r2, [r5, #8]
 80045c4:	60eb      	str	r3, [r5, #12]
 80045c6:	8823      	ldrh	r3, [r4, #0]
 80045c8:	78a2      	ldrb	r2, [r4, #2]
 80045ca:	822b      	strh	r3, [r5, #16]
 80045cc:	4613      	mov	r3, r2
 80045ce:	74ab      	strb	r3, [r5, #18]
		ssd1306_SetCursor(00, 36);
 80045d0:	2124      	movs	r1, #36	; 0x24
 80045d2:	2000      	movs	r0, #0
 80045d4:	f000 ff7c 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 80045d8:	4a5d      	ldr	r2, [pc, #372]	; (8004750 <show_sratus_call+0x294>)
 80045da:	2301      	movs	r3, #1
 80045dc:	ca06      	ldmia	r2, {r1, r2}
 80045de:	68b8      	ldr	r0, [r7, #8]
 80045e0:	f000 ff50 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 80045e4:	2204      	movs	r2, #4
 80045e6:	2100      	movs	r1, #0
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f005 fd7b 	bl	800a0e4 <memset>
		ssd1306_UpdateScreen();
 80045ee:	f000 fe39 	bl	8005264 <ssd1306_UpdateScreen>
	}
	// wait ansver from GSM module

	int gsm_out_call_stattus = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	633b      	str	r3, [r7, #48]	; 0x30
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 80045f6:	e006      	b.n	8004606 <show_sratus_call+0x14a>
	&& (gsm_out_call_stattus != 3))
	{
		sign = read_one_sign_from_keyboard();
 80045f8:	f7fe fec6 	bl	8003388 <read_one_sign_from_keyboard>
 80045fc:	4603      	mov	r3, r0
 80045fe:	71fb      	strb	r3, [r7, #7]
		gsm_out_call_stattus = wait_ansver_after_make_call_in_blok_mode();
 8004600:	f7fd ffca 	bl	8002598 <wait_ansver_after_make_call_in_blok_mode>
 8004604:	6338      	str	r0, [r7, #48]	; 0x30
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b23      	cmp	r3, #35	; 0x23
 800460a:	d008      	beq.n	800461e <show_sratus_call+0x162>
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2b01      	cmp	r3, #1
 8004610:	d005      	beq.n	800461e <show_sratus_call+0x162>
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2b02      	cmp	r3, #2
 8004616:	d002      	beq.n	800461e <show_sratus_call+0x162>
	&& (gsm_out_call_stattus != 3))
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2b03      	cmp	r3, #3
 800461c:	d1ec      	bne.n	80045f8 <show_sratus_call+0x13c>
	}

	if (sign == '#')
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	2b23      	cmp	r3, #35	; 0x23
 8004622:	d121      	bne.n	8004668 <show_sratus_call+0x1ac>
	{
		end_of_call();
 8004624:	f7fd ff04 	bl	8002430 <end_of_call>

		sprintf(str_gsm,"%s", "STATUS: CALL END   ");
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a4d      	ldr	r2, [pc, #308]	; (8004760 <show_sratus_call+0x2a4>)
 800462c:	461d      	mov	r5, r3
 800462e:	4614      	mov	r4, r2
 8004630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004632:	6028      	str	r0, [r5, #0]
 8004634:	6069      	str	r1, [r5, #4]
 8004636:	60aa      	str	r2, [r5, #8]
 8004638:	60eb      	str	r3, [r5, #12]
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	6128      	str	r0, [r5, #16]
		ssd1306_SetCursor(00, 36);
 800463e:	2124      	movs	r1, #36	; 0x24
 8004640:	2000      	movs	r0, #0
 8004642:	f000 ff45 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004646:	4a42      	ldr	r2, [pc, #264]	; (8004750 <show_sratus_call+0x294>)
 8004648:	2301      	movs	r3, #1
 800464a:	ca06      	ldmia	r2, {r1, r2}
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f000 ff19 	bl	8005484 <ssd1306_WriteString>
		memset(str_gsm, 0 , sizeof(str_gsm));
 8004652:	2204      	movs	r2, #4
 8004654:	2100      	movs	r1, #0
 8004656:	68b8      	ldr	r0, [r7, #8]
 8004658:	f005 fd44 	bl	800a0e4 <memset>
		ssd1306_UpdateScreen();
 800465c:	f000 fe02 	bl	8005264 <ssd1306_UpdateScreen>

		HAL_Delay(2000);
 8004660:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004664:	f001 fb00 	bl	8005c68 <HAL_Delay>
	}

	switch (gsm_out_call_stattus)
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2b02      	cmp	r3, #2
 800466c:	d026      	beq.n	80046bc <show_sratus_call+0x200>
 800466e:	2b03      	cmp	r3, #3
 8004670:	d047      	beq.n	8004702 <show_sratus_call+0x246>
 8004672:	2b01      	cmp	r3, #1
 8004674:	d000      	beq.n	8004678 <show_sratus_call+0x1bc>

			HAL_Delay(2000);
			break;

		}
}
 8004676:	e065      	b.n	8004744 <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: BUSY           ");
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4a3a      	ldr	r2, [pc, #232]	; (8004764 <show_sratus_call+0x2a8>)
 800467c:	461d      	mov	r5, r3
 800467e:	4614      	mov	r4, r2
 8004680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004682:	6028      	str	r0, [r5, #0]
 8004684:	6069      	str	r1, [r5, #4]
 8004686:	60aa      	str	r2, [r5, #8]
 8004688:	60eb      	str	r3, [r5, #12]
 800468a:	cc03      	ldmia	r4!, {r0, r1}
 800468c:	6128      	str	r0, [r5, #16]
 800468e:	6169      	str	r1, [r5, #20]
			ssd1306_SetCursor(00, 36);
 8004690:	2124      	movs	r1, #36	; 0x24
 8004692:	2000      	movs	r0, #0
 8004694:	f000 ff1c 	bl	80054d0 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004698:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <show_sratus_call+0x294>)
 800469a:	2301      	movs	r3, #1
 800469c:	ca06      	ldmia	r2, {r1, r2}
 800469e:	68b8      	ldr	r0, [r7, #8]
 80046a0:	f000 fef0 	bl	8005484 <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 80046a4:	2204      	movs	r2, #4
 80046a6:	2100      	movs	r1, #0
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f005 fd1b 	bl	800a0e4 <memset>
			ssd1306_UpdateScreen();
 80046ae:	f000 fdd9 	bl	8005264 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 80046b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80046b6:	f001 fad7 	bl	8005c68 <HAL_Delay>
			break;
 80046ba:	e043      	b.n	8004744 <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: NO ANSWER    ");
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <show_sratus_call+0x2ac>)
 80046c0:	461d      	mov	r5, r3
 80046c2:	4614      	mov	r4, r2
 80046c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c6:	6028      	str	r0, [r5, #0]
 80046c8:	6069      	str	r1, [r5, #4]
 80046ca:	60aa      	str	r2, [r5, #8]
 80046cc:	60eb      	str	r3, [r5, #12]
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	6128      	str	r0, [r5, #16]
 80046d2:	88a3      	ldrh	r3, [r4, #4]
 80046d4:	82ab      	strh	r3, [r5, #20]
			ssd1306_SetCursor(00, 36);
 80046d6:	2124      	movs	r1, #36	; 0x24
 80046d8:	2000      	movs	r0, #0
 80046da:	f000 fef9 	bl	80054d0 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <show_sratus_call+0x294>)
 80046e0:	2301      	movs	r3, #1
 80046e2:	ca06      	ldmia	r2, {r1, r2}
 80046e4:	68b8      	ldr	r0, [r7, #8]
 80046e6:	f000 fecd 	bl	8005484 <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 80046ea:	2204      	movs	r2, #4
 80046ec:	2100      	movs	r1, #0
 80046ee:	68b8      	ldr	r0, [r7, #8]
 80046f0:	f005 fcf8 	bl	800a0e4 <memset>
			ssd1306_UpdateScreen();
 80046f4:	f000 fdb6 	bl	8005264 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 80046f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80046fc:	f001 fab4 	bl	8005c68 <HAL_Delay>
			break;
 8004700:	e020      	b.n	8004744 <show_sratus_call+0x288>
			sprintf(str_gsm,"%s", "STATUS: CALL END   ");
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <show_sratus_call+0x2a4>)
 8004706:	461d      	mov	r5, r3
 8004708:	4614      	mov	r4, r2
 800470a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470c:	6028      	str	r0, [r5, #0]
 800470e:	6069      	str	r1, [r5, #4]
 8004710:	60aa      	str	r2, [r5, #8]
 8004712:	60eb      	str	r3, [r5, #12]
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	6128      	str	r0, [r5, #16]
			ssd1306_SetCursor(00, 36);
 8004718:	2124      	movs	r1, #36	; 0x24
 800471a:	2000      	movs	r0, #0
 800471c:	f000 fed8 	bl	80054d0 <ssd1306_SetCursor>
			ssd1306_WriteString(str_gsm, Font_7x10, White);
 8004720:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <show_sratus_call+0x294>)
 8004722:	2301      	movs	r3, #1
 8004724:	ca06      	ldmia	r2, {r1, r2}
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f000 feac 	bl	8005484 <ssd1306_WriteString>
			memset(str_gsm, 0 , sizeof(str_gsm));
 800472c:	2204      	movs	r2, #4
 800472e:	2100      	movs	r1, #0
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f005 fcd7 	bl	800a0e4 <memset>
			ssd1306_UpdateScreen();
 8004736:	f000 fd95 	bl	8005264 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 800473a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800473e:	f001 fa93 	bl	8005c68 <HAL_Delay>
			break;
 8004742:	bf00      	nop
}
 8004744:	bf00      	nop
 8004746:	3738      	adds	r7, #56	; 0x38
 8004748:	46bd      	mov	sp, r7
 800474a:	bdb0      	pop	{r4, r5, r7, pc}
 800474c:	0800d6c4 	.word	0x0800d6c4
 8004750:	20000054 	.word	0x20000054
 8004754:	0800d808 	.word	0x0800d808
 8004758:	0800d81c 	.word	0x0800d81c
 800475c:	0800d82c 	.word	0x0800d82c
 8004760:	0800d840 	.word	0x0800d840
 8004764:	0800d854 	.word	0x0800d854
 8004768:	0800d86c 	.word	0x0800d86c

0800476c <enter_a_mobile_number>:
 * For example 380XXXXXXXXX.
 * And delete wrong entered digits.
 * If entered all digits function finish work.
 */
bool enter_a_mobile_number(char * number)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	bool entered_number_status = false;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// 1. Clean OLED
	int h = 16;
 800477a:	2310      	movs	r3, #16
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
	char str[30] = {0};
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	221e      	movs	r2, #30
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f005 fcac 	bl	800a0e4 <memset>
	while(h != 46)
 800478c:	e022      	b.n	80047d4 <enter_a_mobile_number+0x68>
	{
		sprintf(str,"%s", "                    ");
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	4a62      	ldr	r2, [pc, #392]	; (800491c <enter_a_mobile_number+0x1b0>)
 8004794:	461c      	mov	r4, r3
 8004796:	4615      	mov	r5, r2
 8004798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047a0:	6020      	str	r0, [r4, #0]
 80047a2:	3404      	adds	r4, #4
 80047a4:	7021      	strb	r1, [r4, #0]
		ssd1306_SetCursor(00, h);
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	4619      	mov	r1, r3
 80047ac:	2000      	movs	r0, #0
 80047ae:	f000 fe8f 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80047b2:	4a5b      	ldr	r2, [pc, #364]	; (8004920 <enter_a_mobile_number+0x1b4>)
 80047b4:	f107 0008 	add.w	r0, r7, #8
 80047b8:	2301      	movs	r3, #1
 80047ba:	ca06      	ldmia	r2, {r1, r2}
 80047bc:	f000 fe62 	bl	8005484 <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	221e      	movs	r2, #30
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f005 fc8b 	bl	800a0e4 <memset>

		h = h +10;
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	330a      	adds	r3, #10
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(h != 46)
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	2b2e      	cmp	r3, #46	; 0x2e
 80047d8:	d1d9      	bne.n	800478e <enter_a_mobile_number+0x22>
	}
	ssd1306_UpdateScreen();
 80047da:	f000 fd43 	bl	8005264 <ssd1306_UpdateScreen>
	HAL_Delay(500);
 80047de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047e2:	f001 fa41 	bl	8005c68 <HAL_Delay>
	//

    // 2. Type numbers
	sprintf(str,"%s", "Enter number:");
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4a4e      	ldr	r2, [pc, #312]	; (8004924 <enter_a_mobile_number+0x1b8>)
 80047ec:	461c      	mov	r4, r3
 80047ee:	4613      	mov	r3, r2
 80047f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047f2:	c407      	stmia	r4!, {r0, r1, r2}
 80047f4:	8023      	strh	r3, [r4, #0]
	ssd1306_SetCursor(00, 16);
 80047f6:	2110      	movs	r1, #16
 80047f8:	2000      	movs	r0, #0
 80047fa:	f000 fe69 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 80047fe:	4a48      	ldr	r2, [pc, #288]	; (8004920 <enter_a_mobile_number+0x1b4>)
 8004800:	f107 0008 	add.w	r0, r7, #8
 8004804:	2301      	movs	r3, #1
 8004806:	ca06      	ldmia	r2, {r1, r2}
 8004808:	f000 fe3c 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	221e      	movs	r2, #30
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f005 fc65 	bl	800a0e4 <memset>

	ssd1306_UpdateScreen();
 800481a:	f000 fd23 	bl	8005264 <ssd1306_UpdateScreen>

	uint8_t k = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char sing_number;
	//char number[13]={0};
	do{
		sing_number = read_one_sign_from_keyboard();
 8004824:	f7fe fdb0 	bl	8003388 <read_one_sign_from_keyboard>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((sing_number != '\0') && (sing_number != 'D'))  	// Enter one digit
 800482e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004832:	2b00      	cmp	r3, #0
 8004834:	d029      	beq.n	800488a <enter_a_mobile_number+0x11e>
 8004836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800483a:	2b44      	cmp	r3, #68	; 0x44
 800483c:	d025      	beq.n	800488a <enter_a_mobile_number+0x11e>
		{
			number[k] = sing_number;
 800483e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800484a:	701a      	strb	r2, [r3, #0]
			k++;
 800484c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004850:	3301      	adds	r3, #1
 8004852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			// print all mumbers
			sprintf(str,"%s", number);
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	f005 fc85 	bl	800a16c <strcpy>
			ssd1306_SetCursor(00, 26);
 8004862:	211a      	movs	r1, #26
 8004864:	2000      	movs	r0, #0
 8004866:	f000 fe33 	bl	80054d0 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 800486a:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <enter_a_mobile_number+0x1b4>)
 800486c:	f107 0008 	add.w	r0, r7, #8
 8004870:	2301      	movs	r3, #1
 8004872:	ca06      	ldmia	r2, {r1, r2}
 8004874:	f000 fe06 	bl	8005484 <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 8004878:	f107 0308 	add.w	r3, r7, #8
 800487c:	221e      	movs	r2, #30
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f005 fc2f 	bl	800a0e4 <memset>
			ssd1306_UpdateScreen();
 8004886:	f000 fced 	bl	8005264 <ssd1306_UpdateScreen>

		}
		if((sing_number == 'D') && (k >=1))						// Delete one digit
 800488a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800488e:	2b44      	cmp	r3, #68	; 0x44
 8004890:	d128      	bne.n	80048e4 <enter_a_mobile_number+0x178>
 8004892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004896:	2b00      	cmp	r3, #0
 8004898:	d024      	beq.n	80048e4 <enter_a_mobile_number+0x178>
		{
			k--;
 800489a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800489e:	3b01      	subs	r3, #1
 80048a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			number[k] = ' ';
 80048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	2220      	movs	r2, #32
 80048ae:	701a      	strb	r2, [r3, #0]

			sprintf(str,"%s", number);
 80048b0:	f107 0308 	add.w	r3, r7, #8
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f005 fc58 	bl	800a16c <strcpy>
			ssd1306_SetCursor(00, 26);
 80048bc:	211a      	movs	r1, #26
 80048be:	2000      	movs	r0, #0
 80048c0:	f000 fe06 	bl	80054d0 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_7x10, White);
 80048c4:	4a16      	ldr	r2, [pc, #88]	; (8004920 <enter_a_mobile_number+0x1b4>)
 80048c6:	f107 0008 	add.w	r0, r7, #8
 80048ca:	2301      	movs	r3, #1
 80048cc:	ca06      	ldmia	r2, {r1, r2}
 80048ce:	f000 fdd9 	bl	8005484 <ssd1306_WriteString>
			memset(str, 0 , sizeof(str));
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	221e      	movs	r2, #30
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f005 fc02 	bl	800a0e4 <memset>
			ssd1306_UpdateScreen();
 80048e0:	f000 fcc0 	bl	8005264 <ssd1306_UpdateScreen>
		}

		if(k == 12)												// If all digits was entered
 80048e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d102      	bne.n	80048f2 <enter_a_mobile_number+0x186>
		{
			entered_number_status = true;						// Status. All digit entered
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			//break;
		}

		HAL_Delay(200);
 80048f2:	20c8      	movs	r0, #200	; 0xc8
 80048f4:	f001 f9b8 	bl	8005c68 <HAL_Delay>
	}while ((sing_number != '*') && (entered_number_status != true));
 80048f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048fc:	2b2a      	cmp	r3, #42	; 0x2a
 80048fe:	d006      	beq.n	800490e <enter_a_mobile_number+0x1a2>
 8004900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004904:	f083 0301 	eor.w	r3, r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d18a      	bne.n	8004824 <enter_a_mobile_number+0xb8>

	return entered_number_status;
 800490e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004912:	4618      	mov	r0, r3
 8004914:	3730      	adds	r7, #48	; 0x30
 8004916:	46bd      	mov	sp, r7
 8004918:	bdb0      	pop	{r4, r5, r7, pc}
 800491a:	bf00      	nop
 800491c:	0800d6c4 	.word	0x0800d6c4
 8004920:	20000054 	.word	0x20000054
 8004924:	0800d884 	.word	0x0800d884

08004928 <claen_oled_lines>:
// ----------------------------------------------------------------------------
void claen_oled_lines(bool first, bool second, bool third, bool fourth, bool fifth)
{
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4623      	mov	r3, r4
 8004938:	71fb      	strb	r3, [r7, #7]
 800493a:	4603      	mov	r3, r0
 800493c:	71bb      	strb	r3, [r7, #6]
 800493e:	460b      	mov	r3, r1
 8004940:	717b      	strb	r3, [r7, #5]
 8004942:	4613      	mov	r3, r2
 8004944:	713b      	strb	r3, [r7, #4]
	char str[32] = {0};
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	2220      	movs	r2, #32
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f005 fbc8 	bl	800a0e4 <memset>
	if(first == true)
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01f      	beq.n	800499a <claen_oled_lines+0x72>
	{
		sprintf(str,"%s", "                          ");
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	4a58      	ldr	r2, [pc, #352]	; (8004ac0 <claen_oled_lines+0x198>)
 8004960:	461c      	mov	r4, r3
 8004962:	4615      	mov	r5, r2
 8004964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800496c:	c403      	stmia	r4!, {r0, r1}
 800496e:	8022      	strh	r2, [r4, #0]
 8004970:	3402      	adds	r4, #2
 8004972:	0c13      	lsrs	r3, r2, #16
 8004974:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 00);
 8004976:	2100      	movs	r1, #0
 8004978:	2000      	movs	r0, #0
 800497a:	f000 fda9 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 800497e:	4a51      	ldr	r2, [pc, #324]	; (8004ac4 <claen_oled_lines+0x19c>)
 8004980:	f107 0008 	add.w	r0, r7, #8
 8004984:	2301      	movs	r3, #1
 8004986:	ca06      	ldmia	r2, {r1, r2}
 8004988:	f000 fd7c 	bl	8005484 <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	2220      	movs	r2, #32
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f005 fba5 	bl	800a0e4 <memset>
	}
	if(second == true)
 800499a:	79bb      	ldrb	r3, [r7, #6]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01f      	beq.n	80049e0 <claen_oled_lines+0xb8>
	{
		sprintf(str,"%s", "                          ");
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	4a46      	ldr	r2, [pc, #280]	; (8004ac0 <claen_oled_lines+0x198>)
 80049a6:	461c      	mov	r4, r3
 80049a8:	4615      	mov	r5, r2
 80049aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049b2:	c403      	stmia	r4!, {r0, r1}
 80049b4:	8022      	strh	r2, [r4, #0]
 80049b6:	3402      	adds	r4, #2
 80049b8:	0c13      	lsrs	r3, r2, #16
 80049ba:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 16);
 80049bc:	2110      	movs	r1, #16
 80049be:	2000      	movs	r0, #0
 80049c0:	f000 fd86 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80049c4:	4a3f      	ldr	r2, [pc, #252]	; (8004ac4 <claen_oled_lines+0x19c>)
 80049c6:	f107 0008 	add.w	r0, r7, #8
 80049ca:	2301      	movs	r3, #1
 80049cc:	ca06      	ldmia	r2, {r1, r2}
 80049ce:	f000 fd59 	bl	8005484 <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	2220      	movs	r2, #32
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f005 fb82 	bl	800a0e4 <memset>
	}
	if(third == true)
 80049e0:	797b      	ldrb	r3, [r7, #5]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01f      	beq.n	8004a26 <claen_oled_lines+0xfe>
	{
		sprintf(str,"%s", "                          ");
 80049e6:	f107 0308 	add.w	r3, r7, #8
 80049ea:	4a35      	ldr	r2, [pc, #212]	; (8004ac0 <claen_oled_lines+0x198>)
 80049ec:	461c      	mov	r4, r3
 80049ee:	4615      	mov	r5, r2
 80049f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049f8:	c403      	stmia	r4!, {r0, r1}
 80049fa:	8022      	strh	r2, [r4, #0]
 80049fc:	3402      	adds	r4, #2
 80049fe:	0c13      	lsrs	r3, r2, #16
 8004a00:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 26);
 8004a02:	211a      	movs	r1, #26
 8004a04:	2000      	movs	r0, #0
 8004a06:	f000 fd63 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004a0a:	4a2e      	ldr	r2, [pc, #184]	; (8004ac4 <claen_oled_lines+0x19c>)
 8004a0c:	f107 0008 	add.w	r0, r7, #8
 8004a10:	2301      	movs	r3, #1
 8004a12:	ca06      	ldmia	r2, {r1, r2}
 8004a14:	f000 fd36 	bl	8005484 <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8004a18:	f107 0308 	add.w	r3, r7, #8
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f005 fb5f 	bl	800a0e4 <memset>
	}
	if(fourth == true)
 8004a26:	793b      	ldrb	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01f      	beq.n	8004a6c <claen_oled_lines+0x144>
	{
		sprintf(str,"%s", "                          ");
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <claen_oled_lines+0x198>)
 8004a32:	461c      	mov	r4, r3
 8004a34:	4615      	mov	r5, r2
 8004a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a3e:	c403      	stmia	r4!, {r0, r1}
 8004a40:	8022      	strh	r2, [r4, #0]
 8004a42:	3402      	adds	r4, #2
 8004a44:	0c13      	lsrs	r3, r2, #16
 8004a46:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 36);
 8004a48:	2124      	movs	r1, #36	; 0x24
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f000 fd40 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <claen_oled_lines+0x19c>)
 8004a52:	f107 0008 	add.w	r0, r7, #8
 8004a56:	2301      	movs	r3, #1
 8004a58:	ca06      	ldmia	r2, {r1, r2}
 8004a5a:	f000 fd13 	bl	8005484 <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	2220      	movs	r2, #32
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 fb3c 	bl	800a0e4 <memset>
	}
	if(fifth == true)
 8004a6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01f      	beq.n	8004ab4 <claen_oled_lines+0x18c>
	{
		sprintf(str,"%s", "                          ");
 8004a74:	f107 0308 	add.w	r3, r7, #8
 8004a78:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <claen_oled_lines+0x198>)
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	4615      	mov	r5, r2
 8004a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a86:	c403      	stmia	r4!, {r0, r1}
 8004a88:	8022      	strh	r2, [r4, #0]
 8004a8a:	3402      	adds	r4, #2
 8004a8c:	0c13      	lsrs	r3, r2, #16
 8004a8e:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(00, 46);
 8004a90:	212e      	movs	r1, #46	; 0x2e
 8004a92:	2000      	movs	r0, #0
 8004a94:	f000 fd1c 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <claen_oled_lines+0x19c>)
 8004a9a:	f107 0008 	add.w	r0, r7, #8
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	ca06      	ldmia	r2, {r1, r2}
 8004aa2:	f000 fcef 	bl	8005484 <ssd1306_WriteString>
		memset(str, 0 , sizeof(str));
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	2220      	movs	r2, #32
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f005 fb18 	bl	800a0e4 <memset>
	}
	ssd1306_UpdateScreen();
 8004ab4:	f000 fbd6 	bl	8005264 <ssd1306_UpdateScreen>
}
 8004ab8:	bf00      	nop
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac0:	0800d894 	.word	0x0800d894
 8004ac4:	20000054 	.word	0x20000054

08004ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <init_oled>:
void print_fingerprint_data(void);


// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8004ad8:	f000 fb36 	bl	8005148 <ssd1306_Init>
	HAL_Delay(500);
 8004adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ae0:	f001 f8c2 	bl	8005c68 <HAL_Delay>
	ssd1306_Fill(Black);
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f000 fb9b 	bl	8005220 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004aea:	f000 fbbb 	bl	8005264 <ssd1306_UpdateScreen>
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <OLED_prinr_all_data>:
		}
	}
}
// -----------------------------------------------------------------------------------
void OLED_prinr_all_data(int  select_print_data)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	switch (select_print_data)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d817      	bhi.n	8004b34 <OLED_prinr_all_data+0x40>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <OLED_prinr_all_data+0x18>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b23 	.word	0x08004b23
 8004b14:	08004b29 	.word	0x08004b29
 8004b18:	08004b2f 	.word	0x08004b2f
	{
		case 1:
			print_GPS_data();
 8004b1c:	f000 f8a8 	bl	8004c70 <print_GPS_data>
			break;
 8004b20:	e008      	b.n	8004b34 <OLED_prinr_all_data+0x40>
		case 2:
			print_GSM_data();
 8004b22:	f000 faed 	bl	8005100 <print_GSM_data>
			break;
 8004b26:	e005      	b.n	8004b34 <OLED_prinr_all_data+0x40>
		case 3:
			print_fingerprint_data();
 8004b28:	f000 faf0 	bl	800510c <print_fingerprint_data>
			break;
 8004b2c:	e002      	b.n	8004b34 <OLED_prinr_all_data+0x40>
		case 4:
			print_all_sensors_data();
 8004b2e:	f000 fa6f 	bl	8005010 <print_all_sensors_data>
			break;
 8004b32:	bf00      	nop
	}

//    // Print all data in OLED
    ssd1306_UpdateScreen();
 8004b34:	f000 fb96 	bl	8005264 <ssd1306_UpdateScreen>
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <print_main_menu>:
// -----------------------------------------------------------------------------------
void print_main_menu(void)
{
 8004b40:	b5b0      	push	{r4, r5, r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f000 fb6a 	bl	8005220 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004b4c:	f000 fb8a 	bl	8005264 <ssd1306_UpdateScreen>

	char str[50]={0};
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	2232      	movs	r2, #50	; 0x32
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f005 fac4 	bl	800a0e4 <memset>
	// Print message
	sprintf(str,"%s", " SELECT MODE...");
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	4a3e      	ldr	r2, [pc, #248]	; (8004c58 <print_main_menu+0x118>)
 8004b60:	461c      	mov	r4, r3
 8004b62:	4613      	mov	r3, r2
 8004b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(00, 00);
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f000 fcaf 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004b72:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <print_main_menu+0x11c>)
 8004b74:	1d38      	adds	r0, r7, #4
 8004b76:	2301      	movs	r3, #1
 8004b78:	ca06      	ldmia	r2, {r1, r2}
 8004b7a:	f000 fc83 	bl	8005484 <ssd1306_WriteString>

	sprintf(str,"%s", "1.GSM MODE");
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <print_main_menu+0x120>)
 8004b82:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b84:	c303      	stmia	r3!, {r0, r1}
 8004b86:	801a      	strh	r2, [r3, #0]
 8004b88:	3302      	adds	r3, #2
 8004b8a:	0c12      	lsrs	r2, r2, #16
 8004b8c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 16);
 8004b8e:	2110      	movs	r1, #16
 8004b90:	2000      	movs	r0, #0
 8004b92:	f000 fc9d 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004b96:	4a31      	ldr	r2, [pc, #196]	; (8004c5c <print_main_menu+0x11c>)
 8004b98:	1d38      	adds	r0, r7, #4
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	ca06      	ldmia	r2, {r1, r2}
 8004b9e:	f000 fc71 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	2232      	movs	r2, #50	; 0x32
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f005 fa9b 	bl	800a0e4 <memset>

	sprintf(str,"%s", "2.GPS MODE");
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	4a2c      	ldr	r2, [pc, #176]	; (8004c64 <print_main_menu+0x124>)
 8004bb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bb4:	c303      	stmia	r3!, {r0, r1}
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	3302      	adds	r3, #2
 8004bba:	0c12      	lsrs	r2, r2, #16
 8004bbc:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(00, 26);
 8004bbe:	211a      	movs	r1, #26
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f000 fc85 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004bc6:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <print_main_menu+0x11c>)
 8004bc8:	1d38      	adds	r0, r7, #4
 8004bca:	2301      	movs	r3, #1
 8004bcc:	ca06      	ldmia	r2, {r1, r2}
 8004bce:	f000 fc59 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	2232      	movs	r2, #50	; 0x32
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f005 fa83 	bl	800a0e4 <memset>

	sprintf(str,"%s", "3.FINGERPRINT MODE");
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <print_main_menu+0x128>)
 8004be2:	461c      	mov	r4, r3
 8004be4:	4615      	mov	r5, r2
 8004be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bea:	682b      	ldr	r3, [r5, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	8022      	strh	r2, [r4, #0]
 8004bf0:	3402      	adds	r4, #2
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 36);
 8004bf6:	2124      	movs	r1, #36	; 0x24
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f000 fc69 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <print_main_menu+0x11c>)
 8004c00:	1d38      	adds	r0, r7, #4
 8004c02:	2301      	movs	r3, #1
 8004c04:	ca06      	ldmia	r2, {r1, r2}
 8004c06:	f000 fc3d 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2232      	movs	r2, #50	; 0x32
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f005 fa67 	bl	800a0e4 <memset>

	sprintf(str,"%s", "4.SENSORS MODE");
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <print_main_menu+0x12c>)
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c20:	c407      	stmia	r4!, {r0, r1, r2}
 8004c22:	8023      	strh	r3, [r4, #0]
 8004c24:	3402      	adds	r4, #2
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(00, 46);
 8004c2a:	212e      	movs	r1, #46	; 0x2e
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f000 fc4f 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <print_main_menu+0x11c>)
 8004c34:	1d38      	adds	r0, r7, #4
 8004c36:	2301      	movs	r3, #1
 8004c38:	ca06      	ldmia	r2, {r1, r2}
 8004c3a:	f000 fc23 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	2232      	movs	r2, #50	; 0x32
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f005 fa4d 	bl	800a0e4 <memset>

	ssd1306_UpdateScreen();
 8004c4a:	f000 fb0b 	bl	8005264 <ssd1306_UpdateScreen>
}
 8004c4e:	bf00      	nop
 8004c50:	3738      	adds	r7, #56	; 0x38
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bdb0      	pop	{r4, r5, r7, pc}
 8004c56:	bf00      	nop
 8004c58:	0800d8bc 	.word	0x0800d8bc
 8004c5c:	20000054 	.word	0x20000054
 8004c60:	0800d8cc 	.word	0x0800d8cc
 8004c64:	0800d8d8 	.word	0x0800d8d8
 8004c68:	0800d8e4 	.word	0x0800d8e4
 8004c6c:	0800d8f8 	.word	0x0800d8f8

08004c70 <print_GPS_data>:
// -----------------------------------------------------------------------------------
void print_GPS_data(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b09a      	sub	sp, #104	; 0x68
 8004c74:	af00      	add	r7, sp, #0
	// 1. Print Lat and Lon ////////////////////////////////
	char str[50]={0};
 8004c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c7a:	2232      	movs	r2, #50	; 0x32
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f005 fa30 	bl	800a0e4 <memset>
	memset(str, 0 , sizeof(str));
 8004c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c88:	2232      	movs	r2, #50	; 0x32
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f005 fa29 	bl	800a0e4 <memset>

	// Print data from GPS module  ( Lat )
	char lat_str[]="Lat:";
 8004c92:	4ad3      	ldr	r2, [pc, #844]	; (8004fe0 <print_GPS_data+0x370>)
 8004c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c9c:	6018      	str	r0, [r3, #0]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	7019      	strb	r1, [r3, #0]
	memcpy(str, lat_str, sizeof(lat_str));
 8004ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cae:	6018      	str	r0, [r3, #0]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 16);
 8004cb4:	2110      	movs	r1, #16
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f000 fc0a 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004cbc:	4ac9      	ldr	r2, [pc, #804]	; (8004fe4 <print_GPS_data+0x374>)
 8004cbe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	ca06      	ldmia	r2, {r1, r2}
 8004cc6:	f000 fbdd 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cce:	2232      	movs	r2, #50	; 0x32
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f005 fa06 	bl	800a0e4 <memset>
	// Print data
	ssd1306_SetCursor(30, 16);
 8004cd8:	2110      	movs	r1, #16
 8004cda:	201e      	movs	r0, #30
 8004cdc:	f000 fbf8 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_latitude, Font_7x10, White);
 8004ce0:	4ac0      	ldr	r2, [pc, #768]	; (8004fe4 <print_GPS_data+0x374>)
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	ca06      	ldmia	r2, {r1, r2}
 8004ce6:	48c0      	ldr	r0, [pc, #768]	; (8004fe8 <print_GPS_data+0x378>)
 8004ce8:	f000 fbcc 	bl	8005484 <ssd1306_WriteString>

	// Print data from GPS module  ( Lon )
	char lon_str[]="Lon:";
 8004cec:	4abf      	ldr	r2, [pc, #764]	; (8004fec <print_GPS_data+0x37c>)
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cf6:	6018      	str	r0, [r3, #0]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	7019      	strb	r1, [r3, #0]
	memcpy(str, lon_str, sizeof(lon_str));
 8004cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d00:	f107 021c 	add.w	r2, r7, #28
 8004d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d08:	6018      	str	r0, [r3, #0]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(0, 26);
 8004d0e:	211a      	movs	r1, #26
 8004d10:	2000      	movs	r0, #0
 8004d12:	f000 fbdd 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004d16:	4ab3      	ldr	r2, [pc, #716]	; (8004fe4 <print_GPS_data+0x374>)
 8004d18:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	ca06      	ldmia	r2, {r1, r2}
 8004d20:	f000 fbb0 	bl	8005484 <ssd1306_WriteString>
	memset(str, 0 , sizeof(str));
 8004d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d28:	2232      	movs	r2, #50	; 0x32
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f005 f9d9 	bl	800a0e4 <memset>

	ssd1306_SetCursor(30, 26);
 8004d32:	211a      	movs	r1, #26
 8004d34:	201e      	movs	r0, #30
 8004d36:	f000 fbcb 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_lontitude, Font_7x10, White);
 8004d3a:	4aaa      	ldr	r2, [pc, #680]	; (8004fe4 <print_GPS_data+0x374>)
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	ca06      	ldmia	r2, {r1, r2}
 8004d40:	48ab      	ldr	r0, [pc, #684]	; (8004ff0 <print_GPS_data+0x380>)
 8004d42:	f000 fb9f 	bl	8005484 <ssd1306_WriteString>

	// 2. Print time  ////////////////////////////////
	if (GPGGA_data_is_ready == 1)
 8004d46:	4bab      	ldr	r3, [pc, #684]	; (8004ff4 <print_GPS_data+0x384>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	f040 80e3 	bne.w	8004f16 <print_GPS_data+0x2a6>
	{
		char hours[2]={0};
 8004d50:	2300      	movs	r3, #0
 8004d52:	813b      	strh	r3, [r7, #8]
		char minutes[2]={0};
 8004d54:	2300      	movs	r3, #0
 8004d56:	80bb      	strh	r3, [r7, #4]
		char semicolum = ':';
 8004d58:	233a      	movs	r3, #58	; 0x3a
 8004d5a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		// divide hours and minutes
		uint8_t i=0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		for(i=0; i<=3; i++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004d6a:	e020      	b.n	8004dae <print_GPS_data+0x13e>
		{
			if(i<=1)
 8004d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d80b      	bhi.n	8004d8c <print_GPS_data+0x11c>
			{
				hours[i] = gps_time[i];
 8004d74:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004d78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d7c:	499e      	ldr	r1, [pc, #632]	; (8004ff8 <print_GPS_data+0x388>)
 8004d7e:	5c8a      	ldrb	r2, [r1, r2]
 8004d80:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004d84:	440b      	add	r3, r1
 8004d86:	f803 2c60 	strb.w	r2, [r3, #-96]
 8004d8a:	e00b      	b.n	8004da4 <print_GPS_data+0x134>
			}
			else
			{
				minutes[i-2] = gps_time[i];
 8004d8c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004d90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d94:	3b02      	subs	r3, #2
 8004d96:	4998      	ldr	r1, [pc, #608]	; (8004ff8 <print_GPS_data+0x388>)
 8004d98:	5c8a      	ldrb	r2, [r1, r2]
 8004d9a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004d9e:	440b      	add	r3, r1
 8004da0:	f803 2c64 	strb.w	r2, [r3, #-100]
		for(i=0; i<=3; i++)
 8004da4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004da8:	3301      	adds	r3, #1
 8004daa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004dae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d9da      	bls.n	8004d6c <print_GPS_data+0xfc>
			}
		}
		// Add 3 hours
		int int_hours = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t dozens = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t units = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		dozens = hours[0];
 8004dc6:	7a3b      	ldrb	r3, [r7, #8]
 8004dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = hours[1];
 8004dcc:	7a7b      	ldrb	r3, [r7, #9]
 8004dce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		dozens = dozens - 48;
 8004dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dd6:	3b30      	subs	r3, #48	; 0x30
 8004dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = units - 48;
 8004ddc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004de0:	3b30      	subs	r3, #48	; 0x30
 8004de2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		int_hours = units +(dozens *10);
 8004de6:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8004dea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	440b      	add	r3, r1
 8004df8:	663b      	str	r3, [r7, #96]	; 0x60
		int_hours = int_hours+2;
 8004dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60

		dozens = (int_hours/10) + 48;
 8004e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e02:	4a7e      	ldr	r2, [pc, #504]	; (8004ffc <print_GPS_data+0x38c>)
 8004e04:	fb82 1203 	smull	r1, r2, r2, r3
 8004e08:	1092      	asrs	r2, r2, #2
 8004e0a:	17db      	asrs	r3, r3, #31
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	3330      	adds	r3, #48	; 0x30
 8004e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		units = (int_hours%10) + 48;
 8004e16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e18:	4b78      	ldr	r3, [pc, #480]	; (8004ffc <print_GPS_data+0x38c>)
 8004e1a:	fb83 1302 	smull	r1, r3, r3, r2
 8004e1e:	1099      	asrs	r1, r3, #2
 8004e20:	17d3      	asrs	r3, r2, #31
 8004e22:	1ac9      	subs	r1, r1, r3
 8004e24:	460b      	mov	r3, r1
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	1ad1      	subs	r1, r2, r3
 8004e2e:	b2cb      	uxtb	r3, r1
 8004e30:	3330      	adds	r3, #48	; 0x30
 8004e32:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		hours[0] = dozens;
 8004e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e3a:	723b      	strb	r3, [r7, #8]
		hours[1] = units;
 8004e3c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004e40:	727b      	strb	r3, [r7, #9]

		if(int_hours == 24)
 8004e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e44:	2b18      	cmp	r3, #24
 8004e46:	d103      	bne.n	8004e50 <print_GPS_data+0x1e0>
		{
			hours[0] = '0';
 8004e48:	2330      	movs	r3, #48	; 0x30
 8004e4a:	723b      	strb	r3, [r7, #8]
			hours[1] = '0';
 8004e4c:	2330      	movs	r3, #48	; 0x30
 8004e4e:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 25)
 8004e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e52:	2b19      	cmp	r3, #25
 8004e54:	d103      	bne.n	8004e5e <print_GPS_data+0x1ee>
		{
			hours[0] = '0';
 8004e56:	2330      	movs	r3, #48	; 0x30
 8004e58:	723b      	strb	r3, [r7, #8]
			hours[1] = '1';
 8004e5a:	2331      	movs	r3, #49	; 0x31
 8004e5c:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 26)
 8004e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e60:	2b1a      	cmp	r3, #26
 8004e62:	d103      	bne.n	8004e6c <print_GPS_data+0x1fc>
		{
			hours[0] = '0';
 8004e64:	2330      	movs	r3, #48	; 0x30
 8004e66:	723b      	strb	r3, [r7, #8]
			hours[1] = '2';
 8004e68:	2332      	movs	r3, #50	; 0x32
 8004e6a:	727b      	strb	r3, [r7, #9]
		}

		if((int_hours >=0) && (int_hours<=9))
 8004e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	db09      	blt.n	8004e86 <print_GPS_data+0x216>
 8004e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	dc06      	bgt.n	8004e86 <print_GPS_data+0x216>
		{
			hours[0] = '0';
 8004e78:	2330      	movs	r3, #48	; 0x30
 8004e7a:	723b      	strb	r3, [r7, #8]
			hours[1] = int_hours +48;
 8004e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3330      	adds	r3, #48	; 0x30
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	727b      	strb	r3, [r7, #9]
		}

		// connect  hours and minutes with colon
		//i=5;
		for(i=0; i<5; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e8c:	e034      	b.n	8004ef8 <print_GPS_data+0x288>
		{
			if(i<=1)
 8004e8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d80e      	bhi.n	8004eb4 <print_GPS_data+0x244>
			{
				str[i] = hours[i];
 8004e96:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004e9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e9e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 8004ea8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004eac:	440b      	add	r3, r1
 8004eae:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8004eb2:	e01c      	b.n	8004eee <print_GPS_data+0x27e>
			}
			else
			{
				if(i==2)
 8004eb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d109      	bne.n	8004ed0 <print_GPS_data+0x260>
				{
					str[i] = semicolum;
 8004ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ec0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8004eca:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8004ece:	e00e      	b.n	8004eee <print_GPS_data+0x27e>
				}
				else
				{
					str[i]=minutes[i-3];
 8004ed0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ed4:	1eda      	subs	r2, r3, #3
 8004ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004eda:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004ede:	440a      	add	r2, r1
 8004ee0:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8004ee4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004ee8:	440b      	add	r3, r1
 8004eea:	f803 2c3c 	strb.w	r2, [r3, #-60]
		for(i=0; i<5; i++)
 8004eee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004ef8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d9c6      	bls.n	8004e8e <print_GPS_data+0x21e>
				}
			}
		}

		ssd1306_SetCursor(0, 36);
 8004f00:	2124      	movs	r1, #36	; 0x24
 8004f02:	2000      	movs	r0, #0
 8004f04:	f000 fae4 	bl	80054d0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004f08:	4a36      	ldr	r2, [pc, #216]	; (8004fe4 <print_GPS_data+0x374>)
 8004f0a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004f0e:	2301      	movs	r3, #1
 8004f10:	ca06      	ldmia	r2, {r1, r2}
 8004f12:	f000 fab7 	bl	8005484 <ssd1306_WriteString>
	}

	// 3. Print number of satalits  ////////////////////////////////
	char numbers_of_satalits_str[]="N:  ";
 8004f16:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <print_GPS_data+0x390>)
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f20:	6018      	str	r0, [r3, #0]
 8004f22:	3304      	adds	r3, #4
 8004f24:	7019      	strb	r1, [r3, #0]
	memcpy(str, numbers_of_satalits_str, sizeof(numbers_of_satalits_str));
 8004f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f2a:	f107 0214 	add.w	r2, r7, #20
 8004f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f32:	6018      	str	r0, [r3, #0]
 8004f34:	3304      	adds	r3, #4
 8004f36:	7019      	strb	r1, [r3, #0]
	ssd1306_SetCursor(40, 36);
 8004f38:	2124      	movs	r1, #36	; 0x24
 8004f3a:	2028      	movs	r0, #40	; 0x28
 8004f3c:	f000 fac8 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <print_GPS_data+0x374>)
 8004f42:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004f46:	2301      	movs	r3, #1
 8004f48:	ca06      	ldmia	r2, {r1, r2}
 8004f4a:	f000 fa9b 	bl	8005484 <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 8004f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f52:	2232      	movs	r2, #50	; 0x32
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f005 f8c4 	bl	800a0e4 <memset>
	ssd1306_SetCursor(55, 36);
 8004f5c:	2124      	movs	r1, #36	; 0x24
 8004f5e:	2037      	movs	r0, #55	; 0x37
 8004f60:	f000 fab6 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_number_of_satellites, Font_7x10, White);
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <print_GPS_data+0x374>)
 8004f66:	2301      	movs	r3, #1
 8004f68:	ca06      	ldmia	r2, {r1, r2}
 8004f6a:	4826      	ldr	r0, [pc, #152]	; (8005004 <print_GPS_data+0x394>)
 8004f6c:	f000 fa8a 	bl	8005484 <ssd1306_WriteString>

	// 4. Print number of satalits  ////////////////////////////////
	//gps_speed
	char speed_str[]="S:    ";
 8004f70:	4a25      	ldr	r2, [pc, #148]	; (8005008 <print_GPS_data+0x398>)
 8004f72:	f107 030c 	add.w	r3, r7, #12
 8004f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f7a:	6018      	str	r0, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	8019      	strh	r1, [r3, #0]
 8004f80:	3302      	adds	r3, #2
 8004f82:	0c0a      	lsrs	r2, r1, #16
 8004f84:	701a      	strb	r2, [r3, #0]
	memcpy(str, speed_str, sizeof(speed_str));
 8004f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f8a:	f107 020c 	add.w	r2, r7, #12
 8004f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f92:	6018      	str	r0, [r3, #0]
 8004f94:	3304      	adds	r3, #4
 8004f96:	8019      	strh	r1, [r3, #0]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	0c0a      	lsrs	r2, r1, #16
 8004f9c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(75, 36);
 8004f9e:	2124      	movs	r1, #36	; 0x24
 8004fa0:	204b      	movs	r0, #75	; 0x4b
 8004fa2:	f000 fa95 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8004fa6:	4a0f      	ldr	r2, [pc, #60]	; (8004fe4 <print_GPS_data+0x374>)
 8004fa8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004fac:	2301      	movs	r3, #1
 8004fae:	ca06      	ldmia	r2, {r1, r2}
 8004fb0:	f000 fa68 	bl	8005484 <ssd1306_WriteString>

	memset(str, 0 , sizeof(str));
 8004fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fb8:	2232      	movs	r2, #50	; 0x32
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f005 f891 	bl	800a0e4 <memset>
	ssd1306_SetCursor(90, 36);
 8004fc2:	2124      	movs	r1, #36	; 0x24
 8004fc4:	205a      	movs	r0, #90	; 0x5a
 8004fc6:	f000 fa83 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_speed, Font_7x10, White);
 8004fca:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <print_GPS_data+0x374>)
 8004fcc:	2301      	movs	r3, #1
 8004fce:	ca06      	ldmia	r2, {r1, r2}
 8004fd0:	480e      	ldr	r0, [pc, #56]	; (800500c <print_GPS_data+0x39c>)
 8004fd2:	f000 fa57 	bl	8005484 <ssd1306_WriteString>
}
 8004fd6:	bf00      	nop
 8004fd8:	3768      	adds	r7, #104	; 0x68
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	0800d908 	.word	0x0800d908
 8004fe4:	20000054 	.word	0x20000054
 8004fe8:	200006e4 	.word	0x200006e4
 8004fec:	0800d910 	.word	0x0800d910
 8004ff0:	20000740 	.word	0x20000740
 8004ff4:	2000025c 	.word	0x2000025c
 8004ff8:	20000710 	.word	0x20000710
 8004ffc:	66666667 	.word	0x66666667
 8005000:	0800d918 	.word	0x0800d918
 8005004:	20000700 	.word	0x20000700
 8005008:	0800d920 	.word	0x0800d920
 800500c:	200006dc 	.word	0x200006dc

08005010 <print_all_sensors_data>:
// -----------------------------------------------------------------------------------
void print_all_sensors_data(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af00      	add	r7, sp, #0
	char str_1[40]={0};
 8005016:	463b      	mov	r3, r7
 8005018:	2228      	movs	r2, #40	; 0x28
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f005 f861 	bl	800a0e4 <memset>

	// 1. Print data from si7021 sensor
	strcpy(str_1, "1.si7021 ");
 8005022:	463b      	mov	r3, r7
 8005024:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <print_all_sensors_data+0xd0>)
 8005026:	ca07      	ldmia	r2, {r0, r1, r2}
 8005028:	c303      	stmia	r3!, {r0, r1}
 800502a:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_si7021);
 800502c:	463b      	mov	r3, r7
 800502e:	492d      	ldr	r1, [pc, #180]	; (80050e4 <print_all_sensors_data+0xd4>)
 8005030:	4618      	mov	r0, r3
 8005032:	f005 f87f 	bl	800a134 <strcat>
	strcat(str_1, humidity_si7021);
 8005036:	463b      	mov	r3, r7
 8005038:	492b      	ldr	r1, [pc, #172]	; (80050e8 <print_all_sensors_data+0xd8>)
 800503a:	4618      	mov	r0, r3
 800503c:	f005 f87a 	bl	800a134 <strcat>

	ssd1306_SetCursor(0, 16);
 8005040:	2110      	movs	r1, #16
 8005042:	2000      	movs	r0, #0
 8005044:	f000 fa44 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 8005048:	4a28      	ldr	r2, [pc, #160]	; (80050ec <print_all_sensors_data+0xdc>)
 800504a:	4638      	mov	r0, r7
 800504c:	2301      	movs	r3, #1
 800504e:	ca06      	ldmia	r2, {r1, r2}
 8005050:	f000 fa18 	bl	8005484 <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 8005054:	463b      	mov	r3, r7
 8005056:	2228      	movs	r2, #40	; 0x28
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f005 f842 	bl	800a0e4 <memset>

	// 2. Print data from AM2302
	strcpy(str_1, "2.AM2302 ");
 8005060:	463b      	mov	r3, r7
 8005062:	4a23      	ldr	r2, [pc, #140]	; (80050f0 <print_all_sensors_data+0xe0>)
 8005064:	ca07      	ldmia	r2, {r0, r1, r2}
 8005066:	c303      	stmia	r3!, {r0, r1}
 8005068:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_am3202);
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <print_all_sensors_data+0xe4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	463b      	mov	r3, r7
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f005 f85d 	bl	800a134 <strcat>
	strcat(str_1, humidity_am3202);
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <print_all_sensors_data+0xe8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	463b      	mov	r3, r7
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f005 f855 	bl	800a134 <strcat>

	ssd1306_SetCursor(0, 26);
 800508a:	211a      	movs	r1, #26
 800508c:	2000      	movs	r0, #0
 800508e:	f000 fa1f 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <print_all_sensors_data+0xdc>)
 8005094:	4638      	mov	r0, r7
 8005096:	2301      	movs	r3, #1
 8005098:	ca06      	ldmia	r2, {r1, r2}
 800509a:	f000 f9f3 	bl	8005484 <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 800509e:	463b      	mov	r3, r7
 80050a0:	2228      	movs	r2, #40	; 0x28
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f005 f81d 	bl	800a0e4 <memset>

	// 3. Print data from 9066
	strcpy(str_1, "2.9066 ");
 80050aa:	463b      	mov	r3, r7
 80050ac:	4a13      	ldr	r2, [pc, #76]	; (80050fc <print_all_sensors_data+0xec>)
 80050ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050b2:	e883 0003 	stmia.w	r3, {r0, r1}

	ssd1306_SetCursor(0, 36);
 80050b6:	2124      	movs	r1, #36	; 0x24
 80050b8:	2000      	movs	r0, #0
 80050ba:	f000 fa09 	bl	80054d0 <ssd1306_SetCursor>
	ssd1306_WriteString(str_1, Font_7x10, White);
 80050be:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <print_all_sensors_data+0xdc>)
 80050c0:	4638      	mov	r0, r7
 80050c2:	2301      	movs	r3, #1
 80050c4:	ca06      	ldmia	r2, {r1, r2}
 80050c6:	f000 f9dd 	bl	8005484 <ssd1306_WriteString>

	memset(str_1, 0 , sizeof(str_1));
 80050ca:	463b      	mov	r3, r7
 80050cc:	2228      	movs	r2, #40	; 0x28
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f005 f807 	bl	800a0e4 <memset>
}
 80050d6:	bf00      	nop
 80050d8:	3728      	adds	r7, #40	; 0x28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	0800d928 	.word	0x0800d928
 80050e4:	200006cc 	.word	0x200006cc
 80050e8:	200006d4 	.word	0x200006d4
 80050ec:	20000054 	.word	0x20000054
 80050f0:	0800d934 	.word	0x0800d934
 80050f4:	200006f0 	.word	0x200006f0
 80050f8:	2000074c 	.word	0x2000074c
 80050fc:	0800d940 	.word	0x0800d940

08005100 <print_GSM_data>:
// -----------------------------------------------------------------------------------
void print_GSM_data(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0

}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <print_fingerprint_data>:
// -----------------------------------------------------------------------------------
void print_fingerprint_data(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0

}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af04      	add	r7, sp, #16
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005122:	230a      	movs	r3, #10
 8005124:	9302      	str	r3, [sp, #8]
 8005126:	2301      	movs	r3, #1
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2301      	movs	r3, #1
 8005130:	2200      	movs	r2, #0
 8005132:	2178      	movs	r1, #120	; 0x78
 8005134:	4803      	ldr	r0, [pc, #12]	; (8005144 <ssd1306_WriteCommand+0x2c>)
 8005136:	f001 ff45 	bl	8006fc4 <HAL_I2C_Mem_Write>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000082c 	.word	0x2000082c

08005148 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 800514c:	2064      	movs	r0, #100	; 0x64
 800514e:	f000 fd8b 	bl	8005c68 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8005152:	20ae      	movs	r0, #174	; 0xae
 8005154:	f7ff ffe0 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8005158:	2020      	movs	r0, #32
 800515a:	f7ff ffdd 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800515e:	2010      	movs	r0, #16
 8005160:	f7ff ffda 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005164:	20b0      	movs	r0, #176	; 0xb0
 8005166:	f7ff ffd7 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800516a:	20c8      	movs	r0, #200	; 0xc8
 800516c:	f7ff ffd4 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8005170:	2000      	movs	r0, #0
 8005172:	f7ff ffd1 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8005176:	2010      	movs	r0, #16
 8005178:	f7ff ffce 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800517c:	2040      	movs	r0, #64	; 0x40
 800517e:	f7ff ffcb 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8005182:	2081      	movs	r0, #129	; 0x81
 8005184:	f7ff ffc8 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8005188:	20ff      	movs	r0, #255	; 0xff
 800518a:	f7ff ffc5 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800518e:	20a1      	movs	r0, #161	; 0xa1
 8005190:	f7ff ffc2 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8005194:	20a6      	movs	r0, #166	; 0xa6
 8005196:	f7ff ffbf 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800519a:	20a8      	movs	r0, #168	; 0xa8
 800519c:	f7ff ffbc 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80051a0:	203f      	movs	r0, #63	; 0x3f
 80051a2:	f7ff ffb9 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80051a6:	20a4      	movs	r0, #164	; 0xa4
 80051a8:	f7ff ffb6 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80051ac:	20d3      	movs	r0, #211	; 0xd3
 80051ae:	f7ff ffb3 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7ff ffb0 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80051b8:	20d5      	movs	r0, #213	; 0xd5
 80051ba:	f7ff ffad 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80051be:	20f0      	movs	r0, #240	; 0xf0
 80051c0:	f7ff ffaa 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80051c4:	20d9      	movs	r0, #217	; 0xd9
 80051c6:	f7ff ffa7 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80051ca:	2022      	movs	r0, #34	; 0x22
 80051cc:	f7ff ffa4 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80051d0:	20da      	movs	r0, #218	; 0xda
 80051d2:	f7ff ffa1 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80051d6:	2012      	movs	r0, #18
 80051d8:	f7ff ff9e 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80051dc:	20db      	movs	r0, #219	; 0xdb
 80051de:	f7ff ff9b 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80051e2:	2020      	movs	r0, #32
 80051e4:	f7ff ff98 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80051e8:	208d      	movs	r0, #141	; 0x8d
 80051ea:	f7ff ff95 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80051ee:	2014      	movs	r0, #20
 80051f0:	f7ff ff92 	bl	8005118 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80051f4:	20af      	movs	r0, #175	; 0xaf
 80051f6:	f7ff ff8f 	bl	8005118 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 80051fa:	2000      	movs	r0, #0
 80051fc:	f000 f810 	bl	8005220 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8005200:	f000 f830 	bl	8005264 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <ssd1306_Init+0xd4>)
 8005206:	2200      	movs	r2, #0
 8005208:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800520a:	4b04      	ldr	r3, [pc, #16]	; (800521c <ssd1306_Init+0xd4>)
 800520c:	2200      	movs	r2, #0
 800520e:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <ssd1306_Init+0xd4>)
 8005212:	2201      	movs	r2, #1
 8005214:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8005216:	2301      	movs	r3, #1
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	200006b0 	.word	0x200006b0

08005220 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e00d      	b.n	800524c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <ssd1306_Fill+0x1a>
 8005236:	2100      	movs	r1, #0
 8005238:	e000      	b.n	800523c <ssd1306_Fill+0x1c>
 800523a:	21ff      	movs	r1, #255	; 0xff
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <ssd1306_Fill+0x40>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	460a      	mov	r2, r1
 8005244:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005252:	d3ed      	bcc.n	8005230 <ssd1306_Fill+0x10>
	}
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200002b0 	.word	0x200002b0

08005264 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 800526a:	2300      	movs	r3, #0
 800526c:	71fb      	strb	r3, [r7, #7]
 800526e:	e01d      	b.n	80052ac <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	3b50      	subs	r3, #80	; 0x50
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff4e 	bl	8005118 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 800527c:	2000      	movs	r0, #0
 800527e:	f7ff ff4b 	bl	8005118 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8005282:	2010      	movs	r0, #16
 8005284:	f7ff ff48 	bl	8005118 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4a0b      	ldr	r2, [pc, #44]	; (80052bc <ssd1306_UpdateScreen+0x58>)
 800528e:	4413      	add	r3, r2
 8005290:	2264      	movs	r2, #100	; 0x64
 8005292:	9202      	str	r2, [sp, #8]
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	9201      	str	r2, [sp, #4]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	2301      	movs	r3, #1
 800529c:	2240      	movs	r2, #64	; 0x40
 800529e:	2178      	movs	r1, #120	; 0x78
 80052a0:	4807      	ldr	r0, [pc, #28]	; (80052c0 <ssd1306_UpdateScreen+0x5c>)
 80052a2:	f001 fe8f 	bl	8006fc4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	3301      	adds	r3, #1
 80052aa:	71fb      	strb	r3, [r7, #7]
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	2b07      	cmp	r3, #7
 80052b0:	d9de      	bls.n	8005270 <ssd1306_UpdateScreen+0xc>
	}
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200002b0 	.word	0x200002b0
 80052c0:	2000082c 	.word	0x2000082c

080052c4 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
 80052ce:	460b      	mov	r3, r1
 80052d0:	71bb      	strb	r3, [r7, #6]
 80052d2:	4613      	mov	r3, r2
 80052d4:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	db48      	blt.n	8005370 <ssd1306_DrawPixel+0xac>
 80052de:	79bb      	ldrb	r3, [r7, #6]
 80052e0:	2b3f      	cmp	r3, #63	; 0x3f
 80052e2:	d845      	bhi.n	8005370 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 80052e4:	4b25      	ldr	r3, [pc, #148]	; (800537c <ssd1306_DrawPixel+0xb8>)
 80052e6:	791b      	ldrb	r3, [r3, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 80052ec:	797b      	ldrb	r3, [r7, #5]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 80052fa:	797b      	ldrb	r3, [r7, #5]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d11a      	bne.n	8005336 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	79bb      	ldrb	r3, [r7, #6]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	b2d8      	uxtb	r0, r3
 8005308:	4603      	mov	r3, r0
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	4413      	add	r3, r2
 800530e:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <ssd1306_DrawPixel+0xbc>)
 8005310:	5cd3      	ldrb	r3, [r2, r3]
 8005312:	b25a      	sxtb	r2, r3
 8005314:	79bb      	ldrb	r3, [r7, #6]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2101      	movs	r1, #1
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	b25b      	sxtb	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b259      	sxtb	r1, r3
 8005326:	79fa      	ldrb	r2, [r7, #7]
 8005328:	4603      	mov	r3, r0
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	4413      	add	r3, r2
 800532e:	b2c9      	uxtb	r1, r1
 8005330:	4a13      	ldr	r2, [pc, #76]	; (8005380 <ssd1306_DrawPixel+0xbc>)
 8005332:	54d1      	strb	r1, [r2, r3]
 8005334:	e01d      	b.n	8005372 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005336:	79fa      	ldrb	r2, [r7, #7]
 8005338:	79bb      	ldrb	r3, [r7, #6]
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	b2d8      	uxtb	r0, r3
 800533e:	4603      	mov	r3, r0
 8005340:	01db      	lsls	r3, r3, #7
 8005342:	4413      	add	r3, r2
 8005344:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <ssd1306_DrawPixel+0xbc>)
 8005346:	5cd3      	ldrb	r3, [r2, r3]
 8005348:	b25a      	sxtb	r2, r3
 800534a:	79bb      	ldrb	r3, [r7, #6]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	b25b      	sxtb	r3, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	b25b      	sxtb	r3, r3
 800535c:	4013      	ands	r3, r2
 800535e:	b259      	sxtb	r1, r3
 8005360:	79fa      	ldrb	r2, [r7, #7]
 8005362:	4603      	mov	r3, r0
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	4413      	add	r3, r2
 8005368:	b2c9      	uxtb	r1, r1
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <ssd1306_DrawPixel+0xbc>)
 800536c:	54d1      	strb	r1, [r2, r3]
 800536e:	e000      	b.n	8005372 <ssd1306_DrawPixel+0xae>
		return;
 8005370:	bf00      	nop
	}
}
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	200006b0 	.word	0x200006b0
 8005380:	200002b0 	.word	0x200002b0

08005384 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	4604      	mov	r4, r0
 800538c:	1d38      	adds	r0, r7, #4
 800538e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005392:	461a      	mov	r2, r3
 8005394:	4623      	mov	r3, r4
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	4613      	mov	r3, r2
 800539a:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800539c:	4b38      	ldr	r3, [pc, #224]	; (8005480 <ssd1306_WriteChar+0xfc>)
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	793b      	ldrb	r3, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	2b7f      	cmp	r3, #127	; 0x7f
 80053a8:	dc06      	bgt.n	80053b8 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80053aa:	4b35      	ldr	r3, [pc, #212]	; (8005480 <ssd1306_WriteChar+0xfc>)
 80053ac:	885b      	ldrh	r3, [r3, #2]
 80053ae:	461a      	mov	r2, r3
 80053b0:	797b      	ldrb	r3, [r7, #5]
 80053b2:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80053b4:	2b3f      	cmp	r3, #63	; 0x3f
 80053b6:	dd01      	ble.n	80053bc <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e05d      	b.n	8005478 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e04c      	b.n	800545c <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	3b20      	subs	r3, #32
 80053c8:	7979      	ldrb	r1, [r7, #5]
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	440b      	add	r3, r1
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	e034      	b.n	800544c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <ssd1306_WriteChar+0xfc>)
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	b2d8      	uxtb	r0, r3
 8005400:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <ssd1306_WriteChar+0xfc>)
 8005402:	885b      	ldrh	r3, [r3, #2]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4413      	add	r3, r2
 800540c:	b2db      	uxtb	r3, r3
 800540e:	7bba      	ldrb	r2, [r7, #14]
 8005410:	4619      	mov	r1, r3
 8005412:	f7ff ff57 	bl	80052c4 <ssd1306_DrawPixel>
 8005416:	e016      	b.n	8005446 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <ssd1306_WriteChar+0xfc>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	4413      	add	r3, r2
 8005424:	b2d8      	uxtb	r0, r3
 8005426:	4b16      	ldr	r3, [pc, #88]	; (8005480 <ssd1306_WriteChar+0xfc>)
 8005428:	885b      	ldrh	r3, [r3, #2]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4413      	add	r3, r2
 8005432:	b2d9      	uxtb	r1, r3
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	f7ff ff3f 	bl	80052c4 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	3301      	adds	r3, #1
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	793b      	ldrb	r3, [r7, #4]
 800544e:	461a      	mov	r2, r3
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	4293      	cmp	r3, r2
 8005454:	d3c5      	bcc.n	80053e2 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	797b      	ldrb	r3, [r7, #5]
 800545e:	461a      	mov	r2, r3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4293      	cmp	r3, r2
 8005464:	d3ad      	bcc.n	80053c2 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <ssd1306_WriteChar+0xfc>)
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	793b      	ldrb	r3, [r7, #4]
 800546c:	b29b      	uxth	r3, r3
 800546e:	4413      	add	r3, r2
 8005470:	b29a      	uxth	r2, r3
 8005472:	4b03      	ldr	r3, [pc, #12]	; (8005480 <ssd1306_WriteChar+0xfc>)
 8005474:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3724      	adds	r7, #36	; 0x24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}
 8005480:	200006b0 	.word	0x200006b0

08005484 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	1d38      	adds	r0, r7, #4
 800548e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005492:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8005494:	e012      	b.n	80054bc <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	7818      	ldrb	r0, [r3, #0]
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	1d3a      	adds	r2, r7, #4
 800549e:	ca06      	ldmia	r2, {r1, r2}
 80054a0:	f7ff ff70 	bl	8005384 <ssd1306_WriteChar>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d002      	beq.n	80054b6 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	e008      	b.n	80054c8 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
	while (*str) 
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e8      	bne.n	8005496 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	781b      	ldrb	r3, [r3, #0]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	460a      	mov	r2, r1
 80054da:	71fb      	strb	r3, [r7, #7]
 80054dc:	4613      	mov	r3, r2
 80054de:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <ssd1306_SetCursor+0x2c>)
 80054e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80054e8:	79bb      	ldrb	r3, [r7, #6]
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <ssd1306_SetCursor+0x2c>)
 80054ee:	805a      	strh	r2, [r3, #2]
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	200006b0 	.word	0x200006b0

08005500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <HAL_MspInit+0x5c>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	4a14      	ldr	r2, [pc, #80]	; (800555c <HAL_MspInit+0x5c>)
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	6193      	str	r3, [r2, #24]
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <HAL_MspInit+0x5c>)
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_MspInit+0x5c>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4a0e      	ldr	r2, [pc, #56]	; (800555c <HAL_MspInit+0x5c>)
 8005524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005528:	61d3      	str	r3, [r2, #28]
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_MspInit+0x5c>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_MspInit+0x60>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <HAL_MspInit+0x60>)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	40021000 	.word	0x40021000
 8005560:	40010000 	.word	0x40010000

08005564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556c:	f107 0310 	add.w	r3, r7, #16
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	609a      	str	r2, [r3, #8]
 8005578:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <HAL_I2C_MspInit+0x70>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d123      	bne.n	80055cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005584:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <HAL_I2C_MspInit+0x74>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <HAL_I2C_MspInit+0x74>)
 800558a:	f043 0308 	orr.w	r3, r3, #8
 800558e:	6193      	str	r3, [r2, #24]
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <HAL_I2C_MspInit+0x74>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800559c:	23c0      	movs	r3, #192	; 0xc0
 800559e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055a0:	2312      	movs	r3, #18
 80055a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055a4:	2303      	movs	r3, #3
 80055a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	4619      	mov	r1, r3
 80055ae:	480b      	ldr	r0, [pc, #44]	; (80055dc <HAL_I2C_MspInit+0x78>)
 80055b0:	f000 feee 	bl	8006390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_I2C_MspInit+0x74>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <HAL_I2C_MspInit+0x74>)
 80055ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055be:	61d3      	str	r3, [r2, #28]
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_I2C_MspInit+0x74>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055cc:	bf00      	nop
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40005400 	.word	0x40005400
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40010c00 	.word	0x40010c00

080055e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e8:	f107 0310 	add.w	r3, r7, #16
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <HAL_SPI_MspInit+0x8c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d131      	bne.n	8005664 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <HAL_SPI_MspInit+0x90>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_SPI_MspInit+0x90>)
 8005606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800560a:	61d3      	str	r3, [r2, #28]
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <HAL_SPI_MspInit+0x90>)
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <HAL_SPI_MspInit+0x90>)
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <HAL_SPI_MspInit+0x90>)
 800561e:	f043 0308 	orr.w	r3, r3, #8
 8005622:	6193      	str	r3, [r2, #24]
 8005624:	4b12      	ldr	r3, [pc, #72]	; (8005670 <HAL_SPI_MspInit+0x90>)
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005630:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005636:	2302      	movs	r3, #2
 8005638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800563a:	2303      	movs	r3, #3
 800563c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563e:	f107 0310 	add.w	r3, r7, #16
 8005642:	4619      	mov	r1, r3
 8005644:	480b      	ldr	r0, [pc, #44]	; (8005674 <HAL_SPI_MspInit+0x94>)
 8005646:	f000 fea3 	bl	8006390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800564a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800564e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005658:	f107 0310 	add.w	r3, r7, #16
 800565c:	4619      	mov	r1, r3
 800565e:	4805      	ldr	r0, [pc, #20]	; (8005674 <HAL_SPI_MspInit+0x94>)
 8005660:	f000 fe96 	bl	8006390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005664:	bf00      	nop
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40003800 	.word	0x40003800
 8005670:	40021000 	.word	0x40021000
 8005674:	40010c00 	.word	0x40010c00

08005678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <HAL_TIM_Base_MspInit+0x68>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d10c      	bne.n	80056a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_TIM_Base_MspInit+0x6c>)
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <HAL_TIM_Base_MspInit+0x6c>)
 8005690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005694:	6193      	str	r3, [r2, #24]
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_TIM_Base_MspInit+0x6c>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80056a2:	e018      	b.n	80056d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d113      	bne.n	80056d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <HAL_TIM_Base_MspInit+0x6c>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <HAL_TIM_Base_MspInit+0x6c>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	61d3      	str	r3, [r2, #28]
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_TIM_Base_MspInit+0x6c>)
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80056c6:	2200      	movs	r2, #0
 80056c8:	2100      	movs	r1, #0
 80056ca:	201c      	movs	r0, #28
 80056cc:	f000 fbc5 	bl	8005e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056d0:	201c      	movs	r0, #28
 80056d2:	f000 fbde 	bl	8005e92 <HAL_NVIC_EnableIRQ>
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40021000 	.word	0x40021000

080056e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f0:	f107 0310 	add.w	r3, r7, #16
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <HAL_TIM_MspPostInit+0x5c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d118      	bne.n	800573a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <HAL_TIM_MspPostInit+0x60>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <HAL_TIM_MspPostInit+0x60>)
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	6193      	str	r3, [r2, #24]
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <HAL_TIM_MspPostInit+0x60>)
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005726:	2302      	movs	r3, #2
 8005728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572a:	2302      	movs	r3, #2
 800572c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572e:	f107 0310 	add.w	r3, r7, #16
 8005732:	4619      	mov	r1, r3
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <HAL_TIM_MspPostInit+0x64>)
 8005736:	f000 fe2b 	bl	8006390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800573a:	bf00      	nop
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40021000 	.word	0x40021000
 800574c:	40010800 	.word	0x40010800

08005750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	; 0x30
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	f107 0320 	add.w	r3, r7, #32
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	609a      	str	r2, [r3, #8]
 8005764:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a73      	ldr	r2, [pc, #460]	; (8005938 <HAL_UART_MspInit+0x1e8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d13a      	bne.n	80057e6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005770:	4b72      	ldr	r3, [pc, #456]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4a71      	ldr	r2, [pc, #452]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800577a:	6193      	str	r3, [r2, #24]
 800577c:	4b6f      	ldr	r3, [pc, #444]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005788:	4b6c      	ldr	r3, [pc, #432]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4a6b      	ldr	r2, [pc, #428]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800578e:	f043 0304 	orr.w	r3, r3, #4
 8005792:	6193      	str	r3, [r2, #24]
 8005794:	4b69      	ldr	r3, [pc, #420]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a6:	2302      	movs	r3, #2
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057aa:	2303      	movs	r3, #3
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ae:	f107 0320 	add.w	r3, r7, #32
 80057b2:	4619      	mov	r1, r3
 80057b4:	4862      	ldr	r0, [pc, #392]	; (8005940 <HAL_UART_MspInit+0x1f0>)
 80057b6:	f000 fdeb 	bl	8006390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80057ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057c0:	2300      	movs	r3, #0
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c8:	f107 0320 	add.w	r3, r7, #32
 80057cc:	4619      	mov	r1, r3
 80057ce:	485c      	ldr	r0, [pc, #368]	; (8005940 <HAL_UART_MspInit+0x1f0>)
 80057d0:	f000 fdde 	bl	8006390 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80057d4:	2200      	movs	r2, #0
 80057d6:	2100      	movs	r1, #0
 80057d8:	2025      	movs	r0, #37	; 0x25
 80057da:	f000 fb3e 	bl	8005e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057de:	2025      	movs	r0, #37	; 0x25
 80057e0:	f000 fb57 	bl	8005e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80057e4:	e0a3      	b.n	800592e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a56      	ldr	r2, [pc, #344]	; (8005944 <HAL_UART_MspInit+0x1f4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d138      	bne.n	8005862 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057f0:	4b52      	ldr	r3, [pc, #328]	; (800593c <HAL_UART_MspInit+0x1ec>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_UART_MspInit+0x1ec>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fa:	61d3      	str	r3, [r2, #28]
 80057fc:	4b4f      	ldr	r3, [pc, #316]	; (800593c <HAL_UART_MspInit+0x1ec>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005808:	4b4c      	ldr	r3, [pc, #304]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	4a4b      	ldr	r2, [pc, #300]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800580e:	f043 0304 	orr.w	r3, r3, #4
 8005812:	6193      	str	r3, [r2, #24]
 8005814:	4b49      	ldr	r3, [pc, #292]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005820:	2304      	movs	r3, #4
 8005822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005824:	2302      	movs	r3, #2
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005828:	2303      	movs	r3, #3
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800582c:	f107 0320 	add.w	r3, r7, #32
 8005830:	4619      	mov	r1, r3
 8005832:	4843      	ldr	r0, [pc, #268]	; (8005940 <HAL_UART_MspInit+0x1f0>)
 8005834:	f000 fdac 	bl	8006390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005838:	2308      	movs	r3, #8
 800583a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800583c:	2300      	movs	r3, #0
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005840:	2300      	movs	r3, #0
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005844:	f107 0320 	add.w	r3, r7, #32
 8005848:	4619      	mov	r1, r3
 800584a:	483d      	ldr	r0, [pc, #244]	; (8005940 <HAL_UART_MspInit+0x1f0>)
 800584c:	f000 fda0 	bl	8006390 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	2026      	movs	r0, #38	; 0x26
 8005856:	f000 fb00 	bl	8005e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800585a:	2026      	movs	r0, #38	; 0x26
 800585c:	f000 fb19 	bl	8005e92 <HAL_NVIC_EnableIRQ>
}
 8005860:	e065      	b.n	800592e <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a38      	ldr	r2, [pc, #224]	; (8005948 <HAL_UART_MspInit+0x1f8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d160      	bne.n	800592e <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 800586c:	4b33      	ldr	r3, [pc, #204]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4a32      	ldr	r2, [pc, #200]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005876:	61d3      	str	r3, [r2, #28]
 8005878:	4b30      	ldr	r3, [pc, #192]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005884:	4b2d      	ldr	r3, [pc, #180]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	4a2c      	ldr	r2, [pc, #176]	; (800593c <HAL_UART_MspInit+0x1ec>)
 800588a:	f043 0308 	orr.w	r3, r3, #8
 800588e:	6193      	str	r3, [r2, #24]
 8005890:	4b2a      	ldr	r3, [pc, #168]	; (800593c <HAL_UART_MspInit+0x1ec>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800589c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a2:	2302      	movs	r3, #2
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058a6:	2303      	movs	r3, #3
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058aa:	f107 0320 	add.w	r3, r7, #32
 80058ae:	4619      	mov	r1, r3
 80058b0:	4826      	ldr	r0, [pc, #152]	; (800594c <HAL_UART_MspInit+0x1fc>)
 80058b2:	f000 fd6d 	bl	8006390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c4:	f107 0320 	add.w	r3, r7, #32
 80058c8:	4619      	mov	r1, r3
 80058ca:	4820      	ldr	r0, [pc, #128]	; (800594c <HAL_UART_MspInit+0x1fc>)
 80058cc:	f000 fd60 	bl	8006390 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80058d0:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058d2:	4a20      	ldr	r2, [pc, #128]	; (8005954 <HAL_UART_MspInit+0x204>)
 80058d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058d8:	2200      	movs	r2, #0
 80058da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058dc:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058de:	2200      	movs	r2, #0
 80058e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058e8:	4b19      	ldr	r3, [pc, #100]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058ee:	4b18      	ldr	r3, [pc, #96]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058f6:	2220      	movs	r2, #32
 80058f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80058fa:	4b15      	ldr	r3, [pc, #84]	; (8005950 <HAL_UART_MspInit+0x200>)
 80058fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005900:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005902:	4813      	ldr	r0, [pc, #76]	; (8005950 <HAL_UART_MspInit+0x200>)
 8005904:	f000 fae0 	bl	8005ec8 <HAL_DMA_Init>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800590e:	f7ff f8db 	bl	8004ac8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <HAL_UART_MspInit+0x200>)
 8005916:	635a      	str	r2, [r3, #52]	; 0x34
 8005918:	4a0d      	ldr	r2, [pc, #52]	; (8005950 <HAL_UART_MspInit+0x200>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800591e:	2200      	movs	r2, #0
 8005920:	2100      	movs	r1, #0
 8005922:	2027      	movs	r0, #39	; 0x27
 8005924:	f000 fa99 	bl	8005e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005928:	2027      	movs	r0, #39	; 0x27
 800592a:	f000 fab2 	bl	8005e92 <HAL_NVIC_EnableIRQ>
}
 800592e:	bf00      	nop
 8005930:	3730      	adds	r7, #48	; 0x30
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40013800 	.word	0x40013800
 800593c:	40021000 	.word	0x40021000
 8005940:	40010800 	.word	0x40010800
 8005944:	40004400 	.word	0x40004400
 8005948:	40004800 	.word	0x40004800
 800594c:	40010c00 	.word	0x40010c00
 8005950:	200007a8 	.word	0x200007a8
 8005954:	40020030 	.word	0x40020030

08005958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800595c:	bf00      	nop
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005968:	e7fe      	b.n	8005968 <HardFault_Handler+0x4>

0800596a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800596e:	e7fe      	b.n	800596e <MemManage_Handler+0x4>

08005970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005974:	e7fe      	b.n	8005974 <BusFault_Handler+0x4>

08005976 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005976:	b480      	push	{r7}
 8005978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800597a:	e7fe      	b.n	800597a <UsageFault_Handler+0x4>

0800597c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059a4:	f000 f944 	bl	8005c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059a8:	bf00      	nop
 80059aa:	bd80      	pop	{r7, pc}

080059ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80059b0:	4802      	ldr	r0, [pc, #8]	; (80059bc <DMA1_Channel3_IRQHandler+0x10>)
 80059b2:	f000 fbb9 	bl	8006128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	200007a8 	.word	0x200007a8

080059c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80059c4:	4802      	ldr	r0, [pc, #8]	; (80059d0 <TIM2_IRQHandler+0x10>)
 80059c6:	f003 f802 	bl	80089ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000b00 	.word	0x20000b00

080059d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 80059da:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <USART1_IRQHandler+0x70>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b0d      	cmp	r3, #13
 80059e4:	d013      	beq.n	8005a0e <USART1_IRQHandler+0x3a>
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	2b0a      	cmp	r3, #10
 80059ea:	d010      	beq.n	8005a0e <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <USART1_IRQHandler+0x74>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d920      	bls.n	8005a36 <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <USART1_IRQHandler+0x78>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	4619      	mov	r1, r3
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <USART1_IRQHandler+0x7c>)
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8005a00:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <USART1_IRQHandler+0x78>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	3301      	adds	r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <USART1_IRQHandler+0x78>)
 8005a0a:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8005a0c:	e013      	b.n	8005a36 <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <USART1_IRQHandler+0x78>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <USART1_IRQHandler+0x78>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <USART1_IRQHandler+0x80>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e002      	b.n	8005a2a <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <USART1_IRQHandler+0x78>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <USART1_IRQHandler+0x74>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <USART1_IRQHandler+0x74>)
 8005a34:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a36:	4808      	ldr	r0, [pc, #32]	; (8005a58 <USART1_IRQHandler+0x84>)
 8005a38:	f003 ff02 	bl	8009840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40013800 	.word	0x40013800
 8005a48:	200002a1 	.word	0x200002a1
 8005a4c:	200006b6 	.word	0x200006b6
 8005a50:	20000264 	.word	0x20000264
 8005a54:	200002a0 	.word	0x200002a0
 8005a58:	20000a80 	.word	0x20000a80

08005a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a60:	4802      	ldr	r0, [pc, #8]	; (8005a6c <USART2_IRQHandler+0x10>)
 8005a62:	f003 feed 	bl	8009840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000b40 	.word	0x20000b40

08005a70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005a74:	4802      	ldr	r0, [pc, #8]	; (8005a80 <USART3_IRQHandler+0x10>)
 8005a76:	f003 fee3 	bl	8009840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200007ec 	.word	0x200007ec

08005a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a8c:	4a14      	ldr	r2, [pc, #80]	; (8005ae0 <_sbrk+0x5c>)
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <_sbrk+0x60>)
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <_sbrk+0x64>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <_sbrk+0x64>)
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <_sbrk+0x68>)
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005aa6:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <_sbrk+0x64>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d207      	bcs.n	8005ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ab4:	f004 faec 	bl	800a090 <__errno>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	230c      	movs	r3, #12
 8005abc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac2:	e009      	b.n	8005ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ac4:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <_sbrk+0x64>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005aca:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <_sbrk+0x64>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	4a05      	ldr	r2, [pc, #20]	; (8005ae8 <_sbrk+0x64>)
 8005ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20005000 	.word	0x20005000
 8005ae4:	00000400 	.word	0x00000400
 8005ae8:	200006b8 	.word	0x200006b8
 8005aec:	20000b88 	.word	0x20000b88

08005af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <SystemInit+0x5c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <SystemInit+0x5c>)
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <SystemInit+0x5c>)
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4911      	ldr	r1, [pc, #68]	; (8005b4c <SystemInit+0x5c>)
 8005b06:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <SystemInit+0x60>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <SystemInit+0x5c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0e      	ldr	r2, [pc, #56]	; (8005b4c <SystemInit+0x5c>)
 8005b12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <SystemInit+0x5c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <SystemInit+0x5c>)
 8005b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005b28:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <SystemInit+0x5c>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <SystemInit+0x5c>)
 8005b2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005b32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <SystemInit+0x5c>)
 8005b36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005b3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <SystemInit+0x64>)
 8005b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b42:	609a      	str	r2, [r3, #8]
#endif 
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	f8ff0000 	.word	0xf8ff0000
 8005b54:	e000ed00 	.word	0xe000ed00

08005b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005b58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005b5a:	e003      	b.n	8005b64 <LoopCopyDataInit>

08005b5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005b5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005b60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005b62:	3104      	adds	r1, #4

08005b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005b64:	480a      	ldr	r0, [pc, #40]	; (8005b90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005b68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005b6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005b6c:	d3f6      	bcc.n	8005b5c <CopyDataInit>
  ldr r2, =_sbss
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005b70:	e002      	b.n	8005b78 <LoopFillZerobss>

08005b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005b72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005b74:	f842 3b04 	str.w	r3, [r2], #4

08005b78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005b78:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005b7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005b7c:	d3f9      	bcc.n	8005b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b7e:	f7ff ffb7 	bl	8005af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b82:	f004 fa8b 	bl	800a09c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b86:	f7fd f85d 	bl	8002c44 <main>
  bx lr
 8005b8a:	4770      	bx	lr
  ldr r3, =_sidata
 8005b8c:	0800e390 	.word	0x0800e390
  ldr r0, =_sdata
 8005b90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005b94:	20000240 	.word	0x20000240
  ldr r2, =_sbss
 8005b98:	20000240 	.word	0x20000240
  ldr r3, = _ebss
 8005b9c:	20000b88 	.word	0x20000b88

08005ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ba0:	e7fe      	b.n	8005ba0 <ADC1_2_IRQHandler>
	...

08005ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_Init+0x28>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a07      	ldr	r2, [pc, #28]	; (8005bcc <HAL_Init+0x28>)
 8005bae:	f043 0310 	orr.w	r3, r3, #16
 8005bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bb4:	2003      	movs	r0, #3
 8005bb6:	f000 f945 	bl	8005e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f000 f808 	bl	8005bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bc0:	f7ff fc9e 	bl	8005500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40022000 	.word	0x40022000

08005bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <HAL_InitTick+0x54>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <HAL_InitTick+0x58>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 f95d 	bl	8005eae <HAL_SYSTICK_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00e      	b.n	8005c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d80a      	bhi.n	8005c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c04:	2200      	movs	r2, #0
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c0c:	f000 f925 	bl	8005e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c10:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <HAL_InitTick+0x5c>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e000      	b.n	8005c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000064 	.word	0x20000064
 8005c28:	2000006c 	.word	0x2000006c
 8005c2c:	20000068 	.word	0x20000068

08005c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_IncTick+0x1c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_IncTick+0x20>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	4a03      	ldr	r2, [pc, #12]	; (8005c50 <HAL_IncTick+0x20>)
 8005c42:	6013      	str	r3, [r2, #0]
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr
 8005c4c:	2000006c 	.word	0x2000006c
 8005c50:	20000b80 	.word	0x20000b80

08005c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return uwTick;
 8005c58:	4b02      	ldr	r3, [pc, #8]	; (8005c64 <HAL_GetTick+0x10>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr
 8005c64:	20000b80 	.word	0x20000b80

08005c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7ff fff0 	bl	8005c54 <HAL_GetTick>
 8005c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c80:	d005      	beq.n	8005c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <HAL_Delay+0x40>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c8e:	bf00      	nop
 8005c90:	f7ff ffe0 	bl	8005c54 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d8f7      	bhi.n	8005c90 <HAL_Delay+0x28>
  {
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	2000006c 	.word	0x2000006c

08005cac <__NVIC_SetPriorityGrouping>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	60d3      	str	r3, [r2, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000ed00 	.word	0xe000ed00

08005cf4 <__NVIC_GetPriorityGrouping>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <__NVIC_GetPriorityGrouping+0x18>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	f003 0307 	and.w	r3, r3, #7
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <__NVIC_EnableIRQ>:
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	db0b      	blt.n	8005d3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	f003 021f 	and.w	r2, r3, #31
 8005d28:	4906      	ldr	r1, [pc, #24]	; (8005d44 <__NVIC_EnableIRQ+0x34>)
 8005d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2001      	movs	r0, #1
 8005d32:	fa00 f202 	lsl.w	r2, r0, r2
 8005d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr
 8005d44:	e000e100 	.word	0xe000e100

08005d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db0a      	blt.n	8005d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	490c      	ldr	r1, [pc, #48]	; (8005d94 <__NVIC_SetPriority+0x4c>)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d70:	e00a      	b.n	8005d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <__NVIC_SetPriority+0x50>)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	440b      	add	r3, r1
 8005d86:	761a      	strb	r2, [r3, #24]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000e100 	.word	0xe000e100
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f1c3 0307 	rsb	r3, r3, #7
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	bf28      	it	cs
 8005dba:	2304      	movcs	r3, #4
 8005dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d902      	bls.n	8005dcc <NVIC_EncodePriority+0x30>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3b03      	subs	r3, #3
 8005dca:	e000      	b.n	8005dce <NVIC_EncodePriority+0x32>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	401a      	ands	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa01 f303 	lsl.w	r3, r1, r3
 8005dee:	43d9      	mvns	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df4:	4313      	orrs	r3, r2
         );
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3724      	adds	r7, #36	; 0x24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr

08005e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e10:	d301      	bcc.n	8005e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e12:	2301      	movs	r3, #1
 8005e14:	e00f      	b.n	8005e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <SysTick_Config+0x40>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e1e:	210f      	movs	r1, #15
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e24:	f7ff ff90 	bl	8005d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <SysTick_Config+0x40>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e2e:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <SysTick_Config+0x40>)
 8005e30:	2207      	movs	r2, #7
 8005e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	e000e010 	.word	0xe000e010

08005e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff2d 	bl	8005cac <__NVIC_SetPriorityGrouping>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e6c:	f7ff ff42 	bl	8005cf4 <__NVIC_GetPriorityGrouping>
 8005e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ff90 	bl	8005d9c <NVIC_EncodePriority>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff5f 	bl	8005d48 <__NVIC_SetPriority>
}
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff35 	bl	8005d10 <__NVIC_EnableIRQ>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ffa2 	bl	8005e00 <SysTick_Config>
 8005ebc:	4603      	mov	r3, r0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e043      	b.n	8005f66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <HAL_DMA_Init+0xa8>)
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4a22      	ldr	r2, [pc, #136]	; (8005f74 <HAL_DMA_Init+0xac>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	091b      	lsrs	r3, r3, #4
 8005ef0:	009a      	lsls	r2, r3, #2
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_DMA_Init+0xb0>)
 8005efa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr
 8005f70:	bffdfff8 	.word	0xbffdfff8
 8005f74:	cccccccd 	.word	0xcccccccd
 8005f78:	40020000 	.word	0x40020000

08005f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_DMA_Start_IT+0x20>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e04a      	b.n	8006032 <HAL_DMA_Start_IT+0xb6>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d13a      	bne.n	8006024 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f9ae 	bl	8006334 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 020e 	orr.w	r2, r2, #14
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e00f      	b.n	8006012 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0204 	bic.w	r2, r2, #4
 8006000:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 020a 	orr.w	r2, r2, #10
 8006010:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e005      	b.n	8006030 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800602c:	2302      	movs	r3, #2
 800602e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800604e:	2b02      	cmp	r3, #2
 8006050:	d005      	beq.n	800605e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2204      	movs	r2, #4
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e051      	b.n	8006102 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 020e 	bic.w	r2, r2, #14
 800606c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_DMA_Abort_IT+0xd0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d029      	beq.n	80060dc <HAL_DMA_Abort_IT+0xa0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a20      	ldr	r2, [pc, #128]	; (8006110 <HAL_DMA_Abort_IT+0xd4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <HAL_DMA_Abort_IT+0x9c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <HAL_DMA_Abort_IT+0xd8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d01a      	beq.n	80060d2 <HAL_DMA_Abort_IT+0x96>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_DMA_Abort_IT+0xdc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d012      	beq.n	80060cc <HAL_DMA_Abort_IT+0x90>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1c      	ldr	r2, [pc, #112]	; (800611c <HAL_DMA_Abort_IT+0xe0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00a      	beq.n	80060c6 <HAL_DMA_Abort_IT+0x8a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1a      	ldr	r2, [pc, #104]	; (8006120 <HAL_DMA_Abort_IT+0xe4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d102      	bne.n	80060c0 <HAL_DMA_Abort_IT+0x84>
 80060ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060be:	e00e      	b.n	80060de <HAL_DMA_Abort_IT+0xa2>
 80060c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060c4:	e00b      	b.n	80060de <HAL_DMA_Abort_IT+0xa2>
 80060c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060ca:	e008      	b.n	80060de <HAL_DMA_Abort_IT+0xa2>
 80060cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060d0:	e005      	b.n	80060de <HAL_DMA_Abort_IT+0xa2>
 80060d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060d6:	e002      	b.n	80060de <HAL_DMA_Abort_IT+0xa2>
 80060d8:	2310      	movs	r3, #16
 80060da:	e000      	b.n	80060de <HAL_DMA_Abort_IT+0xa2>
 80060dc:	2301      	movs	r3, #1
 80060de:	4a11      	ldr	r2, [pc, #68]	; (8006124 <HAL_DMA_Abort_IT+0xe8>)
 80060e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
    } 
  }
  return status;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40020008 	.word	0x40020008
 8006110:	4002001c 	.word	0x4002001c
 8006114:	40020030 	.word	0x40020030
 8006118:	40020044 	.word	0x40020044
 800611c:	40020058 	.word	0x40020058
 8006120:	4002006c 	.word	0x4002006c
 8006124:	40020000 	.word	0x40020000

08006128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2204      	movs	r2, #4
 8006146:	409a      	lsls	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d04f      	beq.n	80061f0 <HAL_DMA_IRQHandler+0xc8>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d04a      	beq.n	80061f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0204 	bic.w	r2, r2, #4
 8006176:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a66      	ldr	r2, [pc, #408]	; (8006318 <HAL_DMA_IRQHandler+0x1f0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d029      	beq.n	80061d6 <HAL_DMA_IRQHandler+0xae>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a65      	ldr	r2, [pc, #404]	; (800631c <HAL_DMA_IRQHandler+0x1f4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d022      	beq.n	80061d2 <HAL_DMA_IRQHandler+0xaa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a63      	ldr	r2, [pc, #396]	; (8006320 <HAL_DMA_IRQHandler+0x1f8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d01a      	beq.n	80061cc <HAL_DMA_IRQHandler+0xa4>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a62      	ldr	r2, [pc, #392]	; (8006324 <HAL_DMA_IRQHandler+0x1fc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d012      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x9e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a60      	ldr	r2, [pc, #384]	; (8006328 <HAL_DMA_IRQHandler+0x200>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00a      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x98>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5f      	ldr	r2, [pc, #380]	; (800632c <HAL_DMA_IRQHandler+0x204>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d102      	bne.n	80061ba <HAL_DMA_IRQHandler+0x92>
 80061b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061b8:	e00e      	b.n	80061d8 <HAL_DMA_IRQHandler+0xb0>
 80061ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061be:	e00b      	b.n	80061d8 <HAL_DMA_IRQHandler+0xb0>
 80061c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80061c4:	e008      	b.n	80061d8 <HAL_DMA_IRQHandler+0xb0>
 80061c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061ca:	e005      	b.n	80061d8 <HAL_DMA_IRQHandler+0xb0>
 80061cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d0:	e002      	b.n	80061d8 <HAL_DMA_IRQHandler+0xb0>
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	e000      	b.n	80061d8 <HAL_DMA_IRQHandler+0xb0>
 80061d6:	2304      	movs	r3, #4
 80061d8:	4a55      	ldr	r2, [pc, #340]	; (8006330 <HAL_DMA_IRQHandler+0x208>)
 80061da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8094 	beq.w	800630e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80061ee:	e08e      	b.n	800630e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	2202      	movs	r2, #2
 80061f6:	409a      	lsls	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d056      	beq.n	80062ae <HAL_DMA_IRQHandler+0x186>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d051      	beq.n	80062ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 020a 	bic.w	r2, r2, #10
 8006226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a38      	ldr	r2, [pc, #224]	; (8006318 <HAL_DMA_IRQHandler+0x1f0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d029      	beq.n	800628e <HAL_DMA_IRQHandler+0x166>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a37      	ldr	r2, [pc, #220]	; (800631c <HAL_DMA_IRQHandler+0x1f4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d022      	beq.n	800628a <HAL_DMA_IRQHandler+0x162>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a35      	ldr	r2, [pc, #212]	; (8006320 <HAL_DMA_IRQHandler+0x1f8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01a      	beq.n	8006284 <HAL_DMA_IRQHandler+0x15c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a34      	ldr	r2, [pc, #208]	; (8006324 <HAL_DMA_IRQHandler+0x1fc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d012      	beq.n	800627e <HAL_DMA_IRQHandler+0x156>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a32      	ldr	r2, [pc, #200]	; (8006328 <HAL_DMA_IRQHandler+0x200>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00a      	beq.n	8006278 <HAL_DMA_IRQHandler+0x150>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a31      	ldr	r2, [pc, #196]	; (800632c <HAL_DMA_IRQHandler+0x204>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d102      	bne.n	8006272 <HAL_DMA_IRQHandler+0x14a>
 800626c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006270:	e00e      	b.n	8006290 <HAL_DMA_IRQHandler+0x168>
 8006272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006276:	e00b      	b.n	8006290 <HAL_DMA_IRQHandler+0x168>
 8006278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800627c:	e008      	b.n	8006290 <HAL_DMA_IRQHandler+0x168>
 800627e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006282:	e005      	b.n	8006290 <HAL_DMA_IRQHandler+0x168>
 8006284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006288:	e002      	b.n	8006290 <HAL_DMA_IRQHandler+0x168>
 800628a:	2320      	movs	r3, #32
 800628c:	e000      	b.n	8006290 <HAL_DMA_IRQHandler+0x168>
 800628e:	2302      	movs	r3, #2
 8006290:	4a27      	ldr	r2, [pc, #156]	; (8006330 <HAL_DMA_IRQHandler+0x208>)
 8006292:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d034      	beq.n	800630e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80062ac:	e02f      	b.n	800630e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2208      	movs	r2, #8
 80062b4:	409a      	lsls	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d028      	beq.n	8006310 <HAL_DMA_IRQHandler+0x1e8>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d023      	beq.n	8006310 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020e 	bic.w	r2, r2, #14
 80062d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	2101      	movs	r1, #1
 80062e2:	fa01 f202 	lsl.w	r2, r1, r2
 80062e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
    }
  }
  return;
 800630e:	bf00      	nop
 8006310:	bf00      	nop
}
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40020008 	.word	0x40020008
 800631c:	4002001c 	.word	0x4002001c
 8006320:	40020030 	.word	0x40020030
 8006324:	40020044 	.word	0x40020044
 8006328:	40020058 	.word	0x40020058
 800632c:	4002006c 	.word	0x4002006c
 8006330:	40020000 	.word	0x40020000

08006334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	2101      	movs	r1, #1
 800634c:	fa01 f202 	lsl.w	r2, r1, r2
 8006350:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b10      	cmp	r3, #16
 8006360:	d108      	bne.n	8006374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006372:	e007      	b.n	8006384 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
	...

08006390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006390:	b480      	push	{r7}
 8006392:	b08b      	sub	sp, #44	; 0x2c
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800639e:	2300      	movs	r3, #0
 80063a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063a2:	e127      	b.n	80065f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80063a4:	2201      	movs	r2, #1
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	429a      	cmp	r2, r3
 80063be:	f040 8116 	bne.w	80065ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b12      	cmp	r3, #18
 80063c8:	d034      	beq.n	8006434 <HAL_GPIO_Init+0xa4>
 80063ca:	2b12      	cmp	r3, #18
 80063cc:	d80d      	bhi.n	80063ea <HAL_GPIO_Init+0x5a>
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d02b      	beq.n	800642a <HAL_GPIO_Init+0x9a>
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d804      	bhi.n	80063e0 <HAL_GPIO_Init+0x50>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d031      	beq.n	800643e <HAL_GPIO_Init+0xae>
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d01c      	beq.n	8006418 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80063de:	e048      	b.n	8006472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d043      	beq.n	800646c <HAL_GPIO_Init+0xdc>
 80063e4:	2b11      	cmp	r3, #17
 80063e6:	d01b      	beq.n	8006420 <HAL_GPIO_Init+0x90>
          break;
 80063e8:	e043      	b.n	8006472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80063ea:	4a89      	ldr	r2, [pc, #548]	; (8006610 <HAL_GPIO_Init+0x280>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d026      	beq.n	800643e <HAL_GPIO_Init+0xae>
 80063f0:	4a87      	ldr	r2, [pc, #540]	; (8006610 <HAL_GPIO_Init+0x280>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d806      	bhi.n	8006404 <HAL_GPIO_Init+0x74>
 80063f6:	4a87      	ldr	r2, [pc, #540]	; (8006614 <HAL_GPIO_Init+0x284>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d020      	beq.n	800643e <HAL_GPIO_Init+0xae>
 80063fc:	4a86      	ldr	r2, [pc, #536]	; (8006618 <HAL_GPIO_Init+0x288>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01d      	beq.n	800643e <HAL_GPIO_Init+0xae>
          break;
 8006402:	e036      	b.n	8006472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006404:	4a85      	ldr	r2, [pc, #532]	; (800661c <HAL_GPIO_Init+0x28c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d019      	beq.n	800643e <HAL_GPIO_Init+0xae>
 800640a:	4a85      	ldr	r2, [pc, #532]	; (8006620 <HAL_GPIO_Init+0x290>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d016      	beq.n	800643e <HAL_GPIO_Init+0xae>
 8006410:	4a84      	ldr	r2, [pc, #528]	; (8006624 <HAL_GPIO_Init+0x294>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_GPIO_Init+0xae>
          break;
 8006416:	e02c      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	623b      	str	r3, [r7, #32]
          break;
 800641e:	e028      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	3304      	adds	r3, #4
 8006426:	623b      	str	r3, [r7, #32]
          break;
 8006428:	e023      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	3308      	adds	r3, #8
 8006430:	623b      	str	r3, [r7, #32]
          break;
 8006432:	e01e      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	330c      	adds	r3, #12
 800643a:	623b      	str	r3, [r7, #32]
          break;
 800643c:	e019      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006446:	2304      	movs	r3, #4
 8006448:	623b      	str	r3, [r7, #32]
          break;
 800644a:	e012      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006454:	2308      	movs	r3, #8
 8006456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	611a      	str	r2, [r3, #16]
          break;
 800645e:	e008      	b.n	8006472 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006460:	2308      	movs	r3, #8
 8006462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	615a      	str	r2, [r3, #20]
          break;
 800646a:	e002      	b.n	8006472 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800646c:	2300      	movs	r3, #0
 800646e:	623b      	str	r3, [r7, #32]
          break;
 8006470:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2bff      	cmp	r3, #255	; 0xff
 8006476:	d801      	bhi.n	800647c <HAL_GPIO_Init+0xec>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	e001      	b.n	8006480 <HAL_GPIO_Init+0xf0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2bff      	cmp	r3, #255	; 0xff
 8006486:	d802      	bhi.n	800648e <HAL_GPIO_Init+0xfe>
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	e002      	b.n	8006494 <HAL_GPIO_Init+0x104>
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	3b08      	subs	r3, #8
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	210f      	movs	r1, #15
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	401a      	ands	r2, r3
 80064a6:	6a39      	ldr	r1, [r7, #32]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	fa01 f303 	lsl.w	r3, r1, r3
 80064ae:	431a      	orrs	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8096 	beq.w	80065ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80064c2:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_GPIO_Init+0x298>)
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	4a58      	ldr	r2, [pc, #352]	; (8006628 <HAL_GPIO_Init+0x298>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	6193      	str	r3, [r2, #24]
 80064ce:	4b56      	ldr	r3, [pc, #344]	; (8006628 <HAL_GPIO_Init+0x298>)
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80064da:	4a54      	ldr	r2, [pc, #336]	; (800662c <HAL_GPIO_Init+0x29c>)
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	3302      	adds	r3, #2
 80064e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	220f      	movs	r2, #15
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4013      	ands	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a4b      	ldr	r2, [pc, #300]	; (8006630 <HAL_GPIO_Init+0x2a0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_GPIO_Init+0x19e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a4a      	ldr	r2, [pc, #296]	; (8006634 <HAL_GPIO_Init+0x2a4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00d      	beq.n	800652a <HAL_GPIO_Init+0x19a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a49      	ldr	r2, [pc, #292]	; (8006638 <HAL_GPIO_Init+0x2a8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <HAL_GPIO_Init+0x196>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a48      	ldr	r2, [pc, #288]	; (800663c <HAL_GPIO_Init+0x2ac>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <HAL_GPIO_Init+0x192>
 800651e:	2303      	movs	r3, #3
 8006520:	e006      	b.n	8006530 <HAL_GPIO_Init+0x1a0>
 8006522:	2304      	movs	r3, #4
 8006524:	e004      	b.n	8006530 <HAL_GPIO_Init+0x1a0>
 8006526:	2302      	movs	r3, #2
 8006528:	e002      	b.n	8006530 <HAL_GPIO_Init+0x1a0>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_GPIO_Init+0x1a0>
 800652e:	2300      	movs	r3, #0
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	f002 0203 	and.w	r2, r2, #3
 8006536:	0092      	lsls	r2, r2, #2
 8006538:	4093      	lsls	r3, r2
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006540:	493a      	ldr	r1, [pc, #232]	; (800662c <HAL_GPIO_Init+0x29c>)
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	089b      	lsrs	r3, r3, #2
 8006546:	3302      	adds	r3, #2
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800655a:	4b39      	ldr	r3, [pc, #228]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4938      	ldr	r1, [pc, #224]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]
 8006566:	e006      	b.n	8006576 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	43db      	mvns	r3, r3
 8006570:	4933      	ldr	r1, [pc, #204]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 8006572:	4013      	ands	r3, r2
 8006574:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006582:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	492e      	ldr	r1, [pc, #184]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	4313      	orrs	r3, r2
 800658c:	604b      	str	r3, [r1, #4]
 800658e:	e006      	b.n	800659e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	43db      	mvns	r3, r3
 8006598:	4929      	ldr	r1, [pc, #164]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 800659a:	4013      	ands	r3, r2
 800659c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d006      	beq.n	80065b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80065aa:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	4924      	ldr	r1, [pc, #144]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
 80065b6:	e006      	b.n	80065c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	43db      	mvns	r3, r3
 80065c0:	491f      	ldr	r1, [pc, #124]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d006      	beq.n	80065e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80065d2:	4b1b      	ldr	r3, [pc, #108]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	491a      	ldr	r1, [pc, #104]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60cb      	str	r3, [r1, #12]
 80065de:	e006      	b.n	80065ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80065e0:	4b17      	ldr	r3, [pc, #92]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	4915      	ldr	r1, [pc, #84]	; (8006640 <HAL_GPIO_Init+0x2b0>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	3301      	adds	r3, #1
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f47f aed0 	bne.w	80063a4 <HAL_GPIO_Init+0x14>
  }
}
 8006604:	bf00      	nop
 8006606:	372c      	adds	r7, #44	; 0x2c
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	10210000 	.word	0x10210000
 8006614:	10110000 	.word	0x10110000
 8006618:	10120000 	.word	0x10120000
 800661c:	10310000 	.word	0x10310000
 8006620:	10320000 	.word	0x10320000
 8006624:	10220000 	.word	0x10220000
 8006628:	40021000 	.word	0x40021000
 800662c:	40010000 	.word	0x40010000
 8006630:	40010800 	.word	0x40010800
 8006634:	40010c00 	.word	0x40010c00
 8006638:	40011000 	.word	0x40011000
 800663c:	40011400 	.word	0x40011400
 8006640:	40010400 	.word	0x40010400

08006644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
 8006660:	e001      	b.n	8006666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	807b      	strh	r3, [r7, #2]
 800667e:	4613      	mov	r3, r2
 8006680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006682:	787b      	ldrb	r3, [r7, #1]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006688:	887a      	ldrh	r2, [r7, #2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800668e:	e003      	b.n	8006698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	041a      	lsls	r2, r3, #16
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	611a      	str	r2, [r3, #16]
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
	...

080066a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e11f      	b.n	80068f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe ff4a 	bl	8005564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	; 0x24
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006708:	f002 f838 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 800670c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4a7b      	ldr	r2, [pc, #492]	; (8006900 <HAL_I2C_Init+0x25c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d807      	bhi.n	8006728 <HAL_I2C_Init+0x84>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a7a      	ldr	r2, [pc, #488]	; (8006904 <HAL_I2C_Init+0x260>)
 800671c:	4293      	cmp	r3, r2
 800671e:	bf94      	ite	ls
 8006720:	2301      	movls	r3, #1
 8006722:	2300      	movhi	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e006      	b.n	8006736 <HAL_I2C_Init+0x92>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a77      	ldr	r2, [pc, #476]	; (8006908 <HAL_I2C_Init+0x264>)
 800672c:	4293      	cmp	r3, r2
 800672e:	bf94      	ite	ls
 8006730:	2301      	movls	r3, #1
 8006732:	2300      	movhi	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0db      	b.n	80068f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a72      	ldr	r2, [pc, #456]	; (800690c <HAL_I2C_Init+0x268>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0c9b      	lsrs	r3, r3, #18
 8006748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4a64      	ldr	r2, [pc, #400]	; (8006900 <HAL_I2C_Init+0x25c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d802      	bhi.n	8006778 <HAL_I2C_Init+0xd4>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3301      	adds	r3, #1
 8006776:	e009      	b.n	800678c <HAL_I2C_Init+0xe8>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	4a63      	ldr	r2, [pc, #396]	; (8006910 <HAL_I2C_Init+0x26c>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	099b      	lsrs	r3, r3, #6
 800678a:	3301      	adds	r3, #1
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	430b      	orrs	r3, r1
 8006792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800679e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4956      	ldr	r1, [pc, #344]	; (8006900 <HAL_I2C_Init+0x25c>)
 80067a8:	428b      	cmp	r3, r1
 80067aa:	d80d      	bhi.n	80067c8 <HAL_I2C_Init+0x124>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e59      	subs	r1, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067ba:	3301      	adds	r3, #1
 80067bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	bf38      	it	cc
 80067c4:	2304      	movcc	r3, #4
 80067c6:	e04f      	b.n	8006868 <HAL_I2C_Init+0x1c4>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d111      	bne.n	80067f4 <HAL_I2C_Init+0x150>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	1e58      	subs	r0, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	440b      	add	r3, r1
 80067de:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e2:	3301      	adds	r3, #1
 80067e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e012      	b.n	800681a <HAL_I2C_Init+0x176>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1e58      	subs	r0, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	0099      	lsls	r1, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	fbb0 f3f3 	udiv	r3, r0, r3
 800680a:	3301      	adds	r3, #1
 800680c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Init+0x17e>
 800681e:	2301      	movs	r3, #1
 8006820:	e022      	b.n	8006868 <HAL_I2C_Init+0x1c4>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10e      	bne.n	8006848 <HAL_I2C_Init+0x1a4>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1e58      	subs	r0, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	440b      	add	r3, r1
 8006838:	fbb0 f3f3 	udiv	r3, r0, r3
 800683c:	3301      	adds	r3, #1
 800683e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006846:	e00f      	b.n	8006868 <HAL_I2C_Init+0x1c4>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1e58      	subs	r0, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6859      	ldr	r1, [r3, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	0099      	lsls	r1, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	fbb0 f3f3 	udiv	r3, r0, r3
 800685e:	3301      	adds	r3, #1
 8006860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	6809      	ldr	r1, [r1, #0]
 800686c:	4313      	orrs	r3, r2
 800686e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69da      	ldr	r2, [r3, #28]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6911      	ldr	r1, [r2, #16]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	4311      	orrs	r1, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	000186a0 	.word	0x000186a0
 8006904:	001e847f 	.word	0x001e847f
 8006908:	003d08ff 	.word	0x003d08ff
 800690c:	431bde83 	.word	0x431bde83
 8006910:	10624dd3 	.word	0x10624dd3

08006914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	461a      	mov	r2, r3
 8006920:	460b      	mov	r3, r1
 8006922:	817b      	strh	r3, [r7, #10]
 8006924:	4613      	mov	r3, r2
 8006926:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006928:	f7ff f994 	bl	8005c54 <HAL_GetTick>
 800692c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b20      	cmp	r3, #32
 8006938:	f040 80e0 	bne.w	8006afc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2319      	movs	r3, #25
 8006942:	2201      	movs	r2, #1
 8006944:	4970      	ldr	r1, [pc, #448]	; (8006b08 <HAL_I2C_Master_Transmit+0x1f4>)
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f966 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006952:	2302      	movs	r3, #2
 8006954:	e0d3      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_I2C_Master_Transmit+0x50>
 8006960:	2302      	movs	r3, #2
 8006962:	e0cc      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d007      	beq.n	800698a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2221      	movs	r2, #33	; 0x21
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2210      	movs	r2, #16
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	893a      	ldrh	r2, [r7, #8]
 80069ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a50      	ldr	r2, [pc, #320]	; (8006b0c <HAL_I2C_Master_Transmit+0x1f8>)
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069cc:	8979      	ldrh	r1, [r7, #10]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a3a      	ldr	r2, [r7, #32]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fe52 	bl	800767c <I2C_MasterRequestWrite>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e08d      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80069f8:	e066      	b.n	8006ac8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	6a39      	ldr	r1, [r7, #32]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f001 f9e0 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d107      	bne.n	8006a22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e06b      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d11b      	bne.n	8006a9c <HAL_I2C_Master_Transmit+0x188>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	6a39      	ldr	r1, [r7, #32]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f001 f9d0 	bl	8007e46 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00d      	beq.n	8006ac8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d107      	bne.n	8006ac4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e01a      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d194      	bne.n	80069fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	00100002 	.word	0x00100002
 8006b0c:	ffff0000 	.word	0xffff0000

08006b10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	; 0x30
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	817b      	strh	r3, [r7, #10]
 8006b20:	4613      	mov	r3, r2
 8006b22:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b28:	f7ff f894 	bl	8005c54 <HAL_GetTick>
 8006b2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	f040 8238 	bne.w	8006fac <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2319      	movs	r3, #25
 8006b42:	2201      	movs	r2, #1
 8006b44:	497e      	ldr	r1, [pc, #504]	; (8006d40 <HAL_I2C_Master_Receive+0x230>)
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 f866 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006b52:	2302      	movs	r3, #2
 8006b54:	e22b      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_I2C_Master_Receive+0x54>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e224      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d007      	beq.n	8006b8a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2222      	movs	r2, #34	; 0x22
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	893a      	ldrh	r2, [r7, #8]
 8006bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a5e      	ldr	r2, [pc, #376]	; (8006d44 <HAL_I2C_Master_Receive+0x234>)
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bcc:	8979      	ldrh	r1, [r7, #10]
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fdd4 	bl	8007780 <I2C_MasterRequestRead>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e1e5      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d113      	bne.n	8006c12 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bea:	2300      	movs	r3, #0
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e1b9      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d11d      	bne.n	8006c56 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c28:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c2a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c52:	b662      	cpsie	i
 8006c54:	e197      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d11d      	bne.n	8006c9a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c6e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c96:	b662      	cpsie	i
 8006c98:	e175      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006cc0:	e161      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f200 811a 	bhi.w	8006f00 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d123      	bne.n	8006d1c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 f8f5 	bl	8007ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e162      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d1a:	e134      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d150      	bne.n	8006dc6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <HAL_I2C_Master_Receive+0x238>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 ff72 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e137      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
 8006d3e:	bf00      	nop
 8006d40:	00100002 	.word	0x00100002
 8006d44:	ffff0000 	.word	0xffff0000
 8006d48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006d4c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d90:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dc4:	e0df      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2200      	movs	r2, #0
 8006dce:	497a      	ldr	r1, [pc, #488]	; (8006fb8 <HAL_I2C_Master_Receive+0x4a8>)
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 ff21 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0e6      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006df0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e24:	4b65      	ldr	r3, [pc, #404]	; (8006fbc <HAL_I2C_Master_Receive+0x4ac>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	08db      	lsrs	r3, r3, #3
 8006e2a:	4a65      	ldr	r2, [pc, #404]	; (8006fc0 <HAL_I2C_Master_Receive+0x4b0>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	0a1a      	lsrs	r2, r3, #8
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	00da      	lsls	r2, r3, #3
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d117      	bne.n	8006e7a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	f043 0220 	orr.w	r2, r3, #32
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006e6c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e099      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d1da      	bne.n	8006e3e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eca:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006efe:	e042      	b.n	8006f86 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 ffdf 	bl	8007ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e04c      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691a      	ldr	r2, [r3, #16]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d118      	bne.n	8006f86 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f47f ae99 	bne.w	8006cc2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	00010004 	.word	0x00010004
 8006fbc:	20000064 	.word	0x20000064
 8006fc0:	14f8b589 	.word	0x14f8b589

08006fc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	817b      	strh	r3, [r7, #10]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	813b      	strh	r3, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fde:	f7fe fe39 	bl	8005c54 <HAL_GetTick>
 8006fe2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	f040 80d9 	bne.w	80071a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2319      	movs	r3, #25
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	496d      	ldr	r1, [pc, #436]	; (80071b0 <HAL_I2C_Mem_Write+0x1ec>)
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fe0b 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
 800700a:	e0cc      	b.n	80071a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_I2C_Mem_Write+0x56>
 8007016:	2302      	movs	r3, #2
 8007018:	e0c5      	b.n	80071a6 <HAL_I2C_Mem_Write+0x1e2>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d007      	beq.n	8007040 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800704e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2221      	movs	r2, #33	; 0x21
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2240      	movs	r2, #64	; 0x40
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a3a      	ldr	r2, [r7, #32]
 800706a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4a4d      	ldr	r2, [pc, #308]	; (80071b4 <HAL_I2C_Mem_Write+0x1f0>)
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007082:	88f8      	ldrh	r0, [r7, #6]
 8007084:	893a      	ldrh	r2, [r7, #8]
 8007086:	8979      	ldrh	r1, [r7, #10]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4603      	mov	r3, r0
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 fc42 	bl	800791c <I2C_RequestMemoryWrite>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d052      	beq.n	8007144 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e081      	b.n	80071a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fe8c 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d107      	bne.n	80070ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e06b      	b.n	80071a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d11b      	bne.n	8007144 <HAL_I2C_Mem_Write+0x180>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007110:	2b00      	cmp	r3, #0
 8007112:	d017      	beq.n	8007144 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1aa      	bne.n	80070a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fe78 	bl	8007e46 <I2C_WaitOnBTFFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00d      	beq.n	8007178 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	2b04      	cmp	r3, #4
 8007162:	d107      	bne.n	8007174 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007172:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e016      	b.n	80071a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e000      	b.n	80071a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071a4:	2302      	movs	r3, #2
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	00100002 	.word	0x00100002
 80071b4:	ffff0000 	.word	0xffff0000

080071b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	; 0x30
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	817b      	strh	r3, [r7, #10]
 80071ca:	460b      	mov	r3, r1
 80071cc:	813b      	strh	r3, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071d6:	f7fe fd3d 	bl	8005c54 <HAL_GetTick>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	f040 823d 	bne.w	8007664 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	2319      	movs	r3, #25
 80071f0:	2201      	movs	r2, #1
 80071f2:	4981      	ldr	r1, [pc, #516]	; (80073f8 <HAL_I2C_Mem_Read+0x240>)
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fd0f 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
 8007202:	e230      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Mem_Read+0x5a>
 800720e:	2302      	movs	r3, #2
 8007210:	e229      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	d007      	beq.n	8007238 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007246:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2222      	movs	r2, #34	; 0x22
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2240      	movs	r2, #64	; 0x40
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a61      	ldr	r2, [pc, #388]	; (80073fc <HAL_I2C_Mem_Read+0x244>)
 8007278:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800727a:	88f8      	ldrh	r0, [r7, #6]
 800727c:	893a      	ldrh	r2, [r7, #8]
 800727e:	8979      	ldrh	r1, [r7, #10]
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4603      	mov	r3, r0
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fbdc 	bl	8007a48 <I2C_RequestMemoryRead>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e1e5      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	e1b9      	b.n	800763e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d11d      	bne.n	800730e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80072e2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e4:	2300      	movs	r3, #0
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007308:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800730a:	b662      	cpsie	i
 800730c:	e197      	b.n	800763e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007312:	2b02      	cmp	r3, #2
 8007314:	d11d      	bne.n	8007352 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007324:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007326:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800734e:	b662      	cpsie	i
 8007350:	e175      	b.n	800763e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007360:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007378:	e161      	b.n	800763e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	2b03      	cmp	r3, #3
 8007380:	f200 811a 	bhi.w	80075b8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007388:	2b01      	cmp	r3, #1
 800738a:	d123      	bne.n	80073d4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fd99 	bl	8007ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e162      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073d2:	e134      	b.n	800763e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d150      	bne.n	800747e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	2200      	movs	r2, #0
 80073e4:	4906      	ldr	r1, [pc, #24]	; (8007400 <HAL_I2C_Mem_Read+0x248>)
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fc16 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d008      	beq.n	8007404 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e137      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
 80073f6:	bf00      	nop
 80073f8:	00100002 	.word	0x00100002
 80073fc:	ffff0000 	.word	0xffff0000
 8007400:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007404:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007414:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007448:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800747c:	e0df      	b.n	800763e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	2200      	movs	r2, #0
 8007486:	497a      	ldr	r1, [pc, #488]	; (8007670 <HAL_I2C_Mem_Read+0x4b8>)
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fbc5 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0e6      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80074a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80074dc:	4b65      	ldr	r3, [pc, #404]	; (8007674 <HAL_I2C_Mem_Read+0x4bc>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	4a65      	ldr	r2, [pc, #404]	; (8007678 <HAL_I2C_Mem_Read+0x4c0>)
 80074e4:	fba2 2303 	umull	r2, r3, r2, r3
 80074e8:	0a1a      	lsrs	r2, r3, #8
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	00da      	lsls	r2, r3, #3
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d117      	bne.n	8007532 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007524:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e099      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b04      	cmp	r3, #4
 800753e:	d1da      	bne.n	80074f6 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800754e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007582:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075b6:	e042      	b.n	800763e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fc83 	bl	8007ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e04c      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b04      	cmp	r3, #4
 800760a:	d118      	bne.n	800763e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	f47f ae99 	bne.w	800737a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3728      	adds	r7, #40	; 0x28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	00010004 	.word	0x00010004
 8007674:	20000064 	.word	0x20000064
 8007678:	14f8b589 	.word	0x14f8b589

0800767c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	460b      	mov	r3, r1
 800768a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d006      	beq.n	80076a6 <I2C_MasterRequestWrite+0x2a>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d003      	beq.n	80076a6 <I2C_MasterRequestWrite+0x2a>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076a4:	d108      	bne.n	80076b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e00b      	b.n	80076d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	2b12      	cmp	r3, #18
 80076be:	d107      	bne.n	80076d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fa9b 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00d      	beq.n	8007704 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f6:	d103      	bne.n	8007700 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e035      	b.n	8007770 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800770c:	d108      	bne.n	8007720 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800770e:	897b      	ldrh	r3, [r7, #10]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800771c:	611a      	str	r2, [r3, #16]
 800771e:	e01b      	b.n	8007758 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007720:	897b      	ldrh	r3, [r7, #10]
 8007722:	11db      	asrs	r3, r3, #7
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f003 0306 	and.w	r3, r3, #6
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f063 030f 	orn	r3, r3, #15
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	490e      	ldr	r1, [pc, #56]	; (8007778 <I2C_MasterRequestWrite+0xfc>)
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fac1 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e010      	b.n	8007770 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800774e:	897b      	ldrh	r3, [r7, #10]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4907      	ldr	r1, [pc, #28]	; (800777c <I2C_MasterRequestWrite+0x100>)
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fab1 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e000      	b.n	8007770 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	00010008 	.word	0x00010008
 800777c:	00010002 	.word	0x00010002

08007780 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	460b      	mov	r3, r1
 800778e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d006      	beq.n	80077ba <I2C_MasterRequestRead+0x3a>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d003      	beq.n	80077ba <I2C_MasterRequestRead+0x3a>
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077b8:	d108      	bne.n	80077cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e00b      	b.n	80077e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	2b11      	cmp	r3, #17
 80077d2:	d107      	bne.n	80077e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fa11 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780a:	d103      	bne.n	8007814 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e079      	b.n	800790c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007820:	d108      	bne.n	8007834 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	b2da      	uxtb	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	611a      	str	r2, [r3, #16]
 8007832:	e05f      	b.n	80078f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007834:	897b      	ldrh	r3, [r7, #10]
 8007836:	11db      	asrs	r3, r3, #7
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 0306 	and.w	r3, r3, #6
 800783e:	b2db      	uxtb	r3, r3
 8007840:	f063 030f 	orn	r3, r3, #15
 8007844:	b2da      	uxtb	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	4930      	ldr	r1, [pc, #192]	; (8007914 <I2C_MasterRequestRead+0x194>)
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fa37 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e054      	b.n	800790c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007862:	897b      	ldrh	r3, [r7, #10]
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4929      	ldr	r1, [pc, #164]	; (8007918 <I2C_MasterRequestRead+0x198>)
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fa27 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e044      	b.n	800790c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f9af 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ce:	d103      	bne.n	80078d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e017      	b.n	800790c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80078dc:	897b      	ldrh	r3, [r7, #10]
 80078de:	11db      	asrs	r3, r3, #7
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0306 	and.w	r3, r3, #6
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f063 030e 	orn	r3, r3, #14
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4907      	ldr	r1, [pc, #28]	; (8007918 <I2C_MasterRequestRead+0x198>)
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f9e3 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	00010008 	.word	0x00010008
 8007918:	00010002 	.word	0x00010002

0800791c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	4603      	mov	r3, r0
 800792c:	817b      	strh	r3, [r7, #10]
 800792e:	460b      	mov	r3, r1
 8007930:	813b      	strh	r3, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	2200      	movs	r2, #0
 800794e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f960 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796c:	d103      	bne.n	8007976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e05f      	b.n	8007a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800797a:	897b      	ldrh	r3, [r7, #10]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	461a      	mov	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	6a3a      	ldr	r2, [r7, #32]
 800798e:	492d      	ldr	r1, [pc, #180]	; (8007a44 <I2C_RequestMemoryWrite+0x128>)
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f998 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e04c      	b.n	8007a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b8:	6a39      	ldr	r1, [r7, #32]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fa02 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00d      	beq.n	80079e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d107      	bne.n	80079de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e02b      	b.n	8007a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d105      	bne.n	80079f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079e8:	893b      	ldrh	r3, [r7, #8]
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	611a      	str	r2, [r3, #16]
 80079f2:	e021      	b.n	8007a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079f4:	893b      	ldrh	r3, [r7, #8]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a04:	6a39      	ldr	r1, [r7, #32]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f9dc 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d107      	bne.n	8007a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e005      	b.n	8007a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a2e:	893b      	ldrh	r3, [r7, #8]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	00010002 	.word	0x00010002

08007a48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	817b      	strh	r3, [r7, #10]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	813b      	strh	r3, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f8c2 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00d      	beq.n	8007ab6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa8:	d103      	bne.n	8007ab2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e0aa      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ab6:	897b      	ldrh	r3, [r7, #10]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	6a3a      	ldr	r2, [r7, #32]
 8007aca:	4952      	ldr	r1, [pc, #328]	; (8007c14 <I2C_RequestMemoryRead+0x1cc>)
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f8fa 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e097      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af4:	6a39      	ldr	r1, [r7, #32]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f964 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d107      	bne.n	8007b1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e076      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d105      	bne.n	8007b30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b24:	893b      	ldrh	r3, [r7, #8]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	611a      	str	r2, [r3, #16]
 8007b2e:	e021      	b.n	8007b74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b40:	6a39      	ldr	r1, [r7, #32]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f93e 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d107      	bne.n	8007b66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e050      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b6a:	893b      	ldrh	r3, [r7, #8]
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b76:	6a39      	ldr	r1, [r7, #32]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f923 	bl	8007dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00d      	beq.n	8007ba0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d107      	bne.n	8007b9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e035      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f82b 	bl	8007c18 <I2C_WaitOnFlagUntilTimeout>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00d      	beq.n	8007be4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	d103      	bne.n	8007be0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e013      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007be4:	897b      	ldrh	r3, [r7, #10]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	4906      	ldr	r1, [pc, #24]	; (8007c14 <I2C_RequestMemoryRead+0x1cc>)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f863 	bl	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e000      	b.n	8007c0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	00010002 	.word	0x00010002

08007c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	4613      	mov	r3, r2
 8007c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c28:	e025      	b.n	8007c76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c30:	d021      	beq.n	8007c76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c32:	f7fe f80f 	bl	8005c54 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d116      	bne.n	8007c76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	f043 0220 	orr.w	r2, r3, #32
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e023      	b.n	8007cbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d10d      	bne.n	8007c9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	43da      	mvns	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	e00c      	b.n	8007cb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	43da      	mvns	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d0b6      	beq.n	8007c2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cd4:	e051      	b.n	8007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce4:	d123      	bne.n	8007d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f043 0204 	orr.w	r2, r3, #4
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e046      	b.n	8007dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d34:	d021      	beq.n	8007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d36:	f7fd ff8d 	bl	8005c54 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d302      	bcc.n	8007d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d116      	bne.n	8007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	f043 0220 	orr.w	r2, r3, #32
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e020      	b.n	8007dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10c      	bne.n	8007d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	43da      	mvns	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	2300      	moveq	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	e00b      	b.n	8007db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	43da      	mvns	r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	4013      	ands	r3, r2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d18d      	bne.n	8007cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dd0:	e02d      	b.n	8007e2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f8ce 	bl	8007f74 <I2C_IsAcknowledgeFailed>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e02d      	b.n	8007e3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007de8:	d021      	beq.n	8007e2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dea:	f7fd ff33 	bl	8005c54 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d302      	bcc.n	8007e00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d116      	bne.n	8007e2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e007      	b.n	8007e3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e38:	2b80      	cmp	r3, #128	; 0x80
 8007e3a:	d1ca      	bne.n	8007dd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e52:	e02d      	b.n	8007eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f88d 	bl	8007f74 <I2C_IsAcknowledgeFailed>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e02d      	b.n	8007ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e6a:	d021      	beq.n	8007eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e6c:	f7fd fef2 	bl	8005c54 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d302      	bcc.n	8007e82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d116      	bne.n	8007eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	f043 0220 	orr.w	r2, r3, #32
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e007      	b.n	8007ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d1ca      	bne.n	8007e54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ed4:	e042      	b.n	8007f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d119      	bne.n	8007f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0210 	mvn.w	r2, #16
 8007eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e029      	b.n	8007f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f18:	f7fd fe9c 	bl	8005c54 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d302      	bcc.n	8007f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d116      	bne.n	8007f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e007      	b.n	8007f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	d1b5      	bne.n	8007ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8a:	d11b      	bne.n	8007fc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	f043 0204 	orr.w	r2, r3, #4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr

08007fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e26c      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8087 	beq.w	80080fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ff0:	4b92      	ldr	r3, [pc, #584]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 030c 	and.w	r3, r3, #12
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d00c      	beq.n	8008016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ffc:	4b8f      	ldr	r3, [pc, #572]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 030c 	and.w	r3, r3, #12
 8008004:	2b08      	cmp	r3, #8
 8008006:	d112      	bne.n	800802e <HAL_RCC_OscConfig+0x5e>
 8008008:	4b8c      	ldr	r3, [pc, #560]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008014:	d10b      	bne.n	800802e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008016:	4b89      	ldr	r3, [pc, #548]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d06c      	beq.n	80080fc <HAL_RCC_OscConfig+0x12c>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d168      	bne.n	80080fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e246      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008036:	d106      	bne.n	8008046 <HAL_RCC_OscConfig+0x76>
 8008038:	4b80      	ldr	r3, [pc, #512]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a7f      	ldr	r2, [pc, #508]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800803e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	e02e      	b.n	80080a4 <HAL_RCC_OscConfig+0xd4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10c      	bne.n	8008068 <HAL_RCC_OscConfig+0x98>
 800804e:	4b7b      	ldr	r3, [pc, #492]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a7a      	ldr	r2, [pc, #488]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	4b78      	ldr	r3, [pc, #480]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a77      	ldr	r2, [pc, #476]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	e01d      	b.n	80080a4 <HAL_RCC_OscConfig+0xd4>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008070:	d10c      	bne.n	800808c <HAL_RCC_OscConfig+0xbc>
 8008072:	4b72      	ldr	r3, [pc, #456]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a71      	ldr	r2, [pc, #452]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	4b6f      	ldr	r3, [pc, #444]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a6e      	ldr	r2, [pc, #440]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	e00b      	b.n	80080a4 <HAL_RCC_OscConfig+0xd4>
 800808c:	4b6b      	ldr	r3, [pc, #428]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a6a      	ldr	r2, [pc, #424]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	4b68      	ldr	r3, [pc, #416]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a67      	ldr	r2, [pc, #412]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800809e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d013      	beq.n	80080d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ac:	f7fd fdd2 	bl	8005c54 <HAL_GetTick>
 80080b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080b4:	f7fd fdce 	bl	8005c54 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b64      	cmp	r3, #100	; 0x64
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e1fa      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080c6:	4b5d      	ldr	r3, [pc, #372]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCC_OscConfig+0xe4>
 80080d2:	e014      	b.n	80080fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d4:	f7fd fdbe 	bl	8005c54 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080dc:	f7fd fdba 	bl	8005c54 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b64      	cmp	r3, #100	; 0x64
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e1e6      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ee:	4b53      	ldr	r3, [pc, #332]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f0      	bne.n	80080dc <HAL_RCC_OscConfig+0x10c>
 80080fa:	e000      	b.n	80080fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d063      	beq.n	80081d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800810a:	4b4c      	ldr	r3, [pc, #304]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f003 030c 	and.w	r3, r3, #12
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008116:	4b49      	ldr	r3, [pc, #292]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f003 030c 	and.w	r3, r3, #12
 800811e:	2b08      	cmp	r3, #8
 8008120:	d11c      	bne.n	800815c <HAL_RCC_OscConfig+0x18c>
 8008122:	4b46      	ldr	r3, [pc, #280]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d116      	bne.n	800815c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800812e:	4b43      	ldr	r3, [pc, #268]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_RCC_OscConfig+0x176>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d001      	beq.n	8008146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e1ba      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008146:	4b3d      	ldr	r3, [pc, #244]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	4939      	ldr	r1, [pc, #228]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008156:	4313      	orrs	r3, r2
 8008158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800815a:	e03a      	b.n	80081d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d020      	beq.n	80081a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008164:	4b36      	ldr	r3, [pc, #216]	; (8008240 <HAL_RCC_OscConfig+0x270>)
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800816a:	f7fd fd73 	bl	8005c54 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008172:	f7fd fd6f 	bl	8005c54 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e19b      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008184:	4b2d      	ldr	r3, [pc, #180]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f0      	beq.n	8008172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008190:	4b2a      	ldr	r3, [pc, #168]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	4927      	ldr	r1, [pc, #156]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	e015      	b.n	80081d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081a6:	4b26      	ldr	r3, [pc, #152]	; (8008240 <HAL_RCC_OscConfig+0x270>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ac:	f7fd fd52 	bl	8005c54 <HAL_GetTick>
 80081b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081b4:	f7fd fd4e 	bl	8005c54 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e17a      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081c6:	4b1d      	ldr	r3, [pc, #116]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d03a      	beq.n	8008254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d019      	beq.n	800821a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081e6:	4b17      	ldr	r3, [pc, #92]	; (8008244 <HAL_RCC_OscConfig+0x274>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ec:	f7fd fd32 	bl	8005c54 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081f4:	f7fd fd2e 	bl	8005c54 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e15a      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008206:	4b0d      	ldr	r3, [pc, #52]	; (800823c <HAL_RCC_OscConfig+0x26c>)
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008212:	2001      	movs	r0, #1
 8008214:	f000 fada 	bl	80087cc <RCC_Delay>
 8008218:	e01c      	b.n	8008254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800821a:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <HAL_RCC_OscConfig+0x274>)
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008220:	f7fd fd18 	bl	8005c54 <HAL_GetTick>
 8008224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008226:	e00f      	b.n	8008248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008228:	f7fd fd14 	bl	8005c54 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d908      	bls.n	8008248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e140      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
 800823a:	bf00      	nop
 800823c:	40021000 	.word	0x40021000
 8008240:	42420000 	.word	0x42420000
 8008244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008248:	4b9e      	ldr	r3, [pc, #632]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e9      	bne.n	8008228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80a6 	beq.w	80083ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008266:	4b97      	ldr	r3, [pc, #604]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10d      	bne.n	800828e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008272:	4b94      	ldr	r3, [pc, #592]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	4a93      	ldr	r2, [pc, #588]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800827c:	61d3      	str	r3, [r2, #28]
 800827e:	4b91      	ldr	r3, [pc, #580]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800828a:	2301      	movs	r3, #1
 800828c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800828e:	4b8e      	ldr	r3, [pc, #568]	; (80084c8 <HAL_RCC_OscConfig+0x4f8>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008296:	2b00      	cmp	r3, #0
 8008298:	d118      	bne.n	80082cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800829a:	4b8b      	ldr	r3, [pc, #556]	; (80084c8 <HAL_RCC_OscConfig+0x4f8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a8a      	ldr	r2, [pc, #552]	; (80084c8 <HAL_RCC_OscConfig+0x4f8>)
 80082a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082a6:	f7fd fcd5 	bl	8005c54 <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ae:	f7fd fcd1 	bl	8005c54 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b64      	cmp	r3, #100	; 0x64
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e0fd      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c0:	4b81      	ldr	r3, [pc, #516]	; (80084c8 <HAL_RCC_OscConfig+0x4f8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d106      	bne.n	80082e2 <HAL_RCC_OscConfig+0x312>
 80082d4:	4b7b      	ldr	r3, [pc, #492]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	4a7a      	ldr	r2, [pc, #488]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	6213      	str	r3, [r2, #32]
 80082e0:	e02d      	b.n	800833e <HAL_RCC_OscConfig+0x36e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10c      	bne.n	8008304 <HAL_RCC_OscConfig+0x334>
 80082ea:	4b76      	ldr	r3, [pc, #472]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	4a75      	ldr	r2, [pc, #468]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	6213      	str	r3, [r2, #32]
 80082f6:	4b73      	ldr	r3, [pc, #460]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	4a72      	ldr	r2, [pc, #456]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80082fc:	f023 0304 	bic.w	r3, r3, #4
 8008300:	6213      	str	r3, [r2, #32]
 8008302:	e01c      	b.n	800833e <HAL_RCC_OscConfig+0x36e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b05      	cmp	r3, #5
 800830a:	d10c      	bne.n	8008326 <HAL_RCC_OscConfig+0x356>
 800830c:	4b6d      	ldr	r3, [pc, #436]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	4a6c      	ldr	r2, [pc, #432]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008312:	f043 0304 	orr.w	r3, r3, #4
 8008316:	6213      	str	r3, [r2, #32]
 8008318:	4b6a      	ldr	r3, [pc, #424]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	4a69      	ldr	r2, [pc, #420]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	6213      	str	r3, [r2, #32]
 8008324:	e00b      	b.n	800833e <HAL_RCC_OscConfig+0x36e>
 8008326:	4b67      	ldr	r3, [pc, #412]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	4a66      	ldr	r2, [pc, #408]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800832c:	f023 0301 	bic.w	r3, r3, #1
 8008330:	6213      	str	r3, [r2, #32]
 8008332:	4b64      	ldr	r3, [pc, #400]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	4a63      	ldr	r2, [pc, #396]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008338:	f023 0304 	bic.w	r3, r3, #4
 800833c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d015      	beq.n	8008372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008346:	f7fd fc85 	bl	8005c54 <HAL_GetTick>
 800834a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800834c:	e00a      	b.n	8008364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800834e:	f7fd fc81 	bl	8005c54 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	f241 3288 	movw	r2, #5000	; 0x1388
 800835c:	4293      	cmp	r3, r2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e0ab      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008364:	4b57      	ldr	r3, [pc, #348]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0ee      	beq.n	800834e <HAL_RCC_OscConfig+0x37e>
 8008370:	e014      	b.n	800839c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008372:	f7fd fc6f 	bl	8005c54 <HAL_GetTick>
 8008376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008378:	e00a      	b.n	8008390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800837a:	f7fd fc6b 	bl	8005c54 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f241 3288 	movw	r2, #5000	; 0x1388
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e095      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008390:	4b4c      	ldr	r3, [pc, #304]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1ee      	bne.n	800837a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d105      	bne.n	80083ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083a2:	4b48      	ldr	r3, [pc, #288]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	4a47      	ldr	r2, [pc, #284]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80083a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8081 	beq.w	80084ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083b8:	4b42      	ldr	r3, [pc, #264]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 030c 	and.w	r3, r3, #12
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d061      	beq.n	8008488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d146      	bne.n	800845a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083cc:	4b3f      	ldr	r3, [pc, #252]	; (80084cc <HAL_RCC_OscConfig+0x4fc>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083d2:	f7fd fc3f 	bl	8005c54 <HAL_GetTick>
 80083d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083d8:	e008      	b.n	80083ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083da:	f7fd fc3b 	bl	8005c54 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d901      	bls.n	80083ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e067      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083ec:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1f0      	bne.n	80083da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008400:	d108      	bne.n	8008414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008402:	4b30      	ldr	r3, [pc, #192]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	492d      	ldr	r1, [pc, #180]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008410:	4313      	orrs	r3, r2
 8008412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008414:	4b2b      	ldr	r3, [pc, #172]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a19      	ldr	r1, [r3, #32]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	430b      	orrs	r3, r1
 8008426:	4927      	ldr	r1, [pc, #156]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008428:	4313      	orrs	r3, r2
 800842a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800842c:	4b27      	ldr	r3, [pc, #156]	; (80084cc <HAL_RCC_OscConfig+0x4fc>)
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008432:	f7fd fc0f 	bl	8005c54 <HAL_GetTick>
 8008436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008438:	e008      	b.n	800844c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843a:	f7fd fc0b 	bl	8005c54 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e037      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800844c:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0f0      	beq.n	800843a <HAL_RCC_OscConfig+0x46a>
 8008458:	e02f      	b.n	80084ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800845a:	4b1c      	ldr	r3, [pc, #112]	; (80084cc <HAL_RCC_OscConfig+0x4fc>)
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008460:	f7fd fbf8 	bl	8005c54 <HAL_GetTick>
 8008464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008468:	f7fd fbf4 	bl	8005c54 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e020      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1f0      	bne.n	8008468 <HAL_RCC_OscConfig+0x498>
 8008486:	e018      	b.n	80084ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e013      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <HAL_RCC_OscConfig+0x4f4>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d106      	bne.n	80084b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d001      	beq.n	80084ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40021000 	.word	0x40021000
 80084c8:	40007000 	.word	0x40007000
 80084cc:	42420060 	.word	0x42420060

080084d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0d0      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084e4:	4b6a      	ldr	r3, [pc, #424]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d910      	bls.n	8008514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f2:	4b67      	ldr	r3, [pc, #412]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f023 0207 	bic.w	r2, r3, #7
 80084fa:	4965      	ldr	r1, [pc, #404]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	4313      	orrs	r3, r2
 8008500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008502:	4b63      	ldr	r3, [pc, #396]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d001      	beq.n	8008514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e0b8      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d020      	beq.n	8008562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800852c:	4b59      	ldr	r3, [pc, #356]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	4a58      	ldr	r2, [pc, #352]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 8008532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008544:	4b53      	ldr	r3, [pc, #332]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4a52      	ldr	r2, [pc, #328]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800854a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800854e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008550:	4b50      	ldr	r3, [pc, #320]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	494d      	ldr	r1, [pc, #308]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800855e:	4313      	orrs	r3, r2
 8008560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d040      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d107      	bne.n	8008586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008576:	4b47      	ldr	r3, [pc, #284]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d115      	bne.n	80085ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e07f      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b02      	cmp	r3, #2
 800858c:	d107      	bne.n	800859e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800858e:	4b41      	ldr	r3, [pc, #260]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e073      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800859e:	4b3d      	ldr	r3, [pc, #244]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e06b      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085ae:	4b39      	ldr	r3, [pc, #228]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f023 0203 	bic.w	r2, r3, #3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	4936      	ldr	r1, [pc, #216]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085c0:	f7fd fb48 	bl	8005c54 <HAL_GetTick>
 80085c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085c6:	e00a      	b.n	80085de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c8:	f7fd fb44 	bl	8005c54 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e053      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085de:	4b2d      	ldr	r3, [pc, #180]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f003 020c 	and.w	r2, r3, #12
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d1eb      	bne.n	80085c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d210      	bcs.n	8008620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fe:	4b24      	ldr	r3, [pc, #144]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f023 0207 	bic.w	r2, r3, #7
 8008606:	4922      	ldr	r1, [pc, #136]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	4313      	orrs	r3, r2
 800860c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <HAL_RCC_ClockConfig+0x1c0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d001      	beq.n	8008620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e032      	b.n	8008686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800862c:	4b19      	ldr	r3, [pc, #100]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	4916      	ldr	r1, [pc, #88]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800863a:	4313      	orrs	r3, r2
 800863c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0308 	and.w	r3, r3, #8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800864a:	4b12      	ldr	r3, [pc, #72]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	490e      	ldr	r1, [pc, #56]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 800865a:	4313      	orrs	r3, r2
 800865c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800865e:	f000 f821 	bl	80086a4 <HAL_RCC_GetSysClockFreq>
 8008662:	4601      	mov	r1, r0
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <HAL_RCC_ClockConfig+0x1c4>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	091b      	lsrs	r3, r3, #4
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <HAL_RCC_ClockConfig+0x1c8>)
 8008670:	5cd3      	ldrb	r3, [r2, r3]
 8008672:	fa21 f303 	lsr.w	r3, r1, r3
 8008676:	4a09      	ldr	r2, [pc, #36]	; (800869c <HAL_RCC_ClockConfig+0x1cc>)
 8008678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <HAL_RCC_ClockConfig+0x1d0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f7fd faa6 	bl	8005bd0 <HAL_InitTick>

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	40022000 	.word	0x40022000
 8008694:	40021000 	.word	0x40021000
 8008698:	0800e0c8 	.word	0x0800e0c8
 800869c:	20000064 	.word	0x20000064
 80086a0:	20000068 	.word	0x20000068

080086a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086a4:	b490      	push	{r4, r7}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80086aa:	4b2a      	ldr	r3, [pc, #168]	; (8008754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80086ac:	1d3c      	adds	r4, r7, #4
 80086ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80086b4:	4b28      	ldr	r3, [pc, #160]	; (8008758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	2300      	movs	r3, #0
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80086ce:	4b23      	ldr	r3, [pc, #140]	; (800875c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 030c 	and.w	r3, r3, #12
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d002      	beq.n	80086e4 <HAL_RCC_GetSysClockFreq+0x40>
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d003      	beq.n	80086ea <HAL_RCC_GetSysClockFreq+0x46>
 80086e2:	e02d      	b.n	8008740 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80086e4:	4b1e      	ldr	r3, [pc, #120]	; (8008760 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086e6:	623b      	str	r3, [r7, #32]
      break;
 80086e8:	e02d      	b.n	8008746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	0c9b      	lsrs	r3, r3, #18
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086f6:	4413      	add	r3, r2
 80086f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80086fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d013      	beq.n	8008730 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008708:	4b14      	ldr	r3, [pc, #80]	; (800875c <HAL_RCC_GetSysClockFreq+0xb8>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	0c5b      	lsrs	r3, r3, #17
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008716:	4413      	add	r3, r2
 8008718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800871c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4a0f      	ldr	r2, [pc, #60]	; (8008760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008722:	fb02 f203 	mul.w	r2, r2, r3
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	fbb2 f3f3 	udiv	r3, r2, r3
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
 800872e:	e004      	b.n	800873a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	4a0c      	ldr	r2, [pc, #48]	; (8008764 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008734:	fb02 f303 	mul.w	r3, r2, r3
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	623b      	str	r3, [r7, #32]
      break;
 800873e:	e002      	b.n	8008746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008742:	623b      	str	r3, [r7, #32]
      break;
 8008744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008746:	6a3b      	ldr	r3, [r7, #32]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3728      	adds	r7, #40	; 0x28
 800874c:	46bd      	mov	sp, r7
 800874e:	bc90      	pop	{r4, r7}
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	0800d948 	.word	0x0800d948
 8008758:	0800d958 	.word	0x0800d958
 800875c:	40021000 	.word	0x40021000
 8008760:	007a1200 	.word	0x007a1200
 8008764:	003d0900 	.word	0x003d0900

08008768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800876c:	4b02      	ldr	r3, [pc, #8]	; (8008778 <HAL_RCC_GetHCLKFreq+0x10>)
 800876e:	681b      	ldr	r3, [r3, #0]
}
 8008770:	4618      	mov	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr
 8008778:	20000064 	.word	0x20000064

0800877c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008780:	f7ff fff2 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 8008784:	4601      	mov	r1, r0
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	0a1b      	lsrs	r3, r3, #8
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	4a03      	ldr	r2, [pc, #12]	; (80087a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008792:	5cd3      	ldrb	r3, [r2, r3]
 8008794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008798:	4618      	mov	r0, r3
 800879a:	bd80      	pop	{r7, pc}
 800879c:	40021000 	.word	0x40021000
 80087a0:	0800e0d8 	.word	0x0800e0d8

080087a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80087a8:	f7ff ffde 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 80087ac:	4601      	mov	r1, r0
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	0adb      	lsrs	r3, r3, #11
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	4a03      	ldr	r2, [pc, #12]	; (80087c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087ba:	5cd3      	ldrb	r3, [r2, r3]
 80087bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40021000 	.word	0x40021000
 80087c8:	0800e0d8 	.word	0x0800e0d8

080087cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <RCC_Delay+0x34>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a0a      	ldr	r2, [pc, #40]	; (8008804 <RCC_Delay+0x38>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	0a5b      	lsrs	r3, r3, #9
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
 80087e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80087e8:	bf00      	nop
  }
  while (Delay --);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1e5a      	subs	r2, r3, #1
 80087ee:	60fa      	str	r2, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f9      	bne.n	80087e8 <RCC_Delay+0x1c>
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20000064 	.word	0x20000064
 8008804:	10624dd3 	.word	0x10624dd3

08008808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e053      	b.n	80088c2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7fc fed3 	bl	80055e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2202      	movs	r2, #2
 800883e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008850:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	ea42 0103 	orr.w	r1, r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	0c1a      	lsrs	r2, r3, #16
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f002 0204 	and.w	r2, r2, #4
 80088a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e01d      	b.n	8008918 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d106      	bne.n	80088f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fc fec1 	bl	8005678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f000 fb0b 	bl	8008f24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b06      	cmp	r3, #6
 8008948:	d007      	beq.n	800895a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0201 	orr.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr

08008966 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e01d      	b.n	80089b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f815 	bl	80089bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2202      	movs	r2, #2
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f000 fabd 	bl	8008f24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d122      	bne.n	8008a2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d11b      	bne.n	8008a2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f06f 0202 	mvn.w	r2, #2
 80089fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fa6b 	bl	8008eec <HAL_TIM_IC_CaptureCallback>
 8008a16:	e005      	b.n	8008a24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa5e 	bl	8008eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa6d 	bl	8008efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d122      	bne.n	8008a7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d11b      	bne.n	8008a7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f06f 0204 	mvn.w	r2, #4
 8008a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fa41 	bl	8008eec <HAL_TIM_IC_CaptureCallback>
 8008a6a:	e005      	b.n	8008a78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fa34 	bl	8008eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa43 	bl	8008efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d122      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d11b      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f06f 0208 	mvn.w	r2, #8
 8008aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2204      	movs	r2, #4
 8008aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa17 	bl	8008eec <HAL_TIM_IC_CaptureCallback>
 8008abe:	e005      	b.n	8008acc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa0a 	bl	8008eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa19 	bl	8008efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b10      	cmp	r3, #16
 8008ade:	d122      	bne.n	8008b26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f003 0310 	and.w	r3, r3, #16
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d11b      	bne.n	8008b26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f06f 0210 	mvn.w	r2, #16
 8008af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2208      	movs	r2, #8
 8008afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f9ed 	bl	8008eec <HAL_TIM_IC_CaptureCallback>
 8008b12:	e005      	b.n	8008b20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9e0 	bl	8008eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f9ef 	bl	8008efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d10e      	bne.n	8008b52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d107      	bne.n	8008b52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f06f 0201 	mvn.w	r2, #1
 8008b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fa fc07 	bl	8003360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5c:	2b80      	cmp	r3, #128	; 0x80
 8008b5e:	d10e      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6a:	2b80      	cmp	r3, #128	; 0x80
 8008b6c:	d107      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fcf1 	bl	8009560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d10e      	bne.n	8008baa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b40      	cmp	r3, #64	; 0x40
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f9b3 	bl	8008f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0320 	and.w	r3, r3, #32
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0220 	mvn.w	r2, #32
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fcbc 	bl	800954e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e0b4      	b.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2202      	movs	r2, #2
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	f200 809f 	bhi.w	8008d50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c4d 	.word	0x08008c4d
 8008c1c:	08008d51 	.word	0x08008d51
 8008c20:	08008d51 	.word	0x08008d51
 8008c24:	08008d51 	.word	0x08008d51
 8008c28:	08008c8d 	.word	0x08008c8d
 8008c2c:	08008d51 	.word	0x08008d51
 8008c30:	08008d51 	.word	0x08008d51
 8008c34:	08008d51 	.word	0x08008d51
 8008c38:	08008ccf 	.word	0x08008ccf
 8008c3c:	08008d51 	.word	0x08008d51
 8008c40:	08008d51 	.word	0x08008d51
 8008c44:	08008d51 	.word	0x08008d51
 8008c48:	08008d0f 	.word	0x08008d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f9c8 	bl	8008fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0208 	orr.w	r2, r2, #8
 8008c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0204 	bic.w	r2, r2, #4
 8008c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6999      	ldr	r1, [r3, #24]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691a      	ldr	r2, [r3, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	619a      	str	r2, [r3, #24]
      break;
 8008c8a:	e062      	b.n	8008d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fa0e 	bl	80090b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6999      	ldr	r1, [r3, #24]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	021a      	lsls	r2, r3, #8
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	619a      	str	r2, [r3, #24]
      break;
 8008ccc:	e041      	b.n	8008d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fa57 	bl	8009188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69da      	ldr	r2, [r3, #28]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0208 	orr.w	r2, r2, #8
 8008ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0204 	bic.w	r2, r2, #4
 8008cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69d9      	ldr	r1, [r3, #28]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	61da      	str	r2, [r3, #28]
      break;
 8008d0c:	e021      	b.n	8008d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 faa1 	bl	800925c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69da      	ldr	r2, [r3, #28]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69d9      	ldr	r1, [r3, #28]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	021a      	lsls	r2, r3, #8
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	61da      	str	r2, [r3, #28]
      break;
 8008d4e:	e000      	b.n	8008d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008d50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIM_ConfigClockSource+0x18>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e0a6      	b.n	8008ed2 <HAL_TIM_ConfigClockSource+0x166>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008daa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d067      	beq.n	8008e8c <HAL_TIM_ConfigClockSource+0x120>
 8008dbc:	2b40      	cmp	r3, #64	; 0x40
 8008dbe:	d80b      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x6c>
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d073      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0x140>
 8008dc4:	2b10      	cmp	r3, #16
 8008dc6:	d802      	bhi.n	8008dce <HAL_TIM_ConfigClockSource+0x62>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d06f      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008dcc:	e078      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d06c      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0x140>
 8008dd2:	2b30      	cmp	r3, #48	; 0x30
 8008dd4:	d06a      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008dd6:	e073      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008dd8:	2b70      	cmp	r3, #112	; 0x70
 8008dda:	d00d      	beq.n	8008df8 <HAL_TIM_ConfigClockSource+0x8c>
 8008ddc:	2b70      	cmp	r3, #112	; 0x70
 8008dde:	d804      	bhi.n	8008dea <HAL_TIM_ConfigClockSource+0x7e>
 8008de0:	2b50      	cmp	r3, #80	; 0x50
 8008de2:	d033      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0xe0>
 8008de4:	2b60      	cmp	r3, #96	; 0x60
 8008de6:	d041      	beq.n	8008e6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008de8:	e06a      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dee:	d066      	beq.n	8008ebe <HAL_TIM_ConfigClockSource+0x152>
 8008df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008df4:	d017      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008df6:	e063      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	6899      	ldr	r1, [r3, #8]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f000 faed 	bl	80093e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	609a      	str	r2, [r3, #8]
      break;
 8008e24:	e04c      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6899      	ldr	r1, [r3, #8]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f000 fad6 	bl	80093e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e48:	609a      	str	r2, [r3, #8]
      break;
 8008e4a:	e039      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6859      	ldr	r1, [r3, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	f000 fa4d 	bl	80092f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2150      	movs	r1, #80	; 0x50
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 faa4 	bl	80093b2 <TIM_ITRx_SetConfig>
      break;
 8008e6a:	e029      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	6859      	ldr	r1, [r3, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f000 fa6b 	bl	8009354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2160      	movs	r1, #96	; 0x60
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fa94 	bl	80093b2 <TIM_ITRx_SetConfig>
      break;
 8008e8a:	e019      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	6859      	ldr	r1, [r3, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f000 fa2d 	bl	80092f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2140      	movs	r1, #64	; 0x40
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fa84 	bl	80093b2 <TIM_ITRx_SetConfig>
      break;
 8008eaa:	e009      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f000 fa7b 	bl	80093b2 <TIM_ITRx_SetConfig>
      break;
 8008ebc:	e000      	b.n	8008ec0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bc80      	pop	{r7}
 8008eea:	4770      	bx	lr

08008eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr

08008efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr
	...

08008f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <TIM_Base_SetConfig+0xb8>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_Base_SetConfig+0x30>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f42:	d007      	beq.n	8008f54 <TIM_Base_SetConfig+0x30>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a26      	ldr	r2, [pc, #152]	; (8008fe0 <TIM_Base_SetConfig+0xbc>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_Base_SetConfig+0x30>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a25      	ldr	r2, [pc, #148]	; (8008fe4 <TIM_Base_SetConfig+0xc0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d108      	bne.n	8008f66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a1c      	ldr	r2, [pc, #112]	; (8008fdc <TIM_Base_SetConfig+0xb8>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d00b      	beq.n	8008f86 <TIM_Base_SetConfig+0x62>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f74:	d007      	beq.n	8008f86 <TIM_Base_SetConfig+0x62>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a19      	ldr	r2, [pc, #100]	; (8008fe0 <TIM_Base_SetConfig+0xbc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d003      	beq.n	8008f86 <TIM_Base_SetConfig+0x62>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a18      	ldr	r2, [pc, #96]	; (8008fe4 <TIM_Base_SetConfig+0xc0>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d108      	bne.n	8008f98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a07      	ldr	r2, [pc, #28]	; (8008fdc <TIM_Base_SetConfig+0xb8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d103      	bne.n	8008fcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	615a      	str	r2, [r3, #20]
}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr
 8008fdc:	40012c00 	.word	0x40012c00
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800

08008fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f023 0201 	bic.w	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f023 0302 	bic.w	r3, r3, #2
 8009030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a1c      	ldr	r2, [pc, #112]	; (80090b0 <TIM_OC1_SetConfig+0xc8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d10c      	bne.n	800905e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f023 0308 	bic.w	r3, r3, #8
 800904a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f023 0304 	bic.w	r3, r3, #4
 800905c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <TIM_OC1_SetConfig+0xc8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d111      	bne.n	800908a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	4313      	orrs	r3, r2
 800907e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	621a      	str	r2, [r3, #32]
}
 80090a4:	bf00      	nop
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40012c00 	.word	0x40012c00

080090b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f023 0210 	bic.w	r2, r3, #16
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f023 0320 	bic.w	r3, r3, #32
 80090fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <TIM_OC2_SetConfig+0xd0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d10d      	bne.n	8009130 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800912e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a14      	ldr	r2, [pc, #80]	; (8009184 <TIM_OC2_SetConfig+0xd0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d113      	bne.n	8009160 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800913e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	4313      	orrs	r3, r2
 8009152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr
 8009184:	40012c00 	.word	0x40012c00

08009188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a1d      	ldr	r2, [pc, #116]	; (8009258 <TIM_OC3_SetConfig+0xd0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d10d      	bne.n	8009202 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a14      	ldr	r2, [pc, #80]	; (8009258 <TIM_OC3_SetConfig+0xd0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d113      	bne.n	8009232 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	621a      	str	r2, [r3, #32]
}
 800924c:	bf00      	nop
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40012c00 	.word	0x40012c00

0800925c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a0f      	ldr	r2, [pc, #60]	; (80092f4 <TIM_OC4_SetConfig+0x98>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d109      	bne.n	80092d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	019b      	lsls	r3, r3, #6
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr
 80092f4:	40012c00 	.word	0x40012c00

080092f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	f023 0201 	bic.w	r2, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4313      	orrs	r3, r2
 800932c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f023 030a 	bic.w	r3, r3, #10
 8009334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4313      	orrs	r3, r2
 800933c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	621a      	str	r2, [r3, #32]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	bc80      	pop	{r7}
 8009352:	4770      	bx	lr

08009354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f023 0210 	bic.w	r2, r3, #16
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800937e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	031b      	lsls	r3, r3, #12
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	011b      	lsls	r3, r3, #4
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	621a      	str	r2, [r3, #32]
}
 80093a8:	bf00      	nop
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bc80      	pop	{r7}
 80093b0:	4770      	bx	lr

080093b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f043 0307 	orr.w	r3, r3, #7
 80093d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	609a      	str	r2, [r3, #8]
}
 80093dc:	bf00      	nop
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr

080093e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b087      	sub	sp, #28
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	021a      	lsls	r2, r3, #8
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	431a      	orrs	r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4313      	orrs	r3, r2
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	609a      	str	r2, [r3, #8]
}
 800941a:	bf00      	nop
 800941c:	371c      	adds	r7, #28
 800941e:	46bd      	mov	sp, r7
 8009420:	bc80      	pop	{r7}
 8009422:	4770      	bx	lr

08009424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009438:	2302      	movs	r3, #2
 800943a:	e032      	b.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009474:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4313      	orrs	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d101      	bne.n	80094c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094c4:	2302      	movs	r3, #2
 80094c6:	e03d      	b.n	8009544 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr

08009560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e03f      	b.n	8009604 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fc f8d9 	bl	8005750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2224      	movs	r2, #36	; 0x24
 80095a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fc64 	bl	8009e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	691a      	ldr	r2, [r3, #16]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	4613      	mov	r3, r2
 800961a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b20      	cmp	r3, #32
 800962a:	f040 8083 	bne.w	8009734 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_UART_Transmit+0x2e>
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e07b      	b.n	8009736 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_UART_Transmit+0x40>
 8009648:	2302      	movs	r3, #2
 800964a:	e074      	b.n	8009736 <HAL_UART_Transmit+0x12a>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2221      	movs	r2, #33	; 0x21
 800965e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009662:	f7fc faf7 	bl	8005c54 <HAL_GetTick>
 8009666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	88fa      	ldrh	r2, [r7, #6]
 800966c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	88fa      	ldrh	r2, [r7, #6]
 8009672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009674:	e042      	b.n	80096fc <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968c:	d122      	bne.n	80096d4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	2180      	movs	r1, #128	; 0x80
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fa74 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e046      	b.n	8009736 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096ba:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	3302      	adds	r3, #2
 80096c8:	60bb      	str	r3, [r7, #8]
 80096ca:	e017      	b.n	80096fc <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60bb      	str	r3, [r7, #8]
 80096d2:	e013      	b.n	80096fc <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	2180      	movs	r1, #128	; 0x80
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fa51 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e023      	b.n	8009736 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	60ba      	str	r2, [r7, #8]
 80096f4:	781a      	ldrb	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1b7      	bne.n	8009676 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2200      	movs	r2, #0
 800970e:	2140      	movs	r1, #64	; 0x40
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fa38 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e00a      	b.n	8009736 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	e000      	b.n	8009736 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b20      	cmp	r3, #32
 8009758:	d166      	bne.n	8009828 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_UART_Receive_DMA+0x26>
 8009760:	88fb      	ldrh	r3, [r7, #6]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e05f      	b.n	800982a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009770:	2b01      	cmp	r3, #1
 8009772:	d101      	bne.n	8009778 <HAL_UART_Receive_DMA+0x38>
 8009774:	2302      	movs	r3, #2
 8009776:	e058      	b.n	800982a <HAL_UART_Receive_DMA+0xea>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	88fa      	ldrh	r2, [r7, #6]
 800978a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2222      	movs	r2, #34	; 0x22
 8009796:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	4a25      	ldr	r2, [pc, #148]	; (8009834 <HAL_UART_Receive_DMA+0xf4>)
 80097a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a6:	4a24      	ldr	r2, [pc, #144]	; (8009838 <HAL_UART_Receive_DMA+0xf8>)
 80097a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ae:	4a23      	ldr	r2, [pc, #140]	; (800983c <HAL_UART_Receive_DMA+0xfc>)
 80097b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b6:	2200      	movs	r2, #0
 80097b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	f7fc fbd3 	bl	8005f7c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	613b      	str	r3, [r7, #16]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009802:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695a      	ldr	r2, [r3, #20]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0201 	orr.w	r2, r2, #1
 8009812:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009822:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	e000      	b.n	800982a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009828:	2302      	movs	r3, #2
  }
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	08009a6f 	.word	0x08009a6f
 8009838:	08009ad7 	.word	0x08009ad7
 800983c:	08009af3 	.word	0x08009af3

08009840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009860:	2300      	movs	r3, #0
 8009862:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10d      	bne.n	8009892 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <HAL_UART_IRQHandler+0x52>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa78 	bl	8009d80 <UART_Receive_IT>
      return;
 8009890:	e0cc      	b.n	8009a2c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 80ab 	beq.w	80099f0 <HAL_UART_IRQHandler+0x1b0>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d105      	bne.n	80098b0 <HAL_UART_IRQHandler+0x70>
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80a0 	beq.w	80099f0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <HAL_UART_IRQHandler+0x90>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d005      	beq.n	80098d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c8:	f043 0201 	orr.w	r2, r3, #1
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <HAL_UART_IRQHandler+0xb0>
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e8:	f043 0202 	orr.w	r2, r3, #2
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <HAL_UART_IRQHandler+0xd0>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	f043 0204 	orr.w	r2, r3, #4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	f003 0308 	and.w	r3, r3, #8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <HAL_UART_IRQHandler+0xf0>
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009928:	f043 0208 	orr.w	r2, r3, #8
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d078      	beq.n	8009a2a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <HAL_UART_IRQHandler+0x112>
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	f003 0320 	and.w	r3, r3, #32
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa17 	bl	8009d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995c:	2b00      	cmp	r3, #0
 800995e:	bf14      	ite	ne
 8009960:	2301      	movne	r3, #1
 8009962:	2300      	moveq	r3, #0
 8009964:	b2db      	uxtb	r3, r3
 8009966:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996c:	f003 0308 	and.w	r3, r3, #8
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <HAL_UART_IRQHandler+0x13a>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d031      	beq.n	80099de <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f962 	bl	8009c44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d023      	beq.n	80099d6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695a      	ldr	r2, [r3, #20]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800999c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d013      	beq.n	80099ce <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099aa:	4a22      	ldr	r2, [pc, #136]	; (8009a34 <HAL_UART_IRQHandler+0x1f4>)
 80099ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fc fb42 	bl	800603c <HAL_DMA_Abort_IT>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d016      	beq.n	80099ec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	e00e      	b.n	80099ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f844 	bl	8009a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	e00a      	b.n	80099ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f840 	bl	8009a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099dc:	e006      	b.n	80099ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f83c 	bl	8009a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80099ea:	e01e      	b.n	8009a2a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ec:	bf00      	nop
    return;
 80099ee:	e01c      	b.n	8009a2a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d008      	beq.n	8009a0c <HAL_UART_IRQHandler+0x1cc>
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f94e 	bl	8009ca6 <UART_Transmit_IT>
    return;
 8009a0a:	e00f      	b.n	8009a2c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <HAL_UART_IRQHandler+0x1ec>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f995 	bl	8009d50 <UART_EndTransmit_IT>
    return;
 8009a26:	bf00      	nop
 8009a28:	e000      	b.n	8009a2c <HAL_UART_IRQHandler+0x1ec>
    return;
 8009a2a:	bf00      	nop
  }
}
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	08009c7f 	.word	0x08009c7f

08009a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr

08009a4a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr

08009a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bc80      	pop	{r7}
 8009a6c:	4770      	bx	lr

08009a6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d11e      	bne.n	8009ac8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a9e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695a      	ldr	r2, [r3, #20]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0201 	bic.w	r2, r2, #1
 8009aae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695a      	ldr	r2, [r3, #20]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009abe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7f9 f8ad 	bl	8002c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ace:	bf00      	nop
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff ffb0 	bl	8009a4a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	bf14      	ite	ne
 8009b12:	2301      	movne	r3, #1
 8009b14:	2300      	moveq	r3, #0
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b21      	cmp	r3, #33	; 0x21
 8009b24:	d108      	bne.n	8009b38 <UART_DMAError+0x46>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009b32:	68b8      	ldr	r0, [r7, #8]
 8009b34:	f000 f871 	bl	8009c1a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bf14      	ite	ne
 8009b46:	2301      	movne	r3, #1
 8009b48:	2300      	moveq	r3, #0
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b22      	cmp	r3, #34	; 0x22
 8009b58:	d108      	bne.n	8009b6c <UART_DMAError+0x7a>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009b66:	68b8      	ldr	r0, [r7, #8]
 8009b68:	f000 f86c 	bl	8009c44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b70:	f043 0210 	orr.w	r2, r3, #16
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b78:	68b8      	ldr	r0, [r7, #8]
 8009b7a:	f7ff ff6f 	bl	8009a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b96:	e02c      	b.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b9e:	d028      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ba6:	f7fc f855 	bl	8005c54 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d21d      	bcs.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	695a      	ldr	r2, [r3, #20]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0201 	bic.w	r2, r2, #1
 8009bd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e00f      	b.n	8009c12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	bf0c      	ite	eq
 8009c02:	2301      	moveq	r3, #1
 8009c04:	2300      	movne	r3, #0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d0c3      	beq.n	8009b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009c30:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr

08009c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009c5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	695a      	ldr	r2, [r3, #20]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0201 	bic.w	r2, r2, #1
 8009c6a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr

08009c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f7ff fedf 	bl	8009a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b21      	cmp	r3, #33	; 0x21
 8009cb8:	d144      	bne.n	8009d44 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc2:	d11a      	bne.n	8009cfa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cd8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	1c9a      	adds	r2, r3, #2
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	621a      	str	r2, [r3, #32]
 8009cec:	e00e      	b.n	8009d0c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	621a      	str	r2, [r3, #32]
 8009cf8:	e008      	b.n	8009d0c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	6211      	str	r1, [r2, #32]
 8009d04:	781a      	ldrb	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10f      	bne.n	8009d40 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bc80      	pop	{r7}
 8009d4e:	4770      	bx	lr

08009d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fe61 	bl	8009a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b22      	cmp	r3, #34	; 0x22
 8009d92:	d171      	bne.n	8009e78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9c:	d123      	bne.n	8009de6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10e      	bne.n	8009dca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	1c9a      	adds	r2, r3, #2
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8009dc8:	e029      	b.n	8009e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	629a      	str	r2, [r3, #40]	; 0x28
 8009de4:	e01b      	b.n	8009e1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10a      	bne.n	8009e04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6858      	ldr	r0, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df8:	1c59      	adds	r1, r3, #1
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6291      	str	r1, [r2, #40]	; 0x28
 8009dfe:	b2c2      	uxtb	r2, r0
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	e00c      	b.n	8009e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	6288      	str	r0, [r1, #40]	; 0x28
 8009e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	3b01      	subs	r3, #1
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d120      	bne.n	8009e74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68da      	ldr	r2, [r3, #12]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 0220 	bic.w	r2, r2, #32
 8009e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68da      	ldr	r2, [r3, #12]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	695a      	ldr	r2, [r3, #20]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0201 	bic.w	r2, r2, #1
 8009e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7f8 fedc 	bl	8002c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	e002      	b.n	8009e7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	e000      	b.n	8009e7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009e78:	2302      	movs	r3, #2
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009ebe:	f023 030c 	bic.w	r3, r3, #12
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699a      	ldr	r2, [r3, #24]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a52      	ldr	r2, [pc, #328]	; (800a030 <UART_SetConfig+0x1ac>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d14e      	bne.n	8009f8a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009eec:	f7fe fc5a 	bl	80087a4 <HAL_RCC_GetPCLK2Freq>
 8009ef0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	009a      	lsls	r2, r3, #2
 8009efc:	441a      	add	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f08:	4a4a      	ldr	r2, [pc, #296]	; (800a034 <UART_SetConfig+0x1b0>)
 8009f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0e:	095b      	lsrs	r3, r3, #5
 8009f10:	0119      	lsls	r1, r3, #4
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009a      	lsls	r2, r3, #2
 8009f1c:	441a      	add	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f28:	4b42      	ldr	r3, [pc, #264]	; (800a034 <UART_SetConfig+0x1b0>)
 8009f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	2064      	movs	r0, #100	; 0x64
 8009f32:	fb00 f303 	mul.w	r3, r0, r3
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	011b      	lsls	r3, r3, #4
 8009f3a:	3332      	adds	r3, #50	; 0x32
 8009f3c:	4a3d      	ldr	r2, [pc, #244]	; (800a034 <UART_SetConfig+0x1b0>)
 8009f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f42:	095b      	lsrs	r3, r3, #5
 8009f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f48:	4419      	add	r1, r3
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009a      	lsls	r2, r3, #2
 8009f54:	441a      	add	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f60:	4b34      	ldr	r3, [pc, #208]	; (800a034 <UART_SetConfig+0x1b0>)
 8009f62:	fba3 0302 	umull	r0, r3, r3, r2
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	2064      	movs	r0, #100	; 0x64
 8009f6a:	fb00 f303 	mul.w	r3, r0, r3
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	3332      	adds	r3, #50	; 0x32
 8009f74:	4a2f      	ldr	r2, [pc, #188]	; (800a034 <UART_SetConfig+0x1b0>)
 8009f76:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	f003 020f 	and.w	r2, r3, #15
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	440a      	add	r2, r1
 8009f86:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009f88:	e04d      	b.n	800a026 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009f8a:	f7fe fbf7 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 8009f8e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009a      	lsls	r2, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa6:	4a23      	ldr	r2, [pc, #140]	; (800a034 <UART_SetConfig+0x1b0>)
 8009fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	0119      	lsls	r1, r3, #4
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009a      	lsls	r2, r3, #2
 8009fba:	441a      	add	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fc6:	4b1b      	ldr	r3, [pc, #108]	; (800a034 <UART_SetConfig+0x1b0>)
 8009fc8:	fba3 0302 	umull	r0, r3, r3, r2
 8009fcc:	095b      	lsrs	r3, r3, #5
 8009fce:	2064      	movs	r0, #100	; 0x64
 8009fd0:	fb00 f303 	mul.w	r3, r0, r3
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	3332      	adds	r3, #50	; 0x32
 8009fda:	4a16      	ldr	r2, [pc, #88]	; (800a034 <UART_SetConfig+0x1b0>)
 8009fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fe6:	4419      	add	r1, r3
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009a      	lsls	r2, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <UART_SetConfig+0x1b0>)
 800a000:	fba3 0302 	umull	r0, r3, r3, r2
 800a004:	095b      	lsrs	r3, r3, #5
 800a006:	2064      	movs	r0, #100	; 0x64
 800a008:	fb00 f303 	mul.w	r3, r0, r3
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	011b      	lsls	r3, r3, #4
 800a010:	3332      	adds	r3, #50	; 0x32
 800a012:	4a08      	ldr	r2, [pc, #32]	; (800a034 <UART_SetConfig+0x1b0>)
 800a014:	fba2 2303 	umull	r2, r3, r2, r3
 800a018:	095b      	lsrs	r3, r3, #5
 800a01a:	f003 020f 	and.w	r2, r3, #15
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	440a      	add	r2, r1
 800a024:	609a      	str	r2, [r3, #8]
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	40013800 	.word	0x40013800
 800a034:	51eb851f 	.word	0x51eb851f

0800a038 <atof>:
 800a038:	2100      	movs	r1, #0
 800a03a:	f000 bedd 	b.w	800adf8 <strtod>

0800a03e <atoi>:
 800a03e:	220a      	movs	r2, #10
 800a040:	2100      	movs	r1, #0
 800a042:	f000 bf67 	b.w	800af14 <strtol>
	...

0800a048 <gcvt>:
 800a048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04a:	461c      	mov	r4, r3
 800a04c:	b085      	sub	sp, #20
 800a04e:	2300      	movs	r3, #0
 800a050:	4615      	mov	r5, r2
 800a052:	2200      	movs	r2, #0
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	f7f6 fcb0 	bl	80009bc <__aeabi_dcmplt>
 800a05c:	4623      	mov	r3, r4
 800a05e:	b118      	cbz	r0, 800a068 <gcvt+0x20>
 800a060:	222d      	movs	r2, #45	; 0x2d
 800a062:	3d01      	subs	r5, #1
 800a064:	f803 2b01 	strb.w	r2, [r3], #1
 800a068:	2267      	movs	r2, #103	; 0x67
 800a06a:	2100      	movs	r1, #0
 800a06c:	e9cd 5300 	strd	r5, r3, [sp]
 800a070:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a074:	4905      	ldr	r1, [pc, #20]	; (800a08c <gcvt+0x44>)
 800a076:	4632      	mov	r2, r6
 800a078:	463b      	mov	r3, r7
 800a07a:	6808      	ldr	r0, [r1, #0]
 800a07c:	f000 ffd4 	bl	800b028 <_gcvt>
 800a080:	2800      	cmp	r0, #0
 800a082:	bf14      	ite	ne
 800a084:	4620      	movne	r0, r4
 800a086:	2000      	moveq	r0, #0
 800a088:	b005      	add	sp, #20
 800a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08c:	20000070 	.word	0x20000070

0800a090 <__errno>:
 800a090:	4b01      	ldr	r3, [pc, #4]	; (800a098 <__errno+0x8>)
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	20000070 	.word	0x20000070

0800a09c <__libc_init_array>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	2500      	movs	r5, #0
 800a0a0:	4e0c      	ldr	r6, [pc, #48]	; (800a0d4 <__libc_init_array+0x38>)
 800a0a2:	4c0d      	ldr	r4, [pc, #52]	; (800a0d8 <__libc_init_array+0x3c>)
 800a0a4:	1ba4      	subs	r4, r4, r6
 800a0a6:	10a4      	asrs	r4, r4, #2
 800a0a8:	42a5      	cmp	r5, r4
 800a0aa:	d109      	bne.n	800a0c0 <__libc_init_array+0x24>
 800a0ac:	f003 fa7a 	bl	800d5a4 <_init>
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	4e0a      	ldr	r6, [pc, #40]	; (800a0dc <__libc_init_array+0x40>)
 800a0b4:	4c0a      	ldr	r4, [pc, #40]	; (800a0e0 <__libc_init_array+0x44>)
 800a0b6:	1ba4      	subs	r4, r4, r6
 800a0b8:	10a4      	asrs	r4, r4, #2
 800a0ba:	42a5      	cmp	r5, r4
 800a0bc:	d105      	bne.n	800a0ca <__libc_init_array+0x2e>
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0c4:	4798      	blx	r3
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	e7ee      	b.n	800a0a8 <__libc_init_array+0xc>
 800a0ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ce:	4798      	blx	r3
 800a0d0:	3501      	adds	r5, #1
 800a0d2:	e7f2      	b.n	800a0ba <__libc_init_array+0x1e>
 800a0d4:	0800e388 	.word	0x0800e388
 800a0d8:	0800e388 	.word	0x0800e388
 800a0dc:	0800e388 	.word	0x0800e388
 800a0e0:	0800e38c 	.word	0x0800e38c

0800a0e4 <memset>:
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	4402      	add	r2, r0
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d100      	bne.n	800a0ee <memset+0xa>
 800a0ec:	4770      	bx	lr
 800a0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a0f2:	e7f9      	b.n	800a0e8 <memset+0x4>

0800a0f4 <siprintf>:
 800a0f4:	b40e      	push	{r1, r2, r3}
 800a0f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0fa:	b500      	push	{lr}
 800a0fc:	b09c      	sub	sp, #112	; 0x70
 800a0fe:	ab1d      	add	r3, sp, #116	; 0x74
 800a100:	9002      	str	r0, [sp, #8]
 800a102:	9006      	str	r0, [sp, #24]
 800a104:	9107      	str	r1, [sp, #28]
 800a106:	9104      	str	r1, [sp, #16]
 800a108:	4808      	ldr	r0, [pc, #32]	; (800a12c <siprintf+0x38>)
 800a10a:	4909      	ldr	r1, [pc, #36]	; (800a130 <siprintf+0x3c>)
 800a10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a110:	9105      	str	r1, [sp, #20]
 800a112:	6800      	ldr	r0, [r0, #0]
 800a114:	a902      	add	r1, sp, #8
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	f002 f89c 	bl	800c254 <_svfiprintf_r>
 800a11c:	2200      	movs	r2, #0
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	b01c      	add	sp, #112	; 0x70
 800a124:	f85d eb04 	ldr.w	lr, [sp], #4
 800a128:	b003      	add	sp, #12
 800a12a:	4770      	bx	lr
 800a12c:	20000070 	.word	0x20000070
 800a130:	ffff0208 	.word	0xffff0208

0800a134 <strcat>:
 800a134:	4603      	mov	r3, r0
 800a136:	b510      	push	{r4, lr}
 800a138:	781a      	ldrb	r2, [r3, #0]
 800a13a:	1c5c      	adds	r4, r3, #1
 800a13c:	b93a      	cbnz	r2, 800a14e <strcat+0x1a>
 800a13e:	3b01      	subs	r3, #1
 800a140:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a144:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a148:	2a00      	cmp	r2, #0
 800a14a:	d1f9      	bne.n	800a140 <strcat+0xc>
 800a14c:	bd10      	pop	{r4, pc}
 800a14e:	4623      	mov	r3, r4
 800a150:	e7f2      	b.n	800a138 <strcat+0x4>

0800a152 <strchr>:
 800a152:	b2c9      	uxtb	r1, r1
 800a154:	4603      	mov	r3, r0
 800a156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a15a:	b11a      	cbz	r2, 800a164 <strchr+0x12>
 800a15c:	428a      	cmp	r2, r1
 800a15e:	d1f9      	bne.n	800a154 <strchr+0x2>
 800a160:	4618      	mov	r0, r3
 800a162:	4770      	bx	lr
 800a164:	2900      	cmp	r1, #0
 800a166:	bf18      	it	ne
 800a168:	2300      	movne	r3, #0
 800a16a:	e7f9      	b.n	800a160 <strchr+0xe>

0800a16c <strcpy>:
 800a16c:	4603      	mov	r3, r0
 800a16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a172:	f803 2b01 	strb.w	r2, [r3], #1
 800a176:	2a00      	cmp	r2, #0
 800a178:	d1f9      	bne.n	800a16e <strcpy+0x2>
 800a17a:	4770      	bx	lr

0800a17c <strstr>:
 800a17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17e:	7803      	ldrb	r3, [r0, #0]
 800a180:	b17b      	cbz	r3, 800a1a2 <strstr+0x26>
 800a182:	4604      	mov	r4, r0
 800a184:	7823      	ldrb	r3, [r4, #0]
 800a186:	4620      	mov	r0, r4
 800a188:	1c66      	adds	r6, r4, #1
 800a18a:	b17b      	cbz	r3, 800a1ac <strstr+0x30>
 800a18c:	1e4a      	subs	r2, r1, #1
 800a18e:	1e63      	subs	r3, r4, #1
 800a190:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a194:	b14d      	cbz	r5, 800a1aa <strstr+0x2e>
 800a196:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a19a:	4634      	mov	r4, r6
 800a19c:	42af      	cmp	r7, r5
 800a19e:	d0f7      	beq.n	800a190 <strstr+0x14>
 800a1a0:	e7f0      	b.n	800a184 <strstr+0x8>
 800a1a2:	780b      	ldrb	r3, [r1, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bf18      	it	ne
 800a1a8:	2000      	movne	r0, #0
 800a1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	e7fc      	b.n	800a1aa <strstr+0x2e>

0800a1b0 <sulp>:
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	4690      	mov	r8, r2
 800a1b8:	f001 fe18 	bl	800bdec <__ulp>
 800a1bc:	4604      	mov	r4, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	f1b8 0f00 	cmp.w	r8, #0
 800a1c4:	d011      	beq.n	800a1ea <sulp+0x3a>
 800a1c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a1ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dd0b      	ble.n	800a1ea <sulp+0x3a>
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a1da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a1de:	4622      	mov	r2, r4
 800a1e0:	462b      	mov	r3, r5
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f2:	0000      	movs	r0, r0
 800a1f4:	0000      	movs	r0, r0
	...

0800a1f8 <_strtod_l>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	461f      	mov	r7, r3
 800a1fe:	2300      	movs	r3, #0
 800a200:	b0a1      	sub	sp, #132	; 0x84
 800a202:	4683      	mov	fp, r0
 800a204:	4638      	mov	r0, r7
 800a206:	460e      	mov	r6, r1
 800a208:	9217      	str	r2, [sp, #92]	; 0x5c
 800a20a:	931c      	str	r3, [sp, #112]	; 0x70
 800a20c:	f001 fb05 	bl	800b81a <__localeconv_l>
 800a210:	4680      	mov	r8, r0
 800a212:	6800      	ldr	r0, [r0, #0]
 800a214:	f7f5 ff9c 	bl	8000150 <strlen>
 800a218:	f04f 0900 	mov.w	r9, #0
 800a21c:	4604      	mov	r4, r0
 800a21e:	f04f 0a00 	mov.w	sl, #0
 800a222:	961b      	str	r6, [sp, #108]	; 0x6c
 800a224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	2a0d      	cmp	r2, #13
 800a22a:	d832      	bhi.n	800a292 <_strtod_l+0x9a>
 800a22c:	2a09      	cmp	r2, #9
 800a22e:	d236      	bcs.n	800a29e <_strtod_l+0xa6>
 800a230:	2a00      	cmp	r2, #0
 800a232:	d03e      	beq.n	800a2b2 <_strtod_l+0xba>
 800a234:	2300      	movs	r3, #0
 800a236:	930d      	str	r3, [sp, #52]	; 0x34
 800a238:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a23a:	782b      	ldrb	r3, [r5, #0]
 800a23c:	2b30      	cmp	r3, #48	; 0x30
 800a23e:	f040 80ac 	bne.w	800a39a <_strtod_l+0x1a2>
 800a242:	786b      	ldrb	r3, [r5, #1]
 800a244:	2b58      	cmp	r3, #88	; 0x58
 800a246:	d001      	beq.n	800a24c <_strtod_l+0x54>
 800a248:	2b78      	cmp	r3, #120	; 0x78
 800a24a:	d167      	bne.n	800a31c <_strtod_l+0x124>
 800a24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a24e:	9702      	str	r7, [sp, #8]
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	ab1c      	add	r3, sp, #112	; 0x70
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	4a89      	ldr	r2, [pc, #548]	; (800a47c <_strtod_l+0x284>)
 800a258:	ab1d      	add	r3, sp, #116	; 0x74
 800a25a:	a91b      	add	r1, sp, #108	; 0x6c
 800a25c:	4658      	mov	r0, fp
 800a25e:	f001 f801 	bl	800b264 <__gethex>
 800a262:	f010 0407 	ands.w	r4, r0, #7
 800a266:	4606      	mov	r6, r0
 800a268:	d005      	beq.n	800a276 <_strtod_l+0x7e>
 800a26a:	2c06      	cmp	r4, #6
 800a26c:	d12b      	bne.n	800a2c6 <_strtod_l+0xce>
 800a26e:	2300      	movs	r3, #0
 800a270:	3501      	adds	r5, #1
 800a272:	951b      	str	r5, [sp, #108]	; 0x6c
 800a274:	930d      	str	r3, [sp, #52]	; 0x34
 800a276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f040 85a6 	bne.w	800adca <_strtod_l+0xbd2>
 800a27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a280:	b1e3      	cbz	r3, 800a2bc <_strtod_l+0xc4>
 800a282:	464a      	mov	r2, r9
 800a284:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a288:	4610      	mov	r0, r2
 800a28a:	4619      	mov	r1, r3
 800a28c:	b021      	add	sp, #132	; 0x84
 800a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a292:	2a2b      	cmp	r2, #43	; 0x2b
 800a294:	d015      	beq.n	800a2c2 <_strtod_l+0xca>
 800a296:	2a2d      	cmp	r2, #45	; 0x2d
 800a298:	d004      	beq.n	800a2a4 <_strtod_l+0xac>
 800a29a:	2a20      	cmp	r2, #32
 800a29c:	d1ca      	bne.n	800a234 <_strtod_l+0x3c>
 800a29e:	3301      	adds	r3, #1
 800a2a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a2a2:	e7bf      	b.n	800a224 <_strtod_l+0x2c>
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	920d      	str	r2, [sp, #52]	; 0x34
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1c2      	bne.n	800a238 <_strtod_l+0x40>
 800a2b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2b4:	961b      	str	r6, [sp, #108]	; 0x6c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f040 8585 	bne.w	800adc6 <_strtod_l+0xbce>
 800a2bc:	464a      	mov	r2, r9
 800a2be:	4653      	mov	r3, sl
 800a2c0:	e7e2      	b.n	800a288 <_strtod_l+0x90>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	e7ef      	b.n	800a2a6 <_strtod_l+0xae>
 800a2c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a2c8:	b13a      	cbz	r2, 800a2da <_strtod_l+0xe2>
 800a2ca:	2135      	movs	r1, #53	; 0x35
 800a2cc:	a81e      	add	r0, sp, #120	; 0x78
 800a2ce:	f001 fe9d 	bl	800c00c <__copybits>
 800a2d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2d4:	4658      	mov	r0, fp
 800a2d6:	f001 faf3 	bl	800b8c0 <_Bfree>
 800a2da:	3c01      	subs	r4, #1
 800a2dc:	2c04      	cmp	r4, #4
 800a2de:	d806      	bhi.n	800a2ee <_strtod_l+0xf6>
 800a2e0:	e8df f004 	tbb	[pc, r4]
 800a2e4:	1714030a 	.word	0x1714030a
 800a2e8:	0a          	.byte	0x0a
 800a2e9:	00          	.byte	0x00
 800a2ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a2ee:	0731      	lsls	r1, r6, #28
 800a2f0:	d5c1      	bpl.n	800a276 <_strtod_l+0x7e>
 800a2f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a2f6:	e7be      	b.n	800a276 <_strtod_l+0x7e>
 800a2f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a2fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a2fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a306:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a30a:	e7f0      	b.n	800a2ee <_strtod_l+0xf6>
 800a30c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a480 <_strtod_l+0x288>
 800a310:	e7ed      	b.n	800a2ee <_strtod_l+0xf6>
 800a312:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a316:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a31a:	e7e8      	b.n	800a2ee <_strtod_l+0xf6>
 800a31c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	921b      	str	r2, [sp, #108]	; 0x6c
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b30      	cmp	r3, #48	; 0x30
 800a326:	d0f9      	beq.n	800a31c <_strtod_l+0x124>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0a4      	beq.n	800a276 <_strtod_l+0x7e>
 800a32c:	2301      	movs	r3, #1
 800a32e:	2500      	movs	r5, #0
 800a330:	220a      	movs	r2, #10
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a336:	9506      	str	r5, [sp, #24]
 800a338:	9308      	str	r3, [sp, #32]
 800a33a:	9504      	str	r5, [sp, #16]
 800a33c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a33e:	7807      	ldrb	r7, [r0, #0]
 800a340:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a344:	b2d9      	uxtb	r1, r3
 800a346:	2909      	cmp	r1, #9
 800a348:	d929      	bls.n	800a39e <_strtod_l+0x1a6>
 800a34a:	4622      	mov	r2, r4
 800a34c:	f8d8 1000 	ldr.w	r1, [r8]
 800a350:	f002 fa10 	bl	800c774 <strncmp>
 800a354:	2800      	cmp	r0, #0
 800a356:	d031      	beq.n	800a3bc <_strtod_l+0x1c4>
 800a358:	2000      	movs	r0, #0
 800a35a:	463b      	mov	r3, r7
 800a35c:	4602      	mov	r2, r0
 800a35e:	9c04      	ldr	r4, [sp, #16]
 800a360:	9005      	str	r0, [sp, #20]
 800a362:	2b65      	cmp	r3, #101	; 0x65
 800a364:	d001      	beq.n	800a36a <_strtod_l+0x172>
 800a366:	2b45      	cmp	r3, #69	; 0x45
 800a368:	d114      	bne.n	800a394 <_strtod_l+0x19c>
 800a36a:	b924      	cbnz	r4, 800a376 <_strtod_l+0x17e>
 800a36c:	b910      	cbnz	r0, 800a374 <_strtod_l+0x17c>
 800a36e:	9b07      	ldr	r3, [sp, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d09e      	beq.n	800a2b2 <_strtod_l+0xba>
 800a374:	2400      	movs	r4, #0
 800a376:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a378:	1c73      	adds	r3, r6, #1
 800a37a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a37c:	7873      	ldrb	r3, [r6, #1]
 800a37e:	2b2b      	cmp	r3, #43	; 0x2b
 800a380:	d078      	beq.n	800a474 <_strtod_l+0x27c>
 800a382:	2b2d      	cmp	r3, #45	; 0x2d
 800a384:	d070      	beq.n	800a468 <_strtod_l+0x270>
 800a386:	f04f 0c00 	mov.w	ip, #0
 800a38a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a38e:	2f09      	cmp	r7, #9
 800a390:	d97c      	bls.n	800a48c <_strtod_l+0x294>
 800a392:	961b      	str	r6, [sp, #108]	; 0x6c
 800a394:	f04f 0e00 	mov.w	lr, #0
 800a398:	e09a      	b.n	800a4d0 <_strtod_l+0x2d8>
 800a39a:	2300      	movs	r3, #0
 800a39c:	e7c7      	b.n	800a32e <_strtod_l+0x136>
 800a39e:	9904      	ldr	r1, [sp, #16]
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	2908      	cmp	r1, #8
 800a3a4:	bfd7      	itett	le
 800a3a6:	9906      	ldrle	r1, [sp, #24]
 800a3a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a3ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3b0:	9306      	strle	r3, [sp, #24]
 800a3b2:	9b04      	ldr	r3, [sp, #16]
 800a3b4:	901b      	str	r0, [sp, #108]	; 0x6c
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	e7bf      	b.n	800a33c <_strtod_l+0x144>
 800a3bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3be:	191a      	adds	r2, r3, r4
 800a3c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3c2:	9a04      	ldr	r2, [sp, #16]
 800a3c4:	5d1b      	ldrb	r3, [r3, r4]
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	d037      	beq.n	800a43a <_strtod_l+0x242>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	9c04      	ldr	r4, [sp, #16]
 800a3ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a3d2:	2909      	cmp	r1, #9
 800a3d4:	d913      	bls.n	800a3fe <_strtod_l+0x206>
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	9105      	str	r1, [sp, #20]
 800a3da:	e7c2      	b.n	800a362 <_strtod_l+0x16a>
 800a3dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3de:	3001      	adds	r0, #1
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	2b30      	cmp	r3, #48	; 0x30
 800a3e8:	d0f8      	beq.n	800a3dc <_strtod_l+0x1e4>
 800a3ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a3ee:	2a08      	cmp	r2, #8
 800a3f0:	f200 84f0 	bhi.w	800add4 <_strtod_l+0xbdc>
 800a3f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a3f6:	9208      	str	r2, [sp, #32]
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a402:	f100 0101 	add.w	r1, r0, #1
 800a406:	d012      	beq.n	800a42e <_strtod_l+0x236>
 800a408:	440a      	add	r2, r1
 800a40a:	270a      	movs	r7, #10
 800a40c:	4621      	mov	r1, r4
 800a40e:	eb00 0c04 	add.w	ip, r0, r4
 800a412:	458c      	cmp	ip, r1
 800a414:	d113      	bne.n	800a43e <_strtod_l+0x246>
 800a416:	1821      	adds	r1, r4, r0
 800a418:	2908      	cmp	r1, #8
 800a41a:	f104 0401 	add.w	r4, r4, #1
 800a41e:	4404      	add	r4, r0
 800a420:	dc19      	bgt.n	800a456 <_strtod_l+0x25e>
 800a422:	210a      	movs	r1, #10
 800a424:	9b06      	ldr	r3, [sp, #24]
 800a426:	fb01 e303 	mla	r3, r1, r3, lr
 800a42a:	9306      	str	r3, [sp, #24]
 800a42c:	2100      	movs	r1, #0
 800a42e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a430:	1c58      	adds	r0, r3, #1
 800a432:	901b      	str	r0, [sp, #108]	; 0x6c
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	4608      	mov	r0, r1
 800a438:	e7c9      	b.n	800a3ce <_strtod_l+0x1d6>
 800a43a:	9804      	ldr	r0, [sp, #16]
 800a43c:	e7d3      	b.n	800a3e6 <_strtod_l+0x1ee>
 800a43e:	2908      	cmp	r1, #8
 800a440:	f101 0101 	add.w	r1, r1, #1
 800a444:	dc03      	bgt.n	800a44e <_strtod_l+0x256>
 800a446:	9b06      	ldr	r3, [sp, #24]
 800a448:	437b      	muls	r3, r7
 800a44a:	9306      	str	r3, [sp, #24]
 800a44c:	e7e1      	b.n	800a412 <_strtod_l+0x21a>
 800a44e:	2910      	cmp	r1, #16
 800a450:	bfd8      	it	le
 800a452:	437d      	mulle	r5, r7
 800a454:	e7dd      	b.n	800a412 <_strtod_l+0x21a>
 800a456:	2c10      	cmp	r4, #16
 800a458:	bfdc      	itt	le
 800a45a:	210a      	movle	r1, #10
 800a45c:	fb01 e505 	mlale	r5, r1, r5, lr
 800a460:	e7e4      	b.n	800a42c <_strtod_l+0x234>
 800a462:	2301      	movs	r3, #1
 800a464:	9305      	str	r3, [sp, #20]
 800a466:	e781      	b.n	800a36c <_strtod_l+0x174>
 800a468:	f04f 0c01 	mov.w	ip, #1
 800a46c:	1cb3      	adds	r3, r6, #2
 800a46e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a470:	78b3      	ldrb	r3, [r6, #2]
 800a472:	e78a      	b.n	800a38a <_strtod_l+0x192>
 800a474:	f04f 0c00 	mov.w	ip, #0
 800a478:	e7f8      	b.n	800a46c <_strtod_l+0x274>
 800a47a:	bf00      	nop
 800a47c:	0800e0e8 	.word	0x0800e0e8
 800a480:	7ff00000 	.word	0x7ff00000
 800a484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a486:	1c5f      	adds	r7, r3, #1
 800a488:	971b      	str	r7, [sp, #108]	; 0x6c
 800a48a:	785b      	ldrb	r3, [r3, #1]
 800a48c:	2b30      	cmp	r3, #48	; 0x30
 800a48e:	d0f9      	beq.n	800a484 <_strtod_l+0x28c>
 800a490:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a494:	2f08      	cmp	r7, #8
 800a496:	f63f af7d 	bhi.w	800a394 <_strtod_l+0x19c>
 800a49a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a49e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4a4:	1c5f      	adds	r7, r3, #1
 800a4a6:	971b      	str	r7, [sp, #108]	; 0x6c
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a4ae:	f1b8 0f09 	cmp.w	r8, #9
 800a4b2:	d937      	bls.n	800a524 <_strtod_l+0x32c>
 800a4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4b6:	1a7f      	subs	r7, r7, r1
 800a4b8:	2f08      	cmp	r7, #8
 800a4ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a4be:	dc37      	bgt.n	800a530 <_strtod_l+0x338>
 800a4c0:	45be      	cmp	lr, r7
 800a4c2:	bfa8      	it	ge
 800a4c4:	46be      	movge	lr, r7
 800a4c6:	f1bc 0f00 	cmp.w	ip, #0
 800a4ca:	d001      	beq.n	800a4d0 <_strtod_l+0x2d8>
 800a4cc:	f1ce 0e00 	rsb	lr, lr, #0
 800a4d0:	2c00      	cmp	r4, #0
 800a4d2:	d151      	bne.n	800a578 <_strtod_l+0x380>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f47f aece 	bne.w	800a276 <_strtod_l+0x7e>
 800a4da:	9a07      	ldr	r2, [sp, #28]
 800a4dc:	2a00      	cmp	r2, #0
 800a4de:	f47f aeca 	bne.w	800a276 <_strtod_l+0x7e>
 800a4e2:	9a05      	ldr	r2, [sp, #20]
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	f47f aee4 	bne.w	800a2b2 <_strtod_l+0xba>
 800a4ea:	2b4e      	cmp	r3, #78	; 0x4e
 800a4ec:	d027      	beq.n	800a53e <_strtod_l+0x346>
 800a4ee:	dc21      	bgt.n	800a534 <_strtod_l+0x33c>
 800a4f0:	2b49      	cmp	r3, #73	; 0x49
 800a4f2:	f47f aede 	bne.w	800a2b2 <_strtod_l+0xba>
 800a4f6:	49a4      	ldr	r1, [pc, #656]	; (800a788 <_strtod_l+0x590>)
 800a4f8:	a81b      	add	r0, sp, #108	; 0x6c
 800a4fa:	f001 f8e7 	bl	800b6cc <__match>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f aed7 	beq.w	800a2b2 <_strtod_l+0xba>
 800a504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a506:	49a1      	ldr	r1, [pc, #644]	; (800a78c <_strtod_l+0x594>)
 800a508:	3b01      	subs	r3, #1
 800a50a:	a81b      	add	r0, sp, #108	; 0x6c
 800a50c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a50e:	f001 f8dd 	bl	800b6cc <__match>
 800a512:	b910      	cbnz	r0, 800a51a <_strtod_l+0x322>
 800a514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a516:	3301      	adds	r3, #1
 800a518:	931b      	str	r3, [sp, #108]	; 0x6c
 800a51a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a7a0 <_strtod_l+0x5a8>
 800a51e:	f04f 0900 	mov.w	r9, #0
 800a522:	e6a8      	b.n	800a276 <_strtod_l+0x7e>
 800a524:	210a      	movs	r1, #10
 800a526:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a52a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a52e:	e7b8      	b.n	800a4a2 <_strtod_l+0x2aa>
 800a530:	46be      	mov	lr, r7
 800a532:	e7c8      	b.n	800a4c6 <_strtod_l+0x2ce>
 800a534:	2b69      	cmp	r3, #105	; 0x69
 800a536:	d0de      	beq.n	800a4f6 <_strtod_l+0x2fe>
 800a538:	2b6e      	cmp	r3, #110	; 0x6e
 800a53a:	f47f aeba 	bne.w	800a2b2 <_strtod_l+0xba>
 800a53e:	4994      	ldr	r1, [pc, #592]	; (800a790 <_strtod_l+0x598>)
 800a540:	a81b      	add	r0, sp, #108	; 0x6c
 800a542:	f001 f8c3 	bl	800b6cc <__match>
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f aeb3 	beq.w	800a2b2 <_strtod_l+0xba>
 800a54c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b28      	cmp	r3, #40	; 0x28
 800a552:	d10e      	bne.n	800a572 <_strtod_l+0x37a>
 800a554:	aa1e      	add	r2, sp, #120	; 0x78
 800a556:	498f      	ldr	r1, [pc, #572]	; (800a794 <_strtod_l+0x59c>)
 800a558:	a81b      	add	r0, sp, #108	; 0x6c
 800a55a:	f001 f8cb 	bl	800b6f4 <__hexnan>
 800a55e:	2805      	cmp	r0, #5
 800a560:	d107      	bne.n	800a572 <_strtod_l+0x37a>
 800a562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a564:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a568:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a56c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a570:	e681      	b.n	800a276 <_strtod_l+0x7e>
 800a572:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a7a8 <_strtod_l+0x5b0>
 800a576:	e7d2      	b.n	800a51e <_strtod_l+0x326>
 800a578:	ebae 0302 	sub.w	r3, lr, r2
 800a57c:	9307      	str	r3, [sp, #28]
 800a57e:	9b04      	ldr	r3, [sp, #16]
 800a580:	9806      	ldr	r0, [sp, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf08      	it	eq
 800a586:	4623      	moveq	r3, r4
 800a588:	2c10      	cmp	r4, #16
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	46a0      	mov	r8, r4
 800a58e:	bfa8      	it	ge
 800a590:	f04f 0810 	movge.w	r8, #16
 800a594:	f7f5 ff26 	bl	80003e4 <__aeabi_ui2d>
 800a598:	2c09      	cmp	r4, #9
 800a59a:	4681      	mov	r9, r0
 800a59c:	468a      	mov	sl, r1
 800a59e:	dc13      	bgt.n	800a5c8 <_strtod_l+0x3d0>
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f43f ae67 	beq.w	800a276 <_strtod_l+0x7e>
 800a5a8:	9b07      	ldr	r3, [sp, #28]
 800a5aa:	dd7e      	ble.n	800a6aa <_strtod_l+0x4b2>
 800a5ac:	2b16      	cmp	r3, #22
 800a5ae:	dc65      	bgt.n	800a67c <_strtod_l+0x484>
 800a5b0:	4a79      	ldr	r2, [pc, #484]	; (800a798 <_strtod_l+0x5a0>)
 800a5b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a5b6:	464a      	mov	r2, r9
 800a5b8:	e9de 0100 	ldrd	r0, r1, [lr]
 800a5bc:	4653      	mov	r3, sl
 800a5be:	f7f5 ff8b 	bl	80004d8 <__aeabi_dmul>
 800a5c2:	4681      	mov	r9, r0
 800a5c4:	468a      	mov	sl, r1
 800a5c6:	e656      	b.n	800a276 <_strtod_l+0x7e>
 800a5c8:	4b73      	ldr	r3, [pc, #460]	; (800a798 <_strtod_l+0x5a0>)
 800a5ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a5ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a5d2:	f7f5 ff81 	bl	80004d8 <__aeabi_dmul>
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	4628      	mov	r0, r5
 800a5da:	460f      	mov	r7, r1
 800a5dc:	f7f5 ff02 	bl	80003e4 <__aeabi_ui2d>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f5 fdc0 	bl	800016c <__adddf3>
 800a5ec:	2c0f      	cmp	r4, #15
 800a5ee:	4681      	mov	r9, r0
 800a5f0:	468a      	mov	sl, r1
 800a5f2:	ddd5      	ble.n	800a5a0 <_strtod_l+0x3a8>
 800a5f4:	9b07      	ldr	r3, [sp, #28]
 800a5f6:	eba4 0808 	sub.w	r8, r4, r8
 800a5fa:	4498      	add	r8, r3
 800a5fc:	f1b8 0f00 	cmp.w	r8, #0
 800a600:	f340 809a 	ble.w	800a738 <_strtod_l+0x540>
 800a604:	f018 030f 	ands.w	r3, r8, #15
 800a608:	d00a      	beq.n	800a620 <_strtod_l+0x428>
 800a60a:	4963      	ldr	r1, [pc, #396]	; (800a798 <_strtod_l+0x5a0>)
 800a60c:	464a      	mov	r2, r9
 800a60e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a612:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a616:	4653      	mov	r3, sl
 800a618:	f7f5 ff5e 	bl	80004d8 <__aeabi_dmul>
 800a61c:	4681      	mov	r9, r0
 800a61e:	468a      	mov	sl, r1
 800a620:	f038 080f 	bics.w	r8, r8, #15
 800a624:	d077      	beq.n	800a716 <_strtod_l+0x51e>
 800a626:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a62a:	dd4b      	ble.n	800a6c4 <_strtod_l+0x4cc>
 800a62c:	f04f 0800 	mov.w	r8, #0
 800a630:	f8cd 8010 	str.w	r8, [sp, #16]
 800a634:	f8cd 8020 	str.w	r8, [sp, #32]
 800a638:	f8cd 8018 	str.w	r8, [sp, #24]
 800a63c:	2322      	movs	r3, #34	; 0x22
 800a63e:	f04f 0900 	mov.w	r9, #0
 800a642:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a7a0 <_strtod_l+0x5a8>
 800a646:	f8cb 3000 	str.w	r3, [fp]
 800a64a:	9b08      	ldr	r3, [sp, #32]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f43f ae12 	beq.w	800a276 <_strtod_l+0x7e>
 800a652:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a654:	4658      	mov	r0, fp
 800a656:	f001 f933 	bl	800b8c0 <_Bfree>
 800a65a:	9906      	ldr	r1, [sp, #24]
 800a65c:	4658      	mov	r0, fp
 800a65e:	f001 f92f 	bl	800b8c0 <_Bfree>
 800a662:	9904      	ldr	r1, [sp, #16]
 800a664:	4658      	mov	r0, fp
 800a666:	f001 f92b 	bl	800b8c0 <_Bfree>
 800a66a:	9908      	ldr	r1, [sp, #32]
 800a66c:	4658      	mov	r0, fp
 800a66e:	f001 f927 	bl	800b8c0 <_Bfree>
 800a672:	4641      	mov	r1, r8
 800a674:	4658      	mov	r0, fp
 800a676:	f001 f923 	bl	800b8c0 <_Bfree>
 800a67a:	e5fc      	b.n	800a276 <_strtod_l+0x7e>
 800a67c:	9a07      	ldr	r2, [sp, #28]
 800a67e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a682:	4293      	cmp	r3, r2
 800a684:	dbb6      	blt.n	800a5f4 <_strtod_l+0x3fc>
 800a686:	4d44      	ldr	r5, [pc, #272]	; (800a798 <_strtod_l+0x5a0>)
 800a688:	f1c4 040f 	rsb	r4, r4, #15
 800a68c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a690:	464a      	mov	r2, r9
 800a692:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a696:	4653      	mov	r3, sl
 800a698:	f7f5 ff1e 	bl	80004d8 <__aeabi_dmul>
 800a69c:	9b07      	ldr	r3, [sp, #28]
 800a69e:	1b1c      	subs	r4, r3, r4
 800a6a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a6a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6a8:	e789      	b.n	800a5be <_strtod_l+0x3c6>
 800a6aa:	f113 0f16 	cmn.w	r3, #22
 800a6ae:	dba1      	blt.n	800a5f4 <_strtod_l+0x3fc>
 800a6b0:	4a39      	ldr	r2, [pc, #228]	; (800a798 <_strtod_l+0x5a0>)
 800a6b2:	4648      	mov	r0, r9
 800a6b4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a6b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a6bc:	4651      	mov	r1, sl
 800a6be:	f7f6 f835 	bl	800072c <__aeabi_ddiv>
 800a6c2:	e77e      	b.n	800a5c2 <_strtod_l+0x3ca>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	4651      	mov	r1, sl
 800a6ca:	461d      	mov	r5, r3
 800a6cc:	4e33      	ldr	r6, [pc, #204]	; (800a79c <_strtod_l+0x5a4>)
 800a6ce:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a6d2:	f1b8 0f01 	cmp.w	r8, #1
 800a6d6:	dc21      	bgt.n	800a71c <_strtod_l+0x524>
 800a6d8:	b10b      	cbz	r3, 800a6de <_strtod_l+0x4e6>
 800a6da:	4681      	mov	r9, r0
 800a6dc:	468a      	mov	sl, r1
 800a6de:	4b2f      	ldr	r3, [pc, #188]	; (800a79c <_strtod_l+0x5a4>)
 800a6e0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a6e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a6e8:	464a      	mov	r2, r9
 800a6ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a6ee:	4653      	mov	r3, sl
 800a6f0:	f7f5 fef2 	bl	80004d8 <__aeabi_dmul>
 800a6f4:	4b2a      	ldr	r3, [pc, #168]	; (800a7a0 <_strtod_l+0x5a8>)
 800a6f6:	460a      	mov	r2, r1
 800a6f8:	400b      	ands	r3, r1
 800a6fa:	492a      	ldr	r1, [pc, #168]	; (800a7a4 <_strtod_l+0x5ac>)
 800a6fc:	4681      	mov	r9, r0
 800a6fe:	428b      	cmp	r3, r1
 800a700:	d894      	bhi.n	800a62c <_strtod_l+0x434>
 800a702:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a706:	428b      	cmp	r3, r1
 800a708:	bf86      	itte	hi
 800a70a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800a70e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a7ac <_strtod_l+0x5b4>
 800a712:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a716:	2300      	movs	r3, #0
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	e07b      	b.n	800a814 <_strtod_l+0x61c>
 800a71c:	f018 0f01 	tst.w	r8, #1
 800a720:	d006      	beq.n	800a730 <_strtod_l+0x538>
 800a722:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7f5 fed5 	bl	80004d8 <__aeabi_dmul>
 800a72e:	2301      	movs	r3, #1
 800a730:	3501      	adds	r5, #1
 800a732:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a736:	e7cc      	b.n	800a6d2 <_strtod_l+0x4da>
 800a738:	d0ed      	beq.n	800a716 <_strtod_l+0x51e>
 800a73a:	f1c8 0800 	rsb	r8, r8, #0
 800a73e:	f018 020f 	ands.w	r2, r8, #15
 800a742:	d00a      	beq.n	800a75a <_strtod_l+0x562>
 800a744:	4b14      	ldr	r3, [pc, #80]	; (800a798 <_strtod_l+0x5a0>)
 800a746:	4648      	mov	r0, r9
 800a748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a74c:	4651      	mov	r1, sl
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 ffeb 	bl	800072c <__aeabi_ddiv>
 800a756:	4681      	mov	r9, r0
 800a758:	468a      	mov	sl, r1
 800a75a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a75e:	d0da      	beq.n	800a716 <_strtod_l+0x51e>
 800a760:	f1b8 0f1f 	cmp.w	r8, #31
 800a764:	dd24      	ble.n	800a7b0 <_strtod_l+0x5b8>
 800a766:	f04f 0800 	mov.w	r8, #0
 800a76a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a76e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a772:	f8cd 8018 	str.w	r8, [sp, #24]
 800a776:	2322      	movs	r3, #34	; 0x22
 800a778:	f04f 0900 	mov.w	r9, #0
 800a77c:	f04f 0a00 	mov.w	sl, #0
 800a780:	f8cb 3000 	str.w	r3, [fp]
 800a784:	e761      	b.n	800a64a <_strtod_l+0x452>
 800a786:	bf00      	nop
 800a788:	0800e0e0 	.word	0x0800e0e0
 800a78c:	0800e37b 	.word	0x0800e37b
 800a790:	0800e0e3 	.word	0x0800e0e3
 800a794:	0800e0fc 	.word	0x0800e0fc
 800a798:	0800e170 	.word	0x0800e170
 800a79c:	0800e148 	.word	0x0800e148
 800a7a0:	7ff00000 	.word	0x7ff00000
 800a7a4:	7ca00000 	.word	0x7ca00000
 800a7a8:	fff80000 	.word	0xfff80000
 800a7ac:	7fefffff 	.word	0x7fefffff
 800a7b0:	f018 0310 	ands.w	r3, r8, #16
 800a7b4:	bf18      	it	ne
 800a7b6:	236a      	movne	r3, #106	; 0x6a
 800a7b8:	4648      	mov	r0, r9
 800a7ba:	9305      	str	r3, [sp, #20]
 800a7bc:	4651      	mov	r1, sl
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4da1      	ldr	r5, [pc, #644]	; (800aa48 <_strtod_l+0x850>)
 800a7c2:	f1b8 0f00 	cmp.w	r8, #0
 800a7c6:	f300 8113 	bgt.w	800a9f0 <_strtod_l+0x7f8>
 800a7ca:	b10b      	cbz	r3, 800a7d0 <_strtod_l+0x5d8>
 800a7cc:	4681      	mov	r9, r0
 800a7ce:	468a      	mov	sl, r1
 800a7d0:	9b05      	ldr	r3, [sp, #20]
 800a7d2:	b1bb      	cbz	r3, 800a804 <_strtod_l+0x60c>
 800a7d4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a7d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	4651      	mov	r1, sl
 800a7e0:	dd10      	ble.n	800a804 <_strtod_l+0x60c>
 800a7e2:	2b1f      	cmp	r3, #31
 800a7e4:	f340 8110 	ble.w	800aa08 <_strtod_l+0x810>
 800a7e8:	2b34      	cmp	r3, #52	; 0x34
 800a7ea:	bfd8      	it	le
 800a7ec:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	bfcf      	iteee	gt
 800a7f6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a7fa:	3b20      	suble	r3, #32
 800a7fc:	fa02 f303 	lslle.w	r3, r2, r3
 800a800:	ea03 0a01 	andle.w	sl, r3, r1
 800a804:	2200      	movs	r2, #0
 800a806:	2300      	movs	r3, #0
 800a808:	4648      	mov	r0, r9
 800a80a:	4651      	mov	r1, sl
 800a80c:	f7f6 f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 800a810:	2800      	cmp	r0, #0
 800a812:	d1a8      	bne.n	800a766 <_strtod_l+0x56e>
 800a814:	9b06      	ldr	r3, [sp, #24]
 800a816:	9a04      	ldr	r2, [sp, #16]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	9908      	ldr	r1, [sp, #32]
 800a81c:	4623      	mov	r3, r4
 800a81e:	4658      	mov	r0, fp
 800a820:	f001 f8a0 	bl	800b964 <__s2b>
 800a824:	9008      	str	r0, [sp, #32]
 800a826:	2800      	cmp	r0, #0
 800a828:	f43f af00 	beq.w	800a62c <_strtod_l+0x434>
 800a82c:	9a07      	ldr	r2, [sp, #28]
 800a82e:	9b07      	ldr	r3, [sp, #28]
 800a830:	2a00      	cmp	r2, #0
 800a832:	f1c3 0300 	rsb	r3, r3, #0
 800a836:	bfa8      	it	ge
 800a838:	2300      	movge	r3, #0
 800a83a:	f04f 0800 	mov.w	r8, #0
 800a83e:	930e      	str	r3, [sp, #56]	; 0x38
 800a840:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a844:	9316      	str	r3, [sp, #88]	; 0x58
 800a846:	f8cd 8010 	str.w	r8, [sp, #16]
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	4658      	mov	r0, fp
 800a84e:	6859      	ldr	r1, [r3, #4]
 800a850:	f001 f802 	bl	800b858 <_Balloc>
 800a854:	9006      	str	r0, [sp, #24]
 800a856:	2800      	cmp	r0, #0
 800a858:	f43f aef0 	beq.w	800a63c <_strtod_l+0x444>
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	300c      	adds	r0, #12
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	f103 010c 	add.w	r1, r3, #12
 800a866:	3202      	adds	r2, #2
 800a868:	0092      	lsls	r2, r2, #2
 800a86a:	f000 ffea 	bl	800b842 <memcpy>
 800a86e:	ab1e      	add	r3, sp, #120	; 0x78
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	ab1d      	add	r3, sp, #116	; 0x74
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	464a      	mov	r2, r9
 800a878:	4653      	mov	r3, sl
 800a87a:	4658      	mov	r0, fp
 800a87c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a880:	f001 fb2a 	bl	800bed8 <__d2b>
 800a884:	901c      	str	r0, [sp, #112]	; 0x70
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f aed8 	beq.w	800a63c <_strtod_l+0x444>
 800a88c:	2101      	movs	r1, #1
 800a88e:	4658      	mov	r0, fp
 800a890:	f001 f8f4 	bl	800ba7c <__i2b>
 800a894:	9004      	str	r0, [sp, #16]
 800a896:	4603      	mov	r3, r0
 800a898:	2800      	cmp	r0, #0
 800a89a:	f43f aecf 	beq.w	800a63c <_strtod_l+0x444>
 800a89e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a8a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a8a2:	2d00      	cmp	r5, #0
 800a8a4:	bfab      	itete	ge
 800a8a6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a8a8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a8aa:	18ee      	addge	r6, r5, r3
 800a8ac:	1b5c      	sublt	r4, r3, r5
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	bfa8      	it	ge
 800a8b2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a8b4:	eba5 0503 	sub.w	r5, r5, r3
 800a8b8:	4415      	add	r5, r2
 800a8ba:	4b64      	ldr	r3, [pc, #400]	; (800aa4c <_strtod_l+0x854>)
 800a8bc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a8c0:	bfb8      	it	lt
 800a8c2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8ca:	f280 80af 	bge.w	800aa2c <_strtod_l+0x834>
 800a8ce:	1b5b      	subs	r3, r3, r5
 800a8d0:	2b1f      	cmp	r3, #31
 800a8d2:	eba2 0203 	sub.w	r2, r2, r3
 800a8d6:	f04f 0701 	mov.w	r7, #1
 800a8da:	f300 809c 	bgt.w	800aa16 <_strtod_l+0x81e>
 800a8de:	2500      	movs	r5, #0
 800a8e0:	fa07 f303 	lsl.w	r3, r7, r3
 800a8e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8e6:	18b7      	adds	r7, r6, r2
 800a8e8:	9b05      	ldr	r3, [sp, #20]
 800a8ea:	42be      	cmp	r6, r7
 800a8ec:	4414      	add	r4, r2
 800a8ee:	441c      	add	r4, r3
 800a8f0:	4633      	mov	r3, r6
 800a8f2:	bfa8      	it	ge
 800a8f4:	463b      	movge	r3, r7
 800a8f6:	42a3      	cmp	r3, r4
 800a8f8:	bfa8      	it	ge
 800a8fa:	4623      	movge	r3, r4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfc2      	ittt	gt
 800a900:	1aff      	subgt	r7, r7, r3
 800a902:	1ae4      	subgt	r4, r4, r3
 800a904:	1af6      	subgt	r6, r6, r3
 800a906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a908:	b1bb      	cbz	r3, 800a93a <_strtod_l+0x742>
 800a90a:	461a      	mov	r2, r3
 800a90c:	9904      	ldr	r1, [sp, #16]
 800a90e:	4658      	mov	r0, fp
 800a910:	f001 f952 	bl	800bbb8 <__pow5mult>
 800a914:	9004      	str	r0, [sp, #16]
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f ae90 	beq.w	800a63c <_strtod_l+0x444>
 800a91c:	4601      	mov	r1, r0
 800a91e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a920:	4658      	mov	r0, fp
 800a922:	f001 f8b4 	bl	800ba8e <__multiply>
 800a926:	9009      	str	r0, [sp, #36]	; 0x24
 800a928:	2800      	cmp	r0, #0
 800a92a:	f43f ae87 	beq.w	800a63c <_strtod_l+0x444>
 800a92e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a930:	4658      	mov	r0, fp
 800a932:	f000 ffc5 	bl	800b8c0 <_Bfree>
 800a936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a938:	931c      	str	r3, [sp, #112]	; 0x70
 800a93a:	2f00      	cmp	r7, #0
 800a93c:	dc7a      	bgt.n	800aa34 <_strtod_l+0x83c>
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	2b00      	cmp	r3, #0
 800a942:	dd08      	ble.n	800a956 <_strtod_l+0x75e>
 800a944:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a946:	9906      	ldr	r1, [sp, #24]
 800a948:	4658      	mov	r0, fp
 800a94a:	f001 f935 	bl	800bbb8 <__pow5mult>
 800a94e:	9006      	str	r0, [sp, #24]
 800a950:	2800      	cmp	r0, #0
 800a952:	f43f ae73 	beq.w	800a63c <_strtod_l+0x444>
 800a956:	2c00      	cmp	r4, #0
 800a958:	dd08      	ble.n	800a96c <_strtod_l+0x774>
 800a95a:	4622      	mov	r2, r4
 800a95c:	9906      	ldr	r1, [sp, #24]
 800a95e:	4658      	mov	r0, fp
 800a960:	f001 f978 	bl	800bc54 <__lshift>
 800a964:	9006      	str	r0, [sp, #24]
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f ae68 	beq.w	800a63c <_strtod_l+0x444>
 800a96c:	2e00      	cmp	r6, #0
 800a96e:	dd08      	ble.n	800a982 <_strtod_l+0x78a>
 800a970:	4632      	mov	r2, r6
 800a972:	9904      	ldr	r1, [sp, #16]
 800a974:	4658      	mov	r0, fp
 800a976:	f001 f96d 	bl	800bc54 <__lshift>
 800a97a:	9004      	str	r0, [sp, #16]
 800a97c:	2800      	cmp	r0, #0
 800a97e:	f43f ae5d 	beq.w	800a63c <_strtod_l+0x444>
 800a982:	9a06      	ldr	r2, [sp, #24]
 800a984:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a986:	4658      	mov	r0, fp
 800a988:	f001 f9d2 	bl	800bd30 <__mdiff>
 800a98c:	4680      	mov	r8, r0
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f ae54 	beq.w	800a63c <_strtod_l+0x444>
 800a994:	2400      	movs	r4, #0
 800a996:	68c3      	ldr	r3, [r0, #12]
 800a998:	9904      	ldr	r1, [sp, #16]
 800a99a:	60c4      	str	r4, [r0, #12]
 800a99c:	930c      	str	r3, [sp, #48]	; 0x30
 800a99e:	f001 f9ad 	bl	800bcfc <__mcmp>
 800a9a2:	42a0      	cmp	r0, r4
 800a9a4:	da54      	bge.n	800aa50 <_strtod_l+0x858>
 800a9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a8:	b9f3      	cbnz	r3, 800a9e8 <_strtod_l+0x7f0>
 800a9aa:	f1b9 0f00 	cmp.w	r9, #0
 800a9ae:	d11b      	bne.n	800a9e8 <_strtod_l+0x7f0>
 800a9b0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a9b4:	b9c3      	cbnz	r3, 800a9e8 <_strtod_l+0x7f0>
 800a9b6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a9ba:	0d1b      	lsrs	r3, r3, #20
 800a9bc:	051b      	lsls	r3, r3, #20
 800a9be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a9c2:	d911      	bls.n	800a9e8 <_strtod_l+0x7f0>
 800a9c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a9c8:	b91b      	cbnz	r3, 800a9d2 <_strtod_l+0x7da>
 800a9ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	dd0a      	ble.n	800a9e8 <_strtod_l+0x7f0>
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	4658      	mov	r0, fp
 800a9d8:	f001 f93c 	bl	800bc54 <__lshift>
 800a9dc:	9904      	ldr	r1, [sp, #16]
 800a9de:	4680      	mov	r8, r0
 800a9e0:	f001 f98c 	bl	800bcfc <__mcmp>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	dc68      	bgt.n	800aaba <_strtod_l+0x8c2>
 800a9e8:	9b05      	ldr	r3, [sp, #20]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d172      	bne.n	800aad4 <_strtod_l+0x8dc>
 800a9ee:	e630      	b.n	800a652 <_strtod_l+0x45a>
 800a9f0:	f018 0f01 	tst.w	r8, #1
 800a9f4:	d004      	beq.n	800aa00 <_strtod_l+0x808>
 800a9f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9fa:	f7f5 fd6d 	bl	80004d8 <__aeabi_dmul>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa04:	3508      	adds	r5, #8
 800aa06:	e6dc      	b.n	800a7c2 <_strtod_l+0x5ca>
 800aa08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa10:	ea03 0909 	and.w	r9, r3, r9
 800aa14:	e6f6      	b.n	800a804 <_strtod_l+0x60c>
 800aa16:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800aa1a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800aa1e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800aa22:	35e2      	adds	r5, #226	; 0xe2
 800aa24:	fa07 f505 	lsl.w	r5, r7, r5
 800aa28:	970f      	str	r7, [sp, #60]	; 0x3c
 800aa2a:	e75c      	b.n	800a8e6 <_strtod_l+0x6ee>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	2500      	movs	r5, #0
 800aa30:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa32:	e758      	b.n	800a8e6 <_strtod_l+0x6ee>
 800aa34:	463a      	mov	r2, r7
 800aa36:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa38:	4658      	mov	r0, fp
 800aa3a:	f001 f90b 	bl	800bc54 <__lshift>
 800aa3e:	901c      	str	r0, [sp, #112]	; 0x70
 800aa40:	2800      	cmp	r0, #0
 800aa42:	f47f af7c 	bne.w	800a93e <_strtod_l+0x746>
 800aa46:	e5f9      	b.n	800a63c <_strtod_l+0x444>
 800aa48:	0800e110 	.word	0x0800e110
 800aa4c:	fffffc02 	.word	0xfffffc02
 800aa50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aa54:	f040 8089 	bne.w	800ab6a <_strtod_l+0x972>
 800aa58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa5a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800aa5e:	b342      	cbz	r2, 800aab2 <_strtod_l+0x8ba>
 800aa60:	4aaf      	ldr	r2, [pc, #700]	; (800ad20 <_strtod_l+0xb28>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d156      	bne.n	800ab14 <_strtod_l+0x91c>
 800aa66:	9b05      	ldr	r3, [sp, #20]
 800aa68:	4648      	mov	r0, r9
 800aa6a:	b1eb      	cbz	r3, 800aaa8 <_strtod_l+0x8b0>
 800aa6c:	4653      	mov	r3, sl
 800aa6e:	4aad      	ldr	r2, [pc, #692]	; (800ad24 <_strtod_l+0xb2c>)
 800aa70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa74:	401a      	ands	r2, r3
 800aa76:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800aa7a:	d818      	bhi.n	800aaae <_strtod_l+0x8b6>
 800aa7c:	0d12      	lsrs	r2, r2, #20
 800aa7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aa82:	fa01 f303 	lsl.w	r3, r1, r3
 800aa86:	4298      	cmp	r0, r3
 800aa88:	d144      	bne.n	800ab14 <_strtod_l+0x91c>
 800aa8a:	4ba7      	ldr	r3, [pc, #668]	; (800ad28 <_strtod_l+0xb30>)
 800aa8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d102      	bne.n	800aa98 <_strtod_l+0x8a0>
 800aa92:	3001      	adds	r0, #1
 800aa94:	f43f add2 	beq.w	800a63c <_strtod_l+0x444>
 800aa98:	4ba2      	ldr	r3, [pc, #648]	; (800ad24 <_strtod_l+0xb2c>)
 800aa9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9c:	f04f 0900 	mov.w	r9, #0
 800aaa0:	401a      	ands	r2, r3
 800aaa2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800aaa6:	e79f      	b.n	800a9e8 <_strtod_l+0x7f0>
 800aaa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaac:	e7eb      	b.n	800aa86 <_strtod_l+0x88e>
 800aaae:	460b      	mov	r3, r1
 800aab0:	e7e9      	b.n	800aa86 <_strtod_l+0x88e>
 800aab2:	bb7b      	cbnz	r3, 800ab14 <_strtod_l+0x91c>
 800aab4:	f1b9 0f00 	cmp.w	r9, #0
 800aab8:	d12c      	bne.n	800ab14 <_strtod_l+0x91c>
 800aaba:	9905      	ldr	r1, [sp, #20]
 800aabc:	4653      	mov	r3, sl
 800aabe:	4a99      	ldr	r2, [pc, #612]	; (800ad24 <_strtod_l+0xb2c>)
 800aac0:	b1f1      	cbz	r1, 800ab00 <_strtod_l+0x908>
 800aac2:	ea02 010a 	and.w	r1, r2, sl
 800aac6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aaca:	dc19      	bgt.n	800ab00 <_strtod_l+0x908>
 800aacc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aad0:	f77f ae51 	ble.w	800a776 <_strtod_l+0x57e>
 800aad4:	2300      	movs	r3, #0
 800aad6:	4a95      	ldr	r2, [pc, #596]	; (800ad2c <_strtod_l+0xb34>)
 800aad8:	4648      	mov	r0, r9
 800aada:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800aade:	4651      	mov	r1, sl
 800aae0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aae4:	f7f5 fcf8 	bl	80004d8 <__aeabi_dmul>
 800aae8:	4681      	mov	r9, r0
 800aaea:	468a      	mov	sl, r1
 800aaec:	2900      	cmp	r1, #0
 800aaee:	f47f adb0 	bne.w	800a652 <_strtod_l+0x45a>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f47f adad 	bne.w	800a652 <_strtod_l+0x45a>
 800aaf8:	2322      	movs	r3, #34	; 0x22
 800aafa:	f8cb 3000 	str.w	r3, [fp]
 800aafe:	e5a8      	b.n	800a652 <_strtod_l+0x45a>
 800ab00:	4013      	ands	r3, r2
 800ab02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab06:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800ab0a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800ab0e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800ab12:	e769      	b.n	800a9e8 <_strtod_l+0x7f0>
 800ab14:	b19d      	cbz	r5, 800ab3e <_strtod_l+0x946>
 800ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab18:	421d      	tst	r5, r3
 800ab1a:	f43f af65 	beq.w	800a9e8 <_strtod_l+0x7f0>
 800ab1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab20:	9a05      	ldr	r2, [sp, #20]
 800ab22:	4648      	mov	r0, r9
 800ab24:	4651      	mov	r1, sl
 800ab26:	b173      	cbz	r3, 800ab46 <_strtod_l+0x94e>
 800ab28:	f7ff fb42 	bl	800a1b0 <sulp>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab34:	f7f5 fb1a 	bl	800016c <__adddf3>
 800ab38:	4681      	mov	r9, r0
 800ab3a:	468a      	mov	sl, r1
 800ab3c:	e754      	b.n	800a9e8 <_strtod_l+0x7f0>
 800ab3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab40:	ea13 0f09 	tst.w	r3, r9
 800ab44:	e7e9      	b.n	800ab1a <_strtod_l+0x922>
 800ab46:	f7ff fb33 	bl	800a1b0 <sulp>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab52:	f7f5 fb09 	bl	8000168 <__aeabi_dsub>
 800ab56:	2200      	movs	r2, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4681      	mov	r9, r0
 800ab5c:	468a      	mov	sl, r1
 800ab5e:	f7f5 ff23 	bl	80009a8 <__aeabi_dcmpeq>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f47f ae07 	bne.w	800a776 <_strtod_l+0x57e>
 800ab68:	e73e      	b.n	800a9e8 <_strtod_l+0x7f0>
 800ab6a:	9904      	ldr	r1, [sp, #16]
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	f001 fa02 	bl	800bf76 <__ratio>
 800ab72:	2200      	movs	r2, #0
 800ab74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab78:	4606      	mov	r6, r0
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	f7f5 ff28 	bl	80009d0 <__aeabi_dcmple>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d075      	beq.n	800ac70 <_strtod_l+0xa78>
 800ab84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d047      	beq.n	800ac1a <_strtod_l+0xa22>
 800ab8a:	2600      	movs	r6, #0
 800ab8c:	4f68      	ldr	r7, [pc, #416]	; (800ad30 <_strtod_l+0xb38>)
 800ab8e:	4d68      	ldr	r5, [pc, #416]	; (800ad30 <_strtod_l+0xb38>)
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab96:	0d1b      	lsrs	r3, r3, #20
 800ab98:	051b      	lsls	r3, r3, #20
 800ab9a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab9e:	4b65      	ldr	r3, [pc, #404]	; (800ad34 <_strtod_l+0xb3c>)
 800aba0:	429a      	cmp	r2, r3
 800aba2:	f040 80cf 	bne.w	800ad44 <_strtod_l+0xb4c>
 800aba6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abaa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	4648      	mov	r0, r9
 800abb2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800abb6:	4651      	mov	r1, sl
 800abb8:	f001 f918 	bl	800bdec <__ulp>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4630      	mov	r0, r6
 800abc2:	4639      	mov	r1, r7
 800abc4:	f7f5 fc88 	bl	80004d8 <__aeabi_dmul>
 800abc8:	464a      	mov	r2, r9
 800abca:	4653      	mov	r3, sl
 800abcc:	f7f5 face 	bl	800016c <__adddf3>
 800abd0:	460b      	mov	r3, r1
 800abd2:	4954      	ldr	r1, [pc, #336]	; (800ad24 <_strtod_l+0xb2c>)
 800abd4:	4a58      	ldr	r2, [pc, #352]	; (800ad38 <_strtod_l+0xb40>)
 800abd6:	4019      	ands	r1, r3
 800abd8:	4291      	cmp	r1, r2
 800abda:	4681      	mov	r9, r0
 800abdc:	d95e      	bls.n	800ac9c <_strtod_l+0xaa4>
 800abde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abe0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d103      	bne.n	800abf0 <_strtod_l+0x9f8>
 800abe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abea:	3301      	adds	r3, #1
 800abec:	f43f ad26 	beq.w	800a63c <_strtod_l+0x444>
 800abf0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800abf4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800ad28 <_strtod_l+0xb30>
 800abf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abfa:	4658      	mov	r0, fp
 800abfc:	f000 fe60 	bl	800b8c0 <_Bfree>
 800ac00:	9906      	ldr	r1, [sp, #24]
 800ac02:	4658      	mov	r0, fp
 800ac04:	f000 fe5c 	bl	800b8c0 <_Bfree>
 800ac08:	9904      	ldr	r1, [sp, #16]
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f000 fe58 	bl	800b8c0 <_Bfree>
 800ac10:	4641      	mov	r1, r8
 800ac12:	4658      	mov	r0, fp
 800ac14:	f000 fe54 	bl	800b8c0 <_Bfree>
 800ac18:	e617      	b.n	800a84a <_strtod_l+0x652>
 800ac1a:	f1b9 0f00 	cmp.w	r9, #0
 800ac1e:	d119      	bne.n	800ac54 <_strtod_l+0xa5c>
 800ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac26:	b9e3      	cbnz	r3, 800ac62 <_strtod_l+0xa6a>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4b41      	ldr	r3, [pc, #260]	; (800ad30 <_strtod_l+0xb38>)
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	4639      	mov	r1, r7
 800ac30:	f7f5 fec4 	bl	80009bc <__aeabi_dcmplt>
 800ac34:	b9c8      	cbnz	r0, 800ac6a <_strtod_l+0xa72>
 800ac36:	2200      	movs	r2, #0
 800ac38:	4b40      	ldr	r3, [pc, #256]	; (800ad3c <_strtod_l+0xb44>)
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	f7f5 fc4b 	bl	80004d8 <__aeabi_dmul>
 800ac42:	4604      	mov	r4, r0
 800ac44:	460d      	mov	r5, r1
 800ac46:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ac4a:	9418      	str	r4, [sp, #96]	; 0x60
 800ac4c:	9319      	str	r3, [sp, #100]	; 0x64
 800ac4e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ac52:	e79d      	b.n	800ab90 <_strtod_l+0x998>
 800ac54:	f1b9 0f01 	cmp.w	r9, #1
 800ac58:	d103      	bne.n	800ac62 <_strtod_l+0xa6a>
 800ac5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f43f ad8a 	beq.w	800a776 <_strtod_l+0x57e>
 800ac62:	2600      	movs	r6, #0
 800ac64:	4f36      	ldr	r7, [pc, #216]	; (800ad40 <_strtod_l+0xb48>)
 800ac66:	2400      	movs	r4, #0
 800ac68:	e791      	b.n	800ab8e <_strtod_l+0x996>
 800ac6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ac6c:	4d33      	ldr	r5, [pc, #204]	; (800ad3c <_strtod_l+0xb44>)
 800ac6e:	e7ea      	b.n	800ac46 <_strtod_l+0xa4e>
 800ac70:	4b32      	ldr	r3, [pc, #200]	; (800ad3c <_strtod_l+0xb44>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	4630      	mov	r0, r6
 800ac76:	4639      	mov	r1, r7
 800ac78:	f7f5 fc2e 	bl	80004d8 <__aeabi_dmul>
 800ac7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7e:	4604      	mov	r4, r0
 800ac80:	460d      	mov	r5, r1
 800ac82:	b933      	cbnz	r3, 800ac92 <_strtod_l+0xa9a>
 800ac84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac88:	9010      	str	r0, [sp, #64]	; 0x40
 800ac8a:	9311      	str	r3, [sp, #68]	; 0x44
 800ac8c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ac90:	e77e      	b.n	800ab90 <_strtod_l+0x998>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ac9a:	e7f7      	b.n	800ac8c <_strtod_l+0xa94>
 800ac9c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800aca0:	9b05      	ldr	r3, [sp, #20]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1a8      	bne.n	800abf8 <_strtod_l+0xa00>
 800aca6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800acaa:	0d1b      	lsrs	r3, r3, #20
 800acac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acae:	051b      	lsls	r3, r3, #20
 800acb0:	429a      	cmp	r2, r3
 800acb2:	4656      	mov	r6, sl
 800acb4:	d1a0      	bne.n	800abf8 <_strtod_l+0xa00>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4620      	mov	r0, r4
 800acba:	f7f5 fea7 	bl	8000a0c <__aeabi_d2iz>
 800acbe:	f7f5 fba1 	bl	8000404 <__aeabi_i2d>
 800acc2:	460b      	mov	r3, r1
 800acc4:	4602      	mov	r2, r0
 800acc6:	4629      	mov	r1, r5
 800acc8:	4620      	mov	r0, r4
 800acca:	f7f5 fa4d 	bl	8000168 <__aeabi_dsub>
 800acce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	b933      	cbnz	r3, 800ace4 <_strtod_l+0xaec>
 800acd6:	f1b9 0f00 	cmp.w	r9, #0
 800acda:	d103      	bne.n	800ace4 <_strtod_l+0xaec>
 800acdc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800ace0:	2e00      	cmp	r6, #0
 800ace2:	d06a      	beq.n	800adba <_strtod_l+0xbc2>
 800ace4:	a30a      	add	r3, pc, #40	; (adr r3, 800ad10 <_strtod_l+0xb18>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fe65 	bl	80009bc <__aeabi_dcmplt>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f47f acad 	bne.w	800a652 <_strtod_l+0x45a>
 800acf8:	a307      	add	r3, pc, #28	; (adr r3, 800ad18 <_strtod_l+0xb20>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7f5 fe79 	bl	80009f8 <__aeabi_dcmpgt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f af76 	beq.w	800abf8 <_strtod_l+0xa00>
 800ad0c:	e4a1      	b.n	800a652 <_strtod_l+0x45a>
 800ad0e:	bf00      	nop
 800ad10:	94a03595 	.word	0x94a03595
 800ad14:	3fdfffff 	.word	0x3fdfffff
 800ad18:	35afe535 	.word	0x35afe535
 800ad1c:	3fe00000 	.word	0x3fe00000
 800ad20:	000fffff 	.word	0x000fffff
 800ad24:	7ff00000 	.word	0x7ff00000
 800ad28:	7fefffff 	.word	0x7fefffff
 800ad2c:	39500000 	.word	0x39500000
 800ad30:	3ff00000 	.word	0x3ff00000
 800ad34:	7fe00000 	.word	0x7fe00000
 800ad38:	7c9fffff 	.word	0x7c9fffff
 800ad3c:	3fe00000 	.word	0x3fe00000
 800ad40:	bff00000 	.word	0xbff00000
 800ad44:	9b05      	ldr	r3, [sp, #20]
 800ad46:	b313      	cbz	r3, 800ad8e <_strtod_l+0xb96>
 800ad48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad4e:	d81e      	bhi.n	800ad8e <_strtod_l+0xb96>
 800ad50:	a325      	add	r3, pc, #148	; (adr r3, 800ade8 <_strtod_l+0xbf0>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	4620      	mov	r0, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7f5 fe39 	bl	80009d0 <__aeabi_dcmple>
 800ad5e:	b190      	cbz	r0, 800ad86 <_strtod_l+0xb8e>
 800ad60:	4629      	mov	r1, r5
 800ad62:	4620      	mov	r0, r4
 800ad64:	f7f5 fe7a 	bl	8000a5c <__aeabi_d2uiz>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	bf08      	it	eq
 800ad6c:	2001      	moveq	r0, #1
 800ad6e:	f7f5 fb39 	bl	80003e4 <__aeabi_ui2d>
 800ad72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad74:	4604      	mov	r4, r0
 800ad76:	460d      	mov	r5, r1
 800ad78:	b9d3      	cbnz	r3, 800adb0 <_strtod_l+0xbb8>
 800ad7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad7e:	9012      	str	r0, [sp, #72]	; 0x48
 800ad80:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad82:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ad86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad88:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ad8c:	1a9f      	subs	r7, r3, r2
 800ad8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad92:	f001 f82b 	bl	800bdec <__ulp>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 fb9b 	bl	80004d8 <__aeabi_dmul>
 800ada2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ada6:	f7f5 f9e1 	bl	800016c <__adddf3>
 800adaa:	4681      	mov	r9, r0
 800adac:	468a      	mov	sl, r1
 800adae:	e777      	b.n	800aca0 <_strtod_l+0xaa8>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800adb8:	e7e3      	b.n	800ad82 <_strtod_l+0xb8a>
 800adba:	a30d      	add	r3, pc, #52	; (adr r3, 800adf0 <_strtod_l+0xbf8>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fdfc 	bl	80009bc <__aeabi_dcmplt>
 800adc4:	e79f      	b.n	800ad06 <_strtod_l+0xb0e>
 800adc6:	2300      	movs	r3, #0
 800adc8:	930d      	str	r3, [sp, #52]	; 0x34
 800adca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	f7ff ba55 	b.w	800a27e <_strtod_l+0x86>
 800add4:	2b65      	cmp	r3, #101	; 0x65
 800add6:	f04f 0200 	mov.w	r2, #0
 800adda:	f43f ab42 	beq.w	800a462 <_strtod_l+0x26a>
 800adde:	2101      	movs	r1, #1
 800ade0:	4614      	mov	r4, r2
 800ade2:	9105      	str	r1, [sp, #20]
 800ade4:	f7ff babf 	b.w	800a366 <_strtod_l+0x16e>
 800ade8:	ffc00000 	.word	0xffc00000
 800adec:	41dfffff 	.word	0x41dfffff
 800adf0:	94a03595 	.word	0x94a03595
 800adf4:	3fcfffff 	.word	0x3fcfffff

0800adf8 <strtod>:
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <strtod+0x1c>)
 800adfa:	b410      	push	{r4}
 800adfc:	681c      	ldr	r4, [r3, #0]
 800adfe:	4a06      	ldr	r2, [pc, #24]	; (800ae18 <strtod+0x20>)
 800ae00:	6a23      	ldr	r3, [r4, #32]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bf08      	it	eq
 800ae06:	4613      	moveq	r3, r2
 800ae08:	460a      	mov	r2, r1
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bc10      	pop	{r4}
 800ae10:	f7ff b9f2 	b.w	800a1f8 <_strtod_l>
 800ae14:	20000070 	.word	0x20000070
 800ae18:	200000d4 	.word	0x200000d4

0800ae1c <_strtol_l.isra.0>:
 800ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	4680      	mov	r8, r0
 800ae22:	4689      	mov	r9, r1
 800ae24:	4692      	mov	sl, r2
 800ae26:	461e      	mov	r6, r3
 800ae28:	460f      	mov	r7, r1
 800ae2a:	463d      	mov	r5, r7
 800ae2c:	9808      	ldr	r0, [sp, #32]
 800ae2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae32:	f000 fcef 	bl	800b814 <__locale_ctype_ptr_l>
 800ae36:	4420      	add	r0, r4
 800ae38:	7843      	ldrb	r3, [r0, #1]
 800ae3a:	f013 0308 	ands.w	r3, r3, #8
 800ae3e:	d132      	bne.n	800aea6 <_strtol_l.isra.0+0x8a>
 800ae40:	2c2d      	cmp	r4, #45	; 0x2d
 800ae42:	d132      	bne.n	800aeaa <_strtol_l.isra.0+0x8e>
 800ae44:	2201      	movs	r2, #1
 800ae46:	787c      	ldrb	r4, [r7, #1]
 800ae48:	1cbd      	adds	r5, r7, #2
 800ae4a:	2e00      	cmp	r6, #0
 800ae4c:	d05d      	beq.n	800af0a <_strtol_l.isra.0+0xee>
 800ae4e:	2e10      	cmp	r6, #16
 800ae50:	d109      	bne.n	800ae66 <_strtol_l.isra.0+0x4a>
 800ae52:	2c30      	cmp	r4, #48	; 0x30
 800ae54:	d107      	bne.n	800ae66 <_strtol_l.isra.0+0x4a>
 800ae56:	782b      	ldrb	r3, [r5, #0]
 800ae58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae5c:	2b58      	cmp	r3, #88	; 0x58
 800ae5e:	d14f      	bne.n	800af00 <_strtol_l.isra.0+0xe4>
 800ae60:	2610      	movs	r6, #16
 800ae62:	786c      	ldrb	r4, [r5, #1]
 800ae64:	3502      	adds	r5, #2
 800ae66:	2a00      	cmp	r2, #0
 800ae68:	bf14      	ite	ne
 800ae6a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ae6e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ae72:	2700      	movs	r7, #0
 800ae74:	fbb1 fcf6 	udiv	ip, r1, r6
 800ae78:	4638      	mov	r0, r7
 800ae7a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ae7e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ae82:	2b09      	cmp	r3, #9
 800ae84:	d817      	bhi.n	800aeb6 <_strtol_l.isra.0+0x9a>
 800ae86:	461c      	mov	r4, r3
 800ae88:	42a6      	cmp	r6, r4
 800ae8a:	dd23      	ble.n	800aed4 <_strtol_l.isra.0+0xb8>
 800ae8c:	1c7b      	adds	r3, r7, #1
 800ae8e:	d007      	beq.n	800aea0 <_strtol_l.isra.0+0x84>
 800ae90:	4584      	cmp	ip, r0
 800ae92:	d31c      	bcc.n	800aece <_strtol_l.isra.0+0xb2>
 800ae94:	d101      	bne.n	800ae9a <_strtol_l.isra.0+0x7e>
 800ae96:	45a6      	cmp	lr, r4
 800ae98:	db19      	blt.n	800aece <_strtol_l.isra.0+0xb2>
 800ae9a:	2701      	movs	r7, #1
 800ae9c:	fb00 4006 	mla	r0, r0, r6, r4
 800aea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aea4:	e7eb      	b.n	800ae7e <_strtol_l.isra.0+0x62>
 800aea6:	462f      	mov	r7, r5
 800aea8:	e7bf      	b.n	800ae2a <_strtol_l.isra.0+0xe>
 800aeaa:	2c2b      	cmp	r4, #43	; 0x2b
 800aeac:	bf04      	itt	eq
 800aeae:	1cbd      	addeq	r5, r7, #2
 800aeb0:	787c      	ldrbeq	r4, [r7, #1]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	e7c9      	b.n	800ae4a <_strtol_l.isra.0+0x2e>
 800aeb6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aeba:	2b19      	cmp	r3, #25
 800aebc:	d801      	bhi.n	800aec2 <_strtol_l.isra.0+0xa6>
 800aebe:	3c37      	subs	r4, #55	; 0x37
 800aec0:	e7e2      	b.n	800ae88 <_strtol_l.isra.0+0x6c>
 800aec2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aec6:	2b19      	cmp	r3, #25
 800aec8:	d804      	bhi.n	800aed4 <_strtol_l.isra.0+0xb8>
 800aeca:	3c57      	subs	r4, #87	; 0x57
 800aecc:	e7dc      	b.n	800ae88 <_strtol_l.isra.0+0x6c>
 800aece:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aed2:	e7e5      	b.n	800aea0 <_strtol_l.isra.0+0x84>
 800aed4:	1c7b      	adds	r3, r7, #1
 800aed6:	d108      	bne.n	800aeea <_strtol_l.isra.0+0xce>
 800aed8:	2322      	movs	r3, #34	; 0x22
 800aeda:	4608      	mov	r0, r1
 800aedc:	f8c8 3000 	str.w	r3, [r8]
 800aee0:	f1ba 0f00 	cmp.w	sl, #0
 800aee4:	d107      	bne.n	800aef6 <_strtol_l.isra.0+0xda>
 800aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeea:	b102      	cbz	r2, 800aeee <_strtol_l.isra.0+0xd2>
 800aeec:	4240      	negs	r0, r0
 800aeee:	f1ba 0f00 	cmp.w	sl, #0
 800aef2:	d0f8      	beq.n	800aee6 <_strtol_l.isra.0+0xca>
 800aef4:	b10f      	cbz	r7, 800aefa <_strtol_l.isra.0+0xde>
 800aef6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800aefa:	f8ca 9000 	str.w	r9, [sl]
 800aefe:	e7f2      	b.n	800aee6 <_strtol_l.isra.0+0xca>
 800af00:	2430      	movs	r4, #48	; 0x30
 800af02:	2e00      	cmp	r6, #0
 800af04:	d1af      	bne.n	800ae66 <_strtol_l.isra.0+0x4a>
 800af06:	2608      	movs	r6, #8
 800af08:	e7ad      	b.n	800ae66 <_strtol_l.isra.0+0x4a>
 800af0a:	2c30      	cmp	r4, #48	; 0x30
 800af0c:	d0a3      	beq.n	800ae56 <_strtol_l.isra.0+0x3a>
 800af0e:	260a      	movs	r6, #10
 800af10:	e7a9      	b.n	800ae66 <_strtol_l.isra.0+0x4a>
	...

0800af14 <strtol>:
 800af14:	4b08      	ldr	r3, [pc, #32]	; (800af38 <strtol+0x24>)
 800af16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af18:	681c      	ldr	r4, [r3, #0]
 800af1a:	4d08      	ldr	r5, [pc, #32]	; (800af3c <strtol+0x28>)
 800af1c:	6a23      	ldr	r3, [r4, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bf08      	it	eq
 800af22:	462b      	moveq	r3, r5
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	4613      	mov	r3, r2
 800af28:	460a      	mov	r2, r1
 800af2a:	4601      	mov	r1, r0
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7ff ff75 	bl	800ae1c <_strtol_l.isra.0>
 800af32:	b003      	add	sp, #12
 800af34:	bd30      	pop	{r4, r5, pc}
 800af36:	bf00      	nop
 800af38:	20000070 	.word	0x20000070
 800af3c:	200000d4 	.word	0x200000d4

0800af40 <print_e>:
 800af40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af42:	b08b      	sub	sp, #44	; 0x2c
 800af44:	460f      	mov	r7, r1
 800af46:	a908      	add	r1, sp, #32
 800af48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800af4a:	9104      	str	r1, [sp, #16]
 800af4c:	a907      	add	r1, sp, #28
 800af4e:	9103      	str	r1, [sp, #12]
 800af50:	a909      	add	r1, sp, #36	; 0x24
 800af52:	9102      	str	r1, [sp, #8]
 800af54:	1c61      	adds	r1, r4, #1
 800af56:	9101      	str	r1, [sp, #4]
 800af58:	2102      	movs	r1, #2
 800af5a:	9100      	str	r1, [sp, #0]
 800af5c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 800af60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800af62:	f001 fcb5 	bl	800c8d0 <_dtoa_r>
 800af66:	f242 730f 	movw	r3, #9999	; 0x270f
 800af6a:	4601      	mov	r1, r0
 800af6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af6e:	4298      	cmp	r0, r3
 800af70:	d104      	bne.n	800af7c <print_e+0x3c>
 800af72:	4638      	mov	r0, r7
 800af74:	f7ff f8fa 	bl	800a16c <strcpy>
 800af78:	b00b      	add	sp, #44	; 0x2c
 800af7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af7c:	780b      	ldrb	r3, [r1, #0]
 800af7e:	703b      	strb	r3, [r7, #0]
 800af80:	2d00      	cmp	r5, #0
 800af82:	d142      	bne.n	800b00a <print_e+0xca>
 800af84:	2c00      	cmp	r4, #0
 800af86:	d140      	bne.n	800b00a <print_e+0xca>
 800af88:	1c7b      	adds	r3, r7, #1
 800af8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af8e:	b10a      	cbz	r2, 800af94 <print_e+0x54>
 800af90:	2c00      	cmp	r4, #0
 800af92:	dc3e      	bgt.n	800b012 <print_e+0xd2>
 800af94:	2e67      	cmp	r6, #103	; 0x67
 800af96:	d043      	beq.n	800b020 <print_e+0xe0>
 800af98:	2e47      	cmp	r6, #71	; 0x47
 800af9a:	d043      	beq.n	800b024 <print_e+0xe4>
 800af9c:	461a      	mov	r2, r3
 800af9e:	2730      	movs	r7, #48	; 0x30
 800afa0:	191d      	adds	r5, r3, r4
 800afa2:	1aa9      	subs	r1, r5, r2
 800afa4:	2900      	cmp	r1, #0
 800afa6:	dc38      	bgt.n	800b01a <print_e+0xda>
 800afa8:	2c00      	cmp	r4, #0
 800afaa:	bfa8      	it	ge
 800afac:	191b      	addge	r3, r3, r4
 800afae:	1e41      	subs	r1, r0, #1
 800afb0:	2900      	cmp	r1, #0
 800afb2:	9109      	str	r1, [sp, #36]	; 0x24
 800afb4:	461a      	mov	r2, r3
 800afb6:	bfb7      	itett	lt
 800afb8:	212d      	movlt	r1, #45	; 0x2d
 800afba:	212b      	movge	r1, #43	; 0x2b
 800afbc:	f1c0 0001 	rsblt	r0, r0, #1
 800afc0:	9009      	strlt	r0, [sp, #36]	; 0x24
 800afc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afc4:	f802 6b02 	strb.w	r6, [r2], #2
 800afc8:	bfb4      	ite	lt
 800afca:	7059      	strblt	r1, [r3, #1]
 800afcc:	7059      	strbge	r1, [r3, #1]
 800afce:	2863      	cmp	r0, #99	; 0x63
 800afd0:	dd0b      	ble.n	800afea <print_e+0xaa>
 800afd2:	2164      	movs	r1, #100	; 0x64
 800afd4:	fb90 f1f1 	sdiv	r1, r0, r1
 800afd8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800afdc:	1cda      	adds	r2, r3, #3
 800afde:	709c      	strb	r4, [r3, #2]
 800afe0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800afe4:	fb03 0101 	mla	r1, r3, r1, r0
 800afe8:	9109      	str	r1, [sp, #36]	; 0x24
 800afea:	230a      	movs	r3, #10
 800afec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afee:	fb91 f3f3 	sdiv	r3, r1, r3
 800aff2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aff6:	7010      	strb	r0, [r2, #0]
 800aff8:	f06f 0009 	mvn.w	r0, #9
 800affc:	fb00 1303 	mla	r3, r0, r3, r1
 800b000:	3330      	adds	r3, #48	; 0x30
 800b002:	7053      	strb	r3, [r2, #1]
 800b004:	2300      	movs	r3, #0
 800b006:	7093      	strb	r3, [r2, #2]
 800b008:	e7b6      	b.n	800af78 <print_e+0x38>
 800b00a:	222e      	movs	r2, #46	; 0x2e
 800b00c:	1cbb      	adds	r3, r7, #2
 800b00e:	707a      	strb	r2, [r7, #1]
 800b010:	e7bb      	b.n	800af8a <print_e+0x4a>
 800b012:	f803 2b01 	strb.w	r2, [r3], #1
 800b016:	3c01      	subs	r4, #1
 800b018:	e7b7      	b.n	800af8a <print_e+0x4a>
 800b01a:	f802 7b01 	strb.w	r7, [r2], #1
 800b01e:	e7c0      	b.n	800afa2 <print_e+0x62>
 800b020:	2665      	movs	r6, #101	; 0x65
 800b022:	e7c4      	b.n	800afae <print_e+0x6e>
 800b024:	2645      	movs	r6, #69	; 0x45
 800b026:	e7c2      	b.n	800afae <print_e+0x6e>

0800b028 <_gcvt>:
 800b028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b02c:	4617      	mov	r7, r2
 800b02e:	461d      	mov	r5, r3
 800b030:	b08b      	sub	sp, #44	; 0x2c
 800b032:	4681      	mov	r9, r0
 800b034:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 800b038:	2200      	movs	r2, #0
 800b03a:	2300      	movs	r3, #0
 800b03c:	4638      	mov	r0, r7
 800b03e:	4629      	mov	r1, r5
 800b040:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800b044:	f7f5 fcba 	bl	80009bc <__aeabi_dcmplt>
 800b048:	b108      	cbz	r0, 800b04e <_gcvt+0x26>
 800b04a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	4638      	mov	r0, r7
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800b05a:	b138      	cbz	r0, 800b06c <_gcvt+0x44>
 800b05c:	2330      	movs	r3, #48	; 0x30
 800b05e:	7023      	strb	r3, [r4, #0]
 800b060:	2300      	movs	r3, #0
 800b062:	7063      	strb	r3, [r4, #1]
 800b064:	4620      	mov	r0, r4
 800b066:	b00b      	add	sp, #44	; 0x2c
 800b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b06c:	a352      	add	r3, pc, #328	; (adr r3, 800b1b8 <_gcvt+0x190>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	4638      	mov	r0, r7
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 fcab 	bl	80009d0 <__aeabi_dcmple>
 800b07a:	b168      	cbz	r0, 800b098 <_gcvt+0x70>
 800b07c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b080:	3e01      	subs	r6, #1
 800b082:	9301      	str	r3, [sp, #4]
 800b084:	f8cd 8008 	str.w	r8, [sp, #8]
 800b088:	9600      	str	r6, [sp, #0]
 800b08a:	463a      	mov	r2, r7
 800b08c:	462b      	mov	r3, r5
 800b08e:	4621      	mov	r1, r4
 800b090:	4648      	mov	r0, r9
 800b092:	f7ff ff55 	bl	800af40 <print_e>
 800b096:	e7e5      	b.n	800b064 <_gcvt+0x3c>
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 ff9b 	bl	800bfd4 <_mprec_log10>
 800b09e:	463a      	mov	r2, r7
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	f7f5 fc95 	bl	80009d0 <__aeabi_dcmple>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d1e8      	bne.n	800b07c <_gcvt+0x54>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4b44      	ldr	r3, [pc, #272]	; (800b1c0 <_gcvt+0x198>)
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f7f5 fc83 	bl	80009bc <__aeabi_dcmplt>
 800b0b6:	a909      	add	r1, sp, #36	; 0x24
 800b0b8:	aa08      	add	r2, sp, #32
 800b0ba:	ab07      	add	r3, sp, #28
 800b0bc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800b0c0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b0c4:	b388      	cbz	r0, 800b12a <_gcvt+0x102>
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	463a      	mov	r2, r7
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	4648      	mov	r0, r9
 800b0d0:	f001 fbfe 	bl	800c8d0 <_dtoa_r>
 800b0d4:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0d8:	9a07      	ldr	r2, [sp, #28]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d027      	beq.n	800b12e <_gcvt+0x106>
 800b0de:	4623      	mov	r3, r4
 800b0e0:	4426      	add	r6, r4
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b0e8:	1af2      	subs	r2, r6, r3
 800b0ea:	9d07      	ldr	r5, [sp, #28]
 800b0ec:	b349      	cbz	r1, 800b142 <_gcvt+0x11a>
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	dc22      	bgt.n	800b138 <_gcvt+0x110>
 800b0f2:	f1b8 0f00 	cmp.w	r8, #0
 800b0f6:	d102      	bne.n	800b0fe <_gcvt+0xd6>
 800b0f8:	7839      	ldrb	r1, [r7, #0]
 800b0fa:	2900      	cmp	r1, #0
 800b0fc:	d049      	beq.n	800b192 <_gcvt+0x16a>
 800b0fe:	429c      	cmp	r4, r3
 800b100:	bf04      	itt	eq
 800b102:	2130      	moveq	r1, #48	; 0x30
 800b104:	7021      	strbeq	r1, [r4, #0]
 800b106:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800b10a:	f04f 0000 	mov.w	r0, #0
 800b10e:	f04f 0630 	mov.w	r6, #48	; 0x30
 800b112:	bf08      	it	eq
 800b114:	1c63      	addeq	r3, r4, #1
 800b116:	7019      	strb	r1, [r3, #0]
 800b118:	9907      	ldr	r1, [sp, #28]
 800b11a:	3301      	adds	r3, #1
 800b11c:	2900      	cmp	r1, #0
 800b11e:	460d      	mov	r5, r1
 800b120:	db24      	blt.n	800b16c <_gcvt+0x144>
 800b122:	b100      	cbz	r0, 800b126 <_gcvt+0xfe>
 800b124:	9107      	str	r1, [sp, #28]
 800b126:	1e79      	subs	r1, r7, #1
 800b128:	e02b      	b.n	800b182 <_gcvt+0x15a>
 800b12a:	2302      	movs	r3, #2
 800b12c:	e7cc      	b.n	800b0c8 <_gcvt+0xa0>
 800b12e:	4601      	mov	r1, r0
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff f81b 	bl	800a16c <strcpy>
 800b136:	e795      	b.n	800b064 <_gcvt+0x3c>
 800b138:	3d01      	subs	r5, #1
 800b13a:	f803 1b01 	strb.w	r1, [r3], #1
 800b13e:	9507      	str	r5, [sp, #28]
 800b140:	e7cf      	b.n	800b0e2 <_gcvt+0xba>
 800b142:	1aad      	subs	r5, r5, r2
 800b144:	2630      	movs	r6, #48	; 0x30
 800b146:	e005      	b.n	800b154 <_gcvt+0x12c>
 800b148:	2a00      	cmp	r2, #0
 800b14a:	dd06      	ble.n	800b15a <_gcvt+0x132>
 800b14c:	2101      	movs	r1, #1
 800b14e:	f803 6b01 	strb.w	r6, [r3], #1
 800b152:	3a01      	subs	r2, #1
 800b154:	18a8      	adds	r0, r5, r2
 800b156:	2800      	cmp	r0, #0
 800b158:	dcf6      	bgt.n	800b148 <_gcvt+0x120>
 800b15a:	2900      	cmp	r1, #0
 800b15c:	d0c9      	beq.n	800b0f2 <_gcvt+0xca>
 800b15e:	9007      	str	r0, [sp, #28]
 800b160:	e7c7      	b.n	800b0f2 <_gcvt+0xca>
 800b162:	f803 6b01 	strb.w	r6, [r3], #1
 800b166:	3a01      	subs	r2, #1
 800b168:	2001      	movs	r0, #1
 800b16a:	e7d7      	b.n	800b11c <_gcvt+0xf4>
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	f101 0101 	add.w	r1, r1, #1
 800b172:	dcf6      	bgt.n	800b162 <_gcvt+0x13a>
 800b174:	2800      	cmp	r0, #0
 800b176:	d0d6      	beq.n	800b126 <_gcvt+0xfe>
 800b178:	9507      	str	r5, [sp, #28]
 800b17a:	e7d4      	b.n	800b126 <_gcvt+0xfe>
 800b17c:	f803 0b01 	strb.w	r0, [r3], #1
 800b180:	3a01      	subs	r2, #1
 800b182:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b186:	b108      	cbz	r0, 800b18c <_gcvt+0x164>
 800b188:	2a00      	cmp	r2, #0
 800b18a:	dcf7      	bgt.n	800b17c <_gcvt+0x154>
 800b18c:	f1b8 0f00 	cmp.w	r8, #0
 800b190:	d10b      	bne.n	800b1aa <_gcvt+0x182>
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
 800b196:	e765      	b.n	800b064 <_gcvt+0x3c>
 800b198:	f801 6b01 	strb.w	r6, [r1], #1
 800b19c:	1a68      	subs	r0, r5, r1
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	dcfa      	bgt.n	800b198 <_gcvt+0x170>
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	bfa8      	it	ge
 800b1a6:	189b      	addge	r3, r3, r2
 800b1a8:	e7f3      	b.n	800b192 <_gcvt+0x16a>
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	189d      	adds	r5, r3, r2
 800b1ae:	2630      	movs	r6, #48	; 0x30
 800b1b0:	e7f4      	b.n	800b19c <_gcvt+0x174>
 800b1b2:	bf00      	nop
 800b1b4:	f3af 8000 	nop.w
 800b1b8:	eb1c432d 	.word	0xeb1c432d
 800b1bc:	3f1a36e2 	.word	0x3f1a36e2
 800b1c0:	3ff00000 	.word	0x3ff00000

0800b1c4 <rshift>:
 800b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1c6:	6906      	ldr	r6, [r0, #16]
 800b1c8:	114b      	asrs	r3, r1, #5
 800b1ca:	429e      	cmp	r6, r3
 800b1cc:	f100 0414 	add.w	r4, r0, #20
 800b1d0:	dd31      	ble.n	800b236 <rshift+0x72>
 800b1d2:	f011 011f 	ands.w	r1, r1, #31
 800b1d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b1da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b1de:	d108      	bne.n	800b1f2 <rshift+0x2e>
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	42b2      	cmp	r2, r6
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	d211      	bcs.n	800b20c <rshift+0x48>
 800b1e8:	f852 3b04 	ldr.w	r3, [r2], #4
 800b1ec:	f841 3b04 	str.w	r3, [r1], #4
 800b1f0:	e7f7      	b.n	800b1e2 <rshift+0x1e>
 800b1f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b1f6:	4623      	mov	r3, r4
 800b1f8:	f1c1 0c20 	rsb	ip, r1, #32
 800b1fc:	40cd      	lsrs	r5, r1
 800b1fe:	3204      	adds	r2, #4
 800b200:	42b2      	cmp	r2, r6
 800b202:	4617      	mov	r7, r2
 800b204:	d30d      	bcc.n	800b222 <rshift+0x5e>
 800b206:	601d      	str	r5, [r3, #0]
 800b208:	b105      	cbz	r5, 800b20c <rshift+0x48>
 800b20a:	3304      	adds	r3, #4
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	eba3 0204 	sub.w	r2, r3, r4
 800b212:	bf08      	it	eq
 800b214:	2300      	moveq	r3, #0
 800b216:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b21a:	6102      	str	r2, [r0, #16]
 800b21c:	bf08      	it	eq
 800b21e:	6143      	streq	r3, [r0, #20]
 800b220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b222:	683f      	ldr	r7, [r7, #0]
 800b224:	fa07 f70c 	lsl.w	r7, r7, ip
 800b228:	433d      	orrs	r5, r7
 800b22a:	f843 5b04 	str.w	r5, [r3], #4
 800b22e:	f852 5b04 	ldr.w	r5, [r2], #4
 800b232:	40cd      	lsrs	r5, r1
 800b234:	e7e4      	b.n	800b200 <rshift+0x3c>
 800b236:	4623      	mov	r3, r4
 800b238:	e7e8      	b.n	800b20c <rshift+0x48>

0800b23a <__hexdig_fun>:
 800b23a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b23e:	2b09      	cmp	r3, #9
 800b240:	d802      	bhi.n	800b248 <__hexdig_fun+0xe>
 800b242:	3820      	subs	r0, #32
 800b244:	b2c0      	uxtb	r0, r0
 800b246:	4770      	bx	lr
 800b248:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b24c:	2b05      	cmp	r3, #5
 800b24e:	d801      	bhi.n	800b254 <__hexdig_fun+0x1a>
 800b250:	3847      	subs	r0, #71	; 0x47
 800b252:	e7f7      	b.n	800b244 <__hexdig_fun+0xa>
 800b254:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b258:	2b05      	cmp	r3, #5
 800b25a:	d801      	bhi.n	800b260 <__hexdig_fun+0x26>
 800b25c:	3827      	subs	r0, #39	; 0x27
 800b25e:	e7f1      	b.n	800b244 <__hexdig_fun+0xa>
 800b260:	2000      	movs	r0, #0
 800b262:	4770      	bx	lr

0800b264 <__gethex>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	b08b      	sub	sp, #44	; 0x2c
 800b26a:	9002      	str	r0, [sp, #8]
 800b26c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b26e:	468a      	mov	sl, r1
 800b270:	4690      	mov	r8, r2
 800b272:	9306      	str	r3, [sp, #24]
 800b274:	f000 fad1 	bl	800b81a <__localeconv_l>
 800b278:	6803      	ldr	r3, [r0, #0]
 800b27a:	f04f 0b00 	mov.w	fp, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	9303      	str	r3, [sp, #12]
 800b282:	f7f4 ff65 	bl	8000150 <strlen>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	9001      	str	r0, [sp, #4]
 800b28a:	4403      	add	r3, r0
 800b28c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	f8da 3000 	ldr.w	r3, [sl]
 800b296:	3302      	adds	r3, #2
 800b298:	461f      	mov	r7, r3
 800b29a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b29e:	2830      	cmp	r0, #48	; 0x30
 800b2a0:	d06c      	beq.n	800b37c <__gethex+0x118>
 800b2a2:	f7ff ffca 	bl	800b23a <__hexdig_fun>
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d16a      	bne.n	800b382 <__gethex+0x11e>
 800b2ac:	9a01      	ldr	r2, [sp, #4]
 800b2ae:	9903      	ldr	r1, [sp, #12]
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f001 fa5f 	bl	800c774 <strncmp>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d166      	bne.n	800b388 <__gethex+0x124>
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	5cf8      	ldrb	r0, [r7, r3]
 800b2be:	18fe      	adds	r6, r7, r3
 800b2c0:	f7ff ffbb 	bl	800b23a <__hexdig_fun>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d062      	beq.n	800b38e <__gethex+0x12a>
 800b2c8:	4633      	mov	r3, r6
 800b2ca:	7818      	ldrb	r0, [r3, #0]
 800b2cc:	461f      	mov	r7, r3
 800b2ce:	2830      	cmp	r0, #48	; 0x30
 800b2d0:	f103 0301 	add.w	r3, r3, #1
 800b2d4:	d0f9      	beq.n	800b2ca <__gethex+0x66>
 800b2d6:	f7ff ffb0 	bl	800b23a <__hexdig_fun>
 800b2da:	fab0 f580 	clz	r5, r0
 800b2de:	4634      	mov	r4, r6
 800b2e0:	f04f 0b01 	mov.w	fp, #1
 800b2e4:	096d      	lsrs	r5, r5, #5
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4616      	mov	r6, r2
 800b2ea:	7830      	ldrb	r0, [r6, #0]
 800b2ec:	3201      	adds	r2, #1
 800b2ee:	f7ff ffa4 	bl	800b23a <__hexdig_fun>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d1f8      	bne.n	800b2e8 <__gethex+0x84>
 800b2f6:	9a01      	ldr	r2, [sp, #4]
 800b2f8:	9903      	ldr	r1, [sp, #12]
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f001 fa3a 	bl	800c774 <strncmp>
 800b300:	b950      	cbnz	r0, 800b318 <__gethex+0xb4>
 800b302:	b954      	cbnz	r4, 800b31a <__gethex+0xb6>
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	18f4      	adds	r4, r6, r3
 800b308:	4622      	mov	r2, r4
 800b30a:	4616      	mov	r6, r2
 800b30c:	7830      	ldrb	r0, [r6, #0]
 800b30e:	3201      	adds	r2, #1
 800b310:	f7ff ff93 	bl	800b23a <__hexdig_fun>
 800b314:	2800      	cmp	r0, #0
 800b316:	d1f8      	bne.n	800b30a <__gethex+0xa6>
 800b318:	b10c      	cbz	r4, 800b31e <__gethex+0xba>
 800b31a:	1ba4      	subs	r4, r4, r6
 800b31c:	00a4      	lsls	r4, r4, #2
 800b31e:	7833      	ldrb	r3, [r6, #0]
 800b320:	2b50      	cmp	r3, #80	; 0x50
 800b322:	d001      	beq.n	800b328 <__gethex+0xc4>
 800b324:	2b70      	cmp	r3, #112	; 0x70
 800b326:	d140      	bne.n	800b3aa <__gethex+0x146>
 800b328:	7873      	ldrb	r3, [r6, #1]
 800b32a:	2b2b      	cmp	r3, #43	; 0x2b
 800b32c:	d031      	beq.n	800b392 <__gethex+0x12e>
 800b32e:	2b2d      	cmp	r3, #45	; 0x2d
 800b330:	d033      	beq.n	800b39a <__gethex+0x136>
 800b332:	f04f 0900 	mov.w	r9, #0
 800b336:	1c71      	adds	r1, r6, #1
 800b338:	7808      	ldrb	r0, [r1, #0]
 800b33a:	f7ff ff7e 	bl	800b23a <__hexdig_fun>
 800b33e:	1e43      	subs	r3, r0, #1
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b18      	cmp	r3, #24
 800b344:	d831      	bhi.n	800b3aa <__gethex+0x146>
 800b346:	f1a0 0210 	sub.w	r2, r0, #16
 800b34a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b34e:	f7ff ff74 	bl	800b23a <__hexdig_fun>
 800b352:	1e43      	subs	r3, r0, #1
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b18      	cmp	r3, #24
 800b358:	d922      	bls.n	800b3a0 <__gethex+0x13c>
 800b35a:	f1b9 0f00 	cmp.w	r9, #0
 800b35e:	d000      	beq.n	800b362 <__gethex+0xfe>
 800b360:	4252      	negs	r2, r2
 800b362:	4414      	add	r4, r2
 800b364:	f8ca 1000 	str.w	r1, [sl]
 800b368:	b30d      	cbz	r5, 800b3ae <__gethex+0x14a>
 800b36a:	f1bb 0f00 	cmp.w	fp, #0
 800b36e:	bf0c      	ite	eq
 800b370:	2706      	moveq	r7, #6
 800b372:	2700      	movne	r7, #0
 800b374:	4638      	mov	r0, r7
 800b376:	b00b      	add	sp, #44	; 0x2c
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	f10b 0b01 	add.w	fp, fp, #1
 800b380:	e78a      	b.n	800b298 <__gethex+0x34>
 800b382:	2500      	movs	r5, #0
 800b384:	462c      	mov	r4, r5
 800b386:	e7ae      	b.n	800b2e6 <__gethex+0x82>
 800b388:	463e      	mov	r6, r7
 800b38a:	2501      	movs	r5, #1
 800b38c:	e7c7      	b.n	800b31e <__gethex+0xba>
 800b38e:	4604      	mov	r4, r0
 800b390:	e7fb      	b.n	800b38a <__gethex+0x126>
 800b392:	f04f 0900 	mov.w	r9, #0
 800b396:	1cb1      	adds	r1, r6, #2
 800b398:	e7ce      	b.n	800b338 <__gethex+0xd4>
 800b39a:	f04f 0901 	mov.w	r9, #1
 800b39e:	e7fa      	b.n	800b396 <__gethex+0x132>
 800b3a0:	230a      	movs	r3, #10
 800b3a2:	fb03 0202 	mla	r2, r3, r2, r0
 800b3a6:	3a10      	subs	r2, #16
 800b3a8:	e7cf      	b.n	800b34a <__gethex+0xe6>
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	e7da      	b.n	800b364 <__gethex+0x100>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	1bf3      	subs	r3, r6, r7
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	dc49      	bgt.n	800b44c <__gethex+0x1e8>
 800b3b8:	9802      	ldr	r0, [sp, #8]
 800b3ba:	f000 fa4d 	bl	800b858 <_Balloc>
 800b3be:	f04f 0b00 	mov.w	fp, #0
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	46da      	mov	sl, fp
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	f100 0914 	add.w	r9, r0, #20
 800b3cc:	f1c3 0301 	rsb	r3, r3, #1
 800b3d0:	f8cd 9010 	str.w	r9, [sp, #16]
 800b3d4:	9308      	str	r3, [sp, #32]
 800b3d6:	42b7      	cmp	r7, r6
 800b3d8:	d33b      	bcc.n	800b452 <__gethex+0x1ee>
 800b3da:	9804      	ldr	r0, [sp, #16]
 800b3dc:	f840 ab04 	str.w	sl, [r0], #4
 800b3e0:	eba0 0009 	sub.w	r0, r0, r9
 800b3e4:	1080      	asrs	r0, r0, #2
 800b3e6:	6128      	str	r0, [r5, #16]
 800b3e8:	0147      	lsls	r7, r0, #5
 800b3ea:	4650      	mov	r0, sl
 800b3ec:	f000 faf8 	bl	800b9e0 <__hi0bits>
 800b3f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b3f4:	1a3f      	subs	r7, r7, r0
 800b3f6:	42b7      	cmp	r7, r6
 800b3f8:	dd64      	ble.n	800b4c4 <__gethex+0x260>
 800b3fa:	1bbf      	subs	r7, r7, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	4628      	mov	r0, r5
 800b400:	f000 fe1e 	bl	800c040 <__any_on>
 800b404:	4682      	mov	sl, r0
 800b406:	b178      	cbz	r0, 800b428 <__gethex+0x1c4>
 800b408:	f04f 0a01 	mov.w	sl, #1
 800b40c:	1e7b      	subs	r3, r7, #1
 800b40e:	1159      	asrs	r1, r3, #5
 800b410:	f003 021f 	and.w	r2, r3, #31
 800b414:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b418:	fa0a f202 	lsl.w	r2, sl, r2
 800b41c:	420a      	tst	r2, r1
 800b41e:	d003      	beq.n	800b428 <__gethex+0x1c4>
 800b420:	4553      	cmp	r3, sl
 800b422:	dc46      	bgt.n	800b4b2 <__gethex+0x24e>
 800b424:	f04f 0a02 	mov.w	sl, #2
 800b428:	4639      	mov	r1, r7
 800b42a:	4628      	mov	r0, r5
 800b42c:	f7ff feca 	bl	800b1c4 <rshift>
 800b430:	443c      	add	r4, r7
 800b432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b436:	42a3      	cmp	r3, r4
 800b438:	da52      	bge.n	800b4e0 <__gethex+0x27c>
 800b43a:	4629      	mov	r1, r5
 800b43c:	9802      	ldr	r0, [sp, #8]
 800b43e:	f000 fa3f 	bl	800b8c0 <_Bfree>
 800b442:	2300      	movs	r3, #0
 800b444:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b446:	27a3      	movs	r7, #163	; 0xa3
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	e793      	b.n	800b374 <__gethex+0x110>
 800b44c:	3101      	adds	r1, #1
 800b44e:	105b      	asrs	r3, r3, #1
 800b450:	e7b0      	b.n	800b3b4 <__gethex+0x150>
 800b452:	1e73      	subs	r3, r6, #1
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	9a07      	ldr	r2, [sp, #28]
 800b458:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d018      	beq.n	800b492 <__gethex+0x22e>
 800b460:	f1bb 0f20 	cmp.w	fp, #32
 800b464:	d107      	bne.n	800b476 <__gethex+0x212>
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	f8c3 a000 	str.w	sl, [r3]
 800b46c:	f04f 0a00 	mov.w	sl, #0
 800b470:	46d3      	mov	fp, sl
 800b472:	3304      	adds	r3, #4
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b47a:	f7ff fede 	bl	800b23a <__hexdig_fun>
 800b47e:	f000 000f 	and.w	r0, r0, #15
 800b482:	fa00 f00b 	lsl.w	r0, r0, fp
 800b486:	ea4a 0a00 	orr.w	sl, sl, r0
 800b48a:	f10b 0b04 	add.w	fp, fp, #4
 800b48e:	9b05      	ldr	r3, [sp, #20]
 800b490:	e00d      	b.n	800b4ae <__gethex+0x24a>
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	9a08      	ldr	r2, [sp, #32]
 800b496:	4413      	add	r3, r2
 800b498:	42bb      	cmp	r3, r7
 800b49a:	d3e1      	bcc.n	800b460 <__gethex+0x1fc>
 800b49c:	4618      	mov	r0, r3
 800b49e:	9a01      	ldr	r2, [sp, #4]
 800b4a0:	9903      	ldr	r1, [sp, #12]
 800b4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a4:	f001 f966 	bl	800c774 <strncmp>
 800b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d1d8      	bne.n	800b460 <__gethex+0x1fc>
 800b4ae:	461e      	mov	r6, r3
 800b4b0:	e791      	b.n	800b3d6 <__gethex+0x172>
 800b4b2:	1eb9      	subs	r1, r7, #2
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f000 fdc3 	bl	800c040 <__any_on>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0b2      	beq.n	800b424 <__gethex+0x1c0>
 800b4be:	f04f 0a03 	mov.w	sl, #3
 800b4c2:	e7b1      	b.n	800b428 <__gethex+0x1c4>
 800b4c4:	da09      	bge.n	800b4da <__gethex+0x276>
 800b4c6:	1bf7      	subs	r7, r6, r7
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	463a      	mov	r2, r7
 800b4cc:	9802      	ldr	r0, [sp, #8]
 800b4ce:	f000 fbc1 	bl	800bc54 <__lshift>
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	1be4      	subs	r4, r4, r7
 800b4d6:	f100 0914 	add.w	r9, r0, #20
 800b4da:	f04f 0a00 	mov.w	sl, #0
 800b4de:	e7a8      	b.n	800b432 <__gethex+0x1ce>
 800b4e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4e4:	42a0      	cmp	r0, r4
 800b4e6:	dd6b      	ble.n	800b5c0 <__gethex+0x35c>
 800b4e8:	1b04      	subs	r4, r0, r4
 800b4ea:	42a6      	cmp	r6, r4
 800b4ec:	dc2e      	bgt.n	800b54c <__gethex+0x2e8>
 800b4ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d022      	beq.n	800b53c <__gethex+0x2d8>
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d024      	beq.n	800b544 <__gethex+0x2e0>
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d115      	bne.n	800b52a <__gethex+0x2c6>
 800b4fe:	42a6      	cmp	r6, r4
 800b500:	d113      	bne.n	800b52a <__gethex+0x2c6>
 800b502:	2e01      	cmp	r6, #1
 800b504:	dc0b      	bgt.n	800b51e <__gethex+0x2ba>
 800b506:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b50a:	9a06      	ldr	r2, [sp, #24]
 800b50c:	2762      	movs	r7, #98	; 0x62
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	2301      	movs	r3, #1
 800b512:	612b      	str	r3, [r5, #16]
 800b514:	f8c9 3000 	str.w	r3, [r9]
 800b518:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b51a:	601d      	str	r5, [r3, #0]
 800b51c:	e72a      	b.n	800b374 <__gethex+0x110>
 800b51e:	1e71      	subs	r1, r6, #1
 800b520:	4628      	mov	r0, r5
 800b522:	f000 fd8d 	bl	800c040 <__any_on>
 800b526:	2800      	cmp	r0, #0
 800b528:	d1ed      	bne.n	800b506 <__gethex+0x2a2>
 800b52a:	4629      	mov	r1, r5
 800b52c:	9802      	ldr	r0, [sp, #8]
 800b52e:	f000 f9c7 	bl	800b8c0 <_Bfree>
 800b532:	2300      	movs	r3, #0
 800b534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b536:	2750      	movs	r7, #80	; 0x50
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	e71b      	b.n	800b374 <__gethex+0x110>
 800b53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0e1      	beq.n	800b506 <__gethex+0x2a2>
 800b542:	e7f2      	b.n	800b52a <__gethex+0x2c6>
 800b544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1dd      	bne.n	800b506 <__gethex+0x2a2>
 800b54a:	e7ee      	b.n	800b52a <__gethex+0x2c6>
 800b54c:	1e67      	subs	r7, r4, #1
 800b54e:	f1ba 0f00 	cmp.w	sl, #0
 800b552:	d132      	bne.n	800b5ba <__gethex+0x356>
 800b554:	b127      	cbz	r7, 800b560 <__gethex+0x2fc>
 800b556:	4639      	mov	r1, r7
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 fd71 	bl	800c040 <__any_on>
 800b55e:	4682      	mov	sl, r0
 800b560:	2301      	movs	r3, #1
 800b562:	117a      	asrs	r2, r7, #5
 800b564:	f007 071f 	and.w	r7, r7, #31
 800b568:	fa03 f707 	lsl.w	r7, r3, r7
 800b56c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b570:	4621      	mov	r1, r4
 800b572:	421f      	tst	r7, r3
 800b574:	f04f 0702 	mov.w	r7, #2
 800b578:	4628      	mov	r0, r5
 800b57a:	bf18      	it	ne
 800b57c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b580:	1b36      	subs	r6, r6, r4
 800b582:	f7ff fe1f 	bl	800b1c4 <rshift>
 800b586:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b58a:	f1ba 0f00 	cmp.w	sl, #0
 800b58e:	d048      	beq.n	800b622 <__gethex+0x3be>
 800b590:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b594:	2b02      	cmp	r3, #2
 800b596:	d015      	beq.n	800b5c4 <__gethex+0x360>
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d017      	beq.n	800b5cc <__gethex+0x368>
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d109      	bne.n	800b5b4 <__gethex+0x350>
 800b5a0:	f01a 0f02 	tst.w	sl, #2
 800b5a4:	d006      	beq.n	800b5b4 <__gethex+0x350>
 800b5a6:	f8d9 3000 	ldr.w	r3, [r9]
 800b5aa:	ea4a 0a03 	orr.w	sl, sl, r3
 800b5ae:	f01a 0f01 	tst.w	sl, #1
 800b5b2:	d10e      	bne.n	800b5d2 <__gethex+0x36e>
 800b5b4:	f047 0710 	orr.w	r7, r7, #16
 800b5b8:	e033      	b.n	800b622 <__gethex+0x3be>
 800b5ba:	f04f 0a01 	mov.w	sl, #1
 800b5be:	e7cf      	b.n	800b560 <__gethex+0x2fc>
 800b5c0:	2701      	movs	r7, #1
 800b5c2:	e7e2      	b.n	800b58a <__gethex+0x326>
 800b5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5c6:	f1c3 0301 	rsb	r3, r3, #1
 800b5ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0f0      	beq.n	800b5b4 <__gethex+0x350>
 800b5d2:	f04f 0c00 	mov.w	ip, #0
 800b5d6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b5da:	f105 0314 	add.w	r3, r5, #20
 800b5de:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b5e2:	eb03 010a 	add.w	r1, r3, sl
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ec:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b5f0:	d01c      	beq.n	800b62c <__gethex+0x3c8>
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	6002      	str	r2, [r0, #0]
 800b5f6:	2f02      	cmp	r7, #2
 800b5f8:	f105 0314 	add.w	r3, r5, #20
 800b5fc:	d138      	bne.n	800b670 <__gethex+0x40c>
 800b5fe:	f8d8 2000 	ldr.w	r2, [r8]
 800b602:	3a01      	subs	r2, #1
 800b604:	42b2      	cmp	r2, r6
 800b606:	d10a      	bne.n	800b61e <__gethex+0x3ba>
 800b608:	2201      	movs	r2, #1
 800b60a:	1171      	asrs	r1, r6, #5
 800b60c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b610:	f006 061f 	and.w	r6, r6, #31
 800b614:	fa02 f606 	lsl.w	r6, r2, r6
 800b618:	421e      	tst	r6, r3
 800b61a:	bf18      	it	ne
 800b61c:	4617      	movne	r7, r2
 800b61e:	f047 0720 	orr.w	r7, r7, #32
 800b622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b624:	601d      	str	r5, [r3, #0]
 800b626:	9b06      	ldr	r3, [sp, #24]
 800b628:	601c      	str	r4, [r3, #0]
 800b62a:	e6a3      	b.n	800b374 <__gethex+0x110>
 800b62c:	4299      	cmp	r1, r3
 800b62e:	f843 cc04 	str.w	ip, [r3, #-4]
 800b632:	d8d8      	bhi.n	800b5e6 <__gethex+0x382>
 800b634:	68ab      	ldr	r3, [r5, #8]
 800b636:	4599      	cmp	r9, r3
 800b638:	db12      	blt.n	800b660 <__gethex+0x3fc>
 800b63a:	6869      	ldr	r1, [r5, #4]
 800b63c:	9802      	ldr	r0, [sp, #8]
 800b63e:	3101      	adds	r1, #1
 800b640:	f000 f90a 	bl	800b858 <_Balloc>
 800b644:	4683      	mov	fp, r0
 800b646:	692a      	ldr	r2, [r5, #16]
 800b648:	f105 010c 	add.w	r1, r5, #12
 800b64c:	3202      	adds	r2, #2
 800b64e:	0092      	lsls	r2, r2, #2
 800b650:	300c      	adds	r0, #12
 800b652:	f000 f8f6 	bl	800b842 <memcpy>
 800b656:	4629      	mov	r1, r5
 800b658:	9802      	ldr	r0, [sp, #8]
 800b65a:	f000 f931 	bl	800b8c0 <_Bfree>
 800b65e:	465d      	mov	r5, fp
 800b660:	692b      	ldr	r3, [r5, #16]
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	612a      	str	r2, [r5, #16]
 800b666:	2201      	movs	r2, #1
 800b668:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b66c:	615a      	str	r2, [r3, #20]
 800b66e:	e7c2      	b.n	800b5f6 <__gethex+0x392>
 800b670:	692a      	ldr	r2, [r5, #16]
 800b672:	454a      	cmp	r2, r9
 800b674:	dd0b      	ble.n	800b68e <__gethex+0x42a>
 800b676:	2101      	movs	r1, #1
 800b678:	4628      	mov	r0, r5
 800b67a:	f7ff fda3 	bl	800b1c4 <rshift>
 800b67e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b682:	3401      	adds	r4, #1
 800b684:	42a3      	cmp	r3, r4
 800b686:	f6ff aed8 	blt.w	800b43a <__gethex+0x1d6>
 800b68a:	2701      	movs	r7, #1
 800b68c:	e7c7      	b.n	800b61e <__gethex+0x3ba>
 800b68e:	f016 061f 	ands.w	r6, r6, #31
 800b692:	d0fa      	beq.n	800b68a <__gethex+0x426>
 800b694:	449a      	add	sl, r3
 800b696:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b69a:	f000 f9a1 	bl	800b9e0 <__hi0bits>
 800b69e:	f1c6 0620 	rsb	r6, r6, #32
 800b6a2:	42b0      	cmp	r0, r6
 800b6a4:	dbe7      	blt.n	800b676 <__gethex+0x412>
 800b6a6:	e7f0      	b.n	800b68a <__gethex+0x426>

0800b6a8 <L_shift>:
 800b6a8:	f1c2 0208 	rsb	r2, r2, #8
 800b6ac:	0092      	lsls	r2, r2, #2
 800b6ae:	b570      	push	{r4, r5, r6, lr}
 800b6b0:	f1c2 0620 	rsb	r6, r2, #32
 800b6b4:	6843      	ldr	r3, [r0, #4]
 800b6b6:	6804      	ldr	r4, [r0, #0]
 800b6b8:	fa03 f506 	lsl.w	r5, r3, r6
 800b6bc:	432c      	orrs	r4, r5
 800b6be:	40d3      	lsrs	r3, r2
 800b6c0:	6004      	str	r4, [r0, #0]
 800b6c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6c6:	4288      	cmp	r0, r1
 800b6c8:	d3f4      	bcc.n	800b6b4 <L_shift+0xc>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}

0800b6cc <__match>:
 800b6cc:	b530      	push	{r4, r5, lr}
 800b6ce:	6803      	ldr	r3, [r0, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6d6:	b914      	cbnz	r4, 800b6de <__match+0x12>
 800b6d8:	6003      	str	r3, [r0, #0]
 800b6da:	2001      	movs	r0, #1
 800b6dc:	bd30      	pop	{r4, r5, pc}
 800b6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6e6:	2d19      	cmp	r5, #25
 800b6e8:	bf98      	it	ls
 800b6ea:	3220      	addls	r2, #32
 800b6ec:	42a2      	cmp	r2, r4
 800b6ee:	d0f0      	beq.n	800b6d2 <__match+0x6>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	e7f3      	b.n	800b6dc <__match+0x10>

0800b6f4 <__hexnan>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	2500      	movs	r5, #0
 800b6fa:	680b      	ldr	r3, [r1, #0]
 800b6fc:	4682      	mov	sl, r0
 800b6fe:	115f      	asrs	r7, r3, #5
 800b700:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b704:	f013 031f 	ands.w	r3, r3, #31
 800b708:	bf18      	it	ne
 800b70a:	3704      	addne	r7, #4
 800b70c:	1f3e      	subs	r6, r7, #4
 800b70e:	4690      	mov	r8, r2
 800b710:	46b1      	mov	r9, r6
 800b712:	4634      	mov	r4, r6
 800b714:	46ab      	mov	fp, r5
 800b716:	b087      	sub	sp, #28
 800b718:	6801      	ldr	r1, [r0, #0]
 800b71a:	9301      	str	r3, [sp, #4]
 800b71c:	f847 5c04 	str.w	r5, [r7, #-4]
 800b720:	9502      	str	r5, [sp, #8]
 800b722:	784a      	ldrb	r2, [r1, #1]
 800b724:	1c4b      	adds	r3, r1, #1
 800b726:	9303      	str	r3, [sp, #12]
 800b728:	b342      	cbz	r2, 800b77c <__hexnan+0x88>
 800b72a:	4610      	mov	r0, r2
 800b72c:	9105      	str	r1, [sp, #20]
 800b72e:	9204      	str	r2, [sp, #16]
 800b730:	f7ff fd83 	bl	800b23a <__hexdig_fun>
 800b734:	2800      	cmp	r0, #0
 800b736:	d143      	bne.n	800b7c0 <__hexnan+0xcc>
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	9905      	ldr	r1, [sp, #20]
 800b73c:	2a20      	cmp	r2, #32
 800b73e:	d818      	bhi.n	800b772 <__hexnan+0x7e>
 800b740:	9b02      	ldr	r3, [sp, #8]
 800b742:	459b      	cmp	fp, r3
 800b744:	dd13      	ble.n	800b76e <__hexnan+0x7a>
 800b746:	454c      	cmp	r4, r9
 800b748:	d206      	bcs.n	800b758 <__hexnan+0x64>
 800b74a:	2d07      	cmp	r5, #7
 800b74c:	dc04      	bgt.n	800b758 <__hexnan+0x64>
 800b74e:	462a      	mov	r2, r5
 800b750:	4649      	mov	r1, r9
 800b752:	4620      	mov	r0, r4
 800b754:	f7ff ffa8 	bl	800b6a8 <L_shift>
 800b758:	4544      	cmp	r4, r8
 800b75a:	d944      	bls.n	800b7e6 <__hexnan+0xf2>
 800b75c:	2300      	movs	r3, #0
 800b75e:	f1a4 0904 	sub.w	r9, r4, #4
 800b762:	f844 3c04 	str.w	r3, [r4, #-4]
 800b766:	461d      	mov	r5, r3
 800b768:	464c      	mov	r4, r9
 800b76a:	f8cd b008 	str.w	fp, [sp, #8]
 800b76e:	9903      	ldr	r1, [sp, #12]
 800b770:	e7d7      	b.n	800b722 <__hexnan+0x2e>
 800b772:	2a29      	cmp	r2, #41	; 0x29
 800b774:	d14a      	bne.n	800b80c <__hexnan+0x118>
 800b776:	3102      	adds	r1, #2
 800b778:	f8ca 1000 	str.w	r1, [sl]
 800b77c:	f1bb 0f00 	cmp.w	fp, #0
 800b780:	d044      	beq.n	800b80c <__hexnan+0x118>
 800b782:	454c      	cmp	r4, r9
 800b784:	d206      	bcs.n	800b794 <__hexnan+0xa0>
 800b786:	2d07      	cmp	r5, #7
 800b788:	dc04      	bgt.n	800b794 <__hexnan+0xa0>
 800b78a:	462a      	mov	r2, r5
 800b78c:	4649      	mov	r1, r9
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff ff8a 	bl	800b6a8 <L_shift>
 800b794:	4544      	cmp	r4, r8
 800b796:	d928      	bls.n	800b7ea <__hexnan+0xf6>
 800b798:	4643      	mov	r3, r8
 800b79a:	f854 2b04 	ldr.w	r2, [r4], #4
 800b79e:	42a6      	cmp	r6, r4
 800b7a0:	f843 2b04 	str.w	r2, [r3], #4
 800b7a4:	d2f9      	bcs.n	800b79a <__hexnan+0xa6>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f843 2b04 	str.w	r2, [r3], #4
 800b7ac:	429e      	cmp	r6, r3
 800b7ae:	d2fb      	bcs.n	800b7a8 <__hexnan+0xb4>
 800b7b0:	6833      	ldr	r3, [r6, #0]
 800b7b2:	b91b      	cbnz	r3, 800b7bc <__hexnan+0xc8>
 800b7b4:	4546      	cmp	r6, r8
 800b7b6:	d127      	bne.n	800b808 <__hexnan+0x114>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	6033      	str	r3, [r6, #0]
 800b7bc:	2005      	movs	r0, #5
 800b7be:	e026      	b.n	800b80e <__hexnan+0x11a>
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	2d08      	cmp	r5, #8
 800b7c4:	f10b 0b01 	add.w	fp, fp, #1
 800b7c8:	dd06      	ble.n	800b7d8 <__hexnan+0xe4>
 800b7ca:	4544      	cmp	r4, r8
 800b7cc:	d9cf      	bls.n	800b76e <__hexnan+0x7a>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	2501      	movs	r5, #1
 800b7d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7d6:	3c04      	subs	r4, #4
 800b7d8:	6822      	ldr	r2, [r4, #0]
 800b7da:	f000 000f 	and.w	r0, r0, #15
 800b7de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b7e2:	6020      	str	r0, [r4, #0]
 800b7e4:	e7c3      	b.n	800b76e <__hexnan+0x7a>
 800b7e6:	2508      	movs	r5, #8
 800b7e8:	e7c1      	b.n	800b76e <__hexnan+0x7a>
 800b7ea:	9b01      	ldr	r3, [sp, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0df      	beq.n	800b7b0 <__hexnan+0xbc>
 800b7f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7f4:	f1c3 0320 	rsb	r3, r3, #32
 800b7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b800:	401a      	ands	r2, r3
 800b802:	f847 2c04 	str.w	r2, [r7, #-4]
 800b806:	e7d3      	b.n	800b7b0 <__hexnan+0xbc>
 800b808:	3e04      	subs	r6, #4
 800b80a:	e7d1      	b.n	800b7b0 <__hexnan+0xbc>
 800b80c:	2004      	movs	r0, #4
 800b80e:	b007      	add	sp, #28
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b814 <__locale_ctype_ptr_l>:
 800b814:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b818:	4770      	bx	lr

0800b81a <__localeconv_l>:
 800b81a:	30f0      	adds	r0, #240	; 0xf0
 800b81c:	4770      	bx	lr

0800b81e <__ascii_mbtowc>:
 800b81e:	b082      	sub	sp, #8
 800b820:	b901      	cbnz	r1, 800b824 <__ascii_mbtowc+0x6>
 800b822:	a901      	add	r1, sp, #4
 800b824:	b142      	cbz	r2, 800b838 <__ascii_mbtowc+0x1a>
 800b826:	b14b      	cbz	r3, 800b83c <__ascii_mbtowc+0x1e>
 800b828:	7813      	ldrb	r3, [r2, #0]
 800b82a:	600b      	str	r3, [r1, #0]
 800b82c:	7812      	ldrb	r2, [r2, #0]
 800b82e:	1c10      	adds	r0, r2, #0
 800b830:	bf18      	it	ne
 800b832:	2001      	movne	r0, #1
 800b834:	b002      	add	sp, #8
 800b836:	4770      	bx	lr
 800b838:	4610      	mov	r0, r2
 800b83a:	e7fb      	b.n	800b834 <__ascii_mbtowc+0x16>
 800b83c:	f06f 0001 	mvn.w	r0, #1
 800b840:	e7f8      	b.n	800b834 <__ascii_mbtowc+0x16>

0800b842 <memcpy>:
 800b842:	b510      	push	{r4, lr}
 800b844:	1e43      	subs	r3, r0, #1
 800b846:	440a      	add	r2, r1
 800b848:	4291      	cmp	r1, r2
 800b84a:	d100      	bne.n	800b84e <memcpy+0xc>
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b856:	e7f7      	b.n	800b848 <memcpy+0x6>

0800b858 <_Balloc>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b85c:	4604      	mov	r4, r0
 800b85e:	460e      	mov	r6, r1
 800b860:	b93d      	cbnz	r5, 800b872 <_Balloc+0x1a>
 800b862:	2010      	movs	r0, #16
 800b864:	f001 fde8 	bl	800d438 <malloc>
 800b868:	6260      	str	r0, [r4, #36]	; 0x24
 800b86a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b86e:	6005      	str	r5, [r0, #0]
 800b870:	60c5      	str	r5, [r0, #12]
 800b872:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b874:	68eb      	ldr	r3, [r5, #12]
 800b876:	b183      	cbz	r3, 800b89a <_Balloc+0x42>
 800b878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b880:	b9b8      	cbnz	r0, 800b8b2 <_Balloc+0x5a>
 800b882:	2101      	movs	r1, #1
 800b884:	fa01 f506 	lsl.w	r5, r1, r6
 800b888:	1d6a      	adds	r2, r5, #5
 800b88a:	0092      	lsls	r2, r2, #2
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 fbf8 	bl	800c082 <_calloc_r>
 800b892:	b160      	cbz	r0, 800b8ae <_Balloc+0x56>
 800b894:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b898:	e00e      	b.n	800b8b8 <_Balloc+0x60>
 800b89a:	2221      	movs	r2, #33	; 0x21
 800b89c:	2104      	movs	r1, #4
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 fbef 	bl	800c082 <_calloc_r>
 800b8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a6:	60e8      	str	r0, [r5, #12]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e4      	bne.n	800b878 <_Balloc+0x20>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	6802      	ldr	r2, [r0, #0]
 800b8b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8be:	e7f7      	b.n	800b8b0 <_Balloc+0x58>

0800b8c0 <_Bfree>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	b93c      	cbnz	r4, 800b8da <_Bfree+0x1a>
 800b8ca:	2010      	movs	r0, #16
 800b8cc:	f001 fdb4 	bl	800d438 <malloc>
 800b8d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b8d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8d6:	6004      	str	r4, [r0, #0]
 800b8d8:	60c4      	str	r4, [r0, #12]
 800b8da:	b13d      	cbz	r5, 800b8ec <_Bfree+0x2c>
 800b8dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b8de:	686a      	ldr	r2, [r5, #4]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8e6:	6029      	str	r1, [r5, #0]
 800b8e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b8ec:	bd70      	pop	{r4, r5, r6, pc}

0800b8ee <__multadd>:
 800b8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f2:	461f      	mov	r7, r3
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	690d      	ldr	r5, [r1, #16]
 800b8fc:	f101 0c14 	add.w	ip, r1, #20
 800b900:	f8dc 0000 	ldr.w	r0, [ip]
 800b904:	3301      	adds	r3, #1
 800b906:	b281      	uxth	r1, r0
 800b908:	fb02 7101 	mla	r1, r2, r1, r7
 800b90c:	0c00      	lsrs	r0, r0, #16
 800b90e:	0c0f      	lsrs	r7, r1, #16
 800b910:	fb02 7000 	mla	r0, r2, r0, r7
 800b914:	b289      	uxth	r1, r1
 800b916:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b91a:	429d      	cmp	r5, r3
 800b91c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b920:	f84c 1b04 	str.w	r1, [ip], #4
 800b924:	dcec      	bgt.n	800b900 <__multadd+0x12>
 800b926:	b1d7      	cbz	r7, 800b95e <__multadd+0x70>
 800b928:	68a3      	ldr	r3, [r4, #8]
 800b92a:	42ab      	cmp	r3, r5
 800b92c:	dc12      	bgt.n	800b954 <__multadd+0x66>
 800b92e:	6861      	ldr	r1, [r4, #4]
 800b930:	4630      	mov	r0, r6
 800b932:	3101      	adds	r1, #1
 800b934:	f7ff ff90 	bl	800b858 <_Balloc>
 800b938:	4680      	mov	r8, r0
 800b93a:	6922      	ldr	r2, [r4, #16]
 800b93c:	f104 010c 	add.w	r1, r4, #12
 800b940:	3202      	adds	r2, #2
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	300c      	adds	r0, #12
 800b946:	f7ff ff7c 	bl	800b842 <memcpy>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4630      	mov	r0, r6
 800b94e:	f7ff ffb7 	bl	800b8c0 <_Bfree>
 800b952:	4644      	mov	r4, r8
 800b954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b958:	3501      	adds	r5, #1
 800b95a:	615f      	str	r7, [r3, #20]
 800b95c:	6125      	str	r5, [r4, #16]
 800b95e:	4620      	mov	r0, r4
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b964 <__s2b>:
 800b964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b968:	4615      	mov	r5, r2
 800b96a:	2209      	movs	r2, #9
 800b96c:	461f      	mov	r7, r3
 800b96e:	3308      	adds	r3, #8
 800b970:	460c      	mov	r4, r1
 800b972:	fb93 f3f2 	sdiv	r3, r3, r2
 800b976:	4606      	mov	r6, r0
 800b978:	2201      	movs	r2, #1
 800b97a:	2100      	movs	r1, #0
 800b97c:	429a      	cmp	r2, r3
 800b97e:	db20      	blt.n	800b9c2 <__s2b+0x5e>
 800b980:	4630      	mov	r0, r6
 800b982:	f7ff ff69 	bl	800b858 <_Balloc>
 800b986:	9b08      	ldr	r3, [sp, #32]
 800b988:	2d09      	cmp	r5, #9
 800b98a:	6143      	str	r3, [r0, #20]
 800b98c:	f04f 0301 	mov.w	r3, #1
 800b990:	6103      	str	r3, [r0, #16]
 800b992:	dd19      	ble.n	800b9c8 <__s2b+0x64>
 800b994:	f104 0809 	add.w	r8, r4, #9
 800b998:	46c1      	mov	r9, r8
 800b99a:	442c      	add	r4, r5
 800b99c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	3b30      	subs	r3, #48	; 0x30
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7ff ffa1 	bl	800b8ee <__multadd>
 800b9ac:	45a1      	cmp	r9, r4
 800b9ae:	d1f5      	bne.n	800b99c <__s2b+0x38>
 800b9b0:	eb08 0405 	add.w	r4, r8, r5
 800b9b4:	3c08      	subs	r4, #8
 800b9b6:	1b2d      	subs	r5, r5, r4
 800b9b8:	1963      	adds	r3, r4, r5
 800b9ba:	42bb      	cmp	r3, r7
 800b9bc:	db07      	blt.n	800b9ce <__s2b+0x6a>
 800b9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	0052      	lsls	r2, r2, #1
 800b9c4:	3101      	adds	r1, #1
 800b9c6:	e7d9      	b.n	800b97c <__s2b+0x18>
 800b9c8:	340a      	adds	r4, #10
 800b9ca:	2509      	movs	r5, #9
 800b9cc:	e7f3      	b.n	800b9b6 <__s2b+0x52>
 800b9ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	3b30      	subs	r3, #48	; 0x30
 800b9d6:	220a      	movs	r2, #10
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff ff88 	bl	800b8ee <__multadd>
 800b9de:	e7eb      	b.n	800b9b8 <__s2b+0x54>

0800b9e0 <__hi0bits>:
 800b9e0:	0c02      	lsrs	r2, r0, #16
 800b9e2:	0412      	lsls	r2, r2, #16
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	b9b2      	cbnz	r2, 800ba16 <__hi0bits+0x36>
 800b9e8:	0403      	lsls	r3, r0, #16
 800b9ea:	2010      	movs	r0, #16
 800b9ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b9f0:	bf04      	itt	eq
 800b9f2:	021b      	lsleq	r3, r3, #8
 800b9f4:	3008      	addeq	r0, #8
 800b9f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b9fa:	bf04      	itt	eq
 800b9fc:	011b      	lsleq	r3, r3, #4
 800b9fe:	3004      	addeq	r0, #4
 800ba00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba04:	bf04      	itt	eq
 800ba06:	009b      	lsleq	r3, r3, #2
 800ba08:	3002      	addeq	r0, #2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	db06      	blt.n	800ba1c <__hi0bits+0x3c>
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	d503      	bpl.n	800ba1a <__hi0bits+0x3a>
 800ba12:	3001      	adds	r0, #1
 800ba14:	4770      	bx	lr
 800ba16:	2000      	movs	r0, #0
 800ba18:	e7e8      	b.n	800b9ec <__hi0bits+0xc>
 800ba1a:	2020      	movs	r0, #32
 800ba1c:	4770      	bx	lr

0800ba1e <__lo0bits>:
 800ba1e:	6803      	ldr	r3, [r0, #0]
 800ba20:	4601      	mov	r1, r0
 800ba22:	f013 0207 	ands.w	r2, r3, #7
 800ba26:	d00b      	beq.n	800ba40 <__lo0bits+0x22>
 800ba28:	07da      	lsls	r2, r3, #31
 800ba2a:	d423      	bmi.n	800ba74 <__lo0bits+0x56>
 800ba2c:	0798      	lsls	r0, r3, #30
 800ba2e:	bf49      	itett	mi
 800ba30:	085b      	lsrmi	r3, r3, #1
 800ba32:	089b      	lsrpl	r3, r3, #2
 800ba34:	2001      	movmi	r0, #1
 800ba36:	600b      	strmi	r3, [r1, #0]
 800ba38:	bf5c      	itt	pl
 800ba3a:	600b      	strpl	r3, [r1, #0]
 800ba3c:	2002      	movpl	r0, #2
 800ba3e:	4770      	bx	lr
 800ba40:	b298      	uxth	r0, r3
 800ba42:	b9a8      	cbnz	r0, 800ba70 <__lo0bits+0x52>
 800ba44:	2010      	movs	r0, #16
 800ba46:	0c1b      	lsrs	r3, r3, #16
 800ba48:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba4c:	bf04      	itt	eq
 800ba4e:	0a1b      	lsreq	r3, r3, #8
 800ba50:	3008      	addeq	r0, #8
 800ba52:	071a      	lsls	r2, r3, #28
 800ba54:	bf04      	itt	eq
 800ba56:	091b      	lsreq	r3, r3, #4
 800ba58:	3004      	addeq	r0, #4
 800ba5a:	079a      	lsls	r2, r3, #30
 800ba5c:	bf04      	itt	eq
 800ba5e:	089b      	lsreq	r3, r3, #2
 800ba60:	3002      	addeq	r0, #2
 800ba62:	07da      	lsls	r2, r3, #31
 800ba64:	d402      	bmi.n	800ba6c <__lo0bits+0x4e>
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	d006      	beq.n	800ba78 <__lo0bits+0x5a>
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	600b      	str	r3, [r1, #0]
 800ba6e:	4770      	bx	lr
 800ba70:	4610      	mov	r0, r2
 800ba72:	e7e9      	b.n	800ba48 <__lo0bits+0x2a>
 800ba74:	2000      	movs	r0, #0
 800ba76:	4770      	bx	lr
 800ba78:	2020      	movs	r0, #32
 800ba7a:	4770      	bx	lr

0800ba7c <__i2b>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	460c      	mov	r4, r1
 800ba80:	2101      	movs	r1, #1
 800ba82:	f7ff fee9 	bl	800b858 <_Balloc>
 800ba86:	2201      	movs	r2, #1
 800ba88:	6144      	str	r4, [r0, #20]
 800ba8a:	6102      	str	r2, [r0, #16]
 800ba8c:	bd10      	pop	{r4, pc}

0800ba8e <__multiply>:
 800ba8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba92:	4614      	mov	r4, r2
 800ba94:	690a      	ldr	r2, [r1, #16]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	4688      	mov	r8, r1
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	bfbe      	ittt	lt
 800ba9e:	460b      	movlt	r3, r1
 800baa0:	46a0      	movlt	r8, r4
 800baa2:	461c      	movlt	r4, r3
 800baa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800baa8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800baac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bab0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bab4:	eb07 0609 	add.w	r6, r7, r9
 800bab8:	42b3      	cmp	r3, r6
 800baba:	bfb8      	it	lt
 800babc:	3101      	addlt	r1, #1
 800babe:	f7ff fecb 	bl	800b858 <_Balloc>
 800bac2:	f100 0514 	add.w	r5, r0, #20
 800bac6:	462b      	mov	r3, r5
 800bac8:	2200      	movs	r2, #0
 800baca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bace:	4573      	cmp	r3, lr
 800bad0:	d316      	bcc.n	800bb00 <__multiply+0x72>
 800bad2:	f104 0214 	add.w	r2, r4, #20
 800bad6:	f108 0114 	add.w	r1, r8, #20
 800bada:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bade:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	9b00      	ldr	r3, [sp, #0]
 800bae6:	9201      	str	r2, [sp, #4]
 800bae8:	4293      	cmp	r3, r2
 800baea:	d80c      	bhi.n	800bb06 <__multiply+0x78>
 800baec:	2e00      	cmp	r6, #0
 800baee:	dd03      	ble.n	800baf8 <__multiply+0x6a>
 800baf0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d05d      	beq.n	800bbb4 <__multiply+0x126>
 800baf8:	6106      	str	r6, [r0, #16]
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb00:	f843 2b04 	str.w	r2, [r3], #4
 800bb04:	e7e3      	b.n	800bace <__multiply+0x40>
 800bb06:	f8b2 b000 	ldrh.w	fp, [r2]
 800bb0a:	f1bb 0f00 	cmp.w	fp, #0
 800bb0e:	d023      	beq.n	800bb58 <__multiply+0xca>
 800bb10:	4689      	mov	r9, r1
 800bb12:	46ac      	mov	ip, r5
 800bb14:	f04f 0800 	mov.w	r8, #0
 800bb18:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb1c:	f8dc a000 	ldr.w	sl, [ip]
 800bb20:	b2a3      	uxth	r3, r4
 800bb22:	fa1f fa8a 	uxth.w	sl, sl
 800bb26:	fb0b a303 	mla	r3, fp, r3, sl
 800bb2a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb2e:	f8dc 4000 	ldr.w	r4, [ip]
 800bb32:	4443      	add	r3, r8
 800bb34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb38:	fb0b 840a 	mla	r4, fp, sl, r8
 800bb3c:	46e2      	mov	sl, ip
 800bb3e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb48:	454f      	cmp	r7, r9
 800bb4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb4e:	f84a 3b04 	str.w	r3, [sl], #4
 800bb52:	d82b      	bhi.n	800bbac <__multiply+0x11e>
 800bb54:	f8cc 8004 	str.w	r8, [ip, #4]
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	3204      	adds	r2, #4
 800bb5c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bb60:	f1ba 0f00 	cmp.w	sl, #0
 800bb64:	d020      	beq.n	800bba8 <__multiply+0x11a>
 800bb66:	4689      	mov	r9, r1
 800bb68:	46a8      	mov	r8, r5
 800bb6a:	f04f 0b00 	mov.w	fp, #0
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	f8b9 c000 	ldrh.w	ip, [r9]
 800bb74:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	fb0a 440c 	mla	r4, sl, ip, r4
 800bb7e:	46c4      	mov	ip, r8
 800bb80:	445c      	add	r4, fp
 800bb82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb86:	f84c 3b04 	str.w	r3, [ip], #4
 800bb8a:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb8e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bb92:	0c1b      	lsrs	r3, r3, #16
 800bb94:	fb0a b303 	mla	r3, sl, r3, fp
 800bb98:	454f      	cmp	r7, r9
 800bb9a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bb9e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bba2:	d805      	bhi.n	800bbb0 <__multiply+0x122>
 800bba4:	f8c8 3004 	str.w	r3, [r8, #4]
 800bba8:	3504      	adds	r5, #4
 800bbaa:	e79b      	b.n	800bae4 <__multiply+0x56>
 800bbac:	46d4      	mov	ip, sl
 800bbae:	e7b3      	b.n	800bb18 <__multiply+0x8a>
 800bbb0:	46e0      	mov	r8, ip
 800bbb2:	e7dd      	b.n	800bb70 <__multiply+0xe2>
 800bbb4:	3e01      	subs	r6, #1
 800bbb6:	e799      	b.n	800baec <__multiply+0x5e>

0800bbb8 <__pow5mult>:
 800bbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbbc:	4615      	mov	r5, r2
 800bbbe:	f012 0203 	ands.w	r2, r2, #3
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	460f      	mov	r7, r1
 800bbc6:	d007      	beq.n	800bbd8 <__pow5mult+0x20>
 800bbc8:	4c21      	ldr	r4, [pc, #132]	; (800bc50 <__pow5mult+0x98>)
 800bbca:	3a01      	subs	r2, #1
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbd2:	f7ff fe8c 	bl	800b8ee <__multadd>
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	10ad      	asrs	r5, r5, #2
 800bbda:	d035      	beq.n	800bc48 <__pow5mult+0x90>
 800bbdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbde:	b93c      	cbnz	r4, 800bbf0 <__pow5mult+0x38>
 800bbe0:	2010      	movs	r0, #16
 800bbe2:	f001 fc29 	bl	800d438 <malloc>
 800bbe6:	6270      	str	r0, [r6, #36]	; 0x24
 800bbe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbec:	6004      	str	r4, [r0, #0]
 800bbee:	60c4      	str	r4, [r0, #12]
 800bbf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbf8:	b94c      	cbnz	r4, 800bc0e <__pow5mult+0x56>
 800bbfa:	f240 2171 	movw	r1, #625	; 0x271
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7ff ff3c 	bl	800ba7c <__i2b>
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc0c:	6003      	str	r3, [r0, #0]
 800bc0e:	f04f 0800 	mov.w	r8, #0
 800bc12:	07eb      	lsls	r3, r5, #31
 800bc14:	d50a      	bpl.n	800bc2c <__pow5mult+0x74>
 800bc16:	4639      	mov	r1, r7
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7ff ff37 	bl	800ba8e <__multiply>
 800bc20:	4681      	mov	r9, r0
 800bc22:	4639      	mov	r1, r7
 800bc24:	4630      	mov	r0, r6
 800bc26:	f7ff fe4b 	bl	800b8c0 <_Bfree>
 800bc2a:	464f      	mov	r7, r9
 800bc2c:	106d      	asrs	r5, r5, #1
 800bc2e:	d00b      	beq.n	800bc48 <__pow5mult+0x90>
 800bc30:	6820      	ldr	r0, [r4, #0]
 800bc32:	b938      	cbnz	r0, 800bc44 <__pow5mult+0x8c>
 800bc34:	4622      	mov	r2, r4
 800bc36:	4621      	mov	r1, r4
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7ff ff28 	bl	800ba8e <__multiply>
 800bc3e:	6020      	str	r0, [r4, #0]
 800bc40:	f8c0 8000 	str.w	r8, [r0]
 800bc44:	4604      	mov	r4, r0
 800bc46:	e7e4      	b.n	800bc12 <__pow5mult+0x5a>
 800bc48:	4638      	mov	r0, r7
 800bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	bf00      	nop
 800bc50:	0800e238 	.word	0x0800e238

0800bc54 <__lshift>:
 800bc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4607      	mov	r7, r0
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	6923      	ldr	r3, [r4, #16]
 800bc60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc64:	eb0a 0903 	add.w	r9, sl, r3
 800bc68:	6849      	ldr	r1, [r1, #4]
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	f109 0501 	add.w	r5, r9, #1
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	db32      	blt.n	800bcda <__lshift+0x86>
 800bc74:	4638      	mov	r0, r7
 800bc76:	f7ff fdef 	bl	800b858 <_Balloc>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f100 0114 	add.w	r1, r0, #20
 800bc84:	4553      	cmp	r3, sl
 800bc86:	db2b      	blt.n	800bce0 <__lshift+0x8c>
 800bc88:	6920      	ldr	r0, [r4, #16]
 800bc8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc8e:	f104 0314 	add.w	r3, r4, #20
 800bc92:	f016 021f 	ands.w	r2, r6, #31
 800bc96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc9e:	d025      	beq.n	800bcec <__lshift+0x98>
 800bca0:	2000      	movs	r0, #0
 800bca2:	f1c2 0e20 	rsb	lr, r2, #32
 800bca6:	468a      	mov	sl, r1
 800bca8:	681e      	ldr	r6, [r3, #0]
 800bcaa:	4096      	lsls	r6, r2
 800bcac:	4330      	orrs	r0, r6
 800bcae:	f84a 0b04 	str.w	r0, [sl], #4
 800bcb2:	f853 0b04 	ldr.w	r0, [r3], #4
 800bcb6:	459c      	cmp	ip, r3
 800bcb8:	fa20 f00e 	lsr.w	r0, r0, lr
 800bcbc:	d814      	bhi.n	800bce8 <__lshift+0x94>
 800bcbe:	6048      	str	r0, [r1, #4]
 800bcc0:	b108      	cbz	r0, 800bcc6 <__lshift+0x72>
 800bcc2:	f109 0502 	add.w	r5, r9, #2
 800bcc6:	3d01      	subs	r5, #1
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f8c8 5010 	str.w	r5, [r8, #16]
 800bcce:	4621      	mov	r1, r4
 800bcd0:	f7ff fdf6 	bl	800b8c0 <_Bfree>
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcda:	3101      	adds	r1, #1
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	e7c7      	b.n	800bc70 <__lshift+0x1c>
 800bce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bce4:	3301      	adds	r3, #1
 800bce6:	e7cd      	b.n	800bc84 <__lshift+0x30>
 800bce8:	4651      	mov	r1, sl
 800bcea:	e7dc      	b.n	800bca6 <__lshift+0x52>
 800bcec:	3904      	subs	r1, #4
 800bcee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf2:	459c      	cmp	ip, r3
 800bcf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcf8:	d8f9      	bhi.n	800bcee <__lshift+0x9a>
 800bcfa:	e7e4      	b.n	800bcc6 <__lshift+0x72>

0800bcfc <__mcmp>:
 800bcfc:	6903      	ldr	r3, [r0, #16]
 800bcfe:	690a      	ldr	r2, [r1, #16]
 800bd00:	b530      	push	{r4, r5, lr}
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	d10c      	bne.n	800bd20 <__mcmp+0x24>
 800bd06:	0092      	lsls	r2, r2, #2
 800bd08:	3014      	adds	r0, #20
 800bd0a:	3114      	adds	r1, #20
 800bd0c:	1884      	adds	r4, r0, r2
 800bd0e:	4411      	add	r1, r2
 800bd10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd18:	4295      	cmp	r5, r2
 800bd1a:	d003      	beq.n	800bd24 <__mcmp+0x28>
 800bd1c:	d305      	bcc.n	800bd2a <__mcmp+0x2e>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4618      	mov	r0, r3
 800bd22:	bd30      	pop	{r4, r5, pc}
 800bd24:	42a0      	cmp	r0, r4
 800bd26:	d3f3      	bcc.n	800bd10 <__mcmp+0x14>
 800bd28:	e7fa      	b.n	800bd20 <__mcmp+0x24>
 800bd2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd2e:	e7f7      	b.n	800bd20 <__mcmp+0x24>

0800bd30 <__mdiff>:
 800bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd34:	460d      	mov	r5, r1
 800bd36:	4607      	mov	r7, r0
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	4614      	mov	r4, r2
 800bd3e:	f7ff ffdd 	bl	800bcfc <__mcmp>
 800bd42:	1e06      	subs	r6, r0, #0
 800bd44:	d108      	bne.n	800bd58 <__mdiff+0x28>
 800bd46:	4631      	mov	r1, r6
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff fd85 	bl	800b858 <_Balloc>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd58:	bfa4      	itt	ge
 800bd5a:	4623      	movge	r3, r4
 800bd5c:	462c      	movge	r4, r5
 800bd5e:	4638      	mov	r0, r7
 800bd60:	6861      	ldr	r1, [r4, #4]
 800bd62:	bfa6      	itte	ge
 800bd64:	461d      	movge	r5, r3
 800bd66:	2600      	movge	r6, #0
 800bd68:	2601      	movlt	r6, #1
 800bd6a:	f7ff fd75 	bl	800b858 <_Balloc>
 800bd6e:	f04f 0e00 	mov.w	lr, #0
 800bd72:	60c6      	str	r6, [r0, #12]
 800bd74:	692b      	ldr	r3, [r5, #16]
 800bd76:	6926      	ldr	r6, [r4, #16]
 800bd78:	f104 0214 	add.w	r2, r4, #20
 800bd7c:	f105 0914 	add.w	r9, r5, #20
 800bd80:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bd84:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bd88:	f100 0114 	add.w	r1, r0, #20
 800bd8c:	f852 ab04 	ldr.w	sl, [r2], #4
 800bd90:	f859 5b04 	ldr.w	r5, [r9], #4
 800bd94:	fa1f f38a 	uxth.w	r3, sl
 800bd98:	4473      	add	r3, lr
 800bd9a:	b2ac      	uxth	r4, r5
 800bd9c:	1b1b      	subs	r3, r3, r4
 800bd9e:	0c2c      	lsrs	r4, r5, #16
 800bda0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800bda4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bdae:	45c8      	cmp	r8, r9
 800bdb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bdb4:	4694      	mov	ip, r2
 800bdb6:	f841 4b04 	str.w	r4, [r1], #4
 800bdba:	d8e7      	bhi.n	800bd8c <__mdiff+0x5c>
 800bdbc:	45bc      	cmp	ip, r7
 800bdbe:	d304      	bcc.n	800bdca <__mdiff+0x9a>
 800bdc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bdc4:	b183      	cbz	r3, 800bde8 <__mdiff+0xb8>
 800bdc6:	6106      	str	r6, [r0, #16]
 800bdc8:	e7c4      	b.n	800bd54 <__mdiff+0x24>
 800bdca:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bdce:	b2a2      	uxth	r2, r4
 800bdd0:	4472      	add	r2, lr
 800bdd2:	1413      	asrs	r3, r2, #16
 800bdd4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bdd8:	b292      	uxth	r2, r2
 800bdda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdde:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bde2:	f841 2b04 	str.w	r2, [r1], #4
 800bde6:	e7e9      	b.n	800bdbc <__mdiff+0x8c>
 800bde8:	3e01      	subs	r6, #1
 800bdea:	e7e9      	b.n	800bdc0 <__mdiff+0x90>

0800bdec <__ulp>:
 800bdec:	4b10      	ldr	r3, [pc, #64]	; (800be30 <__ulp+0x44>)
 800bdee:	400b      	ands	r3, r1
 800bdf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	dd02      	ble.n	800bdfe <__ulp+0x12>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4770      	bx	lr
 800bdfe:	425b      	negs	r3, r3
 800be00:	151b      	asrs	r3, r3, #20
 800be02:	2b13      	cmp	r3, #19
 800be04:	f04f 0000 	mov.w	r0, #0
 800be08:	f04f 0100 	mov.w	r1, #0
 800be0c:	dc04      	bgt.n	800be18 <__ulp+0x2c>
 800be0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800be12:	fa42 f103 	asr.w	r1, r2, r3
 800be16:	4770      	bx	lr
 800be18:	2201      	movs	r2, #1
 800be1a:	3b14      	subs	r3, #20
 800be1c:	2b1e      	cmp	r3, #30
 800be1e:	bfce      	itee	gt
 800be20:	4613      	movgt	r3, r2
 800be22:	f1c3 031f 	rsble	r3, r3, #31
 800be26:	fa02 f303 	lslle.w	r3, r2, r3
 800be2a:	4618      	mov	r0, r3
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	7ff00000 	.word	0x7ff00000

0800be34 <__b2d>:
 800be34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be38:	6907      	ldr	r7, [r0, #16]
 800be3a:	f100 0914 	add.w	r9, r0, #20
 800be3e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800be42:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800be46:	f1a7 0804 	sub.w	r8, r7, #4
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff fdc8 	bl	800b9e0 <__hi0bits>
 800be50:	f1c0 0320 	rsb	r3, r0, #32
 800be54:	280a      	cmp	r0, #10
 800be56:	600b      	str	r3, [r1, #0]
 800be58:	491e      	ldr	r1, [pc, #120]	; (800bed4 <__b2d+0xa0>)
 800be5a:	dc17      	bgt.n	800be8c <__b2d+0x58>
 800be5c:	45c1      	cmp	r9, r8
 800be5e:	bf28      	it	cs
 800be60:	2200      	movcs	r2, #0
 800be62:	f1c0 0c0b 	rsb	ip, r0, #11
 800be66:	fa26 f30c 	lsr.w	r3, r6, ip
 800be6a:	bf38      	it	cc
 800be6c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800be70:	ea43 0501 	orr.w	r5, r3, r1
 800be74:	f100 0315 	add.w	r3, r0, #21
 800be78:	fa06 f303 	lsl.w	r3, r6, r3
 800be7c:	fa22 f20c 	lsr.w	r2, r2, ip
 800be80:	ea43 0402 	orr.w	r4, r3, r2
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8c:	45c1      	cmp	r9, r8
 800be8e:	bf3a      	itte	cc
 800be90:	f1a7 0808 	subcc.w	r8, r7, #8
 800be94:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800be98:	2200      	movcs	r2, #0
 800be9a:	f1b0 030b 	subs.w	r3, r0, #11
 800be9e:	d015      	beq.n	800becc <__b2d+0x98>
 800bea0:	409e      	lsls	r6, r3
 800bea2:	f1c3 0720 	rsb	r7, r3, #32
 800bea6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800beaa:	fa22 f107 	lsr.w	r1, r2, r7
 800beae:	45c8      	cmp	r8, r9
 800beb0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800beb4:	ea46 0501 	orr.w	r5, r6, r1
 800beb8:	bf94      	ite	ls
 800beba:	2100      	movls	r1, #0
 800bebc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bec0:	fa02 f003 	lsl.w	r0, r2, r3
 800bec4:	40f9      	lsrs	r1, r7
 800bec6:	ea40 0401 	orr.w	r4, r0, r1
 800beca:	e7db      	b.n	800be84 <__b2d+0x50>
 800becc:	ea46 0501 	orr.w	r5, r6, r1
 800bed0:	4614      	mov	r4, r2
 800bed2:	e7d7      	b.n	800be84 <__b2d+0x50>
 800bed4:	3ff00000 	.word	0x3ff00000

0800bed8 <__d2b>:
 800bed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bedc:	461c      	mov	r4, r3
 800bede:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800bee2:	2101      	movs	r1, #1
 800bee4:	4690      	mov	r8, r2
 800bee6:	f7ff fcb7 	bl	800b858 <_Balloc>
 800beea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800beee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bef2:	4607      	mov	r7, r0
 800bef4:	bb34      	cbnz	r4, 800bf44 <__d2b+0x6c>
 800bef6:	9201      	str	r2, [sp, #4]
 800bef8:	f1b8 0200 	subs.w	r2, r8, #0
 800befc:	d027      	beq.n	800bf4e <__d2b+0x76>
 800befe:	a802      	add	r0, sp, #8
 800bf00:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bf04:	f7ff fd8b 	bl	800ba1e <__lo0bits>
 800bf08:	9900      	ldr	r1, [sp, #0]
 800bf0a:	b1f0      	cbz	r0, 800bf4a <__d2b+0x72>
 800bf0c:	9a01      	ldr	r2, [sp, #4]
 800bf0e:	f1c0 0320 	rsb	r3, r0, #32
 800bf12:	fa02 f303 	lsl.w	r3, r2, r3
 800bf16:	430b      	orrs	r3, r1
 800bf18:	40c2      	lsrs	r2, r0
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	9201      	str	r2, [sp, #4]
 800bf1e:	9b01      	ldr	r3, [sp, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bf14      	ite	ne
 800bf24:	2102      	movne	r1, #2
 800bf26:	2101      	moveq	r1, #1
 800bf28:	61bb      	str	r3, [r7, #24]
 800bf2a:	6139      	str	r1, [r7, #16]
 800bf2c:	b1c4      	cbz	r4, 800bf60 <__d2b+0x88>
 800bf2e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf32:	4404      	add	r4, r0
 800bf34:	6034      	str	r4, [r6, #0]
 800bf36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf3a:	6028      	str	r0, [r5, #0]
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	b002      	add	sp, #8
 800bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf48:	e7d5      	b.n	800bef6 <__d2b+0x1e>
 800bf4a:	6179      	str	r1, [r7, #20]
 800bf4c:	e7e7      	b.n	800bf1e <__d2b+0x46>
 800bf4e:	a801      	add	r0, sp, #4
 800bf50:	f7ff fd65 	bl	800ba1e <__lo0bits>
 800bf54:	2101      	movs	r1, #1
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	6139      	str	r1, [r7, #16]
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	3020      	adds	r0, #32
 800bf5e:	e7e5      	b.n	800bf2c <__d2b+0x54>
 800bf60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf64:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bf68:	6030      	str	r0, [r6, #0]
 800bf6a:	6918      	ldr	r0, [r3, #16]
 800bf6c:	f7ff fd38 	bl	800b9e0 <__hi0bits>
 800bf70:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bf74:	e7e1      	b.n	800bf3a <__d2b+0x62>

0800bf76 <__ratio>:
 800bf76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7a:	4688      	mov	r8, r1
 800bf7c:	4669      	mov	r1, sp
 800bf7e:	4681      	mov	r9, r0
 800bf80:	f7ff ff58 	bl	800be34 <__b2d>
 800bf84:	468b      	mov	fp, r1
 800bf86:	4606      	mov	r6, r0
 800bf88:	460f      	mov	r7, r1
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	a901      	add	r1, sp, #4
 800bf8e:	f7ff ff51 	bl	800be34 <__b2d>
 800bf92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	eba3 0c02 	sub.w	ip, r3, r2
 800bfa0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bfd5      	itete	le
 800bfae:	460a      	movle	r2, r1
 800bfb0:	463a      	movgt	r2, r7
 800bfb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfb6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bfba:	bfd8      	it	le
 800bfbc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7f4 fbb0 	bl	800072c <__aeabi_ddiv>
 800bfcc:	b003      	add	sp, #12
 800bfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bfd4 <_mprec_log10>:
 800bfd4:	2817      	cmp	r0, #23
 800bfd6:	b5d0      	push	{r4, r6, r7, lr}
 800bfd8:	4604      	mov	r4, r0
 800bfda:	dc05      	bgt.n	800bfe8 <_mprec_log10+0x14>
 800bfdc:	4b08      	ldr	r3, [pc, #32]	; (800c000 <_mprec_log10+0x2c>)
 800bfde:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800bfe2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bfe6:	bdd0      	pop	{r4, r6, r7, pc}
 800bfe8:	2000      	movs	r0, #0
 800bfea:	2600      	movs	r6, #0
 800bfec:	4905      	ldr	r1, [pc, #20]	; (800c004 <_mprec_log10+0x30>)
 800bfee:	4f06      	ldr	r7, [pc, #24]	; (800c008 <_mprec_log10+0x34>)
 800bff0:	4632      	mov	r2, r6
 800bff2:	463b      	mov	r3, r7
 800bff4:	f7f4 fa70 	bl	80004d8 <__aeabi_dmul>
 800bff8:	3c01      	subs	r4, #1
 800bffa:	d1f9      	bne.n	800bff0 <_mprec_log10+0x1c>
 800bffc:	e7f3      	b.n	800bfe6 <_mprec_log10+0x12>
 800bffe:	bf00      	nop
 800c000:	0800e170 	.word	0x0800e170
 800c004:	3ff00000 	.word	0x3ff00000
 800c008:	40240000 	.word	0x40240000

0800c00c <__copybits>:
 800c00c:	3901      	subs	r1, #1
 800c00e:	b510      	push	{r4, lr}
 800c010:	1149      	asrs	r1, r1, #5
 800c012:	6914      	ldr	r4, [r2, #16]
 800c014:	3101      	adds	r1, #1
 800c016:	f102 0314 	add.w	r3, r2, #20
 800c01a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c01e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c022:	42a3      	cmp	r3, r4
 800c024:	4602      	mov	r2, r0
 800c026:	d303      	bcc.n	800c030 <__copybits+0x24>
 800c028:	2300      	movs	r3, #0
 800c02a:	428a      	cmp	r2, r1
 800c02c:	d305      	bcc.n	800c03a <__copybits+0x2e>
 800c02e:	bd10      	pop	{r4, pc}
 800c030:	f853 2b04 	ldr.w	r2, [r3], #4
 800c034:	f840 2b04 	str.w	r2, [r0], #4
 800c038:	e7f3      	b.n	800c022 <__copybits+0x16>
 800c03a:	f842 3b04 	str.w	r3, [r2], #4
 800c03e:	e7f4      	b.n	800c02a <__copybits+0x1e>

0800c040 <__any_on>:
 800c040:	f100 0214 	add.w	r2, r0, #20
 800c044:	6900      	ldr	r0, [r0, #16]
 800c046:	114b      	asrs	r3, r1, #5
 800c048:	4298      	cmp	r0, r3
 800c04a:	b510      	push	{r4, lr}
 800c04c:	db11      	blt.n	800c072 <__any_on+0x32>
 800c04e:	dd0a      	ble.n	800c066 <__any_on+0x26>
 800c050:	f011 011f 	ands.w	r1, r1, #31
 800c054:	d007      	beq.n	800c066 <__any_on+0x26>
 800c056:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c05a:	fa24 f001 	lsr.w	r0, r4, r1
 800c05e:	fa00 f101 	lsl.w	r1, r0, r1
 800c062:	428c      	cmp	r4, r1
 800c064:	d10b      	bne.n	800c07e <__any_on+0x3e>
 800c066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d803      	bhi.n	800c076 <__any_on+0x36>
 800c06e:	2000      	movs	r0, #0
 800c070:	bd10      	pop	{r4, pc}
 800c072:	4603      	mov	r3, r0
 800c074:	e7f7      	b.n	800c066 <__any_on+0x26>
 800c076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c07a:	2900      	cmp	r1, #0
 800c07c:	d0f5      	beq.n	800c06a <__any_on+0x2a>
 800c07e:	2001      	movs	r0, #1
 800c080:	e7f6      	b.n	800c070 <__any_on+0x30>

0800c082 <_calloc_r>:
 800c082:	b538      	push	{r3, r4, r5, lr}
 800c084:	fb02 f401 	mul.w	r4, r2, r1
 800c088:	4621      	mov	r1, r4
 800c08a:	f000 f809 	bl	800c0a0 <_malloc_r>
 800c08e:	4605      	mov	r5, r0
 800c090:	b118      	cbz	r0, 800c09a <_calloc_r+0x18>
 800c092:	4622      	mov	r2, r4
 800c094:	2100      	movs	r1, #0
 800c096:	f7fe f825 	bl	800a0e4 <memset>
 800c09a:	4628      	mov	r0, r5
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c0a0 <_malloc_r>:
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	1ccd      	adds	r5, r1, #3
 800c0a4:	f025 0503 	bic.w	r5, r5, #3
 800c0a8:	3508      	adds	r5, #8
 800c0aa:	2d0c      	cmp	r5, #12
 800c0ac:	bf38      	it	cc
 800c0ae:	250c      	movcc	r5, #12
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	db01      	blt.n	800c0ba <_malloc_r+0x1a>
 800c0b6:	42a9      	cmp	r1, r5
 800c0b8:	d903      	bls.n	800c0c2 <_malloc_r+0x22>
 800c0ba:	230c      	movs	r3, #12
 800c0bc:	6033      	str	r3, [r6, #0]
 800c0be:	2000      	movs	r0, #0
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	f001 f9e8 	bl	800d496 <__malloc_lock>
 800c0c6:	4a21      	ldr	r2, [pc, #132]	; (800c14c <_malloc_r+0xac>)
 800c0c8:	6814      	ldr	r4, [r2, #0]
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	b991      	cbnz	r1, 800c0f4 <_malloc_r+0x54>
 800c0ce:	4c20      	ldr	r4, [pc, #128]	; (800c150 <_malloc_r+0xb0>)
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	b91b      	cbnz	r3, 800c0dc <_malloc_r+0x3c>
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f000 fb3d 	bl	800c754 <_sbrk_r>
 800c0da:	6020      	str	r0, [r4, #0]
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f000 fb38 	bl	800c754 <_sbrk_r>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	d124      	bne.n	800c132 <_malloc_r+0x92>
 800c0e8:	230c      	movs	r3, #12
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	6033      	str	r3, [r6, #0]
 800c0ee:	f001 f9d3 	bl	800d498 <__malloc_unlock>
 800c0f2:	e7e4      	b.n	800c0be <_malloc_r+0x1e>
 800c0f4:	680b      	ldr	r3, [r1, #0]
 800c0f6:	1b5b      	subs	r3, r3, r5
 800c0f8:	d418      	bmi.n	800c12c <_malloc_r+0x8c>
 800c0fa:	2b0b      	cmp	r3, #11
 800c0fc:	d90f      	bls.n	800c11e <_malloc_r+0x7e>
 800c0fe:	600b      	str	r3, [r1, #0]
 800c100:	18cc      	adds	r4, r1, r3
 800c102:	50cd      	str	r5, [r1, r3]
 800c104:	4630      	mov	r0, r6
 800c106:	f001 f9c7 	bl	800d498 <__malloc_unlock>
 800c10a:	f104 000b 	add.w	r0, r4, #11
 800c10e:	1d23      	adds	r3, r4, #4
 800c110:	f020 0007 	bic.w	r0, r0, #7
 800c114:	1ac3      	subs	r3, r0, r3
 800c116:	d0d3      	beq.n	800c0c0 <_malloc_r+0x20>
 800c118:	425a      	negs	r2, r3
 800c11a:	50e2      	str	r2, [r4, r3]
 800c11c:	e7d0      	b.n	800c0c0 <_malloc_r+0x20>
 800c11e:	684b      	ldr	r3, [r1, #4]
 800c120:	428c      	cmp	r4, r1
 800c122:	bf16      	itet	ne
 800c124:	6063      	strne	r3, [r4, #4]
 800c126:	6013      	streq	r3, [r2, #0]
 800c128:	460c      	movne	r4, r1
 800c12a:	e7eb      	b.n	800c104 <_malloc_r+0x64>
 800c12c:	460c      	mov	r4, r1
 800c12e:	6849      	ldr	r1, [r1, #4]
 800c130:	e7cc      	b.n	800c0cc <_malloc_r+0x2c>
 800c132:	1cc4      	adds	r4, r0, #3
 800c134:	f024 0403 	bic.w	r4, r4, #3
 800c138:	42a0      	cmp	r0, r4
 800c13a:	d005      	beq.n	800c148 <_malloc_r+0xa8>
 800c13c:	1a21      	subs	r1, r4, r0
 800c13e:	4630      	mov	r0, r6
 800c140:	f000 fb08 	bl	800c754 <_sbrk_r>
 800c144:	3001      	adds	r0, #1
 800c146:	d0cf      	beq.n	800c0e8 <_malloc_r+0x48>
 800c148:	6025      	str	r5, [r4, #0]
 800c14a:	e7db      	b.n	800c104 <_malloc_r+0x64>
 800c14c:	200006bc 	.word	0x200006bc
 800c150:	200006c0 	.word	0x200006c0

0800c154 <_realloc_r>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	4607      	mov	r7, r0
 800c158:	4614      	mov	r4, r2
 800c15a:	460e      	mov	r6, r1
 800c15c:	b921      	cbnz	r1, 800c168 <_realloc_r+0x14>
 800c15e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c162:	4611      	mov	r1, r2
 800c164:	f7ff bf9c 	b.w	800c0a0 <_malloc_r>
 800c168:	b922      	cbnz	r2, 800c174 <_realloc_r+0x20>
 800c16a:	f001 f997 	bl	800d49c <_free_r>
 800c16e:	4625      	mov	r5, r4
 800c170:	4628      	mov	r0, r5
 800c172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c174:	f001 f9de 	bl	800d534 <_malloc_usable_size_r>
 800c178:	42a0      	cmp	r0, r4
 800c17a:	d20f      	bcs.n	800c19c <_realloc_r+0x48>
 800c17c:	4621      	mov	r1, r4
 800c17e:	4638      	mov	r0, r7
 800c180:	f7ff ff8e 	bl	800c0a0 <_malloc_r>
 800c184:	4605      	mov	r5, r0
 800c186:	2800      	cmp	r0, #0
 800c188:	d0f2      	beq.n	800c170 <_realloc_r+0x1c>
 800c18a:	4631      	mov	r1, r6
 800c18c:	4622      	mov	r2, r4
 800c18e:	f7ff fb58 	bl	800b842 <memcpy>
 800c192:	4631      	mov	r1, r6
 800c194:	4638      	mov	r0, r7
 800c196:	f001 f981 	bl	800d49c <_free_r>
 800c19a:	e7e9      	b.n	800c170 <_realloc_r+0x1c>
 800c19c:	4635      	mov	r5, r6
 800c19e:	e7e7      	b.n	800c170 <_realloc_r+0x1c>

0800c1a0 <__ssputs_r>:
 800c1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a4:	688e      	ldr	r6, [r1, #8]
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	429e      	cmp	r6, r3
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	4699      	mov	r9, r3
 800c1b0:	d837      	bhi.n	800c222 <__ssputs_r+0x82>
 800c1b2:	898a      	ldrh	r2, [r1, #12]
 800c1b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1b8:	d031      	beq.n	800c21e <__ssputs_r+0x7e>
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	6825      	ldr	r5, [r4, #0]
 800c1be:	6909      	ldr	r1, [r1, #16]
 800c1c0:	1a6f      	subs	r7, r5, r1
 800c1c2:	6965      	ldr	r5, [r4, #20]
 800c1c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800c1cc:	f109 0301 	add.w	r3, r9, #1
 800c1d0:	443b      	add	r3, r7
 800c1d2:	429d      	cmp	r5, r3
 800c1d4:	bf38      	it	cc
 800c1d6:	461d      	movcc	r5, r3
 800c1d8:	0553      	lsls	r3, r2, #21
 800c1da:	d530      	bpl.n	800c23e <__ssputs_r+0x9e>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	f7ff ff5f 	bl	800c0a0 <_malloc_r>
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	b950      	cbnz	r0, 800c1fc <__ssputs_r+0x5c>
 800c1e6:	230c      	movs	r3, #12
 800c1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1ec:	f8ca 3000 	str.w	r3, [sl]
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fc:	463a      	mov	r2, r7
 800c1fe:	6921      	ldr	r1, [r4, #16]
 800c200:	f7ff fb1f 	bl	800b842 <memcpy>
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c20a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20e:	81a3      	strh	r3, [r4, #12]
 800c210:	6126      	str	r6, [r4, #16]
 800c212:	443e      	add	r6, r7
 800c214:	6026      	str	r6, [r4, #0]
 800c216:	464e      	mov	r6, r9
 800c218:	6165      	str	r5, [r4, #20]
 800c21a:	1bed      	subs	r5, r5, r7
 800c21c:	60a5      	str	r5, [r4, #8]
 800c21e:	454e      	cmp	r6, r9
 800c220:	d900      	bls.n	800c224 <__ssputs_r+0x84>
 800c222:	464e      	mov	r6, r9
 800c224:	4632      	mov	r2, r6
 800c226:	4641      	mov	r1, r8
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	f001 f91b 	bl	800d464 <memmove>
 800c22e:	68a3      	ldr	r3, [r4, #8]
 800c230:	2000      	movs	r0, #0
 800c232:	1b9b      	subs	r3, r3, r6
 800c234:	60a3      	str	r3, [r4, #8]
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	441e      	add	r6, r3
 800c23a:	6026      	str	r6, [r4, #0]
 800c23c:	e7dc      	b.n	800c1f8 <__ssputs_r+0x58>
 800c23e:	462a      	mov	r2, r5
 800c240:	f7ff ff88 	bl	800c154 <_realloc_r>
 800c244:	4606      	mov	r6, r0
 800c246:	2800      	cmp	r0, #0
 800c248:	d1e2      	bne.n	800c210 <__ssputs_r+0x70>
 800c24a:	6921      	ldr	r1, [r4, #16]
 800c24c:	4650      	mov	r0, sl
 800c24e:	f001 f925 	bl	800d49c <_free_r>
 800c252:	e7c8      	b.n	800c1e6 <__ssputs_r+0x46>

0800c254 <_svfiprintf_r>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	461d      	mov	r5, r3
 800c25a:	898b      	ldrh	r3, [r1, #12]
 800c25c:	b09d      	sub	sp, #116	; 0x74
 800c25e:	061f      	lsls	r7, r3, #24
 800c260:	4680      	mov	r8, r0
 800c262:	460c      	mov	r4, r1
 800c264:	4616      	mov	r6, r2
 800c266:	d50f      	bpl.n	800c288 <_svfiprintf_r+0x34>
 800c268:	690b      	ldr	r3, [r1, #16]
 800c26a:	b96b      	cbnz	r3, 800c288 <_svfiprintf_r+0x34>
 800c26c:	2140      	movs	r1, #64	; 0x40
 800c26e:	f7ff ff17 	bl	800c0a0 <_malloc_r>
 800c272:	6020      	str	r0, [r4, #0]
 800c274:	6120      	str	r0, [r4, #16]
 800c276:	b928      	cbnz	r0, 800c284 <_svfiprintf_r+0x30>
 800c278:	230c      	movs	r3, #12
 800c27a:	f8c8 3000 	str.w	r3, [r8]
 800c27e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c282:	e0c8      	b.n	800c416 <_svfiprintf_r+0x1c2>
 800c284:	2340      	movs	r3, #64	; 0x40
 800c286:	6163      	str	r3, [r4, #20]
 800c288:	2300      	movs	r3, #0
 800c28a:	9309      	str	r3, [sp, #36]	; 0x24
 800c28c:	2320      	movs	r3, #32
 800c28e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c292:	2330      	movs	r3, #48	; 0x30
 800c294:	f04f 0b01 	mov.w	fp, #1
 800c298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c29c:	9503      	str	r5, [sp, #12]
 800c29e:	4637      	mov	r7, r6
 800c2a0:	463d      	mov	r5, r7
 800c2a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c2a6:	b10b      	cbz	r3, 800c2ac <_svfiprintf_r+0x58>
 800c2a8:	2b25      	cmp	r3, #37	; 0x25
 800c2aa:	d13e      	bne.n	800c32a <_svfiprintf_r+0xd6>
 800c2ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800c2b0:	d00b      	beq.n	800c2ca <_svfiprintf_r+0x76>
 800c2b2:	4653      	mov	r3, sl
 800c2b4:	4632      	mov	r2, r6
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	f7ff ff71 	bl	800c1a0 <__ssputs_r>
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f000 80a4 	beq.w	800c40c <_svfiprintf_r+0x1b8>
 800c2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c6:	4453      	add	r3, sl
 800c2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ca:	783b      	ldrb	r3, [r7, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 809d 	beq.w	800c40c <_svfiprintf_r+0x1b8>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c2e6:	462f      	mov	r7, r5
 800c2e8:	2205      	movs	r2, #5
 800c2ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c2ee:	4850      	ldr	r0, [pc, #320]	; (800c430 <_svfiprintf_r+0x1dc>)
 800c2f0:	f001 f8aa 	bl	800d448 <memchr>
 800c2f4:	9b04      	ldr	r3, [sp, #16]
 800c2f6:	b9d0      	cbnz	r0, 800c32e <_svfiprintf_r+0xda>
 800c2f8:	06d9      	lsls	r1, r3, #27
 800c2fa:	bf44      	itt	mi
 800c2fc:	2220      	movmi	r2, #32
 800c2fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c302:	071a      	lsls	r2, r3, #28
 800c304:	bf44      	itt	mi
 800c306:	222b      	movmi	r2, #43	; 0x2b
 800c308:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c30c:	782a      	ldrb	r2, [r5, #0]
 800c30e:	2a2a      	cmp	r2, #42	; 0x2a
 800c310:	d015      	beq.n	800c33e <_svfiprintf_r+0xea>
 800c312:	462f      	mov	r7, r5
 800c314:	2000      	movs	r0, #0
 800c316:	250a      	movs	r5, #10
 800c318:	9a07      	ldr	r2, [sp, #28]
 800c31a:	4639      	mov	r1, r7
 800c31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c320:	3b30      	subs	r3, #48	; 0x30
 800c322:	2b09      	cmp	r3, #9
 800c324:	d94d      	bls.n	800c3c2 <_svfiprintf_r+0x16e>
 800c326:	b1b8      	cbz	r0, 800c358 <_svfiprintf_r+0x104>
 800c328:	e00f      	b.n	800c34a <_svfiprintf_r+0xf6>
 800c32a:	462f      	mov	r7, r5
 800c32c:	e7b8      	b.n	800c2a0 <_svfiprintf_r+0x4c>
 800c32e:	4a40      	ldr	r2, [pc, #256]	; (800c430 <_svfiprintf_r+0x1dc>)
 800c330:	463d      	mov	r5, r7
 800c332:	1a80      	subs	r0, r0, r2
 800c334:	fa0b f000 	lsl.w	r0, fp, r0
 800c338:	4318      	orrs	r0, r3
 800c33a:	9004      	str	r0, [sp, #16]
 800c33c:	e7d3      	b.n	800c2e6 <_svfiprintf_r+0x92>
 800c33e:	9a03      	ldr	r2, [sp, #12]
 800c340:	1d11      	adds	r1, r2, #4
 800c342:	6812      	ldr	r2, [r2, #0]
 800c344:	9103      	str	r1, [sp, #12]
 800c346:	2a00      	cmp	r2, #0
 800c348:	db01      	blt.n	800c34e <_svfiprintf_r+0xfa>
 800c34a:	9207      	str	r2, [sp, #28]
 800c34c:	e004      	b.n	800c358 <_svfiprintf_r+0x104>
 800c34e:	4252      	negs	r2, r2
 800c350:	f043 0302 	orr.w	r3, r3, #2
 800c354:	9207      	str	r2, [sp, #28]
 800c356:	9304      	str	r3, [sp, #16]
 800c358:	783b      	ldrb	r3, [r7, #0]
 800c35a:	2b2e      	cmp	r3, #46	; 0x2e
 800c35c:	d10c      	bne.n	800c378 <_svfiprintf_r+0x124>
 800c35e:	787b      	ldrb	r3, [r7, #1]
 800c360:	2b2a      	cmp	r3, #42	; 0x2a
 800c362:	d133      	bne.n	800c3cc <_svfiprintf_r+0x178>
 800c364:	9b03      	ldr	r3, [sp, #12]
 800c366:	3702      	adds	r7, #2
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9203      	str	r2, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bfb8      	it	lt
 800c372:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c376:	9305      	str	r3, [sp, #20]
 800c378:	4d2e      	ldr	r5, [pc, #184]	; (800c434 <_svfiprintf_r+0x1e0>)
 800c37a:	2203      	movs	r2, #3
 800c37c:	7839      	ldrb	r1, [r7, #0]
 800c37e:	4628      	mov	r0, r5
 800c380:	f001 f862 	bl	800d448 <memchr>
 800c384:	b138      	cbz	r0, 800c396 <_svfiprintf_r+0x142>
 800c386:	2340      	movs	r3, #64	; 0x40
 800c388:	1b40      	subs	r0, r0, r5
 800c38a:	fa03 f000 	lsl.w	r0, r3, r0
 800c38e:	9b04      	ldr	r3, [sp, #16]
 800c390:	3701      	adds	r7, #1
 800c392:	4303      	orrs	r3, r0
 800c394:	9304      	str	r3, [sp, #16]
 800c396:	7839      	ldrb	r1, [r7, #0]
 800c398:	2206      	movs	r2, #6
 800c39a:	4827      	ldr	r0, [pc, #156]	; (800c438 <_svfiprintf_r+0x1e4>)
 800c39c:	1c7e      	adds	r6, r7, #1
 800c39e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3a2:	f001 f851 	bl	800d448 <memchr>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d038      	beq.n	800c41c <_svfiprintf_r+0x1c8>
 800c3aa:	4b24      	ldr	r3, [pc, #144]	; (800c43c <_svfiprintf_r+0x1e8>)
 800c3ac:	bb13      	cbnz	r3, 800c3f4 <_svfiprintf_r+0x1a0>
 800c3ae:	9b03      	ldr	r3, [sp, #12]
 800c3b0:	3307      	adds	r3, #7
 800c3b2:	f023 0307 	bic.w	r3, r3, #7
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	9303      	str	r3, [sp, #12]
 800c3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3bc:	444b      	add	r3, r9
 800c3be:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c0:	e76d      	b.n	800c29e <_svfiprintf_r+0x4a>
 800c3c2:	fb05 3202 	mla	r2, r5, r2, r3
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	e7a6      	b.n	800c31a <_svfiprintf_r+0xc6>
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	250a      	movs	r5, #10
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	3701      	adds	r7, #1
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3dc:	3a30      	subs	r2, #48	; 0x30
 800c3de:	2a09      	cmp	r2, #9
 800c3e0:	d903      	bls.n	800c3ea <_svfiprintf_r+0x196>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0c8      	beq.n	800c378 <_svfiprintf_r+0x124>
 800c3e6:	9105      	str	r1, [sp, #20]
 800c3e8:	e7c6      	b.n	800c378 <_svfiprintf_r+0x124>
 800c3ea:	fb05 2101 	mla	r1, r5, r1, r2
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	e7f0      	b.n	800c3d6 <_svfiprintf_r+0x182>
 800c3f4:	ab03      	add	r3, sp, #12
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	4b11      	ldr	r3, [pc, #68]	; (800c440 <_svfiprintf_r+0x1ec>)
 800c3fc:	a904      	add	r1, sp, #16
 800c3fe:	4640      	mov	r0, r8
 800c400:	f3af 8000 	nop.w
 800c404:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c408:	4681      	mov	r9, r0
 800c40a:	d1d6      	bne.n	800c3ba <_svfiprintf_r+0x166>
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	065b      	lsls	r3, r3, #25
 800c410:	f53f af35 	bmi.w	800c27e <_svfiprintf_r+0x2a>
 800c414:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c416:	b01d      	add	sp, #116	; 0x74
 800c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41c:	ab03      	add	r3, sp, #12
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	4622      	mov	r2, r4
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <_svfiprintf_r+0x1ec>)
 800c424:	a904      	add	r1, sp, #16
 800c426:	4640      	mov	r0, r8
 800c428:	f000 f882 	bl	800c530 <_printf_i>
 800c42c:	e7ea      	b.n	800c404 <_svfiprintf_r+0x1b0>
 800c42e:	bf00      	nop
 800c430:	0800e244 	.word	0x0800e244
 800c434:	0800e24a 	.word	0x0800e24a
 800c438:	0800e24e 	.word	0x0800e24e
 800c43c:	00000000 	.word	0x00000000
 800c440:	0800c1a1 	.word	0x0800c1a1

0800c444 <_printf_common>:
 800c444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c448:	4691      	mov	r9, r2
 800c44a:	461f      	mov	r7, r3
 800c44c:	688a      	ldr	r2, [r1, #8]
 800c44e:	690b      	ldr	r3, [r1, #16]
 800c450:	4606      	mov	r6, r0
 800c452:	4293      	cmp	r3, r2
 800c454:	bfb8      	it	lt
 800c456:	4613      	movlt	r3, r2
 800c458:	f8c9 3000 	str.w	r3, [r9]
 800c45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c460:	460c      	mov	r4, r1
 800c462:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c466:	b112      	cbz	r2, 800c46e <_printf_common+0x2a>
 800c468:	3301      	adds	r3, #1
 800c46a:	f8c9 3000 	str.w	r3, [r9]
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	0699      	lsls	r1, r3, #26
 800c472:	bf42      	ittt	mi
 800c474:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c478:	3302      	addmi	r3, #2
 800c47a:	f8c9 3000 	strmi.w	r3, [r9]
 800c47e:	6825      	ldr	r5, [r4, #0]
 800c480:	f015 0506 	ands.w	r5, r5, #6
 800c484:	d107      	bne.n	800c496 <_printf_common+0x52>
 800c486:	f104 0a19 	add.w	sl, r4, #25
 800c48a:	68e3      	ldr	r3, [r4, #12]
 800c48c:	f8d9 2000 	ldr.w	r2, [r9]
 800c490:	1a9b      	subs	r3, r3, r2
 800c492:	42ab      	cmp	r3, r5
 800c494:	dc29      	bgt.n	800c4ea <_printf_common+0xa6>
 800c496:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	3300      	adds	r3, #0
 800c49e:	bf18      	it	ne
 800c4a0:	2301      	movne	r3, #1
 800c4a2:	0692      	lsls	r2, r2, #26
 800c4a4:	d42e      	bmi.n	800c504 <_printf_common+0xc0>
 800c4a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	47c0      	blx	r8
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d021      	beq.n	800c4f8 <_printf_common+0xb4>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	68e5      	ldr	r5, [r4, #12]
 800c4b8:	f003 0306 	and.w	r3, r3, #6
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	bf18      	it	ne
 800c4c0:	2500      	movne	r5, #0
 800c4c2:	f8d9 2000 	ldr.w	r2, [r9]
 800c4c6:	f04f 0900 	mov.w	r9, #0
 800c4ca:	bf08      	it	eq
 800c4cc:	1aad      	subeq	r5, r5, r2
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	6922      	ldr	r2, [r4, #16]
 800c4d2:	bf08      	it	eq
 800c4d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bfc4      	itt	gt
 800c4dc:	1a9b      	subgt	r3, r3, r2
 800c4de:	18ed      	addgt	r5, r5, r3
 800c4e0:	341a      	adds	r4, #26
 800c4e2:	454d      	cmp	r5, r9
 800c4e4:	d11a      	bne.n	800c51c <_printf_common+0xd8>
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	e008      	b.n	800c4fc <_printf_common+0xb8>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	4652      	mov	r2, sl
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	47c0      	blx	r8
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	d103      	bne.n	800c500 <_printf_common+0xbc>
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c500:	3501      	adds	r5, #1
 800c502:	e7c2      	b.n	800c48a <_printf_common+0x46>
 800c504:	2030      	movs	r0, #48	; 0x30
 800c506:	18e1      	adds	r1, r4, r3
 800c508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c512:	4422      	add	r2, r4
 800c514:	3302      	adds	r3, #2
 800c516:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c51a:	e7c4      	b.n	800c4a6 <_printf_common+0x62>
 800c51c:	2301      	movs	r3, #1
 800c51e:	4622      	mov	r2, r4
 800c520:	4639      	mov	r1, r7
 800c522:	4630      	mov	r0, r6
 800c524:	47c0      	blx	r8
 800c526:	3001      	adds	r0, #1
 800c528:	d0e6      	beq.n	800c4f8 <_printf_common+0xb4>
 800c52a:	f109 0901 	add.w	r9, r9, #1
 800c52e:	e7d8      	b.n	800c4e2 <_printf_common+0x9e>

0800c530 <_printf_i>:
 800c530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c534:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c538:	460c      	mov	r4, r1
 800c53a:	7e09      	ldrb	r1, [r1, #24]
 800c53c:	b085      	sub	sp, #20
 800c53e:	296e      	cmp	r1, #110	; 0x6e
 800c540:	4617      	mov	r7, r2
 800c542:	4606      	mov	r6, r0
 800c544:	4698      	mov	r8, r3
 800c546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c548:	f000 80b3 	beq.w	800c6b2 <_printf_i+0x182>
 800c54c:	d822      	bhi.n	800c594 <_printf_i+0x64>
 800c54e:	2963      	cmp	r1, #99	; 0x63
 800c550:	d036      	beq.n	800c5c0 <_printf_i+0x90>
 800c552:	d80a      	bhi.n	800c56a <_printf_i+0x3a>
 800c554:	2900      	cmp	r1, #0
 800c556:	f000 80b9 	beq.w	800c6cc <_printf_i+0x19c>
 800c55a:	2958      	cmp	r1, #88	; 0x58
 800c55c:	f000 8083 	beq.w	800c666 <_printf_i+0x136>
 800c560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c564:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c568:	e032      	b.n	800c5d0 <_printf_i+0xa0>
 800c56a:	2964      	cmp	r1, #100	; 0x64
 800c56c:	d001      	beq.n	800c572 <_printf_i+0x42>
 800c56e:	2969      	cmp	r1, #105	; 0x69
 800c570:	d1f6      	bne.n	800c560 <_printf_i+0x30>
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	6813      	ldr	r3, [r2, #0]
 800c576:	0605      	lsls	r5, r0, #24
 800c578:	f103 0104 	add.w	r1, r3, #4
 800c57c:	d52a      	bpl.n	800c5d4 <_printf_i+0xa4>
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6011      	str	r1, [r2, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	da03      	bge.n	800c58e <_printf_i+0x5e>
 800c586:	222d      	movs	r2, #45	; 0x2d
 800c588:	425b      	negs	r3, r3
 800c58a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c58e:	486f      	ldr	r0, [pc, #444]	; (800c74c <_printf_i+0x21c>)
 800c590:	220a      	movs	r2, #10
 800c592:	e039      	b.n	800c608 <_printf_i+0xd8>
 800c594:	2973      	cmp	r1, #115	; 0x73
 800c596:	f000 809d 	beq.w	800c6d4 <_printf_i+0x1a4>
 800c59a:	d808      	bhi.n	800c5ae <_printf_i+0x7e>
 800c59c:	296f      	cmp	r1, #111	; 0x6f
 800c59e:	d020      	beq.n	800c5e2 <_printf_i+0xb2>
 800c5a0:	2970      	cmp	r1, #112	; 0x70
 800c5a2:	d1dd      	bne.n	800c560 <_printf_i+0x30>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	f043 0320 	orr.w	r3, r3, #32
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	e003      	b.n	800c5b6 <_printf_i+0x86>
 800c5ae:	2975      	cmp	r1, #117	; 0x75
 800c5b0:	d017      	beq.n	800c5e2 <_printf_i+0xb2>
 800c5b2:	2978      	cmp	r1, #120	; 0x78
 800c5b4:	d1d4      	bne.n	800c560 <_printf_i+0x30>
 800c5b6:	2378      	movs	r3, #120	; 0x78
 800c5b8:	4865      	ldr	r0, [pc, #404]	; (800c750 <_printf_i+0x220>)
 800c5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5be:	e055      	b.n	800c66c <_printf_i+0x13c>
 800c5c0:	6813      	ldr	r3, [r2, #0]
 800c5c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5c6:	1d19      	adds	r1, r3, #4
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6011      	str	r1, [r2, #0]
 800c5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e08c      	b.n	800c6ee <_printf_i+0x1be>
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5da:	6011      	str	r1, [r2, #0]
 800c5dc:	bf18      	it	ne
 800c5de:	b21b      	sxthne	r3, r3
 800c5e0:	e7cf      	b.n	800c582 <_printf_i+0x52>
 800c5e2:	6813      	ldr	r3, [r2, #0]
 800c5e4:	6825      	ldr	r5, [r4, #0]
 800c5e6:	1d18      	adds	r0, r3, #4
 800c5e8:	6010      	str	r0, [r2, #0]
 800c5ea:	0628      	lsls	r0, r5, #24
 800c5ec:	d501      	bpl.n	800c5f2 <_printf_i+0xc2>
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	e002      	b.n	800c5f8 <_printf_i+0xc8>
 800c5f2:	0668      	lsls	r0, r5, #25
 800c5f4:	d5fb      	bpl.n	800c5ee <_printf_i+0xbe>
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	296f      	cmp	r1, #111	; 0x6f
 800c5fa:	bf14      	ite	ne
 800c5fc:	220a      	movne	r2, #10
 800c5fe:	2208      	moveq	r2, #8
 800c600:	4852      	ldr	r0, [pc, #328]	; (800c74c <_printf_i+0x21c>)
 800c602:	2100      	movs	r1, #0
 800c604:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c608:	6865      	ldr	r5, [r4, #4]
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	60a5      	str	r5, [r4, #8]
 800c60e:	f2c0 8095 	blt.w	800c73c <_printf_i+0x20c>
 800c612:	6821      	ldr	r1, [r4, #0]
 800c614:	f021 0104 	bic.w	r1, r1, #4
 800c618:	6021      	str	r1, [r4, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d13d      	bne.n	800c69a <_printf_i+0x16a>
 800c61e:	2d00      	cmp	r5, #0
 800c620:	f040 808e 	bne.w	800c740 <_printf_i+0x210>
 800c624:	4665      	mov	r5, ip
 800c626:	2a08      	cmp	r2, #8
 800c628:	d10b      	bne.n	800c642 <_printf_i+0x112>
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	07db      	lsls	r3, r3, #31
 800c62e:	d508      	bpl.n	800c642 <_printf_i+0x112>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	6862      	ldr	r2, [r4, #4]
 800c634:	429a      	cmp	r2, r3
 800c636:	bfde      	ittt	le
 800c638:	2330      	movle	r3, #48	; 0x30
 800c63a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c63e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c642:	ebac 0305 	sub.w	r3, ip, r5
 800c646:	6123      	str	r3, [r4, #16]
 800c648:	f8cd 8000 	str.w	r8, [sp]
 800c64c:	463b      	mov	r3, r7
 800c64e:	aa03      	add	r2, sp, #12
 800c650:	4621      	mov	r1, r4
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff fef6 	bl	800c444 <_printf_common>
 800c658:	3001      	adds	r0, #1
 800c65a:	d14d      	bne.n	800c6f8 <_printf_i+0x1c8>
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c660:	b005      	add	sp, #20
 800c662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c666:	4839      	ldr	r0, [pc, #228]	; (800c74c <_printf_i+0x21c>)
 800c668:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c66c:	6813      	ldr	r3, [r2, #0]
 800c66e:	6821      	ldr	r1, [r4, #0]
 800c670:	1d1d      	adds	r5, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6015      	str	r5, [r2, #0]
 800c676:	060a      	lsls	r2, r1, #24
 800c678:	d50b      	bpl.n	800c692 <_printf_i+0x162>
 800c67a:	07ca      	lsls	r2, r1, #31
 800c67c:	bf44      	itt	mi
 800c67e:	f041 0120 	orrmi.w	r1, r1, #32
 800c682:	6021      	strmi	r1, [r4, #0]
 800c684:	b91b      	cbnz	r3, 800c68e <_printf_i+0x15e>
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	f022 0220 	bic.w	r2, r2, #32
 800c68c:	6022      	str	r2, [r4, #0]
 800c68e:	2210      	movs	r2, #16
 800c690:	e7b7      	b.n	800c602 <_printf_i+0xd2>
 800c692:	064d      	lsls	r5, r1, #25
 800c694:	bf48      	it	mi
 800c696:	b29b      	uxthmi	r3, r3
 800c698:	e7ef      	b.n	800c67a <_printf_i+0x14a>
 800c69a:	4665      	mov	r5, ip
 800c69c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6a0:	fb02 3311 	mls	r3, r2, r1, r3
 800c6a4:	5cc3      	ldrb	r3, [r0, r3]
 800c6a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	d1f5      	bne.n	800c69c <_printf_i+0x16c>
 800c6b0:	e7b9      	b.n	800c626 <_printf_i+0xf6>
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	6825      	ldr	r5, [r4, #0]
 800c6b6:	1d18      	adds	r0, r3, #4
 800c6b8:	6961      	ldr	r1, [r4, #20]
 800c6ba:	6010      	str	r0, [r2, #0]
 800c6bc:	0628      	lsls	r0, r5, #24
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	d501      	bpl.n	800c6c6 <_printf_i+0x196>
 800c6c2:	6019      	str	r1, [r3, #0]
 800c6c4:	e002      	b.n	800c6cc <_printf_i+0x19c>
 800c6c6:	066a      	lsls	r2, r5, #25
 800c6c8:	d5fb      	bpl.n	800c6c2 <_printf_i+0x192>
 800c6ca:	8019      	strh	r1, [r3, #0]
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4665      	mov	r5, ip
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	e7b9      	b.n	800c648 <_printf_i+0x118>
 800c6d4:	6813      	ldr	r3, [r2, #0]
 800c6d6:	1d19      	adds	r1, r3, #4
 800c6d8:	6011      	str	r1, [r2, #0]
 800c6da:	681d      	ldr	r5, [r3, #0]
 800c6dc:	6862      	ldr	r2, [r4, #4]
 800c6de:	2100      	movs	r1, #0
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f000 feb1 	bl	800d448 <memchr>
 800c6e6:	b108      	cbz	r0, 800c6ec <_printf_i+0x1bc>
 800c6e8:	1b40      	subs	r0, r0, r5
 800c6ea:	6060      	str	r0, [r4, #4]
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6f6:	e7a7      	b.n	800c648 <_printf_i+0x118>
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	4630      	mov	r0, r6
 800c700:	47c0      	blx	r8
 800c702:	3001      	adds	r0, #1
 800c704:	d0aa      	beq.n	800c65c <_printf_i+0x12c>
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	079b      	lsls	r3, r3, #30
 800c70a:	d413      	bmi.n	800c734 <_printf_i+0x204>
 800c70c:	68e0      	ldr	r0, [r4, #12]
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	4298      	cmp	r0, r3
 800c712:	bfb8      	it	lt
 800c714:	4618      	movlt	r0, r3
 800c716:	e7a3      	b.n	800c660 <_printf_i+0x130>
 800c718:	2301      	movs	r3, #1
 800c71a:	464a      	mov	r2, r9
 800c71c:	4639      	mov	r1, r7
 800c71e:	4630      	mov	r0, r6
 800c720:	47c0      	blx	r8
 800c722:	3001      	adds	r0, #1
 800c724:	d09a      	beq.n	800c65c <_printf_i+0x12c>
 800c726:	3501      	adds	r5, #1
 800c728:	68e3      	ldr	r3, [r4, #12]
 800c72a:	9a03      	ldr	r2, [sp, #12]
 800c72c:	1a9b      	subs	r3, r3, r2
 800c72e:	42ab      	cmp	r3, r5
 800c730:	dcf2      	bgt.n	800c718 <_printf_i+0x1e8>
 800c732:	e7eb      	b.n	800c70c <_printf_i+0x1dc>
 800c734:	2500      	movs	r5, #0
 800c736:	f104 0919 	add.w	r9, r4, #25
 800c73a:	e7f5      	b.n	800c728 <_printf_i+0x1f8>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ac      	bne.n	800c69a <_printf_i+0x16a>
 800c740:	7803      	ldrb	r3, [r0, #0]
 800c742:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c746:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c74a:	e76c      	b.n	800c626 <_printf_i+0xf6>
 800c74c:	0800e255 	.word	0x0800e255
 800c750:	0800e266 	.word	0x0800e266

0800c754 <_sbrk_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	2300      	movs	r3, #0
 800c758:	4c05      	ldr	r4, [pc, #20]	; (800c770 <_sbrk_r+0x1c>)
 800c75a:	4605      	mov	r5, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	6023      	str	r3, [r4, #0]
 800c760:	f7f9 f990 	bl	8005a84 <_sbrk>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_sbrk_r+0x1a>
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_sbrk_r+0x1a>
 800c76c:	602b      	str	r3, [r5, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	20000b84 	.word	0x20000b84

0800c774 <strncmp>:
 800c774:	b510      	push	{r4, lr}
 800c776:	b16a      	cbz	r2, 800c794 <strncmp+0x20>
 800c778:	3901      	subs	r1, #1
 800c77a:	1884      	adds	r4, r0, r2
 800c77c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c780:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c784:	4293      	cmp	r3, r2
 800c786:	d103      	bne.n	800c790 <strncmp+0x1c>
 800c788:	42a0      	cmp	r0, r4
 800c78a:	d001      	beq.n	800c790 <strncmp+0x1c>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1f5      	bne.n	800c77c <strncmp+0x8>
 800c790:	1a98      	subs	r0, r3, r2
 800c792:	bd10      	pop	{r4, pc}
 800c794:	4610      	mov	r0, r2
 800c796:	e7fc      	b.n	800c792 <strncmp+0x1e>

0800c798 <__ascii_wctomb>:
 800c798:	b149      	cbz	r1, 800c7ae <__ascii_wctomb+0x16>
 800c79a:	2aff      	cmp	r2, #255	; 0xff
 800c79c:	bf8b      	itete	hi
 800c79e:	238a      	movhi	r3, #138	; 0x8a
 800c7a0:	700a      	strbls	r2, [r1, #0]
 800c7a2:	6003      	strhi	r3, [r0, #0]
 800c7a4:	2001      	movls	r0, #1
 800c7a6:	bf88      	it	hi
 800c7a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c7ac:	4770      	bx	lr
 800c7ae:	4608      	mov	r0, r1
 800c7b0:	4770      	bx	lr

0800c7b2 <quorem>:
 800c7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b6:	6903      	ldr	r3, [r0, #16]
 800c7b8:	690c      	ldr	r4, [r1, #16]
 800c7ba:	4680      	mov	r8, r0
 800c7bc:	42a3      	cmp	r3, r4
 800c7be:	f2c0 8084 	blt.w	800c8ca <quorem+0x118>
 800c7c2:	3c01      	subs	r4, #1
 800c7c4:	f101 0714 	add.w	r7, r1, #20
 800c7c8:	f100 0614 	add.w	r6, r0, #20
 800c7cc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c7d0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	fbb0 f5f5 	udiv	r5, r0, r5
 800c7da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c7de:	eb06 030c 	add.w	r3, r6, ip
 800c7e2:	eb07 090c 	add.w	r9, r7, ip
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	b39d      	cbz	r5, 800c852 <quorem+0xa0>
 800c7ea:	f04f 0a00 	mov.w	sl, #0
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	46b6      	mov	lr, r6
 800c7f2:	46d3      	mov	fp, sl
 800c7f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7f8:	b293      	uxth	r3, r2
 800c7fa:	fb05 a303 	mla	r3, r5, r3, sl
 800c7fe:	0c12      	lsrs	r2, r2, #16
 800c800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c804:	fb05 a202 	mla	r2, r5, r2, sl
 800c808:	b29b      	uxth	r3, r3
 800c80a:	ebab 0303 	sub.w	r3, fp, r3
 800c80e:	f8de b000 	ldr.w	fp, [lr]
 800c812:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c816:	fa1f fb8b 	uxth.w	fp, fp
 800c81a:	445b      	add	r3, fp
 800c81c:	fa1f fb82 	uxth.w	fp, r2
 800c820:	f8de 2000 	ldr.w	r2, [lr]
 800c824:	4581      	cmp	r9, r0
 800c826:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c82a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c82e:	b29b      	uxth	r3, r3
 800c830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c834:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c838:	f84e 3b04 	str.w	r3, [lr], #4
 800c83c:	d2da      	bcs.n	800c7f4 <quorem+0x42>
 800c83e:	f856 300c 	ldr.w	r3, [r6, ip]
 800c842:	b933      	cbnz	r3, 800c852 <quorem+0xa0>
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	3b04      	subs	r3, #4
 800c848:	429e      	cmp	r6, r3
 800c84a:	461a      	mov	r2, r3
 800c84c:	d331      	bcc.n	800c8b2 <quorem+0x100>
 800c84e:	f8c8 4010 	str.w	r4, [r8, #16]
 800c852:	4640      	mov	r0, r8
 800c854:	f7ff fa52 	bl	800bcfc <__mcmp>
 800c858:	2800      	cmp	r0, #0
 800c85a:	db26      	blt.n	800c8aa <quorem+0xf8>
 800c85c:	4630      	mov	r0, r6
 800c85e:	f04f 0c00 	mov.w	ip, #0
 800c862:	3501      	adds	r5, #1
 800c864:	f857 1b04 	ldr.w	r1, [r7], #4
 800c868:	f8d0 e000 	ldr.w	lr, [r0]
 800c86c:	b28b      	uxth	r3, r1
 800c86e:	ebac 0303 	sub.w	r3, ip, r3
 800c872:	fa1f f28e 	uxth.w	r2, lr
 800c876:	4413      	add	r3, r2
 800c878:	0c0a      	lsrs	r2, r1, #16
 800c87a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c87e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c882:	b29b      	uxth	r3, r3
 800c884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c888:	45b9      	cmp	r9, r7
 800c88a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c88e:	f840 3b04 	str.w	r3, [r0], #4
 800c892:	d2e7      	bcs.n	800c864 <quorem+0xb2>
 800c894:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c898:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c89c:	b92a      	cbnz	r2, 800c8aa <quorem+0xf8>
 800c89e:	3b04      	subs	r3, #4
 800c8a0:	429e      	cmp	r6, r3
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	d30b      	bcc.n	800c8be <quorem+0x10c>
 800c8a6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	b003      	add	sp, #12
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	6812      	ldr	r2, [r2, #0]
 800c8b4:	3b04      	subs	r3, #4
 800c8b6:	2a00      	cmp	r2, #0
 800c8b8:	d1c9      	bne.n	800c84e <quorem+0x9c>
 800c8ba:	3c01      	subs	r4, #1
 800c8bc:	e7c4      	b.n	800c848 <quorem+0x96>
 800c8be:	6812      	ldr	r2, [r2, #0]
 800c8c0:	3b04      	subs	r3, #4
 800c8c2:	2a00      	cmp	r2, #0
 800c8c4:	d1ef      	bne.n	800c8a6 <quorem+0xf4>
 800c8c6:	3c01      	subs	r4, #1
 800c8c8:	e7ea      	b.n	800c8a0 <quorem+0xee>
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e7ee      	b.n	800c8ac <quorem+0xfa>
	...

0800c8d0 <_dtoa_r>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	4616      	mov	r6, r2
 800c8d6:	461f      	mov	r7, r3
 800c8d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8da:	b095      	sub	sp, #84	; 0x54
 800c8dc:	4604      	mov	r4, r0
 800c8de:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c8e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c8e6:	b93d      	cbnz	r5, 800c8f8 <_dtoa_r+0x28>
 800c8e8:	2010      	movs	r0, #16
 800c8ea:	f000 fda5 	bl	800d438 <malloc>
 800c8ee:	6260      	str	r0, [r4, #36]	; 0x24
 800c8f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8f4:	6005      	str	r5, [r0, #0]
 800c8f6:	60c5      	str	r5, [r0, #12]
 800c8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8fa:	6819      	ldr	r1, [r3, #0]
 800c8fc:	b151      	cbz	r1, 800c914 <_dtoa_r+0x44>
 800c8fe:	685a      	ldr	r2, [r3, #4]
 800c900:	2301      	movs	r3, #1
 800c902:	4093      	lsls	r3, r2
 800c904:	604a      	str	r2, [r1, #4]
 800c906:	608b      	str	r3, [r1, #8]
 800c908:	4620      	mov	r0, r4
 800c90a:	f7fe ffd9 	bl	800b8c0 <_Bfree>
 800c90e:	2200      	movs	r2, #0
 800c910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	1e3b      	subs	r3, r7, #0
 800c916:	bfaf      	iteee	ge
 800c918:	2300      	movge	r3, #0
 800c91a:	2201      	movlt	r2, #1
 800c91c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c920:	9303      	strlt	r3, [sp, #12]
 800c922:	bfac      	ite	ge
 800c924:	f8c8 3000 	strge.w	r3, [r8]
 800c928:	f8c8 2000 	strlt.w	r2, [r8]
 800c92c:	4bae      	ldr	r3, [pc, #696]	; (800cbe8 <_dtoa_r+0x318>)
 800c92e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c932:	ea33 0308 	bics.w	r3, r3, r8
 800c936:	d11b      	bne.n	800c970 <_dtoa_r+0xa0>
 800c938:	f242 730f 	movw	r3, #9999	; 0x270f
 800c93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	9b02      	ldr	r3, [sp, #8]
 800c942:	b923      	cbnz	r3, 800c94e <_dtoa_r+0x7e>
 800c944:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c948:	2800      	cmp	r0, #0
 800c94a:	f000 8545 	beq.w	800d3d8 <_dtoa_r+0xb08>
 800c94e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c950:	b953      	cbnz	r3, 800c968 <_dtoa_r+0x98>
 800c952:	4ba6      	ldr	r3, [pc, #664]	; (800cbec <_dtoa_r+0x31c>)
 800c954:	e021      	b.n	800c99a <_dtoa_r+0xca>
 800c956:	4ba6      	ldr	r3, [pc, #664]	; (800cbf0 <_dtoa_r+0x320>)
 800c958:	9306      	str	r3, [sp, #24]
 800c95a:	3308      	adds	r3, #8
 800c95c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	9806      	ldr	r0, [sp, #24]
 800c962:	b015      	add	sp, #84	; 0x54
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c968:	4ba0      	ldr	r3, [pc, #640]	; (800cbec <_dtoa_r+0x31c>)
 800c96a:	9306      	str	r3, [sp, #24]
 800c96c:	3303      	adds	r3, #3
 800c96e:	e7f5      	b.n	800c95c <_dtoa_r+0x8c>
 800c970:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c974:	2200      	movs	r2, #0
 800c976:	2300      	movs	r3, #0
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f4 f814 	bl	80009a8 <__aeabi_dcmpeq>
 800c980:	4682      	mov	sl, r0
 800c982:	b160      	cbz	r0, 800c99e <_dtoa_r+0xce>
 800c984:	2301      	movs	r3, #1
 800c986:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 8520 	beq.w	800d3d2 <_dtoa_r+0xb02>
 800c992:	4b98      	ldr	r3, [pc, #608]	; (800cbf4 <_dtoa_r+0x324>)
 800c994:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c996:	6013      	str	r3, [r2, #0]
 800c998:	3b01      	subs	r3, #1
 800c99a:	9306      	str	r3, [sp, #24]
 800c99c:	e7e0      	b.n	800c960 <_dtoa_r+0x90>
 800c99e:	ab12      	add	r3, sp, #72	; 0x48
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	ab13      	add	r3, sp, #76	; 0x4c
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f7ff fa94 	bl	800bed8 <__d2b>
 800c9b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c9b4:	4683      	mov	fp, r0
 800c9b6:	2d00      	cmp	r5, #0
 800c9b8:	d07d      	beq.n	800cab6 <_dtoa_r+0x1e6>
 800c9ba:	46b0      	mov	r8, r6
 800c9bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c9c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c9c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c9cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4b89      	ldr	r3, [pc, #548]	; (800cbf8 <_dtoa_r+0x328>)
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	f7f3 fbc6 	bl	8000168 <__aeabi_dsub>
 800c9dc:	a37c      	add	r3, pc, #496	; (adr r3, 800cbd0 <_dtoa_r+0x300>)
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f7f3 fd79 	bl	80004d8 <__aeabi_dmul>
 800c9e6:	a37c      	add	r3, pc, #496	; (adr r3, 800cbd8 <_dtoa_r+0x308>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fbbe 	bl	800016c <__adddf3>
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	f7f3 fd05 	bl	8000404 <__aeabi_i2d>
 800c9fa:	a379      	add	r3, pc, #484	; (adr r3, 800cbe0 <_dtoa_r+0x310>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f7f3 fd6a 	bl	80004d8 <__aeabi_dmul>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	4630      	mov	r0, r6
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	f7f3 fbae 	bl	800016c <__adddf3>
 800ca10:	4606      	mov	r6, r0
 800ca12:	460f      	mov	r7, r1
 800ca14:	f7f3 fffa 	bl	8000a0c <__aeabi_d2iz>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4682      	mov	sl, r0
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f3 ffcb 	bl	80009bc <__aeabi_dcmplt>
 800ca26:	b148      	cbz	r0, 800ca3c <_dtoa_r+0x16c>
 800ca28:	4650      	mov	r0, sl
 800ca2a:	f7f3 fceb 	bl	8000404 <__aeabi_i2d>
 800ca2e:	4632      	mov	r2, r6
 800ca30:	463b      	mov	r3, r7
 800ca32:	f7f3 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 800ca36:	b908      	cbnz	r0, 800ca3c <_dtoa_r+0x16c>
 800ca38:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca3c:	f1ba 0f16 	cmp.w	sl, #22
 800ca40:	d85a      	bhi.n	800caf8 <_dtoa_r+0x228>
 800ca42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca46:	496d      	ldr	r1, [pc, #436]	; (800cbfc <_dtoa_r+0x32c>)
 800ca48:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ca4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca50:	f7f3 ffd2 	bl	80009f8 <__aeabi_dcmpgt>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d051      	beq.n	800cafc <_dtoa_r+0x22c>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca62:	1b5d      	subs	r5, r3, r5
 800ca64:	1e6b      	subs	r3, r5, #1
 800ca66:	9307      	str	r3, [sp, #28]
 800ca68:	bf43      	ittte	mi
 800ca6a:	2300      	movmi	r3, #0
 800ca6c:	f1c5 0901 	rsbmi	r9, r5, #1
 800ca70:	9307      	strmi	r3, [sp, #28]
 800ca72:	f04f 0900 	movpl.w	r9, #0
 800ca76:	f1ba 0f00 	cmp.w	sl, #0
 800ca7a:	db41      	blt.n	800cb00 <_dtoa_r+0x230>
 800ca7c:	9b07      	ldr	r3, [sp, #28]
 800ca7e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ca82:	4453      	add	r3, sl
 800ca84:	9307      	str	r3, [sp, #28]
 800ca86:	2300      	movs	r3, #0
 800ca88:	9308      	str	r3, [sp, #32]
 800ca8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca8c:	2b09      	cmp	r3, #9
 800ca8e:	f200 808f 	bhi.w	800cbb0 <_dtoa_r+0x2e0>
 800ca92:	2b05      	cmp	r3, #5
 800ca94:	bfc4      	itt	gt
 800ca96:	3b04      	subgt	r3, #4
 800ca98:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ca9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca9c:	bfc8      	it	gt
 800ca9e:	2500      	movgt	r5, #0
 800caa0:	f1a3 0302 	sub.w	r3, r3, #2
 800caa4:	bfd8      	it	le
 800caa6:	2501      	movle	r5, #1
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	f200 808d 	bhi.w	800cbc8 <_dtoa_r+0x2f8>
 800caae:	e8df f003 	tbb	[pc, r3]
 800cab2:	7d7b      	.short	0x7d7b
 800cab4:	6f2f      	.short	0x6f2f
 800cab6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800caba:	441d      	add	r5, r3
 800cabc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cac0:	2820      	cmp	r0, #32
 800cac2:	dd13      	ble.n	800caec <_dtoa_r+0x21c>
 800cac4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cac8:	9b02      	ldr	r3, [sp, #8]
 800caca:	fa08 f800 	lsl.w	r8, r8, r0
 800cace:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cad2:	fa23 f000 	lsr.w	r0, r3, r0
 800cad6:	ea48 0000 	orr.w	r0, r8, r0
 800cada:	f7f3 fc83 	bl	80003e4 <__aeabi_ui2d>
 800cade:	2301      	movs	r3, #1
 800cae0:	4680      	mov	r8, r0
 800cae2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800cae6:	3d01      	subs	r5, #1
 800cae8:	9310      	str	r3, [sp, #64]	; 0x40
 800caea:	e771      	b.n	800c9d0 <_dtoa_r+0x100>
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	f1c0 0020 	rsb	r0, r0, #32
 800caf2:	fa03 f000 	lsl.w	r0, r3, r0
 800caf6:	e7f0      	b.n	800cada <_dtoa_r+0x20a>
 800caf8:	2301      	movs	r3, #1
 800cafa:	e7b0      	b.n	800ca5e <_dtoa_r+0x18e>
 800cafc:	900d      	str	r0, [sp, #52]	; 0x34
 800cafe:	e7af      	b.n	800ca60 <_dtoa_r+0x190>
 800cb00:	f1ca 0300 	rsb	r3, sl, #0
 800cb04:	9308      	str	r3, [sp, #32]
 800cb06:	2300      	movs	r3, #0
 800cb08:	eba9 090a 	sub.w	r9, r9, sl
 800cb0c:	930c      	str	r3, [sp, #48]	; 0x30
 800cb0e:	e7bc      	b.n	800ca8a <_dtoa_r+0x1ba>
 800cb10:	2301      	movs	r3, #1
 800cb12:	9309      	str	r3, [sp, #36]	; 0x24
 800cb14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dd74      	ble.n	800cc04 <_dtoa_r+0x334>
 800cb1a:	4698      	mov	r8, r3
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb22:	6072      	str	r2, [r6, #4]
 800cb24:	2204      	movs	r2, #4
 800cb26:	f102 0014 	add.w	r0, r2, #20
 800cb2a:	4298      	cmp	r0, r3
 800cb2c:	6871      	ldr	r1, [r6, #4]
 800cb2e:	d96e      	bls.n	800cc0e <_dtoa_r+0x33e>
 800cb30:	4620      	mov	r0, r4
 800cb32:	f7fe fe91 	bl	800b858 <_Balloc>
 800cb36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb38:	6030      	str	r0, [r6, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f1b8 0f0e 	cmp.w	r8, #14
 800cb40:	9306      	str	r3, [sp, #24]
 800cb42:	f200 80ed 	bhi.w	800cd20 <_dtoa_r+0x450>
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	f000 80ea 	beq.w	800cd20 <_dtoa_r+0x450>
 800cb4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb50:	f1ba 0f00 	cmp.w	sl, #0
 800cb54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cb58:	dd77      	ble.n	800cc4a <_dtoa_r+0x37a>
 800cb5a:	4a28      	ldr	r2, [pc, #160]	; (800cbfc <_dtoa_r+0x32c>)
 800cb5c:	f00a 030f 	and.w	r3, sl, #15
 800cb60:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cb64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb68:	06f0      	lsls	r0, r6, #27
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb72:	d568      	bpl.n	800cc46 <_dtoa_r+0x376>
 800cb74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cb78:	4b21      	ldr	r3, [pc, #132]	; (800cc00 <_dtoa_r+0x330>)
 800cb7a:	2503      	movs	r5, #3
 800cb7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb80:	f7f3 fdd4 	bl	800072c <__aeabi_ddiv>
 800cb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb88:	f006 060f 	and.w	r6, r6, #15
 800cb8c:	4f1c      	ldr	r7, [pc, #112]	; (800cc00 <_dtoa_r+0x330>)
 800cb8e:	e04f      	b.n	800cc30 <_dtoa_r+0x360>
 800cb90:	2301      	movs	r3, #1
 800cb92:	9309      	str	r3, [sp, #36]	; 0x24
 800cb94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cb96:	4453      	add	r3, sl
 800cb98:	f103 0801 	add.w	r8, r3, #1
 800cb9c:	9304      	str	r3, [sp, #16]
 800cb9e:	4643      	mov	r3, r8
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	bfb8      	it	lt
 800cba4:	2301      	movlt	r3, #1
 800cba6:	e7ba      	b.n	800cb1e <_dtoa_r+0x24e>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	e7b2      	b.n	800cb12 <_dtoa_r+0x242>
 800cbac:	2300      	movs	r3, #0
 800cbae:	e7f0      	b.n	800cb92 <_dtoa_r+0x2c2>
 800cbb0:	2501      	movs	r5, #1
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9509      	str	r5, [sp, #36]	; 0x24
 800cbb6:	931e      	str	r3, [sp, #120]	; 0x78
 800cbb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	9304      	str	r3, [sp, #16]
 800cbc0:	4698      	mov	r8, r3
 800cbc2:	2312      	movs	r3, #18
 800cbc4:	921f      	str	r2, [sp, #124]	; 0x7c
 800cbc6:	e7aa      	b.n	800cb1e <_dtoa_r+0x24e>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	9309      	str	r3, [sp, #36]	; 0x24
 800cbcc:	e7f4      	b.n	800cbb8 <_dtoa_r+0x2e8>
 800cbce:	bf00      	nop
 800cbd0:	636f4361 	.word	0x636f4361
 800cbd4:	3fd287a7 	.word	0x3fd287a7
 800cbd8:	8b60c8b3 	.word	0x8b60c8b3
 800cbdc:	3fc68a28 	.word	0x3fc68a28
 800cbe0:	509f79fb 	.word	0x509f79fb
 800cbe4:	3fd34413 	.word	0x3fd34413
 800cbe8:	7ff00000 	.word	0x7ff00000
 800cbec:	0800e381 	.word	0x0800e381
 800cbf0:	0800e378 	.word	0x0800e378
 800cbf4:	0800e386 	.word	0x0800e386
 800cbf8:	3ff80000 	.word	0x3ff80000
 800cbfc:	0800e170 	.word	0x0800e170
 800cc00:	0800e148 	.word	0x0800e148
 800cc04:	2301      	movs	r3, #1
 800cc06:	9304      	str	r3, [sp, #16]
 800cc08:	4698      	mov	r8, r3
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	e7da      	b.n	800cbc4 <_dtoa_r+0x2f4>
 800cc0e:	3101      	adds	r1, #1
 800cc10:	6071      	str	r1, [r6, #4]
 800cc12:	0052      	lsls	r2, r2, #1
 800cc14:	e787      	b.n	800cb26 <_dtoa_r+0x256>
 800cc16:	07f1      	lsls	r1, r6, #31
 800cc18:	d508      	bpl.n	800cc2c <_dtoa_r+0x35c>
 800cc1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc22:	f7f3 fc59 	bl	80004d8 <__aeabi_dmul>
 800cc26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cc2a:	3501      	adds	r5, #1
 800cc2c:	1076      	asrs	r6, r6, #1
 800cc2e:	3708      	adds	r7, #8
 800cc30:	2e00      	cmp	r6, #0
 800cc32:	d1f0      	bne.n	800cc16 <_dtoa_r+0x346>
 800cc34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc3c:	f7f3 fd76 	bl	800072c <__aeabi_ddiv>
 800cc40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc44:	e01b      	b.n	800cc7e <_dtoa_r+0x3ae>
 800cc46:	2502      	movs	r5, #2
 800cc48:	e7a0      	b.n	800cb8c <_dtoa_r+0x2bc>
 800cc4a:	f000 80a4 	beq.w	800cd96 <_dtoa_r+0x4c6>
 800cc4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cc52:	f1ca 0600 	rsb	r6, sl, #0
 800cc56:	4ba0      	ldr	r3, [pc, #640]	; (800ced8 <_dtoa_r+0x608>)
 800cc58:	f006 020f 	and.w	r2, r6, #15
 800cc5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fc38 	bl	80004d8 <__aeabi_dmul>
 800cc68:	2502      	movs	r5, #2
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc70:	4f9a      	ldr	r7, [pc, #616]	; (800cedc <_dtoa_r+0x60c>)
 800cc72:	1136      	asrs	r6, r6, #4
 800cc74:	2e00      	cmp	r6, #0
 800cc76:	f040 8083 	bne.w	800cd80 <_dtoa_r+0x4b0>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1e0      	bne.n	800cc40 <_dtoa_r+0x370>
 800cc7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 808a 	beq.w	800cd9a <_dtoa_r+0x4ca>
 800cc86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cc8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc92:	2200      	movs	r2, #0
 800cc94:	4b92      	ldr	r3, [pc, #584]	; (800cee0 <_dtoa_r+0x610>)
 800cc96:	f7f3 fe91 	bl	80009bc <__aeabi_dcmplt>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d07d      	beq.n	800cd9a <_dtoa_r+0x4ca>
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	d07a      	beq.n	800cd9a <_dtoa_r+0x4ca>
 800cca4:	9b04      	ldr	r3, [sp, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dd36      	ble.n	800cd18 <_dtoa_r+0x448>
 800ccaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccae:	2200      	movs	r2, #0
 800ccb0:	4b8c      	ldr	r3, [pc, #560]	; (800cee4 <_dtoa_r+0x614>)
 800ccb2:	f7f3 fc11 	bl	80004d8 <__aeabi_dmul>
 800ccb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccba:	9e04      	ldr	r6, [sp, #16]
 800ccbc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800ccc0:	3501      	adds	r5, #1
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f7f3 fb9e 	bl	8000404 <__aeabi_i2d>
 800ccc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cccc:	f7f3 fc04 	bl	80004d8 <__aeabi_dmul>
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	4b85      	ldr	r3, [pc, #532]	; (800cee8 <_dtoa_r+0x618>)
 800ccd4:	f7f3 fa4a 	bl	800016c <__adddf3>
 800ccd8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ccdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cce0:	950b      	str	r5, [sp, #44]	; 0x2c
 800cce2:	2e00      	cmp	r6, #0
 800cce4:	d15c      	bne.n	800cda0 <_dtoa_r+0x4d0>
 800cce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccea:	2200      	movs	r2, #0
 800ccec:	4b7f      	ldr	r3, [pc, #508]	; (800ceec <_dtoa_r+0x61c>)
 800ccee:	f7f3 fa3b 	bl	8000168 <__aeabi_dsub>
 800ccf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccf4:	462b      	mov	r3, r5
 800ccf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccfa:	f7f3 fe7d 	bl	80009f8 <__aeabi_dcmpgt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f040 8281 	bne.w	800d206 <_dtoa_r+0x936>
 800cd04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd0a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cd0e:	f7f3 fe55 	bl	80009bc <__aeabi_dcmplt>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f040 8275 	bne.w	800d202 <_dtoa_r+0x932>
 800cd18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cd1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f2c0 814b 	blt.w	800cfbe <_dtoa_r+0x6ee>
 800cd28:	f1ba 0f0e 	cmp.w	sl, #14
 800cd2c:	f300 8147 	bgt.w	800cfbe <_dtoa_r+0x6ee>
 800cd30:	4b69      	ldr	r3, [pc, #420]	; (800ced8 <_dtoa_r+0x608>)
 800cd32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f280 80d7 	bge.w	800cef4 <_dtoa_r+0x624>
 800cd46:	f1b8 0f00 	cmp.w	r8, #0
 800cd4a:	f300 80d3 	bgt.w	800cef4 <_dtoa_r+0x624>
 800cd4e:	f040 8257 	bne.w	800d200 <_dtoa_r+0x930>
 800cd52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd56:	2200      	movs	r2, #0
 800cd58:	4b64      	ldr	r3, [pc, #400]	; (800ceec <_dtoa_r+0x61c>)
 800cd5a:	f7f3 fbbd 	bl	80004d8 <__aeabi_dmul>
 800cd5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd62:	f7f3 fe3f 	bl	80009e4 <__aeabi_dcmpge>
 800cd66:	4646      	mov	r6, r8
 800cd68:	4647      	mov	r7, r8
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	f040 822d 	bne.w	800d1ca <_dtoa_r+0x8fa>
 800cd70:	9b06      	ldr	r3, [sp, #24]
 800cd72:	9a06      	ldr	r2, [sp, #24]
 800cd74:	1c5d      	adds	r5, r3, #1
 800cd76:	2331      	movs	r3, #49	; 0x31
 800cd78:	f10a 0a01 	add.w	sl, sl, #1
 800cd7c:	7013      	strb	r3, [r2, #0]
 800cd7e:	e228      	b.n	800d1d2 <_dtoa_r+0x902>
 800cd80:	07f2      	lsls	r2, r6, #31
 800cd82:	d505      	bpl.n	800cd90 <_dtoa_r+0x4c0>
 800cd84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd88:	f7f3 fba6 	bl	80004d8 <__aeabi_dmul>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	3501      	adds	r5, #1
 800cd90:	1076      	asrs	r6, r6, #1
 800cd92:	3708      	adds	r7, #8
 800cd94:	e76e      	b.n	800cc74 <_dtoa_r+0x3a4>
 800cd96:	2502      	movs	r5, #2
 800cd98:	e771      	b.n	800cc7e <_dtoa_r+0x3ae>
 800cd9a:	4657      	mov	r7, sl
 800cd9c:	4646      	mov	r6, r8
 800cd9e:	e790      	b.n	800ccc2 <_dtoa_r+0x3f2>
 800cda0:	4b4d      	ldr	r3, [pc, #308]	; (800ced8 <_dtoa_r+0x608>)
 800cda2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cda6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d048      	beq.n	800ce42 <_dtoa_r+0x572>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	494e      	ldr	r1, [pc, #312]	; (800cef0 <_dtoa_r+0x620>)
 800cdb8:	f7f3 fcb8 	bl	800072c <__aeabi_ddiv>
 800cdbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cdc0:	f7f3 f9d2 	bl	8000168 <__aeabi_dsub>
 800cdc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cdc8:	9d06      	ldr	r5, [sp, #24]
 800cdca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdce:	f7f3 fe1d 	bl	8000a0c <__aeabi_d2iz>
 800cdd2:	9011      	str	r0, [sp, #68]	; 0x44
 800cdd4:	f7f3 fb16 	bl	8000404 <__aeabi_i2d>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cde0:	f7f3 f9c2 	bl	8000168 <__aeabi_dsub>
 800cde4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cde6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdea:	3330      	adds	r3, #48	; 0x30
 800cdec:	f805 3b01 	strb.w	r3, [r5], #1
 800cdf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cdf4:	f7f3 fde2 	bl	80009bc <__aeabi_dcmplt>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d163      	bne.n	800cec4 <_dtoa_r+0x5f4>
 800cdfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce00:	2000      	movs	r0, #0
 800ce02:	4937      	ldr	r1, [pc, #220]	; (800cee0 <_dtoa_r+0x610>)
 800ce04:	f7f3 f9b0 	bl	8000168 <__aeabi_dsub>
 800ce08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce0c:	f7f3 fdd6 	bl	80009bc <__aeabi_dcmplt>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	f040 80b5 	bne.w	800cf80 <_dtoa_r+0x6b0>
 800ce16:	9b06      	ldr	r3, [sp, #24]
 800ce18:	1aeb      	subs	r3, r5, r3
 800ce1a:	429e      	cmp	r6, r3
 800ce1c:	f77f af7c 	ble.w	800cd18 <_dtoa_r+0x448>
 800ce20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce24:	2200      	movs	r2, #0
 800ce26:	4b2f      	ldr	r3, [pc, #188]	; (800cee4 <_dtoa_r+0x614>)
 800ce28:	f7f3 fb56 	bl	80004d8 <__aeabi_dmul>
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ce32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce36:	4b2b      	ldr	r3, [pc, #172]	; (800cee4 <_dtoa_r+0x614>)
 800ce38:	f7f3 fb4e 	bl	80004d8 <__aeabi_dmul>
 800ce3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce40:	e7c3      	b.n	800cdca <_dtoa_r+0x4fa>
 800ce42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce46:	f7f3 fb47 	bl	80004d8 <__aeabi_dmul>
 800ce4a:	9b06      	ldr	r3, [sp, #24]
 800ce4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ce50:	199d      	adds	r5, r3, r6
 800ce52:	461e      	mov	r6, r3
 800ce54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce58:	f7f3 fdd8 	bl	8000a0c <__aeabi_d2iz>
 800ce5c:	9011      	str	r0, [sp, #68]	; 0x44
 800ce5e:	f7f3 fad1 	bl	8000404 <__aeabi_i2d>
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce6a:	f7f3 f97d 	bl	8000168 <__aeabi_dsub>
 800ce6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce74:	3330      	adds	r3, #48	; 0x30
 800ce76:	f806 3b01 	strb.w	r3, [r6], #1
 800ce7a:	42ae      	cmp	r6, r5
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	d124      	bne.n	800cecc <_dtoa_r+0x5fc>
 800ce82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce86:	4b1a      	ldr	r3, [pc, #104]	; (800cef0 <_dtoa_r+0x620>)
 800ce88:	f7f3 f970 	bl	800016c <__adddf3>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce94:	f7f3 fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d171      	bne.n	800cf80 <_dtoa_r+0x6b0>
 800ce9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cea0:	2000      	movs	r0, #0
 800cea2:	4913      	ldr	r1, [pc, #76]	; (800cef0 <_dtoa_r+0x620>)
 800cea4:	f7f3 f960 	bl	8000168 <__aeabi_dsub>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceb0:	f7f3 fd84 	bl	80009bc <__aeabi_dcmplt>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f43f af2f 	beq.w	800cd18 <_dtoa_r+0x448>
 800ceba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cebe:	1e6a      	subs	r2, r5, #1
 800cec0:	2b30      	cmp	r3, #48	; 0x30
 800cec2:	d001      	beq.n	800cec8 <_dtoa_r+0x5f8>
 800cec4:	46ba      	mov	sl, r7
 800cec6:	e04a      	b.n	800cf5e <_dtoa_r+0x68e>
 800cec8:	4615      	mov	r5, r2
 800ceca:	e7f6      	b.n	800ceba <_dtoa_r+0x5ea>
 800cecc:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <_dtoa_r+0x614>)
 800cece:	f7f3 fb03 	bl	80004d8 <__aeabi_dmul>
 800ced2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced6:	e7bd      	b.n	800ce54 <_dtoa_r+0x584>
 800ced8:	0800e170 	.word	0x0800e170
 800cedc:	0800e148 	.word	0x0800e148
 800cee0:	3ff00000 	.word	0x3ff00000
 800cee4:	40240000 	.word	0x40240000
 800cee8:	401c0000 	.word	0x401c0000
 800ceec:	40140000 	.word	0x40140000
 800cef0:	3fe00000 	.word	0x3fe00000
 800cef4:	9d06      	ldr	r5, [sp, #24]
 800cef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cefa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefe:	4630      	mov	r0, r6
 800cf00:	4639      	mov	r1, r7
 800cf02:	f7f3 fc13 	bl	800072c <__aeabi_ddiv>
 800cf06:	f7f3 fd81 	bl	8000a0c <__aeabi_d2iz>
 800cf0a:	4681      	mov	r9, r0
 800cf0c:	f7f3 fa7a 	bl	8000404 <__aeabi_i2d>
 800cf10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf14:	f7f3 fae0 	bl	80004d8 <__aeabi_dmul>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	4639      	mov	r1, r7
 800cf20:	f7f3 f922 	bl	8000168 <__aeabi_dsub>
 800cf24:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800cf28:	f805 6b01 	strb.w	r6, [r5], #1
 800cf2c:	9e06      	ldr	r6, [sp, #24]
 800cf2e:	4602      	mov	r2, r0
 800cf30:	1bae      	subs	r6, r5, r6
 800cf32:	45b0      	cmp	r8, r6
 800cf34:	460b      	mov	r3, r1
 800cf36:	d135      	bne.n	800cfa4 <_dtoa_r+0x6d4>
 800cf38:	f7f3 f918 	bl	800016c <__adddf3>
 800cf3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf40:	4606      	mov	r6, r0
 800cf42:	460f      	mov	r7, r1
 800cf44:	f7f3 fd58 	bl	80009f8 <__aeabi_dcmpgt>
 800cf48:	b9c8      	cbnz	r0, 800cf7e <_dtoa_r+0x6ae>
 800cf4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4639      	mov	r1, r7
 800cf52:	f7f3 fd29 	bl	80009a8 <__aeabi_dcmpeq>
 800cf56:	b110      	cbz	r0, 800cf5e <_dtoa_r+0x68e>
 800cf58:	f019 0f01 	tst.w	r9, #1
 800cf5c:	d10f      	bne.n	800cf7e <_dtoa_r+0x6ae>
 800cf5e:	4659      	mov	r1, fp
 800cf60:	4620      	mov	r0, r4
 800cf62:	f7fe fcad 	bl	800b8c0 <_Bfree>
 800cf66:	2300      	movs	r3, #0
 800cf68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf6a:	702b      	strb	r3, [r5, #0]
 800cf6c:	f10a 0301 	add.w	r3, sl, #1
 800cf70:	6013      	str	r3, [r2, #0]
 800cf72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f43f acf3 	beq.w	800c960 <_dtoa_r+0x90>
 800cf7a:	601d      	str	r5, [r3, #0]
 800cf7c:	e4f0      	b.n	800c960 <_dtoa_r+0x90>
 800cf7e:	4657      	mov	r7, sl
 800cf80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf84:	1e6b      	subs	r3, r5, #1
 800cf86:	2a39      	cmp	r2, #57	; 0x39
 800cf88:	d106      	bne.n	800cf98 <_dtoa_r+0x6c8>
 800cf8a:	9a06      	ldr	r2, [sp, #24]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d107      	bne.n	800cfa0 <_dtoa_r+0x6d0>
 800cf90:	2330      	movs	r3, #48	; 0x30
 800cf92:	7013      	strb	r3, [r2, #0]
 800cf94:	4613      	mov	r3, r2
 800cf96:	3701      	adds	r7, #1
 800cf98:	781a      	ldrb	r2, [r3, #0]
 800cf9a:	3201      	adds	r2, #1
 800cf9c:	701a      	strb	r2, [r3, #0]
 800cf9e:	e791      	b.n	800cec4 <_dtoa_r+0x5f4>
 800cfa0:	461d      	mov	r5, r3
 800cfa2:	e7ed      	b.n	800cf80 <_dtoa_r+0x6b0>
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	4b99      	ldr	r3, [pc, #612]	; (800d20c <_dtoa_r+0x93c>)
 800cfa8:	f7f3 fa96 	bl	80004d8 <__aeabi_dmul>
 800cfac:	2200      	movs	r2, #0
 800cfae:	2300      	movs	r3, #0
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	460f      	mov	r7, r1
 800cfb4:	f7f3 fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d09e      	beq.n	800cefa <_dtoa_r+0x62a>
 800cfbc:	e7cf      	b.n	800cf5e <_dtoa_r+0x68e>
 800cfbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	f000 8088 	beq.w	800d0d6 <_dtoa_r+0x806>
 800cfc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cfc8:	2a01      	cmp	r2, #1
 800cfca:	dc6d      	bgt.n	800d0a8 <_dtoa_r+0x7d8>
 800cfcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cfce:	2a00      	cmp	r2, #0
 800cfd0:	d066      	beq.n	800d0a0 <_dtoa_r+0x7d0>
 800cfd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cfd6:	464d      	mov	r5, r9
 800cfd8:	9e08      	ldr	r6, [sp, #32]
 800cfda:	9a07      	ldr	r2, [sp, #28]
 800cfdc:	2101      	movs	r1, #1
 800cfde:	441a      	add	r2, r3
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4499      	add	r9, r3
 800cfe4:	9207      	str	r2, [sp, #28]
 800cfe6:	f7fe fd49 	bl	800ba7c <__i2b>
 800cfea:	4607      	mov	r7, r0
 800cfec:	2d00      	cmp	r5, #0
 800cfee:	dd0b      	ble.n	800d008 <_dtoa_r+0x738>
 800cff0:	9b07      	ldr	r3, [sp, #28]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	dd08      	ble.n	800d008 <_dtoa_r+0x738>
 800cff6:	42ab      	cmp	r3, r5
 800cff8:	bfa8      	it	ge
 800cffa:	462b      	movge	r3, r5
 800cffc:	9a07      	ldr	r2, [sp, #28]
 800cffe:	eba9 0903 	sub.w	r9, r9, r3
 800d002:	1aed      	subs	r5, r5, r3
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	9307      	str	r3, [sp, #28]
 800d008:	9b08      	ldr	r3, [sp, #32]
 800d00a:	b1eb      	cbz	r3, 800d048 <_dtoa_r+0x778>
 800d00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d065      	beq.n	800d0de <_dtoa_r+0x80e>
 800d012:	b18e      	cbz	r6, 800d038 <_dtoa_r+0x768>
 800d014:	4639      	mov	r1, r7
 800d016:	4632      	mov	r2, r6
 800d018:	4620      	mov	r0, r4
 800d01a:	f7fe fdcd 	bl	800bbb8 <__pow5mult>
 800d01e:	465a      	mov	r2, fp
 800d020:	4601      	mov	r1, r0
 800d022:	4607      	mov	r7, r0
 800d024:	4620      	mov	r0, r4
 800d026:	f7fe fd32 	bl	800ba8e <__multiply>
 800d02a:	4659      	mov	r1, fp
 800d02c:	900a      	str	r0, [sp, #40]	; 0x28
 800d02e:	4620      	mov	r0, r4
 800d030:	f7fe fc46 	bl	800b8c0 <_Bfree>
 800d034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d036:	469b      	mov	fp, r3
 800d038:	9b08      	ldr	r3, [sp, #32]
 800d03a:	1b9a      	subs	r2, r3, r6
 800d03c:	d004      	beq.n	800d048 <_dtoa_r+0x778>
 800d03e:	4659      	mov	r1, fp
 800d040:	4620      	mov	r0, r4
 800d042:	f7fe fdb9 	bl	800bbb8 <__pow5mult>
 800d046:	4683      	mov	fp, r0
 800d048:	2101      	movs	r1, #1
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7fe fd16 	bl	800ba7c <__i2b>
 800d050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d052:	4606      	mov	r6, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 81c6 	beq.w	800d3e6 <_dtoa_r+0xb16>
 800d05a:	461a      	mov	r2, r3
 800d05c:	4601      	mov	r1, r0
 800d05e:	4620      	mov	r0, r4
 800d060:	f7fe fdaa 	bl	800bbb8 <__pow5mult>
 800d064:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d066:	4606      	mov	r6, r0
 800d068:	2b01      	cmp	r3, #1
 800d06a:	dc3e      	bgt.n	800d0ea <_dtoa_r+0x81a>
 800d06c:	9b02      	ldr	r3, [sp, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d137      	bne.n	800d0e2 <_dtoa_r+0x812>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d134      	bne.n	800d0e6 <_dtoa_r+0x816>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d082:	0d1b      	lsrs	r3, r3, #20
 800d084:	051b      	lsls	r3, r3, #20
 800d086:	b12b      	cbz	r3, 800d094 <_dtoa_r+0x7c4>
 800d088:	9b07      	ldr	r3, [sp, #28]
 800d08a:	f109 0901 	add.w	r9, r9, #1
 800d08e:	3301      	adds	r3, #1
 800d090:	9307      	str	r3, [sp, #28]
 800d092:	2301      	movs	r3, #1
 800d094:	9308      	str	r3, [sp, #32]
 800d096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d128      	bne.n	800d0ee <_dtoa_r+0x81e>
 800d09c:	2001      	movs	r0, #1
 800d09e:	e02e      	b.n	800d0fe <_dtoa_r+0x82e>
 800d0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0a6:	e796      	b.n	800cfd6 <_dtoa_r+0x706>
 800d0a8:	9b08      	ldr	r3, [sp, #32]
 800d0aa:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800d0ae:	42b3      	cmp	r3, r6
 800d0b0:	bfb7      	itett	lt
 800d0b2:	9b08      	ldrlt	r3, [sp, #32]
 800d0b4:	1b9e      	subge	r6, r3, r6
 800d0b6:	1af2      	sublt	r2, r6, r3
 800d0b8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d0ba:	bfbf      	itttt	lt
 800d0bc:	9608      	strlt	r6, [sp, #32]
 800d0be:	189b      	addlt	r3, r3, r2
 800d0c0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d0c2:	2600      	movlt	r6, #0
 800d0c4:	f1b8 0f00 	cmp.w	r8, #0
 800d0c8:	bfb9      	ittee	lt
 800d0ca:	eba9 0508 	sublt.w	r5, r9, r8
 800d0ce:	2300      	movlt	r3, #0
 800d0d0:	464d      	movge	r5, r9
 800d0d2:	4643      	movge	r3, r8
 800d0d4:	e781      	b.n	800cfda <_dtoa_r+0x70a>
 800d0d6:	9e08      	ldr	r6, [sp, #32]
 800d0d8:	464d      	mov	r5, r9
 800d0da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d0dc:	e786      	b.n	800cfec <_dtoa_r+0x71c>
 800d0de:	9a08      	ldr	r2, [sp, #32]
 800d0e0:	e7ad      	b.n	800d03e <_dtoa_r+0x76e>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e7d6      	b.n	800d094 <_dtoa_r+0x7c4>
 800d0e6:	9b02      	ldr	r3, [sp, #8]
 800d0e8:	e7d4      	b.n	800d094 <_dtoa_r+0x7c4>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	9308      	str	r3, [sp, #32]
 800d0ee:	6933      	ldr	r3, [r6, #16]
 800d0f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d0f4:	6918      	ldr	r0, [r3, #16]
 800d0f6:	f7fe fc73 	bl	800b9e0 <__hi0bits>
 800d0fa:	f1c0 0020 	rsb	r0, r0, #32
 800d0fe:	9b07      	ldr	r3, [sp, #28]
 800d100:	4418      	add	r0, r3
 800d102:	f010 001f 	ands.w	r0, r0, #31
 800d106:	d047      	beq.n	800d198 <_dtoa_r+0x8c8>
 800d108:	f1c0 0320 	rsb	r3, r0, #32
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	dd3b      	ble.n	800d188 <_dtoa_r+0x8b8>
 800d110:	9b07      	ldr	r3, [sp, #28]
 800d112:	f1c0 001c 	rsb	r0, r0, #28
 800d116:	4481      	add	r9, r0
 800d118:	4405      	add	r5, r0
 800d11a:	4403      	add	r3, r0
 800d11c:	9307      	str	r3, [sp, #28]
 800d11e:	f1b9 0f00 	cmp.w	r9, #0
 800d122:	dd05      	ble.n	800d130 <_dtoa_r+0x860>
 800d124:	4659      	mov	r1, fp
 800d126:	464a      	mov	r2, r9
 800d128:	4620      	mov	r0, r4
 800d12a:	f7fe fd93 	bl	800bc54 <__lshift>
 800d12e:	4683      	mov	fp, r0
 800d130:	9b07      	ldr	r3, [sp, #28]
 800d132:	2b00      	cmp	r3, #0
 800d134:	dd05      	ble.n	800d142 <_dtoa_r+0x872>
 800d136:	4631      	mov	r1, r6
 800d138:	461a      	mov	r2, r3
 800d13a:	4620      	mov	r0, r4
 800d13c:	f7fe fd8a 	bl	800bc54 <__lshift>
 800d140:	4606      	mov	r6, r0
 800d142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d144:	b353      	cbz	r3, 800d19c <_dtoa_r+0x8cc>
 800d146:	4631      	mov	r1, r6
 800d148:	4658      	mov	r0, fp
 800d14a:	f7fe fdd7 	bl	800bcfc <__mcmp>
 800d14e:	2800      	cmp	r0, #0
 800d150:	da24      	bge.n	800d19c <_dtoa_r+0x8cc>
 800d152:	2300      	movs	r3, #0
 800d154:	4659      	mov	r1, fp
 800d156:	220a      	movs	r2, #10
 800d158:	4620      	mov	r0, r4
 800d15a:	f7fe fbc8 	bl	800b8ee <__multadd>
 800d15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d160:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d164:	4683      	mov	fp, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 8144 	beq.w	800d3f4 <_dtoa_r+0xb24>
 800d16c:	2300      	movs	r3, #0
 800d16e:	4639      	mov	r1, r7
 800d170:	220a      	movs	r2, #10
 800d172:	4620      	mov	r0, r4
 800d174:	f7fe fbbb 	bl	800b8ee <__multadd>
 800d178:	9b04      	ldr	r3, [sp, #16]
 800d17a:	4607      	mov	r7, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dc4d      	bgt.n	800d21c <_dtoa_r+0x94c>
 800d180:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d182:	2b02      	cmp	r3, #2
 800d184:	dd4a      	ble.n	800d21c <_dtoa_r+0x94c>
 800d186:	e011      	b.n	800d1ac <_dtoa_r+0x8dc>
 800d188:	d0c9      	beq.n	800d11e <_dtoa_r+0x84e>
 800d18a:	9a07      	ldr	r2, [sp, #28]
 800d18c:	331c      	adds	r3, #28
 800d18e:	441a      	add	r2, r3
 800d190:	4499      	add	r9, r3
 800d192:	441d      	add	r5, r3
 800d194:	4613      	mov	r3, r2
 800d196:	e7c1      	b.n	800d11c <_dtoa_r+0x84c>
 800d198:	4603      	mov	r3, r0
 800d19a:	e7f6      	b.n	800d18a <_dtoa_r+0x8ba>
 800d19c:	f1b8 0f00 	cmp.w	r8, #0
 800d1a0:	dc36      	bgt.n	800d210 <_dtoa_r+0x940>
 800d1a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	dd33      	ble.n	800d210 <_dtoa_r+0x940>
 800d1a8:	f8cd 8010 	str.w	r8, [sp, #16]
 800d1ac:	9b04      	ldr	r3, [sp, #16]
 800d1ae:	b963      	cbnz	r3, 800d1ca <_dtoa_r+0x8fa>
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	2205      	movs	r2, #5
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7fe fb9a 	bl	800b8ee <__multadd>
 800d1ba:	4601      	mov	r1, r0
 800d1bc:	4606      	mov	r6, r0
 800d1be:	4658      	mov	r0, fp
 800d1c0:	f7fe fd9c 	bl	800bcfc <__mcmp>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	f73f add3 	bgt.w	800cd70 <_dtoa_r+0x4a0>
 800d1ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d1cc:	9d06      	ldr	r5, [sp, #24]
 800d1ce:	ea6f 0a03 	mvn.w	sl, r3
 800d1d2:	f04f 0900 	mov.w	r9, #0
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7fe fb71 	bl	800b8c0 <_Bfree>
 800d1de:	2f00      	cmp	r7, #0
 800d1e0:	f43f aebd 	beq.w	800cf5e <_dtoa_r+0x68e>
 800d1e4:	f1b9 0f00 	cmp.w	r9, #0
 800d1e8:	d005      	beq.n	800d1f6 <_dtoa_r+0x926>
 800d1ea:	45b9      	cmp	r9, r7
 800d1ec:	d003      	beq.n	800d1f6 <_dtoa_r+0x926>
 800d1ee:	4649      	mov	r1, r9
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f7fe fb65 	bl	800b8c0 <_Bfree>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f7fe fb61 	bl	800b8c0 <_Bfree>
 800d1fe:	e6ae      	b.n	800cf5e <_dtoa_r+0x68e>
 800d200:	2600      	movs	r6, #0
 800d202:	4637      	mov	r7, r6
 800d204:	e7e1      	b.n	800d1ca <_dtoa_r+0x8fa>
 800d206:	46ba      	mov	sl, r7
 800d208:	4637      	mov	r7, r6
 800d20a:	e5b1      	b.n	800cd70 <_dtoa_r+0x4a0>
 800d20c:	40240000 	.word	0x40240000
 800d210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d212:	f8cd 8010 	str.w	r8, [sp, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 80f3 	beq.w	800d402 <_dtoa_r+0xb32>
 800d21c:	2d00      	cmp	r5, #0
 800d21e:	dd05      	ble.n	800d22c <_dtoa_r+0x95c>
 800d220:	4639      	mov	r1, r7
 800d222:	462a      	mov	r2, r5
 800d224:	4620      	mov	r0, r4
 800d226:	f7fe fd15 	bl	800bc54 <__lshift>
 800d22a:	4607      	mov	r7, r0
 800d22c:	9b08      	ldr	r3, [sp, #32]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d04c      	beq.n	800d2cc <_dtoa_r+0x9fc>
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	4620      	mov	r0, r4
 800d236:	f7fe fb0f 	bl	800b858 <_Balloc>
 800d23a:	4605      	mov	r5, r0
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	f107 010c 	add.w	r1, r7, #12
 800d242:	3202      	adds	r2, #2
 800d244:	0092      	lsls	r2, r2, #2
 800d246:	300c      	adds	r0, #12
 800d248:	f7fe fafb 	bl	800b842 <memcpy>
 800d24c:	2201      	movs	r2, #1
 800d24e:	4629      	mov	r1, r5
 800d250:	4620      	mov	r0, r4
 800d252:	f7fe fcff 	bl	800bc54 <__lshift>
 800d256:	46b9      	mov	r9, r7
 800d258:	4607      	mov	r7, r0
 800d25a:	9b06      	ldr	r3, [sp, #24]
 800d25c:	9307      	str	r3, [sp, #28]
 800d25e:	9b02      	ldr	r3, [sp, #8]
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	9308      	str	r3, [sp, #32]
 800d266:	4631      	mov	r1, r6
 800d268:	4658      	mov	r0, fp
 800d26a:	f7ff faa2 	bl	800c7b2 <quorem>
 800d26e:	4649      	mov	r1, r9
 800d270:	4605      	mov	r5, r0
 800d272:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d276:	4658      	mov	r0, fp
 800d278:	f7fe fd40 	bl	800bcfc <__mcmp>
 800d27c:	463a      	mov	r2, r7
 800d27e:	9002      	str	r0, [sp, #8]
 800d280:	4631      	mov	r1, r6
 800d282:	4620      	mov	r0, r4
 800d284:	f7fe fd54 	bl	800bd30 <__mdiff>
 800d288:	68c3      	ldr	r3, [r0, #12]
 800d28a:	4602      	mov	r2, r0
 800d28c:	bb03      	cbnz	r3, 800d2d0 <_dtoa_r+0xa00>
 800d28e:	4601      	mov	r1, r0
 800d290:	9009      	str	r0, [sp, #36]	; 0x24
 800d292:	4658      	mov	r0, fp
 800d294:	f7fe fd32 	bl	800bcfc <__mcmp>
 800d298:	4603      	mov	r3, r0
 800d29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d29c:	4611      	mov	r1, r2
 800d29e:	4620      	mov	r0, r4
 800d2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a2:	f7fe fb0d 	bl	800b8c0 <_Bfree>
 800d2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a8:	b9a3      	cbnz	r3, 800d2d4 <_dtoa_r+0xa04>
 800d2aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d2ac:	b992      	cbnz	r2, 800d2d4 <_dtoa_r+0xa04>
 800d2ae:	9a08      	ldr	r2, [sp, #32]
 800d2b0:	b982      	cbnz	r2, 800d2d4 <_dtoa_r+0xa04>
 800d2b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d2b6:	d029      	beq.n	800d30c <_dtoa_r+0xa3c>
 800d2b8:	9b02      	ldr	r3, [sp, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dd01      	ble.n	800d2c2 <_dtoa_r+0x9f2>
 800d2be:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d2c2:	9b07      	ldr	r3, [sp, #28]
 800d2c4:	1c5d      	adds	r5, r3, #1
 800d2c6:	f883 8000 	strb.w	r8, [r3]
 800d2ca:	e784      	b.n	800d1d6 <_dtoa_r+0x906>
 800d2cc:	4638      	mov	r0, r7
 800d2ce:	e7c2      	b.n	800d256 <_dtoa_r+0x986>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e7e3      	b.n	800d29c <_dtoa_r+0x9cc>
 800d2d4:	9a02      	ldr	r2, [sp, #8]
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	db04      	blt.n	800d2e4 <_dtoa_r+0xa14>
 800d2da:	d123      	bne.n	800d324 <_dtoa_r+0xa54>
 800d2dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d2de:	bb0a      	cbnz	r2, 800d324 <_dtoa_r+0xa54>
 800d2e0:	9a08      	ldr	r2, [sp, #32]
 800d2e2:	b9fa      	cbnz	r2, 800d324 <_dtoa_r+0xa54>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	ddec      	ble.n	800d2c2 <_dtoa_r+0x9f2>
 800d2e8:	4659      	mov	r1, fp
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f7fe fcb1 	bl	800bc54 <__lshift>
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4683      	mov	fp, r0
 800d2f6:	f7fe fd01 	bl	800bcfc <__mcmp>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	dc03      	bgt.n	800d306 <_dtoa_r+0xa36>
 800d2fe:	d1e0      	bne.n	800d2c2 <_dtoa_r+0x9f2>
 800d300:	f018 0f01 	tst.w	r8, #1
 800d304:	d0dd      	beq.n	800d2c2 <_dtoa_r+0x9f2>
 800d306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d30a:	d1d8      	bne.n	800d2be <_dtoa_r+0x9ee>
 800d30c:	9b07      	ldr	r3, [sp, #28]
 800d30e:	9a07      	ldr	r2, [sp, #28]
 800d310:	1c5d      	adds	r5, r3, #1
 800d312:	2339      	movs	r3, #57	; 0x39
 800d314:	7013      	strb	r3, [r2, #0]
 800d316:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d31a:	1e6a      	subs	r2, r5, #1
 800d31c:	2b39      	cmp	r3, #57	; 0x39
 800d31e:	d04d      	beq.n	800d3bc <_dtoa_r+0xaec>
 800d320:	3301      	adds	r3, #1
 800d322:	e052      	b.n	800d3ca <_dtoa_r+0xafa>
 800d324:	9a07      	ldr	r2, [sp, #28]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f102 0501 	add.w	r5, r2, #1
 800d32c:	dd06      	ble.n	800d33c <_dtoa_r+0xa6c>
 800d32e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d332:	d0eb      	beq.n	800d30c <_dtoa_r+0xa3c>
 800d334:	f108 0801 	add.w	r8, r8, #1
 800d338:	9b07      	ldr	r3, [sp, #28]
 800d33a:	e7c4      	b.n	800d2c6 <_dtoa_r+0x9f6>
 800d33c:	9b06      	ldr	r3, [sp, #24]
 800d33e:	9a04      	ldr	r2, [sp, #16]
 800d340:	1aeb      	subs	r3, r5, r3
 800d342:	4293      	cmp	r3, r2
 800d344:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d348:	d021      	beq.n	800d38e <_dtoa_r+0xabe>
 800d34a:	4659      	mov	r1, fp
 800d34c:	2300      	movs	r3, #0
 800d34e:	220a      	movs	r2, #10
 800d350:	4620      	mov	r0, r4
 800d352:	f7fe facc 	bl	800b8ee <__multadd>
 800d356:	45b9      	cmp	r9, r7
 800d358:	4683      	mov	fp, r0
 800d35a:	f04f 0300 	mov.w	r3, #0
 800d35e:	f04f 020a 	mov.w	r2, #10
 800d362:	4649      	mov	r1, r9
 800d364:	4620      	mov	r0, r4
 800d366:	d105      	bne.n	800d374 <_dtoa_r+0xaa4>
 800d368:	f7fe fac1 	bl	800b8ee <__multadd>
 800d36c:	4681      	mov	r9, r0
 800d36e:	4607      	mov	r7, r0
 800d370:	9507      	str	r5, [sp, #28]
 800d372:	e778      	b.n	800d266 <_dtoa_r+0x996>
 800d374:	f7fe fabb 	bl	800b8ee <__multadd>
 800d378:	4639      	mov	r1, r7
 800d37a:	4681      	mov	r9, r0
 800d37c:	2300      	movs	r3, #0
 800d37e:	220a      	movs	r2, #10
 800d380:	4620      	mov	r0, r4
 800d382:	f7fe fab4 	bl	800b8ee <__multadd>
 800d386:	4607      	mov	r7, r0
 800d388:	e7f2      	b.n	800d370 <_dtoa_r+0xaa0>
 800d38a:	f04f 0900 	mov.w	r9, #0
 800d38e:	4659      	mov	r1, fp
 800d390:	2201      	movs	r2, #1
 800d392:	4620      	mov	r0, r4
 800d394:	f7fe fc5e 	bl	800bc54 <__lshift>
 800d398:	4631      	mov	r1, r6
 800d39a:	4683      	mov	fp, r0
 800d39c:	f7fe fcae 	bl	800bcfc <__mcmp>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	dcb8      	bgt.n	800d316 <_dtoa_r+0xa46>
 800d3a4:	d102      	bne.n	800d3ac <_dtoa_r+0xadc>
 800d3a6:	f018 0f01 	tst.w	r8, #1
 800d3aa:	d1b4      	bne.n	800d316 <_dtoa_r+0xa46>
 800d3ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3b0:	1e6a      	subs	r2, r5, #1
 800d3b2:	2b30      	cmp	r3, #48	; 0x30
 800d3b4:	f47f af0f 	bne.w	800d1d6 <_dtoa_r+0x906>
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	e7f7      	b.n	800d3ac <_dtoa_r+0xadc>
 800d3bc:	9b06      	ldr	r3, [sp, #24]
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d105      	bne.n	800d3ce <_dtoa_r+0xafe>
 800d3c2:	2331      	movs	r3, #49	; 0x31
 800d3c4:	9a06      	ldr	r2, [sp, #24]
 800d3c6:	f10a 0a01 	add.w	sl, sl, #1
 800d3ca:	7013      	strb	r3, [r2, #0]
 800d3cc:	e703      	b.n	800d1d6 <_dtoa_r+0x906>
 800d3ce:	4615      	mov	r5, r2
 800d3d0:	e7a1      	b.n	800d316 <_dtoa_r+0xa46>
 800d3d2:	4b17      	ldr	r3, [pc, #92]	; (800d430 <_dtoa_r+0xb60>)
 800d3d4:	f7ff bae1 	b.w	800c99a <_dtoa_r+0xca>
 800d3d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f47f aabb 	bne.w	800c956 <_dtoa_r+0x86>
 800d3e0:	4b14      	ldr	r3, [pc, #80]	; (800d434 <_dtoa_r+0xb64>)
 800d3e2:	f7ff bada 	b.w	800c99a <_dtoa_r+0xca>
 800d3e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	f77f ae3f 	ble.w	800d06c <_dtoa_r+0x79c>
 800d3ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3f0:	9308      	str	r3, [sp, #32]
 800d3f2:	e653      	b.n	800d09c <_dtoa_r+0x7cc>
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	dc03      	bgt.n	800d402 <_dtoa_r+0xb32>
 800d3fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	f73f aed5 	bgt.w	800d1ac <_dtoa_r+0x8dc>
 800d402:	9d06      	ldr	r5, [sp, #24]
 800d404:	4631      	mov	r1, r6
 800d406:	4658      	mov	r0, fp
 800d408:	f7ff f9d3 	bl	800c7b2 <quorem>
 800d40c:	9b06      	ldr	r3, [sp, #24]
 800d40e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d412:	f805 8b01 	strb.w	r8, [r5], #1
 800d416:	9a04      	ldr	r2, [sp, #16]
 800d418:	1aeb      	subs	r3, r5, r3
 800d41a:	429a      	cmp	r2, r3
 800d41c:	ddb5      	ble.n	800d38a <_dtoa_r+0xaba>
 800d41e:	4659      	mov	r1, fp
 800d420:	2300      	movs	r3, #0
 800d422:	220a      	movs	r2, #10
 800d424:	4620      	mov	r0, r4
 800d426:	f7fe fa62 	bl	800b8ee <__multadd>
 800d42a:	4683      	mov	fp, r0
 800d42c:	e7ea      	b.n	800d404 <_dtoa_r+0xb34>
 800d42e:	bf00      	nop
 800d430:	0800e385 	.word	0x0800e385
 800d434:	0800e378 	.word	0x0800e378

0800d438 <malloc>:
 800d438:	4b02      	ldr	r3, [pc, #8]	; (800d444 <malloc+0xc>)
 800d43a:	4601      	mov	r1, r0
 800d43c:	6818      	ldr	r0, [r3, #0]
 800d43e:	f7fe be2f 	b.w	800c0a0 <_malloc_r>
 800d442:	bf00      	nop
 800d444:	20000070 	.word	0x20000070

0800d448 <memchr>:
 800d448:	b510      	push	{r4, lr}
 800d44a:	b2c9      	uxtb	r1, r1
 800d44c:	4402      	add	r2, r0
 800d44e:	4290      	cmp	r0, r2
 800d450:	4603      	mov	r3, r0
 800d452:	d101      	bne.n	800d458 <memchr+0x10>
 800d454:	2300      	movs	r3, #0
 800d456:	e003      	b.n	800d460 <memchr+0x18>
 800d458:	781c      	ldrb	r4, [r3, #0]
 800d45a:	3001      	adds	r0, #1
 800d45c:	428c      	cmp	r4, r1
 800d45e:	d1f6      	bne.n	800d44e <memchr+0x6>
 800d460:	4618      	mov	r0, r3
 800d462:	bd10      	pop	{r4, pc}

0800d464 <memmove>:
 800d464:	4288      	cmp	r0, r1
 800d466:	b510      	push	{r4, lr}
 800d468:	eb01 0302 	add.w	r3, r1, r2
 800d46c:	d807      	bhi.n	800d47e <memmove+0x1a>
 800d46e:	1e42      	subs	r2, r0, #1
 800d470:	4299      	cmp	r1, r3
 800d472:	d00a      	beq.n	800d48a <memmove+0x26>
 800d474:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d478:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d47c:	e7f8      	b.n	800d470 <memmove+0xc>
 800d47e:	4283      	cmp	r3, r0
 800d480:	d9f5      	bls.n	800d46e <memmove+0xa>
 800d482:	1881      	adds	r1, r0, r2
 800d484:	1ad2      	subs	r2, r2, r3
 800d486:	42d3      	cmn	r3, r2
 800d488:	d100      	bne.n	800d48c <memmove+0x28>
 800d48a:	bd10      	pop	{r4, pc}
 800d48c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d490:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d494:	e7f7      	b.n	800d486 <memmove+0x22>

0800d496 <__malloc_lock>:
 800d496:	4770      	bx	lr

0800d498 <__malloc_unlock>:
 800d498:	4770      	bx	lr
	...

0800d49c <_free_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4605      	mov	r5, r0
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	d043      	beq.n	800d52c <_free_r+0x90>
 800d4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a8:	1f0c      	subs	r4, r1, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bfb8      	it	lt
 800d4ae:	18e4      	addlt	r4, r4, r3
 800d4b0:	f7ff fff1 	bl	800d496 <__malloc_lock>
 800d4b4:	4a1e      	ldr	r2, [pc, #120]	; (800d530 <_free_r+0x94>)
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	b933      	cbnz	r3, 800d4ca <_free_r+0x2e>
 800d4bc:	6063      	str	r3, [r4, #4]
 800d4be:	6014      	str	r4, [r2, #0]
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c6:	f7ff bfe7 	b.w	800d498 <__malloc_unlock>
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	d90b      	bls.n	800d4e6 <_free_r+0x4a>
 800d4ce:	6821      	ldr	r1, [r4, #0]
 800d4d0:	1862      	adds	r2, r4, r1
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	bf01      	itttt	eq
 800d4d6:	681a      	ldreq	r2, [r3, #0]
 800d4d8:	685b      	ldreq	r3, [r3, #4]
 800d4da:	1852      	addeq	r2, r2, r1
 800d4dc:	6022      	streq	r2, [r4, #0]
 800d4de:	6063      	str	r3, [r4, #4]
 800d4e0:	6004      	str	r4, [r0, #0]
 800d4e2:	e7ed      	b.n	800d4c0 <_free_r+0x24>
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	b10a      	cbz	r2, 800d4ee <_free_r+0x52>
 800d4ea:	42a2      	cmp	r2, r4
 800d4ec:	d9fa      	bls.n	800d4e4 <_free_r+0x48>
 800d4ee:	6819      	ldr	r1, [r3, #0]
 800d4f0:	1858      	adds	r0, r3, r1
 800d4f2:	42a0      	cmp	r0, r4
 800d4f4:	d10b      	bne.n	800d50e <_free_r+0x72>
 800d4f6:	6820      	ldr	r0, [r4, #0]
 800d4f8:	4401      	add	r1, r0
 800d4fa:	1858      	adds	r0, r3, r1
 800d4fc:	4282      	cmp	r2, r0
 800d4fe:	6019      	str	r1, [r3, #0]
 800d500:	d1de      	bne.n	800d4c0 <_free_r+0x24>
 800d502:	6810      	ldr	r0, [r2, #0]
 800d504:	6852      	ldr	r2, [r2, #4]
 800d506:	4401      	add	r1, r0
 800d508:	6019      	str	r1, [r3, #0]
 800d50a:	605a      	str	r2, [r3, #4]
 800d50c:	e7d8      	b.n	800d4c0 <_free_r+0x24>
 800d50e:	d902      	bls.n	800d516 <_free_r+0x7a>
 800d510:	230c      	movs	r3, #12
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	e7d4      	b.n	800d4c0 <_free_r+0x24>
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	1821      	adds	r1, r4, r0
 800d51a:	428a      	cmp	r2, r1
 800d51c:	bf01      	itttt	eq
 800d51e:	6811      	ldreq	r1, [r2, #0]
 800d520:	6852      	ldreq	r2, [r2, #4]
 800d522:	1809      	addeq	r1, r1, r0
 800d524:	6021      	streq	r1, [r4, #0]
 800d526:	6062      	str	r2, [r4, #4]
 800d528:	605c      	str	r4, [r3, #4]
 800d52a:	e7c9      	b.n	800d4c0 <_free_r+0x24>
 800d52c:	bd38      	pop	{r3, r4, r5, pc}
 800d52e:	bf00      	nop
 800d530:	200006bc 	.word	0x200006bc

0800d534 <_malloc_usable_size_r>:
 800d534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d538:	1f18      	subs	r0, r3, #4
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	bfbc      	itt	lt
 800d53e:	580b      	ldrlt	r3, [r1, r0]
 800d540:	18c0      	addlt	r0, r0, r3
 800d542:	4770      	bx	lr

0800d544 <trunc>:
 800d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d546:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d54a:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800d54e:	2a13      	cmp	r2, #19
 800d550:	4603      	mov	r3, r0
 800d552:	460c      	mov	r4, r1
 800d554:	dc10      	bgt.n	800d578 <trunc+0x34>
 800d556:	2a00      	cmp	r2, #0
 800d558:	bfb3      	iteet	lt
 800d55a:	2000      	movlt	r0, #0
 800d55c:	2000      	movge	r0, #0
 800d55e:	4b10      	ldrge	r3, [pc, #64]	; (800d5a0 <trunc+0x5c>)
 800d560:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800d564:	bfa4      	itt	ge
 800d566:	fa43 f202 	asrge.w	r2, r3, r2
 800d56a:	ea24 0102 	bicge.w	r1, r4, r2
 800d56e:	4603      	mov	r3, r0
 800d570:	460c      	mov	r4, r1
 800d572:	4618      	mov	r0, r3
 800d574:	4621      	mov	r1, r4
 800d576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d578:	2a33      	cmp	r2, #51	; 0x33
 800d57a:	dd07      	ble.n	800d58c <trunc+0x48>
 800d57c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d580:	d1f7      	bne.n	800d572 <trunc+0x2e>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	f7f2 fdf1 	bl	800016c <__adddf3>
 800d58a:	e7f0      	b.n	800d56e <trunc+0x2a>
 800d58c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d590:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800d594:	fa22 f505 	lsr.w	r5, r2, r5
 800d598:	ea20 0005 	bic.w	r0, r0, r5
 800d59c:	e7e7      	b.n	800d56e <trunc+0x2a>
 800d59e:	bf00      	nop
 800d5a0:	000fffff 	.word	0x000fffff

0800d5a4 <_init>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	bf00      	nop
 800d5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5aa:	bc08      	pop	{r3}
 800d5ac:	469e      	mov	lr, r3
 800d5ae:	4770      	bx	lr

0800d5b0 <_fini>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	bf00      	nop
 800d5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5b6:	bc08      	pop	{r3}
 800d5b8:	469e      	mov	lr, r3
 800d5ba:	4770      	bx	lr
