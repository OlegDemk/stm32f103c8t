
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e110  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0800e220  0800e220  0001e220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0d0  0800f0d0  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0d0  0800f0d0  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0d0  0800f0d0  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0d0  0800f0d0  0001f0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0d4  0800f0d4  0001f0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800f0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db0  20000240  0800f318  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff0  0800f318  00020ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0c1  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036d6  00000000  00000000  0003b32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001488  00000000  00000000  0003ea00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0003fe88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001adcf  00000000  00000000  00041198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b13  00000000  00000000  0005bf67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908f1  00000000  00000000  00070a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010136b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065bc  00000000  00000000  001013e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e208 	.word	0x0800e208

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800e208 	.word	0x0800e208

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <touch_send>:
}dev_info;

// ----------------------------------------------------------------------------
// Send data in fingerprint module
int touch_send(uint8_t* packet, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	//HAL_UART_Transmit(&huart1,packet,len,1000);
	int rtn;
	rtn = HAL_UART_Transmit(&huart2, packet, (uint16_t)len, 10000);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <touch_send+0x34>)
 8001146:	f009 f845 	bl	800a1d4 <HAL_UART_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
	if(rtn != HAL_OK)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <touch_send+0x28>
	{
		// Error connection
		return 9;
 8001154:	2309      	movs	r3, #9
 8001156:	e000      	b.n	800115a <touch_send+0x2a>
	}
	return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000fa8 	.word	0x20000fa8

08001168 <touch_rcv>:
// ----------------------------------------------------------------------------
// Receive data in fingerprint module
int touch_rcv(uint8_t* packet, int len,int timeout)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	int rtn;
	HAL_UART_Receive(&huart2, packet, len, timeout);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <touch_rcv+0x30>)
 800117e:	f009 f8bb 	bl	800a2f8 <HAL_UART_Receive>
	if(rtn != HAL_OK)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <touch_rcv+0x24>
	{
		// Error connection
		return 9;
 8001188:	2309      	movs	r3, #9
 800118a:	e000      	b.n	800118e <touch_rcv+0x26>
	}
	return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000fa8 	.word	0x20000fa8

0800119c <get_checksum>:
// ----------------------------------------------------------------------------
uint16_t get_checksum(uint8_t *package, int len)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    int i = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
    uint16_t checksum = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	817b      	strh	r3, [r7, #10]
    for (; i < len - 2; i++)
 80011ae:	e00a      	b.n	80011c6 <get_checksum+0x2a>
    {
        checksum += *(package + i);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	897b      	ldrh	r3, [r7, #10]
 80011bc:	4413      	add	r3, r2
 80011be:	817b      	strh	r3, [r7, #10]
    for (; i < len - 2; i++)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3b02      	subs	r3, #2
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbef      	blt.n	80011b0 <get_checksum+0x14>
    }
    return checksum;
 80011d0:	897b      	ldrh	r3, [r7, #10]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <create_command_package>:
// ----------------------------------------------------------------------------
void create_command_package(uint32_t param, uint16_t command,uint8_t* package)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	460b      	mov	r3, r1
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	817b      	strh	r3, [r7, #10]
    uint16_t checksum;
    package[0] = 0x55;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2255      	movs	r2, #85	; 0x55
 80011ee:	701a      	strb	r2, [r3, #0]
    package[1] = 0xAA;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	22aa      	movs	r2, #170	; 0xaa
 80011f6:	701a      	strb	r2, [r3, #0]
    package[2] = 0x01;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3302      	adds	r3, #2
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
    package[3] = 0x00;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3303      	adds	r3, #3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
    package[4] = param & 0xFF;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    package[5] = (param >> 8) & 0xFF;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	0a1a      	lsrs	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3305      	adds	r3, #5
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    package[6] = (param >> 16) & 0xFF;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	0c1a      	lsrs	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3306      	adds	r3, #6
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
    package[7] = (param >> 24) & 0xFF;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	0e1a      	lsrs	r2, r3, #24
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3307      	adds	r3, #7
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
    package[8] = command & 0xFF;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3308      	adds	r3, #8
 800123a:	897a      	ldrh	r2, [r7, #10]
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
    package[9] = (command >> 8) & 0xFF;
 8001240:	897b      	ldrh	r3, [r7, #10]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3309      	adds	r3, #9
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]
    checksum = get_checksum(package, COMMAND_PACKET_LEN);
 800124e:	210c      	movs	r1, #12
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffa3 	bl	800119c <get_checksum>
 8001256:	4603      	mov	r3, r0
 8001258:	82fb      	strh	r3, [r7, #22]
    package[10] = (checksum)&0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	330a      	adds	r3, #10
 800125e:	8afa      	ldrh	r2, [r7, #22]
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    package[11] = (checksum >> 8) & 0xFF;
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	330b      	adds	r3, #11
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <rcv_ack>:
// ----------------------------------------------------------------------------
// Check answer from fingerprint module
int rcv_ack(uint8_t* packet, int len,int timeout)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
	uint16_t calc_checksum;
	uint16_t recv_checksum;
	touch_rcv(packet,len,timeout);
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff6c 	bl	8001168 <touch_rcv>
	recv_checksum = packet[len - 2]  | packet[len - 1] << 8;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3b02      	subs	r3, #2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b21a      	sxth	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3b01      	subs	r3, #1
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	440b      	add	r3, r1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
	calc_checksum = get_checksum(packet,len);
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff72 	bl	800119c <get_checksum>
 80012b8:	4603      	mov	r3, r0
 80012ba:	82bb      	strh	r3, [r7, #20]
	if(recv_checksum != calc_checksum){
 80012bc:	8afa      	ldrh	r2, [r7, #22]
 80012be:	8abb      	ldrh	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <rcv_ack+0x4e>
		return 9;
 80012c4:	2309      	movs	r3, #9
 80012c6:	e007      	b.n	80012d8 <rcv_ack+0x5e>
	}else if(packet[8] != ACK){
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3308      	adds	r3, #8
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b30      	cmp	r3, #48	; 0x30
 80012d0:	d001      	beq.n	80012d6 <rcv_ack+0x5c>
		return 9;
 80012d2:	2309      	movs	r3, #9
 80012d4:	e000      	b.n	80012d8 <rcv_ack+0x5e>
	}
	return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <touch_bakcklight>:
/*
 * Turn off LED 1
 * Turn ON LED 1
 */
void touch_bakcklight(int value)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	create_command_package(value, CMOSLED_CMD, command_packet);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <touch_bakcklight+0x34>)
 80012ec:	2112      	movs	r1, #18
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff74 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80012f4:	210c      	movs	r1, #12
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <touch_bakcklight+0x34>)
 80012f8:	f7ff ff1a 	bl	8001130 <touch_send>

	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 80012fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001300:	210c      	movs	r1, #12
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <touch_bakcklight+0x38>)
 8001304:	f7ff ffb9 	bl	800127a <rcv_ack>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
		if(value != 0){
			//printf("Touch: Backlight ON");
		}else{
			//printf("Touch: Backlight OFF");
		}
}
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000025c 	.word	0x2000025c
 8001318:	20000268 	.word	0x20000268

0800131c <touch_is_press_finger>:
// ----------------------------------------------------------------------------
// LED must be turn on for finger detection detection
int touch_is_press_finger(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	create_command_package(1, ISPRESSFINGER_CMD, command_packet);
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <touch_is_press_finger+0x58>)
 8001322:	2126      	movs	r1, #38	; 0x26
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff ff59 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800132a:	210c      	movs	r1, #12
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <touch_is_press_finger+0x58>)
 800132e:	f7ff feff 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 8001332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001336:	210c      	movs	r1, #12
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <touch_is_press_finger+0x5c>)
 800133a:	f7ff ff9e 	bl	800127a <rcv_ack>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <touch_is_press_finger+0x2e>
		//Error Handling
		return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001348:	e012      	b.n	8001370 <touch_is_press_finger+0x54>
	}
	if(response_packet[4] == 0 && response_packet[5] == 0 && response_packet[6] == 0 && response_packet[7] == 0){
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <touch_is_press_finger+0x5c>)
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <touch_is_press_finger+0x52>
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <touch_is_press_finger+0x5c>)
 8001354:	795b      	ldrb	r3, [r3, #5]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <touch_is_press_finger+0x52>
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <touch_is_press_finger+0x5c>)
 800135c:	799b      	ldrb	r3, [r3, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <touch_is_press_finger+0x52>
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <touch_is_press_finger+0x5c>)
 8001364:	79db      	ldrb	r3, [r3, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <touch_is_press_finger+0x52>
		//printf("Touch: Finger Press");
		return 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <touch_is_press_finger+0x54>
	}
	//printf("Touch: No Finger Press");
	return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000025c 	.word	0x2000025c
 8001378:	20000268 	.word	0x20000268

0800137c <touch_delete_all_fingerprints>:
// ----------------------------------------------------------------------------
int touch_delete_all_fingerprints(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	create_command_package(0, DELETEALL, command_packet);
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <touch_delete_all_fingerprints+0x30>)
 8001382:	2141      	movs	r1, #65	; 0x41
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff29 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800138a:	210c      	movs	r1, #12
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <touch_delete_all_fingerprints+0x30>)
 800138e:	f7ff fecf 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 8001392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001396:	210c      	movs	r1, #12
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <touch_delete_all_fingerprints+0x34>)
 800139a:	f7ff ff6e 	bl	800127a <rcv_ack>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <touch_delete_all_fingerprints+0x2c>
		//Error Handling
		return 9;
 80013a4:	2309      	movs	r3, #9
 80013a6:	e7ff      	b.n	80013a8 <touch_delete_all_fingerprints+0x2c>
	}
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000025c 	.word	0x2000025c
 80013b0:	20000268 	.word	0x20000268

080013b4 <touch_enroll_start>:
// ----------------------------------------------------------------------------
void touch_enroll_start(int id){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	//if poss > 200 no save mode
	if(id >= 200){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2bc7      	cmp	r3, #199	; 0xc7
 80013c0:	dd02      	ble.n	80013c8 <touch_enroll_start+0x14>
		id = -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c6:	607b      	str	r3, [r7, #4]
	}
	create_command_package(id, ENROLLSTART_CMD, command_packet);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <touch_enroll_start+0x40>)
 80013cc:	2122      	movs	r1, #34	; 0x22
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff04 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80013d4:	210c      	movs	r1, #12
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <touch_enroll_start+0x40>)
 80013d8:	f7ff feaa 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 80013dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e0:	210c      	movs	r1, #12
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <touch_enroll_start+0x44>)
 80013e4:	f7ff ff49 	bl	800127a <rcv_ack>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
		//Error Handling
		return;
	}
}
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000025c 	.word	0x2000025c
 80013f8:	20000268 	.word	0x20000268

080013fc <touch_capture_finger>:
// ----------------------------------------------------------------------------
int touch_capture_finger(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, CAPTUREFINGERPRINT_CMD, command_packet);
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <touch_capture_finger+0x34>)
 8001402:	2160      	movs	r1, #96	; 0x60
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fee9 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800140a:	210c      	movs	r1, #12
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <touch_capture_finger+0x34>)
 800140e:	f7ff fe8f 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
 8001412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001416:	210c      	movs	r1, #12
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <touch_capture_finger+0x38>)
 800141a:	f7ff ff2e 	bl	800127a <rcv_ack>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <touch_capture_finger+0x2c>
	{
		//Error Handling
		return 9;
 8001424:	2309      	movs	r3, #9
 8001426:	e000      	b.n	800142a <touch_capture_finger+0x2e>
	}
	return 1;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000025c 	.word	0x2000025c
 8001434:	20000268 	.word	0x20000268

08001438 <touch_enroll_1>:
// ----------------------------------------------------------------------------
void touch_enroll_1(){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL1_CMD, command_packet);
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <touch_enroll_1+0x28>)
 800143e:	2123      	movs	r1, #35	; 0x23
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff fecb 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8001446:	210c      	movs	r1, #12
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <touch_enroll_1+0x28>)
 800144a:	f7ff fe71 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 800144e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001452:	210c      	movs	r1, #12
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <touch_enroll_1+0x2c>)
 8001456:	f7ff ff10 	bl	800127a <rcv_ack>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
		//Error Handling
		return;
	}
}
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000025c 	.word	0x2000025c
 8001464:	20000268 	.word	0x20000268

08001468 <touch_enroll_2>:
// ----------------------------------------------------------------------------
void touch_enroll_2(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL2_CMD, command_packet);
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <touch_enroll_2+0x28>)
 800146e:	2124      	movs	r1, #36	; 0x24
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff feb3 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 8001476:	210c      	movs	r1, #12
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <touch_enroll_2+0x28>)
 800147a:	f7ff fe59 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 800147e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001482:	210c      	movs	r1, #12
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <touch_enroll_2+0x2c>)
 8001486:	f7ff fef8 	bl	800127a <rcv_ack>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
		//Error Handling
		return;
	}
}
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000025c 	.word	0x2000025c
 8001494:	20000268 	.word	0x20000268

08001498 <touch_enroll_3>:
// ----------------------------------------------------------------------------
//if no save mode extra data would be sent
void touch_enroll_3(int no_save_mode){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	uint8_t* extra_data;
	//Non zero argument to capture best image posible
	create_command_package(1, ENROLL3_CMD, command_packet);
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <touch_enroll_3+0x5c>)
 80014a2:	2125      	movs	r1, #37	; 0x25
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fe99 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 80014aa:	210c      	movs	r1, #12
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <touch_enroll_3+0x5c>)
 80014ae:	f7ff fe3f 	bl	8001130 <touch_send>
	if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK){
 80014b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b6:	210c      	movs	r1, #12
 80014b8:	480f      	ldr	r0, [pc, #60]	; (80014f8 <touch_enroll_3+0x60>)
 80014ba:	f7ff fede 	bl	800127a <rcv_ack>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <touch_enroll_3+0x50>
		//Error Handling
		return;
	}
	if(!no_save_mode){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d010      	beq.n	80014ec <touch_enroll_3+0x54>
		return;
	}
	//TODO: Delete Magic Number
	extra_data = (uint8_t*)malloc(498);
 80014ca:	f44f 70f9 	mov.w	r0, #498	; 0x1f2
 80014ce:	f009 fc35 	bl	800ad3c <malloc>
 80014d2:	4603      	mov	r3, r0
 80014d4:	60fb      	str	r3, [r7, #12]
	//TODO: Calc real accurate timeout
	touch_rcv(extra_data,498,10000);
 80014d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80014da:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fe42 	bl	8001168 <touch_rcv>
	//TODO: Info handling
	if(extra_data[1]){
		//printf("s");
	}
	return;
 80014e4:	bf00      	nop
 80014e6:	e002      	b.n	80014ee <touch_enroll_3+0x56>
		return;
 80014e8:	bf00      	nop
 80014ea:	e000      	b.n	80014ee <touch_enroll_3+0x56>
		return;
 80014ec:	bf00      	nop
}
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000025c 	.word	0x2000025c
 80014f8:	20000268 	.word	0x20000268

080014fc <touch_open>:
// ----------------------------------------------------------------------------
void touch_open(int verbose){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	dev_info* extra_info =  (dev_info*)malloc(sizeof(dev_info));
 8001504:	201e      	movs	r0, #30
 8001506:	f009 fc19 	bl	800ad3c <malloc>
 800150a:	4603      	mov	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]
	if(!verbose){
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d115      	bne.n	8001540 <touch_open+0x44>
		create_command_package(0,1,command_packet);
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <touch_open+0x84>)
 8001516:	2101      	movs	r1, #1
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fe5f 	bl	80011dc <create_command_package>
		touch_send(command_packet,COMMAND_PACKET_LEN);
 800151e:	210c      	movs	r1, #12
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <touch_open+0x84>)
 8001522:	f7ff fe05 	bl	8001130 <touch_send>
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
 8001526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800152a:	210c      	movs	r1, #12
 800152c:	4815      	ldr	r0, [pc, #84]	; (8001584 <touch_open+0x88>)
 800152e:	f7ff fea4 	bl	800127a <rcv_ack>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01f      	beq.n	8001578 <touch_open+0x7c>
		{
			//Protocolo de errores
			free(extra_info);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f009 fc07 	bl	800ad4c <free>
			return;
 800153e:	e01b      	b.n	8001578 <touch_open+0x7c>
		}
	}else{
		create_command_package(0,1,command_packet);
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <touch_open+0x84>)
 8001542:	2101      	movs	r1, #1
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fe49 	bl	80011dc <create_command_package>
		touch_send(command_packet,COMMAND_PACKET_LEN);
 800154a:	210c      	movs	r1, #12
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <touch_open+0x84>)
 800154e:	f7ff fdef 	bl	8001130 <touch_send>
		if(rcv_ack(response_packet,REPONSE_PACKET_LEN,1000) != HAL_OK)
 8001552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001556:	210c      	movs	r1, #12
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <touch_open+0x88>)
 800155a:	f7ff fe8e 	bl	800127a <rcv_ack>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <touch_open+0x70>
		{
			//Protocolo de errores
			free(extra_info);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f009 fbf1 	bl	800ad4c <free>
			return;
 800156a:	e005      	b.n	8001578 <touch_open+0x7c>
		}
		touch_rcv((uint8_t*)extra_info,sizeof(dev_info),2000);
 800156c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001570:	211e      	movs	r1, #30
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff fdf8 	bl	8001168 <touch_rcv>
	}
}
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000025c 	.word	0x2000025c
 8001584:	20000268 	.word	0x20000268

08001588 <identify>:
/*
 * return ID, if found.
 * return 0, if no matches.
 */
int identify(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
	// 1. Finger is presed?
	int touch_is_press_finger_status = touch_is_press_finger();
 800158e:	f7ff fec5 	bl	800131c <touch_is_press_finger>
 8001592:	60f8      	str	r0, [r7, #12]
	if(touch_is_press_finger_status == 1)        // Work OK
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d127      	bne.n	80015ea <identify+0x62>
	{
		// 2. Capture finger
		int touch_capture_finger_status = touch_capture_finger();
 800159a:	f7ff ff2f 	bl	80013fc <touch_capture_finger>
 800159e:	60b8      	str	r0, [r7, #8]
		if(touch_capture_finger_status == 1)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d121      	bne.n	80015ea <identify+0x62>
		{
			// 3
			int ack_reponse_code;
			create_command_package(0, IDENTIFY, command_packet);
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <identify+0x6c>)
 80015a8:	2151      	movs	r1, #81	; 0x51
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fe16 	bl	80011dc <create_command_package>
			touch_send(command_packet,COMMAND_PACKET_LEN);
 80015b0:	210c      	movs	r1, #12
 80015b2:	4810      	ldr	r0, [pc, #64]	; (80015f4 <identify+0x6c>)
 80015b4:	f7ff fdbc 	bl	8001130 <touch_send>
			ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
 80015b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015bc:	210c      	movs	r1, #12
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <identify+0x70>)
 80015c0:	f7ff fe5b 	bl	800127a <rcv_ack>
 80015c4:	6078      	str	r0, [r7, #4]

			int ID = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
			switch(ack_reponse_code)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <identify+0x4e>
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d005      	beq.n	80015e0 <identify+0x58>
 80015d4:	e006      	b.n	80015e4 <identify+0x5c>
			{
					case HAL_OK:
						ID = response_packet[4];
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <identify+0x70>)
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	603b      	str	r3, [r7, #0]
						// sometimes fingerprint module can return '9' if touch unknown finger.
//						if(ID ==  9)
//						{
//							int l = 9999;
//						}
						return ID;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	e004      	b.n	80015ea <identify+0x62>
					case 9:
						return 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e002      	b.n	80015ea <identify+0x62>
					default:
						return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e8:	e7ff      	b.n	80015ea <identify+0x62>
			}
		}
	}
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000025c 	.word	0x2000025c
 80015f8:	20000268 	.word	0x20000268

080015fc <my_wait_for_finger>:
}

// ----------------------------------------------------------------------------
// MY Entoles functions
// ----------------------------------------------------------------------------
void my_wait_for_finger() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af02      	add	r7, sp, #8
	while (touch_is_press_finger() == 0) {
 8001602:	e008      	b.n	8001616 <my_wait_for_finger+0x1a>
		HAL_Delay(100);
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	f004 fc31 	bl	8005e6c <HAL_Delay>
		print_text_on_OLED(0, 4, true, "Put finger...");
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <my_wait_for_finger+0x3c>)
 800160c:	2201      	movs	r2, #1
 800160e:	2104      	movs	r1, #4
 8001610:	2000      	movs	r0, #0
 8001612:	f003 fdf5 	bl	8005200 <print_text_on_OLED>
	while (touch_is_press_finger() == 0) {
 8001616:	f7ff fe81 	bl	800131c <touch_is_press_finger>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f1      	beq.n	8001604 <my_wait_for_finger+0x8>
	}
	claen_oled_lines(false, false, false, true, false);
 8001620:	2300      	movs	r3, #0
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2000      	movs	r0, #0
 800162c:	f003 fd72 	bl	8005114 <claen_oled_lines>
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0800e220 	.word	0x0800e220

0800163c <my_wait_for_finger_release>:
// ----------------------------------------------------------------------------
void my_wait_for_finger_release() {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
	while (touch_is_press_finger() == 1) {
 8001642:	e008      	b.n	8001656 <my_wait_for_finger_release+0x1a>
		HAL_Delay(100);
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f004 fc11 	bl	8005e6c <HAL_Delay>
		print_text_on_OLED(0, 4, true, "Release finger...");
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <my_wait_for_finger_release+0x3c>)
 800164c:	2201      	movs	r2, #1
 800164e:	2104      	movs	r1, #4
 8001650:	2000      	movs	r0, #0
 8001652:	f003 fdd5 	bl	8005200 <print_text_on_OLED>
	while (touch_is_press_finger() == 1) {
 8001656:	f7ff fe61 	bl	800131c <touch_is_press_finger>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d0f1      	beq.n	8001644 <my_wait_for_finger_release+0x8>
	}
	claen_oled_lines(false, false, false, true, false);
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f003 fd52 	bl	8005114 <claen_oled_lines>
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	0800e230 	.word	0x0800e230

0800167c <my_identification_enroll_user>:
void my_identification_enroll_user(int id_set)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
	print_text_on_OLED(0, 3, true, "Enrolling ...");
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <my_identification_enroll_user+0xc0>)
 8001686:	2201      	movs	r2, #1
 8001688:	2103      	movs	r1, #3
 800168a:	2000      	movs	r0, #0
 800168c:	f003 fdb8 	bl	8005200 <print_text_on_OLED>

	touch_enroll_start(id_set);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe8f 	bl	80013b4 <touch_enroll_start>
	my_wait_for_finger();
 8001696:	f7ff ffb1 	bl	80015fc <my_wait_for_finger>
	touch_capture_finger();
 800169a:	f7ff feaf 	bl	80013fc <touch_capture_finger>
	touch_enroll_1();
 800169e:	f7ff fecb 	bl	8001438 <touch_enroll_1>
	my_wait_for_finger_release();			// Забрати палець
 80016a2:	f7ff ffcb 	bl	800163c <my_wait_for_finger_release>
	my_wait_for_finger();
 80016a6:	f7ff ffa9 	bl	80015fc <my_wait_for_finger>
	touch_capture_finger();
 80016aa:	f7ff fea7 	bl	80013fc <touch_capture_finger>
	touch_enroll_2();
 80016ae:	f7ff fedb 	bl	8001468 <touch_enroll_2>
	my_wait_for_finger_release();			// Забрати палець
 80016b2:	f7ff ffc3 	bl	800163c <my_wait_for_finger_release>
	my_wait_for_finger();
 80016b6:	f7ff ffa1 	bl	80015fc <my_wait_for_finger>
	touch_capture_finger();
 80016ba:	f7ff fe9f 	bl	80013fc <touch_capture_finger>
	touch_enroll_3(0);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff feea 	bl	8001498 <touch_enroll_3>
	my_wait_for_finger_release();			// Забрати палець
 80016c4:	f7ff ffba 	bl	800163c <my_wait_for_finger_release>

	touch_check_enrolled(id_set);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f83d 	bl	8001748 <touch_check_enrolled>

	claen_oled_lines(false, false, true, true, false);
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	2201      	movs	r2, #1
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f003 fd1b 	bl	8005114 <claen_oled_lines>

	if(touch_check_enrolled(id_set) == 1 )
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f832 	bl	8001748 <touch_check_enrolled>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d112      	bne.n	8001710 <my_identification_enroll_user+0x94>
	{
		print_text_on_OLED(0, 3, true, "Enrolled OK");
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <my_identification_enroll_user+0xc4>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	2103      	movs	r1, #3
 80016f0:	2000      	movs	r0, #0
 80016f2:	f003 fd85 	bl	8005200 <print_text_on_OLED>
		HAL_Delay(2000);
 80016f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016fa:	f004 fbb7 	bl	8005e6c <HAL_Delay>
		claen_oled_lines(false, false, true, true, false);
 80016fe:	2300      	movs	r3, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	2201      	movs	r2, #1
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f003 fd03 	bl	8005114 <claen_oled_lines>
		// PROBLEM tru second time, or EXIT from where
		print_text_on_OLED(0, 3, true, "Enrolled ERROR");
		HAL_Delay(2000);
		claen_oled_lines(false, false, true, true, false);
	}
}
 800170e:	e011      	b.n	8001734 <my_identification_enroll_user+0xb8>
		print_text_on_OLED(0, 3, true, "Enrolled ERROR");
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <my_identification_enroll_user+0xc8>)
 8001712:	2201      	movs	r2, #1
 8001714:	2103      	movs	r1, #3
 8001716:	2000      	movs	r0, #0
 8001718:	f003 fd72 	bl	8005200 <print_text_on_OLED>
		HAL_Delay(2000);
 800171c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001720:	f004 fba4 	bl	8005e6c <HAL_Delay>
		claen_oled_lines(false, false, true, true, false);
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2301      	movs	r3, #1
 800172a:	2201      	movs	r2, #1
 800172c:	2100      	movs	r1, #0
 800172e:	2000      	movs	r0, #0
 8001730:	f003 fcf0 	bl	8005114 <claen_oled_lines>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800e244 	.word	0x0800e244
 8001740:	0800e254 	.word	0x0800e254
 8001744:	0800e260 	.word	0x0800e260

08001748 <touch_check_enrolled>:
// ----------------------------------------------------------------------------
/* Check if ID used or no.
 * return HAL_OK if used.
 * return HAL_OK if not used.
 */
int touch_check_enrolled(int id){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	int ack_reponse_code;
	//Non zero argument to capture best image posible
	create_command_package(id, CHECKENROLLMENT_CMD, command_packet);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <touch_check_enrolled+0x4c>)
 8001754:	2121      	movs	r1, #33	; 0x21
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fd40 	bl	80011dc <create_command_package>
	touch_send(command_packet,COMMAND_PACKET_LEN);
 800175c:	210c      	movs	r1, #12
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <touch_check_enrolled+0x4c>)
 8001760:	f7ff fce6 	bl	8001130 <touch_send>
	ack_reponse_code = rcv_ack(response_packet,REPONSE_PACKET_LEN,1000);
 8001764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001768:	210c      	movs	r1, #12
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <touch_check_enrolled+0x50>)
 800176c:	f7ff fd85 	bl	800127a <rcv_ack>
 8001770:	60f8      	str	r0, [r7, #12]
	switch(ack_reponse_code){
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <touch_check_enrolled+0x36>
 8001778:	2b09      	cmp	r3, #9
 800177a:	d002      	beq.n	8001782 <touch_check_enrolled+0x3a>
 800177c:	e003      	b.n	8001786 <touch_check_enrolled+0x3e>
		case 0:
			return 1;
 800177e:	2301      	movs	r3, #1
 8001780:	e003      	b.n	800178a <touch_check_enrolled+0x42>
		case 9:       // Error
			return 0;
 8001782:	2300      	movs	r3, #0
 8001784:	e001      	b.n	800178a <touch_check_enrolled+0x42>
		default:
			return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000025c 	.word	0x2000025c
 8001798:	20000268 	.word	0x20000268

0800179c <SPI1_Send>:
#endif


// ----------------------------------------------------------------------------
void SPI1_Send(uint8_t *dt, uint16_t cnt)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, dt, cnt, 5000);
 80017a8:	887a      	ldrh	r2, [r7, #2]
 80017aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <SPI1_Send+0x24>)
 80017b2:	f007 f9c7 	bl	8008b44 <HAL_SPI_Transmit>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000ba8 	.word	0x20000ba8

080017c4 <SPI1_Recv>:
// ----------------------------------------------------------------------------
void SPI1_Recv(uint8_t *dt, uint16_t cnt)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi2, dt, cnt, 5000);
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <SPI1_Recv+0x24>)
 80017da:	f007 faef 	bl	8008dbc <HAL_SPI_Receive>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000ba8 	.word	0x20000ba8

080017ec <W25_Reset>:
// ----------------------------------------------------------------------------
void W25_Reset(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	cs_set();
 80017f0:	2200      	movs	r2, #0
 80017f2:	2102      	movs	r1, #2
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <W25_Reset+0x30>)
 80017f6:	f005 f83e 	bl	8006876 <HAL_GPIO_WritePin>
	tx_buf[0] = w24_ENABLE_RESET;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <W25_Reset+0x34>)
 80017fc:	2266      	movs	r2, #102	; 0x66
 80017fe:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = w24_RESET;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <W25_Reset+0x34>)
 8001802:	2299      	movs	r2, #153	; 0x99
 8001804:	705a      	strb	r2, [r3, #1]
	SPI1_Send(tx_buf, 2);
 8001806:	2102      	movs	r1, #2
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <W25_Reset+0x34>)
 800180a:	f7ff ffc7 	bl	800179c <SPI1_Send>
	cs_reset();
 800180e:	2201      	movs	r2, #1
 8001810:	2102      	movs	r1, #2
 8001812:	4802      	ldr	r0, [pc, #8]	; (800181c <W25_Reset+0x30>)
 8001814:	f005 f82f 	bl	8006876 <HAL_GPIO_WritePin>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010c00 	.word	0x40010c00
 8001820:	20000b74 	.word	0x20000b74

08001824 <w25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
// ----------------------------------------------------------------------------
uint32_t w25_Read_ID(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = w25_GET_JEDEC_ID;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <w25_Read_ID+0x48>)
 800182c:	229f      	movs	r2, #159	; 0x9f
 800182e:	701a      	strb	r2, [r3, #0]
	cs_set();
 8001830:	2200      	movs	r2, #0
 8001832:	2102      	movs	r1, #2
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <w25_Read_ID+0x4c>)
 8001836:	f005 f81e 	bl	8006876 <HAL_GPIO_WritePin>
	SPI1_Send(tx_buf, 1);
 800183a:	2101      	movs	r1, #1
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <w25_Read_ID+0x48>)
 800183e:	f7ff ffad 	bl	800179c <SPI1_Send>
	SPI1_Recv(dt, 3);
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2103      	movs	r1, #3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffbc 	bl	80017c4 <SPI1_Recv>
	cs_reset();
 800184c:	2201      	movs	r2, #1
 800184e:	2102      	movs	r1, #2
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <w25_Read_ID+0x4c>)
 8001852:	f005 f810 	bl	8006876 <HAL_GPIO_WritePin>
	return ((dt[0] << 16) | (dt[1] << 8) | dt[2]);
 8001856:	793b      	ldrb	r3, [r7, #4]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	797b      	ldrb	r3, [r7, #5]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	4313      	orrs	r3, r2
 8001860:	79ba      	ldrb	r2, [r7, #6]
 8001862:	4313      	orrs	r3, r2
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000b74 	.word	0x20000b74
 8001870:	40010c00 	.word	0x40010c00

08001874 <w25_Ini>:
// ----------------------------------------------------------------------------
void w25_Ini(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800187a:	2064      	movs	r0, #100	; 0x64
 800187c:	f004 faf6 	bl	8005e6c <HAL_Delay>
	W25_Reset();
 8001880:	f7ff ffb4 	bl	80017ec <W25_Reset>
	HAL_Delay(100);
 8001884:	2064      	movs	r0, #100	; 0x64
 8001886:	f004 faf1 	bl	8005e6c <HAL_Delay>

	unsigned int id = w25_Read_ID();
 800188a:	f7ff ffcb 	bl	8001824 <w25_Read_ID>
 800188e:	60f8      	str	r0, [r7, #12]

	// Using ID, detect flash
	unsigned int id_m = id & 0x0000FFFF;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	b29b      	uxth	r3, r3
 8001894:	60bb      	str	r3, [r7, #8]
	if(id_m != 0x4018)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f244 0218 	movw	r2, #16408	; 0x4018
 800189c:	4293      	cmp	r3, r2
 800189e:	d103      	bne.n	80018a8 <w25_Ini+0x34>
	{
		// Error.  w25q128 don't detect
	}
	else
	{
		w25_info.BlockCount = 256;		// 	w25q128
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <w25_Ini+0x90>)
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	615a      	str	r2, [r3, #20]
	}

	w25_info.PageSize=256;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <w25_Ini+0x90>)
 80018aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ae:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <w25_Ini+0x90>)
 80018b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b6:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <w25_Ini+0x90>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <w25_Ini+0x90>)
 80018c0:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <w25_Ini+0x90>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <w25_Ini+0x90>)
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <w25_Ini+0x90>)
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <w25_Ini+0x90>)
 80018d8:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <w25_Ini+0x90>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <w25_Ini+0x90>)
 80018e2:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <w25_Ini+0x90>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <w25_Ini+0x90>)
 80018ea:	6892      	ldr	r2, [r2, #8]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	0a9b      	lsrs	r3, r3, #10
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <w25_Ini+0x90>)
 80018f4:	6193      	str	r3, [r2, #24]

	int test = 8888;
 80018f6:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80018fa:	607b      	str	r3, [r7, #4]


}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000750 	.word	0x20000750

08001908 <nmea0183_checksum>:
	}
}
//--------------------------------------------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]

	for(int j = 1; j < strlen(msg) - 4; j++)
 8001914:	2301      	movs	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	e00a      	b.n	8001930 <nmea0183_checksum+0x28>
	{
		checksum = checksum^(unsigned)msg[j];
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4053      	eors	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
	for(int j = 1; j < strlen(msg) - 4; j++)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3301      	adds	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7fe fc0d 	bl	8000150 <strlen>
 8001936:	4603      	mov	r3, r0
 8001938:	1f1a      	subs	r2, r3, #4
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8ec      	bhi.n	800191a <nmea0183_checksum+0x12>
	}
	return checksum;
 8001940:	68fb      	ldr	r3, [r7, #12]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <parsing_GPGLL_line>:

//--------------------------------------------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b0a9      	sub	sp, #164	; 0xa4
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];										// Main buffer for GPGLL line
	memset(nmeaSnt, 0, sizeof(nmeaSnt));
 8001954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001958:	2231      	movs	r2, #49	; 0x31
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f009 f9fd 	bl	800ad5c <memset>

	//Copy to  "*" from str_GPGLL in nmeaSnt
	for(int i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001968:	e010      	b.n	800198c <parsing_GPGLL_line+0x40>
	{
		nmeaSnt[i]=str_GPGLL[i];    						// copy bytes from str_GPGLL in nmeaSnt
 800196a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	7819      	ldrb	r1, [r3, #0]
 8001974:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800197c:	4413      	add	r3, r2
 800197e:	460a      	mov	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
	for(int i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 8001982:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001986:	3301      	adds	r3, #1
 8001988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800198c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b2a      	cmp	r3, #42	; 0x2a
 8001998:	d003      	beq.n	80019a2 <parsing_GPGLL_line+0x56>
 800199a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800199e:	2b31      	cmp	r3, #49	; 0x31
 80019a0:	dde3      	ble.n	800196a <parsing_GPGLL_line+0x1e>
	}
	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 80019a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019a6:	2100      	movs	r1, #0
 80019a8:	460a      	mov	r2, r1
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	460a      	mov	r2, r1
 80019ae:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"  (after '*' are checksum two numbers)
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 80019b0:	212a      	movs	r1, #42	; 0x2a
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f009 fabf 	bl	800af36 <strchr>
 80019b8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 80019bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019c0:	3301      	adds	r3, #1
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	smNmbr[2]='\0';											// Add and of line '\0' sing
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 80019ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff98 	bl	8001908 <nmea0183_checksum>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	char hex[3];
	sprintf(hex, "%x", intSum);
 80019de:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80019e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e6:	49b2      	ldr	r1, [pc, #712]	; (8001cb0 <parsing_GPGLL_line+0x364>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f009 fa75 	bl	800aed8 <siprintf>

	if(strstr(smNmbr, hex) != NULL)                         // Check if checksum line equal checksum after '*'
 80019ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f009 fab1 	bl	800af60 <strstr>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8237 	beq.w	8001e74 <parsing_GPGLL_line+0x528>
	{
		// Parsing string
		int i = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		int count = 0;                                      // Count of elements
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		while(nmeaSnt[i] != '\0')							// not and of line
 8001a12:	e227      	b.n	8001e64 <parsing_GPGLL_line+0x518>
		{
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
			{
				int g=0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				char str[12]={0};
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
				i++;										// Count of chars in nmeaSnt[i] array
 8001a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				switch (count)
 8001a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	f200 8202 	bhi.w	8001e3e <parsing_GPGLL_line+0x4f2>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <parsing_GPGLL_line+0xf4>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a55 	.word	0x08001a55
 8001a44:	08001ba5 	.word	0x08001ba5
 8001a48:	08001bf7 	.word	0x08001bf7
 8001a4c:	08001d6d 	.word	0x08001d6d
 8001a50:	08001dbf 	.word	0x08001dbf
				{
					case 0:
						for(g=0; g<10; g++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a5a:	e014      	b.n	8001a86 <parsing_GPGLL_line+0x13a>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 8001a5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a64:	4413      	add	r3, r2
 8001a66:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001a70:	4a90      	ldr	r2, [pc, #576]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a76:	4413      	add	r3, r2
 8001a78:	460a      	mov	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 8001a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a80:	3301      	adds	r3, #1
 8001a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a8a:	2b09      	cmp	r3, #9
 8001a8c:	dde6      	ble.n	8001a5c <parsing_GPGLL_line+0x110>
						}
						GPS_data.lat[10] = '\0';
 8001a8e:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	729a      	strb	r2, [r3, #10]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a98:	220c      	movs	r2, #12
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f009 f95d 	bl	800ad5c <memset>
						sprintf(str,"%s", GPS_data.lat);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4983      	ldr	r1, [pc, #524]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fa51 	bl	800af50 <strcpy>
						strcpy(gps_lat, str);
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4880      	ldr	r0, [pc, #512]	; (8001cb8 <parsing_GPGLL_line+0x36c>)
 8001ab6:	f009 fa4b 	bl	800af50 <strcpy>

						// Convert lat in coordinate for google maps
						// 1. Separate degrees from minutes
						float integer_part_lat = 0;
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	67bb      	str	r3, [r7, #120]	; 0x78
						float fractional_part_lat = 0;
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	677b      	str	r3, [r7, #116]	; 0x74
						char integer_part_char_lat[3]={0};
 8001ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aca:	2100      	movs	r1, #0
 8001acc:	460a      	mov	r2, r1
 8001ace:	801a      	strh	r2, [r3, #0]
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lat[9]={0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	721a      	strb	r2, [r3, #8]
						uint8_t k=0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

						for(uint8_t k=0; k<=11; k++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001aec:	e020      	b.n	8001b30 <parsing_GPGLL_line+0x1e4>
						{
							if(k<=1)
 8001aee:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d80b      	bhi.n	8001b0e <parsing_GPGLL_line+0x1c2>
							{
								integer_part_char_lat[k] = GPS_data.lat[k];        	  // Degrees
 8001af6:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001afa:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001afe:	496d      	ldr	r1, [pc, #436]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001b00:	5c8a      	ldrb	r2, [r1, r2]
 8001b02:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001b06:	440b      	add	r3, r1
 8001b08:	f803 2c78 	strb.w	r2, [r3, #-120]
 8001b0c:	e00b      	b.n	8001b26 <parsing_GPGLL_line+0x1da>
							}
							else
							{
								fractional_part_char_lat[k-2] = GPS_data.lat[k];      // Minutes
 8001b0e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001b12:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001b16:	3b02      	subs	r3, #2
 8001b18:	4966      	ldr	r1, [pc, #408]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001b1a:	5c8a      	ldrb	r2, [r1, r2]
 8001b1c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001b20:	440b      	add	r3, r1
 8001b22:	f803 2c84 	strb.w	r2, [r3, #-132]
						for(uint8_t k=0; k<=11; k++)
 8001b26:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001b30:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001b34:	2b0b      	cmp	r3, #11
 8001b36:	d9da      	bls.n	8001aee <parsing_GPGLL_line+0x1a2>
							}
						}

						// 2. Convert string in numbers
						integer_part_lat = atoi(integer_part_char_lat);          // save int part
 8001b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f009 f8aa 	bl	800ac96 <atoi>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f8b3 	bl	8000cb0 <__aeabi_i2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	67bb      	str	r3, [r7, #120]	; 0x78
						fractional_part_lat = atof(fractional_part_char_lat);	 // float part
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4618      	mov	r0, r3
 8001b54:	f009 f89c 	bl	800ac90 <atof>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4621      	mov	r1, r4
 8001b60:	f7fe ff9c 	bl	8000a9c <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
 						// 3. Convert in degrees
						fractional_part_lat = (fractional_part_lat/60);
 8001b68:	4954      	ldr	r1, [pc, #336]	; (8001cbc <parsing_GPGLL_line+0x370>)
 8001b6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b6c:	f7ff f9a8 	bl	8000ec0 <__aeabi_fdiv>
 8001b70:	4603      	mov	r3, r0
 8001b72:	677b      	str	r3, [r7, #116]	; 0x74
						integer_part_lat = integer_part_lat + fractional_part_lat;
 8001b74:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b76:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001b78:	f7fe ffe6 	bl	8000b48 <__addsf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	67bb      	str	r3, [r7, #120]	; 0x78
						// 4. Convert in string and save it in global variable
                        gcvt(integer_part_lat, 11, gps_latitude );
 8001b80:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001b82:	f7fe fc51 	bl	8000428 <__aeabi_f2d>
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <parsing_GPGLL_line+0x374>)
 8001b88:	220b      	movs	r2, #11
 8001b8a:	f009 f889 	bl	800aca0 <gcvt>
                        gps_latitude[9] = '\0';
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <parsing_GPGLL_line+0x374>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	725a      	strb	r2, [r3, #9]

						i = i+g;
 8001b94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001ba2:	e14c      	b.n	8001e3e <parsing_GPGLL_line+0x4f2>

					case 1:
						for (g =0; g<1; g++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001baa:	e015      	b.n	8001bd8 <parsing_GPGLL_line+0x28c>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 8001bac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001bba:	4413      	add	r3, r2
 8001bbc:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001bc0:	4a3c      	ldr	r2, [pc, #240]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bc6:	4413      	add	r3, r2
 8001bc8:	330b      	adds	r3, #11
 8001bca:	460a      	mov	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 8001bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dde5      	ble.n	8001bac <parsing_GPGLL_line+0x260>
						}
						GPS_data.lat_letter[2] = '\0';
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	735a      	strb	r2, [r3, #13]
						i = i+g;
 8001be6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bee:	4413      	add	r3, r2
 8001bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001bf4:	e123      	b.n	8001e3e <parsing_GPGLL_line+0x4f2>

					case 2:
						for(g=0; g<11; g++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bfc:	e015      	b.n	8001c2a <parsing_GPGLL_line+0x2de>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 8001bfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c06:	4413      	add	r3, r2
 8001c08:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c18:	4413      	add	r3, r2
 8001c1a:	330d      	adds	r3, #13
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 8001c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c24:	3301      	adds	r3, #1
 8001c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c2e:	2b0a      	cmp	r3, #10
 8001c30:	dde5      	ble.n	8001bfe <parsing_GPGLL_line+0x2b2>
						}
						GPS_data.lon[11] = '\0';
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	761a      	strb	r2, [r3, #24]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f009 f88b 	bl	800ad5c <memset>
						sprintf(str,"%s", GPS_data.lon);
 8001c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4a:	491e      	ldr	r1, [pc, #120]	; (8001cc4 <parsing_GPGLL_line+0x378>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f009 f97f 	bl	800af50 <strcpy>
						strcpy(gps_lon, str);
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	481b      	ldr	r0, [pc, #108]	; (8001cc8 <parsing_GPGLL_line+0x37c>)
 8001c5a:	f009 f979 	bl	800af50 <strcpy>

						// Convert lon in coordinate for google mups
						// // 1. Separate degrees from minutes
						float integer_part_lon = 0;
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						float fractional_part_lon = 0;
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
						char integer_part_char_lon[3]={0};
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	2100      	movs	r1, #0
 8001c72:	460a      	mov	r2, r1
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	460a      	mov	r2, r1
 8001c78:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lon[10]={0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	811a      	strh	r2, [r3, #8]

						for(k=0; k<=11; k++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c8c:	e030      	b.n	8001cf0 <parsing_GPGLL_line+0x3a4>
						{
							if(k<=2)
 8001c8e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d81a      	bhi.n	8001ccc <parsing_GPGLL_line+0x380>
							{
								integer_part_char_lon[k] = GPS_data.lon[k];
 8001c96:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001c9a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c9e:	4905      	ldr	r1, [pc, #20]	; (8001cb4 <parsing_GPGLL_line+0x368>)
 8001ca0:	440a      	add	r2, r1
 8001ca2:	7b52      	ldrb	r2, [r2, #13]
 8001ca4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001ca8:	440b      	add	r3, r1
 8001caa:	f803 2c88 	strb.w	r2, [r3, #-136]
 8001cae:	e01a      	b.n	8001ce6 <parsing_GPGLL_line+0x39a>
 8001cb0:	0800e270 	.word	0x0800e270
 8001cb4:	20000b80 	.word	0x20000b80
 8001cb8:	2000071c 	.word	0x2000071c
 8001cbc:	42700000 	.word	0x42700000
 8001cc0:	2000070c 	.word	0x2000070c
 8001cc4:	20000b8d 	.word	0x20000b8d
 8001cc8:	2000072c 	.word	0x2000072c
							}
							else
							{
								fractional_part_char_lon[k-3] = GPS_data.lon[k];
 8001ccc:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001cd0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	4969      	ldr	r1, [pc, #420]	; (8001e7c <parsing_GPGLL_line+0x530>)
 8001cd8:	440a      	add	r2, r1
 8001cda:	7b52      	ldrb	r2, [r2, #13]
 8001cdc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f803 2c94 	strb.w	r2, [r3, #-148]
						for(k=0; k<=11; k++)
 8001ce6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cea:	3301      	adds	r3, #1
 8001cec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001cf0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cf4:	2b0b      	cmp	r3, #11
 8001cf6:	d9ca      	bls.n	8001c8e <parsing_GPGLL_line+0x342>
							}
						}

						// 2. Convert string in numbers
						integer_part_lon = atoi(integer_part_char_lon);          // save int part
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f008 ffca 	bl	800ac96 <atoi>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ffd3 	bl	8000cb0 <__aeabi_i2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						fractional_part_lon = atof(fractional_part_char_lon);	 // float part
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4618      	mov	r0, r3
 8001d16:	f008 ffbb 	bl	800ac90 <atof>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	f7fe febb 	bl	8000a9c <__aeabi_d2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	67fb      	str	r3, [r7, #124]	; 0x7c
						// 3. Convert in degrees
						fractional_part_lon = (fractional_part_lon/60);
 8001d2a:	4955      	ldr	r1, [pc, #340]	; (8001e80 <parsing_GPGLL_line+0x534>)
 8001d2c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001d2e:	f7ff f8c7 	bl	8000ec0 <__aeabi_fdiv>
 8001d32:	4603      	mov	r3, r0
 8001d34:	67fb      	str	r3, [r7, #124]	; 0x7c
						integer_part_lon = integer_part_lon + fractional_part_lon;
 8001d36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d38:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d3c:	f7fe ff04 	bl	8000b48 <__addsf3>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						// 4. Convert in string and save it in global variable
					    gcvt(integer_part_lon, 11, gps_lontitude );
 8001d46:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d4a:	f7fe fb6d 	bl	8000428 <__aeabi_f2d>
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <parsing_GPGLL_line+0x538>)
 8001d50:	220b      	movs	r2, #11
 8001d52:	f008 ffa5 	bl	800aca0 <gcvt>
					    gps_lontitude[10] = '\0';
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <parsing_GPGLL_line+0x538>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	729a      	strb	r2, [r3, #10]

						i = i+g;
 8001d5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d64:	4413      	add	r3, r2
 8001d66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001d6a:	e068      	b.n	8001e3e <parsing_GPGLL_line+0x4f2>

					case 3:
						for(g=0; g<1; g++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d72:	e015      	b.n	8001da0 <parsing_GPGLL_line+0x454>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 8001d74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001d82:	4413      	add	r3, r2
 8001d84:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001d88:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <parsing_GPGLL_line+0x530>)
 8001d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d8e:	4413      	add	r3, r2
 8001d90:	3319      	adds	r3, #25
 8001d92:	460a      	mov	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 8001d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	dde5      	ble.n	8001d74 <parsing_GPGLL_line+0x428>
						}
						GPS_data.lon_letter[2] = '\0';
 8001da8:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <parsing_GPGLL_line+0x530>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	76da      	strb	r2, [r3, #27]
						i = i+g;
 8001dae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001db6:	4413      	add	r3, r2
 8001db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						break;
 8001dbc:	e03f      	b.n	8001e3e <parsing_GPGLL_line+0x4f2>

					case 4:
						for(g=0; g<6; g++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001dc4:	e015      	b.n	8001df2 <parsing_GPGLL_line+0x4a6>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 8001dc6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dce:	4413      	add	r3, r2
 8001dd0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001dda:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <parsing_GPGLL_line+0x530>)
 8001ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de0:	4413      	add	r3, r2
 8001de2:	331b      	adds	r3, #27
 8001de4:	460a      	mov	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 8001de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dec:	3301      	adds	r3, #1
 8001dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	dde5      	ble.n	8001dc6 <parsing_GPGLL_line+0x47a>
						}
						GPS_data.time[6] = '\0';
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <parsing_GPGLL_line+0x530>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 8001e02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

						// Save time in global variable
						memset(str, 0 , sizeof(str));
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	220c      	movs	r2, #12
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f008 ff9f 	bl	800ad5c <memset>
						sprintf(str,"%s", GPS_data.time);
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	4919      	ldr	r1, [pc, #100]	; (8001e88 <parsing_GPGLL_line+0x53c>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f009 f893 	bl	800af50 <strcpy>
						strcpy(gps_time, str);
 8001e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4816      	ldr	r0, [pc, #88]	; (8001e8c <parsing_GPGLL_line+0x540>)
 8001e32:	f009 f88d 	bl	800af50 <strcpy>

						GPGGA_data_is_ready = 1;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <parsing_GPGLL_line+0x544>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

						break;
 8001e3c:	bf00      	nop
				}
				count++;
 8001e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e42:	3301      	adds	r3, #1
 8001e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			while(nmeaSnt[i] == ',')						// ',' pointed on start element
 8001e48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b2c      	cmp	r3, #44	; 0x2c
 8001e56:	f43f addd 	beq.w	8001a14 <parsing_GPGLL_line+0xc8>
			}
			i++;
 8001e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while(nmeaSnt[i] != '\0')							// not and of line
 8001e64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e9      	bne.n	8001e48 <parsing_GPGLL_line+0x4fc>
		}
	}
}
 8001e74:	bf00      	nop
 8001e76:	37a4      	adds	r7, #164	; 0xa4
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	20000b80 	.word	0x20000b80
 8001e80:	42700000 	.word	0x42700000
 8001e84:	20000740 	.word	0x20000740
 8001e88:	20000b9b 	.word	0x20000b9b
 8001e8c:	20000738 	.word	0x20000738
 8001e90:	20000278 	.word	0x20000278

08001e94 <parsing_GPGGA_line>:
//--------------------------------------------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0a2      	sub	sp, #136	; 0x88
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 8001e9c:	2346      	movs	r3, #70	; 0x46
 8001e9e:	67bb      	str	r3, [r7, #120]	; 0x78
		memset(nmeaSnt, 0, size);
 8001ea0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f008 ff57 	bl	800ad5c <memset>
		char number_of_satalits_str[4] = {0};
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24

		//Copy to  "*" from str_GPGGA in nmeaSnt
		int i=0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ebe:	e010      	b.n	8001ee2 <parsing_GPGGA_line+0x4e>
		{
			nmeaSnt[i]=str_GPGGA[i];
 8001ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	7819      	ldrb	r1, [r3, #0]
 8001eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ed2:	4413      	add	r3, r2
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)
 8001ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001edc:	3301      	adds	r3, #1
 8001ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b2a      	cmp	r3, #42	; 0x2a
 8001eee:	d003      	beq.n	8001ef8 <parsing_GPGGA_line+0x64>
 8001ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef4:	2b45      	cmp	r3, #69	; 0x45
 8001ef6:	dde3      	ble.n	8001ec0 <parsing_GPGGA_line+0x2c>
		}

		// Check check sum
		char smNmbr[3]={0};     								// array for checksum
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	2100      	movs	r1, #0
 8001efe:	460a      	mov	r2, r1
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	460a      	mov	r2, r1
 8001f04:	709a      	strb	r2, [r3, #2]
		char *rawSum;
		char not_used[12] = {0};
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001f12:	212a      	movs	r1, #42	; 0x2a
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f009 f80e 	bl	800af36 <strchr>
 8001f1a:	6778      	str	r0, [r7, #116]	; 0x74
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1e:	3301      	adds	r3, #1
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	843b      	strh	r3, [r7, #32]
		smNmbr[2]='\0';											// Add and of line '\0' sing
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        // PROBLEM: Checksum !=
		char hex[3];
		memset(hex, 0 , sizeof(hex));
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	2203      	movs	r2, #3
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f008 ff11 	bl	800ad5c <memset>
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fce2 	bl	8001908 <nmea0183_checksum>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		sprintf(hex, "%x", intSum);
 8001f4a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	49c4      	ldr	r1, [pc, #784]	; (8002264 <parsing_GPGGA_line+0x3d0>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f008 ffbf 	bl	800aed8 <siprintf>

//		if(strstr(smNmbr, hex) != NULL)
//		{
			// Parsing string

			i = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int count = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(nmeaSnt[i] != '\0')
 8001f66:	e170      	b.n	800224a <parsing_GPGGA_line+0x3b6>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
					i++;
 8001f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f70:	3301      	adds	r3, #1
 8001f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					switch (count)
 8001f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	f200 8152 	bhi.w	8002224 <parsing_GPGGA_line+0x390>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <parsing_GPGGA_line+0xf4>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	08001fa5 	.word	0x08001fa5
 8001f8c:	08001fe7 	.word	0x08001fe7
 8001f90:	08002029 	.word	0x08002029
 8001f94:	0800206b 	.word	0x0800206b
 8001f98:	080020ad 	.word	0x080020ad
 8001f9c:	080020ef 	.word	0x080020ef
 8001fa0:	08002131 	.word	0x08002131
					{
						case 0:                     // Time
							for(g=0; g<8; g++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fa8:	e011      	b.n	8001fce <parsing_GPGGA_line+0x13a>
							{
								not_used[g] = nmeaSnt[i+g];
 8001faa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001fbc:	f107 0214 	add.w	r2, r7, #20
 8001fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc2:	4413      	add	r3, r2
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
							for(g=0; g<8; g++)
 8001fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fca:	3301      	adds	r3, #1
 8001fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd0:	2b07      	cmp	r3, #7
 8001fd2:	ddea      	ble.n	8001faa <parsing_GPGGA_line+0x116>
							}
							not_used[9] = '\0';
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	777b      	strb	r3, [r7, #29]
							i = i+g;
 8001fd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fde:	4413      	add	r3, r2
 8001fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001fe4:	e11e      	b.n	8002224 <parsing_GPGGA_line+0x390>

						case 1:   					// Lat
							for (g =0; g<10; g++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fea:	e011      	b.n	8002010 <parsing_GPGGA_line+0x17c>
							{
								not_used[g] = nmeaSnt[i+g];
 8001fec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001ffe:	f107 0214 	add.w	r2, r7, #20
 8002002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002004:	4413      	add	r3, r2
 8002006:	460a      	mov	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
							for (g =0; g<10; g++)
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800200c:	3301      	adds	r3, #1
 800200e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002012:	2b09      	cmp	r3, #9
 8002014:	ddea      	ble.n	8001fec <parsing_GPGGA_line+0x158>
							}
							not_used[10] = '\0';
 8002016:	2300      	movs	r3, #0
 8002018:	77bb      	strb	r3, [r7, #30]
							i = i+g;
 800201a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800201e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002020:	4413      	add	r3, r2
 8002022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8002026:	e0fd      	b.n	8002224 <parsing_GPGGA_line+0x390>

						case 2:						// N
							for(g=0; g<1; g++)
 8002028:	2300      	movs	r3, #0
 800202a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800202c:	e011      	b.n	8002052 <parsing_GPGGA_line+0x1be>
							{
								not_used[g] = nmeaSnt[i+g];
 800202e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002034:	4413      	add	r3, r2
 8002036:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800203a:	4413      	add	r3, r2
 800203c:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8002040:	f107 0214 	add.w	r2, r7, #20
 8002044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002046:	4413      	add	r3, r2
 8002048:	460a      	mov	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 800204c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800204e:	3301      	adds	r3, #1
 8002050:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002054:	2b00      	cmp	r3, #0
 8002056:	ddea      	ble.n	800202e <parsing_GPGGA_line+0x19a>
							}
							not_used[1] = '\0';
 8002058:	2300      	movs	r3, #0
 800205a:	757b      	strb	r3, [r7, #21]
							i = i+g;
 800205c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002062:	4413      	add	r3, r2
 8002064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8002068:	e0dc      	b.n	8002224 <parsing_GPGGA_line+0x390>

						case 3:                     // Lat
							for(g=0; g<11; g++)
 800206a:	2300      	movs	r3, #0
 800206c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800206e:	e011      	b.n	8002094 <parsing_GPGGA_line+0x200>
							{
								not_used[g] = nmeaSnt[i+g];
 8002070:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002076:	4413      	add	r3, r2
 8002078:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800207c:	4413      	add	r3, r2
 800207e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8002082:	f107 0214 	add.w	r2, r7, #20
 8002086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002088:	4413      	add	r3, r2
 800208a:	460a      	mov	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
							for(g=0; g<11; g++)
 800208e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002090:	3301      	adds	r3, #1
 8002092:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002096:	2b0a      	cmp	r3, #10
 8002098:	ddea      	ble.n	8002070 <parsing_GPGGA_line+0x1dc>
							}
							not_used[11] = '\0';
 800209a:	2300      	movs	r3, #0
 800209c:	77fb      	strb	r3, [r7, #31]
							i = i+g;
 800209e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a4:	4413      	add	r3, r2
 80020a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 80020aa:	e0bb      	b.n	8002224 <parsing_GPGGA_line+0x390>

						case 4:                      // E
							for(g=0; g<1; g++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020b0:	e011      	b.n	80020d6 <parsing_GPGGA_line+0x242>
							{
								not_used[g] = nmeaSnt[i+g];
 80020b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b8:	4413      	add	r3, r2
 80020ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020be:	4413      	add	r3, r2
 80020c0:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80020c4:	f107 0214 	add.w	r2, r7, #20
 80020c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ca:	4413      	add	r3, r2
 80020cc:	460a      	mov	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 80020d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d2:	3301      	adds	r3, #1
 80020d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	ddea      	ble.n	80020b2 <parsing_GPGGA_line+0x21e>
							}
							not_used[1] = '\0';
 80020dc:	2300      	movs	r3, #0
 80020de:	757b      	strb	r3, [r7, #21]
							i = i+g;
 80020e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e6:	4413      	add	r3, r2
 80020e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 80020ec:	e09a      	b.n	8002224 <parsing_GPGGA_line+0x390>

						case 5:                      // Fix Quality
							for(g=0; g<1; g++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020f2:	e011      	b.n	8002118 <parsing_GPGGA_line+0x284>
							{
								not_used[g] = nmeaSnt[i+g];
 80020f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020fa:	4413      	add	r3, r2
 80020fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002100:	4413      	add	r3, r2
 8002102:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8002106:	f107 0214 	add.w	r2, r7, #20
 800210a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800210c:	4413      	add	r3, r2
 800210e:	460a      	mov	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8002112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002114:	3301      	adds	r3, #1
 8002116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800211a:	2b00      	cmp	r3, #0
 800211c:	ddea      	ble.n	80020f4 <parsing_GPGGA_line+0x260>
							}
							not_used[1] = '\0';
 800211e:	2300      	movs	r3, #0
 8002120:	757b      	strb	r3, [r7, #21]
							i = i+g;
 8002122:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002128:	4413      	add	r3, r2
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800212e:	e079      	b.n	8002224 <parsing_GPGGA_line+0x390>

						case 6:                      // Number of Satellites
							memset(number_of_satalits_str, 0 , sizeof(number_of_satalits_str));    // clean buffer
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	2204      	movs	r2, #4
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f008 fe0f 	bl	800ad5c <memset>

							for(g=0; g<2; g++)
 800213e:	2300      	movs	r3, #0
 8002140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002142:	e011      	b.n	8002168 <parsing_GPGGA_line+0x2d4>
							{
								number_of_satalits_str[g] = nmeaSnt[i+g];
 8002144:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214a:	4413      	add	r3, r2
 800214c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002150:	4413      	add	r3, r2
 8002152:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8002156:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800215a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800215c:	4413      	add	r3, r2
 800215e:	460a      	mov	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
							for(g=0; g<2; g++)
 8002162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002164:	3301      	adds	r3, #1
 8002166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800216a:	2b01      	cmp	r3, #1
 800216c:	ddea      	ble.n	8002144 <parsing_GPGGA_line+0x2b0>
							}
							number_of_satalits_str[2] = '\0';
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							// Convert two digits string on number
							uint8_t dozens_number_of_satalits = (uint8_t)number_of_satalits_str[0] - 48;
 8002174:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002178:	3b30      	subs	r3, #48	; 0x30
 800217a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							dozens_number_of_satalits = dozens_number_of_satalits *10;
 800217e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8002182:	461a      	mov	r2, r3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
							uint8_t units_number_of_satalits = (uint8_t)number_of_satalits_str[1]  - 48;
 800218e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002192:	3b30      	subs	r3, #48	; 0x30
 8002194:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
							uint8_t digit_number_of_satalites = dozens_number_of_satalits + units_number_of_satalits;
 8002198:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800219c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80021a0:	4413      	add	r3, r2
 80021a2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

							// Chesk if data id number
							if((digit_number_of_satalites >= 3 || digit_number_of_satalites <= 14))   // Check if data correct
 80021a6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d803      	bhi.n	80021b6 <parsing_GPGGA_line+0x322>
 80021ae:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80021b2:	2b0e      	cmp	r3, #14
 80021b4:	d826      	bhi.n	8002204 <parsing_GPGGA_line+0x370>
							{
								// Convert uint8_t in char
								char buff_char_number_of_satalites[3]={0};
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	2100      	movs	r1, #0
 80021bc:	460a      	mov	r2, r1
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	460a      	mov	r2, r1
 80021c2:	709a      	strb	r2, [r3, #2]
								memset(buff_char_number_of_satalites, 0 ,sizeof(buff_char_number_of_satalites));
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2203      	movs	r2, #3
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f008 fdc5 	bl	800ad5c <memset>
								buff_char_number_of_satalites[0] = (char)((dozens_number_of_satalits/10) + 48);
 80021d2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80021d6:	4a24      	ldr	r2, [pc, #144]	; (8002268 <parsing_GPGGA_line+0x3d4>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3330      	adds	r3, #48	; 0x30
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	733b      	strb	r3, [r7, #12]
								buff_char_number_of_satalites[1] = (char)units_number_of_satalits + 48;
 80021e6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80021ea:	3330      	adds	r3, #48	; 0x30
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	737b      	strb	r3, [r7, #13]
								buff_char_number_of_satalites[2] = '\0';
 80021f0:	2300      	movs	r3, #0
 80021f2:	73bb      	strb	r3, [r7, #14]

								// write in global variable
								strcpy(gps_number_of_satellites, buff_char_number_of_satalites);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4619      	mov	r1, r3
 80021fa:	481c      	ldr	r0, [pc, #112]	; (800226c <parsing_GPGGA_line+0x3d8>)
 80021fc:	f008 fea8 	bl	800af50 <strcpy>
							{
 8002200:	bf00      	nop
							{
								char error_message[] = "Er";
								strcpy(gps_number_of_satellites, error_message);
							}

							break;
 8002202:	e00e      	b.n	8002222 <parsing_GPGGA_line+0x38e>
								char error_message[] = "Er";
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <parsing_GPGGA_line+0x3dc>)
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4611      	mov	r1, r2
 800220e:	8019      	strh	r1, [r3, #0]
 8002210:	3302      	adds	r3, #2
 8002212:	0c12      	lsrs	r2, r2, #16
 8002214:	701a      	strb	r2, [r3, #0]
								strcpy(gps_number_of_satellites, error_message);
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	4619      	mov	r1, r3
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <parsing_GPGGA_line+0x3d8>)
 800221e:	f008 fe97 	bl	800af50 <strcpy>
							break;
 8002222:	bf00      	nop
					}
					count++;
 8002224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002228:	3301      	adds	r3, #1
 800222a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(nmeaSnt[i] == ',')
 800222e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b2c      	cmp	r3, #44	; 0x2c
 800223c:	f43f ae94 	beq.w	8001f68 <parsing_GPGGA_line+0xd4>
				}
				i++;
 8002240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002244:	3301      	adds	r3, #1
 8002246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(nmeaSnt[i] != '\0')
 800224a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e9      	bne.n	800222e <parsing_GPGGA_line+0x39a>
			}
		//}
}
 800225a:	bf00      	nop
 800225c:	3788      	adds	r7, #136	; 0x88
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	0800e270 	.word	0x0800e270
 8002268:	cccccccd 	.word	0xcccccccd
 800226c:	20000728 	.word	0x20000728
 8002270:	0800e274 	.word	0x0800e274

08002274 <parsing_GPVTG_line>:


//--------------------------------------------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b098      	sub	sp, #96	; 0x60
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 800227c:	2331      	movs	r3, #49	; 0x31
 800227e:	653b      	str	r3, [r7, #80]	; 0x50
	memset(nmeaSnt, 0, size);
 8002280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f008 fd67 	bl	800ad5c <memset>

	char str[6]={0};
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	809a      	strh	r2, [r3, #4]

	//Copy to  "*" from str_GPVTG in nmeaSnt
	int i=0;
 8002298:	2300      	movs	r3, #0
 800229a:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022a0:	e00c      	b.n	80022bc <parsing_GPVTG_line+0x48>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 80022a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	7819      	ldrb	r1, [r3, #0]
 80022aa:	f107 0218 	add.w	r2, r7, #24
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	4413      	add	r3, r2
 80022b2:	460a      	mov	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 80022b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b8:	3301      	adds	r3, #1
 80022ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b2a      	cmp	r3, #42	; 0x2a
 80022c6:	d002      	beq.n	80022ce <parsing_GPVTG_line+0x5a>
 80022c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ca:	2b31      	cmp	r3, #49	; 0x31
 80022cc:	dde9      	ble.n	80022a2 <parsing_GPVTG_line+0x2e>
	}

	// Check check sum
	char smNmbr[3]={0};     								// array for checksum
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	2100      	movs	r1, #0
 80022d4:	460a      	mov	r2, r1
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	460a      	mov	r2, r1
 80022da:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 80022dc:	212a      	movs	r1, #42	; 0x2a
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f008 fe29 	bl	800af36 <strchr>
 80022e4:	64f8      	str	r0, [r7, #76]	; 0x4c
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 80022e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e8:	3301      	adds	r3, #1
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 80022f0:	2300      	movs	r3, #0
 80022f2:	73bb      	strb	r3, [r7, #14]

//	// PROBLEM: Checksum !=

	i = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	65fb      	str	r3, [r7, #92]	; 0x5c
	int count = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t speed_data_readed = 1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(speed_data_readed == 1)
 8002302:	e07d      	b.n	8002400 <parsing_GPVTG_line+0x18c>
	{
		if(nmeaSnt[i] == ',')
 8002304:	f107 0218 	add.w	r2, r7, #24
 8002308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b2c      	cmp	r3, #44	; 0x2c
 8002310:	d102      	bne.n	8002318 <parsing_GPVTG_line+0xa4>
		{
			count++;
 8002312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002314:	3301      	adds	r3, #1
 8002316:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		if(count == 7)				// Find seven part (speed)
 8002318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231a:	2b07      	cmp	r3, #7
 800231c:	d16d      	bne.n	80023fa <parsing_GPVTG_line+0x186>
		{
			i++;
 800231e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002320:	3301      	adds	r3, #1
 8002322:	65fb      	str	r3, [r7, #92]	; 0x5c
			uint8_t k = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			char speed_test_variable[4]={0};    // for debug
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
			uint8_t error = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			do
			{
				//GPS_data.speed[k] = nmeaSnt[i+k];
				if(((nmeaSnt[i+k]-48) >= 0) && ((nmeaSnt[i+k]-48)  <= 9))   // Ok
 8002334:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	4413      	add	r3, r2
 800233c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002340:	4413      	add	r3, r2
 8002342:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	2b00      	cmp	r3, #0
 800234a:	db1c      	blt.n	8002386 <parsing_GPVTG_line+0x112>
 800234c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	4413      	add	r3, r2
 8002354:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002358:	4413      	add	r3, r2
 800235a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800235e:	3b30      	subs	r3, #48	; 0x30
 8002360:	2b09      	cmp	r3, #9
 8002362:	dc10      	bgt.n	8002386 <parsing_GPVTG_line+0x112>
				{
					speed_test_variable[k] = nmeaSnt[i+k];
 8002364:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236a:	441a      	add	r2, r3
 800236c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002370:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002374:	440a      	add	r2, r1
 8002376:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800237a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800237e:	440b      	add	r3, r1
 8002380:	f803 2c58 	strb.w	r2, [r3, #-88]
 8002384:	e009      	b.n	800239a <parsing_GPVTG_line+0x126>
				}
				else	// if error value. delete value.
				{
					// Error
					error = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
					memset(speed_test_variable, 0 ,sizeof(speed_test_variable));
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	2204      	movs	r2, #4
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f008 fce1 	bl	800ad5c <memset>
				}
				k++;
 800239a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800239e:	3301      	adds	r3, #1
 80023a0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			}while ((k < 3) && (nmeaSnt[i+k] != '.') && (error != 1));    // Problem where !!!!
 80023a4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d80e      	bhi.n	80023ca <parsing_GPVTG_line+0x156>
 80023ac:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80023b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b2:	4413      	add	r3, r2
 80023b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023b8:	4413      	add	r3, r2
 80023ba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023be:	2b2e      	cmp	r3, #46	; 0x2e
 80023c0:	d003      	beq.n	80023ca <parsing_GPVTG_line+0x156>
 80023c2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d1b4      	bne.n	8002334 <parsing_GPVTG_line+0xc0>


			// Save in global variable
			memset(str, 0 , sizeof(str));
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	2206      	movs	r2, #6
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f008 fcc2 	bl	800ad5c <memset>
			//sprintf(str,"%s", GPS_data.speed);
			sprintf(str,"%s", speed_test_variable);
 80023d8:	f107 0208 	add.w	r2, r7, #8
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f008 fdb4 	bl	800af50 <strcpy>
			strcpy(gps_speed, str);
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	4809      	ldr	r0, [pc, #36]	; (8002414 <parsing_GPVTG_line+0x1a0>)
 80023f0:	f008 fdae 	bl	800af50 <strcpy>

			speed_data_readed = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		i++;
 80023fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fc:	3301      	adds	r3, #1
 80023fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(speed_data_readed == 1)
 8002400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002404:	2b01      	cmp	r3, #1
 8002406:	f43f af7d 	beq.w	8002304 <parsing_GPVTG_line+0x90>
	}
}
 800240a:	bf00      	nop
 800240c:	3760      	adds	r7, #96	; 0x60
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000704 	.word	0x20000704

08002418 <parsing_GPS>:
// Parsing only three lines from NMIA
// 1. From GPGLL - coordinates
// 2. From GPGGA - number of satellites
// 3. From GPVTG - speed
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800241e:	af00      	add	r7, sp, #0
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	6018      	str	r0, [r3, #0]
 8002424:	463b      	mov	r3, r7
 8002426:	6019      	str	r1, [r3, #0]
	char buffStr[512];										 // Main buffer in this function

	if(flag == 1)    										 // If data from GPS module in buffer
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <parsing_GPS+0xcc>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d153      	bne.n	80024d8 <parsing_GPS+0xc0>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f008 fc8e 	bl	800ad5c <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	4610      	mov	r0, r2
 800244a:	f008 fd81 	bl	800af50 <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL in buffStr
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4925      	ldr	r1, [pc, #148]	; (80024e8 <parsing_GPS+0xd0>)
 8002454:	4618      	mov	r0, r3
 8002456:	f008 fd83 	bl	800af60 <strstr>
 800245a:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 800245e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <parsing_GPS+0x62>
		{
			parsing_GPGLL_line(str_GPGLL);
 8002466:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800246a:	f7ff fa6f 	bl	800194c <parsing_GPGLL_line>
			receive_gps_signal++;
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <parsing_GPS+0xd4>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <parsing_GPS+0xd4>)
 8002478:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPGGA in buffStr
		str_GPGGA = strstr(buffStr, "$GPGGA");    //$GPGGA,154423.00,4948.74034,N,02359.70944,E,1,05A,154422.00,4948.74052,N,02359.70973,E,1,05,3.71,351.1,M,34.8,M,,*53\r\n
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	491c      	ldr	r1, [pc, #112]	; (80024f0 <parsing_GPS+0xd8>)
 8002480:	4618      	mov	r0, r3
 8002482:	f008 fd6d 	bl	800af60 <strstr>
 8002486:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 800248a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <parsing_GPS+0x8e>
		{
			parsing_GPGGA_line(str_GPGGA);
 8002492:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8002496:	f7ff fcfd 	bl	8001e94 <parsing_GPGGA_line>
			receive_gps_signal++;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <parsing_GPS+0xd4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <parsing_GPS+0xd4>)
 80024a4:	701a      	strb	r2, [r3, #0]
		}

		// Find $GPVTG in buffStr
		str_GPVTG = strstr(buffStr, "$GPVTG");    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4912      	ldr	r1, [pc, #72]	; (80024f4 <parsing_GPS+0xdc>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f008 fd57 	bl	800af60 <strstr>
 80024b2:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 80024b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <parsing_GPS+0xba>
		{
			parsing_GPVTG_line(str_GPVTG);
 80024be:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80024c2:	f7ff fed7 	bl	8002274 <parsing_GPVTG_line>
			receive_gps_signal++;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <parsing_GPS+0xd4>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <parsing_GPS+0xd4>)
 80024d0:	701a      	strb	r2, [r3, #0]
		}

		flag = 0;			// Flag = 0 means: Data was readed
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <parsing_GPS+0xcc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
	}
}
 80024d8:	bf00      	nop
 80024da:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200002c9 	.word	0x200002c9
 80024e8:	0800e278 	.word	0x0800e278
 80024ec:	2000027c 	.word	0x2000027c
 80024f0:	0800e280 	.word	0x0800e280
 80024f4:	0800e288 	.word	0x0800e288

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4906      	ldr	r1, [pc, #24]	; (800252c <__NVIC_EnableIRQ+0x34>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100

08002530 <DelayMicro>:

uint8_t GSM_INIT = 0;

// -------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <DelayMicro+0x34>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <DelayMicro+0x38>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0ddb      	lsrs	r3, r3, #23
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--);
 800254c:	bf00      	nop
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1fa      	bne.n	800254e <DelayMicro+0x1e>
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000064 	.word	0x20000064
 8002568:	ee9bfab5 	.word	0xee9bfab5

0800256c <init_GSM_uart_comunication>:

// -------------------------------------------------------------------
void init_GSM_uart_comunication(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
		// Lessons 20 : http://mypractic.ru/urok-20-interfejs-uart-v-stm32-rabota-s-nim-cherez-registry-cmsis-ispolzovanie-preryvaniya-uart.html
		USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <init_GSM_uart_comunication+0x20>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a05      	ldr	r2, [pc, #20]	; (800258c <init_GSM_uart_comunication+0x20>)
 8002576:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800257a:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ (USART1_IRQn);
 800257c:	2025      	movs	r0, #37	; 0x25
 800257e:	f7ff ffbb 	bl	80024f8 <__NVIC_EnableIRQ>
		HAL_Delay(100);
 8002582:	2064      	movs	r0, #100	; 0x64
 8002584:	f003 fc72 	bl	8005e6c <HAL_Delay>
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40013800 	.word	0x40013800

08002590 <init_gsm_module>:
// -------------------------------------------------------------------
int init_gsm_module(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
		// 1. Send command "AT" answer "OK"
		// 2. Send command "AT+CSQ" answer "+CSQ: 23,99" and "OK". 23,99 value can be from 0 to 31.
		// 3. Send command "AT+CCID" answer "89380062300517128558" and "OK"
		// 4. Send command "AT+CREG?" answer "+CREG: 1,1" and "OK"

	uint8_t answer_1 = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
	uint8_t answer_2 = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	73bb      	strb	r3, [r7, #14]
	uint8_t answer_3 = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	737b      	strb	r3, [r7, #13]
	uint8_t answer_4 = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	733b      	strb	r3, [r7, #12]

	// Waiting only first time init
	static bool init_GSM = false;
	if (init_GSM == false)
 80025a6:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <init_gsm_module+0x258>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <init_gsm_module+0x2c>
	{
		HAL_Delay(8000);     // Must be near 7-8 seconds
 80025b4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80025b8:	f003 fc58 	bl	8005e6c <HAL_Delay>
	}
	init_GSM = true;
 80025bc:	4b8a      	ldr	r3, [pc, #552]	; (80027e8 <init_gsm_module+0x258>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
	//

	uint32_t id =0;               				 // Variable for timeout
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
	bool no_answer = false;
 80025c6:	2300      	movs	r3, #0
 80025c8:	71fb      	strb	r3, [r7, #7]
	ansver_flag =0;
 80025ca:	4b88      	ldr	r3, [pc, #544]	; (80027ec <init_gsm_module+0x25c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]

	int timeout_counter = 10000;    //10000
 80025d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80025d4:	603b      	str	r3, [r7, #0]

	// 1. Send command " Turn off echo"
	HAL_UART_Transmit(&huart1 , (uint8_t *)turn_off_echo, strlen(turn_off_echo), 10000);
 80025d6:	4886      	ldr	r0, [pc, #536]	; (80027f0 <init_gsm_module+0x260>)
 80025d8:	f7fd fdba 	bl	8000150 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80025e4:	4982      	ldr	r1, [pc, #520]	; (80027f0 <init_gsm_module+0x260>)
 80025e6:	4883      	ldr	r0, [pc, #524]	; (80027f4 <init_gsm_module+0x264>)
 80025e8:	f007 fdf4 	bl	800a1d4 <HAL_UART_Transmit>

    // Waiting answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80025ec:	e020      	b.n	8002630 <init_gsm_module+0xa0>
	{
		id++;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 80025f4:	2064      	movs	r0, #100	; 0x64
 80025f6:	f7ff ff9b 	bl	8002530 <DelayMicro>

		if(ansver_flag ==1)					// waite flag from interrupt
 80025fa:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <init_gsm_module+0x25c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d110      	bne.n	8002624 <init_gsm_module+0x94>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002602:	497d      	ldr	r1, [pc, #500]	; (80027f8 <init_gsm_module+0x268>)
 8002604:	487d      	ldr	r0, [pc, #500]	; (80027fc <init_gsm_module+0x26c>)
 8002606:	f008 fcab 	bl	800af60 <strstr>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <init_gsm_module+0x94>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002610:	223c      	movs	r2, #60	; 0x3c
 8002612:	2100      	movs	r1, #0
 8002614:	4879      	ldr	r0, [pc, #484]	; (80027fc <init_gsm_module+0x26c>)
 8002616:	f008 fba1 	bl	800ad5c <memset>
				answer_1 = 1;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
				ansver_flag = 1;
 800261e:	4b73      	ldr	r3, [pc, #460]	; (80027ec <init_gsm_module+0x25c>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	d301      	bcc.n	8002630 <init_gsm_module+0xa0>
		{
			no_answer = true;               // Out from waiting answer
 800262c:	2301      	movs	r3, #1
 800262e:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002630:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <init_gsm_module+0x25c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d009      	beq.n	800264c <init_gsm_module+0xbc>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	d805      	bhi.n	800264c <init_gsm_module+0xbc>
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1d0      	bne.n	80025ee <init_gsm_module+0x5e>
		}
	}
    HAL_Delay(DELAY);
 800264c:	4b6c      	ldr	r3, [pc, #432]	; (8002800 <init_gsm_module+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fc0b 	bl	8005e6c <HAL_Delay>

	// 2. Send command "signal reception quality"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CSQ, strlen(AT_CSQ), 1000);
 8002656:	486b      	ldr	r0, [pc, #428]	; (8002804 <init_gsm_module+0x274>)
 8002658:	f7fd fd7a 	bl	8000150 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002664:	4967      	ldr	r1, [pc, #412]	; (8002804 <init_gsm_module+0x274>)
 8002666:	4863      	ldr	r0, [pc, #396]	; (80027f4 <init_gsm_module+0x264>)
 8002668:	f007 fdb4 	bl	800a1d4 <HAL_UART_Transmit>

	id = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002670:	2300      	movs	r3, #0
 8002672:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002674:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <init_gsm_module+0x25c>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800267a:	e020      	b.n	80026be <init_gsm_module+0x12e>
	{
		id++;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 8002682:	2064      	movs	r0, #100	; 0x64
 8002684:	f7ff ff54 	bl	8002530 <DelayMicro>

		if(ansver_flag ==1)
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <init_gsm_module+0x25c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d110      	bne.n	80026b2 <init_gsm_module+0x122>
		{
			if (strstr(GSM_RX_buffer, "+CSQ"))
 8002690:	495d      	ldr	r1, [pc, #372]	; (8002808 <init_gsm_module+0x278>)
 8002692:	485a      	ldr	r0, [pc, #360]	; (80027fc <init_gsm_module+0x26c>)
 8002694:	f008 fc64 	bl	800af60 <strstr>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <init_gsm_module+0x122>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800269e:	223c      	movs	r2, #60	; 0x3c
 80026a0:	2100      	movs	r1, #0
 80026a2:	4856      	ldr	r0, [pc, #344]	; (80027fc <init_gsm_module+0x26c>)
 80026a4:	f008 fb5a 	bl	800ad5c <memset>
				answer_2 = 1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 80026ac:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <init_gsm_module+0x25c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d301      	bcc.n	80026be <init_gsm_module+0x12e>
		{
			no_answer = true;               // Out from waiting answer
 80026ba:	2301      	movs	r3, #1
 80026bc:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80026be:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <init_gsm_module+0x25c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d009      	beq.n	80026da <init_gsm_module+0x14a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d805      	bhi.n	80026da <init_gsm_module+0x14a>
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1d0      	bne.n	800267c <init_gsm_module+0xec>
		}
	}

	// Waiting answer "OK" after  "+CSQ"
	id = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80026de:	2300      	movs	r3, #0
 80026e0:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <init_gsm_module+0x25c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80026e8:	e020      	b.n	800272c <init_gsm_module+0x19c>
	{
		id++;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 80026f0:	200a      	movs	r0, #10
 80026f2:	f7ff ff1d 	bl	8002530 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <init_gsm_module+0x25c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d110      	bne.n	8002720 <init_gsm_module+0x190>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 80026fe:	493e      	ldr	r1, [pc, #248]	; (80027f8 <init_gsm_module+0x268>)
 8002700:	483e      	ldr	r0, [pc, #248]	; (80027fc <init_gsm_module+0x26c>)
 8002702:	f008 fc2d 	bl	800af60 <strstr>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <init_gsm_module+0x190>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800270c:	223c      	movs	r2, #60	; 0x3c
 800270e:	2100      	movs	r1, #0
 8002710:	483a      	ldr	r0, [pc, #232]	; (80027fc <init_gsm_module+0x26c>)
 8002712:	f008 fb23 	bl	800ad5c <memset>
				answer_2 = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	73bb      	strb	r3, [r7, #14]
				ansver_flag = 1;
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <init_gsm_module+0x25c>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	d301      	bcc.n	800272c <init_gsm_module+0x19c>
		{
			no_answer = true;               // Out from waiting answer
 8002728:	2301      	movs	r3, #1
 800272a:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <init_gsm_module+0x25c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d009      	beq.n	8002748 <init_gsm_module+0x1b8>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d805      	bhi.n	8002748 <init_gsm_module+0x1b8>
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1d0      	bne.n	80026ea <init_gsm_module+0x15a>
		}
	}
	HAL_Delay(DELAY);
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <init_gsm_module+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fb8d 	bl	8005e6c <HAL_Delay>

	// 3. Send command "signal reception quality" /////////////////////
	HAL_UART_Transmit(&huart1 , (uint8_t *)CCID, strlen(CCID), 1000);
 8002752:	482e      	ldr	r0, [pc, #184]	; (800280c <init_gsm_module+0x27c>)
 8002754:	f7fd fcfc 	bl	8000150 <strlen>
 8002758:	4603      	mov	r3, r0
 800275a:	b29a      	uxth	r2, r3
 800275c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002760:	492a      	ldr	r1, [pc, #168]	; (800280c <init_gsm_module+0x27c>)
 8002762:	4824      	ldr	r0, [pc, #144]	; (80027f4 <init_gsm_module+0x264>)
 8002764:	f007 fd36 	bl	800a1d4 <HAL_UART_Transmit>

	id = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 800276c:	2300      	movs	r3, #0
 800276e:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <init_gsm_module+0x25c>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002776:	e020      	b.n	80027ba <init_gsm_module+0x22a>
	{
		id++;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	3301      	adds	r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f7ff fed6 	bl	8002530 <DelayMicro>

		if(ansver_flag ==1)
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <init_gsm_module+0x25c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d110      	bne.n	80027ae <init_gsm_module+0x21e>
		{
			if (strstr(GSM_RX_buffer, "89380"))
 800278c:	4920      	ldr	r1, [pc, #128]	; (8002810 <init_gsm_module+0x280>)
 800278e:	481b      	ldr	r0, [pc, #108]	; (80027fc <init_gsm_module+0x26c>)
 8002790:	f008 fbe6 	bl	800af60 <strstr>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <init_gsm_module+0x21e>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 800279a:	223c      	movs	r2, #60	; 0x3c
 800279c:	2100      	movs	r1, #0
 800279e:	4817      	ldr	r0, [pc, #92]	; (80027fc <init_gsm_module+0x26c>)
 80027a0:	f008 fadc 	bl	800ad5c <memset>
				answer_3 = 1;
 80027a4:	2301      	movs	r3, #1
 80027a6:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <init_gsm_module+0x25c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d301      	bcc.n	80027ba <init_gsm_module+0x22a>
		{
			no_answer = true;               // Out from waiting answer
 80027b6:	2301      	movs	r3, #1
 80027b8:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <init_gsm_module+0x25c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d009      	beq.n	80027d6 <init_gsm_module+0x246>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d805      	bhi.n	80027d6 <init_gsm_module+0x246>
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1d0      	bne.n	8002778 <init_gsm_module+0x1e8>
		}
	}

	// Waiting answer "OK"
	id = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 80027da:	2300      	movs	r3, #0
 80027dc:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <init_gsm_module+0x25c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80027e4:	e037      	b.n	8002856 <init_gsm_module+0x2c6>
 80027e6:	bf00      	nop
 80027e8:	200002be 	.word	0x200002be
 80027ec:	200002bc 	.word	0x200002bc
 80027f0:	20000004 	.word	0x20000004
 80027f4:	20000ed8 	.word	0x20000ed8
 80027f8:	0800e290 	.word	0x0800e290
 80027fc:	20000280 	.word	0x20000280
 8002800:	20000000 	.word	0x20000000
 8002804:	2000000c 	.word	0x2000000c
 8002808:	0800e294 	.word	0x0800e294
 800280c:	20000018 	.word	0x20000018
 8002810:	0800e29c 	.word	0x0800e29c
	{
		id++;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 800281a:	200a      	movs	r0, #10
 800281c:	f7ff fe88 	bl	8002530 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 8002820:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <init_gsm_module+0x410>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d110      	bne.n	800284a <init_gsm_module+0x2ba>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002828:	495e      	ldr	r1, [pc, #376]	; (80029a4 <init_gsm_module+0x414>)
 800282a:	485f      	ldr	r0, [pc, #380]	; (80029a8 <init_gsm_module+0x418>)
 800282c:	f008 fb98 	bl	800af60 <strstr>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <init_gsm_module+0x2ba>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002836:	223c      	movs	r2, #60	; 0x3c
 8002838:	2100      	movs	r1, #0
 800283a:	485b      	ldr	r0, [pc, #364]	; (80029a8 <init_gsm_module+0x418>)
 800283c:	f008 fa8e 	bl	800ad5c <memset>
				answer_3 = 1;
 8002840:	2301      	movs	r3, #1
 8002842:	737b      	strb	r3, [r7, #13]
				ansver_flag = 1;
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <init_gsm_module+0x410>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d301      	bcc.n	8002856 <init_gsm_module+0x2c6>
		{
			no_answer = true;               // Out from waiting answer
 8002852:	2301      	movs	r3, #1
 8002854:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002856:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <init_gsm_module+0x410>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d009      	beq.n	8002872 <init_gsm_module+0x2e2>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d805      	bhi.n	8002872 <init_gsm_module+0x2e2>
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1d0      	bne.n	8002814 <init_gsm_module+0x284>
		}
	}
	HAL_Delay(DELAY);
 8002872:	4b4e      	ldr	r3, [pc, #312]	; (80029ac <init_gsm_module+0x41c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 faf8 	bl	8005e6c <HAL_Delay>

	// 4. Send command "Check registration in network"
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CREG, strlen(AT_CREG), 1000);
 800287c:	484c      	ldr	r0, [pc, #304]	; (80029b0 <init_gsm_module+0x420>)
 800287e:	f7fd fc67 	bl	8000150 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	4949      	ldr	r1, [pc, #292]	; (80029b0 <init_gsm_module+0x420>)
 800288c:	4849      	ldr	r0, [pc, #292]	; (80029b4 <init_gsm_module+0x424>)
 800288e:	f007 fca1 	bl	800a1d4 <HAL_UART_Transmit>

	id = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002896:	2300      	movs	r3, #0
 8002898:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <init_gsm_module+0x410>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80028a0:	e020      	b.n	80028e4 <init_gsm_module+0x354>
	{
		id++;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
		//HAL_Delay(1);
		DelayMicro(100);
 80028a8:	2064      	movs	r0, #100	; 0x64
 80028aa:	f7ff fe41 	bl	8002530 <DelayMicro>

		if(ansver_flag == 1)
 80028ae:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <init_gsm_module+0x410>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d110      	bne.n	80028d8 <init_gsm_module+0x348>
		{
			if (strstr(GSM_RX_buffer, "+CREG: 0,1"))
 80028b6:	4940      	ldr	r1, [pc, #256]	; (80029b8 <init_gsm_module+0x428>)
 80028b8:	483b      	ldr	r0, [pc, #236]	; (80029a8 <init_gsm_module+0x418>)
 80028ba:	f008 fb51 	bl	800af60 <strstr>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <init_gsm_module+0x348>
			{
				// answer  89380062300517128558    // My ID
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 80028c4:	223c      	movs	r2, #60	; 0x3c
 80028c6:	2100      	movs	r1, #0
 80028c8:	4837      	ldr	r0, [pc, #220]	; (80029a8 <init_gsm_module+0x418>)
 80028ca:	f008 fa47 	bl	800ad5c <memset>
				answer_4 = 1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <init_gsm_module+0x410>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d301      	bcc.n	80028e4 <init_gsm_module+0x354>
		{
			no_answer = true;               // Out from waiting answer
 80028e0:	2301      	movs	r3, #1
 80028e2:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <init_gsm_module+0x410>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d009      	beq.n	8002900 <init_gsm_module+0x370>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d805      	bhi.n	8002900 <init_gsm_module+0x370>
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f083 0301 	eor.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1d0      	bne.n	80028a2 <init_gsm_module+0x312>
		}
	}

	// Waiting for answer "OK"
	id = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
	no_answer = false;
 8002904:	2300      	movs	r3, #0
 8002906:	71fb      	strb	r3, [r7, #7]
	ansver_flag = 0;
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <init_gsm_module+0x410>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 800290e:	e020      	b.n	8002952 <init_gsm_module+0x3c2>
	{
		id++;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	3301      	adds	r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
		DelayMicro(10);
 8002916:	200a      	movs	r0, #10
 8002918:	f7ff fe0a 	bl	8002530 <DelayMicro>
		//HAL_Delay(1);

		if(ansver_flag ==1)
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <init_gsm_module+0x410>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d110      	bne.n	8002946 <init_gsm_module+0x3b6>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002924:	491f      	ldr	r1, [pc, #124]	; (80029a4 <init_gsm_module+0x414>)
 8002926:	4820      	ldr	r0, [pc, #128]	; (80029a8 <init_gsm_module+0x418>)
 8002928:	f008 fb1a 	bl	800af60 <strstr>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <init_gsm_module+0x3b6>
			{
				// answer "+CSQ: 23,99"
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002932:	223c      	movs	r2, #60	; 0x3c
 8002934:	2100      	movs	r1, #0
 8002936:	481c      	ldr	r0, [pc, #112]	; (80029a8 <init_gsm_module+0x418>)
 8002938:	f008 fa10 	bl	800ad5c <memset>
				answer_4 = 1;
 800293c:	2301      	movs	r3, #1
 800293e:	733b      	strb	r3, [r7, #12]
				ansver_flag = 1;
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <init_gsm_module+0x410>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
			}
		}
		if(id  >= timeout_counter)						// Timeout is goon
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d301      	bcc.n	8002952 <init_gsm_module+0x3c2>
		{
			no_answer = true;               // Out from waiting answer
 800294e:	2301      	movs	r3, #1
 8002950:	71fb      	strb	r3, [r7, #7]
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <init_gsm_module+0x410>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d009      	beq.n	800296e <init_gsm_module+0x3de>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d805      	bhi.n	800296e <init_gsm_module+0x3de>
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1d0      	bne.n	8002910 <init_gsm_module+0x380>
		}
	}
	HAL_Delay(DELAY);
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <init_gsm_module+0x41c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fa7a 	bl	8005e6c <HAL_Delay>
	////////////////////////////////////////////////////////////////


	if(answer_1 && answer_2 && answer_3 && answer_4)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <init_gsm_module+0x404>
 800297e:	7bbb      	ldrb	r3, [r7, #14]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <init_gsm_module+0x404>
 8002984:	7b7b      	ldrb	r3, [r7, #13]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <init_gsm_module+0x404>
 800298a:	7b3b      	ldrb	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <init_gsm_module+0x404>
	{
		return 0;            // If init OK
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <init_gsm_module+0x406>
	}
	else
	{
		return 1;
 8002994:	2301      	movs	r3, #1
	}
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200002bc 	.word	0x200002bc
 80029a4:	0800e290 	.word	0x0800e290
 80029a8:	20000280 	.word	0x20000280
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000024 	.word	0x20000024
 80029b4:	20000ed8 	.word	0x20000ed8
 80029b8:	0800e2a4 	.word	0x0800e2a4

080029bc <call_on_mu_number>:
// -------------------------------------------------------------------
int call_on_mu_number(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
	uint32_t id =0;               				 // Variable for timeout
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 80029c6:	2300      	movs	r3, #0
 80029c8:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 80029ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80029ce:	607b      	str	r3, [r7, #4]

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_to_my_mobile_number, strlen(call_to_my_mobile_number), 1000);
 80029d0:	4822      	ldr	r0, [pc, #136]	; (8002a5c <call_on_mu_number+0xa0>)
 80029d2:	f7fd fbbd 	bl	8000150 <strlen>
 80029d6:	4603      	mov	r3, r0
 80029d8:	b29a      	uxth	r2, r3
 80029da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029de:	491f      	ldr	r1, [pc, #124]	; (8002a5c <call_on_mu_number+0xa0>)
 80029e0:	481f      	ldr	r0, [pc, #124]	; (8002a60 <call_on_mu_number+0xa4>)
 80029e2:	f007 fbf7 	bl	800a1d4 <HAL_UART_Transmit>

	ansver_flag = 0;
 80029e6:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <call_on_mu_number+0xa8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 80029ec:	2300      	movs	r3, #0
 80029ee:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 80029f0:	e022      	b.n	8002a38 <call_on_mu_number+0x7c>
	{
		id++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3301      	adds	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
	    DelayMicro(10);
 80029f8:	200a      	movs	r0, #10
 80029fa:	f7ff fd99 	bl	8002530 <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <call_on_mu_number+0xa8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d110      	bne.n	8002a28 <call_on_mu_number+0x6c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 8002a06:	4918      	ldr	r1, [pc, #96]	; (8002a68 <call_on_mu_number+0xac>)
 8002a08:	4818      	ldr	r0, [pc, #96]	; (8002a6c <call_on_mu_number+0xb0>)
 8002a0a:	f008 faa9 	bl	800af60 <strstr>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <call_on_mu_number+0x6c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002a14:	223c      	movs	r2, #60	; 0x3c
 8002a16:	2100      	movs	r1, #0
 8002a18:	4814      	ldr	r0, [pc, #80]	; (8002a6c <call_on_mu_number+0xb0>)
 8002a1a:	f008 f99f 	bl	800ad5c <memset>
	    		ansver_flag = 1;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <call_on_mu_number+0xa8>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
	    		return 1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e015      	b.n	8002a54 <call_on_mu_number+0x98>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d303      	bcc.n	8002a38 <call_on_mu_number+0x7c>
	    {
	    	no_answer = true;               // Out from waiting answer
 8002a30:	2301      	movs	r3, #1
 8002a32:	72fb      	strb	r3, [r7, #11]
	    	return 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e00d      	b.n	8002a54 <call_on_mu_number+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <call_on_mu_number+0xa8>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d009      	beq.n	8002a54 <call_on_mu_number+0x98>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d805      	bhi.n	8002a54 <call_on_mu_number+0x98>
 8002a48:	7afb      	ldrb	r3, [r7, #11]
 8002a4a:	f083 0301 	eor.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ce      	bne.n	80029f2 <call_on_mu_number+0x36>
	    }
	}
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000040 	.word	0x20000040
 8002a60:	20000ed8 	.word	0x20000ed8
 8002a64:	200002bc 	.word	0x200002bc
 8002a68:	0800e290 	.word	0x0800e290
 8002a6c:	20000280 	.word	0x20000280

08002a70 <call_on_number>:
// -------------------------------------------------------------------

int call_on_number(char *number, uint8_t size_number)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
	uint32_t id =0;               				 // Variable for timeout
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool no_answer = false;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	int timeout_counter = 10000;
 8002a86:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24

	//char call_to_my_mobile_number[]="ATD+380931482354;\r\n";
	char call_command[21]="ATD+ ";
 8002a8c:	4a55      	ldr	r2, [pc, #340]	; (8002be4 <call_on_number+0x174>)
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a96:	6018      	str	r0, [r3, #0]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	8019      	strh	r1, [r3, #0]
 8002a9c:	f107 0312 	add.w	r3, r7, #18
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	f8c3 200b 	str.w	r2, [r3, #11]
	char end_call_command[] = ";\r\n";
 8002aac:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <call_on_number+0x178>)
 8002aae:	60bb      	str	r3, [r7, #8]
	// 1. Find end of string call_command
	uint8_t i = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 8002ab6:	e004      	b.n	8002ac2 <call_on_number+0x52>
	{
		i++;
 8002ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002abc:	3301      	adds	r3, #1
 8002abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(call_command[i] != '\0')
 8002ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ac6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002aca:	4413      	add	r3, r2
 8002acc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f1      	bne.n	8002ab8 <call_on_number+0x48>
	}
	// 2. Add number to end of string
	uint8_t k = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 8002ada:	e015      	b.n	8002b08 <call_on_number+0x98>
	{
		call_command[i] = number[k];
 8002adc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002aee:	440b      	add	r3, r1
 8002af0:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 8002af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002af8:	3301      	adds	r3, #1
 8002afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		k++;
 8002afe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b02:	3301      	adds	r3, #1
 8002b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while(k != size_number)
 8002b08:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d1e4      	bne.n	8002adc <call_on_number+0x6c>
	}
	// 3. Add ';\r\n' to the end of string
	for(k = 0; k <= 4; k ++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b18:	e017      	b.n	8002b4a <call_on_number+0xda>
	{
		call_command[i] = end_call_command[k];
 8002b1a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b22:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b26:	440a      	add	r2, r1
 8002b28:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002b2c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b30:	440b      	add	r3, r1
 8002b32:	f803 2c24 	strb.w	r2, [r3, #-36]
		i++;
 8002b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for(k = 0; k <= 4; k ++)
 8002b40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b44:	3301      	adds	r3, #1
 8002b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d9e3      	bls.n	8002b1a <call_on_number+0xaa>
	}

	// 4. Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)call_command, strlen(call_command), 1000);
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fafa 	bl	8000150 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	f107 010c 	add.w	r1, r7, #12
 8002b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b68:	4820      	ldr	r0, [pc, #128]	; (8002bec <call_on_number+0x17c>)
 8002b6a:	f007 fb33 	bl	800a1d4 <HAL_UART_Transmit>

	ansver_flag = 0;
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <call_on_number+0x180>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002b74:	e023      	b.n	8002bbe <call_on_number+0x14e>
	{
		id++;
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	3301      	adds	r3, #1
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	    DelayMicro(10);
 8002b7c:	200a      	movs	r0, #10
 8002b7e:	f7ff fcd7 	bl	8002530 <DelayMicro>

	    if(ansver_flag ==1)					// waite flag from interrupt
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <call_on_number+0x180>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d110      	bne.n	8002bac <call_on_number+0x13c>
	    {
	    	if (strstr(GSM_RX_buffer, "OK"))
 8002b8a:	491a      	ldr	r1, [pc, #104]	; (8002bf4 <call_on_number+0x184>)
 8002b8c:	481a      	ldr	r0, [pc, #104]	; (8002bf8 <call_on_number+0x188>)
 8002b8e:	f008 f9e7 	bl	800af60 <strstr>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <call_on_number+0x13c>
	    	{
	    		memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002b98:	223c      	movs	r2, #60	; 0x3c
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4816      	ldr	r0, [pc, #88]	; (8002bf8 <call_on_number+0x188>)
 8002b9e:	f008 f8dd 	bl	800ad5c <memset>
	    		ansver_flag = 1;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <call_on_number+0x180>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
	    		return 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e017      	b.n	8002bdc <call_on_number+0x16c>
	    	}
	    }
	    if(id  >= timeout_counter)						// Timeout is goon
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d304      	bcc.n	8002bbe <call_on_number+0x14e>
	    {
	    	no_answer = true;               // Out from waiting answer
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	    	return 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e00e      	b.n	8002bdc <call_on_number+0x16c>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <call_on_number+0x180>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d00a      	beq.n	8002bdc <call_on_number+0x16c>
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d806      	bhi.n	8002bdc <call_on_number+0x16c>
 8002bce:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1cc      	bne.n	8002b76 <call_on_number+0x106>
	    }
	}
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	0800e2b0 	.word	0x0800e2b0
 8002be8:	000a0d3b 	.word	0x000a0d3b
 8002bec:	20000ed8 	.word	0x20000ed8
 8002bf0:	200002bc 	.word	0x200002bc
 8002bf4:	0800e290 	.word	0x0800e290
 8002bf8:	20000280 	.word	0x20000280

08002bfc <end_of_call>:
// -------------------------------------------------------------------
int end_of_call(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
	uint32_t id =0;														// Variable for timeout
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 8002c06:	2300      	movs	r3, #0
 8002c08:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 8002c0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c0e:	607b      	str	r3, [r7, #4]

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_END_OF_CALL, strlen(AT_END_OF_CALL), 1000);
 8002c10:	4822      	ldr	r0, [pc, #136]	; (8002c9c <end_of_call+0xa0>)
 8002c12:	f7fd fa9d 	bl	8000150 <strlen>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1e:	491f      	ldr	r1, [pc, #124]	; (8002c9c <end_of_call+0xa0>)
 8002c20:	481f      	ldr	r0, [pc, #124]	; (8002ca0 <end_of_call+0xa4>)
 8002c22:	f007 fad7 	bl	800a1d4 <HAL_UART_Transmit>

	ansver_flag = 0;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <end_of_call+0xa8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002c30:	e022      	b.n	8002c78 <end_of_call+0x7c>
	{
		id++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
		DelayMicro(100);
 8002c38:	2064      	movs	r0, #100	; 0x64
 8002c3a:	f7ff fc79 	bl	8002530 <DelayMicro>

		if(ansver_flag ==1)												// Waiting flag from interrupt
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <end_of_call+0xa8>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d110      	bne.n	8002c68 <end_of_call+0x6c>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002c46:	4918      	ldr	r1, [pc, #96]	; (8002ca8 <end_of_call+0xac>)
 8002c48:	4818      	ldr	r0, [pc, #96]	; (8002cac <end_of_call+0xb0>)
 8002c4a:	f008 f989 	bl	800af60 <strstr>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <end_of_call+0x6c>
		    {
		    	memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002c54:	223c      	movs	r2, #60	; 0x3c
 8002c56:	2100      	movs	r1, #0
 8002c58:	4814      	ldr	r0, [pc, #80]	; (8002cac <end_of_call+0xb0>)
 8002c5a:	f008 f87f 	bl	800ad5c <memset>
		    	ansver_flag = 1;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <end_of_call+0xa8>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
		    	return 1;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e015      	b.n	8002c94 <end_of_call+0x98>
		    }

		}

		if(id  >= timeout_counter)										// Timeout is goon
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d303      	bcc.n	8002c78 <end_of_call+0x7c>
		{
			no_answer = true;											// Out from waiting answer
 8002c70:	2301      	movs	r3, #1
 8002c72:	72fb      	strb	r3, [r7, #11]
			return 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e00d      	b.n	8002c94 <end_of_call+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <end_of_call+0xa8>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d009      	beq.n	8002c94 <end_of_call+0x98>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d805      	bhi.n	8002c94 <end_of_call+0x98>
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ce      	bne.n	8002c32 <end_of_call+0x36>
		}
	}
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000030 	.word	0x20000030
 8002ca0:	20000ed8 	.word	0x20000ed8
 8002ca4:	200002bc 	.word	0x200002bc
 8002ca8:	0800e290 	.word	0x0800e290
 8002cac:	20000280 	.word	0x20000280

08002cb0 <accepts_on_incomming_call>:
// -------------------------------------------------------------------
int accepts_on_incomming_call(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
	uint32_t id =0;														// Variable for timeout
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
	bool no_answer = false;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	72fb      	strb	r3, [r7, #11]
	int timeout_counter = 10000;
 8002cbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8002cc2:	607b      	str	r3, [r7, #4]

	// Call on number
	HAL_UART_Transmit(&huart1 , (uint8_t *)ACCEPTS_INCOMMING_CALL, strlen(ACCEPTS_INCOMMING_CALL), 1000);
 8002cc4:	4822      	ldr	r0, [pc, #136]	; (8002d50 <accepts_on_incomming_call+0xa0>)
 8002cc6:	f7fd fa43 	bl	8000150 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	491f      	ldr	r1, [pc, #124]	; (8002d50 <accepts_on_incomming_call+0xa0>)
 8002cd4:	481f      	ldr	r0, [pc, #124]	; (8002d54 <accepts_on_incomming_call+0xa4>)
 8002cd6:	f007 fa7d 	bl	800a1d4 <HAL_UART_Transmit>

	ansver_flag = 0;
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <accepts_on_incomming_call+0xa8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	72fb      	strb	r3, [r7, #11]

	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002ce4:	e022      	b.n	8002d2c <accepts_on_incomming_call+0x7c>
	{
		id++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
		DelayMicro(100);
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	f7ff fc1f 	bl	8002530 <DelayMicro>

		if(ansver_flag ==1)														// waiting flag from interrupt
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <accepts_on_incomming_call+0xa8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d110      	bne.n	8002d1c <accepts_on_incomming_call+0x6c>
		{
			if (strstr(GSM_RX_buffer, "OK"))
 8002cfa:	4918      	ldr	r1, [pc, #96]	; (8002d5c <accepts_on_incomming_call+0xac>)
 8002cfc:	4818      	ldr	r0, [pc, #96]	; (8002d60 <accepts_on_incomming_call+0xb0>)
 8002cfe:	f008 f92f 	bl	800af60 <strstr>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <accepts_on_incomming_call+0x6c>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002d08:	223c      	movs	r2, #60	; 0x3c
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4814      	ldr	r0, [pc, #80]	; (8002d60 <accepts_on_incomming_call+0xb0>)
 8002d0e:	f008 f825 	bl	800ad5c <memset>
				ansver_flag = 1;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <accepts_on_incomming_call+0xa8>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
				return 1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e015      	b.n	8002d48 <accepts_on_incomming_call+0x98>
			}
		}
		if(id  >= timeout_counter)												// Timeout is goon
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d303      	bcc.n	8002d2c <accepts_on_incomming_call+0x7c>
		{
			no_answer = true;													// Out from waiting answer
 8002d24:	2301      	movs	r3, #1
 8002d26:	72fb      	strb	r3, [r7, #11]
			return 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e00d      	b.n	8002d48 <accepts_on_incomming_call+0x98>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <accepts_on_incomming_call+0xa8>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d009      	beq.n	8002d48 <accepts_on_incomming_call+0x98>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d805      	bhi.n	8002d48 <accepts_on_incomming_call+0x98>
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ce      	bne.n	8002ce6 <accepts_on_incomming_call+0x36>
		}
	}
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000038 	.word	0x20000038
 8002d54:	20000ed8 	.word	0x20000ed8
 8002d58:	200002bc 	.word	0x200002bc
 8002d5c:	0800e290 	.word	0x0800e290
 8002d60:	20000280 	.word	0x20000280

08002d64 <wait_ansver_after_make_call_in_blok_mode>:
// -------------------------------------------------------------------
//	 // waite answer "BUSY" from GSM    WORK OK
int wait_ansver_after_make_call_in_blok_mode(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	while (ansver_flag != 1)
 8002d68:	bf00      	nop
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d1fb      	bne.n	8002d6a <wait_ansver_after_make_call_in_blok_mode+0x6>
	{
		// waite for answer
	}
	if(ansver_flag == 1)
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d132      	bne.n	8002de0 <wait_ansver_after_make_call_in_blok_mode+0x7c>
	{
		if (strstr(GSM_RX_buffer, "BUSY"))                        // Звінок збитий  // Work OK
 8002d7a:	491b      	ldr	r1, [pc, #108]	; (8002de8 <wait_ansver_after_make_call_in_blok_mode+0x84>)
 8002d7c:	481b      	ldr	r0, [pc, #108]	; (8002dec <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002d7e:	f008 f8ef 	bl	800af60 <strstr>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <wait_ansver_after_make_call_in_blok_mode+0x38>
		{
			memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002d88:	223c      	movs	r2, #60	; 0x3c
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4817      	ldr	r0, [pc, #92]	; (8002dec <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002d8e:	f007 ffe5 	bl	800ad5c <memset>
			ansver_flag = 1;
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
			return 1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e021      	b.n	8002de0 <wait_ansver_after_make_call_in_blok_mode+0x7c>
		}

		if (strstr(GSM_RX_buffer, "NO ANSWER"))					  // Не відповідає  // Work OK
 8002d9c:	4914      	ldr	r1, [pc, #80]	; (8002df0 <wait_ansver_after_make_call_in_blok_mode+0x8c>)
 8002d9e:	4813      	ldr	r0, [pc, #76]	; (8002dec <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002da0:	f008 f8de 	bl	800af60 <strstr>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <wait_ansver_after_make_call_in_blok_mode+0x5a>
		{
			memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002daa:	223c      	movs	r2, #60	; 0x3c
 8002dac:	2100      	movs	r1, #0
 8002dae:	480f      	ldr	r0, [pc, #60]	; (8002dec <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002db0:	f007 ffd4 	bl	800ad5c <memset>
			ansver_flag = 1;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
			return 2;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e010      	b.n	8002de0 <wait_ansver_after_make_call_in_blok_mode+0x7c>
		}

		if (strstr(GSM_RX_buffer, "NO CARRIER"))					  // Трубка піднята
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <wait_ansver_after_make_call_in_blok_mode+0x90>)
 8002dc0:	480a      	ldr	r0, [pc, #40]	; (8002dec <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002dc2:	f008 f8cd 	bl	800af60 <strstr>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <wait_ansver_after_make_call_in_blok_mode+0x7c>
		{
			memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002dcc:	223c      	movs	r2, #60	; 0x3c
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4806      	ldr	r0, [pc, #24]	; (8002dec <wait_ansver_after_make_call_in_blok_mode+0x88>)
 8002dd2:	f007 ffc3 	bl	800ad5c <memset>
			ansver_flag = 1;
 8002dd6:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <wait_ansver_after_make_call_in_blok_mode+0x80>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
			return 3;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e7ff      	b.n	8002de0 <wait_ansver_after_make_call_in_blok_mode+0x7c>
		}
	}
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200002bc 	.word	0x200002bc
 8002de8:	0800e2c8 	.word	0x0800e2c8
 8002dec:	20000280 	.word	0x20000280
 8002df0:	0800e2d0 	.word	0x0800e2d0
 8002df4:	0800e2dc 	.word	0x0800e2dc

08002df8 <wait_incoming_call>:
 * 		0 - Error(Timeout)
 * 		1 - No input call
 * 		2 - input call
 */
int wait_incoming_call(char *incoming_number)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	uint32_t id =0;											// Variable for timeout
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
	bool no_answer = false;
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
	int timeout_counter = 10000;							// Variable for compare timeout
 8002e08:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e0c:	61bb      	str	r3, [r7, #24]
	ansver_flag = 0;
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <wait_incoming_call+0x1b0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
	no_answer = false;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]

	// Send check command
	char AT_CLCC[] = "AT+CLCC\r\n";
 8002e18:	4a64      	ldr	r2, [pc, #400]	; (8002fac <wait_incoming_call+0x1b4>)
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e20:	c303      	stmia	r3!, {r0, r1}
 8002e22:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1 , (uint8_t *)AT_CLCC, strlen(AT_CLCC), 1000);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd f991 	bl	8000150 <strlen>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	f107 010c 	add.w	r1, r7, #12
 8002e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3a:	485d      	ldr	r0, [pc, #372]	; (8002fb0 <wait_incoming_call+0x1b8>)
 8002e3c:	f007 f9ca 	bl	800a1d4 <HAL_UART_Transmit>

	// Wait for an answer
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002e40:	e09e      	b.n	8002f80 <wait_incoming_call+0x188>
	{
		id++;																	// Increment timeout
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
		DelayMicro(10);
 8002e48:	200a      	movs	r0, #10
 8002e4a:	f7ff fb71 	bl	8002530 <DelayMicro>

		if(ansver_flag == 1)													// Waiting flag from interrupt
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <wait_incoming_call+0x1b0>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f040 808c 	bne.w	8002f70 <wait_incoming_call+0x178>
		{
			if (strstr(GSM_RX_buffer, "OK"))   					// NO incoming call
 8002e58:	4956      	ldr	r1, [pc, #344]	; (8002fb4 <wait_incoming_call+0x1bc>)
 8002e5a:	4857      	ldr	r0, [pc, #348]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002e5c:	f008 f880 	bl	800af60 <strstr>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <wait_incoming_call+0x82>
			{
				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));
 8002e66:	223c      	movs	r2, #60	; 0x3c
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4853      	ldr	r0, [pc, #332]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002e6c:	f007 ff76 	bl	800ad5c <memset>
				ansver_flag = 1;
 8002e70:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <wait_incoming_call+0x1b0>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
				return 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e091      	b.n	8002f9e <wait_incoming_call+0x1a6>
			}
			uint8_t find_edigit_counter = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			//+CLCC: 1,1,4,0,0,"+380931482354",145,""
			if(strstr(GSM_RX_buffer, "+CLCC: 1,1,4,0,0,"))
 8002e80:	494e      	ldr	r1, [pc, #312]	; (8002fbc <wait_incoming_call+0x1c4>)
 8002e82:	484d      	ldr	r0, [pc, #308]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002e84:	f008 f86c 	bl	800af60 <strstr>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d05e      	beq.n	8002f4c <wait_incoming_call+0x154>
			{
				// Parsing number
				uint8_t i = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				for(i = 0; i <= sizeof(GSM_RX_buffer); i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e9a:	e049      	b.n	8002f30 <wait_incoming_call+0x138>
				{
					if(GSM_RX_buffer[i] == '+')										// Find start number
 8002e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	2b2b      	cmp	r3, #43	; 0x2b
 8002ea6:	d13e      	bne.n	8002f26 <wait_incoming_call+0x12e>
					{
						find_edigit_counter ++;										// We have two '+' sign because we must miss first sign
 8002ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eac:	3301      	adds	r3, #1
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						if(find_edigit_counter == 2)
 8002eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d135      	bne.n	8002f26 <wait_incoming_call+0x12e>
						{
							i++;
 8002eba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
							uint8_t k = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							uint8_t j = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 3020 	strb.w	r3, [r7, #32]
							for(j = 0; j<= 12; j ++)								// 12 - mobile number long
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3020 	strb.w	r3, [r7, #32]
 8002ed6:	e022      	b.n	8002f1e <wait_incoming_call+0x126>
							{
								if(j == 12)											// Add '\0' in last element
 8002ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d106      	bne.n	8002eee <wait_incoming_call+0xf6>
								{
									incoming_number[k] = '\0';
 8002ee0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e012      	b.n	8002f14 <wait_incoming_call+0x11c>
								}
								else
								{
									incoming_number[k] = GSM_RX_buffer[i];			// Copy
 8002eee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002ef2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	440b      	add	r3, r1
 8002efa:	492f      	ldr	r1, [pc, #188]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002efc:	5c8a      	ldrb	r2, [r1, r2]
 8002efe:	701a      	strb	r2, [r3, #0]
									i++;
 8002f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f04:	3301      	adds	r3, #1
 8002f06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
									k++;
 8002f0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							for(j = 0; j<= 12; j ++)								// 12 - mobile number long
 8002f14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f887 3020 	strb.w	r3, [r7, #32]
 8002f1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d9d8      	bls.n	8002ed8 <wait_incoming_call+0xe0>
				for(i = 0; i <= sizeof(GSM_RX_buffer); i++)
 8002f26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f34:	2b3c      	cmp	r3, #60	; 0x3c
 8002f36:	d9b1      	bls.n	8002e9c <wait_incoming_call+0xa4>
							}
						}
					}
				}

				memset(GSM_RX_buffer, 0, sizeof(GSM_RX_buffer));					// Сlean the buffer
 8002f38:	223c      	movs	r2, #60	; 0x3c
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	481e      	ldr	r0, [pc, #120]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002f3e:	f007 ff0d 	bl	800ad5c <memset>
				ansver_flag = 1;
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <wait_incoming_call+0x1b0>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]

				return 2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e028      	b.n	8002f9e <wait_incoming_call+0x1a6>
			}
			//+CLCC: 1,1,0,0,0,"+380931482354",145,""
			if(strstr(GSM_RX_buffer, "+CLCC: 1,1,0,0,0,"))		// Піднята трубка
 8002f4c:	491c      	ldr	r1, [pc, #112]	; (8002fc0 <wait_incoming_call+0x1c8>)
 8002f4e:	481a      	ldr	r0, [pc, #104]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002f50:	f008 f806 	bl	800af60 <strstr>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <wait_incoming_call+0x166>
			{
				return 3;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e01f      	b.n	8002f9e <wait_incoming_call+0x1a6>
			}

			if(strstr(GSM_RX_buffer, "+CLCC: 1,0,0,0,0,"))		// Піднята трубка вихідного звінка з GSM
 8002f5e:	4919      	ldr	r1, [pc, #100]	; (8002fc4 <wait_incoming_call+0x1cc>)
 8002f60:	4815      	ldr	r0, [pc, #84]	; (8002fb8 <wait_incoming_call+0x1c0>)
 8002f62:	f007 fffd 	bl	800af60 <strstr>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <wait_incoming_call+0x178>
			{
				return 4;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e016      	b.n	8002f9e <wait_incoming_call+0x1a6>
			}

		}

		if(id  >= timeout_counter)													// Out of timeout
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d303      	bcc.n	8002f80 <wait_incoming_call+0x188>
		{
			no_answer = true;														 // Out from waiting answer
 8002f78:	2301      	movs	r3, #1
 8002f7a:	77fb      	strb	r3, [r7, #31]

			return 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e00e      	b.n	8002f9e <wait_incoming_call+0x1a6>
	while ((ansver_flag != 1) && (id <= timeout_counter) && (no_answer == false))
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <wait_incoming_call+0x1b0>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d00a      	beq.n	8002f9e <wait_incoming_call+0x1a6>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d806      	bhi.n	8002f9e <wait_incoming_call+0x1a6>
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	f083 0301 	eor.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f af52 	bne.w	8002e42 <wait_incoming_call+0x4a>
		}
	}
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200002bc 	.word	0x200002bc
 8002fac:	0800e324 	.word	0x0800e324
 8002fb0:	20000ed8 	.word	0x20000ed8
 8002fb4:	0800e290 	.word	0x0800e290
 8002fb8:	20000280 	.word	0x20000280
 8002fbc:	0800e2e8 	.word	0x0800e2e8
 8002fc0:	0800e2fc 	.word	0x0800e2fc
 8002fc4:	0800e310 	.word	0x0800e310

08002fc8 <read_T_and_H_SI7021>:
		memset(str, 0 , sizeof(str));
	#endif
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
	uint8_t size=0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 8002fde:	23ff      	movs	r3, #255	; 0xff
 8002fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	603b      	str	r3, [r7, #0]

	// Read temperature
	STATUS = r_single_Si7021(&data, Temperature);
 8002fea:	463b      	mov	r3, r7
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f95a 	bl	80032a8 <r_single_Si7021>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8002ffa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d000      	beq.n	8003004 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 8003002:	e7fe      	b.n	8003002 <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe f842 	bl	8001094 <__aeabi_fcmplt>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <read_T_and_H_SI7021+0x52>
 8003016:	4b52      	ldr	r3, [pc, #328]	; (8003160 <read_T_and_H_SI7021+0x198>)
 8003018:	e000      	b.n	800301c <read_T_and_H_SI7021+0x54>
 800301a:	4b52      	ldr	r3, [pc, #328]	; (8003164 <read_T_and_H_SI7021+0x19c>)
 800301c:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe f835 	bl	8001094 <__aeabi_fcmplt>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <read_T_and_H_SI7021+0x70>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003036:	e000      	b.n	800303a <read_T_and_H_SI7021+0x72>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 800303c:	69f8      	ldr	r0, [r7, #28]
 800303e:	f7fe f851 	bl	80010e4 <__aeabi_f2iz>
 8003042:	4603      	mov	r3, r0
 8003044:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 8003046:	683c      	ldr	r4, [r7, #0]
 8003048:	69b8      	ldr	r0, [r7, #24]
 800304a:	f7fd fe31 	bl	8000cb0 <__aeabi_i2f>
 800304e:	4603      	mov	r3, r0
 8003050:	4619      	mov	r1, r3
 8003052:	4620      	mov	r0, r4
 8003054:	f7fd fd76 	bl	8000b44 <__aeabi_fsub>
 8003058:	4603      	mov	r3, r0
 800305a:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 800305c:	4942      	ldr	r1, [pc, #264]	; (8003168 <read_T_and_H_SI7021+0x1a0>)
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7fd fe7a 	bl	8000d58 <__aeabi_fmul>
 8003064:	4603      	mov	r3, r0
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd f9de 	bl	8000428 <__aeabi_f2d>
 800306c:	4603      	mov	r3, r0
 800306e:	460c      	mov	r4, r1
 8003070:	4618      	mov	r0, r3
 8003072:	4621      	mov	r1, r4
 8003074:	f00b f898 	bl	800e1a8 <trunc>
 8003078:	4603      	mov	r3, r0
 800307a:	460c      	mov	r4, r1
 800307c:	4618      	mov	r0, r3
 800307e:	4621      	mov	r1, r4
 8003080:	f7fd fcc4 	bl	8000a0c <__aeabi_d2iz>
 8003084:	4603      	mov	r3, r0
 8003086:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 8003088:	1d38      	adds	r0, r7, #4
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	4937      	ldr	r1, [pc, #220]	; (800316c <read_T_and_H_SI7021+0x1a4>)
 8003090:	f007 ff22 	bl	800aed8 <siprintf>
	strcpy(temperature_si7021, str);
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4835      	ldr	r0, [pc, #212]	; (8003170 <read_T_and_H_SI7021+0x1a8>)
 800309a:	f007 ff59 	bl	800af50 <strcpy>
	memset(str, 0 , sizeof(str));
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	220a      	movs	r2, #10
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f007 fe59 	bl	800ad5c <memset>

	// Read humidity
	STATUS = -1;
 80030aa:	23ff      	movs	r3, #255	; 0xff
 80030ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 80030b0:	463b      	mov	r3, r7
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f8f7 	bl	80032a8 <r_single_Si7021>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 80030c0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d000      	beq.n	80030ca <read_T_and_H_SI7021+0x102>
	{
		while(1){}
 80030c8:	e7fe      	b.n	80030c8 <read_T_and_H_SI7021+0x100>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd ffdf 	bl	8001094 <__aeabi_fcmplt>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <read_T_and_H_SI7021+0x11c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80030e2:	e000      	b.n	80030e6 <read_T_and_H_SI7021+0x11e>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 80030e8:	69f8      	ldr	r0, [r7, #28]
 80030ea:	f7fd fffb 	bl	80010e4 <__aeabi_f2iz>
 80030ee:	4603      	mov	r3, r0
 80030f0:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 80030f2:	683c      	ldr	r4, [r7, #0]
 80030f4:	69b8      	ldr	r0, [r7, #24]
 80030f6:	f7fd fddb 	bl	8000cb0 <__aeabi_i2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4619      	mov	r1, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f7fd fd20 	bl	8000b44 <__aeabi_fsub>
 8003104:	4603      	mov	r3, r0
 8003106:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8003108:	4917      	ldr	r1, [pc, #92]	; (8003168 <read_T_and_H_SI7021+0x1a0>)
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7fd fe24 	bl	8000d58 <__aeabi_fmul>
 8003110:	4603      	mov	r3, r0
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f988 	bl	8000428 <__aeabi_f2d>
 8003118:	4603      	mov	r3, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4618      	mov	r0, r3
 800311e:	4621      	mov	r1, r4
 8003120:	f00b f842 	bl	800e1a8 <trunc>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	4618      	mov	r0, r3
 800312a:	4621      	mov	r1, r4
 800312c:	f7fd fc6e 	bl	8000a0c <__aeabi_d2iz>
 8003130:	4603      	mov	r3, r0
 8003132:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
		memset(str, 0 , sizeof(str));
	#endif

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <read_T_and_H_SI7021+0x1ac>)
 800313a:	4618      	mov	r0, r3
 800313c:	f007 fecc 	bl	800aed8 <siprintf>
	strcpy(humidity_si7021, str);
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	4619      	mov	r1, r3
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <read_T_and_H_SI7021+0x1b0>)
 8003146:	f007 ff03 	bl	800af50 <strcpy>
	memset(str, 0 , sizeof(str));
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	220a      	movs	r2, #10
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f007 fe03 	bl	800ad5c <memset>
}
 8003156:	bf00      	nop
 8003158:	372c      	adds	r7, #44	; 0x2c
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	0800e330 	.word	0x0800e330
 8003164:	0800e334 	.word	0x0800e334
 8003168:	461c4000 	.word	0x461c4000
 800316c:	0800e338 	.word	0x0800e338
 8003170:	200006f4 	.word	0x200006f4
 8003174:	0800e340 	.word	0x0800e340
 8003178:	200006fc 	.word	0x200006fc
 800317c:	00000000 	.word	0x00000000

08003180 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f939 	bl	8000404 <__aeabi_i2d>
 8003192:	a311      	add	r3, pc, #68	; (adr r3, 80031d8 <process_temp_code+0x58>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f99e 	bl	80004d8 <__aeabi_dmul>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	4618      	mov	r0, r3
 80031a2:	4621      	mov	r1, r4
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <process_temp_code+0x68>)
 80031aa:	f7fd fabf 	bl	800072c <__aeabi_ddiv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	460c      	mov	r4, r1
 80031b2:	4618      	mov	r0, r3
 80031b4:	4621      	mov	r1, r4
 80031b6:	a30a      	add	r3, pc, #40	; (adr r3, 80031e0 <process_temp_code+0x60>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f7fc ffd4 	bl	8000168 <__aeabi_dsub>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	4618      	mov	r0, r3
 80031c6:	4621      	mov	r1, r4
 80031c8:	f7fd fc68 	bl	8000a9c <__aeabi_d2f>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	3d70a3d7 	.word	0x3d70a3d7
 80031dc:	4065f70a 	.word	0x4065f70a
 80031e0:	cccccccd 	.word	0xcccccccd
 80031e4:	40476ccc 	.word	0x40476ccc
 80031e8:	40f00000 	.word	0x40f00000

080031ec <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd f903 	bl	8000404 <__aeabi_i2d>
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <process_humi_code+0x84>)
 8003204:	f7fd f968 	bl	80004d8 <__aeabi_dmul>
 8003208:	4603      	mov	r3, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4618      	mov	r0, r3
 800320e:	4621      	mov	r1, r4
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <process_humi_code+0x88>)
 8003216:	f7fd fa89 	bl	800072c <__aeabi_ddiv>
 800321a:	4603      	mov	r3, r0
 800321c:	460c      	mov	r4, r1
 800321e:	4618      	mov	r0, r3
 8003220:	4621      	mov	r1, r4
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <process_humi_code+0x8c>)
 8003228:	f7fc ff9e 	bl	8000168 <__aeabi_dsub>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	4618      	mov	r0, r3
 8003232:	4621      	mov	r1, r4
 8003234:	f7fd fc32 	bl	8000a9c <__aeabi_d2f>
 8003238:	4603      	mov	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7fd ff27 	bl	8001094 <__aeabi_fcmplt>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <process_humi_code+0x66>
    return 0;
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e009      	b.n	8003266 <process_humi_code+0x7a>
  else if(value > 100)
 8003252:	490a      	ldr	r1, [pc, #40]	; (800327c <process_humi_code+0x90>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7fd ff3b 	bl	80010d0 <__aeabi_fcmpgt>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <process_humi_code+0x78>
    return 100;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <process_humi_code+0x90>)
 8003262:	e000      	b.n	8003266 <process_humi_code+0x7a>
  else
    return (float)value;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	bd90      	pop	{r4, r7, pc}
 800326e:	bf00      	nop
 8003270:	405f4000 	.word	0x405f4000
 8003274:	40f00000 	.word	0x40f00000
 8003278:	40180000 	.word	0x40180000
 800327c:	42c80000 	.word	0x42c80000

08003280 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	b21a      	sxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3301      	adds	r3, #1
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b21b      	sxth	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b21b      	sxth	r3, r3
 800329c:	b29b      	uxth	r3, r3
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 80032ba:	23e5      	movs	r3, #229	; 0xe5
 80032bc:	737b      	strb	r3, [r7, #13]
 80032be:	e008      	b.n	80032d2 <r_single_Si7021+0x2a>
  else if(type == Temperature)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <r_single_Si7021+0x24>
    cmd = Temp_HM;
 80032c6:	23e3      	movs	r3, #227	; 0xe3
 80032c8:	737b      	strb	r3, [r7, #13]
 80032ca:	e002      	b.n	80032d2 <r_single_Si7021+0x2a>
  else
    return -1;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d0:	e03c      	b.n	800334c <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	f107 020d 	add.w	r2, r7, #13
 80032d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2301      	movs	r3, #1
 80032e0:	481c      	ldr	r0, [pc, #112]	; (8003354 <r_single_Si7021+0xac>)
 80032e2:	f003 fc31 	bl	8006b48 <HAL_I2C_Master_Transmit>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <r_single_Si7021+0x4a>
    return -1;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f0:	e02c      	b.n	800334c <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	f107 0208 	add.w	r2, r7, #8
 80032f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2302      	movs	r3, #2
 8003300:	4814      	ldr	r0, [pc, #80]	; (8003354 <r_single_Si7021+0xac>)
 8003302:	f003 fd1f 	bl	8006d44 <HAL_I2C_Master_Receive>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <r_single_Si7021+0x6a>
    return -1;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003310:	e01c      	b.n	800334c <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ffb2 	bl	8003280 <convert_to_uint16>
 800331c:	4603      	mov	r3, r0
 800331e:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff5f 	bl	80031ec <process_humi_code>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e009      	b.n	800334a <r_single_Si7021+0xa2>
  else if(type == Temperature)
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 800333c:	89fb      	ldrh	r3, [r7, #14]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff1e 	bl	8003180 <process_temp_code>
 8003344:	4602      	mov	r2, r0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]

  return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000c84 	.word	0x20000c84

08003358 <I2C_1_scaner>:
uint32_t timeout=1000;						        // timeout for receive
uint16_t STATUS=0;								    // Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b087      	sub	sp, #28
 800335c:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 800335e:	2300      	movs	r3, #0
 8003360:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8003362:	4b2a      	ldr	r3, [pc, #168]	; (800340c <I2C_1_scaner+0xb4>)
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e043      	b.n	80033f2 <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 800336a:	2001      	movs	r0, #1
 800336c:	f002 fd7e 	bl	8005e6c <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <I2C_1_scaner+0xb4>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	b299      	uxth	r1, r3
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <I2C_1_scaner+0xb8>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b298      	uxth	r0, r3
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <I2C_1_scaner+0xbc>)
 8003382:	881c      	ldrh	r4, [r3, #0]
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <I2C_1_scaner+0xbc>)
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	4a23      	ldr	r2, [pc, #140]	; (8003418 <I2C_1_scaner+0xc0>)
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	9202      	str	r2, [sp, #8]
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <I2C_1_scaner+0xc4>)
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4623      	mov	r3, r4
 8003396:	4602      	mov	r2, r0
 8003398:	4821      	ldr	r0, [pc, #132]	; (8003420 <I2C_1_scaner+0xc8>)
 800339a:	f004 f827 	bl	80073ec <HAL_I2C_Mem_Read>
 800339e:	4603      	mov	r3, r0
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <I2C_1_scaner+0xcc>)
 80033a4:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <I2C_1_scaner+0xcc>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11b      	bne.n	80033e6 <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	3301      	adds	r3, #1
 80033b2:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <I2C_1_scaner+0xb4>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <I2C_1_scaner+0xb4>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b3c      	cmp	r3, #60	; 0x3c
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4313      	orrs	r3, r2
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <I2C_1_scaner+0xb4>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b3c      	cmp	r3, #60	; 0x3c
 80033de:	d001      	beq.n	80033e4 <I2C_1_scaner+0x8c>
 80033e0:	2b40      	cmp	r3, #64	; 0x40
							sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
					#endif
                    break;
 80033e2:	e000      	b.n	80033e6 <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 80033e4:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <I2C_1_scaner+0xb4>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <I2C_1_scaner+0xb4>)
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <I2C_1_scaner+0xb4>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2bff      	cmp	r3, #255	; 0xff
 80033f8:	d1b7      	bne.n	800336a <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 80033fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033fe:	f002 fd35 	bl	8005e6c <HAL_Delay>
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	200002bf 	.word	0x200002bf
 8003410:	200002c0 	.word	0x200002c0
 8003414:	2000005c 	.word	0x2000005c
 8003418:	20000060 	.word	0x20000060
 800341c:	200002c1 	.word	0x200002c1
 8003420:	20000c84 	.word	0x20000c84
 8003424:	200002c2 	.word	0x200002c2

08003428 <HAL_UART_RxCpltCallback>:
// -----------------------------------------------------------------------------
// Receive data from GPS module
#if GPS
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)    // was   void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
		flag = 1;
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_UART_RxCpltCallback+0x18>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
	}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	200002c9 	.word	0x200002c9

08003444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800344a:	f002 fcad 	bl	8005da8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800344e:	f000 f8b5 	bl	80035bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003452:	f000 fb11 	bl	8003a78 <MX_GPIO_Init>
  MX_DMA_Init();
 8003456:	f000 faf1 	bl	8003a3c <MX_DMA_Init>
  MX_I2C1_Init();
 800345a:	f000 f8f5 	bl	8003648 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800345e:	f000 fa6f 	bl	8003940 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003462:	f000 fac1 	bl	80039e8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8003466:	f000 f91d 	bl	80036a4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800346a:	f000 f951 	bl	8003710 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800346e:	f000 fa91 	bl	8003994 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003472:	f000 f9ef 	bl	8003854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(5000);

	#if I2C_SCANNER
  		I2C_1_scaner();
 8003476:	f7ff ff6f 	bl	8003358 <I2C_1_scaner>
	#endif

	#if H_a_T_SI7021
  		read_T_and_H_SI7021();
 800347a:	f7ff fda5 	bl	8002fc8 <read_T_and_H_SI7021>
	#endif

	#if OLED
  		init_oled();
 800347e:	f001 fc34 	bl	8004cea <init_oled>
	  //test_oled();
	#endif

	#if GPS
  		memset(GPS_buff ,0 ,sizeof(GPS_buff));
 8003482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003486:	2100      	movs	r1, #0
 8003488:	4843      	ldr	r0, [pc, #268]	; (8003598 <main+0x154>)
 800348a:	f007 fc67 	bl	800ad5c <memset>
  		HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 800348e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003492:	4941      	ldr	r1, [pc, #260]	; (8003598 <main+0x154>)
 8003494:	4841      	ldr	r0, [pc, #260]	; (800359c <main+0x158>)
 8003496:	f006 ffcf 	bl	800a438 <HAL_UART_Receive_DMA>

  		//
  	//HAL_TIM_Base_Start_IT(&htim2);


  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800349a:	2100      	movs	r1, #0
 800349c:	4840      	ldr	r0, [pc, #256]	; (80035a0 <main+0x15c>)
 800349e:	f006 f8e1 	bl	8009664 <HAL_TIM_PWM_Start>
  	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  	///////////////////////////////////////////////////////////////////
  	// Turn on interrupt, if in RX buffer are one byte
  	// Register CR1-> RXNEIE
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <main+0x160>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <main+0x160>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	// Test led
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80034b2:	2201      	movs	r2, #1
 80034b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034b8:	483b      	ldr	r0, [pc, #236]	; (80035a8 <main+0x164>)
 80034ba:	f003 f9dc 	bl	8006876 <HAL_GPIO_WritePin>
  		}
  	}
  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // stop generation of pwm
  #endif

  int EXIT = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]

while (1)
{
	//test_flash_W25Q();
	//flash_W25Q();
	w25_Ini();
 80034c2:	f7fe f9d7 	bl	8001874 <w25_Ini>
	//HAL_Delay(2000);
	//test_function(); 				// TEST FUNCTUION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	//test_flash_W25Q();

	EXIT = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
	char sign = 0;													// Char for keyboard
 80034ca:	2300      	movs	r3, #0
 80034cc:	70fb      	strb	r3, [r7, #3]

	touch_bakcklight(0);											// Turn off Fingerprint modeul LED
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7fd ff06 	bl	80012e0 <touch_bakcklight>

	print_main_menu();  											// Print main menu on OLED
 80034d4:	f001 fc3e 	bl	8004d54 <print_main_menu>

	do                                                            	// Wait for choice
	{
		sign = read_one_sign_from_keyboard();                     	// Read sign from keyboard
 80034d8:	f000 fb92 	bl	8003c00 <read_one_sign_from_keyboard>
 80034dc:	4603      	mov	r3, r0
 80034de:	70fb      	strb	r3, [r7, #3]

		if(sign == '1')    							// If select GSM mode
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	2b31      	cmp	r3, #49	; 0x31
 80034e4:	d10f      	bne.n	8003506 <main+0xc2>
		{
			GSM_MODE = true;
 80034e6:	4b31      	ldr	r3, [pc, #196]	; (80035ac <main+0x168>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
			while(GSM_MODE && (EXIT == 0))
 80034ec:	e004      	b.n	80034f8 <main+0xb4>
			{
				EXIT = gsm_mode(sign);
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fd2f 	bl	8003f54 <gsm_mode>
 80034f6:	6078      	str	r0, [r7, #4]
			while(GSM_MODE && (EXIT == 0))
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <main+0x168>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <main+0xc2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f3      	beq.n	80034ee <main+0xaa>
			}
		}
		if(sign == '2')    							// If select GPS mode
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	2b32      	cmp	r3, #50	; 0x32
 800350a:	d10f      	bne.n	800352c <main+0xe8>
		{
			GPS_MODE = true;
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <main+0x16c>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
			while (GPS_MODE && (EXIT == 0))
 8003512:	e004      	b.n	800351e <main+0xda>
			{
				EXIT = gps_mode(sign);
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fca6 	bl	8003e68 <gps_mode>
 800351c:	6078      	str	r0, [r7, #4]
			while (GPS_MODE && (EXIT == 0))
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <main+0x16c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <main+0xe8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f3      	beq.n	8003514 <main+0xd0>
			}
		}
		if(sign == '3')    							// If select FINGERPRINT MODE
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b33      	cmp	r3, #51	; 0x33
 8003530:	d10f      	bne.n	8003552 <main+0x10e>
		{
			FINGERPRINT_MODE = true;
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <main+0x170>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
			while (FINGERPRINT_MODE && (EXIT == 0))
 8003538:	e004      	b.n	8003544 <main+0x100>
			{
				EXIT = fingerprint_mode(sign);
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 ff9b 	bl	8004478 <fingerprint_mode>
 8003542:	6078      	str	r0, [r7, #4]
			while (FINGERPRINT_MODE && (EXIT == 0))
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <main+0x170>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <main+0x10e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f3      	beq.n	800353a <main+0xf6>
			}
		}
		if(sign == '4')    							// If select SENSORS MODE
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	2b34      	cmp	r3, #52	; 0x34
 8003556:	d10f      	bne.n	8003578 <main+0x134>
		{
			SENSORS_MODE = true;
 8003558:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <main+0x174>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
			while (SENSORS_MODE && (EXIT == 0))
 800355e:	e004      	b.n	800356a <main+0x126>
			{
				EXIT = sensors_mode(sign);
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f95a 	bl	800481c <sensors_mode>
 8003568:	6078      	str	r0, [r7, #4]
			while (SENSORS_MODE && (EXIT == 0))
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <main+0x174>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <main+0x134>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f3      	beq.n	8003560 <main+0x11c>
			}
		}

		ssd1306_UpdateScreen();
 8003578:	f001 ff3a 	bl	80053f0 <ssd1306_UpdateScreen>
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '4'));     // Select one from 3 modes
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	2b31      	cmp	r3, #49	; 0x31
 8003580:	d09f      	beq.n	80034c2 <main+0x7e>
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	2b32      	cmp	r3, #50	; 0x32
 8003586:	d09c      	beq.n	80034c2 <main+0x7e>
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b33      	cmp	r3, #51	; 0x33
 800358c:	d099      	beq.n	80034c2 <main+0x7e>
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	2b34      	cmp	r3, #52	; 0x34
 8003592:	d1a1      	bne.n	80034d8 <main+0x94>
{
 8003594:	e795      	b.n	80034c2 <main+0x7e>
 8003596:	bf00      	nop
 8003598:	20000cd8 	.word	0x20000cd8
 800359c:	20000c44 	.word	0x20000c44
 80035a0:	20000f60 	.word	0x20000f60
 80035a4:	20000fa8 	.word	0x20000fa8
 80035a8:	40011000 	.word	0x40011000
 80035ac:	200002c4 	.word	0x200002c4
 80035b0:	200002c5 	.word	0x200002c5
 80035b4:	200002c6 	.word	0x200002c6
 80035b8:	200002c7 	.word	0x200002c7

080035bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b090      	sub	sp, #64	; 0x40
 80035c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035c2:	f107 0318 	add.w	r3, r7, #24
 80035c6:	2228      	movs	r2, #40	; 0x28
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f007 fbc6 	bl	800ad5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ec:	2301      	movs	r3, #1
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035f0:	2302      	movs	r3, #2
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80035fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003600:	f107 0318 	add.w	r3, r7, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fdfd 	bl	8008204 <HAL_RCC_OscConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003610:	f001 fb65 	bl	8004cde <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003614:	230f      	movs	r3, #15
 8003616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003618:	2302      	movs	r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f005 f868 	bl	8008704 <HAL_RCC_ClockConfig>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800363a:	f001 fb50 	bl	8004cde <Error_Handler>
  }
}
 800363e:	bf00      	nop
 8003640:	3740      	adds	r7, #64	; 0x40
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <MX_I2C1_Init+0x50>)
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <MX_I2C1_Init+0x54>)
 8003650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <MX_I2C1_Init+0x50>)
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <MX_I2C1_Init+0x58>)
 8003656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <MX_I2C1_Init+0x50>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <MX_I2C1_Init+0x50>)
 8003660:	2200      	movs	r2, #0
 8003662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <MX_I2C1_Init+0x50>)
 8003666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800366a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <MX_I2C1_Init+0x50>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <MX_I2C1_Init+0x50>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <MX_I2C1_Init+0x50>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <MX_I2C1_Init+0x50>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003684:	4804      	ldr	r0, [pc, #16]	; (8003698 <MX_I2C1_Init+0x50>)
 8003686:	f003 f927 	bl	80068d8 <HAL_I2C_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003690:	f001 fb25 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000c84 	.word	0x20000c84
 800369c:	40005400 	.word	0x40005400
 80036a0:	000186a0 	.word	0x000186a0

080036a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <MX_SPI2_Init+0x64>)
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <MX_SPI2_Init+0x68>)
 80036ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <MX_SPI2_Init+0x64>)
 80036b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <MX_SPI2_Init+0x64>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <MX_SPI2_Init+0x64>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <MX_SPI2_Init+0x64>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <MX_SPI2_Init+0x64>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_SPI2_Init+0x64>)
 80036d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <MX_SPI2_Init+0x64>)
 80036d8:	2210      	movs	r2, #16
 80036da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <MX_SPI2_Init+0x64>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <MX_SPI2_Init+0x64>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <MX_SPI2_Init+0x64>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <MX_SPI2_Init+0x64>)
 80036f0:	220a      	movs	r2, #10
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036f4:	4804      	ldr	r0, [pc, #16]	; (8003708 <MX_SPI2_Init+0x64>)
 80036f6:	f005 f9a1 	bl	8008a3c <HAL_SPI_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003700:	f001 faed 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000ba8 	.word	0x20000ba8
 800370c:	40003800 	.word	0x40003800

08003710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b096      	sub	sp, #88	; 0x58
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800372e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	615a      	str	r2, [r3, #20]
 8003740:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2220      	movs	r2, #32
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f007 fb07 	bl	800ad5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <MX_TIM1_Init+0x13c>)
 8003750:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <MX_TIM1_Init+0x140>)
 8003752:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <MX_TIM1_Init+0x13c>)
 8003756:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 800375a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <MX_TIM1_Init+0x13c>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8003762:	4b3a      	ldr	r3, [pc, #232]	; (800384c <MX_TIM1_Init+0x13c>)
 8003764:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003768:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <MX_TIM1_Init+0x13c>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <MX_TIM1_Init+0x13c>)
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <MX_TIM1_Init+0x13c>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800377c:	4833      	ldr	r0, [pc, #204]	; (800384c <MX_TIM1_Init+0x13c>)
 800377e:	f005 fec9 	bl	8009514 <HAL_TIM_Base_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003788:	f001 faa9 	bl	8004cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800378c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003796:	4619      	mov	r1, r3
 8003798:	482c      	ldr	r0, [pc, #176]	; (800384c <MX_TIM1_Init+0x13c>)
 800379a:	f006 f8c3 	bl	8009924 <HAL_TIM_ConfigClockSource>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80037a4:	f001 fa9b 	bl	8004cde <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037a8:	4828      	ldr	r0, [pc, #160]	; (800384c <MX_TIM1_Init+0x13c>)
 80037aa:	f005 ff02 	bl	80095b2 <HAL_TIM_PWM_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80037b4:	f001 fa93 	bl	8004cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037c4:	4619      	mov	r1, r3
 80037c6:	4821      	ldr	r0, [pc, #132]	; (800384c <MX_TIM1_Init+0x13c>)
 80037c8:	f006 fc08 	bl	8009fdc <HAL_TIMEx_MasterConfigSynchronization>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80037d2:	f001 fa84 	bl	8004cde <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d6:	2360      	movs	r3, #96	; 0x60
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 80037da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037e4:	2300      	movs	r3, #0
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	2200      	movs	r2, #0
 80037fa:	4619      	mov	r1, r3
 80037fc:	4813      	ldr	r0, [pc, #76]	; (800384c <MX_TIM1_Init+0x13c>)
 80037fe:	f005 ffd3 	bl	80097a8 <HAL_TIM_PWM_ConfigChannel>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003808:	f001 fa69 	bl	8004cde <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003824:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4807      	ldr	r0, [pc, #28]	; (800384c <MX_TIM1_Init+0x13c>)
 8003830:	f006 fc32 	bl	800a098 <HAL_TIMEx_ConfigBreakDeadTime>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800383a:	f001 fa50 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800383e:	4803      	ldr	r0, [pc, #12]	; (800384c <MX_TIM1_Init+0x13c>)
 8003840:	f002 f810 	bl	8005864 <HAL_TIM_MspPostInit>

}
 8003844:	bf00      	nop
 8003846:	3758      	adds	r7, #88	; 0x58
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000f18 	.word	0x20000f18
 8003850:	40012c00 	.word	0x40012c00

08003854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08e      	sub	sp, #56	; 0x38
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800385a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003868:	f107 0320 	add.w	r3, r7, #32
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
 8003880:	615a      	str	r2, [r3, #20]
 8003882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <MX_TIM2_Init+0xe8>)
 8003886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800388a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800388c:	4b2b      	ldr	r3, [pc, #172]	; (800393c <MX_TIM2_Init+0xe8>)
 800388e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <MX_TIM2_Init+0xe8>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800389a:	4b28      	ldr	r3, [pc, #160]	; (800393c <MX_TIM2_Init+0xe8>)
 800389c:	22c8      	movs	r2, #200	; 0xc8
 800389e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a0:	4b26      	ldr	r3, [pc, #152]	; (800393c <MX_TIM2_Init+0xe8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <MX_TIM2_Init+0xe8>)
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038ac:	4823      	ldr	r0, [pc, #140]	; (800393c <MX_TIM2_Init+0xe8>)
 80038ae:	f005 fe31 	bl	8009514 <HAL_TIM_Base_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80038b8:	f001 fa11 	bl	8004cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c6:	4619      	mov	r1, r3
 80038c8:	481c      	ldr	r0, [pc, #112]	; (800393c <MX_TIM2_Init+0xe8>)
 80038ca:	f006 f82b 	bl	8009924 <HAL_TIM_ConfigClockSource>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80038d4:	f001 fa03 	bl	8004cde <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038d8:	4818      	ldr	r0, [pc, #96]	; (800393c <MX_TIM2_Init+0xe8>)
 80038da:	f005 fe6a 	bl	80095b2 <HAL_TIM_PWM_Init>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80038e4:	f001 f9fb 	bl	8004cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038f0:	f107 0320 	add.w	r3, r7, #32
 80038f4:	4619      	mov	r1, r3
 80038f6:	4811      	ldr	r0, [pc, #68]	; (800393c <MX_TIM2_Init+0xe8>)
 80038f8:	f006 fb70 	bl	8009fdc <HAL_TIMEx_MasterConfigSynchronization>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003902:	f001 f9ec 	bl	8004cde <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003906:	2360      	movs	r3, #96	; 0x60
 8003908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 800390a:	2319      	movs	r3, #25
 800390c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	2200      	movs	r2, #0
 800391a:	4619      	mov	r1, r3
 800391c:	4807      	ldr	r0, [pc, #28]	; (800393c <MX_TIM2_Init+0xe8>)
 800391e:	f005 ff43 	bl	80097a8 <HAL_TIM_PWM_ConfigChannel>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003928:	f001 f9d9 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800392c:	4803      	ldr	r0, [pc, #12]	; (800393c <MX_TIM2_Init+0xe8>)
 800392e:	f001 ff99 	bl	8005864 <HAL_TIM_MspPostInit>

}
 8003932:	bf00      	nop
 8003934:	3738      	adds	r7, #56	; 0x38
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000f60 	.word	0x20000f60

08003940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <MX_USART1_UART_Init+0x4c>)
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <MX_USART1_UART_Init+0x50>)
 8003948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <MX_USART1_UART_Init+0x4c>)
 800394c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <MX_USART1_UART_Init+0x4c>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <MX_USART1_UART_Init+0x4c>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <MX_USART1_UART_Init+0x4c>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <MX_USART1_UART_Init+0x4c>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <MX_USART1_UART_Init+0x4c>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <MX_USART1_UART_Init+0x4c>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003976:	4805      	ldr	r0, [pc, #20]	; (800398c <MX_USART1_UART_Init+0x4c>)
 8003978:	f006 fbdf 	bl	800a13a <HAL_UART_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003982:	f001 f9ac 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000ed8 	.word	0x20000ed8
 8003990:	40013800 	.word	0x40013800

08003994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <MX_USART2_UART_Init+0x50>)
 800399c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039ba:	220c      	movs	r2, #12
 80039bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <MX_USART2_UART_Init+0x4c>)
 80039cc:	f006 fbb5 	bl	800a13a <HAL_UART_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039d6:	f001 f982 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000fa8 	.word	0x20000fa8
 80039e4:	40004400 	.word	0x40004400

080039e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <MX_USART3_UART_Init+0x50>)
 80039f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 80039f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a0e:	220c      	movs	r2, #12
 8003a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a1e:	4805      	ldr	r0, [pc, #20]	; (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a20:	f006 fb8b 	bl	800a13a <HAL_UART_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a2a:	f001 f958 	bl	8004cde <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000c44 	.word	0x20000c44
 8003a38:	40004800 	.word	0x40004800

08003a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_DMA_Init+0x38>)
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <MX_DMA_Init+0x38>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6153      	str	r3, [r2, #20]
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <MX_DMA_Init+0x38>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	200d      	movs	r0, #13
 8003a60:	f002 fafd 	bl	800605e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003a64:	200d      	movs	r0, #13
 8003a66:	f002 fb16 	bl	8006096 <HAL_NVIC_EnableIRQ>

}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000

08003a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7e:	f107 0310 	add.w	r3, r7, #16
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a8c:	4b57      	ldr	r3, [pc, #348]	; (8003bec <MX_GPIO_Init+0x174>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4a56      	ldr	r2, [pc, #344]	; (8003bec <MX_GPIO_Init+0x174>)
 8003a92:	f043 0310 	orr.w	r3, r3, #16
 8003a96:	6193      	str	r3, [r2, #24]
 8003a98:	4b54      	ldr	r3, [pc, #336]	; (8003bec <MX_GPIO_Init+0x174>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa4:	4b51      	ldr	r3, [pc, #324]	; (8003bec <MX_GPIO_Init+0x174>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	4a50      	ldr	r2, [pc, #320]	; (8003bec <MX_GPIO_Init+0x174>)
 8003aaa:	f043 0320 	orr.w	r3, r3, #32
 8003aae:	6193      	str	r3, [r2, #24]
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	; (8003bec <MX_GPIO_Init+0x174>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <MX_GPIO_Init+0x174>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a4a      	ldr	r2, [pc, #296]	; (8003bec <MX_GPIO_Init+0x174>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b48      	ldr	r3, [pc, #288]	; (8003bec <MX_GPIO_Init+0x174>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <MX_GPIO_Init+0x174>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4a44      	ldr	r2, [pc, #272]	; (8003bec <MX_GPIO_Init+0x174>)
 8003ada:	f043 0308 	orr.w	r3, r3, #8
 8003ade:	6193      	str	r3, [r2, #24]
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <MX_GPIO_Init+0x174>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003aec:	2201      	movs	r2, #1
 8003aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af2:	483f      	ldr	r0, [pc, #252]	; (8003bf0 <MX_GPIO_Init+0x178>)
 8003af4:	f002 febf 	bl	8006876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CS_M25Q_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8003af8:	2200      	movs	r2, #0
 8003afa:	f241 010a 	movw	r1, #4106	; 0x100a
 8003afe:	483d      	ldr	r0, [pc, #244]	; (8003bf4 <MX_GPIO_Init+0x17c>)
 8003b00:	f002 feb9 	bl	8006876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8003b0a:	483b      	ldr	r0, [pc, #236]	; (8003bf8 <MX_GPIO_Init+0x180>)
 8003b0c:	f002 feb3 	bl	8006876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b16:	2301      	movs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b22:	f107 0310 	add.w	r3, r7, #16
 8003b26:	4619      	mov	r1, r3
 8003b28:	4831      	ldr	r0, [pc, #196]	; (8003bf0 <MX_GPIO_Init+0x178>)
 8003b2a:	f002 fd33 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003b32:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <MX_GPIO_Init+0x184>)
 8003b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	4619      	mov	r1, r3
 8003b40:	482d      	ldr	r0, [pc, #180]	; (8003bf8 <MX_GPIO_Init+0x180>)
 8003b42:	f002 fd27 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b46:	2302      	movs	r3, #2
 8003b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b52:	2303      	movs	r3, #3
 8003b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b56:	f107 0310 	add.w	r3, r7, #16
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4825      	ldr	r0, [pc, #148]	; (8003bf4 <MX_GPIO_Init+0x17c>)
 8003b5e:	f002 fd19 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8003b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	4619      	mov	r1, r3
 8003b7a:	481e      	ldr	r0, [pc, #120]	; (8003bf4 <MX_GPIO_Init+0x17c>)
 8003b7c:	f002 fd0a 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8003b80:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8003b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f107 0310 	add.w	r3, r7, #16
 8003b96:	4619      	mov	r1, r3
 8003b98:	4817      	ldr	r0, [pc, #92]	; (8003bf8 <MX_GPIO_Init+0x180>)
 8003b9a:	f002 fcfb 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	2302      	movs	r3, #2
 8003bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bae:	f107 0310 	add.w	r3, r7, #16
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480f      	ldr	r0, [pc, #60]	; (8003bf4 <MX_GPIO_Init+0x17c>)
 8003bb6:	f002 fced 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8003bba:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc8:	f107 0310 	add.w	r3, r7, #16
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4809      	ldr	r0, [pc, #36]	; (8003bf4 <MX_GPIO_Init+0x17c>)
 8003bd0:	f002 fce0 	bl	8006594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2007      	movs	r0, #7
 8003bda:	f002 fa40 	bl	800605e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003bde:	2007      	movs	r0, #7
 8003be0:	f002 fa59 	bl	8006096 <HAL_NVIC_EnableIRQ>

}
 8003be4:	bf00      	nop
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	40010c00 	.word	0x40010c00
 8003bf8:	40010800 	.word	0x40010800
 8003bfc:	10310000 	.word	0x10310000

08003c00 <read_one_sign_from_keyboard>:
// ---------------------------------------------------------------------------
/*
  Its function read one sing from keyboard
 */
char read_one_sign_from_keyboard(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
	// Make external interrupt for read keyboard
	char sign = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	71fb      	strb	r3, [r7, #7]
	uint8_t readed_status = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	71bb      	strb	r3, [r7, #6]

	readed_status = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	717b      	strb	r3, [r7, #5]

	for(i=1; i<=4; i++)
 8003c16:	2301      	movs	r3, #1
 8003c18:	717b      	strb	r3, [r7, #5]
 8003c1a:	e118      	b.n	8003e4e <read_one_sign_from_keyboard+0x24e>
	{
		if((i == 1) && (readed_status != 1))
 8003c1c:	797b      	ldrb	r3, [r7, #5]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d142      	bne.n	8003ca8 <read_one_sign_from_keyboard+0xa8>
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d03f      	beq.n	8003ca8 <read_one_sign_from_keyboard+0xa8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);     // For detect 123A
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c2e:	488c      	ldr	r0, [pc, #560]	; (8003e60 <read_one_sign_from_keyboard+0x260>)
 8003c30:	f002 fe21 	bl	8006876 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003c34:	2001      	movs	r0, #1
 8003c36:	f002 f919 	bl	8005e6c <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c3e:	4889      	ldr	r0, [pc, #548]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003c40:	f002 fe02 	bl	8006848 <HAL_GPIO_ReadPin>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <read_one_sign_from_keyboard+0x54>
			{
			  	sign = 'A';
 8003c4a:	2341      	movs	r3, #65	; 0x41
 8003c4c:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	71bb      	strb	r3, [r7, #6]
 8003c52:	e023      	b.n	8003c9c <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c58:	4882      	ldr	r0, [pc, #520]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003c5a:	f002 fdf5 	bl	8006848 <HAL_GPIO_ReadPin>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <read_one_sign_from_keyboard+0x6e>
			{
			  	sign = '3';
 8003c64:	2333      	movs	r3, #51	; 0x33
 8003c66:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	71bb      	strb	r3, [r7, #6]
 8003c6c:	e016      	b.n	8003c9c <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003c6e:	2120      	movs	r1, #32
 8003c70:	487c      	ldr	r0, [pc, #496]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003c72:	f002 fde9 	bl	8006848 <HAL_GPIO_ReadPin>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <read_one_sign_from_keyboard+0x86>
			{
			  	sign = '2';
 8003c7c:	2332      	movs	r3, #50	; 0x32
 8003c7e:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	71bb      	strb	r3, [r7, #6]
 8003c84:	e00a      	b.n	8003c9c <read_one_sign_from_keyboard+0x9c>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003c86:	2110      	movs	r1, #16
 8003c88:	4876      	ldr	r0, [pc, #472]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003c8a:	f002 fddd 	bl	8006848 <HAL_GPIO_ReadPin>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <read_one_sign_from_keyboard+0x9c>
			{
			  	sign = '1';
 8003c94:	2331      	movs	r3, #49	; 0x31
 8003c96:	71fb      	strb	r3, [r7, #7]
			  	readed_status = 1;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ca2:	486f      	ldr	r0, [pc, #444]	; (8003e60 <read_one_sign_from_keyboard+0x260>)
 8003ca4:	f002 fde7 	bl	8006876 <HAL_GPIO_WritePin>
		}

		if((i == 2) && (readed_status != 1))
 8003ca8:	797b      	ldrb	r3, [r7, #5]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d142      	bne.n	8003d34 <read_one_sign_from_keyboard+0x134>
 8003cae:	79bb      	ldrb	r3, [r7, #6]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d03f      	beq.n	8003d34 <read_one_sign_from_keyboard+0x134>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);     // For detect 456B
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cba:	4869      	ldr	r0, [pc, #420]	; (8003e60 <read_one_sign_from_keyboard+0x260>)
 8003cbc:	f002 fddb 	bl	8006876 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f002 f8d3 	bl	8005e6c <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cca:	4866      	ldr	r0, [pc, #408]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003ccc:	f002 fdbc 	bl	8006848 <HAL_GPIO_ReadPin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <read_one_sign_from_keyboard+0xe0>
			{
				sign = 'B';
 8003cd6:	2342      	movs	r3, #66	; 0x42
 8003cd8:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	71bb      	strb	r3, [r7, #6]
 8003cde:	e023      	b.n	8003d28 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ce4:	485f      	ldr	r0, [pc, #380]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003ce6:	f002 fdaf 	bl	8006848 <HAL_GPIO_ReadPin>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <read_one_sign_from_keyboard+0xfa>
			{
				sign = '6';
 8003cf0:	2336      	movs	r3, #54	; 0x36
 8003cf2:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	71bb      	strb	r3, [r7, #6]
 8003cf8:	e016      	b.n	8003d28 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003cfa:	2120      	movs	r1, #32
 8003cfc:	4859      	ldr	r0, [pc, #356]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003cfe:	f002 fda3 	bl	8006848 <HAL_GPIO_ReadPin>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <read_one_sign_from_keyboard+0x112>
			{
				sign = '5';
 8003d08:	2335      	movs	r3, #53	; 0x35
 8003d0a:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	71bb      	strb	r3, [r7, #6]
 8003d10:	e00a      	b.n	8003d28 <read_one_sign_from_keyboard+0x128>
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003d12:	2110      	movs	r1, #16
 8003d14:	4853      	ldr	r0, [pc, #332]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003d16:	f002 fd97 	bl	8006848 <HAL_GPIO_ReadPin>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <read_one_sign_from_keyboard+0x128>
			{
				sign = '4';
 8003d20:	2334      	movs	r3, #52	; 0x34
 8003d22:	71fb      	strb	r3, [r7, #7]
				readed_status = 1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	71bb      	strb	r3, [r7, #6]
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d2e:	484c      	ldr	r0, [pc, #304]	; (8003e60 <read_one_sign_from_keyboard+0x260>)
 8003d30:	f002 fda1 	bl	8006876 <HAL_GPIO_WritePin>
		}

		if((i == 3) && (readed_status != 1))
 8003d34:	797b      	ldrb	r3, [r7, #5]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d142      	bne.n	8003dc0 <read_one_sign_from_keyboard+0x1c0>
 8003d3a:	79bb      	ldrb	r3, [r7, #6]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d03f      	beq.n	8003dc0 <read_one_sign_from_keyboard+0x1c0>
		{
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);     // For detect 789C
 8003d40:	2201      	movs	r2, #1
 8003d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d46:	4846      	ldr	r0, [pc, #280]	; (8003e60 <read_one_sign_from_keyboard+0x260>)
 8003d48:	f002 fd95 	bl	8006876 <HAL_GPIO_WritePin>
		 	HAL_Delay(1);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f002 f88d 	bl	8005e6c <HAL_Delay>
		 	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d56:	4843      	ldr	r0, [pc, #268]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003d58:	f002 fd76 	bl	8006848 <HAL_GPIO_ReadPin>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <read_one_sign_from_keyboard+0x16c>
		 	{
		 		sign = 'C';
 8003d62:	2343      	movs	r3, #67	; 0x43
 8003d64:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	71bb      	strb	r3, [r7, #6]
 8003d6a:	e023      	b.n	8003db4 <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d70:	483c      	ldr	r0, [pc, #240]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003d72:	f002 fd69 	bl	8006848 <HAL_GPIO_ReadPin>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <read_one_sign_from_keyboard+0x186>
		 	{
		 		sign = '9';
 8003d7c:	2339      	movs	r3, #57	; 0x39
 8003d7e:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	71bb      	strb	r3, [r7, #6]
 8003d84:	e016      	b.n	8003db4 <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003d86:	2120      	movs	r1, #32
 8003d88:	4836      	ldr	r0, [pc, #216]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003d8a:	f002 fd5d 	bl	8006848 <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <read_one_sign_from_keyboard+0x19e>
		 	{
		 		sign = '8';
 8003d94:	2338      	movs	r3, #56	; 0x38
 8003d96:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	71bb      	strb	r3, [r7, #6]
 8003d9c:	e00a      	b.n	8003db4 <read_one_sign_from_keyboard+0x1b4>
		 	}

		 	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003d9e:	2110      	movs	r1, #16
 8003da0:	4830      	ldr	r0, [pc, #192]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003da2:	f002 fd51 	bl	8006848 <HAL_GPIO_ReadPin>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <read_one_sign_from_keyboard+0x1b4>
		 	{
		 		 sign = '7';
 8003dac:	2337      	movs	r3, #55	; 0x37
 8003dae:	71fb      	strb	r3, [r7, #7]
		 		readed_status = 1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	71bb      	strb	r3, [r7, #6]
		 	}
		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003db4:	2200      	movs	r2, #0
 8003db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dba:	4829      	ldr	r0, [pc, #164]	; (8003e60 <read_one_sign_from_keyboard+0x260>)
 8003dbc:	f002 fd5b 	bl	8006876 <HAL_GPIO_WritePin>
		}


		if((i == 3) && (readed_status != 1))
 8003dc0:	797b      	ldrb	r3, [r7, #5]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d140      	bne.n	8003e48 <read_one_sign_from_keyboard+0x248>
 8003dc6:	79bb      	ldrb	r3, [r7, #6]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d03d      	beq.n	8003e48 <read_one_sign_from_keyboard+0x248>
		{
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);     // For detect *0#D
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2108      	movs	r1, #8
 8003dd0:	4824      	ldr	r0, [pc, #144]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003dd2:	f002 fd50 	bl	8006876 <HAL_GPIO_WritePin>
		    HAL_Delay(1);
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f002 f848 	bl	8005e6c <HAL_Delay>

		   	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003de0:	4820      	ldr	r0, [pc, #128]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003de2:	f002 fd31 	bl	8006848 <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <read_one_sign_from_keyboard+0x1f6>
		   	{
		   		sign = 'D';
 8003dec:	2344      	movs	r3, #68	; 0x44
 8003dee:	71fb      	strb	r3, [r7, #7]
		   		readed_status = 1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	71bb      	strb	r3, [r7, #6]
 8003df4:	e023      	b.n	8003e3e <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfa:	481a      	ldr	r0, [pc, #104]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003dfc:	f002 fd24 	bl	8006848 <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <read_one_sign_from_keyboard+0x210>
		   	{
		   		 sign = '#';
 8003e06:	2323      	movs	r3, #35	; 0x23
 8003e08:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	71bb      	strb	r3, [r7, #6]
 8003e0e:	e016      	b.n	8003e3e <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8003e10:	2120      	movs	r1, #32
 8003e12:	4814      	ldr	r0, [pc, #80]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003e14:	f002 fd18 	bl	8006848 <HAL_GPIO_ReadPin>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <read_one_sign_from_keyboard+0x228>
		   	{
		   		 sign = '0';
 8003e1e:	2330      	movs	r3, #48	; 0x30
 8003e20:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	71bb      	strb	r3, [r7, #6]
 8003e26:	e00a      	b.n	8003e3e <read_one_sign_from_keyboard+0x23e>
		   	}

		   	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8003e28:	2110      	movs	r1, #16
 8003e2a:	480e      	ldr	r0, [pc, #56]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003e2c:	f002 fd0c 	bl	8006848 <HAL_GPIO_ReadPin>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <read_one_sign_from_keyboard+0x23e>
		   	{
		   		 sign = '*';
 8003e36:	232a      	movs	r3, #42	; 0x2a
 8003e38:	71fb      	strb	r3, [r7, #7]
		   		 readed_status = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	71bb      	strb	r3, [r7, #6]
		   	}
		   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2108      	movs	r1, #8
 8003e42:	4808      	ldr	r0, [pc, #32]	; (8003e64 <read_one_sign_from_keyboard+0x264>)
 8003e44:	f002 fd17 	bl	8006876 <HAL_GPIO_WritePin>
	for(i=1; i<=4; i++)
 8003e48:	797b      	ldrb	r3, [r7, #5]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	717b      	strb	r3, [r7, #5]
 8003e4e:	797b      	ldrb	r3, [r7, #5]
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	f67f aee3 	bls.w	8003c1c <read_one_sign_from_keyboard+0x1c>
		}
	}
	return sign;
 8003e56:	79fb      	ldrb	r3, [r7, #7]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40010800 	.word	0x40010800
 8003e64:	40010c00 	.word	0x40010c00

08003e68 <gps_mode>:
// ----------------------------------------------------------------------------
int gps_mode(char sign)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003e72:	2000      	movs	r0, #0
 8003e74:	f001 fa9a 	bl	80053ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003e78:	f001 faba 	bl	80053f0 <ssd1306_UpdateScreen>
	// Print mode in head
	print_text_on_OLED(0, 1, true, "2.GPS: waiting...");
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <gps_mode+0xc8>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2101      	movs	r1, #1
 8003e82:	2000      	movs	r0, #0
 8003e84:	f001 f9bc 	bl	8005200 <print_text_on_OLED>

	uint8_t broken_packet_counter = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]

	do                                                            	// Wait on choiсe
	{
		sign = read_one_sign_from_keyboard();                       // Read sign from keyboard
 8003e8c:	f7ff feb8 	bl	8003c00 <read_one_sign_from_keyboard>
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]

		if(sign == '*')    	// If select EXIT  // Exit in main menu
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	2b2a      	cmp	r3, #42	; 0x2a
 8003e98:	d112      	bne.n	8003ec0 <gps_mode+0x58>
		{
			// Clear all OLED
			ssd1306_Fill(Black);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f001 fa86 	bl	80053ac <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8003ea0:	f001 faa6 	bl	80053f0 <ssd1306_UpdateScreen>

			GPS_MODE = false;
 8003ea4:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <gps_mode+0xcc>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
			GSM_MODE = false;
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <gps_mode+0xd0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
			FINGERPRINT_MODE = false;
 8003eb0:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <gps_mode+0xd4>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
			SENSORS_MODE = false;
 8003eb6:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <gps_mode+0xd8>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]

			return 1;   // Flag_fro exit from there
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e033      	b.n	8003f28 <gps_mode+0xc0>
		}
		else
		{
			// Parsing data form GPS
			parsing_GPS(GPS_buff, 512);
 8003ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ec4:	481f      	ldr	r0, [pc, #124]	; (8003f44 <gps_mode+0xdc>)
 8003ec6:	f7fe faa7 	bl	8002418 <parsing_GPS>
			int select_print_data = 1;							// Flag for print GPS data on OLED
 8003eca:	2301      	movs	r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]
			OLED_prinr_all_data(select_print_data);
 8003ece:	68b8      	ldr	r0, [r7, #8]
 8003ed0:	f000 ff1a 	bl	8004d08 <OLED_prinr_all_data>

			if(GPGGA_data_is_ready == 1)						// Check if data from GPS device was correct ( parsed GPGLL line correct)
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <gps_mode+0xe0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10b      	bne.n	8003ef4 <gps_mode+0x8c>
			{
				// Print the data that GPS is valid
				print_text_on_OLED(0, 1, false, "1.GPS: OK            ");
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <gps_mode+0xe4>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f001 f98c 	bl	8005200 <print_text_on_OLED>

				broken_packet_counter = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]
				GPGGA_data_is_ready = 0;
 8003eec:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <gps_mode+0xe0>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e014      	b.n	8003f1e <gps_mode+0xb6>
			}
			else												// If bad signal or GPS module was turned off
			{
				broken_packet_counter ++;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
				//HAL_Delay(500);
				if((GPGGA_data_is_ready != 1) && (broken_packet_counter >= 20))
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <gps_mode+0xe0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d00d      	beq.n	8003f1e <gps_mode+0xb6>
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b13      	cmp	r3, #19
 8003f06:	d90a      	bls.n	8003f1e <gps_mode+0xb6>
				{
					// Print the data that GPS is does not valid
					GPGGA_data_is_ready = 0;
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <gps_mode+0xe0>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
					broken_packet_counter = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]

					print_text_on_OLED(0, 1, false, "1.GPS: NO SIGNAL  ");
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <gps_mode+0xe8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	2101      	movs	r1, #1
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f001 f971 	bl	8005200 <print_text_on_OLED>
				}
			}

			ssd1306_UpdateScreen();
 8003f1e:	f001 fa67 	bl	80053f0 <ssd1306_UpdateScreen>
		}
	}while ( (sign != '*'));     // Select one from 3 modes
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2b2a      	cmp	r3, #42	; 0x2a
 8003f26:	d1b1      	bne.n	8003e8c <gps_mode+0x24>
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	0800e348 	.word	0x0800e348
 8003f34:	200002c5 	.word	0x200002c5
 8003f38:	200002c4 	.word	0x200002c4
 8003f3c:	200002c6 	.word	0x200002c6
 8003f40:	200002c7 	.word	0x200002c7
 8003f44:	20000cd8 	.word	0x20000cd8
 8003f48:	20000278 	.word	0x20000278
 8003f4c:	0800e35c 	.word	0x0800e35c
 8003f50:	0800e374 	.word	0x0800e374

08003f54 <gsm_mode>:
// ----------------------------------------------------------------------------
int gsm_mode(char sign)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a2      	sub	sp, #136	; 0x88
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8003f5e:	2000      	movs	r0, #0
 8003f60:	f001 fa24 	bl	80053ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003f64:	f001 fa44 	bl	80053f0 <ssd1306_UpdateScreen>
	// Print mode in head
	char str_gsm[50]={0};
 8003f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f6c:	2232      	movs	r2, #50	; 0x32
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f006 fef3 	bl	800ad5c <memset>
	print_text_on_OLED(0, 1, true, "1.GSM: waiting...");
 8003f76:	4bc5      	ldr	r3, [pc, #788]	; (800428c <gsm_mode+0x338>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f001 f93f 	bl	8005200 <print_text_on_OLED>

	// Init GSM module
	init_GSM_uart_comunication();
 8003f82:	f7fe faf3 	bl	800256c <init_GSM_uart_comunication>
	if(init_gsm_module() == HAL_OK)
 8003f86:	f7fe fb03 	bl	8002590 <init_gsm_module>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d111      	bne.n	8003fb4 <gsm_mode+0x60>
	{
		// init OK
		GSM_INIT = 1;
 8003f90:	4bbf      	ldr	r3, [pc, #764]	; (8004290 <gsm_mode+0x33c>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
		claen_oled_lines(true, false, false, false, false);
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f001 f8b7 	bl	8005114 <claen_oled_lines>
		print_text_on_OLED(0, 1, true, "1.GSM: OK");
 8003fa6:	4bbb      	ldr	r3, [pc, #748]	; (8004294 <gsm_mode+0x340>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2101      	movs	r1, #1
 8003fac:	2000      	movs	r0, #0
 8003fae:	f001 f927 	bl	8005200 <print_text_on_OLED>
 8003fb2:	e014      	b.n	8003fde <gsm_mode+0x8a>
	}
	else
	{
		// GSM didn't init
		GSM_INIT = 0;
 8003fb4:	4bb6      	ldr	r3, [pc, #728]	; (8004290 <gsm_mode+0x33c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
		claen_oled_lines(true, false, false, false, false);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f001 f8a5 	bl	8005114 <claen_oled_lines>
		print_text_on_OLED(0, 1, true, "1.GSM: ERROR");
 8003fca:	4bb3      	ldr	r3, [pc, #716]	; (8004298 <gsm_mode+0x344>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	2101      	movs	r1, #1
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f001 f915 	bl	8005200 <print_text_on_OLED>
		HAL_Delay(2000);
 8003fd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003fda:	f001 ff47 	bl	8005e6c <HAL_Delay>
	}
	// END INIT GSM MODULE  //////////////////////////

    if(GSM_INIT == 1)									// If init GSM module corect
 8003fde:	4bac      	ldr	r3, [pc, #688]	; (8004290 <gsm_mode+0x33c>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	f040 821e 	bne.w	8004424 <gsm_mode+0x4d0>
    {
    	int incoming_call_status = 0;					// Call status.
 8003fe8:	2300      	movs	r3, #0
 8003fea:	67fb      	str	r3, [r7, #124]	; 0x7c
    	bool first_time_after_call = false;
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

    	int print_oled_status = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	673b      	str	r3, [r7, #112]	; 0x70

		// Print GSM menu
    	print_text_on_OLED(0, 2, false, "1.CALL to me");
 8003ff6:	4ba9      	ldr	r3, [pc, #676]	; (800429c <gsm_mode+0x348>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f001 f8ff 	bl	8005200 <print_text_on_OLED>
    	print_text_on_OLED(0, 3, false, "2.CALL on number");
 8004002:	4ba7      	ldr	r3, [pc, #668]	; (80042a0 <gsm_mode+0x34c>)
 8004004:	2200      	movs	r2, #0
 8004006:	2103      	movs	r1, #3
 8004008:	2000      	movs	r0, #0
 800400a:	f001 f8f9 	bl	8005200 <print_text_on_OLED>
    	print_text_on_OLED(0, 4, true, "3.For send SMS");
 800400e:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <gsm_mode+0x350>)
 8004010:	2201      	movs	r2, #1
 8004012:	2104      	movs	r1, #4
 8004014:	2000      	movs	r0, #0
 8004016:	f001 f8f3 	bl	8005200 <print_text_on_OLED>

		bool incoming_call_status_oled = false;				// Status for blinky
 800401a:	2300      	movs	r3, #0
 800401c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		char incoming_number[15] = {0};						// Buffer for incoming number
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	f8c3 200b 	str.w	r2, [r3, #11]
		char sign='\0';
 8004030:	2300      	movs	r3, #0
 8004032:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		{
			do
			{
				// Wait incoming call

				incoming_call_status = wait_incoming_call(incoming_number);
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fedc 	bl	8002df8 <wait_incoming_call>
 8004040:	67f8      	str	r0, [r7, #124]	; 0x7c

				if(incoming_call_status == 2)											// detect incoming call
 8004042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004044:	2b02      	cmp	r3, #2
 8004046:	f040 8150 	bne.w	80042ea <gsm_mode+0x396>
				{
					sign = read_one_sign_from_keyboard();								// Read sign from keyboard
 800404a:	f7ff fdd9 	bl	8003c00 <read_one_sign_from_keyboard>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					incoming_call_status = wait_incoming_call(incoming_number);			// Read answer from GSM
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fecd 	bl	8002df8 <wait_incoming_call>
 800405e:	67f8      	str	r0, [r7, #124]	; 0x7c

					// For print one time
					if(incoming_call_status_oled == false)
 8004060:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004064:	f083 0301 	eor.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d027      	beq.n	80040be <gsm_mode+0x16a>
					{
						claen_oled_lines(false, true, true, true, true);
 800406e:	2301      	movs	r3, #1
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2301      	movs	r3, #1
 8004074:	2201      	movs	r2, #1
 8004076:	2101      	movs	r1, #1
 8004078:	2000      	movs	r0, #0
 800407a:	f001 f84b 	bl	8005114 <claen_oled_lines>
						print_text_on_OLED(0, 2, false, "Incoming CALL...");
 800407e:	4b8a      	ldr	r3, [pc, #552]	; (80042a8 <gsm_mode+0x354>)
 8004080:	2200      	movs	r2, #0
 8004082:	2102      	movs	r1, #2
 8004084:	2000      	movs	r0, #0
 8004086:	f001 f8bb 	bl	8005200 <print_text_on_OLED>
						print_text_on_OLED(0, 3, false, incoming_number);
 800408a:	f107 031c 	add.w	r3, r7, #28
 800408e:	2200      	movs	r2, #0
 8004090:	2103      	movs	r1, #3
 8004092:	2000      	movs	r0, #0
 8004094:	f001 f8b4 	bl	8005200 <print_text_on_OLED>
						print_text_on_OLED(0, 4, false, "'A':pick up phone");
 8004098:	4b84      	ldr	r3, [pc, #528]	; (80042ac <gsm_mode+0x358>)
 800409a:	2200      	movs	r2, #0
 800409c:	2104      	movs	r1, #4
 800409e:	2000      	movs	r0, #0
 80040a0:	f001 f8ae 	bl	8005200 <print_text_on_OLED>
						print_text_on_OLED(0, 5, true, "'*':end call");
 80040a4:	4b82      	ldr	r3, [pc, #520]	; (80042b0 <gsm_mode+0x35c>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	2105      	movs	r1, #5
 80040aa:	2000      	movs	r0, #0
 80040ac:	f001 f8a8 	bl	8005200 <print_text_on_OLED>

						memset(incoming_number, 0 , sizeof(incoming_number));
 80040b0:	f107 031c 	add.w	r3, r7, #28
 80040b4:	220f      	movs	r2, #15
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f006 fe4f 	bl	800ad5c <memset>
					}

					// Waiting for action on incoming call or sms
					do{
						sign = read_one_sign_from_keyboard();
 80040be:	f7ff fd9f 	bl	8003c00 <read_one_sign_from_keyboard>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
						incoming_call_status = wait_incoming_call(incoming_number);			// Read answer from GSM
 80040c8:	f107 031c 	add.w	r3, r7, #28
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fe93 	bl	8002df8 <wait_incoming_call>
 80040d2:	67f8      	str	r0, [r7, #124]	; 0x7c
						HAL_Delay(200);
 80040d4:	20c8      	movs	r0, #200	; 0xc8
 80040d6:	f001 fec9 	bl	8005e6c <HAL_Delay>
					}while ((sign != '*') && (sign != 'A') && (incoming_call_status != 1));
 80040da:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80040de:	2b2a      	cmp	r3, #42	; 0x2a
 80040e0:	d006      	beq.n	80040f0 <gsm_mode+0x19c>
 80040e2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80040e6:	2b41      	cmp	r3, #65	; 0x41
 80040e8:	d002      	beq.n	80040f0 <gsm_mode+0x19c>
 80040ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d1e6      	bne.n	80040be <gsm_mode+0x16a>

					if(sign == '*')															// Reject the call
 80040f0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80040f4:	2b2a      	cmp	r3, #42	; 0x2a
 80040f6:	d133      	bne.n	8004160 <gsm_mode+0x20c>
					{
						if(end_of_call() != 1)												// Send "end call" command in GSM module
 80040f8:	f7fe fd80 	bl	8002bfc <end_of_call>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d12e      	bne.n	8004160 <gsm_mode+0x20c>
						{
							// ERROR
						}
						else
						{
							uint8_t i, res = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							for(i=0; i<=6; i++)
 8004108:	2300      	movs	r3, #0
 800410a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 800410e:	e023      	b.n	8004158 <gsm_mode+0x204>
							{
								res = i%2;
 8004110:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								if(res)
 800411c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <gsm_mode+0x1e4>
								{
									print_text_on_OLED(0, 2, true, "CALL END");
 8004124:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <gsm_mode+0x360>)
 8004126:	2201      	movs	r2, #1
 8004128:	2102      	movs	r1, #2
 800412a:	2000      	movs	r0, #0
 800412c:	f001 f868 	bl	8005200 <print_text_on_OLED>
									HAL_Delay(200);
 8004130:	20c8      	movs	r0, #200	; 0xc8
 8004132:	f001 fe9b 	bl	8005e6c <HAL_Delay>
 8004136:	e00a      	b.n	800414e <gsm_mode+0x1fa>
								}
								else
								{
									claen_oled_lines(false, true, true, true, true);		// Clean OLED
 8004138:	2301      	movs	r3, #1
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2301      	movs	r3, #1
 800413e:	2201      	movs	r2, #1
 8004140:	2101      	movs	r1, #1
 8004142:	2000      	movs	r0, #0
 8004144:	f000 ffe6 	bl	8005114 <claen_oled_lines>
									HAL_Delay(200);
 8004148:	20c8      	movs	r0, #200	; 0xc8
 800414a:	f001 fe8f 	bl	8005e6c <HAL_Delay>
							for(i=0; i<=6; i++)
 800414e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004152:	3301      	adds	r3, #1
 8004154:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8004158:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800415c:	2b06      	cmp	r3, #6
 800415e:	d9d7      	bls.n	8004110 <gsm_mode+0x1bc>
							}

						}
					}

					if(sign == 'A')													// Pick up the phone
 8004160:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004164:	2b41      	cmp	r3, #65	; 0x41
 8004166:	f040 80bd 	bne.w	80042e4 <gsm_mode+0x390>
					{
						if(accepts_on_incomming_call() == 1);						// Send "pick up the phone" command in GSM module
 800416a:	f7fe fda1 	bl	8002cb0 <accepts_on_incomming_call>
						{
							claen_oled_lines(false, true, true, true, true);		// Clean OLED
 800416e:	2301      	movs	r3, #1
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2301      	movs	r3, #1
 8004174:	2201      	movs	r2, #1
 8004176:	2101      	movs	r1, #1
 8004178:	2000      	movs	r0, #0
 800417a:	f000 ffcb 	bl	8005114 <claen_oled_lines>
							print_text_on_OLED(0, 2, false, "SPEAK...");
 800417e:	4b4e      	ldr	r3, [pc, #312]	; (80042b8 <gsm_mode+0x364>)
 8004180:	2200      	movs	r2, #0
 8004182:	2102      	movs	r1, #2
 8004184:	2000      	movs	r0, #0
 8004186:	f001 f83b 	bl	8005200 <print_text_on_OLED>
							print_text_on_OLED(0, 5, true, "'*':end call");
 800418a:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <gsm_mode+0x35c>)
 800418c:	2201      	movs	r2, #1
 800418e:	2105      	movs	r1, #5
 8004190:	2000      	movs	r0, #0
 8004192:	f001 f835 	bl	8005200 <print_text_on_OLED>

							do{
								HAL_Delay(200);
 8004196:	20c8      	movs	r0, #200	; 0xc8
 8004198:	f001 fe68 	bl	8005e6c <HAL_Delay>
								sign = read_one_sign_from_keyboard();                      				// Read sign from keyboard
 800419c:	f7ff fd30 	bl	8003c00 <read_one_sign_from_keyboard>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
								HAL_Delay(20);
 80041a6:	2014      	movs	r0, #20
 80041a8:	f001 fe60 	bl	8005e6c <HAL_Delay>
								incoming_call_status = wait_incoming_call(incoming_number);				// Read answer from GSM
 80041ac:	f107 031c 	add.w	r3, r7, #28
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fe21 	bl	8002df8 <wait_incoming_call>
 80041b6:	67f8      	str	r0, [r7, #124]	; 0x7c

								if(incoming_call_status == 1)											// Sometimes GSM module sends wrong answer (BUG)
 80041b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d108      	bne.n	80041d0 <gsm_mode+0x27c>
								{
									HAL_Delay(200);
 80041be:	20c8      	movs	r0, #200	; 0xc8
 80041c0:	f001 fe54 	bl	8005e6c <HAL_Delay>
									incoming_call_status = wait_incoming_call(incoming_number);			// Read answer from GSM again
 80041c4:	f107 031c 	add.w	r3, r7, #28
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fe15 	bl	8002df8 <wait_incoming_call>
 80041ce:	67f8      	str	r0, [r7, #124]	; 0x7c
								}

							}while ((sign != '*') && (incoming_call_status == 3) );
 80041d0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80041d4:	2b2a      	cmp	r3, #42	; 0x2a
 80041d6:	d002      	beq.n	80041de <gsm_mode+0x28a>
 80041d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d0db      	beq.n	8004196 <gsm_mode+0x242>

							if(incoming_call_status == 1)												// If end call from phone
 80041de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d12e      	bne.n	8004242 <gsm_mode+0x2ee>
							{
								uint8_t i, res = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
								for(i=0; i<=6; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80041f0:	e023      	b.n	800423a <gsm_mode+0x2e6>
								{
									res = i%2;
 80041f2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
									if(res)
 80041fe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <gsm_mode+0x2c6>
									{
										print_text_on_OLED(0, 2, true, "CALL END");
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <gsm_mode+0x360>)
 8004208:	2201      	movs	r2, #1
 800420a:	2102      	movs	r1, #2
 800420c:	2000      	movs	r0, #0
 800420e:	f000 fff7 	bl	8005200 <print_text_on_OLED>
										HAL_Delay(200);
 8004212:	20c8      	movs	r0, #200	; 0xc8
 8004214:	f001 fe2a 	bl	8005e6c <HAL_Delay>
 8004218:	e00a      	b.n	8004230 <gsm_mode+0x2dc>
									}
									else
									{
										claen_oled_lines(false, true, true, true, true);				// Clean OLED
 800421a:	2301      	movs	r3, #1
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2301      	movs	r3, #1
 8004220:	2201      	movs	r2, #1
 8004222:	2101      	movs	r1, #1
 8004224:	2000      	movs	r0, #0
 8004226:	f000 ff75 	bl	8005114 <claen_oled_lines>
										HAL_Delay(200);
 800422a:	20c8      	movs	r0, #200	; 0xc8
 800422c:	f001 fe1e 	bl	8005e6c <HAL_Delay>
								for(i=0; i<=6; i++)
 8004230:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8004234:	3301      	adds	r3, #1
 8004236:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 800423a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800423e:	2b06      	cmp	r3, #6
 8004240:	d9d7      	bls.n	80041f2 <gsm_mode+0x29e>
									}
								}
							}
							if(sign == '*')																// If end call from GSM mode
 8004242:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004246:	2b2a      	cmp	r3, #42	; 0x2a
 8004248:	d14c      	bne.n	80042e4 <gsm_mode+0x390>
							{
								if(end_of_call() != 1)													// Send "end call" command in GSM module
 800424a:	f7fe fcd7 	bl	8002bfc <end_of_call>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d147      	bne.n	80042e4 <gsm_mode+0x390>
								{
																										// ERROR
								}
								else
								{
									uint8_t i, res = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
									for(i=0; i<=6; i++)
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004260:	e03c      	b.n	80042dc <gsm_mode+0x388>
									{
										res = i%2;
 8004262:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
										if(res)
 800426e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8004272:	2b00      	cmp	r3, #0
 8004274:	d022      	beq.n	80042bc <gsm_mode+0x368>
										{
											print_text_on_OLED(0, 2, true, "CALL END");
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <gsm_mode+0x360>)
 8004278:	2201      	movs	r2, #1
 800427a:	2102      	movs	r1, #2
 800427c:	2000      	movs	r0, #0
 800427e:	f000 ffbf 	bl	8005200 <print_text_on_OLED>

											HAL_Delay(200);
 8004282:	20c8      	movs	r0, #200	; 0xc8
 8004284:	f001 fdf2 	bl	8005e6c <HAL_Delay>
 8004288:	e023      	b.n	80042d2 <gsm_mode+0x37e>
 800428a:	bf00      	nop
 800428c:	0800e388 	.word	0x0800e388
 8004290:	2000027d 	.word	0x2000027d
 8004294:	0800e39c 	.word	0x0800e39c
 8004298:	0800e3a8 	.word	0x0800e3a8
 800429c:	0800e3b8 	.word	0x0800e3b8
 80042a0:	0800e3c8 	.word	0x0800e3c8
 80042a4:	0800e3dc 	.word	0x0800e3dc
 80042a8:	0800e3ec 	.word	0x0800e3ec
 80042ac:	0800e400 	.word	0x0800e400
 80042b0:	0800e414 	.word	0x0800e414
 80042b4:	0800e424 	.word	0x0800e424
 80042b8:	0800e430 	.word	0x0800e430
										}
										else
										{
											claen_oled_lines(false, true, true, true, true);		// Clean OLED
 80042bc:	2301      	movs	r3, #1
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2301      	movs	r3, #1
 80042c2:	2201      	movs	r2, #1
 80042c4:	2101      	movs	r1, #1
 80042c6:	2000      	movs	r0, #0
 80042c8:	f000 ff24 	bl	8005114 <claen_oled_lines>
											HAL_Delay(200);
 80042cc:	20c8      	movs	r0, #200	; 0xc8
 80042ce:	f001 fdcd 	bl	8005e6c <HAL_Delay>
									for(i=0; i<=6; i++)
 80042d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042d6:	3301      	adds	r3, #1
 80042d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80042dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d9be      	bls.n	8004262 <gsm_mode+0x30e>
									}
								}
							}
						}
					}
					incoming_call_status_oled = true;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				}
				HAL_Delay(200);
 80042ea:	20c8      	movs	r0, #200	; 0xc8
 80042ec:	f001 fdbe 	bl	8005e6c <HAL_Delay>
			}while (INCOMMING_RING_OR_SMS_STATUS == true);									// If "Ring" pin is in low (active) state
 80042f0:	4b59      	ldr	r3, [pc, #356]	; (8004458 <gsm_mode+0x504>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f ae9e 	bne.w	8004036 <gsm_mode+0xe2>

			// if no any incoming calls or sms
			incoming_call_status = wait_incoming_call(incoming_number);						// Read answer from GSM
 80042fa:	f107 031c 	add.w	r3, r7, #28
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fd7a 	bl	8002df8 <wait_incoming_call>
 8004304:	67f8      	str	r0, [r7, #124]	; 0x7c
			if((INCOMMING_RING_OR_SMS_STATUS == false) && (incoming_call_status == 1))
 8004306:	4b54      	ldr	r3, [pc, #336]	; (8004458 <gsm_mode+0x504>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	f083 0301 	eor.w	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8081 	beq.w	8004418 <gsm_mode+0x4c4>
 8004316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d17d      	bne.n	8004418 <gsm_mode+0x4c4>
			{
				if(incoming_call_status_oled == true)										// print menu, only after incoming call or sms
 800431c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01c      	beq.n	800435e <gsm_mode+0x40a>
				{
					claen_oled_lines(false, true, true, true, true);
 8004324:	2301      	movs	r3, #1
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2301      	movs	r3, #1
 800432a:	2201      	movs	r2, #1
 800432c:	2101      	movs	r1, #1
 800432e:	2000      	movs	r0, #0
 8004330:	f000 fef0 	bl	8005114 <claen_oled_lines>

					// Print GSM menu
					print_text_on_OLED(0, 2, false, "1.CALL to me");
 8004334:	4b49      	ldr	r3, [pc, #292]	; (800445c <gsm_mode+0x508>)
 8004336:	2200      	movs	r2, #0
 8004338:	2102      	movs	r1, #2
 800433a:	2000      	movs	r0, #0
 800433c:	f000 ff60 	bl	8005200 <print_text_on_OLED>
					print_text_on_OLED(0, 3, false, "2.CALL on number");
 8004340:	4b47      	ldr	r3, [pc, #284]	; (8004460 <gsm_mode+0x50c>)
 8004342:	2200      	movs	r2, #0
 8004344:	2103      	movs	r1, #3
 8004346:	2000      	movs	r0, #0
 8004348:	f000 ff5a 	bl	8005200 <print_text_on_OLED>
					print_text_on_OLED(0, 4, true, "3.For send SMS");
 800434c:	4b45      	ldr	r3, [pc, #276]	; (8004464 <gsm_mode+0x510>)
 800434e:	2201      	movs	r2, #1
 8004350:	2104      	movs	r1, #4
 8004352:	2000      	movs	r0, #0
 8004354:	f000 ff54 	bl	8005200 <print_text_on_OLED>

					incoming_call_status_oled = false;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				}

				HAL_Delay(200);
 800435e:	20c8      	movs	r0, #200	; 0xc8
 8004360:	f001 fd84 	bl	8005e6c <HAL_Delay>
				sign = read_one_sign_from_keyboard();
 8004364:	f7ff fc4c 	bl	8003c00 <read_one_sign_from_keyboard>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

				if(sign == '1')																// Call to me
 800436e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004372:	2b31      	cmp	r3, #49	; 0x31
 8004374:	d10d      	bne.n	8004392 <gsm_mode+0x43e>
				{
					int call_status = call_on_mu_number();
 8004376:	f7fe fb21 	bl	80029bc <call_on_mu_number>
 800437a:	66b8      	str	r0, [r7, #104]	; 0x68
					show_sratus_call (call_status, str_gsm, sign, 1);
 800437c:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8004380:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004384:	2301      	movs	r3, #1
 8004386:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004388:	f000 fb38 	bl	80049fc <show_sratus_call>

					incoming_call_status_oled = true;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				}

				if(sign == '2')  															// call on number
 8004392:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8004396:	2b32      	cmp	r3, #50	; 0x32
 8004398:	d13e      	bne.n	8004418 <gsm_mode+0x4c4>
				{
					// 1. Type mobile number.
					char number[13]={0};													// Buffer where will be save entered number
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	731a      	strb	r2, [r3, #12]
					uint8_t size_number = 0;												// How many entered digits in number
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					bool entered_number_status = false;										// Status number buffer.
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					entered_number_status = enter_a_mobile_number(number);					// Enter number
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fbcb 	bl	8004b54 <enter_a_mobile_number>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

					for(size_number = 0; number[size_number] != '\0'; size_number++){}		// Count digits
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80043ca:	e004      	b.n	80043d6 <gsm_mode+0x482>
 80043cc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80043d0:	3301      	adds	r3, #1
 80043d2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80043d6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80043da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80043de:	4413      	add	r3, r2
 80043e0:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f1      	bne.n	80043cc <gsm_mode+0x478>

					// 2. Call on entered number.
					if(entered_number_status == true)										// If entered all digits will be call on this number
 80043e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d010      	beq.n	8004412 <gsm_mode+0x4be>
					{
						int call_status = call_on_number(number, size_number);
 80043f0:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fb38 	bl	8002a70 <call_on_number>
 8004400:	6638      	str	r0, [r7, #96]	; 0x60
						show_sratus_call(call_status, str_gsm, sign, 0);
 8004402:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8004406:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800440a:	2300      	movs	r3, #0
 800440c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800440e:	f000 faf5 	bl	80049fc <show_sratus_call>
					}
					incoming_call_status_oled = true;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

				}
			}


		}while ( sign != '*');     // Select one from 3 modes
 8004418:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800441c:	2b2a      	cmp	r3, #42	; 0x2a
 800441e:	f47f ae0a 	bne.w	8004036 <gsm_mode+0xe2>
        FINGERPRINT_MODE = false;
        SENSORS_MODE = false;

        return 1;  			 // Flag_fro exit from there
    }
}
 8004422:	e015      	b.n	8004450 <gsm_mode+0x4fc>
        HAL_Delay(2000);
 8004424:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004428:	f001 fd20 	bl	8005e6c <HAL_Delay>
        ssd1306_Fill(Black);
 800442c:	2000      	movs	r0, #0
 800442e:	f000 ffbd 	bl	80053ac <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8004432:	f000 ffdd 	bl	80053f0 <ssd1306_UpdateScreen>
        GSM_MODE = false;
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <gsm_mode+0x514>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
        GPS_MODE = false;
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <gsm_mode+0x518>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
        FINGERPRINT_MODE = false;
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <gsm_mode+0x51c>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
        SENSORS_MODE = false;
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <gsm_mode+0x520>)
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
        return 1;  			 // Flag_fro exit from there
 800444e:	2301      	movs	r3, #1
}
 8004450:	4618      	mov	r0, r3
 8004452:	3780      	adds	r7, #128	; 0x80
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	200002c8 	.word	0x200002c8
 800445c:	0800e3b8 	.word	0x0800e3b8
 8004460:	0800e3c8 	.word	0x0800e3c8
 8004464:	0800e3dc 	.word	0x0800e3dc
 8004468:	200002c4 	.word	0x200002c4
 800446c:	200002c5 	.word	0x200002c5
 8004470:	200002c6 	.word	0x200002c6
 8004474:	200002c7 	.word	0x200002c7

08004478 <fingerprint_mode>:
// ----------------------------------------------------------------------------
int fingerprint_mode(char sign)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b091      	sub	sp, #68	; 0x44
 800447c:	af02      	add	r7, sp, #8
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
	// Clearn OLED
	ssd1306_Fill(Black);
 8004482:	2000      	movs	r0, #0
 8004484:	f000 ff92 	bl	80053ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004488:	f000 ffb2 	bl	80053f0 <ssd1306_UpdateScreen>
	// Print modes on OLED
	char str_fingerprint[30]={0};
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	221e      	movs	r2, #30
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f006 fc61 	bl	800ad5c <memset>
	// Print menu fingerprint
	print_text_on_OLED(0, 1, false, "3.FINGERPRINT");
 800449a:	4bce      	ldr	r3, [pc, #824]	; (80047d4 <fingerprint_mode+0x35c>)
 800449c:	2200      	movs	r2, #0
 800449e:	2101      	movs	r1, #1
 80044a0:	2000      	movs	r0, #0
 80044a2:	f000 fead 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 2, false, "1. Enroll finger");
 80044a6:	4bcc      	ldr	r3, [pc, #816]	; (80047d8 <fingerprint_mode+0x360>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	2102      	movs	r1, #2
 80044ac:	2000      	movs	r0, #0
 80044ae:	f000 fea7 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 3, false, "2. Delete all IDs");
 80044b2:	4bca      	ldr	r3, [pc, #808]	; (80047dc <fingerprint_mode+0x364>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	2103      	movs	r1, #3
 80044b8:	2000      	movs	r0, #0
 80044ba:	f000 fea1 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 4, false, "3. Identify");
 80044be:	4bc8      	ldr	r3, [pc, #800]	; (80047e0 <fingerprint_mode+0x368>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	2104      	movs	r1, #4
 80044c4:	2000      	movs	r0, #0
 80044c6:	f000 fe9b 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 5, true, "'*' to EXIT");
 80044ca:	4bc6      	ldr	r3, [pc, #792]	; (80047e4 <fingerprint_mode+0x36c>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	2105      	movs	r1, #5
 80044d0:	2000      	movs	r0, #0
 80044d2:	f000 fe95 	bl	8005200 <print_text_on_OLED>

	// Init fingerprint mogule
	touch_open(0);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fd f810 	bl	80014fc <touch_open>
	int u=0;
 80044dc:	2300      	movs	r3, #0
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
	for(u = 0; u<=3; u++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
 80044e4:	e00e      	b.n	8004504 <fingerprint_mode+0x8c>
	{
		HAL_Delay(50);
 80044e6:	2032      	movs	r0, #50	; 0x32
 80044e8:	f001 fcc0 	bl	8005e6c <HAL_Delay>
		touch_bakcklight(0);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f7fc fef7 	bl	80012e0 <touch_bakcklight>
		HAL_Delay(50);
 80044f2:	2032      	movs	r0, #50	; 0x32
 80044f4:	f001 fcba 	bl	8005e6c <HAL_Delay>
		touch_bakcklight(1);
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7fc fef1 	bl	80012e0 <touch_bakcklight>
	for(u = 0; u<=3; u++)
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	3301      	adds	r3, #1
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	2b03      	cmp	r3, #3
 8004508:	dded      	ble.n	80044e6 <fingerprint_mode+0x6e>
	}

	do                                                            // Whaite for choise
	{
		// Place for sensors code
		HAL_Delay(200);
 800450a:	20c8      	movs	r0, #200	; 0xc8
 800450c:	f001 fcae 	bl	8005e6c <HAL_Delay>
		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004510:	f7ff fb76 	bl	8003c00 <read_one_sign_from_keyboard>
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
	    if(sign == '1')
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b31      	cmp	r3, #49	; 0x31
 800451c:	d14d      	bne.n	80045ba <fingerprint_mode+0x142>
	    {
	    	// Clear all OLED
	        ssd1306_Fill(Black);
 800451e:	2000      	movs	r0, #0
 8004520:	f000 ff44 	bl	80053ac <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 8004524:	f000 ff64 	bl	80053f0 <ssd1306_UpdateScreen>
	        // Print mode in head
	        print_text_on_OLED(0, 1, true, "Set ID");
 8004528:	4baf      	ldr	r3, [pc, #700]	; (80047e8 <fingerprint_mode+0x370>)
 800452a:	2201      	movs	r2, #1
 800452c:	2101      	movs	r1, #1
 800452e:	2000      	movs	r0, #0
 8004530:	f000 fe66 	bl	8005200 <print_text_on_OLED>
	        HAL_Delay(1000);
 8004534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004538:	f001 fc98 	bl	8005e6c <HAL_Delay>
	        // Set ID
	        char ID_set = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	        ID_set = set_ID_number();
 8004542:	f000 fae9 	bl	8004b18 <set_ID_number>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	        memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	221e      	movs	r2, #30
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f006 fc01 	bl	800ad5c <memset>
	        strcpy(str_fingerprint, "You set ID: ");
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	4aa3      	ldr	r2, [pc, #652]	; (80047ec <fingerprint_mode+0x374>)
 8004560:	461c      	mov	r4, r3
 8004562:	4613      	mov	r3, r2
 8004564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004566:	c407      	stmia	r4!, {r0, r1, r2}
 8004568:	7023      	strb	r3, [r4, #0]
	        // Add ID to the end of string
	        for(int g=0; g<=(sizeof(str_fingerprint)); g++)
 800456a:	2300      	movs	r3, #0
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
 800456e:	e011      	b.n	8004594 <fingerprint_mode+0x11c>
	        {
	        	if(str_fingerprint[g] == '\0')
 8004570:	f107 020c 	add.w	r2, r7, #12
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <fingerprint_mode+0x116>
	        	{
	        		str_fingerprint[g] = ID_set;
 800457e:	f107 020c 	add.w	r2, r7, #12
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	4413      	add	r3, r2
 8004586:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800458a:	701a      	strb	r2, [r3, #0]
	        		break;
 800458c:	e005      	b.n	800459a <fingerprint_mode+0x122>
	        for(int g=0; g<=(sizeof(str_fingerprint)); g++)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	3301      	adds	r3, #1
 8004592:	633b      	str	r3, [r7, #48]	; 0x30
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	2b1e      	cmp	r3, #30
 8004598:	d9ea      	bls.n	8004570 <fingerprint_mode+0xf8>
	        	}
	        }

	        print_text_on_OLED(0, 2, true, str_fingerprint);
 800459a:	f107 030c 	add.w	r3, r7, #12
 800459e:	2201      	movs	r2, #1
 80045a0:	2102      	movs	r1, #2
 80045a2:	2000      	movs	r0, #0
 80045a4:	f000 fe2c 	bl	8005200 <print_text_on_OLED>

	       	HAL_Delay(500);
 80045a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045ac:	f001 fc5e 	bl	8005e6c <HAL_Delay>

	        my_identification_enroll_user(ID_set);
 80045b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd f861 	bl	800167c <my_identification_enroll_user>
	     }

	     if(sign == '2')
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	2b32      	cmp	r3, #50	; 0x32
 80045be:	d11e      	bne.n	80045fe <fingerprint_mode+0x186>
	     {
	        // Clear all OLED
	        ssd1306_Fill(Black);
 80045c0:	2000      	movs	r0, #0
 80045c2:	f000 fef3 	bl	80053ac <ssd1306_Fill>
	        ssd1306_UpdateScreen();
 80045c6:	f000 ff13 	bl	80053f0 <ssd1306_UpdateScreen>

	        // Ptint selected menu
	        print_text_on_OLED(0, 1, false, "2. Delete all IDs");
 80045ca:	4b84      	ldr	r3, [pc, #528]	; (80047dc <fingerprint_mode+0x364>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	2101      	movs	r1, #1
 80045d0:	2000      	movs	r0, #0
 80045d2:	f000 fe15 	bl	8005200 <print_text_on_OLED>
	        print_text_on_OLED(0, 2, true, "Deleting ...");
 80045d6:	4b86      	ldr	r3, [pc, #536]	; (80047f0 <fingerprint_mode+0x378>)
 80045d8:	2201      	movs	r2, #1
 80045da:	2102      	movs	r1, #2
 80045dc:	2000      	movs	r0, #0
 80045de:	f000 fe0f 	bl	8005200 <print_text_on_OLED>
	      	HAL_Delay(2000);
 80045e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80045e6:	f001 fc41 	bl	8005e6c <HAL_Delay>

	        touch_delete_all_fingerprints();
 80045ea:	f7fc fec7 	bl	800137c <touch_delete_all_fingerprints>

	        claen_oled_lines(true, true, true, true, true);			// Clear previous OLED line
 80045ee:	2301      	movs	r3, #1
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2301      	movs	r3, #1
 80045f4:	2201      	movs	r2, #1
 80045f6:	2101      	movs	r1, #1
 80045f8:	2001      	movs	r0, #1
 80045fa:	f000 fd8b 	bl	8005114 <claen_oled_lines>
	      }

	      if(sign == '3')
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b33      	cmp	r3, #51	; 0x33
 8004602:	f040 80bf 	bne.w	8004784 <fingerprint_mode+0x30c>
	      {
	    	  // Clear all OLED
	          ssd1306_Fill(Black);
 8004606:	2000      	movs	r0, #0
 8004608:	f000 fed0 	bl	80053ac <ssd1306_Fill>
	          ssd1306_UpdateScreen();
 800460c:	f000 fef0 	bl	80053f0 <ssd1306_UpdateScreen>

	          // Ptint selected menu
	          print_text_on_OLED(0, 1, true, "3. Identify");
 8004610:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <fingerprint_mode+0x368>)
 8004612:	2201      	movs	r2, #1
 8004614:	2101      	movs	r1, #1
 8004616:	2000      	movs	r0, #0
 8004618:	f000 fdf2 	bl	8005200 <print_text_on_OLED>

	          do                                                            // Waiting for choice
	          {
	        	  	print_text_on_OLED(0, 2, true, "Put your finger..");
 800461c:	4b75      	ldr	r3, [pc, #468]	; (80047f4 <fingerprint_mode+0x37c>)
 800461e:	2201      	movs	r2, #1
 8004620:	2102      	movs	r1, #2
 8004622:	2000      	movs	r0, #0
 8004624:	f000 fdec 	bl	8005200 <print_text_on_OLED>

	        	 	char ID = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	        	 	ID = identify();
 800462e:	f7fc ffab 	bl	8001588 <identify>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	        	 	// servo part
	        	 	if(ID == '1')
 8004638:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800463c:	2b31      	cmp	r3, #49	; 0x31
 800463e:	d111      	bne.n	8004664 <fingerprint_mode+0x1ec>
	        	 	{
	        	 		servo_motor(true);
 8004640:	2001      	movs	r0, #1
 8004642:	f000 fb31 	bl	8004ca8 <servo_motor>
	        	 		claen_oled_lines(false, false, false, false, true);
 8004646:	2301      	movs	r3, #1
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2300      	movs	r3, #0
 800464c:	2200      	movs	r2, #0
 800464e:	2100      	movs	r1, #0
 8004650:	2000      	movs	r0, #0
 8004652:	f000 fd5f 	bl	8005114 <claen_oled_lines>
	        	 		print_text_on_OLED(50, 5, true, "OPEN");
 8004656:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <fingerprint_mode+0x380>)
 8004658:	2201      	movs	r2, #1
 800465a:	2105      	movs	r1, #5
 800465c:	2032      	movs	r0, #50	; 0x32
 800465e:	f000 fdcf 	bl	8005200 <print_text_on_OLED>
 8004662:	e008      	b.n	8004676 <fingerprint_mode+0x1fe>
	        	 		//HAL_Delay(500);
	        	 	}
	        	 	else
	        	 	{
	        	 		servo_motor(false);
 8004664:	2000      	movs	r0, #0
 8004666:	f000 fb1f 	bl	8004ca8 <servo_motor>
	        	 		print_text_on_OLED(50, 5, true, "CLOCE");
 800466a:	4b64      	ldr	r3, [pc, #400]	; (80047fc <fingerprint_mode+0x384>)
 800466c:	2201      	movs	r2, #1
 800466e:	2105      	movs	r1, #5
 8004670:	2032      	movs	r0, #50	; 0x32
 8004672:	f000 fdc5 	bl	8005200 <print_text_on_OLED>
	        	 	}
	        	 	//

	        	 	if(ID == 0)														// If no any ID
 8004676:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800467a:	2b00      	cmp	r3, #0
 800467c:	d123      	bne.n	80046c6 <fingerprint_mode+0x24e>
	        	 	{
	        	 		// Make blinky
	        	 		static bool triger = false;
	        	 		if(triger == false)
 800467e:	4b60      	ldr	r3, [pc, #384]	; (8004800 <fingerprint_mode+0x388>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	f083 0301 	eor.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <fingerprint_mode+0x230>
	        	 		{
	        	 			print_text_on_OLED(0, 3, true, "Access denied   ");
 800468c:	4b5d      	ldr	r3, [pc, #372]	; (8004804 <fingerprint_mode+0x38c>)
 800468e:	2201      	movs	r2, #1
 8004690:	2103      	movs	r1, #3
 8004692:	2000      	movs	r0, #0
 8004694:	f000 fdb4 	bl	8005200 <print_text_on_OLED>
	        	 			HAL_Delay(400);
 8004698:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800469c:	f001 fbe6 	bl	8005e6c <HAL_Delay>

	        	 			triger = true;
 80046a0:	4b57      	ldr	r3, [pc, #348]	; (8004800 <fingerprint_mode+0x388>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e00e      	b.n	80046c6 <fingerprint_mode+0x24e>
	        	 		}
	        	 		else
	        	 		{
	        	 			claen_oled_lines(false, false, true, false, false);
 80046a8:	2300      	movs	r3, #0
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	2201      	movs	r2, #1
 80046b0:	2100      	movs	r1, #0
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 fd2e 	bl	8005114 <claen_oled_lines>
	        	 			triger = false;
 80046b8:	4b51      	ldr	r3, [pc, #324]	; (8004800 <fingerprint_mode+0x388>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
	        	 			HAL_Delay(400);
 80046be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80046c2:	f001 fbd3 	bl	8005e6c <HAL_Delay>
	        	 		}
	        	 	}
	        	 	// Print on OLED
	        	 	if(ID >=1)														// If ID founded
 80046c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d03c      	beq.n	8004748 <fingerprint_mode+0x2d0>
	        	 	{
	        	 		claen_oled_lines(false, true, true, false, false);			// Clear previous OLED line
 80046ce:	2300      	movs	r3, #0
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	2201      	movs	r2, #1
 80046d6:	2101      	movs	r1, #1
 80046d8:	2000      	movs	r0, #0
 80046da:	f000 fd1b 	bl	8005114 <claen_oled_lines>

	        	 		memset(str_fingerprint, 0 , sizeof(str_fingerprint));
 80046de:	f107 030c 	add.w	r3, r7, #12
 80046e2:	221e      	movs	r2, #30
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f006 fb38 	bl	800ad5c <memset>
	        	 		sprintf(str_fingerprint,"%s", "Your ID: ");					// Add ID to the end of it string
 80046ec:	f107 030c 	add.w	r3, r7, #12
 80046f0:	4a45      	ldr	r2, [pc, #276]	; (8004808 <fingerprint_mode+0x390>)
 80046f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80046f4:	c303      	stmia	r3!, {r0, r1}
 80046f6:	801a      	strh	r2, [r3, #0]

	        	 		// Find end of the string
	        	 		uint8_t i =0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	        	 		bool find_flag = true;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	        	 		do{
	        	 			i++;
 8004704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004708:	3301      	adds	r3, #1
 800470a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	        	 		}while (str_fingerprint[i] != '\0');
 800470e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004712:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004716:	4413      	add	r3, r2
 8004718:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f1      	bne.n	8004704 <fingerprint_mode+0x28c>
	        	 		// Add ID to the end of string
	        	 		str_fingerprint[i] = ID;
 8004720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004724:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004728:	4413      	add	r3, r2
 800472a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800472e:	f803 2c2c 	strb.w	r2, [r3, #-44]

	        	 		//Print ID on OLED.
	        	 		print_text_on_OLED(0, 3, true, str_fingerprint);
 8004732:	f107 030c 	add.w	r3, r7, #12
 8004736:	2201      	movs	r2, #1
 8004738:	2103      	movs	r1, #3
 800473a:	2000      	movs	r0, #0
 800473c:	f000 fd60 	bl	8005200 <print_text_on_OLED>

	        	 		HAL_Delay(2000);
 8004740:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004744:	f001 fb92 	bl	8005e6c <HAL_Delay>
	        	 	}


	               sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 8004748:	f7ff fa5a 	bl	8003c00 <read_one_sign_from_keyboard>
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]

	               if(sign == '*')    // If select EXIT  // Exit in main menu
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	2b2a      	cmp	r3, #42	; 0x2a
 8004754:	d112      	bne.n	800477c <fingerprint_mode+0x304>
	               {
	                   // Clear all OLED
	                   ssd1306_Fill(Black);
 8004756:	2000      	movs	r0, #0
 8004758:	f000 fe28 	bl	80053ac <ssd1306_Fill>
	                   ssd1306_UpdateScreen();
 800475c:	f000 fe48 	bl	80053f0 <ssd1306_UpdateScreen>

	                   GPS_MODE = false;
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <fingerprint_mode+0x394>)
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
	                   GSM_MODE = false;
 8004766:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <fingerprint_mode+0x398>)
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
	                   FINGERPRINT_MODE = false;
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <fingerprint_mode+0x39c>)
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
	                   SENSORS_MODE = false;
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <fingerprint_mode+0x3a0>)
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]

	                   return 1;          // Flag_fro exit from there
 8004778:	2301      	movs	r3, #1
 800477a:	e026      	b.n	80047ca <fingerprint_mode+0x352>
	                }
	           }while (sign != '*');     // Select EXIT
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	2b2a      	cmp	r3, #42	; 0x2a
 8004780:	f47f af4c 	bne.w	800461c <fingerprint_mode+0x1a4>
	       }

		   if(sign == '*')    // If select EXIT  // Exit in main menu
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	2b2a      	cmp	r3, #42	; 0x2a
 8004788:	d112      	bne.n	80047b0 <fingerprint_mode+0x338>
		   {
			    // Clear all OLED
				ssd1306_Fill(Black);
 800478a:	2000      	movs	r0, #0
 800478c:	f000 fe0e 	bl	80053ac <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8004790:	f000 fe2e 	bl	80053f0 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8004794:	4b1d      	ldr	r3, [pc, #116]	; (800480c <fingerprint_mode+0x394>)
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <fingerprint_mode+0x398>)
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <fingerprint_mode+0x39c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <fingerprint_mode+0x3a0>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 80047ac:	2301      	movs	r3, #1
 80047ae:	e00c      	b.n	80047ca <fingerprint_mode+0x352>
			}
		   }while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	2b31      	cmp	r3, #49	; 0x31
 80047b4:	d009      	beq.n	80047ca <fingerprint_mode+0x352>
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	2b32      	cmp	r3, #50	; 0x32
 80047ba:	d006      	beq.n	80047ca <fingerprint_mode+0x352>
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	2b33      	cmp	r3, #51	; 0x33
 80047c0:	d003      	beq.n	80047ca <fingerprint_mode+0x352>
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	2b2a      	cmp	r3, #42	; 0x2a
 80047c6:	f47f aea0 	bne.w	800450a <fingerprint_mode+0x92>
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	373c      	adds	r7, #60	; 0x3c
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	0800e43c 	.word	0x0800e43c
 80047d8:	0800e44c 	.word	0x0800e44c
 80047dc:	0800e460 	.word	0x0800e460
 80047e0:	0800e474 	.word	0x0800e474
 80047e4:	0800e480 	.word	0x0800e480
 80047e8:	0800e48c 	.word	0x0800e48c
 80047ec:	0800e494 	.word	0x0800e494
 80047f0:	0800e4a4 	.word	0x0800e4a4
 80047f4:	0800e4b4 	.word	0x0800e4b4
 80047f8:	0800e4c8 	.word	0x0800e4c8
 80047fc:	0800e4d0 	.word	0x0800e4d0
 8004800:	200002ca 	.word	0x200002ca
 8004804:	0800e4d8 	.word	0x0800e4d8
 8004808:	0800e4ec 	.word	0x0800e4ec
 800480c:	200002c5 	.word	0x200002c5
 8004810:	200002c4 	.word	0x200002c4
 8004814:	200002c6 	.word	0x200002c6
 8004818:	200002c7 	.word	0x200002c7

0800481c <sensors_mode>:
// ----------------------------------------------------------------------------

int sensors_mode(char sign)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b090      	sub	sp, #64	; 0x40
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
		// Clear all OLED
		ssd1306_Fill(Black);
 8004826:	2000      	movs	r0, #0
 8004828:	f000 fdc0 	bl	80053ac <ssd1306_Fill>
		ssd1306_UpdateScreen();
 800482c:	f000 fde0 	bl	80053f0 <ssd1306_UpdateScreen>
		// Sensors code place where
		// Print mode in head
		char str_sensors[50]={0};
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	2232      	movs	r2, #50	; 0x32
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f006 fa8f 	bl	800ad5c <memset>
		print_text_on_OLED(0, 1, false, "4.SENSORS");
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <sensors_mode+0x1b8>)
 8004840:	2200      	movs	r2, #0
 8004842:	2101      	movs	r1, #1
 8004844:	2000      	movs	r0, #0
 8004846:	f000 fcdb 	bl	8005200 <print_text_on_OLED>

		// Print meu fingerprint
		print_text_on_OLED(0, 2, false, "1. Run all sensors");
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <sensors_mode+0x1bc>)
 800484c:	2200      	movs	r2, #0
 800484e:	2102      	movs	r1, #2
 8004850:	2000      	movs	r0, #0
 8004852:	f000 fcd5 	bl	8005200 <print_text_on_OLED>
		print_text_on_OLED(0, 3, false, "2. function 2");
 8004856:	4b61      	ldr	r3, [pc, #388]	; (80049dc <sensors_mode+0x1c0>)
 8004858:	2200      	movs	r2, #0
 800485a:	2103      	movs	r1, #3
 800485c:	2000      	movs	r0, #0
 800485e:	f000 fccf 	bl	8005200 <print_text_on_OLED>
		print_text_on_OLED(0, 4, true, "3. function 3");
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <sensors_mode+0x1c4>)
 8004864:	2201      	movs	r2, #1
 8004866:	2104      	movs	r1, #4
 8004868:	2000      	movs	r0, #0
 800486a:	f000 fcc9 	bl	8005200 <print_text_on_OLED>

		do                                                            // Whaite for choise
			{
			// Place for sensors code

			sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 800486e:	f7ff f9c7 	bl	8003c00 <read_one_sign_from_keyboard>
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
            if(sign == '1')
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	2b31      	cmp	r3, #49	; 0x31
 800487a:	d12e      	bne.n	80048da <sensors_mode+0xbe>
            {
            	// Clear all OLED
            	ssd1306_Fill(Black);
 800487c:	2000      	movs	r0, #0
 800487e:	f000 fd95 	bl	80053ac <ssd1306_Fill>
            	ssd1306_UpdateScreen();
 8004882:	f000 fdb5 	bl	80053f0 <ssd1306_UpdateScreen>

            	// Ptint selected menu
            	print_text_on_OLED(0, 1, true, "1. Run all sensors");
 8004886:	4b54      	ldr	r3, [pc, #336]	; (80049d8 <sensors_mode+0x1bc>)
 8004888:	2201      	movs	r2, #1
 800488a:	2101      	movs	r1, #1
 800488c:	2000      	movs	r0, #0
 800488e:	f000 fcb7 	bl	8005200 <print_text_on_OLED>

            	do                                                            // Whaite for choise
            	{
            		// Place for code function 1
            		// Create timer for measure
            		read_T_and_H_SI7021();
 8004892:	f7fe fb99 	bl	8002fc8 <read_T_and_H_SI7021>
            		int select_print_data = 4;							// Flag for print sensors data on OLED
 8004896:	2304      	movs	r3, #4
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
            		OLED_prinr_all_data(select_print_data);
 800489a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800489c:	f000 fa34 	bl	8004d08 <OLED_prinr_all_data>

            		sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80048a0:	f7ff f9ae 	bl	8003c00 <read_one_sign_from_keyboard>
 80048a4:	4603      	mov	r3, r0
 80048a6:	71fb      	strb	r3, [r7, #7]

            		if(sign == '*')    // If select EXIT  // Exit in main menu
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	2b2a      	cmp	r3, #42	; 0x2a
 80048ac:	d112      	bne.n	80048d4 <sensors_mode+0xb8>
            		{
            			// Stop timer for measure

            			// Clear all OLED
            			ssd1306_Fill(Black);
 80048ae:	2000      	movs	r0, #0
 80048b0:	f000 fd7c 	bl	80053ac <ssd1306_Fill>
            			ssd1306_UpdateScreen();
 80048b4:	f000 fd9c 	bl	80053f0 <ssd1306_UpdateScreen>

            			GPS_MODE = false;
 80048b8:	4b4a      	ldr	r3, [pc, #296]	; (80049e4 <sensors_mode+0x1c8>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
            			GSM_MODE = false;
 80048be:	4b4a      	ldr	r3, [pc, #296]	; (80049e8 <sensors_mode+0x1cc>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
            			FINGERPRINT_MODE = false;
 80048c4:	4b49      	ldr	r3, [pc, #292]	; (80049ec <sensors_mode+0x1d0>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
            			SENSORS_MODE = false;
 80048ca:	4b49      	ldr	r3, [pc, #292]	; (80049f0 <sensors_mode+0x1d4>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]

            			return 1;          // Flag_fro exit from there
 80048d0:	2301      	movs	r3, #1
 80048d2:	e07b      	b.n	80049cc <sensors_mode+0x1b0>
            		}
            	}while (sign != '*');     // Select EXIT
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	2b2a      	cmp	r3, #42	; 0x2a
 80048d8:	d1db      	bne.n	8004892 <sensors_mode+0x76>
            }

            if(sign == '2')
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b32      	cmp	r3, #50	; 0x32
 80048de:	d127      	bne.n	8004930 <sensors_mode+0x114>
            {
                // Clear all OLED
                ssd1306_Fill(Black);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f000 fd63 	bl	80053ac <ssd1306_Fill>
               	ssd1306_UpdateScreen();
 80048e6:	f000 fd83 	bl	80053f0 <ssd1306_UpdateScreen>

                // Print selected menu
               	print_text_on_OLED(0, 1, true, "1. function 2");
 80048ea:	4b42      	ldr	r3, [pc, #264]	; (80049f4 <sensors_mode+0x1d8>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	2101      	movs	r1, #1
 80048f0:	2000      	movs	r0, #0
 80048f2:	f000 fc85 	bl	8005200 <print_text_on_OLED>

                do                                                            // Whaite for choise
                {
                       // Place for code function 2

                       sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 80048f6:	f7ff f983 	bl	8003c00 <read_one_sign_from_keyboard>
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]

                       if(sign == '*')    // If select EXIT  // Exit in main menu
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	2b2a      	cmp	r3, #42	; 0x2a
 8004902:	d112      	bne.n	800492a <sensors_mode+0x10e>
                       {
                            // Clear all OLED
                            ssd1306_Fill(Black);
 8004904:	2000      	movs	r0, #0
 8004906:	f000 fd51 	bl	80053ac <ssd1306_Fill>
                            ssd1306_UpdateScreen();
 800490a:	f000 fd71 	bl	80053f0 <ssd1306_UpdateScreen>

                            GPS_MODE = false;
 800490e:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <sensors_mode+0x1c8>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
                            GSM_MODE = false;
 8004914:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <sensors_mode+0x1cc>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
                            FINGERPRINT_MODE = false;
 800491a:	4b34      	ldr	r3, [pc, #208]	; (80049ec <sensors_mode+0x1d0>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
                            SENSORS_MODE = false;
 8004920:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <sensors_mode+0x1d4>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]

                            return 1;          // Flag_fro exit from there
 8004926:	2301      	movs	r3, #1
 8004928:	e050      	b.n	80049cc <sensors_mode+0x1b0>
                       }
                 }while (sign != '*');     // Select EXIT
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	2b2a      	cmp	r3, #42	; 0x2a
 800492e:	d1e2      	bne.n	80048f6 <sensors_mode+0xda>

                // Place for code function 2
            }

            if(sign == '3')
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	2b33      	cmp	r3, #51	; 0x33
 8004934:	d127      	bne.n	8004986 <sensors_mode+0x16a>
            {
                 // Clear all OLED
                 ssd1306_Fill(Black);
 8004936:	2000      	movs	r0, #0
 8004938:	f000 fd38 	bl	80053ac <ssd1306_Fill>
                 ssd1306_UpdateScreen();
 800493c:	f000 fd58 	bl	80053f0 <ssd1306_UpdateScreen>

                 // Ptint selected menu
                 print_text_on_OLED(0, 1, true, "1. function 3");
 8004940:	4b2d      	ldr	r3, [pc, #180]	; (80049f8 <sensors_mode+0x1dc>)
 8004942:	2201      	movs	r2, #1
 8004944:	2101      	movs	r1, #1
 8004946:	2000      	movs	r0, #0
 8004948:	f000 fc5a 	bl	8005200 <print_text_on_OLED>

                 do                                                            // Waiting for choice
                 {
                      // Place for code function 3

                      sign = read_one_sign_from_keyboard();                      // Read sign from keyboard
 800494c:	f7ff f958 	bl	8003c00 <read_one_sign_from_keyboard>
 8004950:	4603      	mov	r3, r0
 8004952:	71fb      	strb	r3, [r7, #7]

                      if(sign == '*')   										 // If select EXIT  // Exit in main menu
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b2a      	cmp	r3, #42	; 0x2a
 8004958:	d112      	bne.n	8004980 <sensors_mode+0x164>
                      {
                           // Clear all OLED
                           ssd1306_Fill(Black);
 800495a:	2000      	movs	r0, #0
 800495c:	f000 fd26 	bl	80053ac <ssd1306_Fill>
                           ssd1306_UpdateScreen();
 8004960:	f000 fd46 	bl	80053f0 <ssd1306_UpdateScreen>

                           GPS_MODE = false;
 8004964:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <sensors_mode+0x1c8>)
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
                           GSM_MODE = false;
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <sensors_mode+0x1cc>)
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
                           FINGERPRINT_MODE = false;
 8004970:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <sensors_mode+0x1d0>)
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
                           SENSORS_MODE = false;
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <sensors_mode+0x1d4>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]

                           return 1;          // Flag_fro exit from there
 800497c:	2301      	movs	r3, #1
 800497e:	e025      	b.n	80049cc <sensors_mode+0x1b0>
                      }
                  }while (sign != '*');     // Select EXIT
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	2b2a      	cmp	r3, #42	; 0x2a
 8004984:	d1e2      	bne.n	800494c <sensors_mode+0x130>

                 // Place for code function 3
            }

			if(sign == '*')    													// If select EXIT  // Exit in main menu
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	2b2a      	cmp	r3, #42	; 0x2a
 800498a:	d112      	bne.n	80049b2 <sensors_mode+0x196>
			{
				// Clear all OLED
				ssd1306_Fill(Black);
 800498c:	2000      	movs	r0, #0
 800498e:	f000 fd0d 	bl	80053ac <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8004992:	f000 fd2d 	bl	80053f0 <ssd1306_UpdateScreen>

				GPS_MODE = false;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <sensors_mode+0x1c8>)
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
				GSM_MODE = false;
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <sensors_mode+0x1cc>)
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
				FINGERPRINT_MODE = false;
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <sensors_mode+0x1d0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
				SENSORS_MODE = false;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <sensors_mode+0x1d4>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]

				return 1;          // Flag_fro exit from there
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00c      	b.n	80049cc <sensors_mode+0x1b0>
			}
		}while ((sign != '1') && (sign != '2') && (sign != '3') && (sign != '*') );     // Select one from 3 modes
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b31      	cmp	r3, #49	; 0x31
 80049b6:	d009      	beq.n	80049cc <sensors_mode+0x1b0>
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b32      	cmp	r3, #50	; 0x32
 80049bc:	d006      	beq.n	80049cc <sensors_mode+0x1b0>
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b33      	cmp	r3, #51	; 0x33
 80049c2:	d003      	beq.n	80049cc <sensors_mode+0x1b0>
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	f47f af51 	bne.w	800486e <sensors_mode+0x52>
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3740      	adds	r7, #64	; 0x40
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	0800e4f8 	.word	0x0800e4f8
 80049d8:	0800e504 	.word	0x0800e504
 80049dc:	0800e518 	.word	0x0800e518
 80049e0:	0800e528 	.word	0x0800e528
 80049e4:	200002c5 	.word	0x200002c5
 80049e8:	200002c4 	.word	0x200002c4
 80049ec:	200002c6 	.word	0x200002c6
 80049f0:	200002c7 	.word	0x200002c7
 80049f4:	0800e538 	.word	0x0800e538
 80049f8:	0800e548 	.word	0x0800e548

080049fc <show_sratus_call>:
// ----------------------------------------------------------------------------
/* After output call this function show call status
 */
void show_sratus_call(int call_status, char *str_gsm, char sign, uint8_t where_call)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	71fb      	strb	r3, [r7, #7]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	71bb      	strb	r3, [r7, #6]
	if (where_call == 1)   // If call to me
 8004a12:	79bb      	ldrb	r3, [r7, #6]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10b      	bne.n	8004a30 <show_sratus_call+0x34>
	{
		// Clean OLED
		claen_oled_lines(false, true, true, true, true);
 8004a18:	2301      	movs	r3, #1
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	2201      	movs	r2, #1
 8004a20:	2101      	movs	r1, #1
 8004a22:	2000      	movs	r0, #0
 8004a24:	f000 fb76 	bl	8005114 <claen_oled_lines>
		HAL_Delay(500);
 8004a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a2c:	f001 fa1e 	bl	8005e6c <HAL_Delay>
	}

	if (call_status == 1)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10c      	bne.n	8004a50 <show_sratus_call+0x54>
	{
		print_text_on_OLED(0, 4, false, "STATUS: Call out...");
 8004a36:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <show_sratus_call+0x104>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f000 fbdf 	bl	8005200 <print_text_on_OLED>
		print_text_on_OLED(0, 5, true, "#: for end call");
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <show_sratus_call+0x108>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	2105      	movs	r1, #5
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f000 fbd9 	bl	8005200 <print_text_on_OLED>
 8004a4e:	e005      	b.n	8004a5c <show_sratus_call+0x60>
	}
	else
	{
		print_text_on_OLED(0, 4, true, "STATUS: ERROR CALL");
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <show_sratus_call+0x10c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	2104      	movs	r1, #4
 8004a56:	2000      	movs	r0, #0
 8004a58:	f000 fbd2 	bl	8005200 <print_text_on_OLED>
	}
	// waiting answer from GSM module

	int gsm_out_call_stattus = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004a60:	e006      	b.n	8004a70 <show_sratus_call+0x74>
	&& (gsm_out_call_stattus != 3))
	{
		sign = read_one_sign_from_keyboard();
 8004a62:	f7ff f8cd 	bl	8003c00 <read_one_sign_from_keyboard>
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
		gsm_out_call_stattus = wait_ansver_after_make_call_in_blok_mode();
 8004a6a:	f7fe f97b 	bl	8002d64 <wait_ansver_after_make_call_in_blok_mode>
 8004a6e:	6178      	str	r0, [r7, #20]
	while ((sign != '#') && (gsm_out_call_stattus != 1) && (gsm_out_call_stattus != 2)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	2b23      	cmp	r3, #35	; 0x23
 8004a74:	d008      	beq.n	8004a88 <show_sratus_call+0x8c>
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d005      	beq.n	8004a88 <show_sratus_call+0x8c>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d002      	beq.n	8004a88 <show_sratus_call+0x8c>
	&& (gsm_out_call_stattus != 3))
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d1ec      	bne.n	8004a62 <show_sratus_call+0x66>
	}

	if (sign == '#')
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	2b23      	cmp	r3, #35	; 0x23
 8004a8c:	d10b      	bne.n	8004aa6 <show_sratus_call+0xaa>
	{
		end_of_call();
 8004a8e:	f7fe f8b5 	bl	8002bfc <end_of_call>
		print_text_on_OLED(0, 4, true, "STATUS: CALL END   ");
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <show_sratus_call+0x110>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	2104      	movs	r1, #4
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f000 fbb1 	bl	8005200 <print_text_on_OLED>
		HAL_Delay(2000);
 8004a9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004aa2:	f001 f9e3 	bl	8005e6c <HAL_Delay>
	}

	switch (gsm_out_call_stattus)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d00f      	beq.n	8004acc <show_sratus_call+0xd0>
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d018      	beq.n	8004ae2 <show_sratus_call+0xe6>
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d000      	beq.n	8004ab6 <show_sratus_call+0xba>
			print_text_on_OLED(0, 4, true, "STATUS: CALL END   ");
			HAL_Delay(2000);
			break;

		}
}
 8004ab4:	e020      	b.n	8004af8 <show_sratus_call+0xfc>
			print_text_on_OLED(0, 4, true, "STATUS: BUSY           ");
 8004ab6:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <show_sratus_call+0x114>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	2104      	movs	r1, #4
 8004abc:	2000      	movs	r0, #0
 8004abe:	f000 fb9f 	bl	8005200 <print_text_on_OLED>
			HAL_Delay(2000);
 8004ac2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ac6:	f001 f9d1 	bl	8005e6c <HAL_Delay>
			break;
 8004aca:	e015      	b.n	8004af8 <show_sratus_call+0xfc>
			print_text_on_OLED(0, 4, true, "STATUS: NO ANSWER    ");
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <show_sratus_call+0x118>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 fb94 	bl	8005200 <print_text_on_OLED>
			HAL_Delay(2000);
 8004ad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004adc:	f001 f9c6 	bl	8005e6c <HAL_Delay>
			break;
 8004ae0:	e00a      	b.n	8004af8 <show_sratus_call+0xfc>
			print_text_on_OLED(0, 4, true, "STATUS: CALL END   ");
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <show_sratus_call+0x110>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	2104      	movs	r1, #4
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f000 fb89 	bl	8005200 <print_text_on_OLED>
			HAL_Delay(2000);
 8004aee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004af2:	f001 f9bb 	bl	8005e6c <HAL_Delay>
			break;
 8004af6:	bf00      	nop
}
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	0800e558 	.word	0x0800e558
 8004b04:	0800e56c 	.word	0x0800e56c
 8004b08:	0800e57c 	.word	0x0800e57c
 8004b0c:	0800e590 	.word	0x0800e590
 8004b10:	0800e5a4 	.word	0x0800e5a4
 8004b14:	0800e5bc 	.word	0x0800e5bc

08004b18 <set_ID_number>:
// ----------------------------------------------------------------------------
// Setting ID for enrollment finger
char set_ID_number(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
	char set_ID = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	71fb      	strb	r3, [r7, #7]
	char sing_number = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	71bb      	strb	r3, [r7, #6]
	bool entered_number_status = false;
 8004b26:	2300      	movs	r3, #0
 8004b28:	717b      	strb	r3, [r7, #5]

	do{
		do{
			set_ID = read_one_sign_from_keyboard();
 8004b2a:	f7ff f869 	bl	8003c00 <read_one_sign_from_keyboard>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
		}while((set_ID <1) && (set_ID >9));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <set_ID_number+0x26>
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	d8f5      	bhi.n	8004b2a <set_ID_number+0x12>

		HAL_Delay(200);
 8004b3e:	20c8      	movs	r0, #200	; 0xc8
 8004b40:	f001 f994 	bl	8005e6c <HAL_Delay>
	}while(set_ID <= 0 );
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <set_ID_number+0x12>

	return set_ID;
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <enter_a_mobile_number>:
 * For example 380XXXXXXXXX.
 * And delete wrong entered digits.
 * If entered all digits function finish work.
 */
bool enter_a_mobile_number(char * number)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	6078      	str	r0, [r7, #4]
	bool entered_number_status = false;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	char str[30] = {0};
 8004b62:	f107 030c 	add.w	r3, r7, #12
 8004b66:	221e      	movs	r2, #30
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f006 f8f6 	bl	800ad5c <memset>
	// 1. Clean OLED
	claen_oled_lines(false, true, true, true, true);
 8004b70:	2301      	movs	r3, #1
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2301      	movs	r3, #1
 8004b76:	2201      	movs	r2, #1
 8004b78:	2101      	movs	r1, #1
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f000 faca 	bl	8005114 <claen_oled_lines>
	HAL_Delay(500);
 8004b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b84:	f001 f972 	bl	8005e6c <HAL_Delay>

    // 2. Type numbers
	print_text_on_OLED(0, 2, true, "Enter number:");
 8004b88:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <enter_a_mobile_number+0xec>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f000 fb36 	bl	8005200 <print_text_on_OLED>

	uint8_t k = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	char sing_number;
	do{
		sing_number = read_one_sign_from_keyboard();
 8004b9a:	f7ff f831 	bl	8003c00 <read_one_sign_from_keyboard>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if ((sing_number != '\0') && (sing_number != 'D'))  	// Enter one digit
 8004ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <enter_a_mobile_number+0x84>
 8004bac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bb0:	2b44      	cmp	r3, #68	; 0x44
 8004bb2:	d011      	beq.n	8004bd8 <enter_a_mobile_number+0x84>
		{
			number[k] = sing_number;
 8004bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004bc0:	701a      	strb	r2, [r3, #0]
			k++;
 8004bc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

			// print all mumbers
			print_text_on_OLED(0, 3, true, number);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	2103      	movs	r1, #3
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f000 fb14 	bl	8005200 <print_text_on_OLED>

		}
		if((sing_number == 'D') && (k >=1))						// Delete one digit
 8004bd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bdc:	2b44      	cmp	r3, #68	; 0x44
 8004bde:	d114      	bne.n	8004c0a <enter_a_mobile_number+0xb6>
 8004be0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d010      	beq.n	8004c0a <enter_a_mobile_number+0xb6>
		{
			k--;
 8004be8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bec:	3b01      	subs	r3, #1
 8004bee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			number[k] = ' ';
 8004bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	701a      	strb	r2, [r3, #0]
			print_text_on_OLED(0, 3, true, number);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	2103      	movs	r1, #3
 8004c04:	2000      	movs	r0, #0
 8004c06:	f000 fafb 	bl	8005200 <print_text_on_OLED>
		}

		if(k == 12)												// If all digits was entered
 8004c0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d102      	bne.n	8004c18 <enter_a_mobile_number+0xc4>
		{
			entered_number_status = true;						// Status. All digit entered
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		HAL_Delay(200);
 8004c18:	20c8      	movs	r0, #200	; 0xc8
 8004c1a:	f001 f927 	bl	8005e6c <HAL_Delay>
	}while ((sing_number != '*') && (entered_number_status != true));
 8004c1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c22:	2b2a      	cmp	r3, #42	; 0x2a
 8004c24:	d006      	beq.n	8004c34 <enter_a_mobile_number+0xe0>
 8004c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c2a:	f083 0301 	eor.w	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1b2      	bne.n	8004b9a <enter_a_mobile_number+0x46>

	return entered_number_status;
 8004c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	0800e5d4 	.word	0x0800e5d4

08004c44 <HAL_GPIO_EXTI_Callback>:
 * That STATUS must check timer every 0.5 sec
 * If INCOMMING_RING_OR_SMS_STATUS == true
 * 		turn on "incoming call" function
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d11f      	bne.n	8004c94 <HAL_GPIO_EXTI_Callback+0x50>
	{
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET)
 8004c54:	2102      	movs	r1, #2
 8004c56:	4811      	ldr	r0, [pc, #68]	; (8004c9c <HAL_GPIO_EXTI_Callback+0x58>)
 8004c58:	f001 fdf6 	bl	8006848 <HAL_GPIO_ReadPin>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_GPIO_EXTI_Callback+0x30>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c68:	480d      	ldr	r0, [pc, #52]	; (8004ca0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004c6a:	f001 fe04 	bl	8006876 <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = true;				// Check it status if it is 'true' we have incoming ring or sms
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <HAL_GPIO_EXTI_Callback+0x60>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_SET)
 8004c74:	2102      	movs	r1, #2
 8004c76:	4809      	ldr	r0, [pc, #36]	; (8004c9c <HAL_GPIO_EXTI_Callback+0x58>)
 8004c78:	f001 fde6 	bl	8006848 <HAL_GPIO_ReadPin>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d108      	bne.n	8004c94 <HAL_GPIO_EXTI_Callback+0x50>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8004c82:	2201      	movs	r2, #1
 8004c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c88:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004c8a:	f001 fdf4 	bl	8006876 <HAL_GPIO_WritePin>
			INCOMMING_RING_OR_SMS_STATUS = false;
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_GPIO_EXTI_Callback+0x60>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
		}
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40010800 	.word	0x40010800
 8004ca0:	40011000 	.word	0x40011000
 8004ca4:	200002c8 	.word	0x200002c8

08004ca8 <servo_motor>:
// ----------------------------------------------------------------------------
void servo_motor(bool status)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	71fb      	strb	r3, [r7, #7]
	if(status == false)		// Close servo
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	f083 0301 	eor.w	r3, r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <servo_motor+0x1e>
	{
		TIM2->CCR1 = 25;
 8004cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cc2:	2219      	movs	r2, #25
 8004cc4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(status == true)		// Open servo
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <servo_motor+0x2c>
	{
		TIM2->CCR1 = 15;
 8004ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <init_oled>:
void print_GSM_data(void);
void print_fingerprint_data(void);

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8004cee:	f000 faf1 	bl	80052d4 <ssd1306_Init>
	HAL_Delay(500);
 8004cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cf6:	f001 f8b9 	bl	8005e6c <HAL_Delay>
	ssd1306_Fill(Black);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f000 fb56 	bl	80053ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004d00:	f000 fb76 	bl	80053f0 <ssd1306_UpdateScreen>
}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <OLED_prinr_all_data>:
// -----------------------------------------------------------------------------------
void OLED_prinr_all_data(int  select_print_data)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	switch (select_print_data)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d817      	bhi.n	8004d48 <OLED_prinr_all_data+0x40>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <OLED_prinr_all_data+0x18>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d37 	.word	0x08004d37
 8004d28:	08004d3d 	.word	0x08004d3d
 8004d2c:	08004d43 	.word	0x08004d43
	{
		case 1:
			print_GPS_data();
 8004d30:	f000 f842 	bl	8004db8 <print_GPS_data>
			break;
 8004d34:	e008      	b.n	8004d48 <OLED_prinr_all_data+0x40>
		case 2:
			print_GSM_data();
 8004d36:	f000 f9e1 	bl	80050fc <print_GSM_data>
			break;
 8004d3a:	e005      	b.n	8004d48 <OLED_prinr_all_data+0x40>
		case 3:
			print_fingerprint_data();
 8004d3c:	f000 f9e4 	bl	8005108 <print_fingerprint_data>
			break;
 8004d40:	e002      	b.n	8004d48 <OLED_prinr_all_data+0x40>
		case 4:
			print_all_sensors_data();
 8004d42:	f000 f977 	bl	8005034 <print_all_sensors_data>
			break;
 8004d46:	bf00      	nop
	}

//    // Print all data in OLED
    ssd1306_UpdateScreen();
 8004d48:	f000 fb52 	bl	80053f0 <ssd1306_UpdateScreen>
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <print_main_menu>:
// -----------------------------------------------------------------------------------
void print_main_menu(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f000 fb27 	bl	80053ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004d5e:	f000 fb47 	bl	80053f0 <ssd1306_UpdateScreen>

	print_text_on_OLED(0, 1, false, " SELECT MODE...");
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <print_main_menu+0x50>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	2101      	movs	r1, #1
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f000 fa49 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 2, false, "1.GSM MODE");
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <print_main_menu+0x54>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	2102      	movs	r1, #2
 8004d74:	2000      	movs	r0, #0
 8004d76:	f000 fa43 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 3, false, "2.GPS MODE");
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <print_main_menu+0x58>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2103      	movs	r1, #3
 8004d80:	2000      	movs	r0, #0
 8004d82:	f000 fa3d 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 4, false, "3.FINGERPRINT MODE");
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <print_main_menu+0x5c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f000 fa37 	bl	8005200 <print_text_on_OLED>
	print_text_on_OLED(0, 5, true, "4.SENSORS MODE");
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <print_main_menu+0x60>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	2105      	movs	r1, #5
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f000 fa31 	bl	8005200 <print_text_on_OLED>
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	0800e5e4 	.word	0x0800e5e4
 8004da8:	0800e5f4 	.word	0x0800e5f4
 8004dac:	0800e600 	.word	0x0800e600
 8004db0:	0800e60c 	.word	0x0800e60c
 8004db4:	0800e620 	.word	0x0800e620

08004db8 <print_GPS_data>:
// -----------------------------------------------------------------------------------
void print_GPS_data(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b092      	sub	sp, #72	; 0x48
 8004dbc:	af00      	add	r7, sp, #0
	// 1. Print Lat and Lon
	char str[50]={0};
 8004dbe:	f107 030c 	add.w	r3, r7, #12
 8004dc2:	2232      	movs	r2, #50	; 0x32
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f005 ffc8 	bl	800ad5c <memset>
	print_text_on_OLED(0, 2, false, "Lat:");
 8004dcc:	4b8d      	ldr	r3, [pc, #564]	; (8005004 <print_GPS_data+0x24c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f000 fa14 	bl	8005200 <print_text_on_OLED>
	// Print data
	print_text_on_OLED(30, 2, false, gps_latitude);
 8004dd8:	4b8b      	ldr	r3, [pc, #556]	; (8005008 <print_GPS_data+0x250>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2102      	movs	r1, #2
 8004dde:	201e      	movs	r0, #30
 8004de0:	f000 fa0e 	bl	8005200 <print_text_on_OLED>

	print_text_on_OLED(0, 3, false, "Lon:");
 8004de4:	4b89      	ldr	r3, [pc, #548]	; (800500c <print_GPS_data+0x254>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	2103      	movs	r1, #3
 8004dea:	2000      	movs	r0, #0
 8004dec:	f000 fa08 	bl	8005200 <print_text_on_OLED>
	// Print data
	print_text_on_OLED(30, 3, false, gps_lontitude);
 8004df0:	4b87      	ldr	r3, [pc, #540]	; (8005010 <print_GPS_data+0x258>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	2103      	movs	r1, #3
 8004df6:	201e      	movs	r0, #30
 8004df8:	f000 fa02 	bl	8005200 <print_text_on_OLED>

	// 2. Print time
	if (GPGGA_data_is_ready == 1)
 8004dfc:	4b85      	ldr	r3, [pc, #532]	; (8005014 <print_GPS_data+0x25c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 80e3 	bne.w	8004fcc <print_GPS_data+0x214>
	{
		char hours[2]={0};
 8004e06:	2300      	movs	r3, #0
 8004e08:	813b      	strh	r3, [r7, #8]
		char minutes[2]={0};
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	80bb      	strh	r3, [r7, #4]
		char semicolum = ':';
 8004e0e:	233a      	movs	r3, #58	; 0x3a
 8004e10:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		// divide hours and minutes
		uint8_t i=0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for(i=0; i<=3; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004e20:	e020      	b.n	8004e64 <print_GPS_data+0xac>
		{
			if(i<=1)
 8004e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d80b      	bhi.n	8004e42 <print_GPS_data+0x8a>
			{
				hours[i] = gps_time[i];
 8004e2a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e32:	4979      	ldr	r1, [pc, #484]	; (8005018 <print_GPS_data+0x260>)
 8004e34:	5c8a      	ldrb	r2, [r1, r2]
 8004e36:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f803 2c40 	strb.w	r2, [r3, #-64]
 8004e40:	e00b      	b.n	8004e5a <print_GPS_data+0xa2>
			}
			else
			{
				minutes[i-2] = gps_time[i];
 8004e42:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e4a:	3b02      	subs	r3, #2
 8004e4c:	4972      	ldr	r1, [pc, #456]	; (8005018 <print_GPS_data+0x260>)
 8004e4e:	5c8a      	ldrb	r2, [r1, r2]
 8004e50:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004e54:	440b      	add	r3, r1
 8004e56:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i=0; i<=3; i++)
 8004e5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004e64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d9da      	bls.n	8004e22 <print_GPS_data+0x6a>
			}
		}
		// Add 3 hours
		int int_hours = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
		uint8_t dozens = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t units = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		dozens = hours[0];
 8004e7c:	7a3b      	ldrb	r3, [r7, #8]
 8004e7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		units = hours[1];
 8004e82:	7a7b      	ldrb	r3, [r7, #9]
 8004e84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		dozens = dozens - 48;
 8004e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e8c:	3b30      	subs	r3, #48	; 0x30
 8004e8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		units = units - 48;
 8004e92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e96:	3b30      	subs	r3, #48	; 0x30
 8004e98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		int_hours = units +(dozens *10);
 8004e9c:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8004ea0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	440b      	add	r3, r1
 8004eae:	643b      	str	r3, [r7, #64]	; 0x40
		int_hours = int_hours+2;
 8004eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40

		dozens = (int_hours/10) + 48;
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb8:	4a58      	ldr	r2, [pc, #352]	; (800501c <print_GPS_data+0x264>)
 8004eba:	fb82 1203 	smull	r1, r2, r2, r3
 8004ebe:	1092      	asrs	r2, r2, #2
 8004ec0:	17db      	asrs	r3, r3, #31
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3330      	adds	r3, #48	; 0x30
 8004ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		units = (int_hours%10) + 48;
 8004ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ece:	4b53      	ldr	r3, [pc, #332]	; (800501c <print_GPS_data+0x264>)
 8004ed0:	fb83 1302 	smull	r1, r3, r3, r2
 8004ed4:	1099      	asrs	r1, r3, #2
 8004ed6:	17d3      	asrs	r3, r2, #31
 8004ed8:	1ac9      	subs	r1, r1, r3
 8004eda:	460b      	mov	r3, r1
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	1ad1      	subs	r1, r2, r3
 8004ee4:	b2cb      	uxtb	r3, r1
 8004ee6:	3330      	adds	r3, #48	; 0x30
 8004ee8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		hours[0] = dozens;
 8004eec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ef0:	723b      	strb	r3, [r7, #8]
		hours[1] = units;
 8004ef2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004ef6:	727b      	strb	r3, [r7, #9]

		if(int_hours == 24)
 8004ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efa:	2b18      	cmp	r3, #24
 8004efc:	d103      	bne.n	8004f06 <print_GPS_data+0x14e>
		{
			hours[0] = '0';
 8004efe:	2330      	movs	r3, #48	; 0x30
 8004f00:	723b      	strb	r3, [r7, #8]
			hours[1] = '0';
 8004f02:	2330      	movs	r3, #48	; 0x30
 8004f04:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 25)
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	2b19      	cmp	r3, #25
 8004f0a:	d103      	bne.n	8004f14 <print_GPS_data+0x15c>
		{
			hours[0] = '0';
 8004f0c:	2330      	movs	r3, #48	; 0x30
 8004f0e:	723b      	strb	r3, [r7, #8]
			hours[1] = '1';
 8004f10:	2331      	movs	r3, #49	; 0x31
 8004f12:	727b      	strb	r3, [r7, #9]
		}
		if(int_hours == 26)
 8004f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f16:	2b1a      	cmp	r3, #26
 8004f18:	d103      	bne.n	8004f22 <print_GPS_data+0x16a>
		{
			hours[0] = '0';
 8004f1a:	2330      	movs	r3, #48	; 0x30
 8004f1c:	723b      	strb	r3, [r7, #8]
			hours[1] = '2';
 8004f1e:	2332      	movs	r3, #50	; 0x32
 8004f20:	727b      	strb	r3, [r7, #9]
		}

		if((int_hours >=0) && (int_hours<=9))
 8004f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db09      	blt.n	8004f3c <print_GPS_data+0x184>
 8004f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2a:	2b09      	cmp	r3, #9
 8004f2c:	dc06      	bgt.n	8004f3c <print_GPS_data+0x184>
		{
			hours[0] = '0';
 8004f2e:	2330      	movs	r3, #48	; 0x30
 8004f30:	723b      	strb	r3, [r7, #8]
			hours[1] = int_hours +48;
 8004f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	3330      	adds	r3, #48	; 0x30
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	727b      	strb	r3, [r7, #9]
		}

		// connect  hours and minutes with colon
		//i=5;
		for(i=0; i<5; i++)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004f42:	e034      	b.n	8004fae <print_GPS_data+0x1f6>
		{
			if(i<=1)
 8004f44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d80e      	bhi.n	8004f6a <print_GPS_data+0x1b2>
			{
				str[i] = hours[i];
 8004f4c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004f50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f54:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004f58:	440a      	add	r2, r1
 8004f5a:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8004f5e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004f62:	440b      	add	r3, r1
 8004f64:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8004f68:	e01c      	b.n	8004fa4 <print_GPS_data+0x1ec>
			}
			else
			{
				if(i==2)
 8004f6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d109      	bne.n	8004f86 <print_GPS_data+0x1ce>
				{
					str[i] = semicolum;
 8004f72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004f80:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8004f84:	e00e      	b.n	8004fa4 <print_GPS_data+0x1ec>
				}
				else
				{
					str[i]=minutes[i-3];
 8004f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f8a:	1eda      	subs	r2, r3, #3
 8004f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f90:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004f94:	440a      	add	r2, r1
 8004f96:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8004f9a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f803 2c3c 	strb.w	r2, [r3, #-60]
		for(i=0; i<5; i++)
 8004fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004fa8:	3301      	adds	r3, #1
 8004faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004fae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d9c6      	bls.n	8004f44 <print_GPS_data+0x18c>
				}
			}
		}

		ssd1306_SetCursor(0, 36);
 8004fb6:	2124      	movs	r1, #36	; 0x24
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f000 fb4f 	bl	800565c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8004fbe:	4a18      	ldr	r2, [pc, #96]	; (8005020 <print_GPS_data+0x268>)
 8004fc0:	f107 000c 	add.w	r0, r7, #12
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	ca06      	ldmia	r2, {r1, r2}
 8004fc8:	f000 fb22 	bl	8005610 <ssd1306_WriteString>
	}

	// 3. Print number of satalits
	print_text_on_OLED(40, 4, false, "N:  ");
 8004fcc:	4b15      	ldr	r3, [pc, #84]	; (8005024 <print_GPS_data+0x26c>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	2028      	movs	r0, #40	; 0x28
 8004fd4:	f000 f914 	bl	8005200 <print_text_on_OLED>
	// Print data
	print_text_on_OLED(55, 4, false, gps_number_of_satellites);
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <print_GPS_data+0x270>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2104      	movs	r1, #4
 8004fde:	2037      	movs	r0, #55	; 0x37
 8004fe0:	f000 f90e 	bl	8005200 <print_text_on_OLED>

	// 4. Print gps speed
	print_text_on_OLED(75, 4, false, "S:    ");
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <print_GPS_data+0x274>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2104      	movs	r1, #4
 8004fea:	204b      	movs	r0, #75	; 0x4b
 8004fec:	f000 f908 	bl	8005200 <print_text_on_OLED>
	// Print data
	print_text_on_OLED(90, 4, false, gps_speed);
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <print_GPS_data+0x278>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2104      	movs	r1, #4
 8004ff6:	205a      	movs	r0, #90	; 0x5a
 8004ff8:	f000 f902 	bl	8005200 <print_text_on_OLED>
}
 8004ffc:	bf00      	nop
 8004ffe:	3748      	adds	r7, #72	; 0x48
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	0800e630 	.word	0x0800e630
 8005008:	2000070c 	.word	0x2000070c
 800500c:	0800e638 	.word	0x0800e638
 8005010:	20000740 	.word	0x20000740
 8005014:	20000278 	.word	0x20000278
 8005018:	20000738 	.word	0x20000738
 800501c:	66666667 	.word	0x66666667
 8005020:	20000054 	.word	0x20000054
 8005024:	0800e640 	.word	0x0800e640
 8005028:	20000728 	.word	0x20000728
 800502c:	0800e648 	.word	0x0800e648
 8005030:	20000704 	.word	0x20000704

08005034 <print_all_sensors_data>:
// -----------------------------------------------------------------------------------
void print_all_sensors_data(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af00      	add	r7, sp, #0
	char str_1[40]={0};
 800503a:	463b      	mov	r3, r7
 800503c:	2228      	movs	r2, #40	; 0x28
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f005 fe8b 	bl	800ad5c <memset>

	// 1. Print data from si7021 sensor
	strcpy(str_1, "1.si7021 ");
 8005046:	463b      	mov	r3, r7
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <print_all_sensors_data+0xac>)
 800504a:	ca07      	ldmia	r2, {r0, r1, r2}
 800504c:	c303      	stmia	r3!, {r0, r1}
 800504e:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_si7021);
 8005050:	463b      	mov	r3, r7
 8005052:	4924      	ldr	r1, [pc, #144]	; (80050e4 <print_all_sensors_data+0xb0>)
 8005054:	4618      	mov	r0, r3
 8005056:	f005 ff5f 	bl	800af18 <strcat>
	strcat(str_1, humidity_si7021);
 800505a:	463b      	mov	r3, r7
 800505c:	4922      	ldr	r1, [pc, #136]	; (80050e8 <print_all_sensors_data+0xb4>)
 800505e:	4618      	mov	r0, r3
 8005060:	f005 ff5a 	bl	800af18 <strcat>
	print_text_on_OLED(0, 2, false, str_1);
 8005064:	463b      	mov	r3, r7
 8005066:	2200      	movs	r2, #0
 8005068:	2102      	movs	r1, #2
 800506a:	2000      	movs	r0, #0
 800506c:	f000 f8c8 	bl	8005200 <print_text_on_OLED>
	memset(str_1, 0 , sizeof(str_1));
 8005070:	463b      	mov	r3, r7
 8005072:	2228      	movs	r2, #40	; 0x28
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f005 fe70 	bl	800ad5c <memset>

	// 2. Print data from AM2302
	strcpy(str_1, "2.AM2302 ");
 800507c:	463b      	mov	r3, r7
 800507e:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <print_all_sensors_data+0xb8>)
 8005080:	ca07      	ldmia	r2, {r0, r1, r2}
 8005082:	c303      	stmia	r3!, {r0, r1}
 8005084:	801a      	strh	r2, [r3, #0]
	strcat(str_1, temperature_am3202);
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <print_all_sensors_data+0xbc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	463b      	mov	r3, r7
 800508e:	4611      	mov	r1, r2
 8005090:	4618      	mov	r0, r3
 8005092:	f005 ff41 	bl	800af18 <strcat>
	strcat(str_1, humidity_am3202);
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <print_all_sensors_data+0xc0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	463b      	mov	r3, r7
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f005 ff39 	bl	800af18 <strcat>
	print_text_on_OLED(0, 3, false, str_1);
 80050a6:	463b      	mov	r3, r7
 80050a8:	2200      	movs	r2, #0
 80050aa:	2103      	movs	r1, #3
 80050ac:	2000      	movs	r0, #0
 80050ae:	f000 f8a7 	bl	8005200 <print_text_on_OLED>
	memset(str_1, 0 , sizeof(str_1));
 80050b2:	463b      	mov	r3, r7
 80050b4:	2228      	movs	r2, #40	; 0x28
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f005 fe4f 	bl	800ad5c <memset>

	// 3. Print data from 9066
	strcpy(str_1, "2.9066 ");
 80050be:	463b      	mov	r3, r7
 80050c0:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <print_all_sensors_data+0xc4>)
 80050c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050c6:	e883 0003 	stmia.w	r3, {r0, r1}
	print_text_on_OLED(0, 4, false, str_1);
 80050ca:	463b      	mov	r3, r7
 80050cc:	2200      	movs	r2, #0
 80050ce:	2104      	movs	r1, #4
 80050d0:	2000      	movs	r0, #0
 80050d2:	f000 f895 	bl	8005200 <print_text_on_OLED>
}
 80050d6:	bf00      	nop
 80050d8:	3728      	adds	r7, #40	; 0x28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	0800e650 	.word	0x0800e650
 80050e4:	200006f4 	.word	0x200006f4
 80050e8:	200006fc 	.word	0x200006fc
 80050ec:	0800e65c 	.word	0x0800e65c
 80050f0:	20000718 	.word	0x20000718
 80050f4:	2000074c 	.word	0x2000074c
 80050f8:	0800e668 	.word	0x0800e668

080050fc <print_GSM_data>:
// -----------------------------------------------------------------------------------
void print_GSM_data(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0

}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <print_fingerprint_data>:
// -----------------------------------------------------------------------------------
void print_fingerprint_data(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0

}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <claen_oled_lines>:
// -----------------------------------------------------------------------------------
void claen_oled_lines(bool first, bool second, bool third, bool fourth, bool fifth)
{
 8005114:	b5b0      	push	{r4, r5, r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	461a      	mov	r2, r3
 8005122:	4623      	mov	r3, r4
 8005124:	71fb      	strb	r3, [r7, #7]
 8005126:	4603      	mov	r3, r0
 8005128:	71bb      	strb	r3, [r7, #6]
 800512a:	460b      	mov	r3, r1
 800512c:	717b      	strb	r3, [r7, #5]
 800512e:	4613      	mov	r3, r2
 8005130:	713b      	strb	r3, [r7, #4]
	char str[32] = {0};
 8005132:	f107 0308 	add.w	r3, r7, #8
 8005136:	2220      	movs	r2, #32
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f005 fe0e 	bl	800ad5c <memset>
	sprintf(str,"%s", "                          ");
 8005140:	f107 0308 	add.w	r3, r7, #8
 8005144:	4a2c      	ldr	r2, [pc, #176]	; (80051f8 <claen_oled_lines+0xe4>)
 8005146:	461c      	mov	r4, r3
 8005148:	4615      	mov	r5, r2
 800514a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800514c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800514e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005152:	c403      	stmia	r4!, {r0, r1}
 8005154:	8022      	strh	r2, [r4, #0]
 8005156:	3402      	adds	r4, #2
 8005158:	0c13      	lsrs	r3, r2, #16
 800515a:	7023      	strb	r3, [r4, #0]

	if(first == true)
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <claen_oled_lines+0x64>
	{
		ssd1306_SetCursor(00, 00);
 8005162:	2100      	movs	r1, #0
 8005164:	2000      	movs	r0, #0
 8005166:	f000 fa79 	bl	800565c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 800516a:	4a24      	ldr	r2, [pc, #144]	; (80051fc <claen_oled_lines+0xe8>)
 800516c:	f107 0008 	add.w	r0, r7, #8
 8005170:	2301      	movs	r3, #1
 8005172:	ca06      	ldmia	r2, {r1, r2}
 8005174:	f000 fa4c 	bl	8005610 <ssd1306_WriteString>
	}
	if(second == true)
 8005178:	79bb      	ldrb	r3, [r7, #6]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <claen_oled_lines+0x80>
	{
		ssd1306_SetCursor(00, 16);
 800517e:	2110      	movs	r1, #16
 8005180:	2000      	movs	r0, #0
 8005182:	f000 fa6b 	bl	800565c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8005186:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <claen_oled_lines+0xe8>)
 8005188:	f107 0008 	add.w	r0, r7, #8
 800518c:	2301      	movs	r3, #1
 800518e:	ca06      	ldmia	r2, {r1, r2}
 8005190:	f000 fa3e 	bl	8005610 <ssd1306_WriteString>
	}
	if(third == true)
 8005194:	797b      	ldrb	r3, [r7, #5]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <claen_oled_lines+0x9c>
	{
		ssd1306_SetCursor(00, 26);
 800519a:	211a      	movs	r1, #26
 800519c:	2000      	movs	r0, #0
 800519e:	f000 fa5d 	bl	800565c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <claen_oled_lines+0xe8>)
 80051a4:	f107 0008 	add.w	r0, r7, #8
 80051a8:	2301      	movs	r3, #1
 80051aa:	ca06      	ldmia	r2, {r1, r2}
 80051ac:	f000 fa30 	bl	8005610 <ssd1306_WriteString>
	}
	if(fourth == true)
 80051b0:	793b      	ldrb	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <claen_oled_lines+0xb8>
	{
		ssd1306_SetCursor(00, 36);
 80051b6:	2124      	movs	r1, #36	; 0x24
 80051b8:	2000      	movs	r0, #0
 80051ba:	f000 fa4f 	bl	800565c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80051be:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <claen_oled_lines+0xe8>)
 80051c0:	f107 0008 	add.w	r0, r7, #8
 80051c4:	2301      	movs	r3, #1
 80051c6:	ca06      	ldmia	r2, {r1, r2}
 80051c8:	f000 fa22 	bl	8005610 <ssd1306_WriteString>
	}
	if(fifth == true)
 80051cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <claen_oled_lines+0xd6>
	{
		ssd1306_SetCursor(00, 46);
 80051d4:	212e      	movs	r1, #46	; 0x2e
 80051d6:	2000      	movs	r0, #0
 80051d8:	f000 fa40 	bl	800565c <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80051dc:	4a07      	ldr	r2, [pc, #28]	; (80051fc <claen_oled_lines+0xe8>)
 80051de:	f107 0008 	add.w	r0, r7, #8
 80051e2:	2301      	movs	r3, #1
 80051e4:	ca06      	ldmia	r2, {r1, r2}
 80051e6:	f000 fa13 	bl	8005610 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80051ea:	f000 f901 	bl	80053f0 <ssd1306_UpdateScreen>
}
 80051ee:	bf00      	nop
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bdb0      	pop	{r4, r5, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	0800e670 	.word	0x0800e670
 80051fc:	20000054 	.word	0x20000054

08005200 <print_text_on_OLED>:
// -----------------------------------------------------------------------------------
// Print any text on OLED
void print_text_on_OLED(uint8_t column, uint8_t row, bool update_oled, char text[])
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4603      	mov	r3, r0
 800520a:	71fb      	strb	r3, [r7, #7]
 800520c:	460b      	mov	r3, r1
 800520e:	71bb      	strb	r3, [r7, #6]
 8005210:	4613      	mov	r3, r2
 8005212:	717b      	strb	r3, [r7, #5]
	char message_buffer[30] = {0};
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	221e      	movs	r2, #30
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f005 fd9d 	bl	800ad5c <memset>

	switch (row)
 8005222:	79bb      	ldrb	r3, [r7, #6]
 8005224:	3b01      	subs	r3, #1
 8005226:	2b04      	cmp	r3, #4
 8005228:	d82a      	bhi.n	8005280 <print_text_on_OLED+0x80>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <print_text_on_OLED+0x30>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005245 	.word	0x08005245
 8005234:	08005251 	.word	0x08005251
 8005238:	0800525d 	.word	0x0800525d
 800523c:	08005269 	.word	0x08005269
 8005240:	08005275 	.word	0x08005275
	{
		case 1:
			ssd1306_SetCursor(column, 0);
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fa07 	bl	800565c <ssd1306_SetCursor>
		break;
 800524e:	e017      	b.n	8005280 <print_text_on_OLED+0x80>

		case 2:
			ssd1306_SetCursor(column, 16);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	2110      	movs	r1, #16
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fa01 	bl	800565c <ssd1306_SetCursor>
		break;
 800525a:	e011      	b.n	8005280 <print_text_on_OLED+0x80>

		case 3:
			ssd1306_SetCursor(column, 26);
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	211a      	movs	r1, #26
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f9fb 	bl	800565c <ssd1306_SetCursor>
		break;
 8005266:	e00b      	b.n	8005280 <print_text_on_OLED+0x80>

		case 4:
			ssd1306_SetCursor(column, 36);
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	2124      	movs	r1, #36	; 0x24
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f9f5 	bl	800565c <ssd1306_SetCursor>
		break;
 8005272:	e005      	b.n	8005280 <print_text_on_OLED+0x80>

		case 5:
			ssd1306_SetCursor(column, 46);
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	212e      	movs	r1, #46	; 0x2e
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f9ef 	bl	800565c <ssd1306_SetCursor>
		break;
 800527e:	bf00      	nop
	}
	ssd1306_WriteString(text, Font_7x10, White);
 8005280:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <print_text_on_OLED+0xa0>)
 8005282:	2301      	movs	r3, #1
 8005284:	ca06      	ldmia	r2, {r1, r2}
 8005286:	6838      	ldr	r0, [r7, #0]
 8005288:	f000 f9c2 	bl	8005610 <ssd1306_WriteString>

	if(update_oled == true)
 800528c:	797b      	ldrb	r3, [r7, #5]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <print_text_on_OLED+0x96>
	{
		ssd1306_UpdateScreen();
 8005292:	f000 f8ad 	bl	80053f0 <ssd1306_UpdateScreen>
	}
}
 8005296:	bf00      	nop
 8005298:	3728      	adds	r7, #40	; 0x28
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000054 	.word	0x20000054

080052a4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80052ae:	230a      	movs	r3, #10
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	2301      	movs	r3, #1
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	1dfb      	adds	r3, r7, #7
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	2301      	movs	r3, #1
 80052bc:	2200      	movs	r2, #0
 80052be:	2178      	movs	r1, #120	; 0x78
 80052c0:	4803      	ldr	r0, [pc, #12]	; (80052d0 <ssd1306_WriteCommand+0x2c>)
 80052c2:	f001 ff99 	bl	80071f8 <HAL_I2C_Mem_Write>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000c84 	.word	0x20000c84

080052d4 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80052d8:	2064      	movs	r0, #100	; 0x64
 80052da:	f000 fdc7 	bl	8005e6c <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80052de:	20ae      	movs	r0, #174	; 0xae
 80052e0:	f7ff ffe0 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80052e4:	2020      	movs	r0, #32
 80052e6:	f7ff ffdd 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80052ea:	2010      	movs	r0, #16
 80052ec:	f7ff ffda 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80052f0:	20b0      	movs	r0, #176	; 0xb0
 80052f2:	f7ff ffd7 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80052f6:	20c8      	movs	r0, #200	; 0xc8
 80052f8:	f7ff ffd4 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80052fc:	2000      	movs	r0, #0
 80052fe:	f7ff ffd1 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8005302:	2010      	movs	r0, #16
 8005304:	f7ff ffce 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8005308:	2040      	movs	r0, #64	; 0x40
 800530a:	f7ff ffcb 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800530e:	2081      	movs	r0, #129	; 0x81
 8005310:	f7ff ffc8 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8005314:	20ff      	movs	r0, #255	; 0xff
 8005316:	f7ff ffc5 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800531a:	20a1      	movs	r0, #161	; 0xa1
 800531c:	f7ff ffc2 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8005320:	20a6      	movs	r0, #166	; 0xa6
 8005322:	f7ff ffbf 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8005326:	20a8      	movs	r0, #168	; 0xa8
 8005328:	f7ff ffbc 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800532c:	203f      	movs	r0, #63	; 0x3f
 800532e:	f7ff ffb9 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005332:	20a4      	movs	r0, #164	; 0xa4
 8005334:	f7ff ffb6 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8005338:	20d3      	movs	r0, #211	; 0xd3
 800533a:	f7ff ffb3 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800533e:	2000      	movs	r0, #0
 8005340:	f7ff ffb0 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005344:	20d5      	movs	r0, #213	; 0xd5
 8005346:	f7ff ffad 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800534a:	20f0      	movs	r0, #240	; 0xf0
 800534c:	f7ff ffaa 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005350:	20d9      	movs	r0, #217	; 0xd9
 8005352:	f7ff ffa7 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8005356:	2022      	movs	r0, #34	; 0x22
 8005358:	f7ff ffa4 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800535c:	20da      	movs	r0, #218	; 0xda
 800535e:	f7ff ffa1 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8005362:	2012      	movs	r0, #18
 8005364:	f7ff ff9e 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005368:	20db      	movs	r0, #219	; 0xdb
 800536a:	f7ff ff9b 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800536e:	2020      	movs	r0, #32
 8005370:	f7ff ff98 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005374:	208d      	movs	r0, #141	; 0x8d
 8005376:	f7ff ff95 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800537a:	2014      	movs	r0, #20
 800537c:	f7ff ff92 	bl	80052a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8005380:	20af      	movs	r0, #175	; 0xaf
 8005382:	f7ff ff8f 	bl	80052a4 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8005386:	2000      	movs	r0, #0
 8005388:	f000 f810 	bl	80053ac <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800538c:	f000 f830 	bl	80053f0 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <ssd1306_Init+0xd4>)
 8005392:	2200      	movs	r2, #0
 8005394:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <ssd1306_Init+0xd4>)
 8005398:	2200      	movs	r2, #0
 800539a:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 800539c:	4b02      	ldr	r3, [pc, #8]	; (80053a8 <ssd1306_Init+0xd4>)
 800539e:	2201      	movs	r2, #1
 80053a0:	715a      	strb	r2, [r3, #5]
	
	return 1;
 80053a2:	2301      	movs	r3, #1
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200006cc 	.word	0x200006cc

080053ac <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e00d      	b.n	80053d8 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <ssd1306_Fill+0x1a>
 80053c2:	2100      	movs	r1, #0
 80053c4:	e000      	b.n	80053c8 <ssd1306_Fill+0x1c>
 80053c6:	21ff      	movs	r1, #255	; 0xff
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <ssd1306_Fill+0x40>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	460a      	mov	r2, r1
 80053d0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3301      	adds	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053de:	d3ed      	bcc.n	80053bc <ssd1306_Fill+0x10>
	}
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	200002cc 	.word	0x200002cc

080053f0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80053f6:	2300      	movs	r3, #0
 80053f8:	71fb      	strb	r3, [r7, #7]
 80053fa:	e01d      	b.n	8005438 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	3b50      	subs	r3, #80	; 0x50
 8005400:	b2db      	uxtb	r3, r3
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff4e 	bl	80052a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8005408:	2000      	movs	r0, #0
 800540a:	f7ff ff4b 	bl	80052a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800540e:	2010      	movs	r0, #16
 8005410:	f7ff ff48 	bl	80052a4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	01db      	lsls	r3, r3, #7
 8005418:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <ssd1306_UpdateScreen+0x58>)
 800541a:	4413      	add	r3, r2
 800541c:	2264      	movs	r2, #100	; 0x64
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	9201      	str	r2, [sp, #4]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2301      	movs	r3, #1
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	2178      	movs	r1, #120	; 0x78
 800542c:	4807      	ldr	r0, [pc, #28]	; (800544c <ssd1306_UpdateScreen+0x5c>)
 800542e:	f001 fee3 	bl	80071f8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	3301      	adds	r3, #1
 8005436:	71fb      	strb	r3, [r7, #7]
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b07      	cmp	r3, #7
 800543c:	d9de      	bls.n	80053fc <ssd1306_UpdateScreen+0xc>
	}
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200002cc 	.word	0x200002cc
 800544c:	20000c84 	.word	0x20000c84

08005450 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
 800545a:	460b      	mov	r3, r1
 800545c:	71bb      	strb	r3, [r7, #6]
 800545e:	4613      	mov	r3, r2
 8005460:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	2b00      	cmp	r3, #0
 8005468:	db48      	blt.n	80054fc <ssd1306_DrawPixel+0xac>
 800546a:	79bb      	ldrb	r3, [r7, #6]
 800546c:	2b3f      	cmp	r3, #63	; 0x3f
 800546e:	d845      	bhi.n	80054fc <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <ssd1306_DrawPixel+0xb8>)
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8005478:	797b      	ldrb	r3, [r7, #5]
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8005486:	797b      	ldrb	r3, [r7, #5]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d11a      	bne.n	80054c2 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800548c:	79fa      	ldrb	r2, [r7, #7]
 800548e:	79bb      	ldrb	r3, [r7, #6]
 8005490:	08db      	lsrs	r3, r3, #3
 8005492:	b2d8      	uxtb	r0, r3
 8005494:	4603      	mov	r3, r0
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	4413      	add	r3, r2
 800549a:	4a1c      	ldr	r2, [pc, #112]	; (800550c <ssd1306_DrawPixel+0xbc>)
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	b25a      	sxtb	r2, r3
 80054a0:	79bb      	ldrb	r3, [r7, #6]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b259      	sxtb	r1, r3
 80054b2:	79fa      	ldrb	r2, [r7, #7]
 80054b4:	4603      	mov	r3, r0
 80054b6:	01db      	lsls	r3, r3, #7
 80054b8:	4413      	add	r3, r2
 80054ba:	b2c9      	uxtb	r1, r1
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <ssd1306_DrawPixel+0xbc>)
 80054be:	54d1      	strb	r1, [r2, r3]
 80054c0:	e01d      	b.n	80054fe <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054c2:	79fa      	ldrb	r2, [r7, #7]
 80054c4:	79bb      	ldrb	r3, [r7, #6]
 80054c6:	08db      	lsrs	r3, r3, #3
 80054c8:	b2d8      	uxtb	r0, r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	01db      	lsls	r3, r3, #7
 80054ce:	4413      	add	r3, r2
 80054d0:	4a0e      	ldr	r2, [pc, #56]	; (800550c <ssd1306_DrawPixel+0xbc>)
 80054d2:	5cd3      	ldrb	r3, [r2, r3]
 80054d4:	b25a      	sxtb	r2, r3
 80054d6:	79bb      	ldrb	r3, [r7, #6]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	4013      	ands	r3, r2
 80054ea:	b259      	sxtb	r1, r3
 80054ec:	79fa      	ldrb	r2, [r7, #7]
 80054ee:	4603      	mov	r3, r0
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	4413      	add	r3, r2
 80054f4:	b2c9      	uxtb	r1, r1
 80054f6:	4a05      	ldr	r2, [pc, #20]	; (800550c <ssd1306_DrawPixel+0xbc>)
 80054f8:	54d1      	strb	r1, [r2, r3]
 80054fa:	e000      	b.n	80054fe <ssd1306_DrawPixel+0xae>
		return;
 80054fc:	bf00      	nop
	}
}
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	200006cc 	.word	0x200006cc
 800550c:	200002cc 	.word	0x200002cc

08005510 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	4604      	mov	r4, r0
 8005518:	1d38      	adds	r0, r7, #4
 800551a:	e880 0006 	stmia.w	r0, {r1, r2}
 800551e:	461a      	mov	r2, r3
 8005520:	4623      	mov	r3, r4
 8005522:	73fb      	strb	r3, [r7, #15]
 8005524:	4613      	mov	r3, r2
 8005526:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <ssd1306_WriteChar+0xfc>)
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	793b      	ldrb	r3, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	2b7f      	cmp	r3, #127	; 0x7f
 8005534:	dc06      	bgt.n	8005544 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005536:	4b35      	ldr	r3, [pc, #212]	; (800560c <ssd1306_WriteChar+0xfc>)
 8005538:	885b      	ldrh	r3, [r3, #2]
 800553a:	461a      	mov	r2, r3
 800553c:	797b      	ldrb	r3, [r7, #5]
 800553e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005540:	2b3f      	cmp	r3, #63	; 0x3f
 8005542:	dd01      	ble.n	8005548 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8005544:	2300      	movs	r3, #0
 8005546:	e05d      	b.n	8005604 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e04c      	b.n	80055e8 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	3b20      	subs	r3, #32
 8005554:	7979      	ldrb	r1, [r7, #5]
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4619      	mov	r1, r3
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	440b      	add	r3, r1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005568:	2300      	movs	r3, #0
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e034      	b.n	80055d8 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d012      	beq.n	80055a4 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800557e:	4b23      	ldr	r3, [pc, #140]	; (800560c <ssd1306_WriteChar+0xfc>)
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	4413      	add	r3, r2
 800558a:	b2d8      	uxtb	r0, r3
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <ssd1306_WriteChar+0xfc>)
 800558e:	885b      	ldrh	r3, [r3, #2]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4413      	add	r3, r2
 8005598:	b2db      	uxtb	r3, r3
 800559a:	7bba      	ldrb	r2, [r7, #14]
 800559c:	4619      	mov	r1, r3
 800559e:	f7ff ff57 	bl	8005450 <ssd1306_DrawPixel>
 80055a2:	e016      	b.n	80055d2 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <ssd1306_WriteChar+0xfc>)
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	b2d8      	uxtb	r0, r3
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <ssd1306_WriteChar+0xfc>)
 80055b4:	885b      	ldrh	r3, [r3, #2]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4413      	add	r3, r2
 80055be:	b2d9      	uxtb	r1, r3
 80055c0:	7bbb      	ldrb	r3, [r7, #14]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	f7ff ff3f 	bl	8005450 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	3301      	adds	r3, #1
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	793b      	ldrb	r3, [r7, #4]
 80055da:	461a      	mov	r2, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	4293      	cmp	r3, r2
 80055e0:	d3c5      	bcc.n	800556e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	797b      	ldrb	r3, [r7, #5]
 80055ea:	461a      	mov	r2, r3
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d3ad      	bcc.n	800554e <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <ssd1306_WriteChar+0xfc>)
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	793b      	ldrb	r3, [r7, #4]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <ssd1306_WriteChar+0xfc>)
 8005600:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd90      	pop	{r4, r7, pc}
 800560c:	200006cc 	.word	0x200006cc

08005610 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	1d38      	adds	r0, r7, #4
 800561a:	e880 0006 	stmia.w	r0, {r1, r2}
 800561e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8005620:	e012      	b.n	8005648 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	7818      	ldrb	r0, [r3, #0]
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	1d3a      	adds	r2, r7, #4
 800562a:	ca06      	ldmia	r2, {r1, r2}
 800562c:	f7ff ff70 	bl	8005510 <ssd1306_WriteChar>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d002      	beq.n	8005642 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	e008      	b.n	8005654 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e8      	bne.n	8005622 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	781b      	ldrb	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	460a      	mov	r2, r1
 8005666:	71fb      	strb	r3, [r7, #7]
 8005668:	4613      	mov	r3, r2
 800566a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	b29a      	uxth	r2, r3
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <ssd1306_SetCursor+0x2c>)
 8005672:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8005674:	79bb      	ldrb	r3, [r7, #6]
 8005676:	b29a      	uxth	r2, r3
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <ssd1306_SetCursor+0x2c>)
 800567a:	805a      	strh	r2, [r3, #2]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	200006cc 	.word	0x200006cc

0800568c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_MspInit+0x5c>)
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <HAL_MspInit+0x5c>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6193      	str	r3, [r2, #24]
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_MspInit+0x5c>)
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <HAL_MspInit+0x5c>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_MspInit+0x5c>)
 80056b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b4:	61d3      	str	r3, [r2, #28]
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <HAL_MspInit+0x5c>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <HAL_MspInit+0x60>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <HAL_MspInit+0x60>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40010000 	.word	0x40010000

080056f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a15      	ldr	r2, [pc, #84]	; (8005760 <HAL_I2C_MspInit+0x70>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d123      	bne.n	8005758 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005710:	4b14      	ldr	r3, [pc, #80]	; (8005764 <HAL_I2C_MspInit+0x74>)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <HAL_I2C_MspInit+0x74>)
 8005716:	f043 0308 	orr.w	r3, r3, #8
 800571a:	6193      	str	r3, [r2, #24]
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <HAL_I2C_MspInit+0x74>)
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005728:	23c0      	movs	r3, #192	; 0xc0
 800572a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800572c:	2312      	movs	r3, #18
 800572e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005730:	2303      	movs	r3, #3
 8005732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005734:	f107 0310 	add.w	r3, r7, #16
 8005738:	4619      	mov	r1, r3
 800573a:	480b      	ldr	r0, [pc, #44]	; (8005768 <HAL_I2C_MspInit+0x78>)
 800573c:	f000 ff2a 	bl	8006594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <HAL_I2C_MspInit+0x74>)
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4a07      	ldr	r2, [pc, #28]	; (8005764 <HAL_I2C_MspInit+0x74>)
 8005746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800574a:	61d3      	str	r3, [r2, #28]
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_I2C_MspInit+0x74>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005758:	bf00      	nop
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40005400 	.word	0x40005400
 8005764:	40021000 	.word	0x40021000
 8005768:	40010c00 	.word	0x40010c00

0800576c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005774:	f107 0310 	add.w	r3, r7, #16
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	609a      	str	r2, [r3, #8]
 8005780:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <HAL_SPI_MspInit+0x8c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d131      	bne.n	80057f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_SPI_MspInit+0x90>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <HAL_SPI_MspInit+0x90>)
 8005792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005796:	61d3      	str	r3, [r2, #28]
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <HAL_SPI_MspInit+0x90>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057a4:	4b15      	ldr	r3, [pc, #84]	; (80057fc <HAL_SPI_MspInit+0x90>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <HAL_SPI_MspInit+0x90>)
 80057aa:	f043 0308 	orr.w	r3, r3, #8
 80057ae:	6193      	str	r3, [r2, #24]
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <HAL_SPI_MspInit+0x90>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80057bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80057c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c2:	2302      	movs	r3, #2
 80057c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057c6:	2303      	movs	r3, #3
 80057c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ca:	f107 0310 	add.w	r3, r7, #16
 80057ce:	4619      	mov	r1, r3
 80057d0:	480b      	ldr	r0, [pc, #44]	; (8005800 <HAL_SPI_MspInit+0x94>)
 80057d2:	f000 fedf 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80057d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	4619      	mov	r1, r3
 80057ea:	4805      	ldr	r0, [pc, #20]	; (8005800 <HAL_SPI_MspInit+0x94>)
 80057ec:	f000 fed2 	bl	8006594 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80057f0:	bf00      	nop
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40003800 	.word	0x40003800
 80057fc:	40021000 	.word	0x40021000
 8005800:	40010c00 	.word	0x40010c00

08005804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <HAL_TIM_Base_MspInit+0x58>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_TIM_Base_MspInit+0x5c>)
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <HAL_TIM_Base_MspInit+0x5c>)
 800581c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005820:	6193      	str	r3, [r2, #24]
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <HAL_TIM_Base_MspInit+0x5c>)
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800582e:	e010      	b.n	8005852 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d10b      	bne.n	8005852 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_TIM_Base_MspInit+0x5c>)
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <HAL_TIM_Base_MspInit+0x5c>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	61d3      	str	r3, [r2, #28]
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_TIM_Base_MspInit+0x5c>)
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	68bb      	ldr	r3, [r7, #8]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586c:	f107 0310 	add.w	r3, r7, #16
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_TIM_MspPostInit+0x98>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d119      	bne.n	80058b8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005884:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <HAL_TIM_MspPostInit+0x9c>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <HAL_TIM_MspPostInit+0x9c>)
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	6193      	str	r3, [r2, #24]
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <HAL_TIM_MspPostInit+0x9c>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800589c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a2:	2302      	movs	r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a6:	2302      	movs	r3, #2
 80058a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4619      	mov	r1, r3
 80058b0:	4814      	ldr	r0, [pc, #80]	; (8005904 <HAL_TIM_MspPostInit+0xa0>)
 80058b2:	f000 fe6f 	bl	8006594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80058b6:	e01c      	b.n	80058f2 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d117      	bne.n	80058f2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_TIM_MspPostInit+0x9c>)
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	4a0e      	ldr	r2, [pc, #56]	; (8005900 <HAL_TIM_MspPostInit+0x9c>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6193      	str	r3, [r2, #24]
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <HAL_TIM_MspPostInit+0x9c>)
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80058da:	2301      	movs	r3, #1
 80058dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058de:	2302      	movs	r3, #2
 80058e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058e2:	2302      	movs	r3, #2
 80058e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e6:	f107 0310 	add.w	r3, r7, #16
 80058ea:	4619      	mov	r1, r3
 80058ec:	4805      	ldr	r0, [pc, #20]	; (8005904 <HAL_TIM_MspPostInit+0xa0>)
 80058ee:	f000 fe51 	bl	8006594 <HAL_GPIO_Init>
}
 80058f2:	bf00      	nop
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40021000 	.word	0x40021000
 8005904:	40010800 	.word	0x40010800

08005908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005910:	f107 0320 	add.w	r3, r7, #32
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a73      	ldr	r2, [pc, #460]	; (8005af0 <HAL_UART_MspInit+0x1e8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d13a      	bne.n	800599e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005928:	4b72      	ldr	r3, [pc, #456]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	4a71      	ldr	r2, [pc, #452]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 800592e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005932:	6193      	str	r3, [r2, #24]
 8005934:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005940:	4b6c      	ldr	r3, [pc, #432]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	4a6b      	ldr	r2, [pc, #428]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	6193      	str	r3, [r2, #24]
 800594c:	4b69      	ldr	r3, [pc, #420]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595e:	2302      	movs	r3, #2
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005962:	2303      	movs	r3, #3
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005966:	f107 0320 	add.w	r3, r7, #32
 800596a:	4619      	mov	r1, r3
 800596c:	4862      	ldr	r0, [pc, #392]	; (8005af8 <HAL_UART_MspInit+0x1f0>)
 800596e:	f000 fe11 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597c:	2300      	movs	r3, #0
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005980:	f107 0320 	add.w	r3, r7, #32
 8005984:	4619      	mov	r1, r3
 8005986:	485c      	ldr	r0, [pc, #368]	; (8005af8 <HAL_UART_MspInit+0x1f0>)
 8005988:	f000 fe04 	bl	8006594 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	2025      	movs	r0, #37	; 0x25
 8005992:	f000 fb64 	bl	800605e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005996:	2025      	movs	r0, #37	; 0x25
 8005998:	f000 fb7d 	bl	8006096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800599c:	e0a3      	b.n	8005ae6 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a56      	ldr	r2, [pc, #344]	; (8005afc <HAL_UART_MspInit+0x1f4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d138      	bne.n	8005a1a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80059a8:	4b52      	ldr	r3, [pc, #328]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	4a51      	ldr	r2, [pc, #324]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 80059ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b2:	61d3      	str	r3, [r2, #28]
 80059b4:	4b4f      	ldr	r3, [pc, #316]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c0:	4b4c      	ldr	r3, [pc, #304]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	4a4b      	ldr	r2, [pc, #300]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 80059c6:	f043 0304 	orr.w	r3, r3, #4
 80059ca:	6193      	str	r3, [r2, #24]
 80059cc:	4b49      	ldr	r3, [pc, #292]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059d8:	2304      	movs	r3, #4
 80059da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059dc:	2302      	movs	r3, #2
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059e0:	2303      	movs	r3, #3
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e4:	f107 0320 	add.w	r3, r7, #32
 80059e8:	4619      	mov	r1, r3
 80059ea:	4843      	ldr	r0, [pc, #268]	; (8005af8 <HAL_UART_MspInit+0x1f0>)
 80059ec:	f000 fdd2 	bl	8006594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059f0:	2308      	movs	r3, #8
 80059f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059f4:	2300      	movs	r3, #0
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fc:	f107 0320 	add.w	r3, r7, #32
 8005a00:	4619      	mov	r1, r3
 8005a02:	483d      	ldr	r0, [pc, #244]	; (8005af8 <HAL_UART_MspInit+0x1f0>)
 8005a04:	f000 fdc6 	bl	8006594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2026      	movs	r0, #38	; 0x26
 8005a0e:	f000 fb26 	bl	800605e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a12:	2026      	movs	r0, #38	; 0x26
 8005a14:	f000 fb3f 	bl	8006096 <HAL_NVIC_EnableIRQ>
}
 8005a18:	e065      	b.n	8005ae6 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a38      	ldr	r2, [pc, #224]	; (8005b00 <HAL_UART_MspInit+0x1f8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d160      	bne.n	8005ae6 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a24:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	4a32      	ldr	r2, [pc, #200]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a2e:	61d3      	str	r3, [r2, #28]
 8005a30:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a3c:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005a42:	f043 0308 	orr.w	r3, r3, #8
 8005a46:	6193      	str	r3, [r2, #24]
 8005a48:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <HAL_UART_MspInit+0x1ec>)
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a62:	f107 0320 	add.w	r3, r7, #32
 8005a66:	4619      	mov	r1, r3
 8005a68:	4826      	ldr	r0, [pc, #152]	; (8005b04 <HAL_UART_MspInit+0x1fc>)
 8005a6a:	f000 fd93 	bl	8006594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a74:	2300      	movs	r3, #0
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a7c:	f107 0320 	add.w	r3, r7, #32
 8005a80:	4619      	mov	r1, r3
 8005a82:	4820      	ldr	r0, [pc, #128]	; (8005b04 <HAL_UART_MspInit+0x1fc>)
 8005a84:	f000 fd86 	bl	8006594 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005a88:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005a8a:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <HAL_UART_MspInit+0x204>)
 8005a8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aa6:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005aac:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005aae:	2220      	movs	r2, #32
 8005ab0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005ab4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ab8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005aba:	4813      	ldr	r0, [pc, #76]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005abc:	f000 fb06 	bl	80060cc <HAL_DMA_Init>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8005ac6:	f7ff f90a 	bl	8004cde <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005ace:	635a      	str	r2, [r3, #52]	; 0x34
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <HAL_UART_MspInit+0x200>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	2027      	movs	r0, #39	; 0x27
 8005adc:	f000 fabf 	bl	800605e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ae0:	2027      	movs	r0, #39	; 0x27
 8005ae2:	f000 fad8 	bl	8006096 <HAL_NVIC_EnableIRQ>
}
 8005ae6:	bf00      	nop
 8005ae8:	3730      	adds	r7, #48	; 0x30
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40013800 	.word	0x40013800
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40010800 	.word	0x40010800
 8005afc:	40004400 	.word	0x40004400
 8005b00:	40004800 	.word	0x40004800
 8005b04:	40010c00 	.word	0x40010c00
 8005b08:	20000c00 	.word	0x20000c00
 8005b0c:	40020030 	.word	0x40020030

08005b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <HardFault_Handler+0x4>

08005b22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b26:	e7fe      	b.n	8005b26 <MemManage_Handler+0x4>

08005b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <BusFault_Handler+0x4>

08005b2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b32:	e7fe      	b.n	8005b32 <UsageFault_Handler+0x4>

08005b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b5c:	f000 f96a 	bl	8005e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005b68:	2002      	movs	r0, #2
 8005b6a:	f000 fe9d 	bl	80068a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005b78:	4802      	ldr	r0, [pc, #8]	; (8005b84 <DMA1_Channel3_IRQHandler+0x10>)
 8005b7a:	f000 fbd7 	bl	800632c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000c00 	.word	0x20000c00

08005b88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
                 LF (U+000A): англ. line feed —            // '\n'
	 * Structure input message: '0d','0a','4F','4B','0d','0a'
	                             \r,  \n , O,   K,   \r,  \n
	Its interrupt generate olways if one byte is received
	 */
	uint8_t d = USART1->DR;                      					 		// Copy byte from UART1 buffer
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <USART1_IRQHandler+0x70>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	71fb      	strb	r3, [r7, #7]
	if((d != '\r') && (d != '\n'))                                   		// Save in buffer is char is letter or numbers
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b0d      	cmp	r3, #13
 8005b98:	d013      	beq.n	8005bc2 <USART1_IRQHandler+0x3a>
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	2b0a      	cmp	r3, #10
 8005b9e:	d010      	beq.n	8005bc2 <USART1_IRQHandler+0x3a>
	{
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <USART1_IRQHandler+0x74>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d920      	bls.n	8005bea <USART1_IRQHandler+0x62>
		{
			GSM_RX_buffer[counter_GSM_RX_buffer] = d;
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <USART1_IRQHandler+0x78>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	4619      	mov	r1, r3
 8005bae:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <USART1_IRQHandler+0x7c>)
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	5453      	strb	r3, [r2, r1]
			counter_GSM_RX_buffer++;
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <USART1_IRQHandler+0x78>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <USART1_IRQHandler+0x78>)
 8005bbe:	701a      	strb	r2, [r3, #0]
		if(count >=2)                                               		// Need miss first two characters ( structure input message: '0d','0a','4F','4B','0d','0a')
 8005bc0:	e013      	b.n	8005bea <USART1_IRQHandler+0x62>
		}
	}
	else
	{
		if(counter_GSM_RX_buffer > 0)										// If answer is sawed
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <USART1_IRQHandler+0x78>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d006      	beq.n	8005bd8 <USART1_IRQHandler+0x50>
		{
			counter_GSM_RX_buffer = 0;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <USART1_IRQHandler+0x78>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
			ansver_flag =1;
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <USART1_IRQHandler+0x80>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e002      	b.n	8005bde <USART1_IRQHandler+0x56>
		}
		else
		{
			counter_GSM_RX_buffer=0;
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <USART1_IRQHandler+0x78>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
		}

		count ++;
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <USART1_IRQHandler+0x74>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <USART1_IRQHandler+0x74>)
 8005be8:	701a      	strb	r2, [r3, #0]
	}
//	/////////////////////////////////////////////////////////////////////////////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005bea:	4808      	ldr	r0, [pc, #32]	; (8005c0c <USART1_IRQHandler+0x84>)
 8005bec:	f004 fca4 	bl	800a538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	200002bd 	.word	0x200002bd
 8005c00:	200006d2 	.word	0x200006d2
 8005c04:	20000280 	.word	0x20000280
 8005c08:	200002bc 	.word	0x200002bc
 8005c0c:	20000ed8 	.word	0x20000ed8

08005c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  uint8_t data = USART2->DR;
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <USART2_IRQHandler+0x50>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	71fb      	strb	r3, [r7, #7]

//  if(data != '\0')
//  {

	  if(fingerprint_count_bytes >= 11)  // 11  // 5
 8005c1c:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <USART2_IRQHandler+0x54>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b0a      	cmp	r3, #10
 8005c22:	d906      	bls.n	8005c32 <USART2_IRQHandler+0x22>
	  {
		  fingerprint_count_bytes = 0;
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <USART2_IRQHandler+0x54>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
		  data_from_fingerprint_module = 1;
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <USART2_IRQHandler+0x58>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e00e      	b.n	8005c50 <USART2_IRQHandler+0x40>

		  //memset(receive_data_from_fingerprint, 0 , sizeof(receive_data_from_fingerprint));
	  }
	  else
	  {
		  response_packet[fingerprint_count_bytes] = data;
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <USART2_IRQHandler+0x54>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	4619      	mov	r1, r3
 8005c38:	4a0c      	ldr	r2, [pc, #48]	; (8005c6c <USART2_IRQHandler+0x5c>)
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	5453      	strb	r3, [r2, r1]
		  data_from_fingerprint_module = 0;
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <USART2_IRQHandler+0x58>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
		  fingerprint_count_bytes ++;
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <USART2_IRQHandler+0x54>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <USART2_IRQHandler+0x54>)
 8005c4e:	701a      	strb	r2, [r3, #0]
	  }
//  }


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c50:	4807      	ldr	r0, [pc, #28]	; (8005c70 <USART2_IRQHandler+0x60>)
 8005c52:	f004 fc71 	bl	800a538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40004400 	.word	0x40004400
 8005c64:	20000274 	.word	0x20000274
 8005c68:	20000275 	.word	0x20000275
 8005c6c:	200006d4 	.word	0x200006d4
 8005c70:	20000fa8 	.word	0x20000fa8

08005c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005c78:	4802      	ldr	r0, [pc, #8]	; (8005c84 <USART3_IRQHandler+0x10>)
 8005c7a:	f004 fc5d 	bl	800a538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005c7e:	bf00      	nop
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000c44 	.word	0x20000c44

08005c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <_sbrk+0x5c>)
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <_sbrk+0x60>)
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <_sbrk+0x64>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <_sbrk+0x64>)
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <_sbrk+0x68>)
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <_sbrk+0x64>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d207      	bcs.n	8005cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cb8:	f005 f816 	bl	800ace8 <__errno>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cc6:	e009      	b.n	8005cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <_sbrk+0x64>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <_sbrk+0x64>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a05      	ldr	r2, [pc, #20]	; (8005cec <_sbrk+0x64>)
 8005cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20005000 	.word	0x20005000
 8005ce8:	00000400 	.word	0x00000400
 8005cec:	200006e0 	.word	0x200006e0
 8005cf0:	20000ff0 	.word	0x20000ff0

08005cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005cf8:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <SystemInit+0x5c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <SystemInit+0x5c>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <SystemInit+0x5c>)
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	4911      	ldr	r1, [pc, #68]	; (8005d50 <SystemInit+0x5c>)
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <SystemInit+0x60>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <SystemInit+0x5c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0e      	ldr	r2, [pc, #56]	; (8005d50 <SystemInit+0x5c>)
 8005d16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <SystemInit+0x5c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <SystemInit+0x5c>)
 8005d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <SystemInit+0x5c>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a07      	ldr	r2, [pc, #28]	; (8005d50 <SystemInit+0x5c>)
 8005d32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005d36:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <SystemInit+0x5c>)
 8005d3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005d3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <SystemInit+0x64>)
 8005d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d46:	609a      	str	r2, [r3, #8]
#endif 
}
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	40021000 	.word	0x40021000
 8005d54:	f8ff0000 	.word	0xf8ff0000
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005d5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005d5e:	e003      	b.n	8005d68 <LoopCopyDataInit>

08005d60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005d62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005d64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005d66:	3104      	adds	r1, #4

08005d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005d68:	480a      	ldr	r0, [pc, #40]	; (8005d94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005d6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005d6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005d70:	d3f6      	bcc.n	8005d60 <CopyDataInit>
  ldr r2, =_sbss
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005d74:	e002      	b.n	8005d7c <LoopFillZerobss>

08005d76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005d76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005d78:	f842 3b04 	str.w	r3, [r2], #4

08005d7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005d7c:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005d7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005d80:	d3f9      	bcc.n	8005d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d82:	f7ff ffb7 	bl	8005cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d86:	f004 ffb5 	bl	800acf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d8a:	f7fd fb5b 	bl	8003444 <main>
  bx lr
 8005d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8005d90:	0800f0d8 	.word	0x0800f0d8
  ldr r0, =_sdata
 8005d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005d98:	20000240 	.word	0x20000240
  ldr r2, =_sbss
 8005d9c:	20000240 	.word	0x20000240
  ldr r3, = _ebss
 8005da0:	20000ff0 	.word	0x20000ff0

08005da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005da4:	e7fe      	b.n	8005da4 <ADC1_2_IRQHandler>
	...

08005da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <HAL_Init+0x28>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a07      	ldr	r2, [pc, #28]	; (8005dd0 <HAL_Init+0x28>)
 8005db2:	f043 0310 	orr.w	r3, r3, #16
 8005db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005db8:	2003      	movs	r0, #3
 8005dba:	f000 f945 	bl	8006048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f000 f808 	bl	8005dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005dc4:	f7ff fc62 	bl	800568c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40022000 	.word	0x40022000

08005dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ddc:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <HAL_InitTick+0x54>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_InitTick+0x58>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	4619      	mov	r1, r3
 8005de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f95d 	bl	80060b2 <HAL_SYSTICK_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e00e      	b.n	8005e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d80a      	bhi.n	8005e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e10:	f000 f925 	bl	800605e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e14:	4a06      	ldr	r2, [pc, #24]	; (8005e30 <HAL_InitTick+0x5c>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000064 	.word	0x20000064
 8005e2c:	2000006c 	.word	0x2000006c
 8005e30:	20000068 	.word	0x20000068

08005e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <HAL_IncTick+0x1c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_IncTick+0x20>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	4a03      	ldr	r2, [pc, #12]	; (8005e54 <HAL_IncTick+0x20>)
 8005e46:	6013      	str	r3, [r2, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	2000006c 	.word	0x2000006c
 8005e54:	20000fe8 	.word	0x20000fe8

08005e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <HAL_GetTick+0x10>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr
 8005e68:	20000fe8 	.word	0x20000fe8

08005e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e74:	f7ff fff0 	bl	8005e58 <HAL_GetTick>
 8005e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e84:	d005      	beq.n	8005e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_Delay+0x40>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e92:	bf00      	nop
 8005e94:	f7ff ffe0 	bl	8005e58 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d8f7      	bhi.n	8005e94 <HAL_Delay+0x28>
  {
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	2000006c 	.word	0x2000006c

08005eb0 <__NVIC_SetPriorityGrouping>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ee2:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	60d3      	str	r3, [r2, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	e000ed00 	.word	0xe000ed00

08005ef8 <__NVIC_GetPriorityGrouping>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <__NVIC_GetPriorityGrouping+0x18>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	0a1b      	lsrs	r3, r3, #8
 8005f02:	f003 0307 	and.w	r3, r3, #7
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <__NVIC_EnableIRQ>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	db0b      	blt.n	8005f3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	f003 021f 	and.w	r2, r3, #31
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <__NVIC_EnableIRQ+0x34>)
 8005f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2001      	movs	r0, #1
 8005f36:	fa00 f202 	lsl.w	r2, r0, r2
 8005f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	e000e100 	.word	0xe000e100

08005f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	6039      	str	r1, [r7, #0]
 8005f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db0a      	blt.n	8005f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	490c      	ldr	r1, [pc, #48]	; (8005f98 <__NVIC_SetPriority+0x4c>)
 8005f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6a:	0112      	lsls	r2, r2, #4
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	440b      	add	r3, r1
 8005f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f74:	e00a      	b.n	8005f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	4908      	ldr	r1, [pc, #32]	; (8005f9c <__NVIC_SetPriority+0x50>)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	3b04      	subs	r3, #4
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	440b      	add	r3, r1
 8005f8a:	761a      	strb	r2, [r3, #24]
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	e000e100 	.word	0xe000e100
 8005f9c:	e000ed00 	.word	0xe000ed00

08005fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f1c3 0307 	rsb	r3, r3, #7
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	bf28      	it	cs
 8005fbe:	2304      	movcs	r3, #4
 8005fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d902      	bls.n	8005fd0 <NVIC_EncodePriority+0x30>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3b03      	subs	r3, #3
 8005fce:	e000      	b.n	8005fd2 <NVIC_EncodePriority+0x32>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43d9      	mvns	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff8:	4313      	orrs	r3, r2
         );
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr

08006004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006014:	d301      	bcc.n	800601a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006016:	2301      	movs	r3, #1
 8006018:	e00f      	b.n	800603a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800601a:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <SysTick_Config+0x40>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3b01      	subs	r3, #1
 8006020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006022:	210f      	movs	r1, #15
 8006024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006028:	f7ff ff90 	bl	8005f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <SysTick_Config+0x40>)
 800602e:	2200      	movs	r2, #0
 8006030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006032:	4b04      	ldr	r3, [pc, #16]	; (8006044 <SysTick_Config+0x40>)
 8006034:	2207      	movs	r2, #7
 8006036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	e000e010 	.word	0xe000e010

08006048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ff2d 	bl	8005eb0 <__NVIC_SetPriorityGrouping>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	4603      	mov	r3, r0
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006070:	f7ff ff42 	bl	8005ef8 <__NVIC_GetPriorityGrouping>
 8006074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	6978      	ldr	r0, [r7, #20]
 800607c:	f7ff ff90 	bl	8005fa0 <NVIC_EncodePriority>
 8006080:	4602      	mov	r2, r0
 8006082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff5f 	bl	8005f4c <__NVIC_SetPriority>
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	4603      	mov	r3, r0
 800609e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ff35 	bl	8005f14 <__NVIC_EnableIRQ>
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ffa2 	bl	8006004 <SysTick_Config>
 80060c0:	4603      	mov	r3, r0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e043      	b.n	800616a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <HAL_DMA_Init+0xa8>)
 80060ea:	4413      	add	r3, r2
 80060ec:	4a22      	ldr	r2, [pc, #136]	; (8006178 <HAL_DMA_Init+0xac>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	009a      	lsls	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1f      	ldr	r2, [pc, #124]	; (800617c <HAL_DMA_Init+0xb0>)
 80060fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006116:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800611a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800613c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	bffdfff8 	.word	0xbffdfff8
 8006178:	cccccccd 	.word	0xcccccccd
 800617c:	40020000 	.word	0x40020000

08006180 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_DMA_Start_IT+0x20>
 800619c:	2302      	movs	r3, #2
 800619e:	e04a      	b.n	8006236 <HAL_DMA_Start_IT+0xb6>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d13a      	bne.n	8006228 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f9ae 	bl	8006538 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 020e 	orr.w	r2, r2, #14
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e00f      	b.n	8006216 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0204 	bic.w	r2, r2, #4
 8006204:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 020a 	orr.w	r2, r2, #10
 8006214:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e005      	b.n	8006234 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006230:	2302      	movs	r3, #2
 8006232:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006252:	2b02      	cmp	r3, #2
 8006254:	d005      	beq.n	8006262 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2204      	movs	r2, #4
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	73fb      	strb	r3, [r7, #15]
 8006260:	e051      	b.n	8006306 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 020e 	bic.w	r2, r2, #14
 8006270:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a22      	ldr	r2, [pc, #136]	; (8006310 <HAL_DMA_Abort_IT+0xd0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d029      	beq.n	80062e0 <HAL_DMA_Abort_IT+0xa0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a20      	ldr	r2, [pc, #128]	; (8006314 <HAL_DMA_Abort_IT+0xd4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d022      	beq.n	80062dc <HAL_DMA_Abort_IT+0x9c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1f      	ldr	r2, [pc, #124]	; (8006318 <HAL_DMA_Abort_IT+0xd8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d01a      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x96>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_DMA_Abort_IT+0xdc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d012      	beq.n	80062d0 <HAL_DMA_Abort_IT+0x90>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <HAL_DMA_Abort_IT+0xe0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00a      	beq.n	80062ca <HAL_DMA_Abort_IT+0x8a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <HAL_DMA_Abort_IT+0xe4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d102      	bne.n	80062c4 <HAL_DMA_Abort_IT+0x84>
 80062be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062c2:	e00e      	b.n	80062e2 <HAL_DMA_Abort_IT+0xa2>
 80062c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062c8:	e00b      	b.n	80062e2 <HAL_DMA_Abort_IT+0xa2>
 80062ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062ce:	e008      	b.n	80062e2 <HAL_DMA_Abort_IT+0xa2>
 80062d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062d4:	e005      	b.n	80062e2 <HAL_DMA_Abort_IT+0xa2>
 80062d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062da:	e002      	b.n	80062e2 <HAL_DMA_Abort_IT+0xa2>
 80062dc:	2310      	movs	r3, #16
 80062de:	e000      	b.n	80062e2 <HAL_DMA_Abort_IT+0xa2>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4a11      	ldr	r2, [pc, #68]	; (8006328 <HAL_DMA_Abort_IT+0xe8>)
 80062e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
    } 
  }
  return status;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40020008 	.word	0x40020008
 8006314:	4002001c 	.word	0x4002001c
 8006318:	40020030 	.word	0x40020030
 800631c:	40020044 	.word	0x40020044
 8006320:	40020058 	.word	0x40020058
 8006324:	4002006c 	.word	0x4002006c
 8006328:	40020000 	.word	0x40020000

0800632c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	2204      	movs	r2, #4
 800634a:	409a      	lsls	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d04f      	beq.n	80063f4 <HAL_DMA_IRQHandler+0xc8>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04a      	beq.n	80063f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0204 	bic.w	r2, r2, #4
 800637a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a66      	ldr	r2, [pc, #408]	; (800651c <HAL_DMA_IRQHandler+0x1f0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d029      	beq.n	80063da <HAL_DMA_IRQHandler+0xae>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a65      	ldr	r2, [pc, #404]	; (8006520 <HAL_DMA_IRQHandler+0x1f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d022      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xaa>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a63      	ldr	r2, [pc, #396]	; (8006524 <HAL_DMA_IRQHandler+0x1f8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01a      	beq.n	80063d0 <HAL_DMA_IRQHandler+0xa4>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a62      	ldr	r2, [pc, #392]	; (8006528 <HAL_DMA_IRQHandler+0x1fc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d012      	beq.n	80063ca <HAL_DMA_IRQHandler+0x9e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a60      	ldr	r2, [pc, #384]	; (800652c <HAL_DMA_IRQHandler+0x200>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00a      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x98>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5f      	ldr	r2, [pc, #380]	; (8006530 <HAL_DMA_IRQHandler+0x204>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d102      	bne.n	80063be <HAL_DMA_IRQHandler+0x92>
 80063b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063bc:	e00e      	b.n	80063dc <HAL_DMA_IRQHandler+0xb0>
 80063be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063c2:	e00b      	b.n	80063dc <HAL_DMA_IRQHandler+0xb0>
 80063c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063c8:	e008      	b.n	80063dc <HAL_DMA_IRQHandler+0xb0>
 80063ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063ce:	e005      	b.n	80063dc <HAL_DMA_IRQHandler+0xb0>
 80063d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d4:	e002      	b.n	80063dc <HAL_DMA_IRQHandler+0xb0>
 80063d6:	2340      	movs	r3, #64	; 0x40
 80063d8:	e000      	b.n	80063dc <HAL_DMA_IRQHandler+0xb0>
 80063da:	2304      	movs	r3, #4
 80063dc:	4a55      	ldr	r2, [pc, #340]	; (8006534 <HAL_DMA_IRQHandler+0x208>)
 80063de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8094 	beq.w	8006512 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80063f2:	e08e      	b.n	8006512 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2202      	movs	r2, #2
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d056      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x186>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d051      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 020a 	bic.w	r2, r2, #10
 800642a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a38      	ldr	r2, [pc, #224]	; (800651c <HAL_DMA_IRQHandler+0x1f0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d029      	beq.n	8006492 <HAL_DMA_IRQHandler+0x166>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a37      	ldr	r2, [pc, #220]	; (8006520 <HAL_DMA_IRQHandler+0x1f4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_IRQHandler+0x162>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a35      	ldr	r2, [pc, #212]	; (8006524 <HAL_DMA_IRQHandler+0x1f8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01a      	beq.n	8006488 <HAL_DMA_IRQHandler+0x15c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a34      	ldr	r2, [pc, #208]	; (8006528 <HAL_DMA_IRQHandler+0x1fc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d012      	beq.n	8006482 <HAL_DMA_IRQHandler+0x156>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a32      	ldr	r2, [pc, #200]	; (800652c <HAL_DMA_IRQHandler+0x200>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00a      	beq.n	800647c <HAL_DMA_IRQHandler+0x150>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a31      	ldr	r2, [pc, #196]	; (8006530 <HAL_DMA_IRQHandler+0x204>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d102      	bne.n	8006476 <HAL_DMA_IRQHandler+0x14a>
 8006470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006474:	e00e      	b.n	8006494 <HAL_DMA_IRQHandler+0x168>
 8006476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800647a:	e00b      	b.n	8006494 <HAL_DMA_IRQHandler+0x168>
 800647c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006480:	e008      	b.n	8006494 <HAL_DMA_IRQHandler+0x168>
 8006482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006486:	e005      	b.n	8006494 <HAL_DMA_IRQHandler+0x168>
 8006488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800648c:	e002      	b.n	8006494 <HAL_DMA_IRQHandler+0x168>
 800648e:	2320      	movs	r3, #32
 8006490:	e000      	b.n	8006494 <HAL_DMA_IRQHandler+0x168>
 8006492:	2302      	movs	r3, #2
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <HAL_DMA_IRQHandler+0x208>)
 8006496:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d034      	beq.n	8006512 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80064b0:	e02f      	b.n	8006512 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	2208      	movs	r2, #8
 80064b8:	409a      	lsls	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4013      	ands	r3, r2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d028      	beq.n	8006514 <HAL_DMA_IRQHandler+0x1e8>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d023      	beq.n	8006514 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020e 	bic.w	r2, r2, #14
 80064da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	2101      	movs	r1, #1
 80064e6:	fa01 f202 	lsl.w	r2, r1, r2
 80064ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
    }
  }
  return;
 8006512:	bf00      	nop
 8006514:	bf00      	nop
}
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40020008 	.word	0x40020008
 8006520:	4002001c 	.word	0x4002001c
 8006524:	40020030 	.word	0x40020030
 8006528:	40020044 	.word	0x40020044
 800652c:	40020058 	.word	0x40020058
 8006530:	4002006c 	.word	0x4002006c
 8006534:	40020000 	.word	0x40020000

08006538 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f202 	lsl.w	r2, r1, r2
 8006554:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b10      	cmp	r3, #16
 8006564:	d108      	bne.n	8006578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006576:	e007      	b.n	8006588 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	60da      	str	r2, [r3, #12]
}
 8006588:	bf00      	nop
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr
	...

08006594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006594:	b480      	push	{r7}
 8006596:	b08b      	sub	sp, #44	; 0x2c
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80065a2:	2300      	movs	r3, #0
 80065a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065a6:	e127      	b.n	80067f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80065a8:	2201      	movs	r2, #1
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	4013      	ands	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	f040 8116 	bne.w	80067f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b12      	cmp	r3, #18
 80065cc:	d034      	beq.n	8006638 <HAL_GPIO_Init+0xa4>
 80065ce:	2b12      	cmp	r3, #18
 80065d0:	d80d      	bhi.n	80065ee <HAL_GPIO_Init+0x5a>
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d02b      	beq.n	800662e <HAL_GPIO_Init+0x9a>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d804      	bhi.n	80065e4 <HAL_GPIO_Init+0x50>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d031      	beq.n	8006642 <HAL_GPIO_Init+0xae>
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d01c      	beq.n	800661c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80065e2:	e048      	b.n	8006676 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d043      	beq.n	8006670 <HAL_GPIO_Init+0xdc>
 80065e8:	2b11      	cmp	r3, #17
 80065ea:	d01b      	beq.n	8006624 <HAL_GPIO_Init+0x90>
          break;
 80065ec:	e043      	b.n	8006676 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80065ee:	4a89      	ldr	r2, [pc, #548]	; (8006814 <HAL_GPIO_Init+0x280>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d026      	beq.n	8006642 <HAL_GPIO_Init+0xae>
 80065f4:	4a87      	ldr	r2, [pc, #540]	; (8006814 <HAL_GPIO_Init+0x280>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d806      	bhi.n	8006608 <HAL_GPIO_Init+0x74>
 80065fa:	4a87      	ldr	r2, [pc, #540]	; (8006818 <HAL_GPIO_Init+0x284>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d020      	beq.n	8006642 <HAL_GPIO_Init+0xae>
 8006600:	4a86      	ldr	r2, [pc, #536]	; (800681c <HAL_GPIO_Init+0x288>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01d      	beq.n	8006642 <HAL_GPIO_Init+0xae>
          break;
 8006606:	e036      	b.n	8006676 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006608:	4a85      	ldr	r2, [pc, #532]	; (8006820 <HAL_GPIO_Init+0x28c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d019      	beq.n	8006642 <HAL_GPIO_Init+0xae>
 800660e:	4a85      	ldr	r2, [pc, #532]	; (8006824 <HAL_GPIO_Init+0x290>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d016      	beq.n	8006642 <HAL_GPIO_Init+0xae>
 8006614:	4a84      	ldr	r2, [pc, #528]	; (8006828 <HAL_GPIO_Init+0x294>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_GPIO_Init+0xae>
          break;
 800661a:	e02c      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	623b      	str	r3, [r7, #32]
          break;
 8006622:	e028      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	3304      	adds	r3, #4
 800662a:	623b      	str	r3, [r7, #32]
          break;
 800662c:	e023      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	3308      	adds	r3, #8
 8006634:	623b      	str	r3, [r7, #32]
          break;
 8006636:	e01e      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	330c      	adds	r3, #12
 800663e:	623b      	str	r3, [r7, #32]
          break;
 8006640:	e019      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800664a:	2304      	movs	r3, #4
 800664c:	623b      	str	r3, [r7, #32]
          break;
 800664e:	e012      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d105      	bne.n	8006664 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006658:	2308      	movs	r3, #8
 800665a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	611a      	str	r2, [r3, #16]
          break;
 8006662:	e008      	b.n	8006676 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006664:	2308      	movs	r3, #8
 8006666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	615a      	str	r2, [r3, #20]
          break;
 800666e:	e002      	b.n	8006676 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006670:	2300      	movs	r3, #0
 8006672:	623b      	str	r3, [r7, #32]
          break;
 8006674:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2bff      	cmp	r3, #255	; 0xff
 800667a:	d801      	bhi.n	8006680 <HAL_GPIO_Init+0xec>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	e001      	b.n	8006684 <HAL_GPIO_Init+0xf0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2bff      	cmp	r3, #255	; 0xff
 800668a:	d802      	bhi.n	8006692 <HAL_GPIO_Init+0xfe>
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	e002      	b.n	8006698 <HAL_GPIO_Init+0x104>
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	3b08      	subs	r3, #8
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	210f      	movs	r1, #15
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	fa01 f303 	lsl.w	r3, r1, r3
 80066a6:	43db      	mvns	r3, r3
 80066a8:	401a      	ands	r2, r3
 80066aa:	6a39      	ldr	r1, [r7, #32]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	431a      	orrs	r2, r3
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8096 	beq.w	80067f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80066c6:	4b59      	ldr	r3, [pc, #356]	; (800682c <HAL_GPIO_Init+0x298>)
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	4a58      	ldr	r2, [pc, #352]	; (800682c <HAL_GPIO_Init+0x298>)
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	6193      	str	r3, [r2, #24]
 80066d2:	4b56      	ldr	r3, [pc, #344]	; (800682c <HAL_GPIO_Init+0x298>)
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	60bb      	str	r3, [r7, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80066de:	4a54      	ldr	r2, [pc, #336]	; (8006830 <HAL_GPIO_Init+0x29c>)
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	3302      	adds	r3, #2
 80066e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	220f      	movs	r2, #15
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	43db      	mvns	r3, r3
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4013      	ands	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a4b      	ldr	r2, [pc, #300]	; (8006834 <HAL_GPIO_Init+0x2a0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_GPIO_Init+0x19e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a4a      	ldr	r2, [pc, #296]	; (8006838 <HAL_GPIO_Init+0x2a4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00d      	beq.n	800672e <HAL_GPIO_Init+0x19a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a49      	ldr	r2, [pc, #292]	; (800683c <HAL_GPIO_Init+0x2a8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <HAL_GPIO_Init+0x196>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a48      	ldr	r2, [pc, #288]	; (8006840 <HAL_GPIO_Init+0x2ac>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <HAL_GPIO_Init+0x192>
 8006722:	2303      	movs	r3, #3
 8006724:	e006      	b.n	8006734 <HAL_GPIO_Init+0x1a0>
 8006726:	2304      	movs	r3, #4
 8006728:	e004      	b.n	8006734 <HAL_GPIO_Init+0x1a0>
 800672a:	2302      	movs	r3, #2
 800672c:	e002      	b.n	8006734 <HAL_GPIO_Init+0x1a0>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <HAL_GPIO_Init+0x1a0>
 8006732:	2300      	movs	r3, #0
 8006734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006736:	f002 0203 	and.w	r2, r2, #3
 800673a:	0092      	lsls	r2, r2, #2
 800673c:	4093      	lsls	r3, r2
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006744:	493a      	ldr	r1, [pc, #232]	; (8006830 <HAL_GPIO_Init+0x29c>)
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	089b      	lsrs	r3, r3, #2
 800674a:	3302      	adds	r3, #2
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d006      	beq.n	800676c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800675e:	4b39      	ldr	r3, [pc, #228]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4938      	ldr	r1, [pc, #224]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]
 800676a:	e006      	b.n	800677a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800676c:	4b35      	ldr	r3, [pc, #212]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	43db      	mvns	r3, r3
 8006774:	4933      	ldr	r1, [pc, #204]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 8006776:	4013      	ands	r3, r2
 8006778:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d006      	beq.n	8006794 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006786:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	492e      	ldr	r1, [pc, #184]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	4313      	orrs	r3, r2
 8006790:	604b      	str	r3, [r1, #4]
 8006792:	e006      	b.n	80067a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	43db      	mvns	r3, r3
 800679c:	4929      	ldr	r1, [pc, #164]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 800679e:	4013      	ands	r3, r2
 80067a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80067ae:	4b25      	ldr	r3, [pc, #148]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	4924      	ldr	r1, [pc, #144]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
 80067ba:	e006      	b.n	80067ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80067bc:	4b21      	ldr	r3, [pc, #132]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	491f      	ldr	r1, [pc, #124]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d006      	beq.n	80067e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80067d6:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	491a      	ldr	r1, [pc, #104]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60cb      	str	r3, [r1, #12]
 80067e2:	e006      	b.n	80067f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80067e4:	4b17      	ldr	r3, [pc, #92]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	43db      	mvns	r3, r3
 80067ec:	4915      	ldr	r1, [pc, #84]	; (8006844 <HAL_GPIO_Init+0x2b0>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	3301      	adds	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	f47f aed0 	bne.w	80065a8 <HAL_GPIO_Init+0x14>
  }
}
 8006808:	bf00      	nop
 800680a:	372c      	adds	r7, #44	; 0x2c
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	10210000 	.word	0x10210000
 8006818:	10110000 	.word	0x10110000
 800681c:	10120000 	.word	0x10120000
 8006820:	10310000 	.word	0x10310000
 8006824:	10320000 	.word	0x10320000
 8006828:	10220000 	.word	0x10220000
 800682c:	40021000 	.word	0x40021000
 8006830:	40010000 	.word	0x40010000
 8006834:	40010800 	.word	0x40010800
 8006838:	40010c00 	.word	0x40010c00
 800683c:	40011000 	.word	0x40011000
 8006840:	40011400 	.word	0x40011400
 8006844:	40010400 	.word	0x40010400

08006848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	887b      	ldrh	r3, [r7, #2]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
 8006864:	e001      	b.n	800686a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	807b      	strh	r3, [r7, #2]
 8006882:	4613      	mov	r3, r2
 8006884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006886:	787b      	ldrb	r3, [r7, #1]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800688c:	887a      	ldrh	r2, [r7, #2]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006892:	e003      	b.n	800689c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006894:	887b      	ldrh	r3, [r7, #2]
 8006896:	041a      	lsls	r2, r3, #16
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	611a      	str	r2, [r3, #16]
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068b4:	695a      	ldr	r2, [r3, #20]
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d006      	beq.n	80068cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068be:	4a05      	ldr	r2, [pc, #20]	; (80068d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe f9bc 	bl	8004c44 <HAL_GPIO_EXTI_Callback>
  }
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40010400 	.word	0x40010400

080068d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e11f      	b.n	8006b2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fe fef6 	bl	80056f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800692a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800693a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800693c:	f002 f838 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 8006940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4a7b      	ldr	r2, [pc, #492]	; (8006b34 <HAL_I2C_Init+0x25c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d807      	bhi.n	800695c <HAL_I2C_Init+0x84>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a7a      	ldr	r2, [pc, #488]	; (8006b38 <HAL_I2C_Init+0x260>)
 8006950:	4293      	cmp	r3, r2
 8006952:	bf94      	ite	ls
 8006954:	2301      	movls	r3, #1
 8006956:	2300      	movhi	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e006      	b.n	800696a <HAL_I2C_Init+0x92>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a77      	ldr	r2, [pc, #476]	; (8006b3c <HAL_I2C_Init+0x264>)
 8006960:	4293      	cmp	r3, r2
 8006962:	bf94      	ite	ls
 8006964:	2301      	movls	r3, #1
 8006966:	2300      	movhi	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e0db      	b.n	8006b2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a72      	ldr	r2, [pc, #456]	; (8006b40 <HAL_I2C_Init+0x268>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	0c9b      	lsrs	r3, r3, #18
 800697c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a64      	ldr	r2, [pc, #400]	; (8006b34 <HAL_I2C_Init+0x25c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d802      	bhi.n	80069ac <HAL_I2C_Init+0xd4>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	3301      	adds	r3, #1
 80069aa:	e009      	b.n	80069c0 <HAL_I2C_Init+0xe8>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069b2:	fb02 f303 	mul.w	r3, r2, r3
 80069b6:	4a63      	ldr	r2, [pc, #396]	; (8006b44 <HAL_I2C_Init+0x26c>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	3301      	adds	r3, #1
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4956      	ldr	r1, [pc, #344]	; (8006b34 <HAL_I2C_Init+0x25c>)
 80069dc:	428b      	cmp	r3, r1
 80069de:	d80d      	bhi.n	80069fc <HAL_I2C_Init+0x124>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1e59      	subs	r1, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80069ee:	3301      	adds	r3, #1
 80069f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	bf38      	it	cc
 80069f8:	2304      	movcc	r3, #4
 80069fa:	e04f      	b.n	8006a9c <HAL_I2C_Init+0x1c4>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d111      	bne.n	8006a28 <HAL_I2C_Init+0x150>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1e58      	subs	r0, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6859      	ldr	r1, [r3, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	440b      	add	r3, r1
 8006a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a16:	3301      	adds	r3, #1
 8006a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e012      	b.n	8006a4e <HAL_I2C_Init+0x176>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1e58      	subs	r0, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6859      	ldr	r1, [r3, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	0099      	lsls	r1, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_I2C_Init+0x17e>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e022      	b.n	8006a9c <HAL_I2C_Init+0x1c4>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10e      	bne.n	8006a7c <HAL_I2C_Init+0x1a4>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1e58      	subs	r0, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6859      	ldr	r1, [r3, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	440b      	add	r3, r1
 8006a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a70:	3301      	adds	r3, #1
 8006a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7a:	e00f      	b.n	8006a9c <HAL_I2C_Init+0x1c4>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1e58      	subs	r0, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	0099      	lsls	r1, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a92:	3301      	adds	r3, #1
 8006a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	6809      	ldr	r1, [r1, #0]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69da      	ldr	r2, [r3, #28]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6911      	ldr	r1, [r2, #16]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68d2      	ldr	r2, [r2, #12]
 8006ad6:	4311      	orrs	r1, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6812      	ldr	r2, [r2, #0]
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	000186a0 	.word	0x000186a0
 8006b38:	001e847f 	.word	0x001e847f
 8006b3c:	003d08ff 	.word	0x003d08ff
 8006b40:	431bde83 	.word	0x431bde83
 8006b44:	10624dd3 	.word	0x10624dd3

08006b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	461a      	mov	r2, r3
 8006b54:	460b      	mov	r3, r1
 8006b56:	817b      	strh	r3, [r7, #10]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b5c:	f7ff f97c 	bl	8005e58 <HAL_GetTick>
 8006b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	f040 80e0 	bne.w	8006d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2319      	movs	r3, #25
 8006b76:	2201      	movs	r2, #1
 8006b78:	4970      	ldr	r1, [pc, #448]	; (8006d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 f966 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0d3      	b.n	8006d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_I2C_Master_Transmit+0x50>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0cc      	b.n	8006d32 <HAL_I2C_Master_Transmit+0x1ea>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d007      	beq.n	8006bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0201 	orr.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2221      	movs	r2, #33	; 0x21
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2210      	movs	r2, #16
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	893a      	ldrh	r2, [r7, #8]
 8006bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a50      	ldr	r2, [pc, #320]	; (8006d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c00:	8979      	ldrh	r1, [r7, #10]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	6a3a      	ldr	r2, [r7, #32]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fe52 	bl	80078b0 <I2C_MasterRequestWrite>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e08d      	b.n	8006d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c2c:	e066      	b.n	8006cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	6a39      	ldr	r1, [r7, #32]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 f9e0 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d107      	bne.n	8006c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e06b      	b.n	8006d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d11b      	bne.n	8006cd0 <HAL_I2C_Master_Transmit+0x188>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d017      	beq.n	8006cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	6a39      	ldr	r1, [r7, #32]
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f001 f9d0 	bl	800807a <I2C_WaitOnBTFFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d107      	bne.n	8006cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e01a      	b.n	8006d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d194      	bne.n	8006c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e000      	b.n	8006d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d30:	2302      	movs	r3, #2
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	00100002 	.word	0x00100002
 8006d40:	ffff0000 	.word	0xffff0000

08006d44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	460b      	mov	r3, r1
 8006d52:	817b      	strh	r3, [r7, #10]
 8006d54:	4613      	mov	r3, r2
 8006d56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d5c:	f7ff f87c 	bl	8005e58 <HAL_GetTick>
 8006d60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 8238 	bne.w	80071e0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2319      	movs	r3, #25
 8006d76:	2201      	movs	r2, #1
 8006d78:	497e      	ldr	r1, [pc, #504]	; (8006f74 <HAL_I2C_Master_Receive+0x230>)
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 f866 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006d86:	2302      	movs	r3, #2
 8006d88:	e22b      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_I2C_Master_Receive+0x54>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e224      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d007      	beq.n	8006dbe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2222      	movs	r2, #34	; 0x22
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2210      	movs	r2, #16
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	893a      	ldrh	r2, [r7, #8]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a5e      	ldr	r2, [pc, #376]	; (8006f78 <HAL_I2C_Master_Receive+0x234>)
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e00:	8979      	ldrh	r1, [r7, #10]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fdd4 	bl	80079b4 <I2C_MasterRequestRead>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e1e5      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d113      	bne.n	8006e46 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e1b9      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d11d      	bne.n	8006e8a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e5e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006e86:	b662      	cpsie	i
 8006e88:	e197      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d11d      	bne.n	8006ece <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ea2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006eca:	b662      	cpsie	i
 8006ecc:	e175      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006ef4:	e161      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	f200 811a 	bhi.w	8007134 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d123      	bne.n	8006f50 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f001 f8f5 	bl	80080fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e162      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f4e:	e134      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d150      	bne.n	8006ffa <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4906      	ldr	r1, [pc, #24]	; (8006f7c <HAL_I2C_Master_Receive+0x238>)
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 ff72 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e137      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
 8006f72:	bf00      	nop
 8006f74:	00100002 	.word	0x00100002
 8006f78:	ffff0000 	.word	0xffff0000
 8006f7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006f80:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f90:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006fc4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ff8:	e0df      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2200      	movs	r2, #0
 8007002:	497a      	ldr	r1, [pc, #488]	; (80071ec <HAL_I2C_Master_Receive+0x4a8>)
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 ff21 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0e6      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007022:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007024:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007042:	3b01      	subs	r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007058:	4b65      	ldr	r3, [pc, #404]	; (80071f0 <HAL_I2C_Master_Receive+0x4ac>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	4a65      	ldr	r2, [pc, #404]	; (80071f4 <HAL_I2C_Master_Receive+0x4b0>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	0a1a      	lsrs	r2, r3, #8
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	00da      	lsls	r2, r3, #3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	3b01      	subs	r3, #1
 8007076:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d117      	bne.n	80070ae <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	f043 0220 	orr.w	r2, r3, #32
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80070a0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e099      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d1da      	bne.n	8007072 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070fe:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007132:	e042      	b.n	80071ba <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007136:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 ffdf 	bl	80080fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e04c      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d118      	bne.n	80071ba <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f47f ae99 	bne.w	8006ef6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	e000      	b.n	80071e2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80071e0:	2302      	movs	r3, #2
  }
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	00010004 	.word	0x00010004
 80071f0:	20000064 	.word	0x20000064
 80071f4:	14f8b589 	.word	0x14f8b589

080071f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4603      	mov	r3, r0
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	460b      	mov	r3, r1
 800720c:	813b      	strh	r3, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007212:	f7fe fe21 	bl	8005e58 <HAL_GetTick>
 8007216:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b20      	cmp	r3, #32
 8007222:	f040 80d9 	bne.w	80073d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2319      	movs	r3, #25
 800722c:	2201      	movs	r2, #1
 800722e:	496d      	ldr	r1, [pc, #436]	; (80073e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fe0b 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
 800723e:	e0cc      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_I2C_Mem_Write+0x56>
 800724a:	2302      	movs	r3, #2
 800724c:	e0c5      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d007      	beq.n	8007274 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2221      	movs	r2, #33	; 0x21
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a4d      	ldr	r2, [pc, #308]	; (80073e8 <HAL_I2C_Mem_Write+0x1f0>)
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072b6:	88f8      	ldrh	r0, [r7, #6]
 80072b8:	893a      	ldrh	r2, [r7, #8]
 80072ba:	8979      	ldrh	r1, [r7, #10]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	4603      	mov	r3, r0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fc42 	bl	8007b50 <I2C_RequestMemoryWrite>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d052      	beq.n	8007378 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e081      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fe8c 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d107      	bne.n	80072fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e06b      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d11b      	bne.n	8007378 <HAL_I2C_Mem_Write+0x180>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	2b00      	cmp	r3, #0
 8007346:	d017      	beq.n	8007378 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1aa      	bne.n	80072d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fe78 	bl	800807a <I2C_WaitOnBTFFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2b04      	cmp	r3, #4
 8007396:	d107      	bne.n	80073a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e016      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	00100002 	.word	0x00100002
 80073e8:	ffff0000 	.word	0xffff0000

080073ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	460b      	mov	r3, r1
 8007400:	813b      	strh	r3, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800740a:	f7fe fd25 	bl	8005e58 <HAL_GetTick>
 800740e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b20      	cmp	r3, #32
 800741a:	f040 823d 	bne.w	8007898 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2319      	movs	r3, #25
 8007424:	2201      	movs	r2, #1
 8007426:	4981      	ldr	r1, [pc, #516]	; (800762c <HAL_I2C_Mem_Read+0x240>)
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fd0f 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007434:	2302      	movs	r3, #2
 8007436:	e230      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_I2C_Mem_Read+0x5a>
 8007442:	2302      	movs	r3, #2
 8007444:	e229      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d007      	beq.n	800746c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800747a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2222      	movs	r2, #34	; 0x22
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2240      	movs	r2, #64	; 0x40
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800749c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4a61      	ldr	r2, [pc, #388]	; (8007630 <HAL_I2C_Mem_Read+0x244>)
 80074ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074ae:	88f8      	ldrh	r0, [r7, #6]
 80074b0:	893a      	ldrh	r2, [r7, #8]
 80074b2:	8979      	ldrh	r1, [r7, #10]
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fbdc 	bl	8007c7c <I2C_RequestMemoryRead>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e1e5      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d113      	bne.n	80074fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	e1b9      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11d      	bne.n	8007542 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007516:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007518:	2300      	movs	r3, #0
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800753c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800753e:	b662      	cpsie	i
 8007540:	e197      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007546:	2b02      	cmp	r3, #2
 8007548:	d11d      	bne.n	8007586 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007558:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800755a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007582:	b662      	cpsie	i
 8007584:	e175      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007594:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007596:	2300      	movs	r3, #0
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80075ac:	e161      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	f200 811a 	bhi.w	80077ec <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d123      	bne.n	8007608 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fd99 	bl	80080fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e162      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007606:	e134      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760c:	2b02      	cmp	r3, #2
 800760e:	d150      	bne.n	80076b2 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	2200      	movs	r2, #0
 8007618:	4906      	ldr	r1, [pc, #24]	; (8007634 <HAL_I2C_Mem_Read+0x248>)
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fc16 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e137      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
 800762a:	bf00      	nop
 800762c:	00100002 	.word	0x00100002
 8007630:	ffff0000 	.word	0xffff0000
 8007634:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007638:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007648:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800767c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076b0:	e0df      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	2200      	movs	r2, #0
 80076ba:	497a      	ldr	r1, [pc, #488]	; (80078a4 <HAL_I2C_Mem_Read+0x4b8>)
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fbc5 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0e6      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80076dc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007710:	4b65      	ldr	r3, [pc, #404]	; (80078a8 <HAL_I2C_Mem_Read+0x4bc>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	08db      	lsrs	r3, r3, #3
 8007716:	4a65      	ldr	r2, [pc, #404]	; (80078ac <HAL_I2C_Mem_Read+0x4c0>)
 8007718:	fba2 2303 	umull	r2, r3, r2, r3
 800771c:	0a1a      	lsrs	r2, r3, #8
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	00da      	lsls	r2, r3, #3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	3b01      	subs	r3, #1
 800772e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d117      	bne.n	8007766 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2220      	movs	r2, #32
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	f043 0220 	orr.w	r2, r3, #32
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007758:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e099      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b04      	cmp	r3, #4
 8007772:	d1da      	bne.n	800772a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077b6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077ea:	e042      	b.n	8007872 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fc83 	bl	80080fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e04c      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d118      	bne.n	8007872 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	f47f ae99 	bne.w	80075ae <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	e000      	b.n	800789a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8007898:	2302      	movs	r3, #2
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	00010004 	.word	0x00010004
 80078a8:	20000064 	.word	0x20000064
 80078ac:	14f8b589 	.word	0x14f8b589

080078b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	460b      	mov	r3, r1
 80078be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d006      	beq.n	80078da <I2C_MasterRequestWrite+0x2a>
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d003      	beq.n	80078da <I2C_MasterRequestWrite+0x2a>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078d8:	d108      	bne.n	80078ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e00b      	b.n	8007904 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	2b12      	cmp	r3, #18
 80078f2:	d107      	bne.n	8007904 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fa9b 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792a:	d103      	bne.n	8007934 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e035      	b.n	80079a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007940:	d108      	bne.n	8007954 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007942:	897b      	ldrh	r3, [r7, #10]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007950:	611a      	str	r2, [r3, #16]
 8007952:	e01b      	b.n	800798c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007954:	897b      	ldrh	r3, [r7, #10]
 8007956:	11db      	asrs	r3, r3, #7
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 0306 	and.w	r3, r3, #6
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f063 030f 	orn	r3, r3, #15
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	490e      	ldr	r1, [pc, #56]	; (80079ac <I2C_MasterRequestWrite+0xfc>)
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fac1 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e010      	b.n	80079a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	b2da      	uxtb	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4907      	ldr	r1, [pc, #28]	; (80079b0 <I2C_MasterRequestWrite+0x100>)
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fab1 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	00010008 	.word	0x00010008
 80079b0:	00010002 	.word	0x00010002

080079b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	460b      	mov	r3, r1
 80079c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d006      	beq.n	80079ee <I2C_MasterRequestRead+0x3a>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d003      	beq.n	80079ee <I2C_MasterRequestRead+0x3a>
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079ec:	d108      	bne.n	8007a00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e00b      	b.n	8007a18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	2b11      	cmp	r3, #17
 8007a06:	d107      	bne.n	8007a18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 fa11 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00d      	beq.n	8007a4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3e:	d103      	bne.n	8007a48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e079      	b.n	8007b40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a54:	d108      	bne.n	8007a68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a56:	897b      	ldrh	r3, [r7, #10]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	611a      	str	r2, [r3, #16]
 8007a66:	e05f      	b.n	8007b28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007a68:	897b      	ldrh	r3, [r7, #10]
 8007a6a:	11db      	asrs	r3, r3, #7
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f003 0306 	and.w	r3, r3, #6
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f063 030f 	orn	r3, r3, #15
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4930      	ldr	r1, [pc, #192]	; (8007b48 <I2C_MasterRequestRead+0x194>)
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa37 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e054      	b.n	8007b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007a96:	897b      	ldrh	r3, [r7, #10]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4929      	ldr	r1, [pc, #164]	; (8007b4c <I2C_MasterRequestRead+0x198>)
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fa27 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e044      	b.n	8007b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ada:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f9af 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00d      	beq.n	8007b10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b02:	d103      	bne.n	8007b0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e017      	b.n	8007b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007b10:	897b      	ldrh	r3, [r7, #10]
 8007b12:	11db      	asrs	r3, r3, #7
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	f003 0306 	and.w	r3, r3, #6
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f063 030e 	orn	r3, r3, #14
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4907      	ldr	r1, [pc, #28]	; (8007b4c <I2C_MasterRequestRead+0x198>)
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f9e3 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	00010008 	.word	0x00010008
 8007b4c:	00010002 	.word	0x00010002

08007b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	817b      	strh	r3, [r7, #10]
 8007b62:	460b      	mov	r3, r1
 8007b64:	813b      	strh	r3, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f960 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00d      	beq.n	8007bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba0:	d103      	bne.n	8007baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e05f      	b.n	8007c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bae:	897b      	ldrh	r3, [r7, #10]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	6a3a      	ldr	r2, [r7, #32]
 8007bc2:	492d      	ldr	r1, [pc, #180]	; (8007c78 <I2C_RequestMemoryWrite+0x128>)
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f998 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e04c      	b.n	8007c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	6a39      	ldr	r1, [r7, #32]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fa02 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00d      	beq.n	8007c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d107      	bne.n	8007c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e02b      	b.n	8007c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d105      	bne.n	8007c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c1c:	893b      	ldrh	r3, [r7, #8]
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	611a      	str	r2, [r3, #16]
 8007c26:	e021      	b.n	8007c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c28:	893b      	ldrh	r3, [r7, #8]
 8007c2a:	0a1b      	lsrs	r3, r3, #8
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c38:	6a39      	ldr	r1, [r7, #32]
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f9dc 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00d      	beq.n	8007c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d107      	bne.n	8007c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e005      	b.n	8007c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c62:	893b      	ldrh	r3, [r7, #8]
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	00010002 	.word	0x00010002

08007c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	817b      	strh	r3, [r7, #10]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	813b      	strh	r3, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f8c2 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00d      	beq.n	8007cea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cdc:	d103      	bne.n	8007ce6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e0aa      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cea:	897b      	ldrh	r3, [r7, #10]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	4952      	ldr	r1, [pc, #328]	; (8007e48 <I2C_RequestMemoryRead+0x1cc>)
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f8fa 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e097      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	6a39      	ldr	r1, [r7, #32]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f964 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00d      	beq.n	8007d52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d107      	bne.n	8007d4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e076      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d105      	bne.n	8007d64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d58:	893b      	ldrh	r3, [r7, #8]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	611a      	str	r2, [r3, #16]
 8007d62:	e021      	b.n	8007da8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d64:	893b      	ldrh	r3, [r7, #8]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d74:	6a39      	ldr	r1, [r7, #32]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f93e 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d107      	bne.n	8007d9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e050      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d9e:	893b      	ldrh	r3, [r7, #8]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	6a39      	ldr	r1, [r7, #32]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f923 	bl	8007ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00d      	beq.n	8007dd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d107      	bne.n	8007dd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e035      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007de2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f82b 	bl	8007e4c <I2C_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00d      	beq.n	8007e18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0a:	d103      	bne.n	8007e14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e013      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e18:	897b      	ldrh	r3, [r7, #10]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f043 0301 	orr.w	r3, r3, #1
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	6a3a      	ldr	r2, [r7, #32]
 8007e2c:	4906      	ldr	r1, [pc, #24]	; (8007e48 <I2C_RequestMemoryRead+0x1cc>)
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f863 	bl	8007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	00010002 	.word	0x00010002

08007e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e5c:	e025      	b.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e64:	d021      	beq.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e66:	f7fd fff7 	bl	8005e58 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d302      	bcc.n	8007e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d116      	bne.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f043 0220 	orr.w	r2, r3, #32
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e023      	b.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d10d      	bne.n	8007ed0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	43da      	mvns	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bf0c      	ite	eq
 8007ec6:	2301      	moveq	r3, #1
 8007ec8:	2300      	movne	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	e00c      	b.n	8007eea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	43da      	mvns	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4013      	ands	r3, r2
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf0c      	ite	eq
 8007ee2:	2301      	moveq	r3, #1
 8007ee4:	2300      	movne	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d0b6      	beq.n	8007e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f08:	e051      	b.n	8007fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f18:	d123      	bne.n	8007f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	f043 0204 	orr.w	r2, r3, #4
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e046      	b.n	8007ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f68:	d021      	beq.n	8007fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6a:	f7fd ff75 	bl	8005e58 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d302      	bcc.n	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d116      	bne.n	8007fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f043 0220 	orr.w	r2, r3, #32
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e020      	b.n	8007ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10c      	bne.n	8007fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	43da      	mvns	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bf14      	ite	ne
 8007fca:	2301      	movne	r3, #1
 8007fcc:	2300      	moveq	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	e00b      	b.n	8007fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	43da      	mvns	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bf14      	ite	ne
 8007fe4:	2301      	movne	r3, #1
 8007fe6:	2300      	moveq	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d18d      	bne.n	8007f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008004:	e02d      	b.n	8008062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f8ce 	bl	80081a8 <I2C_IsAcknowledgeFailed>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e02d      	b.n	8008072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801c:	d021      	beq.n	8008062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801e:	f7fd ff1b 	bl	8005e58 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	429a      	cmp	r2, r3
 800802c:	d302      	bcc.n	8008034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d116      	bne.n	8008062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2220      	movs	r2, #32
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f043 0220 	orr.w	r2, r3, #32
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e007      	b.n	8008072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d1ca      	bne.n	8008006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008086:	e02d      	b.n	80080e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f88d 	bl	80081a8 <I2C_IsAcknowledgeFailed>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e02d      	b.n	80080f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800809e:	d021      	beq.n	80080e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a0:	f7fd feda 	bl	8005e58 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d302      	bcc.n	80080b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d116      	bne.n	80080e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	f043 0220 	orr.w	r2, r3, #32
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e007      	b.n	80080f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d1ca      	bne.n	8008088 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008108:	e042      	b.n	8008190 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b10      	cmp	r3, #16
 8008116:	d119      	bne.n	800814c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0210 	mvn.w	r2, #16
 8008120:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e029      	b.n	80081a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814c:	f7fd fe84 	bl	8005e58 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	429a      	cmp	r2, r3
 800815a:	d302      	bcc.n	8008162 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d116      	bne.n	8008190 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	f043 0220 	orr.w	r2, r3, #32
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e007      	b.n	80081a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819a:	2b40      	cmp	r3, #64	; 0x40
 800819c:	d1b5      	bne.n	800810a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081be:	d11b      	bne.n	80081f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	f043 0204 	orr.w	r2, r3, #4
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e000      	b.n	80081fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e26c      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8087 	beq.w	8008332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008224:	4b92      	ldr	r3, [pc, #584]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f003 030c 	and.w	r3, r3, #12
 800822c:	2b04      	cmp	r3, #4
 800822e:	d00c      	beq.n	800824a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008230:	4b8f      	ldr	r3, [pc, #572]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f003 030c 	and.w	r3, r3, #12
 8008238:	2b08      	cmp	r3, #8
 800823a:	d112      	bne.n	8008262 <HAL_RCC_OscConfig+0x5e>
 800823c:	4b8c      	ldr	r3, [pc, #560]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008248:	d10b      	bne.n	8008262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824a:	4b89      	ldr	r3, [pc, #548]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d06c      	beq.n	8008330 <HAL_RCC_OscConfig+0x12c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d168      	bne.n	8008330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e246      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826a:	d106      	bne.n	800827a <HAL_RCC_OscConfig+0x76>
 800826c:	4b80      	ldr	r3, [pc, #512]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a7f      	ldr	r2, [pc, #508]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e02e      	b.n	80082d8 <HAL_RCC_OscConfig+0xd4>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10c      	bne.n	800829c <HAL_RCC_OscConfig+0x98>
 8008282:	4b7b      	ldr	r3, [pc, #492]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a7a      	ldr	r2, [pc, #488]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	4b78      	ldr	r3, [pc, #480]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a77      	ldr	r2, [pc, #476]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e01d      	b.n	80082d8 <HAL_RCC_OscConfig+0xd4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCC_OscConfig+0xbc>
 80082a6:	4b72      	ldr	r3, [pc, #456]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a71      	ldr	r2, [pc, #452]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	4b6f      	ldr	r3, [pc, #444]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a6e      	ldr	r2, [pc, #440]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e00b      	b.n	80082d8 <HAL_RCC_OscConfig+0xd4>
 80082c0:	4b6b      	ldr	r3, [pc, #428]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a6a      	ldr	r2, [pc, #424]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	4b68      	ldr	r3, [pc, #416]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a67      	ldr	r2, [pc, #412]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e0:	f7fd fdba 	bl	8005e58 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082e8:	f7fd fdb6 	bl	8005e58 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b64      	cmp	r3, #100	; 0x64
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e1fa      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082fa:	4b5d      	ldr	r3, [pc, #372]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0f0      	beq.n	80082e8 <HAL_RCC_OscConfig+0xe4>
 8008306:	e014      	b.n	8008332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008308:	f7fd fda6 	bl	8005e58 <HAL_GetTick>
 800830c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800830e:	e008      	b.n	8008322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008310:	f7fd fda2 	bl	8005e58 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b64      	cmp	r3, #100	; 0x64
 800831c:	d901      	bls.n	8008322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e1e6      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008322:	4b53      	ldr	r3, [pc, #332]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1f0      	bne.n	8008310 <HAL_RCC_OscConfig+0x10c>
 800832e:	e000      	b.n	8008332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d063      	beq.n	8008406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800833e:	4b4c      	ldr	r3, [pc, #304]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f003 030c 	and.w	r3, r3, #12
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00b      	beq.n	8008362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800834a:	4b49      	ldr	r3, [pc, #292]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f003 030c 	and.w	r3, r3, #12
 8008352:	2b08      	cmp	r3, #8
 8008354:	d11c      	bne.n	8008390 <HAL_RCC_OscConfig+0x18c>
 8008356:	4b46      	ldr	r3, [pc, #280]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d116      	bne.n	8008390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008362:	4b43      	ldr	r3, [pc, #268]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_RCC_OscConfig+0x176>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e1ba      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800837a:	4b3d      	ldr	r3, [pc, #244]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4939      	ldr	r1, [pc, #228]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800838a:	4313      	orrs	r3, r2
 800838c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800838e:	e03a      	b.n	8008406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d020      	beq.n	80083da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008398:	4b36      	ldr	r3, [pc, #216]	; (8008474 <HAL_RCC_OscConfig+0x270>)
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839e:	f7fd fd5b 	bl	8005e58 <HAL_GetTick>
 80083a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083a6:	f7fd fd57 	bl	8005e58 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e19b      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083b8:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c4:	4b2a      	ldr	r3, [pc, #168]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4927      	ldr	r1, [pc, #156]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]
 80083d8:	e015      	b.n	8008406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083da:	4b26      	ldr	r3, [pc, #152]	; (8008474 <HAL_RCC_OscConfig+0x270>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7fd fd3a 	bl	8005e58 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083e8:	f7fd fd36 	bl	8005e58 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e17a      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083fa:	4b1d      	ldr	r3, [pc, #116]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d03a      	beq.n	8008488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d019      	beq.n	800844e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800841a:	4b17      	ldr	r3, [pc, #92]	; (8008478 <HAL_RCC_OscConfig+0x274>)
 800841c:	2201      	movs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008420:	f7fd fd1a 	bl	8005e58 <HAL_GetTick>
 8008424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008428:	f7fd fd16 	bl	8005e58 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e15a      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800843a:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <HAL_RCC_OscConfig+0x26c>)
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008446:	2001      	movs	r0, #1
 8008448:	f000 fada 	bl	8008a00 <RCC_Delay>
 800844c:	e01c      	b.n	8008488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800844e:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <HAL_RCC_OscConfig+0x274>)
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008454:	f7fd fd00 	bl	8005e58 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800845a:	e00f      	b.n	800847c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800845c:	f7fd fcfc 	bl	8005e58 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d908      	bls.n	800847c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e140      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
 800846e:	bf00      	nop
 8008470:	40021000 	.word	0x40021000
 8008474:	42420000 	.word	0x42420000
 8008478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800847c:	4b9e      	ldr	r3, [pc, #632]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e9      	bne.n	800845c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80a6 	beq.w	80085e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800849a:	4b97      	ldr	r3, [pc, #604]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10d      	bne.n	80084c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084a6:	4b94      	ldr	r3, [pc, #592]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	4a93      	ldr	r2, [pc, #588]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80084ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b0:	61d3      	str	r3, [r2, #28]
 80084b2:	4b91      	ldr	r3, [pc, #580]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084be:	2301      	movs	r3, #1
 80084c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084c2:	4b8e      	ldr	r3, [pc, #568]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d118      	bne.n	8008500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084ce:	4b8b      	ldr	r3, [pc, #556]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a8a      	ldr	r2, [pc, #552]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084da:	f7fd fcbd 	bl	8005e58 <HAL_GetTick>
 80084de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e2:	f7fd fcb9 	bl	8005e58 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b64      	cmp	r3, #100	; 0x64
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e0fd      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f4:	4b81      	ldr	r3, [pc, #516]	; (80086fc <HAL_RCC_OscConfig+0x4f8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f0      	beq.n	80084e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d106      	bne.n	8008516 <HAL_RCC_OscConfig+0x312>
 8008508:	4b7b      	ldr	r3, [pc, #492]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	4a7a      	ldr	r2, [pc, #488]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	6213      	str	r3, [r2, #32]
 8008514:	e02d      	b.n	8008572 <HAL_RCC_OscConfig+0x36e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10c      	bne.n	8008538 <HAL_RCC_OscConfig+0x334>
 800851e:	4b76      	ldr	r3, [pc, #472]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	4a75      	ldr	r2, [pc, #468]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008524:	f023 0301 	bic.w	r3, r3, #1
 8008528:	6213      	str	r3, [r2, #32]
 800852a:	4b73      	ldr	r3, [pc, #460]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	4a72      	ldr	r2, [pc, #456]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008530:	f023 0304 	bic.w	r3, r3, #4
 8008534:	6213      	str	r3, [r2, #32]
 8008536:	e01c      	b.n	8008572 <HAL_RCC_OscConfig+0x36e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b05      	cmp	r3, #5
 800853e:	d10c      	bne.n	800855a <HAL_RCC_OscConfig+0x356>
 8008540:	4b6d      	ldr	r3, [pc, #436]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	4a6c      	ldr	r2, [pc, #432]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008546:	f043 0304 	orr.w	r3, r3, #4
 800854a:	6213      	str	r3, [r2, #32]
 800854c:	4b6a      	ldr	r3, [pc, #424]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	4a69      	ldr	r2, [pc, #420]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	6213      	str	r3, [r2, #32]
 8008558:	e00b      	b.n	8008572 <HAL_RCC_OscConfig+0x36e>
 800855a:	4b67      	ldr	r3, [pc, #412]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	4a66      	ldr	r2, [pc, #408]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008560:	f023 0301 	bic.w	r3, r3, #1
 8008564:	6213      	str	r3, [r2, #32]
 8008566:	4b64      	ldr	r3, [pc, #400]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	4a63      	ldr	r2, [pc, #396]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800856c:	f023 0304 	bic.w	r3, r3, #4
 8008570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d015      	beq.n	80085a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800857a:	f7fd fc6d 	bl	8005e58 <HAL_GetTick>
 800857e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008580:	e00a      	b.n	8008598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008582:	f7fd fc69 	bl	8005e58 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008590:	4293      	cmp	r3, r2
 8008592:	d901      	bls.n	8008598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e0ab      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008598:	4b57      	ldr	r3, [pc, #348]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0ee      	beq.n	8008582 <HAL_RCC_OscConfig+0x37e>
 80085a4:	e014      	b.n	80085d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085a6:	f7fd fc57 	bl	8005e58 <HAL_GetTick>
 80085aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085ac:	e00a      	b.n	80085c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ae:	f7fd fc53 	bl	8005e58 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085bc:	4293      	cmp	r3, r2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e095      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c4:	4b4c      	ldr	r3, [pc, #304]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ee      	bne.n	80085ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d105      	bne.n	80085e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085d6:	4b48      	ldr	r3, [pc, #288]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	4a47      	ldr	r2, [pc, #284]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80085dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 8081 	beq.w	80086ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085ec:	4b42      	ldr	r3, [pc, #264]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f003 030c 	and.w	r3, r3, #12
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d061      	beq.n	80086bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d146      	bne.n	800868e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008600:	4b3f      	ldr	r3, [pc, #252]	; (8008700 <HAL_RCC_OscConfig+0x4fc>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008606:	f7fd fc27 	bl	8005e58 <HAL_GetTick>
 800860a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800860c:	e008      	b.n	8008620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800860e:	f7fd fc23 	bl	8005e58 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d901      	bls.n	8008620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e067      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008620:	4b35      	ldr	r3, [pc, #212]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f0      	bne.n	800860e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008634:	d108      	bne.n	8008648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008636:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	492d      	ldr	r1, [pc, #180]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008644:	4313      	orrs	r3, r2
 8008646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008648:	4b2b      	ldr	r3, [pc, #172]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a19      	ldr	r1, [r3, #32]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	430b      	orrs	r3, r1
 800865a:	4927      	ldr	r1, [pc, #156]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 800865c:	4313      	orrs	r3, r2
 800865e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008660:	4b27      	ldr	r3, [pc, #156]	; (8008700 <HAL_RCC_OscConfig+0x4fc>)
 8008662:	2201      	movs	r2, #1
 8008664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008666:	f7fd fbf7 	bl	8005e58 <HAL_GetTick>
 800866a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800866c:	e008      	b.n	8008680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800866e:	f7fd fbf3 	bl	8005e58 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e037      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008680:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0f0      	beq.n	800866e <HAL_RCC_OscConfig+0x46a>
 800868c:	e02f      	b.n	80086ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800868e:	4b1c      	ldr	r3, [pc, #112]	; (8008700 <HAL_RCC_OscConfig+0x4fc>)
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008694:	f7fd fbe0 	bl	8005e58 <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800869c:	f7fd fbdc 	bl	8005e58 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e020      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f0      	bne.n	800869c <HAL_RCC_OscConfig+0x498>
 80086ba:	e018      	b.n	80086ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e013      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <HAL_RCC_OscConfig+0x4f4>)
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d106      	bne.n	80086ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d001      	beq.n	80086ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40021000 	.word	0x40021000
 80086fc:	40007000 	.word	0x40007000
 8008700:	42420060 	.word	0x42420060

08008704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0d0      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008718:	4b6a      	ldr	r3, [pc, #424]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d910      	bls.n	8008748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008726:	4b67      	ldr	r3, [pc, #412]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f023 0207 	bic.w	r2, r3, #7
 800872e:	4965      	ldr	r1, [pc, #404]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	4313      	orrs	r3, r2
 8008734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008736:	4b63      	ldr	r3, [pc, #396]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d001      	beq.n	8008748 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e0b8      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d020      	beq.n	8008796 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008760:	4b59      	ldr	r3, [pc, #356]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4a58      	ldr	r2, [pc, #352]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800876a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008778:	4b53      	ldr	r3, [pc, #332]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4a52      	ldr	r2, [pc, #328]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 800877e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008782:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008784:	4b50      	ldr	r3, [pc, #320]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	494d      	ldr	r1, [pc, #308]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008792:	4313      	orrs	r3, r2
 8008794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d040      	beq.n	8008824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d107      	bne.n	80087ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087aa:	4b47      	ldr	r3, [pc, #284]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d115      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e07f      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d107      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c2:	4b41      	ldr	r3, [pc, #260]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e073      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087d2:	4b3d      	ldr	r3, [pc, #244]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e06b      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087e2:	4b39      	ldr	r3, [pc, #228]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f023 0203 	bic.w	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	4936      	ldr	r1, [pc, #216]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087f4:	f7fd fb30 	bl	8005e58 <HAL_GetTick>
 80087f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087fc:	f7fd fb2c 	bl	8005e58 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e053      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008812:	4b2d      	ldr	r3, [pc, #180]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f003 020c 	and.w	r2, r3, #12
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	429a      	cmp	r2, r3
 8008822:	d1eb      	bne.n	80087fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008824:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d210      	bcs.n	8008854 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008832:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 0207 	bic.w	r2, r3, #7
 800883a:	4922      	ldr	r1, [pc, #136]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	4313      	orrs	r3, r2
 8008840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008842:	4b20      	ldr	r3, [pc, #128]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d001      	beq.n	8008854 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e032      	b.n	80088ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008860:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	4916      	ldr	r1, [pc, #88]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 800886e:	4313      	orrs	r3, r2
 8008870:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800887e:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	490e      	ldr	r1, [pc, #56]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 800888e:	4313      	orrs	r3, r2
 8008890:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008892:	f000 f821 	bl	80088d8 <HAL_RCC_GetSysClockFreq>
 8008896:	4601      	mov	r1, r0
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	4a0a      	ldr	r2, [pc, #40]	; (80088cc <HAL_RCC_ClockConfig+0x1c8>)
 80088a4:	5cd3      	ldrb	r3, [r2, r3]
 80088a6:	fa21 f303 	lsr.w	r3, r1, r3
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <HAL_RCC_ClockConfig+0x1cc>)
 80088ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80088ae:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <HAL_RCC_ClockConfig+0x1d0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fd fa8e 	bl	8005dd4 <HAL_InitTick>

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40022000 	.word	0x40022000
 80088c8:	40021000 	.word	0x40021000
 80088cc:	0800ee0c 	.word	0x0800ee0c
 80088d0:	20000064 	.word	0x20000064
 80088d4:	20000068 	.word	0x20000068

080088d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d8:	b490      	push	{r4, r7}
 80088da:	b08a      	sub	sp, #40	; 0x28
 80088dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80088de:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <HAL_RCC_GetSysClockFreq+0xb0>)
 80088e0:	1d3c      	adds	r4, r7, #4
 80088e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80088e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80088e8:	4b28      	ldr	r3, [pc, #160]	; (800898c <HAL_RCC_GetSysClockFreq+0xb4>)
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
 80088f2:	2300      	movs	r3, #0
 80088f4:	61bb      	str	r3, [r7, #24]
 80088f6:	2300      	movs	r3, #0
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008902:	4b23      	ldr	r3, [pc, #140]	; (8008990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	f003 030c 	and.w	r3, r3, #12
 800890e:	2b04      	cmp	r3, #4
 8008910:	d002      	beq.n	8008918 <HAL_RCC_GetSysClockFreq+0x40>
 8008912:	2b08      	cmp	r3, #8
 8008914:	d003      	beq.n	800891e <HAL_RCC_GetSysClockFreq+0x46>
 8008916:	e02d      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008918:	4b1e      	ldr	r3, [pc, #120]	; (8008994 <HAL_RCC_GetSysClockFreq+0xbc>)
 800891a:	623b      	str	r3, [r7, #32]
      break;
 800891c:	e02d      	b.n	800897a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	0c9b      	lsrs	r3, r3, #18
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800892a:	4413      	add	r3, r2
 800892c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008930:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d013      	beq.n	8008964 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800893c:	4b14      	ldr	r3, [pc, #80]	; (8008990 <HAL_RCC_GetSysClockFreq+0xb8>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	0c5b      	lsrs	r3, r3, #17
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800894a:	4413      	add	r3, r2
 800894c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008950:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	4a0f      	ldr	r2, [pc, #60]	; (8008994 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008956:	fb02 f203 	mul.w	r2, r2, r3
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
 8008962:	e004      	b.n	800896e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	4a0c      	ldr	r2, [pc, #48]	; (8008998 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	623b      	str	r3, [r7, #32]
      break;
 8008972:	e002      	b.n	800897a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008974:	4b07      	ldr	r3, [pc, #28]	; (8008994 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008976:	623b      	str	r3, [r7, #32]
      break;
 8008978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800897a:	6a3b      	ldr	r3, [r7, #32]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3728      	adds	r7, #40	; 0x28
 8008980:	46bd      	mov	sp, r7
 8008982:	bc90      	pop	{r4, r7}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	0800e68c 	.word	0x0800e68c
 800898c:	0800e69c 	.word	0x0800e69c
 8008990:	40021000 	.word	0x40021000
 8008994:	007a1200 	.word	0x007a1200
 8008998:	003d0900 	.word	0x003d0900

0800899c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089a0:	4b02      	ldr	r3, [pc, #8]	; (80089ac <HAL_RCC_GetHCLKFreq+0x10>)
 80089a2:	681b      	ldr	r3, [r3, #0]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr
 80089ac:	20000064 	.word	0x20000064

080089b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80089b4:	f7ff fff2 	bl	800899c <HAL_RCC_GetHCLKFreq>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	0a1b      	lsrs	r3, r3, #8
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	4a03      	ldr	r2, [pc, #12]	; (80089d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089c6:	5cd3      	ldrb	r3, [r2, r3]
 80089c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40021000 	.word	0x40021000
 80089d4:	0800ee1c 	.word	0x0800ee1c

080089d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80089dc:	f7ff ffde 	bl	800899c <HAL_RCC_GetHCLKFreq>
 80089e0:	4601      	mov	r1, r0
 80089e2:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	0adb      	lsrs	r3, r3, #11
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	4a03      	ldr	r2, [pc, #12]	; (80089fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ee:	5cd3      	ldrb	r3, [r2, r3]
 80089f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	40021000 	.word	0x40021000
 80089fc:	0800ee1c 	.word	0x0800ee1c

08008a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008a08:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <RCC_Delay+0x34>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a0a      	ldr	r2, [pc, #40]	; (8008a38 <RCC_Delay+0x38>)
 8008a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a12:	0a5b      	lsrs	r3, r3, #9
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	fb02 f303 	mul.w	r3, r2, r3
 8008a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008a1c:	bf00      	nop
  }
  while (Delay --);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1e5a      	subs	r2, r3, #1
 8008a22:	60fa      	str	r2, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1f9      	bne.n	8008a1c <RCC_Delay+0x1c>
}
 8008a28:	bf00      	nop
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	20000064 	.word	0x20000064
 8008a38:	10624dd3 	.word	0x10624dd3

08008a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e076      	b.n	8008b3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d108      	bne.n	8008a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a5e:	d009      	beq.n	8008a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	61da      	str	r2, [r3, #28]
 8008a66:	e005      	b.n	8008a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fc fe6c 	bl	800576c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af8:	ea42 0103 	orr.w	r1, r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	0c1a      	lsrs	r2, r3, #16
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f002 0204 	and.w	r2, r2, #4
 8008b1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69da      	ldr	r2, [r3, #28]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <HAL_SPI_Transmit+0x22>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e126      	b.n	8008db4 <HAL_SPI_Transmit+0x270>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b6e:	f7fd f973 	bl	8005e58 <HAL_GetTick>
 8008b72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d002      	beq.n	8008b8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b84:	2302      	movs	r3, #2
 8008b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b88:	e10b      	b.n	8008da2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <HAL_SPI_Transmit+0x52>
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b9a:	e102      	b.n	8008da2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be2:	d10f      	bne.n	8008c04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d007      	beq.n	8008c22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c2a:	d14b      	bne.n	8008cc4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <HAL_SPI_Transmit+0xf6>
 8008c34:	8afb      	ldrh	r3, [r7, #22]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d13e      	bne.n	8008cb8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	881a      	ldrh	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4a:	1c9a      	adds	r2, r3, #2
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c5e:	e02b      	b.n	8008cb8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d112      	bne.n	8008c94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	881a      	ldrh	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	1c9a      	adds	r2, r3, #2
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c92:	e011      	b.n	8008cb8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c94:	f7fd f8e0 	bl	8005e58 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d803      	bhi.n	8008cac <HAL_SPI_Transmit+0x168>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008caa:	d102      	bne.n	8008cb2 <HAL_SPI_Transmit+0x16e>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cb6:	e074      	b.n	8008da2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1ce      	bne.n	8008c60 <HAL_SPI_Transmit+0x11c>
 8008cc2:	e04c      	b.n	8008d5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <HAL_SPI_Transmit+0x18e>
 8008ccc:	8afb      	ldrh	r3, [r7, #22]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d140      	bne.n	8008d54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	7812      	ldrb	r2, [r2, #0]
 8008cde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008cf8:	e02c      	b.n	8008d54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d113      	bne.n	8008d30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	330c      	adds	r3, #12
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d2e:	e011      	b.n	8008d54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d30:	f7fd f892 	bl	8005e58 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d803      	bhi.n	8008d48 <HAL_SPI_Transmit+0x204>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d46:	d102      	bne.n	8008d4e <HAL_SPI_Transmit+0x20a>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d102      	bne.n	8008d54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d52:	e026      	b.n	8008da2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1cd      	bne.n	8008cfa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fbb8 	bl	80094d8 <SPI_EndRxTxTransaction>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	77fb      	strb	r3, [r7, #31]
 8008d9e:	e000      	b.n	8008da2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008da0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dd8:	d112      	bne.n	8008e00 <HAL_SPI_Receive+0x44>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10e      	bne.n	8008e00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2204      	movs	r2, #4
 8008de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 f8f1 	bl	8008fde <HAL_SPI_TransmitReceive>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	e0ea      	b.n	8008fd6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_SPI_Receive+0x52>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e0e3      	b.n	8008fd6 <HAL_SPI_Receive+0x21a>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e16:	f7fd f81f 	bl	8005e58 <HAL_GetTick>
 8008e1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d002      	beq.n	8008e2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e2c:	e0ca      	b.n	8008fc4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_SPI_Receive+0x7e>
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e3e:	e0c1      	b.n	8008fc4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2204      	movs	r2, #4
 8008e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	88fa      	ldrh	r2, [r7, #6]
 8008e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	88fa      	ldrh	r2, [r7, #6]
 8008e5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e86:	d10f      	bne.n	8008ea8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ea6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d007      	beq.n	8008ec6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d162      	bne.n	8008f94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ece:	e02e      	b.n	8008f2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d115      	bne.n	8008f0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f103 020c 	add.w	r2, r3, #12
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	7812      	ldrb	r2, [r2, #0]
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f08:	e011      	b.n	8008f2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f0a:	f7fc ffa5 	bl	8005e58 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d803      	bhi.n	8008f22 <HAL_SPI_Receive+0x166>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f20:	d102      	bne.n	8008f28 <HAL_SPI_Receive+0x16c>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f2c:	e04a      	b.n	8008fc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1cb      	bne.n	8008ed0 <HAL_SPI_Receive+0x114>
 8008f38:	e031      	b.n	8008f9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d113      	bne.n	8008f70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	b292      	uxth	r2, r2
 8008f54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5a:	1c9a      	adds	r2, r3, #2
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f6e:	e011      	b.n	8008f94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f70:	f7fc ff72 	bl	8005e58 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d803      	bhi.n	8008f88 <HAL_SPI_Receive+0x1cc>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f86:	d102      	bne.n	8008f8e <HAL_SPI_Receive+0x1d2>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d102      	bne.n	8008f94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f92:	e017      	b.n	8008fc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1cd      	bne.n	8008f3a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fa46 	bl	8009434 <SPI_EndRxTransaction>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	75fb      	strb	r3, [r7, #23]
 8008fc0:	e000      	b.n	8008fc4 <HAL_SPI_Receive+0x208>
  }

error :
 8008fc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b08c      	sub	sp, #48	; 0x30
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fec:	2301      	movs	r3, #1
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_SPI_TransmitReceive+0x26>
 8009000:	2302      	movs	r3, #2
 8009002:	e18a      	b.n	800931a <HAL_SPI_TransmitReceive+0x33c>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800900c:	f7fc ff24 	bl	8005e58 <HAL_GetTick>
 8009010:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009022:	887b      	ldrh	r3, [r7, #2]
 8009024:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800902a:	2b01      	cmp	r3, #1
 800902c:	d00f      	beq.n	800904e <HAL_SPI_TransmitReceive+0x70>
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009034:	d107      	bne.n	8009046 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <HAL_SPI_TransmitReceive+0x68>
 800903e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009042:	2b04      	cmp	r3, #4
 8009044:	d003      	beq.n	800904e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009046:	2302      	movs	r3, #2
 8009048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800904c:	e15b      	b.n	8009306 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x82>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x82>
 800905a:	887b      	ldrh	r3, [r7, #2]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d103      	bne.n	8009068 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009066:	e14e      	b.n	8009306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b04      	cmp	r3, #4
 8009072:	d003      	beq.n	800907c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2205      	movs	r2, #5
 8009078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	887a      	ldrh	r2, [r7, #2]
 800908c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	887a      	ldrh	r2, [r7, #2]
 8009092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	887a      	ldrh	r2, [r7, #2]
 800909e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	887a      	ldrh	r2, [r7, #2]
 80090a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090bc:	2b40      	cmp	r3, #64	; 0x40
 80090be:	d007      	beq.n	80090d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d8:	d178      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_SPI_TransmitReceive+0x10a>
 80090e2:	8b7b      	ldrh	r3, [r7, #26]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d166      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	881a      	ldrh	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	1c9a      	adds	r2, r3, #2
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009102:	b29b      	uxth	r3, r3
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800910c:	e053      	b.n	80091b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b02      	cmp	r3, #2
 800911a:	d11b      	bne.n	8009154 <HAL_SPI_TransmitReceive+0x176>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d016      	beq.n	8009154 <HAL_SPI_TransmitReceive+0x176>
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	2b01      	cmp	r3, #1
 800912a:	d113      	bne.n	8009154 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	881a      	ldrh	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	1c9a      	adds	r2, r3, #2
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009146:	b29b      	uxth	r3, r3
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b01      	cmp	r3, #1
 8009160:	d119      	bne.n	8009196 <HAL_SPI_TransmitReceive+0x1b8>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d014      	beq.n	8009196 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009176:	b292      	uxth	r2, r2
 8009178:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	1c9a      	adds	r2, r3, #2
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009192:	2301      	movs	r3, #1
 8009194:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009196:	f7fc fe5f 	bl	8005e58 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d807      	bhi.n	80091b6 <HAL_SPI_TransmitReceive+0x1d8>
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ac:	d003      	beq.n	80091b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091b4:	e0a7      	b.n	8009306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1a6      	bne.n	800910e <HAL_SPI_TransmitReceive+0x130>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1a1      	bne.n	800910e <HAL_SPI_TransmitReceive+0x130>
 80091ca:	e07c      	b.n	80092c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <HAL_SPI_TransmitReceive+0x1fc>
 80091d4:	8b7b      	ldrh	r3, [r7, #26]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d16b      	bne.n	80092b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	7812      	ldrb	r2, [r2, #0]
 80091e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009200:	e057      	b.n	80092b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b02      	cmp	r3, #2
 800920e:	d11c      	bne.n	800924a <HAL_SPI_TransmitReceive+0x26c>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d017      	beq.n	800924a <HAL_SPI_TransmitReceive+0x26c>
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	2b01      	cmp	r3, #1
 800921e:	d114      	bne.n	800924a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	330c      	adds	r3, #12
 800922a:	7812      	ldrb	r2, [r2, #0]
 800922c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d119      	bne.n	800928c <HAL_SPI_TransmitReceive+0x2ae>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d014      	beq.n	800928c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	b2d2      	uxtb	r2, r2
 800926e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009288:	2301      	movs	r3, #1
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800928c:	f7fc fde4 	bl	8005e58 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009298:	429a      	cmp	r2, r3
 800929a:	d803      	bhi.n	80092a4 <HAL_SPI_TransmitReceive+0x2c6>
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a2:	d102      	bne.n	80092aa <HAL_SPI_TransmitReceive+0x2cc>
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092b0:	e029      	b.n	8009306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1a2      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x224>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d19d      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f904 	bl	80094d8 <SPI_EndRxTxTransaction>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2220      	movs	r2, #32
 80092e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80092e2:	e010      	b.n	8009306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10b      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	e000      	b.n	8009306 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009304:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800931a:	4618      	mov	r0, r3
 800931c:	3730      	adds	r7, #48	; 0x30
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009334:	f7fc fd90 	bl	8005e58 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4413      	add	r3, r2
 8009342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009344:	f7fc fd88 	bl	8005e58 <HAL_GetTick>
 8009348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800934a:	4b39      	ldr	r3, [pc, #228]	; (8009430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	015b      	lsls	r3, r3, #5
 8009350:	0d1b      	lsrs	r3, r3, #20
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	fb02 f303 	mul.w	r3, r2, r3
 8009358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800935a:	e054      	b.n	8009406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009362:	d050      	beq.n	8009406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009364:	f7fc fd78 	bl	8005e58 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	429a      	cmp	r2, r3
 8009372:	d902      	bls.n	800937a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d13d      	bne.n	80093f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009392:	d111      	bne.n	80093b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800939c:	d004      	beq.n	80093a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a6:	d107      	bne.n	80093b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c0:	d10f      	bne.n	80093e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e017      	b.n	8009426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	3b01      	subs	r3, #1
 8009404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4013      	ands	r3, r2
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	429a      	cmp	r2, r3
 8009414:	bf0c      	ite	eq
 8009416:	2301      	moveq	r3, #1
 8009418:	2300      	movne	r3, #0
 800941a:	b2db      	uxtb	r3, r3
 800941c:	461a      	mov	r2, r3
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	429a      	cmp	r2, r3
 8009422:	d19b      	bne.n	800935c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000064 	.word	0x20000064

08009434 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af02      	add	r7, sp, #8
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009448:	d111      	bne.n	800946e <SPI_EndRxTransaction+0x3a>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009452:	d004      	beq.n	800945e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800945c:	d107      	bne.n	800946e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800946c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009476:	d117      	bne.n	80094a8 <SPI_EndRxTransaction+0x74>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009480:	d112      	bne.n	80094a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2200      	movs	r2, #0
 800948a:	2101      	movs	r1, #1
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff ff49 	bl	8009324 <SPI_WaitFlagStateUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01a      	beq.n	80094ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e013      	b.n	80094d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff ff36 	bl	8009324 <SPI_WaitFlagStateUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c2:	f043 0220 	orr.w	r2, r3, #32
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e000      	b.n	80094d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2200      	movs	r2, #0
 80094ec:	2180      	movs	r1, #128	; 0x80
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff ff18 	bl	8009324 <SPI_WaitFlagStateUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d007      	beq.n	800950a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fe:	f043 0220 	orr.w	r2, r3, #32
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e000      	b.n	800950c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e041      	b.n	80095aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fc f962 	bl	8005804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f000 fa9e 	bl	8009a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e041      	b.n	8009648 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f839 	bl	8009650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2202      	movs	r2, #2
 80095e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f000 fa4f 	bl	8009a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr
	...

08009664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <HAL_TIM_PWM_Start+0x24>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	bf14      	ite	ne
 8009680:	2301      	movne	r3, #1
 8009682:	2300      	moveq	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	e022      	b.n	80096ce <HAL_TIM_PWM_Start+0x6a>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b04      	cmp	r3, #4
 800968c:	d109      	bne.n	80096a2 <HAL_TIM_PWM_Start+0x3e>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b01      	cmp	r3, #1
 8009698:	bf14      	ite	ne
 800969a:	2301      	movne	r3, #1
 800969c:	2300      	moveq	r3, #0
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	e015      	b.n	80096ce <HAL_TIM_PWM_Start+0x6a>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d109      	bne.n	80096bc <HAL_TIM_PWM_Start+0x58>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	bf14      	ite	ne
 80096b4:	2301      	movne	r3, #1
 80096b6:	2300      	moveq	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	e008      	b.n	80096ce <HAL_TIM_PWM_Start+0x6a>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	bf14      	ite	ne
 80096c8:	2301      	movne	r3, #1
 80096ca:	2300      	moveq	r3, #0
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e05e      	b.n	8009794 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <HAL_TIM_PWM_Start+0x82>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096e4:	e013      	b.n	800970e <HAL_TIM_PWM_Start+0xaa>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d104      	bne.n	80096f6 <HAL_TIM_PWM_Start+0x92>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096f4:	e00b      	b.n	800970e <HAL_TIM_PWM_Start+0xaa>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d104      	bne.n	8009706 <HAL_TIM_PWM_Start+0xa2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009704:	e003      	b.n	800970e <HAL_TIM_PWM_Start+0xaa>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2201      	movs	r2, #1
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fc3c 	bl	8009f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a1e      	ldr	r2, [pc, #120]	; (800979c <HAL_TIM_PWM_Start+0x138>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d107      	bne.n	8009736 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a18      	ldr	r2, [pc, #96]	; (800979c <HAL_TIM_PWM_Start+0x138>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d00e      	beq.n	800975e <HAL_TIM_PWM_Start+0xfa>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d009      	beq.n	800975e <HAL_TIM_PWM_Start+0xfa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a14      	ldr	r2, [pc, #80]	; (80097a0 <HAL_TIM_PWM_Start+0x13c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_TIM_PWM_Start+0xfa>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a12      	ldr	r2, [pc, #72]	; (80097a4 <HAL_TIM_PWM_Start+0x140>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d111      	bne.n	8009782 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b06      	cmp	r3, #6
 800976e:	d010      	beq.n	8009792 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0201 	orr.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009780:	e007      	b.n	8009792 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0201 	orr.w	r2, r2, #1
 8009790:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40012c00 	.word	0x40012c00
 80097a0:	40000400 	.word	0x40000400
 80097a4:	40000800 	.word	0x40000800

080097a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d101      	bne.n	80097c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80097be:	2302      	movs	r3, #2
 80097c0:	e0ac      	b.n	800991c <HAL_TIM_PWM_ConfigChannel+0x174>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b0c      	cmp	r3, #12
 80097ce:	f200 809f 	bhi.w	8009910 <HAL_TIM_PWM_ConfigChannel+0x168>
 80097d2:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	0800980d 	.word	0x0800980d
 80097dc:	08009911 	.word	0x08009911
 80097e0:	08009911 	.word	0x08009911
 80097e4:	08009911 	.word	0x08009911
 80097e8:	0800984d 	.word	0x0800984d
 80097ec:	08009911 	.word	0x08009911
 80097f0:	08009911 	.word	0x08009911
 80097f4:	08009911 	.word	0x08009911
 80097f8:	0800988f 	.word	0x0800988f
 80097fc:	08009911 	.word	0x08009911
 8009800:	08009911 	.word	0x08009911
 8009804:	08009911 	.word	0x08009911
 8009808:	080098cf 	.word	0x080098cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f9a0 	bl	8009b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	699a      	ldr	r2, [r3, #24]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0208 	orr.w	r2, r2, #8
 8009826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0204 	bic.w	r2, r2, #4
 8009836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6999      	ldr	r1, [r3, #24]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	619a      	str	r2, [r3, #24]
      break;
 800984a:	e062      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f9e6 	bl	8009c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699a      	ldr	r2, [r3, #24]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6999      	ldr	r1, [r3, #24]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	021a      	lsls	r2, r3, #8
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	619a      	str	r2, [r3, #24]
      break;
 800988c:	e041      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 fa2f 	bl	8009cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69da      	ldr	r2, [r3, #28]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f042 0208 	orr.w	r2, r2, #8
 80098a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69da      	ldr	r2, [r3, #28]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 0204 	bic.w	r2, r2, #4
 80098b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69d9      	ldr	r1, [r3, #28]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	691a      	ldr	r2, [r3, #16]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	61da      	str	r2, [r3, #28]
      break;
 80098cc:	e021      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fa79 	bl	8009dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	69da      	ldr	r2, [r3, #28]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69d9      	ldr	r1, [r3, #28]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	021a      	lsls	r2, r3, #8
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	61da      	str	r2, [r3, #28]
      break;
 800990e:	e000      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_TIM_ConfigClockSource+0x18>
 8009938:	2302      	movs	r3, #2
 800993a:	e0a6      	b.n	8009a8a <HAL_TIM_ConfigClockSource+0x166>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800995a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009962:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b40      	cmp	r3, #64	; 0x40
 8009972:	d067      	beq.n	8009a44 <HAL_TIM_ConfigClockSource+0x120>
 8009974:	2b40      	cmp	r3, #64	; 0x40
 8009976:	d80b      	bhi.n	8009990 <HAL_TIM_ConfigClockSource+0x6c>
 8009978:	2b10      	cmp	r3, #16
 800997a:	d073      	beq.n	8009a64 <HAL_TIM_ConfigClockSource+0x140>
 800997c:	2b10      	cmp	r3, #16
 800997e:	d802      	bhi.n	8009986 <HAL_TIM_ConfigClockSource+0x62>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d06f      	beq.n	8009a64 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009984:	e078      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009986:	2b20      	cmp	r3, #32
 8009988:	d06c      	beq.n	8009a64 <HAL_TIM_ConfigClockSource+0x140>
 800998a:	2b30      	cmp	r3, #48	; 0x30
 800998c:	d06a      	beq.n	8009a64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800998e:	e073      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009990:	2b70      	cmp	r3, #112	; 0x70
 8009992:	d00d      	beq.n	80099b0 <HAL_TIM_ConfigClockSource+0x8c>
 8009994:	2b70      	cmp	r3, #112	; 0x70
 8009996:	d804      	bhi.n	80099a2 <HAL_TIM_ConfigClockSource+0x7e>
 8009998:	2b50      	cmp	r3, #80	; 0x50
 800999a:	d033      	beq.n	8009a04 <HAL_TIM_ConfigClockSource+0xe0>
 800999c:	2b60      	cmp	r3, #96	; 0x60
 800999e:	d041      	beq.n	8009a24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80099a0:	e06a      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80099a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a6:	d066      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x152>
 80099a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ac:	d017      	beq.n	80099de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80099ae:	e063      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	6899      	ldr	r1, [r3, #8]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f000 fac9 	bl	8009f56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	609a      	str	r2, [r3, #8]
      break;
 80099dc:	e04c      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6899      	ldr	r1, [r3, #8]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f000 fab2 	bl	8009f56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a00:	609a      	str	r2, [r3, #8]
      break;
 8009a02:	e039      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6859      	ldr	r1, [r3, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f000 fa29 	bl	8009e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2150      	movs	r1, #80	; 0x50
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fa80 	bl	8009f22 <TIM_ITRx_SetConfig>
      break;
 8009a22:	e029      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	6859      	ldr	r1, [r3, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	461a      	mov	r2, r3
 8009a32:	f000 fa47 	bl	8009ec4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2160      	movs	r1, #96	; 0x60
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fa70 	bl	8009f22 <TIM_ITRx_SetConfig>
      break;
 8009a42:	e019      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6818      	ldr	r0, [r3, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	6859      	ldr	r1, [r3, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	461a      	mov	r2, r3
 8009a52:	f000 fa09 	bl	8009e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2140      	movs	r1, #64	; 0x40
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fa60 	bl	8009f22 <TIM_ITRx_SetConfig>
      break;
 8009a62:	e009      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f000 fa57 	bl	8009f22 <TIM_ITRx_SetConfig>
        break;
 8009a74:	e000      	b.n	8009a78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a29      	ldr	r2, [pc, #164]	; (8009b4c <TIM_Base_SetConfig+0xb8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00b      	beq.n	8009ac4 <TIM_Base_SetConfig+0x30>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab2:	d007      	beq.n	8009ac4 <TIM_Base_SetConfig+0x30>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a26      	ldr	r2, [pc, #152]	; (8009b50 <TIM_Base_SetConfig+0xbc>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d003      	beq.n	8009ac4 <TIM_Base_SetConfig+0x30>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a25      	ldr	r2, [pc, #148]	; (8009b54 <TIM_Base_SetConfig+0xc0>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d108      	bne.n	8009ad6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a1c      	ldr	r2, [pc, #112]	; (8009b4c <TIM_Base_SetConfig+0xb8>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00b      	beq.n	8009af6 <TIM_Base_SetConfig+0x62>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae4:	d007      	beq.n	8009af6 <TIM_Base_SetConfig+0x62>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a19      	ldr	r2, [pc, #100]	; (8009b50 <TIM_Base_SetConfig+0xbc>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d003      	beq.n	8009af6 <TIM_Base_SetConfig+0x62>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a18      	ldr	r2, [pc, #96]	; (8009b54 <TIM_Base_SetConfig+0xc0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d108      	bne.n	8009b08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a07      	ldr	r2, [pc, #28]	; (8009b4c <TIM_Base_SetConfig+0xb8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d103      	bne.n	8009b3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	615a      	str	r2, [r3, #20]
}
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bc80      	pop	{r7}
 8009b4a:	4770      	bx	lr
 8009b4c:	40012c00 	.word	0x40012c00
 8009b50:	40000400 	.word	0x40000400
 8009b54:	40000800 	.word	0x40000800

08009b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f023 0201 	bic.w	r2, r3, #1
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f023 0302 	bic.w	r3, r3, #2
 8009ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a1c      	ldr	r2, [pc, #112]	; (8009c20 <TIM_OC1_SetConfig+0xc8>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d10c      	bne.n	8009bce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f023 0308 	bic.w	r3, r3, #8
 8009bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f023 0304 	bic.w	r3, r3, #4
 8009bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <TIM_OC1_SetConfig+0xc8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d111      	bne.n	8009bfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	621a      	str	r2, [r3, #32]
}
 8009c14:	bf00      	nop
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bc80      	pop	{r7}
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	40012c00 	.word	0x40012c00

08009c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	f023 0210 	bic.w	r2, r3, #16
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	021b      	lsls	r3, r3, #8
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f023 0320 	bic.w	r3, r3, #32
 8009c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a1d      	ldr	r2, [pc, #116]	; (8009cf4 <TIM_OC2_SetConfig+0xd0>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d10d      	bne.n	8009ca0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <TIM_OC2_SetConfig+0xd0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d113      	bne.n	8009cd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bc80      	pop	{r7}
 8009cf2:	4770      	bx	lr
 8009cf4:	40012c00 	.word	0x40012c00

08009cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	021b      	lsls	r3, r3, #8
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a1d      	ldr	r2, [pc, #116]	; (8009dc8 <TIM_OC3_SetConfig+0xd0>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d10d      	bne.n	8009d72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a14      	ldr	r2, [pc, #80]	; (8009dc8 <TIM_OC3_SetConfig+0xd0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d113      	bne.n	8009da2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	621a      	str	r2, [r3, #32]
}
 8009dbc:	bf00      	nop
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	40012c00 	.word	0x40012c00

08009dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	031b      	lsls	r3, r3, #12
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a0f      	ldr	r2, [pc, #60]	; (8009e64 <TIM_OC4_SetConfig+0x98>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d109      	bne.n	8009e40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	019b      	lsls	r3, r3, #6
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	621a      	str	r2, [r3, #32]
}
 8009e5a:	bf00      	nop
 8009e5c:	371c      	adds	r7, #28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr
 8009e64:	40012c00 	.word	0x40012c00

08009e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f023 0201 	bic.w	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	011b      	lsls	r3, r3, #4
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f023 030a 	bic.w	r3, r3, #10
 8009ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	621a      	str	r2, [r3, #32]
}
 8009eba:	bf00      	nop
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	f023 0210 	bic.w	r2, r3, #16
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009eee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	031b      	lsls	r3, r3, #12
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	621a      	str	r2, [r3, #32]
}
 8009f18:	bf00      	nop
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr

08009f22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f043 0307 	orr.w	r3, r3, #7
 8009f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	609a      	str	r2, [r3, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bc80      	pop	{r7}
 8009f54:	4770      	bx	lr

08009f56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b087      	sub	sp, #28
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	60b9      	str	r1, [r7, #8]
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	021a      	lsls	r2, r3, #8
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	609a      	str	r2, [r3, #8]
}
 8009f8a:	bf00      	nop
 8009f8c:	371c      	adds	r7, #28
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr

08009f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 031f 	and.w	r3, r3, #31
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 031f 	and.w	r3, r3, #31
 8009fc6:	6879      	ldr	r1, [r7, #4]
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr

08009fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e046      	b.n	800a082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2202      	movs	r2, #2
 800a000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a16      	ldr	r2, [pc, #88]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d00e      	beq.n	800a056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a040:	d009      	beq.n	800a056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a12      	ldr	r2, [pc, #72]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d004      	beq.n	800a056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a10      	ldr	r2, [pc, #64]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d10c      	bne.n	800a070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a05c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	4313      	orrs	r3, r2
 800a066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	bc80      	pop	{r7}
 800a08a:	4770      	bx	lr
 800a08c:	40012c00 	.word	0x40012c00
 800a090:	40000400 	.word	0x40000400
 800a094:	40000800 	.word	0x40000800

0800a098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e03d      	b.n	800a130 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	69db      	ldr	r3, [r3, #28]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr

0800a13a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e03f      	b.n	800a1cc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7fb fbd1 	bl	8005908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2224      	movs	r2, #36	; 0x24
 800a16a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68da      	ldr	r2, [r3, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a17c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fcf8 	bl	800ab74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691a      	ldr	r2, [r3, #16]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a192:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	695a      	ldr	r2, [r3, #20]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08a      	sub	sp, #40	; 0x28
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b20      	cmp	r3, #32
 800a1f2:	d17c      	bne.n	800a2ee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <HAL_UART_Transmit+0x2c>
 800a1fa:	88fb      	ldrh	r3, [r7, #6]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e075      	b.n	800a2f0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <HAL_UART_Transmit+0x3e>
 800a20e:	2302      	movs	r3, #2
 800a210:	e06e      	b.n	800a2f0 <HAL_UART_Transmit+0x11c>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2221      	movs	r2, #33	; 0x21
 800a224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a228:	f7fb fe16 	bl	8005e58 <HAL_GetTick>
 800a22c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	88fa      	ldrh	r2, [r7, #6]
 800a232:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	88fa      	ldrh	r2, [r7, #6]
 800a238:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a242:	d108      	bne.n	800a256 <HAL_UART_Transmit+0x82>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	61bb      	str	r3, [r7, #24]
 800a254:	e003      	b.n	800a25e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a266:	e02a      	b.n	800a2be <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2200      	movs	r2, #0
 800a270:	2180      	movs	r1, #128	; 0x80
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 fb07 	bl	800a886 <UART_WaitOnFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e036      	b.n	800a2f0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10b      	bne.n	800a2a0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a296:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	3302      	adds	r3, #2
 800a29c:	61bb      	str	r3, [r7, #24]
 800a29e:	e007      	b.n	800a2b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1cf      	bne.n	800a268 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2140      	movs	r1, #64	; 0x40
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 fad7 	bl	800a886 <UART_WaitOnFlagUntilTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e006      	b.n	800a2f0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e000      	b.n	800a2f0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a2ee:	2302      	movs	r3, #2
  }
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3720      	adds	r7, #32
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	; 0x28
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	4613      	mov	r3, r2
 800a306:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b20      	cmp	r3, #32
 800a316:	f040 8089 	bne.w	800a42c <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <HAL_UART_Receive+0x2e>
 800a320:	88fb      	ldrh	r3, [r7, #6]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e081      	b.n	800a42e <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <HAL_UART_Receive+0x40>
 800a334:	2302      	movs	r3, #2
 800a336:	e07a      	b.n	800a42e <HAL_UART_Receive+0x136>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2222      	movs	r2, #34	; 0x22
 800a34a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a34e:	f7fb fd83 	bl	8005e58 <HAL_GetTick>
 800a352:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	88fa      	ldrh	r2, [r7, #6]
 800a358:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	88fa      	ldrh	r2, [r7, #6]
 800a35e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a368:	d108      	bne.n	800a37c <HAL_UART_Receive+0x84>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d104      	bne.n	800a37c <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	61bb      	str	r3, [r7, #24]
 800a37a:	e003      	b.n	800a384 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a380:	2300      	movs	r3, #0
 800a382:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a38c:	e043      	b.n	800a416 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2200      	movs	r2, #0
 800a396:	2120      	movs	r1, #32
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 fa74 	bl	800a886 <UART_WaitOnFlagUntilTimeout>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e042      	b.n	800a42e <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10c      	bne.n	800a3c8 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	e01f      	b.n	800a408 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d0:	d007      	beq.n	800a3e2 <HAL_UART_Receive+0xea>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <HAL_UART_Receive+0xf8>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	e008      	b.n	800a402 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	3301      	adds	r3, #1
 800a406:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1b6      	bne.n	800a38e <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	e000      	b.n	800a42e <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800a42c:	2302      	movs	r3, #2
  }
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3720      	adds	r7, #32
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d166      	bne.n	800a520 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <HAL_UART_Receive_DMA+0x26>
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e05f      	b.n	800a522 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_UART_Receive_DMA+0x38>
 800a46c:	2302      	movs	r3, #2
 800a46e:	e058      	b.n	800a522 <HAL_UART_Receive_DMA+0xea>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	88fa      	ldrh	r2, [r7, #6]
 800a482:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2222      	movs	r2, #34	; 0x22
 800a48e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a496:	4a25      	ldr	r2, [pc, #148]	; (800a52c <HAL_UART_Receive_DMA+0xf4>)
 800a498:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49e:	4a24      	ldr	r2, [pc, #144]	; (800a530 <HAL_UART_Receive_DMA+0xf8>)
 800a4a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	4a23      	ldr	r2, [pc, #140]	; (800a534 <HAL_UART_Receive_DMA+0xfc>)
 800a4a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800a4b2:	f107 0308 	add.w	r3, r7, #8
 800a4b6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	88fb      	ldrh	r3, [r7, #6]
 800a4ca:	f7fb fe59 	bl	8006180 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	613b      	str	r3, [r7, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	613b      	str	r3, [r7, #16]
 800a4e2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0201 	orr.w	r2, r2, #1
 800a50a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	695a      	ldr	r2, [r3, #20]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a51a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	e000      	b.n	800a522 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a520:	2302      	movs	r3, #2
  }
}
 800a522:	4618      	mov	r0, r3
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	0800a76f 	.word	0x0800a76f
 800a530:	0800a7d7 	.word	0x0800a7d7
 800a534:	0800a7f3 	.word	0x0800a7f3

0800a538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a558:	2300      	movs	r3, #0
 800a55a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	f003 030f 	and.w	r3, r3, #15
 800a566:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	f003 0320 	and.w	r3, r3, #32
 800a574:	2b00      	cmp	r3, #0
 800a576:	d008      	beq.n	800a58a <HAL_UART_IRQHandler+0x52>
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa76 	bl	800aa74 <UART_Receive_IT>
      return;
 800a588:	e0d1      	b.n	800a72e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 80b0 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x1ba>
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d105      	bne.n	800a5a8 <HAL_UART_IRQHandler+0x70>
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 80a5 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <HAL_UART_IRQHandler+0x90>
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c0:	f043 0201 	orr.w	r2, r3, #1
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	f003 0304 	and.w	r3, r3, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <HAL_UART_IRQHandler+0xb0>
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e0:	f043 0202 	orr.w	r2, r3, #2
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f003 0302 	and.w	r3, r3, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <HAL_UART_IRQHandler+0xd0>
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d005      	beq.n	800a608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a600:	f043 0204 	orr.w	r2, r3, #4
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	f003 0308 	and.w	r3, r3, #8
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00f      	beq.n	800a632 <HAL_UART_IRQHandler+0xfa>
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	f003 0320 	and.w	r3, r3, #32
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <HAL_UART_IRQHandler+0xee>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d005      	beq.n	800a632 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	f043 0208 	orr.w	r2, r3, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d078      	beq.n	800a72c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <HAL_UART_IRQHandler+0x11c>
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fa10 	bl	800aa74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a65e:	2b00      	cmp	r3, #0
 800a660:	bf14      	ite	ne
 800a662:	2301      	movne	r3, #1
 800a664:	2300      	moveq	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <HAL_UART_IRQHandler+0x144>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d031      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f961 	bl	800a944 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d023      	beq.n	800a6d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695a      	ldr	r2, [r3, #20]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a69e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d013      	beq.n	800a6d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ac:	4a21      	ldr	r2, [pc, #132]	; (800a734 <HAL_UART_IRQHandler+0x1fc>)
 800a6ae:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fb fdc3 	bl	8006240 <HAL_DMA_Abort_IT>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d016      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ce:	e00e      	b.n	800a6ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f843 	bl	800a75c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d6:	e00a      	b.n	800a6ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f83f 	bl	800a75c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6de:	e006      	b.n	800a6ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f83b 	bl	800a75c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a6ec:	e01e      	b.n	800a72c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ee:	bf00      	nop
    return;
 800a6f0:	e01c      	b.n	800a72c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d008      	beq.n	800a70e <HAL_UART_IRQHandler+0x1d6>
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f94d 	bl	800a9a6 <UART_Transmit_IT>
    return;
 800a70c:	e00f      	b.n	800a72e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00a      	beq.n	800a72e <HAL_UART_IRQHandler+0x1f6>
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d005      	beq.n	800a72e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f98e 	bl	800aa44 <UART_EndTransmit_IT>
    return;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <HAL_UART_IRQHandler+0x1f6>
    return;
 800a72c:	bf00      	nop
  }
}
 800a72e:	3720      	adds	r7, #32
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	0800a97f 	.word	0x0800a97f

0800a738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	bc80      	pop	{r7}
 800a748:	4770      	bx	lr

0800a74a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	bc80      	pop	{r7}
 800a75a:	4770      	bx	lr

0800a75c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	bc80      	pop	{r7}
 800a76c:	4770      	bx	lr

0800a76e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0320 	and.w	r3, r3, #32
 800a786:	2b00      	cmp	r3, #0
 800a788:	d11e      	bne.n	800a7c8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a79e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	695a      	ldr	r2, [r3, #20]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0201 	bic.w	r2, r2, #1
 800a7ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695a      	ldr	r2, [r3, #20]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7f8 fe2d 	bl	8003428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7ff ffb0 	bl	800a74a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ea:	bf00      	nop
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bf14      	ite	ne
 800a812:	2301      	movne	r3, #1
 800a814:	2300      	moveq	r3, #0
 800a816:	b2db      	uxtb	r3, r3
 800a818:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b21      	cmp	r3, #33	; 0x21
 800a824:	d108      	bne.n	800a838 <UART_DMAError+0x46>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2200      	movs	r2, #0
 800a830:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a832:	68b8      	ldr	r0, [r7, #8]
 800a834:	f000 f871 	bl	800a91a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	bf14      	ite	ne
 800a846:	2301      	movne	r3, #1
 800a848:	2300      	moveq	r3, #0
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b22      	cmp	r3, #34	; 0x22
 800a858:	d108      	bne.n	800a86c <UART_DMAError+0x7a>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2200      	movs	r2, #0
 800a864:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a866:	68b8      	ldr	r0, [r7, #8]
 800a868:	f000 f86c 	bl	800a944 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a870:	f043 0210 	orr.w	r2, r3, #16
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a878:	68b8      	ldr	r0, [r7, #8]
 800a87a:	f7ff ff6f 	bl	800a75c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a87e:	bf00      	nop
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	603b      	str	r3, [r7, #0]
 800a892:	4613      	mov	r3, r2
 800a894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a896:	e02c      	b.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a89e:	d028      	beq.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d007      	beq.n	800a8b6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8a6:	f7fb fad7 	bl	8005e58 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	69ba      	ldr	r2, [r7, #24]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d21d      	bcs.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	695a      	ldr	r2, [r3, #20]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f022 0201 	bic.w	r2, r2, #1
 800a8d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2220      	movs	r2, #32
 800a8da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e00f      	b.n	800a912 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	bf0c      	ite	eq
 800a902:	2301      	moveq	r3, #1
 800a904:	2300      	movne	r3, #0
 800a906:	b2db      	uxtb	r3, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	79fb      	ldrb	r3, [r7, #7]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d0c3      	beq.n	800a898 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68da      	ldr	r2, [r3, #12]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a930:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2220      	movs	r2, #32
 800a936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	bc80      	pop	{r7}
 800a942:	4770      	bx	lr

0800a944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a95a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695a      	ldr	r2, [r3, #20]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2220      	movs	r2, #32
 800a970:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr

0800a97e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fedf 	bl	800a75c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b21      	cmp	r3, #33	; 0x21
 800a9b8:	d13e      	bne.n	800aa38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c2:	d114      	bne.n	800a9ee <UART_Transmit_IT+0x48>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d110      	bne.n	800a9ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	1c9a      	adds	r2, r3, #2
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	621a      	str	r2, [r3, #32]
 800a9ec:	e008      	b.n	800aa00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	1c59      	adds	r1, r3, #1
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6211      	str	r1, [r2, #32]
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	3b01      	subs	r3, #1
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10f      	bne.n	800aa34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e000      	b.n	800aa3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa38:	2302      	movs	r3, #2
  }
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bc80      	pop	{r7}
 800aa42:	4770      	bx	lr

0800aa44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff fe67 	bl	800a738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b22      	cmp	r3, #34	; 0x22
 800aa86:	d170      	bne.n	800ab6a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa90:	d117      	bne.n	800aac2 <UART_Receive_IT+0x4e>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d113      	bne.n	800aac2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaba:	1c9a      	adds	r2, r3, #2
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	629a      	str	r2, [r3, #40]	; 0x28
 800aac0:	e026      	b.n	800ab10 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad4:	d007      	beq.n	800aae6 <UART_Receive_IT+0x72>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <UART_Receive_IT+0x80>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e008      	b.n	800ab06 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d120      	bne.n	800ab66 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 0220 	bic.w	r2, r2, #32
 800ab32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	695a      	ldr	r2, [r3, #20]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0201 	bic.w	r2, r2, #1
 800ab52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2220      	movs	r2, #32
 800ab58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7f8 fc63 	bl	8003428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e002      	b.n	800ab6c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e000      	b.n	800ab6c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800ab6a:	2302      	movs	r3, #2
  }
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689a      	ldr	r2, [r3, #8]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800abae:	f023 030c 	bic.w	r3, r3, #12
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6812      	ldr	r2, [r2, #0]
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	430b      	orrs	r3, r1
 800abba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a2c      	ldr	r2, [pc, #176]	; (800ac88 <UART_SetConfig+0x114>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d103      	bne.n	800abe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800abdc:	f7fd fefc 	bl	80089d8 <HAL_RCC_GetPCLK2Freq>
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	e002      	b.n	800abea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800abe4:	f7fd fee4 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 800abe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4613      	mov	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	009a      	lsls	r2, r3, #2
 800abf4:	441a      	add	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac00:	4a22      	ldr	r2, [pc, #136]	; (800ac8c <UART_SetConfig+0x118>)
 800ac02:	fba2 2303 	umull	r2, r3, r2, r3
 800ac06:	095b      	lsrs	r3, r3, #5
 800ac08:	0119      	lsls	r1, r3, #4
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	009a      	lsls	r2, r3, #2
 800ac14:	441a      	add	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <UART_SetConfig+0x118>)
 800ac22:	fba3 0302 	umull	r0, r3, r3, r2
 800ac26:	095b      	lsrs	r3, r3, #5
 800ac28:	2064      	movs	r0, #100	; 0x64
 800ac2a:	fb00 f303 	mul.w	r3, r0, r3
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	011b      	lsls	r3, r3, #4
 800ac32:	3332      	adds	r3, #50	; 0x32
 800ac34:	4a15      	ldr	r2, [pc, #84]	; (800ac8c <UART_SetConfig+0x118>)
 800ac36:	fba2 2303 	umull	r2, r3, r2, r3
 800ac3a:	095b      	lsrs	r3, r3, #5
 800ac3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac40:	4419      	add	r1, r3
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	009a      	lsls	r2, r3, #2
 800ac4c:	441a      	add	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac58:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <UART_SetConfig+0x118>)
 800ac5a:	fba3 0302 	umull	r0, r3, r3, r2
 800ac5e:	095b      	lsrs	r3, r3, #5
 800ac60:	2064      	movs	r0, #100	; 0x64
 800ac62:	fb00 f303 	mul.w	r3, r0, r3
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	3332      	adds	r3, #50	; 0x32
 800ac6c:	4a07      	ldr	r2, [pc, #28]	; (800ac8c <UART_SetConfig+0x118>)
 800ac6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac72:	095b      	lsrs	r3, r3, #5
 800ac74:	f003 020f 	and.w	r2, r3, #15
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	440a      	add	r2, r1
 800ac7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	40013800 	.word	0x40013800
 800ac8c:	51eb851f 	.word	0x51eb851f

0800ac90 <atof>:
 800ac90:	2100      	movs	r1, #0
 800ac92:	f000 bfa1 	b.w	800bbd8 <strtod>

0800ac96 <atoi>:
 800ac96:	220a      	movs	r2, #10
 800ac98:	2100      	movs	r1, #0
 800ac9a:	f001 b82b 	b.w	800bcf4 <strtol>
	...

0800aca0 <gcvt>:
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	461c      	mov	r4, r3
 800aca4:	b085      	sub	sp, #20
 800aca6:	2300      	movs	r3, #0
 800aca8:	4615      	mov	r5, r2
 800acaa:	2200      	movs	r2, #0
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	f7f5 fe84 	bl	80009bc <__aeabi_dcmplt>
 800acb4:	4623      	mov	r3, r4
 800acb6:	b118      	cbz	r0, 800acc0 <gcvt+0x20>
 800acb8:	222d      	movs	r2, #45	; 0x2d
 800acba:	3d01      	subs	r5, #1
 800acbc:	f803 2b01 	strb.w	r2, [r3], #1
 800acc0:	2267      	movs	r2, #103	; 0x67
 800acc2:	2100      	movs	r1, #0
 800acc4:	e9cd 5300 	strd	r5, r3, [sp]
 800acc8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800accc:	4905      	ldr	r1, [pc, #20]	; (800ace4 <gcvt+0x44>)
 800acce:	4632      	mov	r2, r6
 800acd0:	463b      	mov	r3, r7
 800acd2:	6808      	ldr	r0, [r1, #0]
 800acd4:	f001 f898 	bl	800be08 <_gcvt>
 800acd8:	2800      	cmp	r0, #0
 800acda:	bf14      	ite	ne
 800acdc:	4620      	movne	r0, r4
 800acde:	2000      	moveq	r0, #0
 800ace0:	b005      	add	sp, #20
 800ace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace4:	20000070 	.word	0x20000070

0800ace8 <__errno>:
 800ace8:	4b01      	ldr	r3, [pc, #4]	; (800acf0 <__errno+0x8>)
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	20000070 	.word	0x20000070

0800acf4 <__libc_init_array>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	2500      	movs	r5, #0
 800acf8:	4e0c      	ldr	r6, [pc, #48]	; (800ad2c <__libc_init_array+0x38>)
 800acfa:	4c0d      	ldr	r4, [pc, #52]	; (800ad30 <__libc_init_array+0x3c>)
 800acfc:	1ba4      	subs	r4, r4, r6
 800acfe:	10a4      	asrs	r4, r4, #2
 800ad00:	42a5      	cmp	r5, r4
 800ad02:	d109      	bne.n	800ad18 <__libc_init_array+0x24>
 800ad04:	f003 fa80 	bl	800e208 <_init>
 800ad08:	2500      	movs	r5, #0
 800ad0a:	4e0a      	ldr	r6, [pc, #40]	; (800ad34 <__libc_init_array+0x40>)
 800ad0c:	4c0a      	ldr	r4, [pc, #40]	; (800ad38 <__libc_init_array+0x44>)
 800ad0e:	1ba4      	subs	r4, r4, r6
 800ad10:	10a4      	asrs	r4, r4, #2
 800ad12:	42a5      	cmp	r5, r4
 800ad14:	d105      	bne.n	800ad22 <__libc_init_array+0x2e>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad1c:	4798      	blx	r3
 800ad1e:	3501      	adds	r5, #1
 800ad20:	e7ee      	b.n	800ad00 <__libc_init_array+0xc>
 800ad22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad26:	4798      	blx	r3
 800ad28:	3501      	adds	r5, #1
 800ad2a:	e7f2      	b.n	800ad12 <__libc_init_array+0x1e>
 800ad2c:	0800f0d0 	.word	0x0800f0d0
 800ad30:	0800f0d0 	.word	0x0800f0d0
 800ad34:	0800f0d0 	.word	0x0800f0d0
 800ad38:	0800f0d4 	.word	0x0800f0d4

0800ad3c <malloc>:
 800ad3c:	4b02      	ldr	r3, [pc, #8]	; (800ad48 <malloc+0xc>)
 800ad3e:	4601      	mov	r1, r0
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	f000 b85f 	b.w	800ae04 <_malloc_r>
 800ad46:	bf00      	nop
 800ad48:	20000070 	.word	0x20000070

0800ad4c <free>:
 800ad4c:	4b02      	ldr	r3, [pc, #8]	; (800ad58 <free+0xc>)
 800ad4e:	4601      	mov	r1, r0
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	f000 b80b 	b.w	800ad6c <_free_r>
 800ad56:	bf00      	nop
 800ad58:	20000070 	.word	0x20000070

0800ad5c <memset>:
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	4402      	add	r2, r0
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d100      	bne.n	800ad66 <memset+0xa>
 800ad64:	4770      	bx	lr
 800ad66:	f803 1b01 	strb.w	r1, [r3], #1
 800ad6a:	e7f9      	b.n	800ad60 <memset+0x4>

0800ad6c <_free_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4605      	mov	r5, r0
 800ad70:	2900      	cmp	r1, #0
 800ad72:	d043      	beq.n	800adfc <_free_r+0x90>
 800ad74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad78:	1f0c      	subs	r4, r1, #4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	bfb8      	it	lt
 800ad7e:	18e4      	addlt	r4, r4, r3
 800ad80:	f001 fc5a 	bl	800c638 <__malloc_lock>
 800ad84:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <_free_r+0x94>)
 800ad86:	6813      	ldr	r3, [r2, #0]
 800ad88:	4610      	mov	r0, r2
 800ad8a:	b933      	cbnz	r3, 800ad9a <_free_r+0x2e>
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	6014      	str	r4, [r2, #0]
 800ad90:	4628      	mov	r0, r5
 800ad92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad96:	f001 bc50 	b.w	800c63a <__malloc_unlock>
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	d90b      	bls.n	800adb6 <_free_r+0x4a>
 800ad9e:	6821      	ldr	r1, [r4, #0]
 800ada0:	1862      	adds	r2, r4, r1
 800ada2:	4293      	cmp	r3, r2
 800ada4:	bf01      	itttt	eq
 800ada6:	681a      	ldreq	r2, [r3, #0]
 800ada8:	685b      	ldreq	r3, [r3, #4]
 800adaa:	1852      	addeq	r2, r2, r1
 800adac:	6022      	streq	r2, [r4, #0]
 800adae:	6063      	str	r3, [r4, #4]
 800adb0:	6004      	str	r4, [r0, #0]
 800adb2:	e7ed      	b.n	800ad90 <_free_r+0x24>
 800adb4:	4613      	mov	r3, r2
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	b10a      	cbz	r2, 800adbe <_free_r+0x52>
 800adba:	42a2      	cmp	r2, r4
 800adbc:	d9fa      	bls.n	800adb4 <_free_r+0x48>
 800adbe:	6819      	ldr	r1, [r3, #0]
 800adc0:	1858      	adds	r0, r3, r1
 800adc2:	42a0      	cmp	r0, r4
 800adc4:	d10b      	bne.n	800adde <_free_r+0x72>
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	4401      	add	r1, r0
 800adca:	1858      	adds	r0, r3, r1
 800adcc:	4282      	cmp	r2, r0
 800adce:	6019      	str	r1, [r3, #0]
 800add0:	d1de      	bne.n	800ad90 <_free_r+0x24>
 800add2:	6810      	ldr	r0, [r2, #0]
 800add4:	6852      	ldr	r2, [r2, #4]
 800add6:	4401      	add	r1, r0
 800add8:	6019      	str	r1, [r3, #0]
 800adda:	605a      	str	r2, [r3, #4]
 800addc:	e7d8      	b.n	800ad90 <_free_r+0x24>
 800adde:	d902      	bls.n	800ade6 <_free_r+0x7a>
 800ade0:	230c      	movs	r3, #12
 800ade2:	602b      	str	r3, [r5, #0]
 800ade4:	e7d4      	b.n	800ad90 <_free_r+0x24>
 800ade6:	6820      	ldr	r0, [r4, #0]
 800ade8:	1821      	adds	r1, r4, r0
 800adea:	428a      	cmp	r2, r1
 800adec:	bf01      	itttt	eq
 800adee:	6811      	ldreq	r1, [r2, #0]
 800adf0:	6852      	ldreq	r2, [r2, #4]
 800adf2:	1809      	addeq	r1, r1, r0
 800adf4:	6021      	streq	r1, [r4, #0]
 800adf6:	6062      	str	r2, [r4, #4]
 800adf8:	605c      	str	r4, [r3, #4]
 800adfa:	e7c9      	b.n	800ad90 <_free_r+0x24>
 800adfc:	bd38      	pop	{r3, r4, r5, pc}
 800adfe:	bf00      	nop
 800ae00:	200006e4 	.word	0x200006e4

0800ae04 <_malloc_r>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	1ccd      	adds	r5, r1, #3
 800ae08:	f025 0503 	bic.w	r5, r5, #3
 800ae0c:	3508      	adds	r5, #8
 800ae0e:	2d0c      	cmp	r5, #12
 800ae10:	bf38      	it	cc
 800ae12:	250c      	movcc	r5, #12
 800ae14:	2d00      	cmp	r5, #0
 800ae16:	4606      	mov	r6, r0
 800ae18:	db01      	blt.n	800ae1e <_malloc_r+0x1a>
 800ae1a:	42a9      	cmp	r1, r5
 800ae1c:	d903      	bls.n	800ae26 <_malloc_r+0x22>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	6033      	str	r3, [r6, #0]
 800ae22:	2000      	movs	r0, #0
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
 800ae26:	f001 fc07 	bl	800c638 <__malloc_lock>
 800ae2a:	4a21      	ldr	r2, [pc, #132]	; (800aeb0 <_malloc_r+0xac>)
 800ae2c:	6814      	ldr	r4, [r2, #0]
 800ae2e:	4621      	mov	r1, r4
 800ae30:	b991      	cbnz	r1, 800ae58 <_malloc_r+0x54>
 800ae32:	4c20      	ldr	r4, [pc, #128]	; (800aeb4 <_malloc_r+0xb0>)
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	b91b      	cbnz	r3, 800ae40 <_malloc_r+0x3c>
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f83d 	bl	800aeb8 <_sbrk_r>
 800ae3e:	6020      	str	r0, [r4, #0]
 800ae40:	4629      	mov	r1, r5
 800ae42:	4630      	mov	r0, r6
 800ae44:	f000 f838 	bl	800aeb8 <_sbrk_r>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d124      	bne.n	800ae96 <_malloc_r+0x92>
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	4630      	mov	r0, r6
 800ae50:	6033      	str	r3, [r6, #0]
 800ae52:	f001 fbf2 	bl	800c63a <__malloc_unlock>
 800ae56:	e7e4      	b.n	800ae22 <_malloc_r+0x1e>
 800ae58:	680b      	ldr	r3, [r1, #0]
 800ae5a:	1b5b      	subs	r3, r3, r5
 800ae5c:	d418      	bmi.n	800ae90 <_malloc_r+0x8c>
 800ae5e:	2b0b      	cmp	r3, #11
 800ae60:	d90f      	bls.n	800ae82 <_malloc_r+0x7e>
 800ae62:	600b      	str	r3, [r1, #0]
 800ae64:	18cc      	adds	r4, r1, r3
 800ae66:	50cd      	str	r5, [r1, r3]
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f001 fbe6 	bl	800c63a <__malloc_unlock>
 800ae6e:	f104 000b 	add.w	r0, r4, #11
 800ae72:	1d23      	adds	r3, r4, #4
 800ae74:	f020 0007 	bic.w	r0, r0, #7
 800ae78:	1ac3      	subs	r3, r0, r3
 800ae7a:	d0d3      	beq.n	800ae24 <_malloc_r+0x20>
 800ae7c:	425a      	negs	r2, r3
 800ae7e:	50e2      	str	r2, [r4, r3]
 800ae80:	e7d0      	b.n	800ae24 <_malloc_r+0x20>
 800ae82:	684b      	ldr	r3, [r1, #4]
 800ae84:	428c      	cmp	r4, r1
 800ae86:	bf16      	itet	ne
 800ae88:	6063      	strne	r3, [r4, #4]
 800ae8a:	6013      	streq	r3, [r2, #0]
 800ae8c:	460c      	movne	r4, r1
 800ae8e:	e7eb      	b.n	800ae68 <_malloc_r+0x64>
 800ae90:	460c      	mov	r4, r1
 800ae92:	6849      	ldr	r1, [r1, #4]
 800ae94:	e7cc      	b.n	800ae30 <_malloc_r+0x2c>
 800ae96:	1cc4      	adds	r4, r0, #3
 800ae98:	f024 0403 	bic.w	r4, r4, #3
 800ae9c:	42a0      	cmp	r0, r4
 800ae9e:	d005      	beq.n	800aeac <_malloc_r+0xa8>
 800aea0:	1a21      	subs	r1, r4, r0
 800aea2:	4630      	mov	r0, r6
 800aea4:	f000 f808 	bl	800aeb8 <_sbrk_r>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d0cf      	beq.n	800ae4c <_malloc_r+0x48>
 800aeac:	6025      	str	r5, [r4, #0]
 800aeae:	e7db      	b.n	800ae68 <_malloc_r+0x64>
 800aeb0:	200006e4 	.word	0x200006e4
 800aeb4:	200006e8 	.word	0x200006e8

0800aeb8 <_sbrk_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	2300      	movs	r3, #0
 800aebc:	4c05      	ldr	r4, [pc, #20]	; (800aed4 <_sbrk_r+0x1c>)
 800aebe:	4605      	mov	r5, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	f7fa fee0 	bl	8005c88 <_sbrk>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_sbrk_r+0x1a>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_sbrk_r+0x1a>
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20000fec 	.word	0x20000fec

0800aed8 <siprintf>:
 800aed8:	b40e      	push	{r1, r2, r3}
 800aeda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aede:	b500      	push	{lr}
 800aee0:	b09c      	sub	sp, #112	; 0x70
 800aee2:	ab1d      	add	r3, sp, #116	; 0x74
 800aee4:	9002      	str	r0, [sp, #8]
 800aee6:	9006      	str	r0, [sp, #24]
 800aee8:	9107      	str	r1, [sp, #28]
 800aeea:	9104      	str	r1, [sp, #16]
 800aeec:	4808      	ldr	r0, [pc, #32]	; (800af10 <siprintf+0x38>)
 800aeee:	4909      	ldr	r1, [pc, #36]	; (800af14 <siprintf+0x3c>)
 800aef0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef4:	9105      	str	r1, [sp, #20]
 800aef6:	6800      	ldr	r0, [r0, #0]
 800aef8:	a902      	add	r1, sp, #8
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	f002 f842 	bl	800cf84 <_svfiprintf_r>
 800af00:	2200      	movs	r2, #0
 800af02:	9b02      	ldr	r3, [sp, #8]
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	b01c      	add	sp, #112	; 0x70
 800af08:	f85d eb04 	ldr.w	lr, [sp], #4
 800af0c:	b003      	add	sp, #12
 800af0e:	4770      	bx	lr
 800af10:	20000070 	.word	0x20000070
 800af14:	ffff0208 	.word	0xffff0208

0800af18 <strcat>:
 800af18:	4603      	mov	r3, r0
 800af1a:	b510      	push	{r4, lr}
 800af1c:	781a      	ldrb	r2, [r3, #0]
 800af1e:	1c5c      	adds	r4, r3, #1
 800af20:	b93a      	cbnz	r2, 800af32 <strcat+0x1a>
 800af22:	3b01      	subs	r3, #1
 800af24:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af28:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	d1f9      	bne.n	800af24 <strcat+0xc>
 800af30:	bd10      	pop	{r4, pc}
 800af32:	4623      	mov	r3, r4
 800af34:	e7f2      	b.n	800af1c <strcat+0x4>

0800af36 <strchr>:
 800af36:	b2c9      	uxtb	r1, r1
 800af38:	4603      	mov	r3, r0
 800af3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af3e:	b11a      	cbz	r2, 800af48 <strchr+0x12>
 800af40:	428a      	cmp	r2, r1
 800af42:	d1f9      	bne.n	800af38 <strchr+0x2>
 800af44:	4618      	mov	r0, r3
 800af46:	4770      	bx	lr
 800af48:	2900      	cmp	r1, #0
 800af4a:	bf18      	it	ne
 800af4c:	2300      	movne	r3, #0
 800af4e:	e7f9      	b.n	800af44 <strchr+0xe>

0800af50 <strcpy>:
 800af50:	4603      	mov	r3, r0
 800af52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af56:	f803 2b01 	strb.w	r2, [r3], #1
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	d1f9      	bne.n	800af52 <strcpy+0x2>
 800af5e:	4770      	bx	lr

0800af60 <strstr>:
 800af60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af62:	7803      	ldrb	r3, [r0, #0]
 800af64:	b17b      	cbz	r3, 800af86 <strstr+0x26>
 800af66:	4604      	mov	r4, r0
 800af68:	7823      	ldrb	r3, [r4, #0]
 800af6a:	4620      	mov	r0, r4
 800af6c:	1c66      	adds	r6, r4, #1
 800af6e:	b17b      	cbz	r3, 800af90 <strstr+0x30>
 800af70:	1e4a      	subs	r2, r1, #1
 800af72:	1e63      	subs	r3, r4, #1
 800af74:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800af78:	b14d      	cbz	r5, 800af8e <strstr+0x2e>
 800af7a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800af7e:	4634      	mov	r4, r6
 800af80:	42af      	cmp	r7, r5
 800af82:	d0f7      	beq.n	800af74 <strstr+0x14>
 800af84:	e7f0      	b.n	800af68 <strstr+0x8>
 800af86:	780b      	ldrb	r3, [r1, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bf18      	it	ne
 800af8c:	2000      	movne	r0, #0
 800af8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af90:	4618      	mov	r0, r3
 800af92:	e7fc      	b.n	800af8e <strstr+0x2e>

0800af94 <sulp>:
 800af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af98:	460f      	mov	r7, r1
 800af9a:	4690      	mov	r8, r2
 800af9c:	f001 fe18 	bl	800cbd0 <__ulp>
 800afa0:	4604      	mov	r4, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	f1b8 0f00 	cmp.w	r8, #0
 800afa8:	d011      	beq.n	800afce <sulp+0x3a>
 800afaa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800afae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dd0b      	ble.n	800afce <sulp+0x3a>
 800afb6:	2400      	movs	r4, #0
 800afb8:	051b      	lsls	r3, r3, #20
 800afba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800afbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800afc2:	4622      	mov	r2, r4
 800afc4:	462b      	mov	r3, r5
 800afc6:	f7f5 fa87 	bl	80004d8 <__aeabi_dmul>
 800afca:	4604      	mov	r4, r0
 800afcc:	460d      	mov	r5, r1
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800afd8 <_strtod_l>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	461f      	mov	r7, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	b0a1      	sub	sp, #132	; 0x84
 800afe2:	4683      	mov	fp, r0
 800afe4:	4638      	mov	r0, r7
 800afe6:	460e      	mov	r6, r1
 800afe8:	9217      	str	r2, [sp, #92]	; 0x5c
 800afea:	931c      	str	r3, [sp, #112]	; 0x70
 800afec:	f001 fb05 	bl	800c5fa <__localeconv_l>
 800aff0:	4680      	mov	r8, r0
 800aff2:	6800      	ldr	r0, [r0, #0]
 800aff4:	f7f5 f8ac 	bl	8000150 <strlen>
 800aff8:	f04f 0900 	mov.w	r9, #0
 800affc:	4604      	mov	r4, r0
 800affe:	f04f 0a00 	mov.w	sl, #0
 800b002:	961b      	str	r6, [sp, #108]	; 0x6c
 800b004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b006:	781a      	ldrb	r2, [r3, #0]
 800b008:	2a0d      	cmp	r2, #13
 800b00a:	d832      	bhi.n	800b072 <_strtod_l+0x9a>
 800b00c:	2a09      	cmp	r2, #9
 800b00e:	d236      	bcs.n	800b07e <_strtod_l+0xa6>
 800b010:	2a00      	cmp	r2, #0
 800b012:	d03e      	beq.n	800b092 <_strtod_l+0xba>
 800b014:	2300      	movs	r3, #0
 800b016:	930d      	str	r3, [sp, #52]	; 0x34
 800b018:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b01a:	782b      	ldrb	r3, [r5, #0]
 800b01c:	2b30      	cmp	r3, #48	; 0x30
 800b01e:	f040 80ac 	bne.w	800b17a <_strtod_l+0x1a2>
 800b022:	786b      	ldrb	r3, [r5, #1]
 800b024:	2b58      	cmp	r3, #88	; 0x58
 800b026:	d001      	beq.n	800b02c <_strtod_l+0x54>
 800b028:	2b78      	cmp	r3, #120	; 0x78
 800b02a:	d167      	bne.n	800b0fc <_strtod_l+0x124>
 800b02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b02e:	9702      	str	r7, [sp, #8]
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	ab1c      	add	r3, sp, #112	; 0x70
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	4a89      	ldr	r2, [pc, #548]	; (800b25c <_strtod_l+0x284>)
 800b038:	ab1d      	add	r3, sp, #116	; 0x74
 800b03a:	a91b      	add	r1, sp, #108	; 0x6c
 800b03c:	4658      	mov	r0, fp
 800b03e:	f001 f801 	bl	800c044 <__gethex>
 800b042:	f010 0407 	ands.w	r4, r0, #7
 800b046:	4606      	mov	r6, r0
 800b048:	d005      	beq.n	800b056 <_strtod_l+0x7e>
 800b04a:	2c06      	cmp	r4, #6
 800b04c:	d12b      	bne.n	800b0a6 <_strtod_l+0xce>
 800b04e:	2300      	movs	r3, #0
 800b050:	3501      	adds	r5, #1
 800b052:	951b      	str	r5, [sp, #108]	; 0x6c
 800b054:	930d      	str	r3, [sp, #52]	; 0x34
 800b056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 85a6 	bne.w	800bbaa <_strtod_l+0xbd2>
 800b05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b060:	b1e3      	cbz	r3, 800b09c <_strtod_l+0xc4>
 800b062:	464a      	mov	r2, r9
 800b064:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b068:	4610      	mov	r0, r2
 800b06a:	4619      	mov	r1, r3
 800b06c:	b021      	add	sp, #132	; 0x84
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	2a2b      	cmp	r2, #43	; 0x2b
 800b074:	d015      	beq.n	800b0a2 <_strtod_l+0xca>
 800b076:	2a2d      	cmp	r2, #45	; 0x2d
 800b078:	d004      	beq.n	800b084 <_strtod_l+0xac>
 800b07a:	2a20      	cmp	r2, #32
 800b07c:	d1ca      	bne.n	800b014 <_strtod_l+0x3c>
 800b07e:	3301      	adds	r3, #1
 800b080:	931b      	str	r3, [sp, #108]	; 0x6c
 800b082:	e7bf      	b.n	800b004 <_strtod_l+0x2c>
 800b084:	2201      	movs	r2, #1
 800b086:	920d      	str	r2, [sp, #52]	; 0x34
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b08c:	785b      	ldrb	r3, [r3, #1]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1c2      	bne.n	800b018 <_strtod_l+0x40>
 800b092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b094:	961b      	str	r6, [sp, #108]	; 0x6c
 800b096:	2b00      	cmp	r3, #0
 800b098:	f040 8585 	bne.w	800bba6 <_strtod_l+0xbce>
 800b09c:	464a      	mov	r2, r9
 800b09e:	4653      	mov	r3, sl
 800b0a0:	e7e2      	b.n	800b068 <_strtod_l+0x90>
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	e7ef      	b.n	800b086 <_strtod_l+0xae>
 800b0a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0a8:	b13a      	cbz	r2, 800b0ba <_strtod_l+0xe2>
 800b0aa:	2135      	movs	r1, #53	; 0x35
 800b0ac:	a81e      	add	r0, sp, #120	; 0x78
 800b0ae:	f001 fe9f 	bl	800cdf0 <__copybits>
 800b0b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	f001 faf5 	bl	800c6a4 <_Bfree>
 800b0ba:	3c01      	subs	r4, #1
 800b0bc:	2c04      	cmp	r4, #4
 800b0be:	d806      	bhi.n	800b0ce <_strtod_l+0xf6>
 800b0c0:	e8df f004 	tbb	[pc, r4]
 800b0c4:	1714030a 	.word	0x1714030a
 800b0c8:	0a          	.byte	0x0a
 800b0c9:	00          	.byte	0x00
 800b0ca:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800b0ce:	0731      	lsls	r1, r6, #28
 800b0d0:	d5c1      	bpl.n	800b056 <_strtod_l+0x7e>
 800b0d2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800b0d6:	e7be      	b.n	800b056 <_strtod_l+0x7e>
 800b0d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b0da:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800b0de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b0e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b0e6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800b0ea:	e7f0      	b.n	800b0ce <_strtod_l+0xf6>
 800b0ec:	f8df a170 	ldr.w	sl, [pc, #368]	; 800b260 <_strtod_l+0x288>
 800b0f0:	e7ed      	b.n	800b0ce <_strtod_l+0xf6>
 800b0f2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800b0f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b0fa:	e7e8      	b.n	800b0ce <_strtod_l+0xf6>
 800b0fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	921b      	str	r2, [sp, #108]	; 0x6c
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	2b30      	cmp	r3, #48	; 0x30
 800b106:	d0f9      	beq.n	800b0fc <_strtod_l+0x124>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d0a4      	beq.n	800b056 <_strtod_l+0x7e>
 800b10c:	2301      	movs	r3, #1
 800b10e:	2500      	movs	r5, #0
 800b110:	220a      	movs	r2, #10
 800b112:	9307      	str	r3, [sp, #28]
 800b114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b116:	9506      	str	r5, [sp, #24]
 800b118:	9308      	str	r3, [sp, #32]
 800b11a:	9504      	str	r5, [sp, #16]
 800b11c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b11e:	7807      	ldrb	r7, [r0, #0]
 800b120:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b124:	b2d9      	uxtb	r1, r3
 800b126:	2909      	cmp	r1, #9
 800b128:	d929      	bls.n	800b17e <_strtod_l+0x1a6>
 800b12a:	4622      	mov	r2, r4
 800b12c:	f8d8 1000 	ldr.w	r1, [r8]
 800b130:	f002 f9a8 	bl	800d484 <strncmp>
 800b134:	2800      	cmp	r0, #0
 800b136:	d031      	beq.n	800b19c <_strtod_l+0x1c4>
 800b138:	2000      	movs	r0, #0
 800b13a:	463b      	mov	r3, r7
 800b13c:	4602      	mov	r2, r0
 800b13e:	9c04      	ldr	r4, [sp, #16]
 800b140:	9005      	str	r0, [sp, #20]
 800b142:	2b65      	cmp	r3, #101	; 0x65
 800b144:	d001      	beq.n	800b14a <_strtod_l+0x172>
 800b146:	2b45      	cmp	r3, #69	; 0x45
 800b148:	d114      	bne.n	800b174 <_strtod_l+0x19c>
 800b14a:	b924      	cbnz	r4, 800b156 <_strtod_l+0x17e>
 800b14c:	b910      	cbnz	r0, 800b154 <_strtod_l+0x17c>
 800b14e:	9b07      	ldr	r3, [sp, #28]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d09e      	beq.n	800b092 <_strtod_l+0xba>
 800b154:	2400      	movs	r4, #0
 800b156:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b158:	1c73      	adds	r3, r6, #1
 800b15a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b15c:	7873      	ldrb	r3, [r6, #1]
 800b15e:	2b2b      	cmp	r3, #43	; 0x2b
 800b160:	d078      	beq.n	800b254 <_strtod_l+0x27c>
 800b162:	2b2d      	cmp	r3, #45	; 0x2d
 800b164:	d070      	beq.n	800b248 <_strtod_l+0x270>
 800b166:	f04f 0c00 	mov.w	ip, #0
 800b16a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b16e:	2f09      	cmp	r7, #9
 800b170:	d97c      	bls.n	800b26c <_strtod_l+0x294>
 800b172:	961b      	str	r6, [sp, #108]	; 0x6c
 800b174:	f04f 0e00 	mov.w	lr, #0
 800b178:	e09a      	b.n	800b2b0 <_strtod_l+0x2d8>
 800b17a:	2300      	movs	r3, #0
 800b17c:	e7c7      	b.n	800b10e <_strtod_l+0x136>
 800b17e:	9904      	ldr	r1, [sp, #16]
 800b180:	3001      	adds	r0, #1
 800b182:	2908      	cmp	r1, #8
 800b184:	bfd7      	itett	le
 800b186:	9906      	ldrle	r1, [sp, #24]
 800b188:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b18c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b190:	9306      	strle	r3, [sp, #24]
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	901b      	str	r0, [sp, #108]	; 0x6c
 800b196:	3301      	adds	r3, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	e7bf      	b.n	800b11c <_strtod_l+0x144>
 800b19c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b19e:	191a      	adds	r2, r3, r4
 800b1a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1a2:	9a04      	ldr	r2, [sp, #16]
 800b1a4:	5d1b      	ldrb	r3, [r3, r4]
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	d037      	beq.n	800b21a <_strtod_l+0x242>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	9c04      	ldr	r4, [sp, #16]
 800b1ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b1b2:	2909      	cmp	r1, #9
 800b1b4:	d913      	bls.n	800b1de <_strtod_l+0x206>
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	9105      	str	r1, [sp, #20]
 800b1ba:	e7c2      	b.n	800b142 <_strtod_l+0x16a>
 800b1bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1be:	3001      	adds	r0, #1
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1c4:	785b      	ldrb	r3, [r3, #1]
 800b1c6:	2b30      	cmp	r3, #48	; 0x30
 800b1c8:	d0f8      	beq.n	800b1bc <_strtod_l+0x1e4>
 800b1ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b1ce:	2a08      	cmp	r2, #8
 800b1d0:	f200 84f0 	bhi.w	800bbb4 <_strtod_l+0xbdc>
 800b1d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b1d6:	9208      	str	r2, [sp, #32]
 800b1d8:	4602      	mov	r2, r0
 800b1da:	2000      	movs	r0, #0
 800b1dc:	4604      	mov	r4, r0
 800b1de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b1e2:	f100 0101 	add.w	r1, r0, #1
 800b1e6:	d012      	beq.n	800b20e <_strtod_l+0x236>
 800b1e8:	440a      	add	r2, r1
 800b1ea:	270a      	movs	r7, #10
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	eb00 0c04 	add.w	ip, r0, r4
 800b1f2:	458c      	cmp	ip, r1
 800b1f4:	d113      	bne.n	800b21e <_strtod_l+0x246>
 800b1f6:	1821      	adds	r1, r4, r0
 800b1f8:	2908      	cmp	r1, #8
 800b1fa:	f104 0401 	add.w	r4, r4, #1
 800b1fe:	4404      	add	r4, r0
 800b200:	dc19      	bgt.n	800b236 <_strtod_l+0x25e>
 800b202:	210a      	movs	r1, #10
 800b204:	9b06      	ldr	r3, [sp, #24]
 800b206:	fb01 e303 	mla	r3, r1, r3, lr
 800b20a:	9306      	str	r3, [sp, #24]
 800b20c:	2100      	movs	r1, #0
 800b20e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b210:	1c58      	adds	r0, r3, #1
 800b212:	901b      	str	r0, [sp, #108]	; 0x6c
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	4608      	mov	r0, r1
 800b218:	e7c9      	b.n	800b1ae <_strtod_l+0x1d6>
 800b21a:	9804      	ldr	r0, [sp, #16]
 800b21c:	e7d3      	b.n	800b1c6 <_strtod_l+0x1ee>
 800b21e:	2908      	cmp	r1, #8
 800b220:	f101 0101 	add.w	r1, r1, #1
 800b224:	dc03      	bgt.n	800b22e <_strtod_l+0x256>
 800b226:	9b06      	ldr	r3, [sp, #24]
 800b228:	437b      	muls	r3, r7
 800b22a:	9306      	str	r3, [sp, #24]
 800b22c:	e7e1      	b.n	800b1f2 <_strtod_l+0x21a>
 800b22e:	2910      	cmp	r1, #16
 800b230:	bfd8      	it	le
 800b232:	437d      	mulle	r5, r7
 800b234:	e7dd      	b.n	800b1f2 <_strtod_l+0x21a>
 800b236:	2c10      	cmp	r4, #16
 800b238:	bfdc      	itt	le
 800b23a:	210a      	movle	r1, #10
 800b23c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b240:	e7e4      	b.n	800b20c <_strtod_l+0x234>
 800b242:	2301      	movs	r3, #1
 800b244:	9305      	str	r3, [sp, #20]
 800b246:	e781      	b.n	800b14c <_strtod_l+0x174>
 800b248:	f04f 0c01 	mov.w	ip, #1
 800b24c:	1cb3      	adds	r3, r6, #2
 800b24e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b250:	78b3      	ldrb	r3, [r6, #2]
 800b252:	e78a      	b.n	800b16a <_strtod_l+0x192>
 800b254:	f04f 0c00 	mov.w	ip, #0
 800b258:	e7f8      	b.n	800b24c <_strtod_l+0x274>
 800b25a:	bf00      	nop
 800b25c:	0800ee2c 	.word	0x0800ee2c
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b266:	1c5f      	adds	r7, r3, #1
 800b268:	971b      	str	r7, [sp, #108]	; 0x6c
 800b26a:	785b      	ldrb	r3, [r3, #1]
 800b26c:	2b30      	cmp	r3, #48	; 0x30
 800b26e:	d0f9      	beq.n	800b264 <_strtod_l+0x28c>
 800b270:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b274:	2f08      	cmp	r7, #8
 800b276:	f63f af7d 	bhi.w	800b174 <_strtod_l+0x19c>
 800b27a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b27e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
 800b282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b284:	1c5f      	adds	r7, r3, #1
 800b286:	971b      	str	r7, [sp, #108]	; 0x6c
 800b288:	785b      	ldrb	r3, [r3, #1]
 800b28a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b28e:	f1b8 0f09 	cmp.w	r8, #9
 800b292:	d937      	bls.n	800b304 <_strtod_l+0x32c>
 800b294:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b296:	1a7f      	subs	r7, r7, r1
 800b298:	2f08      	cmp	r7, #8
 800b29a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b29e:	dc37      	bgt.n	800b310 <_strtod_l+0x338>
 800b2a0:	45be      	cmp	lr, r7
 800b2a2:	bfa8      	it	ge
 800b2a4:	46be      	movge	lr, r7
 800b2a6:	f1bc 0f00 	cmp.w	ip, #0
 800b2aa:	d001      	beq.n	800b2b0 <_strtod_l+0x2d8>
 800b2ac:	f1ce 0e00 	rsb	lr, lr, #0
 800b2b0:	2c00      	cmp	r4, #0
 800b2b2:	d151      	bne.n	800b358 <_strtod_l+0x380>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	f47f aece 	bne.w	800b056 <_strtod_l+0x7e>
 800b2ba:	9a07      	ldr	r2, [sp, #28]
 800b2bc:	2a00      	cmp	r2, #0
 800b2be:	f47f aeca 	bne.w	800b056 <_strtod_l+0x7e>
 800b2c2:	9a05      	ldr	r2, [sp, #20]
 800b2c4:	2a00      	cmp	r2, #0
 800b2c6:	f47f aee4 	bne.w	800b092 <_strtod_l+0xba>
 800b2ca:	2b4e      	cmp	r3, #78	; 0x4e
 800b2cc:	d027      	beq.n	800b31e <_strtod_l+0x346>
 800b2ce:	dc21      	bgt.n	800b314 <_strtod_l+0x33c>
 800b2d0:	2b49      	cmp	r3, #73	; 0x49
 800b2d2:	f47f aede 	bne.w	800b092 <_strtod_l+0xba>
 800b2d6:	49a4      	ldr	r1, [pc, #656]	; (800b568 <_strtod_l+0x590>)
 800b2d8:	a81b      	add	r0, sp, #108	; 0x6c
 800b2da:	f001 f8e7 	bl	800c4ac <__match>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f43f aed7 	beq.w	800b092 <_strtod_l+0xba>
 800b2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2e6:	49a1      	ldr	r1, [pc, #644]	; (800b56c <_strtod_l+0x594>)
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	a81b      	add	r0, sp, #108	; 0x6c
 800b2ec:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2ee:	f001 f8dd 	bl	800c4ac <__match>
 800b2f2:	b910      	cbnz	r0, 800b2fa <_strtod_l+0x322>
 800b2f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2fa:	f8df a284 	ldr.w	sl, [pc, #644]	; 800b580 <_strtod_l+0x5a8>
 800b2fe:	f04f 0900 	mov.w	r9, #0
 800b302:	e6a8      	b.n	800b056 <_strtod_l+0x7e>
 800b304:	210a      	movs	r1, #10
 800b306:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b30a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b30e:	e7b8      	b.n	800b282 <_strtod_l+0x2aa>
 800b310:	46be      	mov	lr, r7
 800b312:	e7c8      	b.n	800b2a6 <_strtod_l+0x2ce>
 800b314:	2b69      	cmp	r3, #105	; 0x69
 800b316:	d0de      	beq.n	800b2d6 <_strtod_l+0x2fe>
 800b318:	2b6e      	cmp	r3, #110	; 0x6e
 800b31a:	f47f aeba 	bne.w	800b092 <_strtod_l+0xba>
 800b31e:	4994      	ldr	r1, [pc, #592]	; (800b570 <_strtod_l+0x598>)
 800b320:	a81b      	add	r0, sp, #108	; 0x6c
 800b322:	f001 f8c3 	bl	800c4ac <__match>
 800b326:	2800      	cmp	r0, #0
 800b328:	f43f aeb3 	beq.w	800b092 <_strtod_l+0xba>
 800b32c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	2b28      	cmp	r3, #40	; 0x28
 800b332:	d10e      	bne.n	800b352 <_strtod_l+0x37a>
 800b334:	aa1e      	add	r2, sp, #120	; 0x78
 800b336:	498f      	ldr	r1, [pc, #572]	; (800b574 <_strtod_l+0x59c>)
 800b338:	a81b      	add	r0, sp, #108	; 0x6c
 800b33a:	f001 f8cb 	bl	800c4d4 <__hexnan>
 800b33e:	2805      	cmp	r0, #5
 800b340:	d107      	bne.n	800b352 <_strtod_l+0x37a>
 800b342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b344:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800b348:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800b34c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800b350:	e681      	b.n	800b056 <_strtod_l+0x7e>
 800b352:	f8df a234 	ldr.w	sl, [pc, #564]	; 800b588 <_strtod_l+0x5b0>
 800b356:	e7d2      	b.n	800b2fe <_strtod_l+0x326>
 800b358:	ebae 0302 	sub.w	r3, lr, r2
 800b35c:	9307      	str	r3, [sp, #28]
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	9806      	ldr	r0, [sp, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	bf08      	it	eq
 800b366:	4623      	moveq	r3, r4
 800b368:	2c10      	cmp	r4, #16
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	46a0      	mov	r8, r4
 800b36e:	bfa8      	it	ge
 800b370:	f04f 0810 	movge.w	r8, #16
 800b374:	f7f5 f836 	bl	80003e4 <__aeabi_ui2d>
 800b378:	2c09      	cmp	r4, #9
 800b37a:	4681      	mov	r9, r0
 800b37c:	468a      	mov	sl, r1
 800b37e:	dc13      	bgt.n	800b3a8 <_strtod_l+0x3d0>
 800b380:	9b07      	ldr	r3, [sp, #28]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f43f ae67 	beq.w	800b056 <_strtod_l+0x7e>
 800b388:	9b07      	ldr	r3, [sp, #28]
 800b38a:	dd7e      	ble.n	800b48a <_strtod_l+0x4b2>
 800b38c:	2b16      	cmp	r3, #22
 800b38e:	dc65      	bgt.n	800b45c <_strtod_l+0x484>
 800b390:	4a79      	ldr	r2, [pc, #484]	; (800b578 <_strtod_l+0x5a0>)
 800b392:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b396:	464a      	mov	r2, r9
 800b398:	e9de 0100 	ldrd	r0, r1, [lr]
 800b39c:	4653      	mov	r3, sl
 800b39e:	f7f5 f89b 	bl	80004d8 <__aeabi_dmul>
 800b3a2:	4681      	mov	r9, r0
 800b3a4:	468a      	mov	sl, r1
 800b3a6:	e656      	b.n	800b056 <_strtod_l+0x7e>
 800b3a8:	4b73      	ldr	r3, [pc, #460]	; (800b578 <_strtod_l+0x5a0>)
 800b3aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b3ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b3b2:	f7f5 f891 	bl	80004d8 <__aeabi_dmul>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	f7f5 f812 	bl	80003e4 <__aeabi_ui2d>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	4639      	mov	r1, r7
 800b3c8:	f7f4 fed0 	bl	800016c <__adddf3>
 800b3cc:	2c0f      	cmp	r4, #15
 800b3ce:	4681      	mov	r9, r0
 800b3d0:	468a      	mov	sl, r1
 800b3d2:	ddd5      	ble.n	800b380 <_strtod_l+0x3a8>
 800b3d4:	9b07      	ldr	r3, [sp, #28]
 800b3d6:	eba4 0808 	sub.w	r8, r4, r8
 800b3da:	4498      	add	r8, r3
 800b3dc:	f1b8 0f00 	cmp.w	r8, #0
 800b3e0:	f340 809a 	ble.w	800b518 <_strtod_l+0x540>
 800b3e4:	f018 030f 	ands.w	r3, r8, #15
 800b3e8:	d00a      	beq.n	800b400 <_strtod_l+0x428>
 800b3ea:	4963      	ldr	r1, [pc, #396]	; (800b578 <_strtod_l+0x5a0>)
 800b3ec:	464a      	mov	r2, r9
 800b3ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f6:	4653      	mov	r3, sl
 800b3f8:	f7f5 f86e 	bl	80004d8 <__aeabi_dmul>
 800b3fc:	4681      	mov	r9, r0
 800b3fe:	468a      	mov	sl, r1
 800b400:	f038 080f 	bics.w	r8, r8, #15
 800b404:	d077      	beq.n	800b4f6 <_strtod_l+0x51e>
 800b406:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b40a:	dd4b      	ble.n	800b4a4 <_strtod_l+0x4cc>
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	f8cd 8010 	str.w	r8, [sp, #16]
 800b414:	f8cd 8020 	str.w	r8, [sp, #32]
 800b418:	f8cd 8018 	str.w	r8, [sp, #24]
 800b41c:	2322      	movs	r3, #34	; 0x22
 800b41e:	f04f 0900 	mov.w	r9, #0
 800b422:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800b580 <_strtod_l+0x5a8>
 800b426:	f8cb 3000 	str.w	r3, [fp]
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f43f ae12 	beq.w	800b056 <_strtod_l+0x7e>
 800b432:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b434:	4658      	mov	r0, fp
 800b436:	f001 f935 	bl	800c6a4 <_Bfree>
 800b43a:	9906      	ldr	r1, [sp, #24]
 800b43c:	4658      	mov	r0, fp
 800b43e:	f001 f931 	bl	800c6a4 <_Bfree>
 800b442:	9904      	ldr	r1, [sp, #16]
 800b444:	4658      	mov	r0, fp
 800b446:	f001 f92d 	bl	800c6a4 <_Bfree>
 800b44a:	9908      	ldr	r1, [sp, #32]
 800b44c:	4658      	mov	r0, fp
 800b44e:	f001 f929 	bl	800c6a4 <_Bfree>
 800b452:	4641      	mov	r1, r8
 800b454:	4658      	mov	r0, fp
 800b456:	f001 f925 	bl	800c6a4 <_Bfree>
 800b45a:	e5fc      	b.n	800b056 <_strtod_l+0x7e>
 800b45c:	9a07      	ldr	r2, [sp, #28]
 800b45e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b462:	4293      	cmp	r3, r2
 800b464:	dbb6      	blt.n	800b3d4 <_strtod_l+0x3fc>
 800b466:	4d44      	ldr	r5, [pc, #272]	; (800b578 <_strtod_l+0x5a0>)
 800b468:	f1c4 040f 	rsb	r4, r4, #15
 800b46c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b470:	464a      	mov	r2, r9
 800b472:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b476:	4653      	mov	r3, sl
 800b478:	f7f5 f82e 	bl	80004d8 <__aeabi_dmul>
 800b47c:	9b07      	ldr	r3, [sp, #28]
 800b47e:	1b1c      	subs	r4, r3, r4
 800b480:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b484:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b488:	e789      	b.n	800b39e <_strtod_l+0x3c6>
 800b48a:	f113 0f16 	cmn.w	r3, #22
 800b48e:	dba1      	blt.n	800b3d4 <_strtod_l+0x3fc>
 800b490:	4a39      	ldr	r2, [pc, #228]	; (800b578 <_strtod_l+0x5a0>)
 800b492:	4648      	mov	r0, r9
 800b494:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b498:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b49c:	4651      	mov	r1, sl
 800b49e:	f7f5 f945 	bl	800072c <__aeabi_ddiv>
 800b4a2:	e77e      	b.n	800b3a2 <_strtod_l+0x3ca>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	4651      	mov	r1, sl
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	4e33      	ldr	r6, [pc, #204]	; (800b57c <_strtod_l+0x5a4>)
 800b4ae:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b4b2:	f1b8 0f01 	cmp.w	r8, #1
 800b4b6:	dc21      	bgt.n	800b4fc <_strtod_l+0x524>
 800b4b8:	b10b      	cbz	r3, 800b4be <_strtod_l+0x4e6>
 800b4ba:	4681      	mov	r9, r0
 800b4bc:	468a      	mov	sl, r1
 800b4be:	4b2f      	ldr	r3, [pc, #188]	; (800b57c <_strtod_l+0x5a4>)
 800b4c0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800b4c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b4c8:	464a      	mov	r2, r9
 800b4ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b4ce:	4653      	mov	r3, sl
 800b4d0:	f7f5 f802 	bl	80004d8 <__aeabi_dmul>
 800b4d4:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <_strtod_l+0x5a8>)
 800b4d6:	460a      	mov	r2, r1
 800b4d8:	400b      	ands	r3, r1
 800b4da:	492a      	ldr	r1, [pc, #168]	; (800b584 <_strtod_l+0x5ac>)
 800b4dc:	4681      	mov	r9, r0
 800b4de:	428b      	cmp	r3, r1
 800b4e0:	d894      	bhi.n	800b40c <_strtod_l+0x434>
 800b4e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b4e6:	428b      	cmp	r3, r1
 800b4e8:	bf86      	itte	hi
 800b4ea:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800b4ee:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800b58c <_strtod_l+0x5b4>
 800b4f2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	e07b      	b.n	800b5f4 <_strtod_l+0x61c>
 800b4fc:	f018 0f01 	tst.w	r8, #1
 800b500:	d006      	beq.n	800b510 <_strtod_l+0x538>
 800b502:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 ffe5 	bl	80004d8 <__aeabi_dmul>
 800b50e:	2301      	movs	r3, #1
 800b510:	3501      	adds	r5, #1
 800b512:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b516:	e7cc      	b.n	800b4b2 <_strtod_l+0x4da>
 800b518:	d0ed      	beq.n	800b4f6 <_strtod_l+0x51e>
 800b51a:	f1c8 0800 	rsb	r8, r8, #0
 800b51e:	f018 020f 	ands.w	r2, r8, #15
 800b522:	d00a      	beq.n	800b53a <_strtod_l+0x562>
 800b524:	4b14      	ldr	r3, [pc, #80]	; (800b578 <_strtod_l+0x5a0>)
 800b526:	4648      	mov	r0, r9
 800b528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b52c:	4651      	mov	r1, sl
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f5 f8fb 	bl	800072c <__aeabi_ddiv>
 800b536:	4681      	mov	r9, r0
 800b538:	468a      	mov	sl, r1
 800b53a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b53e:	d0da      	beq.n	800b4f6 <_strtod_l+0x51e>
 800b540:	f1b8 0f1f 	cmp.w	r8, #31
 800b544:	dd24      	ble.n	800b590 <_strtod_l+0x5b8>
 800b546:	f04f 0800 	mov.w	r8, #0
 800b54a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b54e:	f8cd 8020 	str.w	r8, [sp, #32]
 800b552:	f8cd 8018 	str.w	r8, [sp, #24]
 800b556:	2322      	movs	r3, #34	; 0x22
 800b558:	f04f 0900 	mov.w	r9, #0
 800b55c:	f04f 0a00 	mov.w	sl, #0
 800b560:	f8cb 3000 	str.w	r3, [fp]
 800b564:	e761      	b.n	800b42a <_strtod_l+0x452>
 800b566:	bf00      	nop
 800b568:	0800ee24 	.word	0x0800ee24
 800b56c:	0800f0c3 	.word	0x0800f0c3
 800b570:	0800ee27 	.word	0x0800ee27
 800b574:	0800ee40 	.word	0x0800ee40
 800b578:	0800eeb8 	.word	0x0800eeb8
 800b57c:	0800ee90 	.word	0x0800ee90
 800b580:	7ff00000 	.word	0x7ff00000
 800b584:	7ca00000 	.word	0x7ca00000
 800b588:	fff80000 	.word	0xfff80000
 800b58c:	7fefffff 	.word	0x7fefffff
 800b590:	f018 0310 	ands.w	r3, r8, #16
 800b594:	bf18      	it	ne
 800b596:	236a      	movne	r3, #106	; 0x6a
 800b598:	4648      	mov	r0, r9
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	4651      	mov	r1, sl
 800b59e:	2300      	movs	r3, #0
 800b5a0:	4da1      	ldr	r5, [pc, #644]	; (800b828 <_strtod_l+0x850>)
 800b5a2:	f1b8 0f00 	cmp.w	r8, #0
 800b5a6:	f300 8113 	bgt.w	800b7d0 <_strtod_l+0x7f8>
 800b5aa:	b10b      	cbz	r3, 800b5b0 <_strtod_l+0x5d8>
 800b5ac:	4681      	mov	r9, r0
 800b5ae:	468a      	mov	sl, r1
 800b5b0:	9b05      	ldr	r3, [sp, #20]
 800b5b2:	b1bb      	cbz	r3, 800b5e4 <_strtod_l+0x60c>
 800b5b4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800b5b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	4651      	mov	r1, sl
 800b5c0:	dd10      	ble.n	800b5e4 <_strtod_l+0x60c>
 800b5c2:	2b1f      	cmp	r3, #31
 800b5c4:	f340 8110 	ble.w	800b7e8 <_strtod_l+0x810>
 800b5c8:	2b34      	cmp	r3, #52	; 0x34
 800b5ca:	bfd8      	it	le
 800b5cc:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b5d0:	f04f 0900 	mov.w	r9, #0
 800b5d4:	bfcf      	iteee	gt
 800b5d6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800b5da:	3b20      	suble	r3, #32
 800b5dc:	fa02 f303 	lslle.w	r3, r2, r3
 800b5e0:	ea03 0a01 	andle.w	sl, r3, r1
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	4651      	mov	r1, sl
 800b5ec:	f7f5 f9dc 	bl	80009a8 <__aeabi_dcmpeq>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d1a8      	bne.n	800b546 <_strtod_l+0x56e>
 800b5f4:	9b06      	ldr	r3, [sp, #24]
 800b5f6:	9a04      	ldr	r2, [sp, #16]
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	9908      	ldr	r1, [sp, #32]
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	4658      	mov	r0, fp
 800b600:	f001 f8a2 	bl	800c748 <__s2b>
 800b604:	9008      	str	r0, [sp, #32]
 800b606:	2800      	cmp	r0, #0
 800b608:	f43f af00 	beq.w	800b40c <_strtod_l+0x434>
 800b60c:	9a07      	ldr	r2, [sp, #28]
 800b60e:	9b07      	ldr	r3, [sp, #28]
 800b610:	2a00      	cmp	r2, #0
 800b612:	f1c3 0300 	rsb	r3, r3, #0
 800b616:	bfa8      	it	ge
 800b618:	2300      	movge	r3, #0
 800b61a:	f04f 0800 	mov.w	r8, #0
 800b61e:	930e      	str	r3, [sp, #56]	; 0x38
 800b620:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b624:	9316      	str	r3, [sp, #88]	; 0x58
 800b626:	f8cd 8010 	str.w	r8, [sp, #16]
 800b62a:	9b08      	ldr	r3, [sp, #32]
 800b62c:	4658      	mov	r0, fp
 800b62e:	6859      	ldr	r1, [r3, #4]
 800b630:	f001 f804 	bl	800c63c <_Balloc>
 800b634:	9006      	str	r0, [sp, #24]
 800b636:	2800      	cmp	r0, #0
 800b638:	f43f aef0 	beq.w	800b41c <_strtod_l+0x444>
 800b63c:	9b08      	ldr	r3, [sp, #32]
 800b63e:	300c      	adds	r0, #12
 800b640:	691a      	ldr	r2, [r3, #16]
 800b642:	f103 010c 	add.w	r1, r3, #12
 800b646:	3202      	adds	r2, #2
 800b648:	0092      	lsls	r2, r2, #2
 800b64a:	f000 ffea 	bl	800c622 <memcpy>
 800b64e:	ab1e      	add	r3, sp, #120	; 0x78
 800b650:	9301      	str	r3, [sp, #4]
 800b652:	ab1d      	add	r3, sp, #116	; 0x74
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	464a      	mov	r2, r9
 800b658:	4653      	mov	r3, sl
 800b65a:	4658      	mov	r0, fp
 800b65c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800b660:	f001 fb2c 	bl	800ccbc <__d2b>
 800b664:	901c      	str	r0, [sp, #112]	; 0x70
 800b666:	2800      	cmp	r0, #0
 800b668:	f43f aed8 	beq.w	800b41c <_strtod_l+0x444>
 800b66c:	2101      	movs	r1, #1
 800b66e:	4658      	mov	r0, fp
 800b670:	f001 f8f6 	bl	800c860 <__i2b>
 800b674:	9004      	str	r0, [sp, #16]
 800b676:	4603      	mov	r3, r0
 800b678:	2800      	cmp	r0, #0
 800b67a:	f43f aecf 	beq.w	800b41c <_strtod_l+0x444>
 800b67e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b680:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b682:	2d00      	cmp	r5, #0
 800b684:	bfab      	itete	ge
 800b686:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b688:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b68a:	18ee      	addge	r6, r5, r3
 800b68c:	1b5c      	sublt	r4, r3, r5
 800b68e:	9b05      	ldr	r3, [sp, #20]
 800b690:	bfa8      	it	ge
 800b692:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800b694:	eba5 0503 	sub.w	r5, r5, r3
 800b698:	4415      	add	r5, r2
 800b69a:	4b64      	ldr	r3, [pc, #400]	; (800b82c <_strtod_l+0x854>)
 800b69c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800b6a0:	bfb8      	it	lt
 800b6a2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b6a4:	429d      	cmp	r5, r3
 800b6a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6aa:	f280 80af 	bge.w	800b80c <_strtod_l+0x834>
 800b6ae:	1b5b      	subs	r3, r3, r5
 800b6b0:	2b1f      	cmp	r3, #31
 800b6b2:	eba2 0203 	sub.w	r2, r2, r3
 800b6b6:	f04f 0701 	mov.w	r7, #1
 800b6ba:	f300 809c 	bgt.w	800b7f6 <_strtod_l+0x81e>
 800b6be:	2500      	movs	r5, #0
 800b6c0:	fa07 f303 	lsl.w	r3, r7, r3
 800b6c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c6:	18b7      	adds	r7, r6, r2
 800b6c8:	9b05      	ldr	r3, [sp, #20]
 800b6ca:	42be      	cmp	r6, r7
 800b6cc:	4414      	add	r4, r2
 800b6ce:	441c      	add	r4, r3
 800b6d0:	4633      	mov	r3, r6
 800b6d2:	bfa8      	it	ge
 800b6d4:	463b      	movge	r3, r7
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	bfa8      	it	ge
 800b6da:	4623      	movge	r3, r4
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfc2      	ittt	gt
 800b6e0:	1aff      	subgt	r7, r7, r3
 800b6e2:	1ae4      	subgt	r4, r4, r3
 800b6e4:	1af6      	subgt	r6, r6, r3
 800b6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6e8:	b1bb      	cbz	r3, 800b71a <_strtod_l+0x742>
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	9904      	ldr	r1, [sp, #16]
 800b6ee:	4658      	mov	r0, fp
 800b6f0:	f001 f954 	bl	800c99c <__pow5mult>
 800b6f4:	9004      	str	r0, [sp, #16]
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f43f ae90 	beq.w	800b41c <_strtod_l+0x444>
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b700:	4658      	mov	r0, fp
 800b702:	f001 f8b6 	bl	800c872 <__multiply>
 800b706:	9009      	str	r0, [sp, #36]	; 0x24
 800b708:	2800      	cmp	r0, #0
 800b70a:	f43f ae87 	beq.w	800b41c <_strtod_l+0x444>
 800b70e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b710:	4658      	mov	r0, fp
 800b712:	f000 ffc7 	bl	800c6a4 <_Bfree>
 800b716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b718:	931c      	str	r3, [sp, #112]	; 0x70
 800b71a:	2f00      	cmp	r7, #0
 800b71c:	dc7a      	bgt.n	800b814 <_strtod_l+0x83c>
 800b71e:	9b07      	ldr	r3, [sp, #28]
 800b720:	2b00      	cmp	r3, #0
 800b722:	dd08      	ble.n	800b736 <_strtod_l+0x75e>
 800b724:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b726:	9906      	ldr	r1, [sp, #24]
 800b728:	4658      	mov	r0, fp
 800b72a:	f001 f937 	bl	800c99c <__pow5mult>
 800b72e:	9006      	str	r0, [sp, #24]
 800b730:	2800      	cmp	r0, #0
 800b732:	f43f ae73 	beq.w	800b41c <_strtod_l+0x444>
 800b736:	2c00      	cmp	r4, #0
 800b738:	dd08      	ble.n	800b74c <_strtod_l+0x774>
 800b73a:	4622      	mov	r2, r4
 800b73c:	9906      	ldr	r1, [sp, #24]
 800b73e:	4658      	mov	r0, fp
 800b740:	f001 f97a 	bl	800ca38 <__lshift>
 800b744:	9006      	str	r0, [sp, #24]
 800b746:	2800      	cmp	r0, #0
 800b748:	f43f ae68 	beq.w	800b41c <_strtod_l+0x444>
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	dd08      	ble.n	800b762 <_strtod_l+0x78a>
 800b750:	4632      	mov	r2, r6
 800b752:	9904      	ldr	r1, [sp, #16]
 800b754:	4658      	mov	r0, fp
 800b756:	f001 f96f 	bl	800ca38 <__lshift>
 800b75a:	9004      	str	r0, [sp, #16]
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f43f ae5d 	beq.w	800b41c <_strtod_l+0x444>
 800b762:	9a06      	ldr	r2, [sp, #24]
 800b764:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b766:	4658      	mov	r0, fp
 800b768:	f001 f9d4 	bl	800cb14 <__mdiff>
 800b76c:	4680      	mov	r8, r0
 800b76e:	2800      	cmp	r0, #0
 800b770:	f43f ae54 	beq.w	800b41c <_strtod_l+0x444>
 800b774:	2400      	movs	r4, #0
 800b776:	68c3      	ldr	r3, [r0, #12]
 800b778:	9904      	ldr	r1, [sp, #16]
 800b77a:	60c4      	str	r4, [r0, #12]
 800b77c:	930c      	str	r3, [sp, #48]	; 0x30
 800b77e:	f001 f9af 	bl	800cae0 <__mcmp>
 800b782:	42a0      	cmp	r0, r4
 800b784:	da54      	bge.n	800b830 <_strtod_l+0x858>
 800b786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b788:	b9f3      	cbnz	r3, 800b7c8 <_strtod_l+0x7f0>
 800b78a:	f1b9 0f00 	cmp.w	r9, #0
 800b78e:	d11b      	bne.n	800b7c8 <_strtod_l+0x7f0>
 800b790:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b794:	b9c3      	cbnz	r3, 800b7c8 <_strtod_l+0x7f0>
 800b796:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b79a:	0d1b      	lsrs	r3, r3, #20
 800b79c:	051b      	lsls	r3, r3, #20
 800b79e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b7a2:	d911      	bls.n	800b7c8 <_strtod_l+0x7f0>
 800b7a4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b7a8:	b91b      	cbnz	r3, 800b7b2 <_strtod_l+0x7da>
 800b7aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	dd0a      	ble.n	800b7c8 <_strtod_l+0x7f0>
 800b7b2:	4641      	mov	r1, r8
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	4658      	mov	r0, fp
 800b7b8:	f001 f93e 	bl	800ca38 <__lshift>
 800b7bc:	9904      	ldr	r1, [sp, #16]
 800b7be:	4680      	mov	r8, r0
 800b7c0:	f001 f98e 	bl	800cae0 <__mcmp>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	dc68      	bgt.n	800b89a <_strtod_l+0x8c2>
 800b7c8:	9b05      	ldr	r3, [sp, #20]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d172      	bne.n	800b8b4 <_strtod_l+0x8dc>
 800b7ce:	e630      	b.n	800b432 <_strtod_l+0x45a>
 800b7d0:	f018 0f01 	tst.w	r8, #1
 800b7d4:	d004      	beq.n	800b7e0 <_strtod_l+0x808>
 800b7d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7da:	f7f4 fe7d 	bl	80004d8 <__aeabi_dmul>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b7e4:	3508      	adds	r5, #8
 800b7e6:	e6dc      	b.n	800b5a2 <_strtod_l+0x5ca>
 800b7e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f0:	ea03 0909 	and.w	r9, r3, r9
 800b7f4:	e6f6      	b.n	800b5e4 <_strtod_l+0x60c>
 800b7f6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b7fa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b7fe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b802:	35e2      	adds	r5, #226	; 0xe2
 800b804:	fa07 f505 	lsl.w	r5, r7, r5
 800b808:	970f      	str	r7, [sp, #60]	; 0x3c
 800b80a:	e75c      	b.n	800b6c6 <_strtod_l+0x6ee>
 800b80c:	2301      	movs	r3, #1
 800b80e:	2500      	movs	r5, #0
 800b810:	930f      	str	r3, [sp, #60]	; 0x3c
 800b812:	e758      	b.n	800b6c6 <_strtod_l+0x6ee>
 800b814:	463a      	mov	r2, r7
 800b816:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b818:	4658      	mov	r0, fp
 800b81a:	f001 f90d 	bl	800ca38 <__lshift>
 800b81e:	901c      	str	r0, [sp, #112]	; 0x70
 800b820:	2800      	cmp	r0, #0
 800b822:	f47f af7c 	bne.w	800b71e <_strtod_l+0x746>
 800b826:	e5f9      	b.n	800b41c <_strtod_l+0x444>
 800b828:	0800ee58 	.word	0x0800ee58
 800b82c:	fffffc02 	.word	0xfffffc02
 800b830:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b834:	f040 8089 	bne.w	800b94a <_strtod_l+0x972>
 800b838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b83a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b83e:	b342      	cbz	r2, 800b892 <_strtod_l+0x8ba>
 800b840:	4aaf      	ldr	r2, [pc, #700]	; (800bb00 <_strtod_l+0xb28>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d156      	bne.n	800b8f4 <_strtod_l+0x91c>
 800b846:	9b05      	ldr	r3, [sp, #20]
 800b848:	4648      	mov	r0, r9
 800b84a:	b1eb      	cbz	r3, 800b888 <_strtod_l+0x8b0>
 800b84c:	4653      	mov	r3, sl
 800b84e:	4aad      	ldr	r2, [pc, #692]	; (800bb04 <_strtod_l+0xb2c>)
 800b850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b854:	401a      	ands	r2, r3
 800b856:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b85a:	d818      	bhi.n	800b88e <_strtod_l+0x8b6>
 800b85c:	0d12      	lsrs	r2, r2, #20
 800b85e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b862:	fa01 f303 	lsl.w	r3, r1, r3
 800b866:	4298      	cmp	r0, r3
 800b868:	d144      	bne.n	800b8f4 <_strtod_l+0x91c>
 800b86a:	4ba7      	ldr	r3, [pc, #668]	; (800bb08 <_strtod_l+0xb30>)
 800b86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b86e:	429a      	cmp	r2, r3
 800b870:	d102      	bne.n	800b878 <_strtod_l+0x8a0>
 800b872:	3001      	adds	r0, #1
 800b874:	f43f add2 	beq.w	800b41c <_strtod_l+0x444>
 800b878:	4ba2      	ldr	r3, [pc, #648]	; (800bb04 <_strtod_l+0xb2c>)
 800b87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b87c:	f04f 0900 	mov.w	r9, #0
 800b880:	401a      	ands	r2, r3
 800b882:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800b886:	e79f      	b.n	800b7c8 <_strtod_l+0x7f0>
 800b888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b88c:	e7eb      	b.n	800b866 <_strtod_l+0x88e>
 800b88e:	460b      	mov	r3, r1
 800b890:	e7e9      	b.n	800b866 <_strtod_l+0x88e>
 800b892:	bb7b      	cbnz	r3, 800b8f4 <_strtod_l+0x91c>
 800b894:	f1b9 0f00 	cmp.w	r9, #0
 800b898:	d12c      	bne.n	800b8f4 <_strtod_l+0x91c>
 800b89a:	9905      	ldr	r1, [sp, #20]
 800b89c:	4653      	mov	r3, sl
 800b89e:	4a99      	ldr	r2, [pc, #612]	; (800bb04 <_strtod_l+0xb2c>)
 800b8a0:	b1f1      	cbz	r1, 800b8e0 <_strtod_l+0x908>
 800b8a2:	ea02 010a 	and.w	r1, r2, sl
 800b8a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b8aa:	dc19      	bgt.n	800b8e0 <_strtod_l+0x908>
 800b8ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b8b0:	f77f ae51 	ble.w	800b556 <_strtod_l+0x57e>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4a95      	ldr	r2, [pc, #596]	; (800bb0c <_strtod_l+0xb34>)
 800b8b8:	4648      	mov	r0, r9
 800b8ba:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b8be:	4651      	mov	r1, sl
 800b8c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b8c4:	f7f4 fe08 	bl	80004d8 <__aeabi_dmul>
 800b8c8:	4681      	mov	r9, r0
 800b8ca:	468a      	mov	sl, r1
 800b8cc:	2900      	cmp	r1, #0
 800b8ce:	f47f adb0 	bne.w	800b432 <_strtod_l+0x45a>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	f47f adad 	bne.w	800b432 <_strtod_l+0x45a>
 800b8d8:	2322      	movs	r3, #34	; 0x22
 800b8da:	f8cb 3000 	str.w	r3, [fp]
 800b8de:	e5a8      	b.n	800b432 <_strtod_l+0x45a>
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b8e6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800b8ea:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b8ee:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800b8f2:	e769      	b.n	800b7c8 <_strtod_l+0x7f0>
 800b8f4:	b19d      	cbz	r5, 800b91e <_strtod_l+0x946>
 800b8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f8:	421d      	tst	r5, r3
 800b8fa:	f43f af65 	beq.w	800b7c8 <_strtod_l+0x7f0>
 800b8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b900:	9a05      	ldr	r2, [sp, #20]
 800b902:	4648      	mov	r0, r9
 800b904:	4651      	mov	r1, sl
 800b906:	b173      	cbz	r3, 800b926 <_strtod_l+0x94e>
 800b908:	f7ff fb44 	bl	800af94 <sulp>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b914:	f7f4 fc2a 	bl	800016c <__adddf3>
 800b918:	4681      	mov	r9, r0
 800b91a:	468a      	mov	sl, r1
 800b91c:	e754      	b.n	800b7c8 <_strtod_l+0x7f0>
 800b91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b920:	ea13 0f09 	tst.w	r3, r9
 800b924:	e7e9      	b.n	800b8fa <_strtod_l+0x922>
 800b926:	f7ff fb35 	bl	800af94 <sulp>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b932:	f7f4 fc19 	bl	8000168 <__aeabi_dsub>
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	4681      	mov	r9, r0
 800b93c:	468a      	mov	sl, r1
 800b93e:	f7f5 f833 	bl	80009a8 <__aeabi_dcmpeq>
 800b942:	2800      	cmp	r0, #0
 800b944:	f47f ae07 	bne.w	800b556 <_strtod_l+0x57e>
 800b948:	e73e      	b.n	800b7c8 <_strtod_l+0x7f0>
 800b94a:	9904      	ldr	r1, [sp, #16]
 800b94c:	4640      	mov	r0, r8
 800b94e:	f001 fa04 	bl	800cd5a <__ratio>
 800b952:	2200      	movs	r2, #0
 800b954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b958:	4606      	mov	r6, r0
 800b95a:	460f      	mov	r7, r1
 800b95c:	f7f5 f838 	bl	80009d0 <__aeabi_dcmple>
 800b960:	2800      	cmp	r0, #0
 800b962:	d075      	beq.n	800ba50 <_strtod_l+0xa78>
 800b964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b966:	2b00      	cmp	r3, #0
 800b968:	d047      	beq.n	800b9fa <_strtod_l+0xa22>
 800b96a:	2600      	movs	r6, #0
 800b96c:	4f68      	ldr	r7, [pc, #416]	; (800bb10 <_strtod_l+0xb38>)
 800b96e:	4d68      	ldr	r5, [pc, #416]	; (800bb10 <_strtod_l+0xb38>)
 800b970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b976:	0d1b      	lsrs	r3, r3, #20
 800b978:	051b      	lsls	r3, r3, #20
 800b97a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b97c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b97e:	4b65      	ldr	r3, [pc, #404]	; (800bb14 <_strtod_l+0xb3c>)
 800b980:	429a      	cmp	r2, r3
 800b982:	f040 80cf 	bne.w	800bb24 <_strtod_l+0xb4c>
 800b986:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b98a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b990:	4648      	mov	r0, r9
 800b992:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800b996:	4651      	mov	r1, sl
 800b998:	f001 f91a 	bl	800cbd0 <__ulp>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	f7f4 fd98 	bl	80004d8 <__aeabi_dmul>
 800b9a8:	464a      	mov	r2, r9
 800b9aa:	4653      	mov	r3, sl
 800b9ac:	f7f4 fbde 	bl	800016c <__adddf3>
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4954      	ldr	r1, [pc, #336]	; (800bb04 <_strtod_l+0xb2c>)
 800b9b4:	4a58      	ldr	r2, [pc, #352]	; (800bb18 <_strtod_l+0xb40>)
 800b9b6:	4019      	ands	r1, r3
 800b9b8:	4291      	cmp	r1, r2
 800b9ba:	4681      	mov	r9, r0
 800b9bc:	d95e      	bls.n	800ba7c <_strtod_l+0xaa4>
 800b9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d103      	bne.n	800b9d0 <_strtod_l+0x9f8>
 800b9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	f43f ad26 	beq.w	800b41c <_strtod_l+0x444>
 800b9d0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b9d4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800bb08 <_strtod_l+0xb30>
 800b9d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 fe62 	bl	800c6a4 <_Bfree>
 800b9e0:	9906      	ldr	r1, [sp, #24]
 800b9e2:	4658      	mov	r0, fp
 800b9e4:	f000 fe5e 	bl	800c6a4 <_Bfree>
 800b9e8:	9904      	ldr	r1, [sp, #16]
 800b9ea:	4658      	mov	r0, fp
 800b9ec:	f000 fe5a 	bl	800c6a4 <_Bfree>
 800b9f0:	4641      	mov	r1, r8
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	f000 fe56 	bl	800c6a4 <_Bfree>
 800b9f8:	e617      	b.n	800b62a <_strtod_l+0x652>
 800b9fa:	f1b9 0f00 	cmp.w	r9, #0
 800b9fe:	d119      	bne.n	800ba34 <_strtod_l+0xa5c>
 800ba00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba06:	b9e3      	cbnz	r3, 800ba42 <_strtod_l+0xa6a>
 800ba08:	2200      	movs	r2, #0
 800ba0a:	4b41      	ldr	r3, [pc, #260]	; (800bb10 <_strtod_l+0xb38>)
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	4639      	mov	r1, r7
 800ba10:	f7f4 ffd4 	bl	80009bc <__aeabi_dcmplt>
 800ba14:	b9c8      	cbnz	r0, 800ba4a <_strtod_l+0xa72>
 800ba16:	2200      	movs	r2, #0
 800ba18:	4b40      	ldr	r3, [pc, #256]	; (800bb1c <_strtod_l+0xb44>)
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fd5b 	bl	80004d8 <__aeabi_dmul>
 800ba22:	4604      	mov	r4, r0
 800ba24:	460d      	mov	r5, r1
 800ba26:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ba2a:	9418      	str	r4, [sp, #96]	; 0x60
 800ba2c:	9319      	str	r3, [sp, #100]	; 0x64
 800ba2e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ba32:	e79d      	b.n	800b970 <_strtod_l+0x998>
 800ba34:	f1b9 0f01 	cmp.w	r9, #1
 800ba38:	d103      	bne.n	800ba42 <_strtod_l+0xa6a>
 800ba3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f43f ad8a 	beq.w	800b556 <_strtod_l+0x57e>
 800ba42:	2600      	movs	r6, #0
 800ba44:	4f36      	ldr	r7, [pc, #216]	; (800bb20 <_strtod_l+0xb48>)
 800ba46:	2400      	movs	r4, #0
 800ba48:	e791      	b.n	800b96e <_strtod_l+0x996>
 800ba4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ba4c:	4d33      	ldr	r5, [pc, #204]	; (800bb1c <_strtod_l+0xb44>)
 800ba4e:	e7ea      	b.n	800ba26 <_strtod_l+0xa4e>
 800ba50:	4b32      	ldr	r3, [pc, #200]	; (800bb1c <_strtod_l+0xb44>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f7f4 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ba5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba5e:	4604      	mov	r4, r0
 800ba60:	460d      	mov	r5, r1
 800ba62:	b933      	cbnz	r3, 800ba72 <_strtod_l+0xa9a>
 800ba64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba68:	9010      	str	r0, [sp, #64]	; 0x40
 800ba6a:	9311      	str	r3, [sp, #68]	; 0x44
 800ba6c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ba70:	e77e      	b.n	800b970 <_strtod_l+0x998>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ba7a:	e7f7      	b.n	800ba6c <_strtod_l+0xa94>
 800ba7c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ba80:	9b05      	ldr	r3, [sp, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1a8      	bne.n	800b9d8 <_strtod_l+0xa00>
 800ba86:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ba8a:	0d1b      	lsrs	r3, r3, #20
 800ba8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba8e:	051b      	lsls	r3, r3, #20
 800ba90:	429a      	cmp	r2, r3
 800ba92:	4656      	mov	r6, sl
 800ba94:	d1a0      	bne.n	800b9d8 <_strtod_l+0xa00>
 800ba96:	4629      	mov	r1, r5
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f7f4 ffb7 	bl	8000a0c <__aeabi_d2iz>
 800ba9e:	f7f4 fcb1 	bl	8000404 <__aeabi_i2d>
 800baa2:	460b      	mov	r3, r1
 800baa4:	4602      	mov	r2, r0
 800baa6:	4629      	mov	r1, r5
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7f4 fb5d 	bl	8000168 <__aeabi_dsub>
 800baae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab0:	4604      	mov	r4, r0
 800bab2:	460d      	mov	r5, r1
 800bab4:	b933      	cbnz	r3, 800bac4 <_strtod_l+0xaec>
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	d103      	bne.n	800bac4 <_strtod_l+0xaec>
 800babc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800bac0:	2e00      	cmp	r6, #0
 800bac2:	d06a      	beq.n	800bb9a <_strtod_l+0xbc2>
 800bac4:	a30a      	add	r3, pc, #40	; (adr r3, 800baf0 <_strtod_l+0xb18>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	f7f4 ff75 	bl	80009bc <__aeabi_dcmplt>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f47f acad 	bne.w	800b432 <_strtod_l+0x45a>
 800bad8:	a307      	add	r3, pc, #28	; (adr r3, 800baf8 <_strtod_l+0xb20>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	4620      	mov	r0, r4
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7f4 ff89 	bl	80009f8 <__aeabi_dcmpgt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f43f af76 	beq.w	800b9d8 <_strtod_l+0xa00>
 800baec:	e4a1      	b.n	800b432 <_strtod_l+0x45a>
 800baee:	bf00      	nop
 800baf0:	94a03595 	.word	0x94a03595
 800baf4:	3fdfffff 	.word	0x3fdfffff
 800baf8:	35afe535 	.word	0x35afe535
 800bafc:	3fe00000 	.word	0x3fe00000
 800bb00:	000fffff 	.word	0x000fffff
 800bb04:	7ff00000 	.word	0x7ff00000
 800bb08:	7fefffff 	.word	0x7fefffff
 800bb0c:	39500000 	.word	0x39500000
 800bb10:	3ff00000 	.word	0x3ff00000
 800bb14:	7fe00000 	.word	0x7fe00000
 800bb18:	7c9fffff 	.word	0x7c9fffff
 800bb1c:	3fe00000 	.word	0x3fe00000
 800bb20:	bff00000 	.word	0xbff00000
 800bb24:	9b05      	ldr	r3, [sp, #20]
 800bb26:	b313      	cbz	r3, 800bb6e <_strtod_l+0xb96>
 800bb28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb2e:	d81e      	bhi.n	800bb6e <_strtod_l+0xb96>
 800bb30:	a325      	add	r3, pc, #148	; (adr r3, 800bbc8 <_strtod_l+0xbf0>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 ff49 	bl	80009d0 <__aeabi_dcmple>
 800bb3e:	b190      	cbz	r0, 800bb66 <_strtod_l+0xb8e>
 800bb40:	4629      	mov	r1, r5
 800bb42:	4620      	mov	r0, r4
 800bb44:	f7f4 ff8a 	bl	8000a5c <__aeabi_d2uiz>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	bf08      	it	eq
 800bb4c:	2001      	moveq	r0, #1
 800bb4e:	f7f4 fc49 	bl	80003e4 <__aeabi_ui2d>
 800bb52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	b9d3      	cbnz	r3, 800bb90 <_strtod_l+0xbb8>
 800bb5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb5e:	9012      	str	r0, [sp, #72]	; 0x48
 800bb60:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb62:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800bb66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb68:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800bb6c:	1a9f      	subs	r7, r3, r2
 800bb6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb72:	f001 f82d 	bl	800cbd0 <__ulp>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	f7f4 fcab 	bl	80004d8 <__aeabi_dmul>
 800bb82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb86:	f7f4 faf1 	bl	800016c <__adddf3>
 800bb8a:	4681      	mov	r9, r0
 800bb8c:	468a      	mov	sl, r1
 800bb8e:	e777      	b.n	800ba80 <_strtod_l+0xaa8>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800bb98:	e7e3      	b.n	800bb62 <_strtod_l+0xb8a>
 800bb9a:	a30d      	add	r3, pc, #52	; (adr r3, 800bbd0 <_strtod_l+0xbf8>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 ff0c 	bl	80009bc <__aeabi_dcmplt>
 800bba4:	e79f      	b.n	800bae6 <_strtod_l+0xb0e>
 800bba6:	2300      	movs	r3, #0
 800bba8:	930d      	str	r3, [sp, #52]	; 0x34
 800bbaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	f7ff ba55 	b.w	800b05e <_strtod_l+0x86>
 800bbb4:	2b65      	cmp	r3, #101	; 0x65
 800bbb6:	f04f 0200 	mov.w	r2, #0
 800bbba:	f43f ab42 	beq.w	800b242 <_strtod_l+0x26a>
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	9105      	str	r1, [sp, #20]
 800bbc4:	f7ff babf 	b.w	800b146 <_strtod_l+0x16e>
 800bbc8:	ffc00000 	.word	0xffc00000
 800bbcc:	41dfffff 	.word	0x41dfffff
 800bbd0:	94a03595 	.word	0x94a03595
 800bbd4:	3fcfffff 	.word	0x3fcfffff

0800bbd8 <strtod>:
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <strtod+0x1c>)
 800bbda:	b410      	push	{r4}
 800bbdc:	681c      	ldr	r4, [r3, #0]
 800bbde:	4a06      	ldr	r2, [pc, #24]	; (800bbf8 <strtod+0x20>)
 800bbe0:	6a23      	ldr	r3, [r4, #32]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	bf08      	it	eq
 800bbe6:	4613      	moveq	r3, r2
 800bbe8:	460a      	mov	r2, r1
 800bbea:	4601      	mov	r1, r0
 800bbec:	4620      	mov	r0, r4
 800bbee:	bc10      	pop	{r4}
 800bbf0:	f7ff b9f2 	b.w	800afd8 <_strtod_l>
 800bbf4:	20000070 	.word	0x20000070
 800bbf8:	200000d4 	.word	0x200000d4

0800bbfc <_strtol_l.isra.0>:
 800bbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc00:	4680      	mov	r8, r0
 800bc02:	4689      	mov	r9, r1
 800bc04:	4692      	mov	sl, r2
 800bc06:	461e      	mov	r6, r3
 800bc08:	460f      	mov	r7, r1
 800bc0a:	463d      	mov	r5, r7
 800bc0c:	9808      	ldr	r0, [sp, #32]
 800bc0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc12:	f000 fcef 	bl	800c5f4 <__locale_ctype_ptr_l>
 800bc16:	4420      	add	r0, r4
 800bc18:	7843      	ldrb	r3, [r0, #1]
 800bc1a:	f013 0308 	ands.w	r3, r3, #8
 800bc1e:	d132      	bne.n	800bc86 <_strtol_l.isra.0+0x8a>
 800bc20:	2c2d      	cmp	r4, #45	; 0x2d
 800bc22:	d132      	bne.n	800bc8a <_strtol_l.isra.0+0x8e>
 800bc24:	2201      	movs	r2, #1
 800bc26:	787c      	ldrb	r4, [r7, #1]
 800bc28:	1cbd      	adds	r5, r7, #2
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	d05d      	beq.n	800bcea <_strtol_l.isra.0+0xee>
 800bc2e:	2e10      	cmp	r6, #16
 800bc30:	d109      	bne.n	800bc46 <_strtol_l.isra.0+0x4a>
 800bc32:	2c30      	cmp	r4, #48	; 0x30
 800bc34:	d107      	bne.n	800bc46 <_strtol_l.isra.0+0x4a>
 800bc36:	782b      	ldrb	r3, [r5, #0]
 800bc38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc3c:	2b58      	cmp	r3, #88	; 0x58
 800bc3e:	d14f      	bne.n	800bce0 <_strtol_l.isra.0+0xe4>
 800bc40:	2610      	movs	r6, #16
 800bc42:	786c      	ldrb	r4, [r5, #1]
 800bc44:	3502      	adds	r5, #2
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	bf14      	ite	ne
 800bc4a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bc4e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bc52:	2700      	movs	r7, #0
 800bc54:	fbb1 fcf6 	udiv	ip, r1, r6
 800bc58:	4638      	mov	r0, r7
 800bc5a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bc5e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bc62:	2b09      	cmp	r3, #9
 800bc64:	d817      	bhi.n	800bc96 <_strtol_l.isra.0+0x9a>
 800bc66:	461c      	mov	r4, r3
 800bc68:	42a6      	cmp	r6, r4
 800bc6a:	dd23      	ble.n	800bcb4 <_strtol_l.isra.0+0xb8>
 800bc6c:	1c7b      	adds	r3, r7, #1
 800bc6e:	d007      	beq.n	800bc80 <_strtol_l.isra.0+0x84>
 800bc70:	4584      	cmp	ip, r0
 800bc72:	d31c      	bcc.n	800bcae <_strtol_l.isra.0+0xb2>
 800bc74:	d101      	bne.n	800bc7a <_strtol_l.isra.0+0x7e>
 800bc76:	45a6      	cmp	lr, r4
 800bc78:	db19      	blt.n	800bcae <_strtol_l.isra.0+0xb2>
 800bc7a:	2701      	movs	r7, #1
 800bc7c:	fb00 4006 	mla	r0, r0, r6, r4
 800bc80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc84:	e7eb      	b.n	800bc5e <_strtol_l.isra.0+0x62>
 800bc86:	462f      	mov	r7, r5
 800bc88:	e7bf      	b.n	800bc0a <_strtol_l.isra.0+0xe>
 800bc8a:	2c2b      	cmp	r4, #43	; 0x2b
 800bc8c:	bf04      	itt	eq
 800bc8e:	1cbd      	addeq	r5, r7, #2
 800bc90:	787c      	ldrbeq	r4, [r7, #1]
 800bc92:	461a      	mov	r2, r3
 800bc94:	e7c9      	b.n	800bc2a <_strtol_l.isra.0+0x2e>
 800bc96:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bc9a:	2b19      	cmp	r3, #25
 800bc9c:	d801      	bhi.n	800bca2 <_strtol_l.isra.0+0xa6>
 800bc9e:	3c37      	subs	r4, #55	; 0x37
 800bca0:	e7e2      	b.n	800bc68 <_strtol_l.isra.0+0x6c>
 800bca2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bca6:	2b19      	cmp	r3, #25
 800bca8:	d804      	bhi.n	800bcb4 <_strtol_l.isra.0+0xb8>
 800bcaa:	3c57      	subs	r4, #87	; 0x57
 800bcac:	e7dc      	b.n	800bc68 <_strtol_l.isra.0+0x6c>
 800bcae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bcb2:	e7e5      	b.n	800bc80 <_strtol_l.isra.0+0x84>
 800bcb4:	1c7b      	adds	r3, r7, #1
 800bcb6:	d108      	bne.n	800bcca <_strtol_l.isra.0+0xce>
 800bcb8:	2322      	movs	r3, #34	; 0x22
 800bcba:	4608      	mov	r0, r1
 800bcbc:	f8c8 3000 	str.w	r3, [r8]
 800bcc0:	f1ba 0f00 	cmp.w	sl, #0
 800bcc4:	d107      	bne.n	800bcd6 <_strtol_l.isra.0+0xda>
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	b102      	cbz	r2, 800bcce <_strtol_l.isra.0+0xd2>
 800bccc:	4240      	negs	r0, r0
 800bcce:	f1ba 0f00 	cmp.w	sl, #0
 800bcd2:	d0f8      	beq.n	800bcc6 <_strtol_l.isra.0+0xca>
 800bcd4:	b10f      	cbz	r7, 800bcda <_strtol_l.isra.0+0xde>
 800bcd6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800bcda:	f8ca 9000 	str.w	r9, [sl]
 800bcde:	e7f2      	b.n	800bcc6 <_strtol_l.isra.0+0xca>
 800bce0:	2430      	movs	r4, #48	; 0x30
 800bce2:	2e00      	cmp	r6, #0
 800bce4:	d1af      	bne.n	800bc46 <_strtol_l.isra.0+0x4a>
 800bce6:	2608      	movs	r6, #8
 800bce8:	e7ad      	b.n	800bc46 <_strtol_l.isra.0+0x4a>
 800bcea:	2c30      	cmp	r4, #48	; 0x30
 800bcec:	d0a3      	beq.n	800bc36 <_strtol_l.isra.0+0x3a>
 800bcee:	260a      	movs	r6, #10
 800bcf0:	e7a9      	b.n	800bc46 <_strtol_l.isra.0+0x4a>
	...

0800bcf4 <strtol>:
 800bcf4:	4b08      	ldr	r3, [pc, #32]	; (800bd18 <strtol+0x24>)
 800bcf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcf8:	681c      	ldr	r4, [r3, #0]
 800bcfa:	4d08      	ldr	r5, [pc, #32]	; (800bd1c <strtol+0x28>)
 800bcfc:	6a23      	ldr	r3, [r4, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bf08      	it	eq
 800bd02:	462b      	moveq	r3, r5
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	4613      	mov	r3, r2
 800bd08:	460a      	mov	r2, r1
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f7ff ff75 	bl	800bbfc <_strtol_l.isra.0>
 800bd12:	b003      	add	sp, #12
 800bd14:	bd30      	pop	{r4, r5, pc}
 800bd16:	bf00      	nop
 800bd18:	20000070 	.word	0x20000070
 800bd1c:	200000d4 	.word	0x200000d4

0800bd20 <print_e>:
 800bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd22:	b08b      	sub	sp, #44	; 0x2c
 800bd24:	460f      	mov	r7, r1
 800bd26:	a908      	add	r1, sp, #32
 800bd28:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bd2a:	9104      	str	r1, [sp, #16]
 800bd2c:	a907      	add	r1, sp, #28
 800bd2e:	9103      	str	r1, [sp, #12]
 800bd30:	a909      	add	r1, sp, #36	; 0x24
 800bd32:	9102      	str	r1, [sp, #8]
 800bd34:	1c61      	adds	r1, r4, #1
 800bd36:	9101      	str	r1, [sp, #4]
 800bd38:	2102      	movs	r1, #2
 800bd3a:	9100      	str	r1, [sp, #0]
 800bd3c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 800bd40:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bd42:	f001 fc4d 	bl	800d5e0 <_dtoa_r>
 800bd46:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd4e:	4298      	cmp	r0, r3
 800bd50:	d104      	bne.n	800bd5c <print_e+0x3c>
 800bd52:	4638      	mov	r0, r7
 800bd54:	f7ff f8fc 	bl	800af50 <strcpy>
 800bd58:	b00b      	add	sp, #44	; 0x2c
 800bd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5c:	780b      	ldrb	r3, [r1, #0]
 800bd5e:	703b      	strb	r3, [r7, #0]
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	d142      	bne.n	800bdea <print_e+0xca>
 800bd64:	2c00      	cmp	r4, #0
 800bd66:	d140      	bne.n	800bdea <print_e+0xca>
 800bd68:	1c7b      	adds	r3, r7, #1
 800bd6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd6e:	b10a      	cbz	r2, 800bd74 <print_e+0x54>
 800bd70:	2c00      	cmp	r4, #0
 800bd72:	dc3e      	bgt.n	800bdf2 <print_e+0xd2>
 800bd74:	2e67      	cmp	r6, #103	; 0x67
 800bd76:	d043      	beq.n	800be00 <print_e+0xe0>
 800bd78:	2e47      	cmp	r6, #71	; 0x47
 800bd7a:	d043      	beq.n	800be04 <print_e+0xe4>
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	2730      	movs	r7, #48	; 0x30
 800bd80:	191d      	adds	r5, r3, r4
 800bd82:	1aa9      	subs	r1, r5, r2
 800bd84:	2900      	cmp	r1, #0
 800bd86:	dc38      	bgt.n	800bdfa <print_e+0xda>
 800bd88:	2c00      	cmp	r4, #0
 800bd8a:	bfa8      	it	ge
 800bd8c:	191b      	addge	r3, r3, r4
 800bd8e:	1e41      	subs	r1, r0, #1
 800bd90:	2900      	cmp	r1, #0
 800bd92:	9109      	str	r1, [sp, #36]	; 0x24
 800bd94:	461a      	mov	r2, r3
 800bd96:	bfb7      	itett	lt
 800bd98:	212d      	movlt	r1, #45	; 0x2d
 800bd9a:	212b      	movge	r1, #43	; 0x2b
 800bd9c:	f1c0 0001 	rsblt	r0, r0, #1
 800bda0:	9009      	strlt	r0, [sp, #36]	; 0x24
 800bda2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bda4:	f802 6b02 	strb.w	r6, [r2], #2
 800bda8:	bfb4      	ite	lt
 800bdaa:	7059      	strblt	r1, [r3, #1]
 800bdac:	7059      	strbge	r1, [r3, #1]
 800bdae:	2863      	cmp	r0, #99	; 0x63
 800bdb0:	dd0b      	ble.n	800bdca <print_e+0xaa>
 800bdb2:	2164      	movs	r1, #100	; 0x64
 800bdb4:	fb90 f1f1 	sdiv	r1, r0, r1
 800bdb8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800bdbc:	1cda      	adds	r2, r3, #3
 800bdbe:	709c      	strb	r4, [r3, #2]
 800bdc0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800bdc4:	fb03 0101 	mla	r1, r3, r1, r0
 800bdc8:	9109      	str	r1, [sp, #36]	; 0x24
 800bdca:	230a      	movs	r3, #10
 800bdcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdce:	fb91 f3f3 	sdiv	r3, r1, r3
 800bdd2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bdd6:	7010      	strb	r0, [r2, #0]
 800bdd8:	f06f 0009 	mvn.w	r0, #9
 800bddc:	fb00 1303 	mla	r3, r0, r3, r1
 800bde0:	3330      	adds	r3, #48	; 0x30
 800bde2:	7053      	strb	r3, [r2, #1]
 800bde4:	2300      	movs	r3, #0
 800bde6:	7093      	strb	r3, [r2, #2]
 800bde8:	e7b6      	b.n	800bd58 <print_e+0x38>
 800bdea:	222e      	movs	r2, #46	; 0x2e
 800bdec:	1cbb      	adds	r3, r7, #2
 800bdee:	707a      	strb	r2, [r7, #1]
 800bdf0:	e7bb      	b.n	800bd6a <print_e+0x4a>
 800bdf2:	f803 2b01 	strb.w	r2, [r3], #1
 800bdf6:	3c01      	subs	r4, #1
 800bdf8:	e7b7      	b.n	800bd6a <print_e+0x4a>
 800bdfa:	f802 7b01 	strb.w	r7, [r2], #1
 800bdfe:	e7c0      	b.n	800bd82 <print_e+0x62>
 800be00:	2665      	movs	r6, #101	; 0x65
 800be02:	e7c4      	b.n	800bd8e <print_e+0x6e>
 800be04:	2645      	movs	r6, #69	; 0x45
 800be06:	e7c2      	b.n	800bd8e <print_e+0x6e>

0800be08 <_gcvt>:
 800be08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4617      	mov	r7, r2
 800be0e:	461d      	mov	r5, r3
 800be10:	b08b      	sub	sp, #44	; 0x2c
 800be12:	4681      	mov	r9, r0
 800be14:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 800be18:	2200      	movs	r2, #0
 800be1a:	2300      	movs	r3, #0
 800be1c:	4638      	mov	r0, r7
 800be1e:	4629      	mov	r1, r5
 800be20:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800be24:	f7f4 fdca 	bl	80009bc <__aeabi_dcmplt>
 800be28:	b108      	cbz	r0, 800be2e <_gcvt+0x26>
 800be2a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800be2e:	2200      	movs	r2, #0
 800be30:	2300      	movs	r3, #0
 800be32:	4638      	mov	r0, r7
 800be34:	4629      	mov	r1, r5
 800be36:	f7f4 fdb7 	bl	80009a8 <__aeabi_dcmpeq>
 800be3a:	b138      	cbz	r0, 800be4c <_gcvt+0x44>
 800be3c:	2330      	movs	r3, #48	; 0x30
 800be3e:	7023      	strb	r3, [r4, #0]
 800be40:	2300      	movs	r3, #0
 800be42:	7063      	strb	r3, [r4, #1]
 800be44:	4620      	mov	r0, r4
 800be46:	b00b      	add	sp, #44	; 0x2c
 800be48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4c:	a352      	add	r3, pc, #328	; (adr r3, 800bf98 <_gcvt+0x190>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	4638      	mov	r0, r7
 800be54:	4629      	mov	r1, r5
 800be56:	f7f4 fdbb 	bl	80009d0 <__aeabi_dcmple>
 800be5a:	b168      	cbz	r0, 800be78 <_gcvt+0x70>
 800be5c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800be60:	3e01      	subs	r6, #1
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	f8cd 8008 	str.w	r8, [sp, #8]
 800be68:	9600      	str	r6, [sp, #0]
 800be6a:	463a      	mov	r2, r7
 800be6c:	462b      	mov	r3, r5
 800be6e:	4621      	mov	r1, r4
 800be70:	4648      	mov	r0, r9
 800be72:	f7ff ff55 	bl	800bd20 <print_e>
 800be76:	e7e5      	b.n	800be44 <_gcvt+0x3c>
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 ff9d 	bl	800cdb8 <_mprec_log10>
 800be7e:	463a      	mov	r2, r7
 800be80:	462b      	mov	r3, r5
 800be82:	f7f4 fda5 	bl	80009d0 <__aeabi_dcmple>
 800be86:	2800      	cmp	r0, #0
 800be88:	d1e8      	bne.n	800be5c <_gcvt+0x54>
 800be8a:	2200      	movs	r2, #0
 800be8c:	4b44      	ldr	r3, [pc, #272]	; (800bfa0 <_gcvt+0x198>)
 800be8e:	4629      	mov	r1, r5
 800be90:	4638      	mov	r0, r7
 800be92:	f7f4 fd93 	bl	80009bc <__aeabi_dcmplt>
 800be96:	a909      	add	r1, sp, #36	; 0x24
 800be98:	aa08      	add	r2, sp, #32
 800be9a:	ab07      	add	r3, sp, #28
 800be9c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800bea0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800bea4:	b388      	cbz	r0, 800bf0a <_gcvt+0x102>
 800bea6:	2303      	movs	r3, #3
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	463a      	mov	r2, r7
 800beac:	462b      	mov	r3, r5
 800beae:	4648      	mov	r0, r9
 800beb0:	f001 fb96 	bl	800d5e0 <_dtoa_r>
 800beb4:	f242 730f 	movw	r3, #9999	; 0x270f
 800beb8:	9a07      	ldr	r2, [sp, #28]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d027      	beq.n	800bf0e <_gcvt+0x106>
 800bebe:	4623      	mov	r3, r4
 800bec0:	4426      	add	r6, r4
 800bec2:	4607      	mov	r7, r0
 800bec4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bec8:	1af2      	subs	r2, r6, r3
 800beca:	9d07      	ldr	r5, [sp, #28]
 800becc:	b349      	cbz	r1, 800bf22 <_gcvt+0x11a>
 800bece:	2d00      	cmp	r5, #0
 800bed0:	dc22      	bgt.n	800bf18 <_gcvt+0x110>
 800bed2:	f1b8 0f00 	cmp.w	r8, #0
 800bed6:	d102      	bne.n	800bede <_gcvt+0xd6>
 800bed8:	7839      	ldrb	r1, [r7, #0]
 800beda:	2900      	cmp	r1, #0
 800bedc:	d049      	beq.n	800bf72 <_gcvt+0x16a>
 800bede:	429c      	cmp	r4, r3
 800bee0:	bf04      	itt	eq
 800bee2:	2130      	moveq	r1, #48	; 0x30
 800bee4:	7021      	strbeq	r1, [r4, #0]
 800bee6:	f04f 012e 	mov.w	r1, #46	; 0x2e
 800beea:	f04f 0000 	mov.w	r0, #0
 800beee:	f04f 0630 	mov.w	r6, #48	; 0x30
 800bef2:	bf08      	it	eq
 800bef4:	1c63      	addeq	r3, r4, #1
 800bef6:	7019      	strb	r1, [r3, #0]
 800bef8:	9907      	ldr	r1, [sp, #28]
 800befa:	3301      	adds	r3, #1
 800befc:	2900      	cmp	r1, #0
 800befe:	460d      	mov	r5, r1
 800bf00:	db24      	blt.n	800bf4c <_gcvt+0x144>
 800bf02:	b100      	cbz	r0, 800bf06 <_gcvt+0xfe>
 800bf04:	9107      	str	r1, [sp, #28]
 800bf06:	1e79      	subs	r1, r7, #1
 800bf08:	e02b      	b.n	800bf62 <_gcvt+0x15a>
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e7cc      	b.n	800bea8 <_gcvt+0xa0>
 800bf0e:	4601      	mov	r1, r0
 800bf10:	4620      	mov	r0, r4
 800bf12:	f7ff f81d 	bl	800af50 <strcpy>
 800bf16:	e795      	b.n	800be44 <_gcvt+0x3c>
 800bf18:	3d01      	subs	r5, #1
 800bf1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf1e:	9507      	str	r5, [sp, #28]
 800bf20:	e7cf      	b.n	800bec2 <_gcvt+0xba>
 800bf22:	1aad      	subs	r5, r5, r2
 800bf24:	2630      	movs	r6, #48	; 0x30
 800bf26:	e005      	b.n	800bf34 <_gcvt+0x12c>
 800bf28:	2a00      	cmp	r2, #0
 800bf2a:	dd06      	ble.n	800bf3a <_gcvt+0x132>
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	f803 6b01 	strb.w	r6, [r3], #1
 800bf32:	3a01      	subs	r2, #1
 800bf34:	18a8      	adds	r0, r5, r2
 800bf36:	2800      	cmp	r0, #0
 800bf38:	dcf6      	bgt.n	800bf28 <_gcvt+0x120>
 800bf3a:	2900      	cmp	r1, #0
 800bf3c:	d0c9      	beq.n	800bed2 <_gcvt+0xca>
 800bf3e:	9007      	str	r0, [sp, #28]
 800bf40:	e7c7      	b.n	800bed2 <_gcvt+0xca>
 800bf42:	f803 6b01 	strb.w	r6, [r3], #1
 800bf46:	3a01      	subs	r2, #1
 800bf48:	2001      	movs	r0, #1
 800bf4a:	e7d7      	b.n	800befc <_gcvt+0xf4>
 800bf4c:	2a00      	cmp	r2, #0
 800bf4e:	f101 0101 	add.w	r1, r1, #1
 800bf52:	dcf6      	bgt.n	800bf42 <_gcvt+0x13a>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0d6      	beq.n	800bf06 <_gcvt+0xfe>
 800bf58:	9507      	str	r5, [sp, #28]
 800bf5a:	e7d4      	b.n	800bf06 <_gcvt+0xfe>
 800bf5c:	f803 0b01 	strb.w	r0, [r3], #1
 800bf60:	3a01      	subs	r2, #1
 800bf62:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf66:	b108      	cbz	r0, 800bf6c <_gcvt+0x164>
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	dcf7      	bgt.n	800bf5c <_gcvt+0x154>
 800bf6c:	f1b8 0f00 	cmp.w	r8, #0
 800bf70:	d10b      	bne.n	800bf8a <_gcvt+0x182>
 800bf72:	2200      	movs	r2, #0
 800bf74:	701a      	strb	r2, [r3, #0]
 800bf76:	e765      	b.n	800be44 <_gcvt+0x3c>
 800bf78:	f801 6b01 	strb.w	r6, [r1], #1
 800bf7c:	1a68      	subs	r0, r5, r1
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	dcfa      	bgt.n	800bf78 <_gcvt+0x170>
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	bfa8      	it	ge
 800bf86:	189b      	addge	r3, r3, r2
 800bf88:	e7f3      	b.n	800bf72 <_gcvt+0x16a>
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	189d      	adds	r5, r3, r2
 800bf8e:	2630      	movs	r6, #48	; 0x30
 800bf90:	e7f4      	b.n	800bf7c <_gcvt+0x174>
 800bf92:	bf00      	nop
 800bf94:	f3af 8000 	nop.w
 800bf98:	eb1c432d 	.word	0xeb1c432d
 800bf9c:	3f1a36e2 	.word	0x3f1a36e2
 800bfa0:	3ff00000 	.word	0x3ff00000

0800bfa4 <rshift>:
 800bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa6:	6906      	ldr	r6, [r0, #16]
 800bfa8:	114b      	asrs	r3, r1, #5
 800bfaa:	429e      	cmp	r6, r3
 800bfac:	f100 0414 	add.w	r4, r0, #20
 800bfb0:	dd31      	ble.n	800c016 <rshift+0x72>
 800bfb2:	f011 011f 	ands.w	r1, r1, #31
 800bfb6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bfba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bfbe:	d108      	bne.n	800bfd2 <rshift+0x2e>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	42b2      	cmp	r2, r6
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	d211      	bcs.n	800bfec <rshift+0x48>
 800bfc8:	f852 3b04 	ldr.w	r3, [r2], #4
 800bfcc:	f841 3b04 	str.w	r3, [r1], #4
 800bfd0:	e7f7      	b.n	800bfc2 <rshift+0x1e>
 800bfd2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bfd6:	4623      	mov	r3, r4
 800bfd8:	f1c1 0c20 	rsb	ip, r1, #32
 800bfdc:	40cd      	lsrs	r5, r1
 800bfde:	3204      	adds	r2, #4
 800bfe0:	42b2      	cmp	r2, r6
 800bfe2:	4617      	mov	r7, r2
 800bfe4:	d30d      	bcc.n	800c002 <rshift+0x5e>
 800bfe6:	601d      	str	r5, [r3, #0]
 800bfe8:	b105      	cbz	r5, 800bfec <rshift+0x48>
 800bfea:	3304      	adds	r3, #4
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	eba3 0204 	sub.w	r2, r3, r4
 800bff2:	bf08      	it	eq
 800bff4:	2300      	moveq	r3, #0
 800bff6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bffa:	6102      	str	r2, [r0, #16]
 800bffc:	bf08      	it	eq
 800bffe:	6143      	streq	r3, [r0, #20]
 800c000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c002:	683f      	ldr	r7, [r7, #0]
 800c004:	fa07 f70c 	lsl.w	r7, r7, ip
 800c008:	433d      	orrs	r5, r7
 800c00a:	f843 5b04 	str.w	r5, [r3], #4
 800c00e:	f852 5b04 	ldr.w	r5, [r2], #4
 800c012:	40cd      	lsrs	r5, r1
 800c014:	e7e4      	b.n	800bfe0 <rshift+0x3c>
 800c016:	4623      	mov	r3, r4
 800c018:	e7e8      	b.n	800bfec <rshift+0x48>

0800c01a <__hexdig_fun>:
 800c01a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c01e:	2b09      	cmp	r3, #9
 800c020:	d802      	bhi.n	800c028 <__hexdig_fun+0xe>
 800c022:	3820      	subs	r0, #32
 800c024:	b2c0      	uxtb	r0, r0
 800c026:	4770      	bx	lr
 800c028:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c02c:	2b05      	cmp	r3, #5
 800c02e:	d801      	bhi.n	800c034 <__hexdig_fun+0x1a>
 800c030:	3847      	subs	r0, #71	; 0x47
 800c032:	e7f7      	b.n	800c024 <__hexdig_fun+0xa>
 800c034:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c038:	2b05      	cmp	r3, #5
 800c03a:	d801      	bhi.n	800c040 <__hexdig_fun+0x26>
 800c03c:	3827      	subs	r0, #39	; 0x27
 800c03e:	e7f1      	b.n	800c024 <__hexdig_fun+0xa>
 800c040:	2000      	movs	r0, #0
 800c042:	4770      	bx	lr

0800c044 <__gethex>:
 800c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	b08b      	sub	sp, #44	; 0x2c
 800c04a:	9002      	str	r0, [sp, #8]
 800c04c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c04e:	468a      	mov	sl, r1
 800c050:	4690      	mov	r8, r2
 800c052:	9306      	str	r3, [sp, #24]
 800c054:	f000 fad1 	bl	800c5fa <__localeconv_l>
 800c058:	6803      	ldr	r3, [r0, #0]
 800c05a:	f04f 0b00 	mov.w	fp, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	9303      	str	r3, [sp, #12]
 800c062:	f7f4 f875 	bl	8000150 <strlen>
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	9001      	str	r0, [sp, #4]
 800c06a:	4403      	add	r3, r0
 800c06c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c070:	9307      	str	r3, [sp, #28]
 800c072:	f8da 3000 	ldr.w	r3, [sl]
 800c076:	3302      	adds	r3, #2
 800c078:	461f      	mov	r7, r3
 800c07a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c07e:	2830      	cmp	r0, #48	; 0x30
 800c080:	d06c      	beq.n	800c15c <__gethex+0x118>
 800c082:	f7ff ffca 	bl	800c01a <__hexdig_fun>
 800c086:	4604      	mov	r4, r0
 800c088:	2800      	cmp	r0, #0
 800c08a:	d16a      	bne.n	800c162 <__gethex+0x11e>
 800c08c:	9a01      	ldr	r2, [sp, #4]
 800c08e:	9903      	ldr	r1, [sp, #12]
 800c090:	4638      	mov	r0, r7
 800c092:	f001 f9f7 	bl	800d484 <strncmp>
 800c096:	2800      	cmp	r0, #0
 800c098:	d166      	bne.n	800c168 <__gethex+0x124>
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	5cf8      	ldrb	r0, [r7, r3]
 800c09e:	18fe      	adds	r6, r7, r3
 800c0a0:	f7ff ffbb 	bl	800c01a <__hexdig_fun>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d062      	beq.n	800c16e <__gethex+0x12a>
 800c0a8:	4633      	mov	r3, r6
 800c0aa:	7818      	ldrb	r0, [r3, #0]
 800c0ac:	461f      	mov	r7, r3
 800c0ae:	2830      	cmp	r0, #48	; 0x30
 800c0b0:	f103 0301 	add.w	r3, r3, #1
 800c0b4:	d0f9      	beq.n	800c0aa <__gethex+0x66>
 800c0b6:	f7ff ffb0 	bl	800c01a <__hexdig_fun>
 800c0ba:	fab0 f580 	clz	r5, r0
 800c0be:	4634      	mov	r4, r6
 800c0c0:	f04f 0b01 	mov.w	fp, #1
 800c0c4:	096d      	lsrs	r5, r5, #5
 800c0c6:	463a      	mov	r2, r7
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	7830      	ldrb	r0, [r6, #0]
 800c0cc:	3201      	adds	r2, #1
 800c0ce:	f7ff ffa4 	bl	800c01a <__hexdig_fun>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d1f8      	bne.n	800c0c8 <__gethex+0x84>
 800c0d6:	9a01      	ldr	r2, [sp, #4]
 800c0d8:	9903      	ldr	r1, [sp, #12]
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f001 f9d2 	bl	800d484 <strncmp>
 800c0e0:	b950      	cbnz	r0, 800c0f8 <__gethex+0xb4>
 800c0e2:	b954      	cbnz	r4, 800c0fa <__gethex+0xb6>
 800c0e4:	9b01      	ldr	r3, [sp, #4]
 800c0e6:	18f4      	adds	r4, r6, r3
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4616      	mov	r6, r2
 800c0ec:	7830      	ldrb	r0, [r6, #0]
 800c0ee:	3201      	adds	r2, #1
 800c0f0:	f7ff ff93 	bl	800c01a <__hexdig_fun>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d1f8      	bne.n	800c0ea <__gethex+0xa6>
 800c0f8:	b10c      	cbz	r4, 800c0fe <__gethex+0xba>
 800c0fa:	1ba4      	subs	r4, r4, r6
 800c0fc:	00a4      	lsls	r4, r4, #2
 800c0fe:	7833      	ldrb	r3, [r6, #0]
 800c100:	2b50      	cmp	r3, #80	; 0x50
 800c102:	d001      	beq.n	800c108 <__gethex+0xc4>
 800c104:	2b70      	cmp	r3, #112	; 0x70
 800c106:	d140      	bne.n	800c18a <__gethex+0x146>
 800c108:	7873      	ldrb	r3, [r6, #1]
 800c10a:	2b2b      	cmp	r3, #43	; 0x2b
 800c10c:	d031      	beq.n	800c172 <__gethex+0x12e>
 800c10e:	2b2d      	cmp	r3, #45	; 0x2d
 800c110:	d033      	beq.n	800c17a <__gethex+0x136>
 800c112:	f04f 0900 	mov.w	r9, #0
 800c116:	1c71      	adds	r1, r6, #1
 800c118:	7808      	ldrb	r0, [r1, #0]
 800c11a:	f7ff ff7e 	bl	800c01a <__hexdig_fun>
 800c11e:	1e43      	subs	r3, r0, #1
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b18      	cmp	r3, #24
 800c124:	d831      	bhi.n	800c18a <__gethex+0x146>
 800c126:	f1a0 0210 	sub.w	r2, r0, #16
 800c12a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c12e:	f7ff ff74 	bl	800c01a <__hexdig_fun>
 800c132:	1e43      	subs	r3, r0, #1
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b18      	cmp	r3, #24
 800c138:	d922      	bls.n	800c180 <__gethex+0x13c>
 800c13a:	f1b9 0f00 	cmp.w	r9, #0
 800c13e:	d000      	beq.n	800c142 <__gethex+0xfe>
 800c140:	4252      	negs	r2, r2
 800c142:	4414      	add	r4, r2
 800c144:	f8ca 1000 	str.w	r1, [sl]
 800c148:	b30d      	cbz	r5, 800c18e <__gethex+0x14a>
 800c14a:	f1bb 0f00 	cmp.w	fp, #0
 800c14e:	bf0c      	ite	eq
 800c150:	2706      	moveq	r7, #6
 800c152:	2700      	movne	r7, #0
 800c154:	4638      	mov	r0, r7
 800c156:	b00b      	add	sp, #44	; 0x2c
 800c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15c:	f10b 0b01 	add.w	fp, fp, #1
 800c160:	e78a      	b.n	800c078 <__gethex+0x34>
 800c162:	2500      	movs	r5, #0
 800c164:	462c      	mov	r4, r5
 800c166:	e7ae      	b.n	800c0c6 <__gethex+0x82>
 800c168:	463e      	mov	r6, r7
 800c16a:	2501      	movs	r5, #1
 800c16c:	e7c7      	b.n	800c0fe <__gethex+0xba>
 800c16e:	4604      	mov	r4, r0
 800c170:	e7fb      	b.n	800c16a <__gethex+0x126>
 800c172:	f04f 0900 	mov.w	r9, #0
 800c176:	1cb1      	adds	r1, r6, #2
 800c178:	e7ce      	b.n	800c118 <__gethex+0xd4>
 800c17a:	f04f 0901 	mov.w	r9, #1
 800c17e:	e7fa      	b.n	800c176 <__gethex+0x132>
 800c180:	230a      	movs	r3, #10
 800c182:	fb03 0202 	mla	r2, r3, r2, r0
 800c186:	3a10      	subs	r2, #16
 800c188:	e7cf      	b.n	800c12a <__gethex+0xe6>
 800c18a:	4631      	mov	r1, r6
 800c18c:	e7da      	b.n	800c144 <__gethex+0x100>
 800c18e:	4629      	mov	r1, r5
 800c190:	1bf3      	subs	r3, r6, r7
 800c192:	3b01      	subs	r3, #1
 800c194:	2b07      	cmp	r3, #7
 800c196:	dc49      	bgt.n	800c22c <__gethex+0x1e8>
 800c198:	9802      	ldr	r0, [sp, #8]
 800c19a:	f000 fa4f 	bl	800c63c <_Balloc>
 800c19e:	f04f 0b00 	mov.w	fp, #0
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	46da      	mov	sl, fp
 800c1a6:	9b01      	ldr	r3, [sp, #4]
 800c1a8:	f100 0914 	add.w	r9, r0, #20
 800c1ac:	f1c3 0301 	rsb	r3, r3, #1
 800c1b0:	f8cd 9010 	str.w	r9, [sp, #16]
 800c1b4:	9308      	str	r3, [sp, #32]
 800c1b6:	42b7      	cmp	r7, r6
 800c1b8:	d33b      	bcc.n	800c232 <__gethex+0x1ee>
 800c1ba:	9804      	ldr	r0, [sp, #16]
 800c1bc:	f840 ab04 	str.w	sl, [r0], #4
 800c1c0:	eba0 0009 	sub.w	r0, r0, r9
 800c1c4:	1080      	asrs	r0, r0, #2
 800c1c6:	6128      	str	r0, [r5, #16]
 800c1c8:	0147      	lsls	r7, r0, #5
 800c1ca:	4650      	mov	r0, sl
 800c1cc:	f000 fafa 	bl	800c7c4 <__hi0bits>
 800c1d0:	f8d8 6000 	ldr.w	r6, [r8]
 800c1d4:	1a3f      	subs	r7, r7, r0
 800c1d6:	42b7      	cmp	r7, r6
 800c1d8:	dd64      	ble.n	800c2a4 <__gethex+0x260>
 800c1da:	1bbf      	subs	r7, r7, r6
 800c1dc:	4639      	mov	r1, r7
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 fe20 	bl	800ce24 <__any_on>
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	b178      	cbz	r0, 800c208 <__gethex+0x1c4>
 800c1e8:	f04f 0a01 	mov.w	sl, #1
 800c1ec:	1e7b      	subs	r3, r7, #1
 800c1ee:	1159      	asrs	r1, r3, #5
 800c1f0:	f003 021f 	and.w	r2, r3, #31
 800c1f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c1f8:	fa0a f202 	lsl.w	r2, sl, r2
 800c1fc:	420a      	tst	r2, r1
 800c1fe:	d003      	beq.n	800c208 <__gethex+0x1c4>
 800c200:	4553      	cmp	r3, sl
 800c202:	dc46      	bgt.n	800c292 <__gethex+0x24e>
 800c204:	f04f 0a02 	mov.w	sl, #2
 800c208:	4639      	mov	r1, r7
 800c20a:	4628      	mov	r0, r5
 800c20c:	f7ff feca 	bl	800bfa4 <rshift>
 800c210:	443c      	add	r4, r7
 800c212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c216:	42a3      	cmp	r3, r4
 800c218:	da52      	bge.n	800c2c0 <__gethex+0x27c>
 800c21a:	4629      	mov	r1, r5
 800c21c:	9802      	ldr	r0, [sp, #8]
 800c21e:	f000 fa41 	bl	800c6a4 <_Bfree>
 800c222:	2300      	movs	r3, #0
 800c224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c226:	27a3      	movs	r7, #163	; 0xa3
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	e793      	b.n	800c154 <__gethex+0x110>
 800c22c:	3101      	adds	r1, #1
 800c22e:	105b      	asrs	r3, r3, #1
 800c230:	e7b0      	b.n	800c194 <__gethex+0x150>
 800c232:	1e73      	subs	r3, r6, #1
 800c234:	9305      	str	r3, [sp, #20]
 800c236:	9a07      	ldr	r2, [sp, #28]
 800c238:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d018      	beq.n	800c272 <__gethex+0x22e>
 800c240:	f1bb 0f20 	cmp.w	fp, #32
 800c244:	d107      	bne.n	800c256 <__gethex+0x212>
 800c246:	9b04      	ldr	r3, [sp, #16]
 800c248:	f8c3 a000 	str.w	sl, [r3]
 800c24c:	f04f 0a00 	mov.w	sl, #0
 800c250:	46d3      	mov	fp, sl
 800c252:	3304      	adds	r3, #4
 800c254:	9304      	str	r3, [sp, #16]
 800c256:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c25a:	f7ff fede 	bl	800c01a <__hexdig_fun>
 800c25e:	f000 000f 	and.w	r0, r0, #15
 800c262:	fa00 f00b 	lsl.w	r0, r0, fp
 800c266:	ea4a 0a00 	orr.w	sl, sl, r0
 800c26a:	f10b 0b04 	add.w	fp, fp, #4
 800c26e:	9b05      	ldr	r3, [sp, #20]
 800c270:	e00d      	b.n	800c28e <__gethex+0x24a>
 800c272:	9b05      	ldr	r3, [sp, #20]
 800c274:	9a08      	ldr	r2, [sp, #32]
 800c276:	4413      	add	r3, r2
 800c278:	42bb      	cmp	r3, r7
 800c27a:	d3e1      	bcc.n	800c240 <__gethex+0x1fc>
 800c27c:	4618      	mov	r0, r3
 800c27e:	9a01      	ldr	r2, [sp, #4]
 800c280:	9903      	ldr	r1, [sp, #12]
 800c282:	9309      	str	r3, [sp, #36]	; 0x24
 800c284:	f001 f8fe 	bl	800d484 <strncmp>
 800c288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d1d8      	bne.n	800c240 <__gethex+0x1fc>
 800c28e:	461e      	mov	r6, r3
 800c290:	e791      	b.n	800c1b6 <__gethex+0x172>
 800c292:	1eb9      	subs	r1, r7, #2
 800c294:	4628      	mov	r0, r5
 800c296:	f000 fdc5 	bl	800ce24 <__any_on>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0b2      	beq.n	800c204 <__gethex+0x1c0>
 800c29e:	f04f 0a03 	mov.w	sl, #3
 800c2a2:	e7b1      	b.n	800c208 <__gethex+0x1c4>
 800c2a4:	da09      	bge.n	800c2ba <__gethex+0x276>
 800c2a6:	1bf7      	subs	r7, r6, r7
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	463a      	mov	r2, r7
 800c2ac:	9802      	ldr	r0, [sp, #8]
 800c2ae:	f000 fbc3 	bl	800ca38 <__lshift>
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	1be4      	subs	r4, r4, r7
 800c2b6:	f100 0914 	add.w	r9, r0, #20
 800c2ba:	f04f 0a00 	mov.w	sl, #0
 800c2be:	e7a8      	b.n	800c212 <__gethex+0x1ce>
 800c2c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c2c4:	42a0      	cmp	r0, r4
 800c2c6:	dd6b      	ble.n	800c3a0 <__gethex+0x35c>
 800c2c8:	1b04      	subs	r4, r0, r4
 800c2ca:	42a6      	cmp	r6, r4
 800c2cc:	dc2e      	bgt.n	800c32c <__gethex+0x2e8>
 800c2ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d022      	beq.n	800c31c <__gethex+0x2d8>
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d024      	beq.n	800c324 <__gethex+0x2e0>
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d115      	bne.n	800c30a <__gethex+0x2c6>
 800c2de:	42a6      	cmp	r6, r4
 800c2e0:	d113      	bne.n	800c30a <__gethex+0x2c6>
 800c2e2:	2e01      	cmp	r6, #1
 800c2e4:	dc0b      	bgt.n	800c2fe <__gethex+0x2ba>
 800c2e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c2ea:	9a06      	ldr	r2, [sp, #24]
 800c2ec:	2762      	movs	r7, #98	; 0x62
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	612b      	str	r3, [r5, #16]
 800c2f4:	f8c9 3000 	str.w	r3, [r9]
 800c2f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2fa:	601d      	str	r5, [r3, #0]
 800c2fc:	e72a      	b.n	800c154 <__gethex+0x110>
 800c2fe:	1e71      	subs	r1, r6, #1
 800c300:	4628      	mov	r0, r5
 800c302:	f000 fd8f 	bl	800ce24 <__any_on>
 800c306:	2800      	cmp	r0, #0
 800c308:	d1ed      	bne.n	800c2e6 <__gethex+0x2a2>
 800c30a:	4629      	mov	r1, r5
 800c30c:	9802      	ldr	r0, [sp, #8]
 800c30e:	f000 f9c9 	bl	800c6a4 <_Bfree>
 800c312:	2300      	movs	r3, #0
 800c314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c316:	2750      	movs	r7, #80	; 0x50
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	e71b      	b.n	800c154 <__gethex+0x110>
 800c31c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0e1      	beq.n	800c2e6 <__gethex+0x2a2>
 800c322:	e7f2      	b.n	800c30a <__gethex+0x2c6>
 800c324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1dd      	bne.n	800c2e6 <__gethex+0x2a2>
 800c32a:	e7ee      	b.n	800c30a <__gethex+0x2c6>
 800c32c:	1e67      	subs	r7, r4, #1
 800c32e:	f1ba 0f00 	cmp.w	sl, #0
 800c332:	d132      	bne.n	800c39a <__gethex+0x356>
 800c334:	b127      	cbz	r7, 800c340 <__gethex+0x2fc>
 800c336:	4639      	mov	r1, r7
 800c338:	4628      	mov	r0, r5
 800c33a:	f000 fd73 	bl	800ce24 <__any_on>
 800c33e:	4682      	mov	sl, r0
 800c340:	2301      	movs	r3, #1
 800c342:	117a      	asrs	r2, r7, #5
 800c344:	f007 071f 	and.w	r7, r7, #31
 800c348:	fa03 f707 	lsl.w	r7, r3, r7
 800c34c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c350:	4621      	mov	r1, r4
 800c352:	421f      	tst	r7, r3
 800c354:	f04f 0702 	mov.w	r7, #2
 800c358:	4628      	mov	r0, r5
 800c35a:	bf18      	it	ne
 800c35c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c360:	1b36      	subs	r6, r6, r4
 800c362:	f7ff fe1f 	bl	800bfa4 <rshift>
 800c366:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c36a:	f1ba 0f00 	cmp.w	sl, #0
 800c36e:	d048      	beq.n	800c402 <__gethex+0x3be>
 800c370:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d015      	beq.n	800c3a4 <__gethex+0x360>
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d017      	beq.n	800c3ac <__gethex+0x368>
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d109      	bne.n	800c394 <__gethex+0x350>
 800c380:	f01a 0f02 	tst.w	sl, #2
 800c384:	d006      	beq.n	800c394 <__gethex+0x350>
 800c386:	f8d9 3000 	ldr.w	r3, [r9]
 800c38a:	ea4a 0a03 	orr.w	sl, sl, r3
 800c38e:	f01a 0f01 	tst.w	sl, #1
 800c392:	d10e      	bne.n	800c3b2 <__gethex+0x36e>
 800c394:	f047 0710 	orr.w	r7, r7, #16
 800c398:	e033      	b.n	800c402 <__gethex+0x3be>
 800c39a:	f04f 0a01 	mov.w	sl, #1
 800c39e:	e7cf      	b.n	800c340 <__gethex+0x2fc>
 800c3a0:	2701      	movs	r7, #1
 800c3a2:	e7e2      	b.n	800c36a <__gethex+0x326>
 800c3a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3a6:	f1c3 0301 	rsb	r3, r3, #1
 800c3aa:	9315      	str	r3, [sp, #84]	; 0x54
 800c3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0f0      	beq.n	800c394 <__gethex+0x350>
 800c3b2:	f04f 0c00 	mov.w	ip, #0
 800c3b6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c3ba:	f105 0314 	add.w	r3, r5, #20
 800c3be:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c3c2:	eb03 010a 	add.w	r1, r3, sl
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3cc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c3d0:	d01c      	beq.n	800c40c <__gethex+0x3c8>
 800c3d2:	3201      	adds	r2, #1
 800c3d4:	6002      	str	r2, [r0, #0]
 800c3d6:	2f02      	cmp	r7, #2
 800c3d8:	f105 0314 	add.w	r3, r5, #20
 800c3dc:	d138      	bne.n	800c450 <__gethex+0x40c>
 800c3de:	f8d8 2000 	ldr.w	r2, [r8]
 800c3e2:	3a01      	subs	r2, #1
 800c3e4:	42b2      	cmp	r2, r6
 800c3e6:	d10a      	bne.n	800c3fe <__gethex+0x3ba>
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	1171      	asrs	r1, r6, #5
 800c3ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3f0:	f006 061f 	and.w	r6, r6, #31
 800c3f4:	fa02 f606 	lsl.w	r6, r2, r6
 800c3f8:	421e      	tst	r6, r3
 800c3fa:	bf18      	it	ne
 800c3fc:	4617      	movne	r7, r2
 800c3fe:	f047 0720 	orr.w	r7, r7, #32
 800c402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c404:	601d      	str	r5, [r3, #0]
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	601c      	str	r4, [r3, #0]
 800c40a:	e6a3      	b.n	800c154 <__gethex+0x110>
 800c40c:	4299      	cmp	r1, r3
 800c40e:	f843 cc04 	str.w	ip, [r3, #-4]
 800c412:	d8d8      	bhi.n	800c3c6 <__gethex+0x382>
 800c414:	68ab      	ldr	r3, [r5, #8]
 800c416:	4599      	cmp	r9, r3
 800c418:	db12      	blt.n	800c440 <__gethex+0x3fc>
 800c41a:	6869      	ldr	r1, [r5, #4]
 800c41c:	9802      	ldr	r0, [sp, #8]
 800c41e:	3101      	adds	r1, #1
 800c420:	f000 f90c 	bl	800c63c <_Balloc>
 800c424:	4683      	mov	fp, r0
 800c426:	692a      	ldr	r2, [r5, #16]
 800c428:	f105 010c 	add.w	r1, r5, #12
 800c42c:	3202      	adds	r2, #2
 800c42e:	0092      	lsls	r2, r2, #2
 800c430:	300c      	adds	r0, #12
 800c432:	f000 f8f6 	bl	800c622 <memcpy>
 800c436:	4629      	mov	r1, r5
 800c438:	9802      	ldr	r0, [sp, #8]
 800c43a:	f000 f933 	bl	800c6a4 <_Bfree>
 800c43e:	465d      	mov	r5, fp
 800c440:	692b      	ldr	r3, [r5, #16]
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	612a      	str	r2, [r5, #16]
 800c446:	2201      	movs	r2, #1
 800c448:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c44c:	615a      	str	r2, [r3, #20]
 800c44e:	e7c2      	b.n	800c3d6 <__gethex+0x392>
 800c450:	692a      	ldr	r2, [r5, #16]
 800c452:	454a      	cmp	r2, r9
 800c454:	dd0b      	ble.n	800c46e <__gethex+0x42a>
 800c456:	2101      	movs	r1, #1
 800c458:	4628      	mov	r0, r5
 800c45a:	f7ff fda3 	bl	800bfa4 <rshift>
 800c45e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c462:	3401      	adds	r4, #1
 800c464:	42a3      	cmp	r3, r4
 800c466:	f6ff aed8 	blt.w	800c21a <__gethex+0x1d6>
 800c46a:	2701      	movs	r7, #1
 800c46c:	e7c7      	b.n	800c3fe <__gethex+0x3ba>
 800c46e:	f016 061f 	ands.w	r6, r6, #31
 800c472:	d0fa      	beq.n	800c46a <__gethex+0x426>
 800c474:	449a      	add	sl, r3
 800c476:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c47a:	f000 f9a3 	bl	800c7c4 <__hi0bits>
 800c47e:	f1c6 0620 	rsb	r6, r6, #32
 800c482:	42b0      	cmp	r0, r6
 800c484:	dbe7      	blt.n	800c456 <__gethex+0x412>
 800c486:	e7f0      	b.n	800c46a <__gethex+0x426>

0800c488 <L_shift>:
 800c488:	f1c2 0208 	rsb	r2, r2, #8
 800c48c:	0092      	lsls	r2, r2, #2
 800c48e:	b570      	push	{r4, r5, r6, lr}
 800c490:	f1c2 0620 	rsb	r6, r2, #32
 800c494:	6843      	ldr	r3, [r0, #4]
 800c496:	6804      	ldr	r4, [r0, #0]
 800c498:	fa03 f506 	lsl.w	r5, r3, r6
 800c49c:	432c      	orrs	r4, r5
 800c49e:	40d3      	lsrs	r3, r2
 800c4a0:	6004      	str	r4, [r0, #0]
 800c4a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4a6:	4288      	cmp	r0, r1
 800c4a8:	d3f4      	bcc.n	800c494 <L_shift+0xc>
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}

0800c4ac <__match>:
 800c4ac:	b530      	push	{r4, r5, lr}
 800c4ae:	6803      	ldr	r3, [r0, #0]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4b6:	b914      	cbnz	r4, 800c4be <__match+0x12>
 800c4b8:	6003      	str	r3, [r0, #0]
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	bd30      	pop	{r4, r5, pc}
 800c4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c4c6:	2d19      	cmp	r5, #25
 800c4c8:	bf98      	it	ls
 800c4ca:	3220      	addls	r2, #32
 800c4cc:	42a2      	cmp	r2, r4
 800c4ce:	d0f0      	beq.n	800c4b2 <__match+0x6>
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e7f3      	b.n	800c4bc <__match+0x10>

0800c4d4 <__hexnan>:
 800c4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d8:	2500      	movs	r5, #0
 800c4da:	680b      	ldr	r3, [r1, #0]
 800c4dc:	4682      	mov	sl, r0
 800c4de:	115f      	asrs	r7, r3, #5
 800c4e0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c4e4:	f013 031f 	ands.w	r3, r3, #31
 800c4e8:	bf18      	it	ne
 800c4ea:	3704      	addne	r7, #4
 800c4ec:	1f3e      	subs	r6, r7, #4
 800c4ee:	4690      	mov	r8, r2
 800c4f0:	46b1      	mov	r9, r6
 800c4f2:	4634      	mov	r4, r6
 800c4f4:	46ab      	mov	fp, r5
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	6801      	ldr	r1, [r0, #0]
 800c4fa:	9301      	str	r3, [sp, #4]
 800c4fc:	f847 5c04 	str.w	r5, [r7, #-4]
 800c500:	9502      	str	r5, [sp, #8]
 800c502:	784a      	ldrb	r2, [r1, #1]
 800c504:	1c4b      	adds	r3, r1, #1
 800c506:	9303      	str	r3, [sp, #12]
 800c508:	b342      	cbz	r2, 800c55c <__hexnan+0x88>
 800c50a:	4610      	mov	r0, r2
 800c50c:	9105      	str	r1, [sp, #20]
 800c50e:	9204      	str	r2, [sp, #16]
 800c510:	f7ff fd83 	bl	800c01a <__hexdig_fun>
 800c514:	2800      	cmp	r0, #0
 800c516:	d143      	bne.n	800c5a0 <__hexnan+0xcc>
 800c518:	9a04      	ldr	r2, [sp, #16]
 800c51a:	9905      	ldr	r1, [sp, #20]
 800c51c:	2a20      	cmp	r2, #32
 800c51e:	d818      	bhi.n	800c552 <__hexnan+0x7e>
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	459b      	cmp	fp, r3
 800c524:	dd13      	ble.n	800c54e <__hexnan+0x7a>
 800c526:	454c      	cmp	r4, r9
 800c528:	d206      	bcs.n	800c538 <__hexnan+0x64>
 800c52a:	2d07      	cmp	r5, #7
 800c52c:	dc04      	bgt.n	800c538 <__hexnan+0x64>
 800c52e:	462a      	mov	r2, r5
 800c530:	4649      	mov	r1, r9
 800c532:	4620      	mov	r0, r4
 800c534:	f7ff ffa8 	bl	800c488 <L_shift>
 800c538:	4544      	cmp	r4, r8
 800c53a:	d944      	bls.n	800c5c6 <__hexnan+0xf2>
 800c53c:	2300      	movs	r3, #0
 800c53e:	f1a4 0904 	sub.w	r9, r4, #4
 800c542:	f844 3c04 	str.w	r3, [r4, #-4]
 800c546:	461d      	mov	r5, r3
 800c548:	464c      	mov	r4, r9
 800c54a:	f8cd b008 	str.w	fp, [sp, #8]
 800c54e:	9903      	ldr	r1, [sp, #12]
 800c550:	e7d7      	b.n	800c502 <__hexnan+0x2e>
 800c552:	2a29      	cmp	r2, #41	; 0x29
 800c554:	d14a      	bne.n	800c5ec <__hexnan+0x118>
 800c556:	3102      	adds	r1, #2
 800c558:	f8ca 1000 	str.w	r1, [sl]
 800c55c:	f1bb 0f00 	cmp.w	fp, #0
 800c560:	d044      	beq.n	800c5ec <__hexnan+0x118>
 800c562:	454c      	cmp	r4, r9
 800c564:	d206      	bcs.n	800c574 <__hexnan+0xa0>
 800c566:	2d07      	cmp	r5, #7
 800c568:	dc04      	bgt.n	800c574 <__hexnan+0xa0>
 800c56a:	462a      	mov	r2, r5
 800c56c:	4649      	mov	r1, r9
 800c56e:	4620      	mov	r0, r4
 800c570:	f7ff ff8a 	bl	800c488 <L_shift>
 800c574:	4544      	cmp	r4, r8
 800c576:	d928      	bls.n	800c5ca <__hexnan+0xf6>
 800c578:	4643      	mov	r3, r8
 800c57a:	f854 2b04 	ldr.w	r2, [r4], #4
 800c57e:	42a6      	cmp	r6, r4
 800c580:	f843 2b04 	str.w	r2, [r3], #4
 800c584:	d2f9      	bcs.n	800c57a <__hexnan+0xa6>
 800c586:	2200      	movs	r2, #0
 800c588:	f843 2b04 	str.w	r2, [r3], #4
 800c58c:	429e      	cmp	r6, r3
 800c58e:	d2fb      	bcs.n	800c588 <__hexnan+0xb4>
 800c590:	6833      	ldr	r3, [r6, #0]
 800c592:	b91b      	cbnz	r3, 800c59c <__hexnan+0xc8>
 800c594:	4546      	cmp	r6, r8
 800c596:	d127      	bne.n	800c5e8 <__hexnan+0x114>
 800c598:	2301      	movs	r3, #1
 800c59a:	6033      	str	r3, [r6, #0]
 800c59c:	2005      	movs	r0, #5
 800c59e:	e026      	b.n	800c5ee <__hexnan+0x11a>
 800c5a0:	3501      	adds	r5, #1
 800c5a2:	2d08      	cmp	r5, #8
 800c5a4:	f10b 0b01 	add.w	fp, fp, #1
 800c5a8:	dd06      	ble.n	800c5b8 <__hexnan+0xe4>
 800c5aa:	4544      	cmp	r4, r8
 800c5ac:	d9cf      	bls.n	800c54e <__hexnan+0x7a>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	2501      	movs	r5, #1
 800c5b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5b6:	3c04      	subs	r4, #4
 800c5b8:	6822      	ldr	r2, [r4, #0]
 800c5ba:	f000 000f 	and.w	r0, r0, #15
 800c5be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c5c2:	6020      	str	r0, [r4, #0]
 800c5c4:	e7c3      	b.n	800c54e <__hexnan+0x7a>
 800c5c6:	2508      	movs	r5, #8
 800c5c8:	e7c1      	b.n	800c54e <__hexnan+0x7a>
 800c5ca:	9b01      	ldr	r3, [sp, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0df      	beq.n	800c590 <__hexnan+0xbc>
 800c5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5d4:	f1c3 0320 	rsb	r3, r3, #32
 800c5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c5e0:	401a      	ands	r2, r3
 800c5e2:	f847 2c04 	str.w	r2, [r7, #-4]
 800c5e6:	e7d3      	b.n	800c590 <__hexnan+0xbc>
 800c5e8:	3e04      	subs	r6, #4
 800c5ea:	e7d1      	b.n	800c590 <__hexnan+0xbc>
 800c5ec:	2004      	movs	r0, #4
 800c5ee:	b007      	add	sp, #28
 800c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5f4 <__locale_ctype_ptr_l>:
 800c5f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c5f8:	4770      	bx	lr

0800c5fa <__localeconv_l>:
 800c5fa:	30f0      	adds	r0, #240	; 0xf0
 800c5fc:	4770      	bx	lr

0800c5fe <__ascii_mbtowc>:
 800c5fe:	b082      	sub	sp, #8
 800c600:	b901      	cbnz	r1, 800c604 <__ascii_mbtowc+0x6>
 800c602:	a901      	add	r1, sp, #4
 800c604:	b142      	cbz	r2, 800c618 <__ascii_mbtowc+0x1a>
 800c606:	b14b      	cbz	r3, 800c61c <__ascii_mbtowc+0x1e>
 800c608:	7813      	ldrb	r3, [r2, #0]
 800c60a:	600b      	str	r3, [r1, #0]
 800c60c:	7812      	ldrb	r2, [r2, #0]
 800c60e:	1c10      	adds	r0, r2, #0
 800c610:	bf18      	it	ne
 800c612:	2001      	movne	r0, #1
 800c614:	b002      	add	sp, #8
 800c616:	4770      	bx	lr
 800c618:	4610      	mov	r0, r2
 800c61a:	e7fb      	b.n	800c614 <__ascii_mbtowc+0x16>
 800c61c:	f06f 0001 	mvn.w	r0, #1
 800c620:	e7f8      	b.n	800c614 <__ascii_mbtowc+0x16>

0800c622 <memcpy>:
 800c622:	b510      	push	{r4, lr}
 800c624:	1e43      	subs	r3, r0, #1
 800c626:	440a      	add	r2, r1
 800c628:	4291      	cmp	r1, r2
 800c62a:	d100      	bne.n	800c62e <memcpy+0xc>
 800c62c:	bd10      	pop	{r4, pc}
 800c62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c636:	e7f7      	b.n	800c628 <memcpy+0x6>

0800c638 <__malloc_lock>:
 800c638:	4770      	bx	lr

0800c63a <__malloc_unlock>:
 800c63a:	4770      	bx	lr

0800c63c <_Balloc>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c640:	4604      	mov	r4, r0
 800c642:	460e      	mov	r6, r1
 800c644:	b93d      	cbnz	r5, 800c656 <_Balloc+0x1a>
 800c646:	2010      	movs	r0, #16
 800c648:	f7fe fb78 	bl	800ad3c <malloc>
 800c64c:	6260      	str	r0, [r4, #36]	; 0x24
 800c64e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c652:	6005      	str	r5, [r0, #0]
 800c654:	60c5      	str	r5, [r0, #12]
 800c656:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c658:	68eb      	ldr	r3, [r5, #12]
 800c65a:	b183      	cbz	r3, 800c67e <_Balloc+0x42>
 800c65c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c664:	b9b8      	cbnz	r0, 800c696 <_Balloc+0x5a>
 800c666:	2101      	movs	r1, #1
 800c668:	fa01 f506 	lsl.w	r5, r1, r6
 800c66c:	1d6a      	adds	r2, r5, #5
 800c66e:	0092      	lsls	r2, r2, #2
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fbf8 	bl	800ce66 <_calloc_r>
 800c676:	b160      	cbz	r0, 800c692 <_Balloc+0x56>
 800c678:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c67c:	e00e      	b.n	800c69c <_Balloc+0x60>
 800c67e:	2221      	movs	r2, #33	; 0x21
 800c680:	2104      	movs	r1, #4
 800c682:	4620      	mov	r0, r4
 800c684:	f000 fbef 	bl	800ce66 <_calloc_r>
 800c688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c68a:	60e8      	str	r0, [r5, #12]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e4      	bne.n	800c65c <_Balloc+0x20>
 800c692:	2000      	movs	r0, #0
 800c694:	bd70      	pop	{r4, r5, r6, pc}
 800c696:	6802      	ldr	r2, [r0, #0]
 800c698:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c69c:	2300      	movs	r3, #0
 800c69e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6a2:	e7f7      	b.n	800c694 <_Balloc+0x58>

0800c6a4 <_Bfree>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	460d      	mov	r5, r1
 800c6ac:	b93c      	cbnz	r4, 800c6be <_Bfree+0x1a>
 800c6ae:	2010      	movs	r0, #16
 800c6b0:	f7fe fb44 	bl	800ad3c <malloc>
 800c6b4:	6270      	str	r0, [r6, #36]	; 0x24
 800c6b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6ba:	6004      	str	r4, [r0, #0]
 800c6bc:	60c4      	str	r4, [r0, #12]
 800c6be:	b13d      	cbz	r5, 800c6d0 <_Bfree+0x2c>
 800c6c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c6c2:	686a      	ldr	r2, [r5, #4]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6ca:	6029      	str	r1, [r5, #0]
 800c6cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c6d0:	bd70      	pop	{r4, r5, r6, pc}

0800c6d2 <__multadd>:
 800c6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d6:	461f      	mov	r7, r3
 800c6d8:	4606      	mov	r6, r0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	2300      	movs	r3, #0
 800c6de:	690d      	ldr	r5, [r1, #16]
 800c6e0:	f101 0c14 	add.w	ip, r1, #20
 800c6e4:	f8dc 0000 	ldr.w	r0, [ip]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	b281      	uxth	r1, r0
 800c6ec:	fb02 7101 	mla	r1, r2, r1, r7
 800c6f0:	0c00      	lsrs	r0, r0, #16
 800c6f2:	0c0f      	lsrs	r7, r1, #16
 800c6f4:	fb02 7000 	mla	r0, r2, r0, r7
 800c6f8:	b289      	uxth	r1, r1
 800c6fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c6fe:	429d      	cmp	r5, r3
 800c700:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c704:	f84c 1b04 	str.w	r1, [ip], #4
 800c708:	dcec      	bgt.n	800c6e4 <__multadd+0x12>
 800c70a:	b1d7      	cbz	r7, 800c742 <__multadd+0x70>
 800c70c:	68a3      	ldr	r3, [r4, #8]
 800c70e:	42ab      	cmp	r3, r5
 800c710:	dc12      	bgt.n	800c738 <__multadd+0x66>
 800c712:	6861      	ldr	r1, [r4, #4]
 800c714:	4630      	mov	r0, r6
 800c716:	3101      	adds	r1, #1
 800c718:	f7ff ff90 	bl	800c63c <_Balloc>
 800c71c:	4680      	mov	r8, r0
 800c71e:	6922      	ldr	r2, [r4, #16]
 800c720:	f104 010c 	add.w	r1, r4, #12
 800c724:	3202      	adds	r2, #2
 800c726:	0092      	lsls	r2, r2, #2
 800c728:	300c      	adds	r0, #12
 800c72a:	f7ff ff7a 	bl	800c622 <memcpy>
 800c72e:	4621      	mov	r1, r4
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff ffb7 	bl	800c6a4 <_Bfree>
 800c736:	4644      	mov	r4, r8
 800c738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c73c:	3501      	adds	r5, #1
 800c73e:	615f      	str	r7, [r3, #20]
 800c740:	6125      	str	r5, [r4, #16]
 800c742:	4620      	mov	r0, r4
 800c744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c748 <__s2b>:
 800c748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c74c:	4615      	mov	r5, r2
 800c74e:	2209      	movs	r2, #9
 800c750:	461f      	mov	r7, r3
 800c752:	3308      	adds	r3, #8
 800c754:	460c      	mov	r4, r1
 800c756:	fb93 f3f2 	sdiv	r3, r3, r2
 800c75a:	4606      	mov	r6, r0
 800c75c:	2201      	movs	r2, #1
 800c75e:	2100      	movs	r1, #0
 800c760:	429a      	cmp	r2, r3
 800c762:	db20      	blt.n	800c7a6 <__s2b+0x5e>
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff ff69 	bl	800c63c <_Balloc>
 800c76a:	9b08      	ldr	r3, [sp, #32]
 800c76c:	2d09      	cmp	r5, #9
 800c76e:	6143      	str	r3, [r0, #20]
 800c770:	f04f 0301 	mov.w	r3, #1
 800c774:	6103      	str	r3, [r0, #16]
 800c776:	dd19      	ble.n	800c7ac <__s2b+0x64>
 800c778:	f104 0809 	add.w	r8, r4, #9
 800c77c:	46c1      	mov	r9, r8
 800c77e:	442c      	add	r4, r5
 800c780:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c784:	4601      	mov	r1, r0
 800c786:	3b30      	subs	r3, #48	; 0x30
 800c788:	220a      	movs	r2, #10
 800c78a:	4630      	mov	r0, r6
 800c78c:	f7ff ffa1 	bl	800c6d2 <__multadd>
 800c790:	45a1      	cmp	r9, r4
 800c792:	d1f5      	bne.n	800c780 <__s2b+0x38>
 800c794:	eb08 0405 	add.w	r4, r8, r5
 800c798:	3c08      	subs	r4, #8
 800c79a:	1b2d      	subs	r5, r5, r4
 800c79c:	1963      	adds	r3, r4, r5
 800c79e:	42bb      	cmp	r3, r7
 800c7a0:	db07      	blt.n	800c7b2 <__s2b+0x6a>
 800c7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a6:	0052      	lsls	r2, r2, #1
 800c7a8:	3101      	adds	r1, #1
 800c7aa:	e7d9      	b.n	800c760 <__s2b+0x18>
 800c7ac:	340a      	adds	r4, #10
 800c7ae:	2509      	movs	r5, #9
 800c7b0:	e7f3      	b.n	800c79a <__s2b+0x52>
 800c7b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	3b30      	subs	r3, #48	; 0x30
 800c7ba:	220a      	movs	r2, #10
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff ff88 	bl	800c6d2 <__multadd>
 800c7c2:	e7eb      	b.n	800c79c <__s2b+0x54>

0800c7c4 <__hi0bits>:
 800c7c4:	0c02      	lsrs	r2, r0, #16
 800c7c6:	0412      	lsls	r2, r2, #16
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	b9b2      	cbnz	r2, 800c7fa <__hi0bits+0x36>
 800c7cc:	0403      	lsls	r3, r0, #16
 800c7ce:	2010      	movs	r0, #16
 800c7d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c7d4:	bf04      	itt	eq
 800c7d6:	021b      	lsleq	r3, r3, #8
 800c7d8:	3008      	addeq	r0, #8
 800c7da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c7de:	bf04      	itt	eq
 800c7e0:	011b      	lsleq	r3, r3, #4
 800c7e2:	3004      	addeq	r0, #4
 800c7e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c7e8:	bf04      	itt	eq
 800c7ea:	009b      	lsleq	r3, r3, #2
 800c7ec:	3002      	addeq	r0, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	db06      	blt.n	800c800 <__hi0bits+0x3c>
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	d503      	bpl.n	800c7fe <__hi0bits+0x3a>
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	4770      	bx	lr
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	e7e8      	b.n	800c7d0 <__hi0bits+0xc>
 800c7fe:	2020      	movs	r0, #32
 800c800:	4770      	bx	lr

0800c802 <__lo0bits>:
 800c802:	6803      	ldr	r3, [r0, #0]
 800c804:	4601      	mov	r1, r0
 800c806:	f013 0207 	ands.w	r2, r3, #7
 800c80a:	d00b      	beq.n	800c824 <__lo0bits+0x22>
 800c80c:	07da      	lsls	r2, r3, #31
 800c80e:	d423      	bmi.n	800c858 <__lo0bits+0x56>
 800c810:	0798      	lsls	r0, r3, #30
 800c812:	bf49      	itett	mi
 800c814:	085b      	lsrmi	r3, r3, #1
 800c816:	089b      	lsrpl	r3, r3, #2
 800c818:	2001      	movmi	r0, #1
 800c81a:	600b      	strmi	r3, [r1, #0]
 800c81c:	bf5c      	itt	pl
 800c81e:	600b      	strpl	r3, [r1, #0]
 800c820:	2002      	movpl	r0, #2
 800c822:	4770      	bx	lr
 800c824:	b298      	uxth	r0, r3
 800c826:	b9a8      	cbnz	r0, 800c854 <__lo0bits+0x52>
 800c828:	2010      	movs	r0, #16
 800c82a:	0c1b      	lsrs	r3, r3, #16
 800c82c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c830:	bf04      	itt	eq
 800c832:	0a1b      	lsreq	r3, r3, #8
 800c834:	3008      	addeq	r0, #8
 800c836:	071a      	lsls	r2, r3, #28
 800c838:	bf04      	itt	eq
 800c83a:	091b      	lsreq	r3, r3, #4
 800c83c:	3004      	addeq	r0, #4
 800c83e:	079a      	lsls	r2, r3, #30
 800c840:	bf04      	itt	eq
 800c842:	089b      	lsreq	r3, r3, #2
 800c844:	3002      	addeq	r0, #2
 800c846:	07da      	lsls	r2, r3, #31
 800c848:	d402      	bmi.n	800c850 <__lo0bits+0x4e>
 800c84a:	085b      	lsrs	r3, r3, #1
 800c84c:	d006      	beq.n	800c85c <__lo0bits+0x5a>
 800c84e:	3001      	adds	r0, #1
 800c850:	600b      	str	r3, [r1, #0]
 800c852:	4770      	bx	lr
 800c854:	4610      	mov	r0, r2
 800c856:	e7e9      	b.n	800c82c <__lo0bits+0x2a>
 800c858:	2000      	movs	r0, #0
 800c85a:	4770      	bx	lr
 800c85c:	2020      	movs	r0, #32
 800c85e:	4770      	bx	lr

0800c860 <__i2b>:
 800c860:	b510      	push	{r4, lr}
 800c862:	460c      	mov	r4, r1
 800c864:	2101      	movs	r1, #1
 800c866:	f7ff fee9 	bl	800c63c <_Balloc>
 800c86a:	2201      	movs	r2, #1
 800c86c:	6144      	str	r4, [r0, #20]
 800c86e:	6102      	str	r2, [r0, #16]
 800c870:	bd10      	pop	{r4, pc}

0800c872 <__multiply>:
 800c872:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c876:	4614      	mov	r4, r2
 800c878:	690a      	ldr	r2, [r1, #16]
 800c87a:	6923      	ldr	r3, [r4, #16]
 800c87c:	4688      	mov	r8, r1
 800c87e:	429a      	cmp	r2, r3
 800c880:	bfbe      	ittt	lt
 800c882:	460b      	movlt	r3, r1
 800c884:	46a0      	movlt	r8, r4
 800c886:	461c      	movlt	r4, r3
 800c888:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c88c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c890:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c894:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c898:	eb07 0609 	add.w	r6, r7, r9
 800c89c:	42b3      	cmp	r3, r6
 800c89e:	bfb8      	it	lt
 800c8a0:	3101      	addlt	r1, #1
 800c8a2:	f7ff fecb 	bl	800c63c <_Balloc>
 800c8a6:	f100 0514 	add.w	r5, r0, #20
 800c8aa:	462b      	mov	r3, r5
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c8b2:	4573      	cmp	r3, lr
 800c8b4:	d316      	bcc.n	800c8e4 <__multiply+0x72>
 800c8b6:	f104 0214 	add.w	r2, r4, #20
 800c8ba:	f108 0114 	add.w	r1, r8, #20
 800c8be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c8c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	9b00      	ldr	r3, [sp, #0]
 800c8ca:	9201      	str	r2, [sp, #4]
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d80c      	bhi.n	800c8ea <__multiply+0x78>
 800c8d0:	2e00      	cmp	r6, #0
 800c8d2:	dd03      	ble.n	800c8dc <__multiply+0x6a>
 800c8d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d05d      	beq.n	800c998 <__multiply+0x126>
 800c8dc:	6106      	str	r6, [r0, #16]
 800c8de:	b003      	add	sp, #12
 800c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	f843 2b04 	str.w	r2, [r3], #4
 800c8e8:	e7e3      	b.n	800c8b2 <__multiply+0x40>
 800c8ea:	f8b2 b000 	ldrh.w	fp, [r2]
 800c8ee:	f1bb 0f00 	cmp.w	fp, #0
 800c8f2:	d023      	beq.n	800c93c <__multiply+0xca>
 800c8f4:	4689      	mov	r9, r1
 800c8f6:	46ac      	mov	ip, r5
 800c8f8:	f04f 0800 	mov.w	r8, #0
 800c8fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800c900:	f8dc a000 	ldr.w	sl, [ip]
 800c904:	b2a3      	uxth	r3, r4
 800c906:	fa1f fa8a 	uxth.w	sl, sl
 800c90a:	fb0b a303 	mla	r3, fp, r3, sl
 800c90e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c912:	f8dc 4000 	ldr.w	r4, [ip]
 800c916:	4443      	add	r3, r8
 800c918:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c91c:	fb0b 840a 	mla	r4, fp, sl, r8
 800c920:	46e2      	mov	sl, ip
 800c922:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c926:	b29b      	uxth	r3, r3
 800c928:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c92c:	454f      	cmp	r7, r9
 800c92e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c932:	f84a 3b04 	str.w	r3, [sl], #4
 800c936:	d82b      	bhi.n	800c990 <__multiply+0x11e>
 800c938:	f8cc 8004 	str.w	r8, [ip, #4]
 800c93c:	9b01      	ldr	r3, [sp, #4]
 800c93e:	3204      	adds	r2, #4
 800c940:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c944:	f1ba 0f00 	cmp.w	sl, #0
 800c948:	d020      	beq.n	800c98c <__multiply+0x11a>
 800c94a:	4689      	mov	r9, r1
 800c94c:	46a8      	mov	r8, r5
 800c94e:	f04f 0b00 	mov.w	fp, #0
 800c952:	682b      	ldr	r3, [r5, #0]
 800c954:	f8b9 c000 	ldrh.w	ip, [r9]
 800c958:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	fb0a 440c 	mla	r4, sl, ip, r4
 800c962:	46c4      	mov	ip, r8
 800c964:	445c      	add	r4, fp
 800c966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c96a:	f84c 3b04 	str.w	r3, [ip], #4
 800c96e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c972:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c976:	0c1b      	lsrs	r3, r3, #16
 800c978:	fb0a b303 	mla	r3, sl, r3, fp
 800c97c:	454f      	cmp	r7, r9
 800c97e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c982:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c986:	d805      	bhi.n	800c994 <__multiply+0x122>
 800c988:	f8c8 3004 	str.w	r3, [r8, #4]
 800c98c:	3504      	adds	r5, #4
 800c98e:	e79b      	b.n	800c8c8 <__multiply+0x56>
 800c990:	46d4      	mov	ip, sl
 800c992:	e7b3      	b.n	800c8fc <__multiply+0x8a>
 800c994:	46e0      	mov	r8, ip
 800c996:	e7dd      	b.n	800c954 <__multiply+0xe2>
 800c998:	3e01      	subs	r6, #1
 800c99a:	e799      	b.n	800c8d0 <__multiply+0x5e>

0800c99c <__pow5mult>:
 800c99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a0:	4615      	mov	r5, r2
 800c9a2:	f012 0203 	ands.w	r2, r2, #3
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	d007      	beq.n	800c9bc <__pow5mult+0x20>
 800c9ac:	4c21      	ldr	r4, [pc, #132]	; (800ca34 <__pow5mult+0x98>)
 800c9ae:	3a01      	subs	r2, #1
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9b6:	f7ff fe8c 	bl	800c6d2 <__multadd>
 800c9ba:	4607      	mov	r7, r0
 800c9bc:	10ad      	asrs	r5, r5, #2
 800c9be:	d035      	beq.n	800ca2c <__pow5mult+0x90>
 800c9c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9c2:	b93c      	cbnz	r4, 800c9d4 <__pow5mult+0x38>
 800c9c4:	2010      	movs	r0, #16
 800c9c6:	f7fe f9b9 	bl	800ad3c <malloc>
 800c9ca:	6270      	str	r0, [r6, #36]	; 0x24
 800c9cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9d0:	6004      	str	r4, [r0, #0]
 800c9d2:	60c4      	str	r4, [r0, #12]
 800c9d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9dc:	b94c      	cbnz	r4, 800c9f2 <__pow5mult+0x56>
 800c9de:	f240 2171 	movw	r1, #625	; 0x271
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7ff ff3c 	bl	800c860 <__i2b>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	f04f 0800 	mov.w	r8, #0
 800c9f6:	07eb      	lsls	r3, r5, #31
 800c9f8:	d50a      	bpl.n	800ca10 <__pow5mult+0x74>
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7ff ff37 	bl	800c872 <__multiply>
 800ca04:	4681      	mov	r9, r0
 800ca06:	4639      	mov	r1, r7
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f7ff fe4b 	bl	800c6a4 <_Bfree>
 800ca0e:	464f      	mov	r7, r9
 800ca10:	106d      	asrs	r5, r5, #1
 800ca12:	d00b      	beq.n	800ca2c <__pow5mult+0x90>
 800ca14:	6820      	ldr	r0, [r4, #0]
 800ca16:	b938      	cbnz	r0, 800ca28 <__pow5mult+0x8c>
 800ca18:	4622      	mov	r2, r4
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f7ff ff28 	bl	800c872 <__multiply>
 800ca22:	6020      	str	r0, [r4, #0]
 800ca24:	f8c0 8000 	str.w	r8, [r0]
 800ca28:	4604      	mov	r4, r0
 800ca2a:	e7e4      	b.n	800c9f6 <__pow5mult+0x5a>
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca32:	bf00      	nop
 800ca34:	0800ef80 	.word	0x0800ef80

0800ca38 <__lshift>:
 800ca38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	4607      	mov	r7, r0
 800ca40:	4616      	mov	r6, r2
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca48:	eb0a 0903 	add.w	r9, sl, r3
 800ca4c:	6849      	ldr	r1, [r1, #4]
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	f109 0501 	add.w	r5, r9, #1
 800ca54:	42ab      	cmp	r3, r5
 800ca56:	db32      	blt.n	800cabe <__lshift+0x86>
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7ff fdef 	bl	800c63c <_Balloc>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4680      	mov	r8, r0
 800ca62:	461a      	mov	r2, r3
 800ca64:	f100 0114 	add.w	r1, r0, #20
 800ca68:	4553      	cmp	r3, sl
 800ca6a:	db2b      	blt.n	800cac4 <__lshift+0x8c>
 800ca6c:	6920      	ldr	r0, [r4, #16]
 800ca6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca72:	f104 0314 	add.w	r3, r4, #20
 800ca76:	f016 021f 	ands.w	r2, r6, #31
 800ca7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca82:	d025      	beq.n	800cad0 <__lshift+0x98>
 800ca84:	2000      	movs	r0, #0
 800ca86:	f1c2 0e20 	rsb	lr, r2, #32
 800ca8a:	468a      	mov	sl, r1
 800ca8c:	681e      	ldr	r6, [r3, #0]
 800ca8e:	4096      	lsls	r6, r2
 800ca90:	4330      	orrs	r0, r6
 800ca92:	f84a 0b04 	str.w	r0, [sl], #4
 800ca96:	f853 0b04 	ldr.w	r0, [r3], #4
 800ca9a:	459c      	cmp	ip, r3
 800ca9c:	fa20 f00e 	lsr.w	r0, r0, lr
 800caa0:	d814      	bhi.n	800cacc <__lshift+0x94>
 800caa2:	6048      	str	r0, [r1, #4]
 800caa4:	b108      	cbz	r0, 800caaa <__lshift+0x72>
 800caa6:	f109 0502 	add.w	r5, r9, #2
 800caaa:	3d01      	subs	r5, #1
 800caac:	4638      	mov	r0, r7
 800caae:	f8c8 5010 	str.w	r5, [r8, #16]
 800cab2:	4621      	mov	r1, r4
 800cab4:	f7ff fdf6 	bl	800c6a4 <_Bfree>
 800cab8:	4640      	mov	r0, r8
 800caba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cabe:	3101      	adds	r1, #1
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	e7c7      	b.n	800ca54 <__lshift+0x1c>
 800cac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cac8:	3301      	adds	r3, #1
 800caca:	e7cd      	b.n	800ca68 <__lshift+0x30>
 800cacc:	4651      	mov	r1, sl
 800cace:	e7dc      	b.n	800ca8a <__lshift+0x52>
 800cad0:	3904      	subs	r1, #4
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	459c      	cmp	ip, r3
 800cad8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cadc:	d8f9      	bhi.n	800cad2 <__lshift+0x9a>
 800cade:	e7e4      	b.n	800caaa <__lshift+0x72>

0800cae0 <__mcmp>:
 800cae0:	6903      	ldr	r3, [r0, #16]
 800cae2:	690a      	ldr	r2, [r1, #16]
 800cae4:	b530      	push	{r4, r5, lr}
 800cae6:	1a9b      	subs	r3, r3, r2
 800cae8:	d10c      	bne.n	800cb04 <__mcmp+0x24>
 800caea:	0092      	lsls	r2, r2, #2
 800caec:	3014      	adds	r0, #20
 800caee:	3114      	adds	r1, #20
 800caf0:	1884      	adds	r4, r0, r2
 800caf2:	4411      	add	r1, r2
 800caf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cafc:	4295      	cmp	r5, r2
 800cafe:	d003      	beq.n	800cb08 <__mcmp+0x28>
 800cb00:	d305      	bcc.n	800cb0e <__mcmp+0x2e>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4618      	mov	r0, r3
 800cb06:	bd30      	pop	{r4, r5, pc}
 800cb08:	42a0      	cmp	r0, r4
 800cb0a:	d3f3      	bcc.n	800caf4 <__mcmp+0x14>
 800cb0c:	e7fa      	b.n	800cb04 <__mcmp+0x24>
 800cb0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb12:	e7f7      	b.n	800cb04 <__mcmp+0x24>

0800cb14 <__mdiff>:
 800cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	460d      	mov	r5, r1
 800cb1a:	4607      	mov	r7, r0
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	4628      	mov	r0, r5
 800cb20:	4614      	mov	r4, r2
 800cb22:	f7ff ffdd 	bl	800cae0 <__mcmp>
 800cb26:	1e06      	subs	r6, r0, #0
 800cb28:	d108      	bne.n	800cb3c <__mdiff+0x28>
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	f7ff fd85 	bl	800c63c <_Balloc>
 800cb32:	2301      	movs	r3, #1
 800cb34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3c:	bfa4      	itt	ge
 800cb3e:	4623      	movge	r3, r4
 800cb40:	462c      	movge	r4, r5
 800cb42:	4638      	mov	r0, r7
 800cb44:	6861      	ldr	r1, [r4, #4]
 800cb46:	bfa6      	itte	ge
 800cb48:	461d      	movge	r5, r3
 800cb4a:	2600      	movge	r6, #0
 800cb4c:	2601      	movlt	r6, #1
 800cb4e:	f7ff fd75 	bl	800c63c <_Balloc>
 800cb52:	f04f 0e00 	mov.w	lr, #0
 800cb56:	60c6      	str	r6, [r0, #12]
 800cb58:	692b      	ldr	r3, [r5, #16]
 800cb5a:	6926      	ldr	r6, [r4, #16]
 800cb5c:	f104 0214 	add.w	r2, r4, #20
 800cb60:	f105 0914 	add.w	r9, r5, #20
 800cb64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cb68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cb6c:	f100 0114 	add.w	r1, r0, #20
 800cb70:	f852 ab04 	ldr.w	sl, [r2], #4
 800cb74:	f859 5b04 	ldr.w	r5, [r9], #4
 800cb78:	fa1f f38a 	uxth.w	r3, sl
 800cb7c:	4473      	add	r3, lr
 800cb7e:	b2ac      	uxth	r4, r5
 800cb80:	1b1b      	subs	r3, r3, r4
 800cb82:	0c2c      	lsrs	r4, r5, #16
 800cb84:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800cb88:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800cb92:	45c8      	cmp	r8, r9
 800cb94:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800cb98:	4694      	mov	ip, r2
 800cb9a:	f841 4b04 	str.w	r4, [r1], #4
 800cb9e:	d8e7      	bhi.n	800cb70 <__mdiff+0x5c>
 800cba0:	45bc      	cmp	ip, r7
 800cba2:	d304      	bcc.n	800cbae <__mdiff+0x9a>
 800cba4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cba8:	b183      	cbz	r3, 800cbcc <__mdiff+0xb8>
 800cbaa:	6106      	str	r6, [r0, #16]
 800cbac:	e7c4      	b.n	800cb38 <__mdiff+0x24>
 800cbae:	f85c 4b04 	ldr.w	r4, [ip], #4
 800cbb2:	b2a2      	uxth	r2, r4
 800cbb4:	4472      	add	r2, lr
 800cbb6:	1413      	asrs	r3, r2, #16
 800cbb8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cbbc:	b292      	uxth	r2, r2
 800cbbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cbc2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cbc6:	f841 2b04 	str.w	r2, [r1], #4
 800cbca:	e7e9      	b.n	800cba0 <__mdiff+0x8c>
 800cbcc:	3e01      	subs	r6, #1
 800cbce:	e7e9      	b.n	800cba4 <__mdiff+0x90>

0800cbd0 <__ulp>:
 800cbd0:	4b10      	ldr	r3, [pc, #64]	; (800cc14 <__ulp+0x44>)
 800cbd2:	400b      	ands	r3, r1
 800cbd4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dd02      	ble.n	800cbe2 <__ulp+0x12>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4770      	bx	lr
 800cbe2:	425b      	negs	r3, r3
 800cbe4:	151b      	asrs	r3, r3, #20
 800cbe6:	2b13      	cmp	r3, #19
 800cbe8:	f04f 0000 	mov.w	r0, #0
 800cbec:	f04f 0100 	mov.w	r1, #0
 800cbf0:	dc04      	bgt.n	800cbfc <__ulp+0x2c>
 800cbf2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cbf6:	fa42 f103 	asr.w	r1, r2, r3
 800cbfa:	4770      	bx	lr
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	3b14      	subs	r3, #20
 800cc00:	2b1e      	cmp	r3, #30
 800cc02:	bfce      	itee	gt
 800cc04:	4613      	movgt	r3, r2
 800cc06:	f1c3 031f 	rsble	r3, r3, #31
 800cc0a:	fa02 f303 	lslle.w	r3, r2, r3
 800cc0e:	4618      	mov	r0, r3
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	7ff00000 	.word	0x7ff00000

0800cc18 <__b2d>:
 800cc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc1c:	6907      	ldr	r7, [r0, #16]
 800cc1e:	f100 0914 	add.w	r9, r0, #20
 800cc22:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cc26:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cc2a:	f1a7 0804 	sub.w	r8, r7, #4
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f7ff fdc8 	bl	800c7c4 <__hi0bits>
 800cc34:	f1c0 0320 	rsb	r3, r0, #32
 800cc38:	280a      	cmp	r0, #10
 800cc3a:	600b      	str	r3, [r1, #0]
 800cc3c:	491e      	ldr	r1, [pc, #120]	; (800ccb8 <__b2d+0xa0>)
 800cc3e:	dc17      	bgt.n	800cc70 <__b2d+0x58>
 800cc40:	45c1      	cmp	r9, r8
 800cc42:	bf28      	it	cs
 800cc44:	2200      	movcs	r2, #0
 800cc46:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc4a:	fa26 f30c 	lsr.w	r3, r6, ip
 800cc4e:	bf38      	it	cc
 800cc50:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cc54:	ea43 0501 	orr.w	r5, r3, r1
 800cc58:	f100 0315 	add.w	r3, r0, #21
 800cc5c:	fa06 f303 	lsl.w	r3, r6, r3
 800cc60:	fa22 f20c 	lsr.w	r2, r2, ip
 800cc64:	ea43 0402 	orr.w	r4, r3, r2
 800cc68:	4620      	mov	r0, r4
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc70:	45c1      	cmp	r9, r8
 800cc72:	bf3a      	itte	cc
 800cc74:	f1a7 0808 	subcc.w	r8, r7, #8
 800cc78:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cc7c:	2200      	movcs	r2, #0
 800cc7e:	f1b0 030b 	subs.w	r3, r0, #11
 800cc82:	d015      	beq.n	800ccb0 <__b2d+0x98>
 800cc84:	409e      	lsls	r6, r3
 800cc86:	f1c3 0720 	rsb	r7, r3, #32
 800cc8a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800cc8e:	fa22 f107 	lsr.w	r1, r2, r7
 800cc92:	45c8      	cmp	r8, r9
 800cc94:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800cc98:	ea46 0501 	orr.w	r5, r6, r1
 800cc9c:	bf94      	ite	ls
 800cc9e:	2100      	movls	r1, #0
 800cca0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cca4:	fa02 f003 	lsl.w	r0, r2, r3
 800cca8:	40f9      	lsrs	r1, r7
 800ccaa:	ea40 0401 	orr.w	r4, r0, r1
 800ccae:	e7db      	b.n	800cc68 <__b2d+0x50>
 800ccb0:	ea46 0501 	orr.w	r5, r6, r1
 800ccb4:	4614      	mov	r4, r2
 800ccb6:	e7d7      	b.n	800cc68 <__b2d+0x50>
 800ccb8:	3ff00000 	.word	0x3ff00000

0800ccbc <__d2b>:
 800ccbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ccc0:	461c      	mov	r4, r3
 800ccc2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	4690      	mov	r8, r2
 800ccca:	f7ff fcb7 	bl	800c63c <_Balloc>
 800ccce:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ccd2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	bb34      	cbnz	r4, 800cd28 <__d2b+0x6c>
 800ccda:	9201      	str	r2, [sp, #4]
 800ccdc:	f1b8 0200 	subs.w	r2, r8, #0
 800cce0:	d027      	beq.n	800cd32 <__d2b+0x76>
 800cce2:	a802      	add	r0, sp, #8
 800cce4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800cce8:	f7ff fd8b 	bl	800c802 <__lo0bits>
 800ccec:	9900      	ldr	r1, [sp, #0]
 800ccee:	b1f0      	cbz	r0, 800cd2e <__d2b+0x72>
 800ccf0:	9a01      	ldr	r2, [sp, #4]
 800ccf2:	f1c0 0320 	rsb	r3, r0, #32
 800ccf6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfa:	430b      	orrs	r3, r1
 800ccfc:	40c2      	lsrs	r2, r0
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	9201      	str	r2, [sp, #4]
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bf14      	ite	ne
 800cd08:	2102      	movne	r1, #2
 800cd0a:	2101      	moveq	r1, #1
 800cd0c:	61bb      	str	r3, [r7, #24]
 800cd0e:	6139      	str	r1, [r7, #16]
 800cd10:	b1c4      	cbz	r4, 800cd44 <__d2b+0x88>
 800cd12:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cd16:	4404      	add	r4, r0
 800cd18:	6034      	str	r4, [r6, #0]
 800cd1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd1e:	6028      	str	r0, [r5, #0]
 800cd20:	4638      	mov	r0, r7
 800cd22:	b002      	add	sp, #8
 800cd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cd2c:	e7d5      	b.n	800ccda <__d2b+0x1e>
 800cd2e:	6179      	str	r1, [r7, #20]
 800cd30:	e7e7      	b.n	800cd02 <__d2b+0x46>
 800cd32:	a801      	add	r0, sp, #4
 800cd34:	f7ff fd65 	bl	800c802 <__lo0bits>
 800cd38:	2101      	movs	r1, #1
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	6139      	str	r1, [r7, #16]
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	3020      	adds	r0, #32
 800cd42:	e7e5      	b.n	800cd10 <__d2b+0x54>
 800cd44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd48:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cd4c:	6030      	str	r0, [r6, #0]
 800cd4e:	6918      	ldr	r0, [r3, #16]
 800cd50:	f7ff fd38 	bl	800c7c4 <__hi0bits>
 800cd54:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cd58:	e7e1      	b.n	800cd1e <__d2b+0x62>

0800cd5a <__ratio>:
 800cd5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5e:	4688      	mov	r8, r1
 800cd60:	4669      	mov	r1, sp
 800cd62:	4681      	mov	r9, r0
 800cd64:	f7ff ff58 	bl	800cc18 <__b2d>
 800cd68:	468b      	mov	fp, r1
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	460f      	mov	r7, r1
 800cd6e:	4640      	mov	r0, r8
 800cd70:	a901      	add	r1, sp, #4
 800cd72:	f7ff ff51 	bl	800cc18 <__b2d>
 800cd76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd7e:	460d      	mov	r5, r1
 800cd80:	eba3 0c02 	sub.w	ip, r3, r2
 800cd84:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd88:	1a9b      	subs	r3, r3, r2
 800cd8a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	bfd5      	itete	le
 800cd92:	460a      	movle	r2, r1
 800cd94:	463a      	movgt	r2, r7
 800cd96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd9a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cd9e:	bfd8      	it	le
 800cda0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800cda4:	462b      	mov	r3, r5
 800cda6:	4602      	mov	r2, r0
 800cda8:	4659      	mov	r1, fp
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7f3 fcbe 	bl	800072c <__aeabi_ddiv>
 800cdb0:	b003      	add	sp, #12
 800cdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cdb8 <_mprec_log10>:
 800cdb8:	2817      	cmp	r0, #23
 800cdba:	b5d0      	push	{r4, r6, r7, lr}
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	dc05      	bgt.n	800cdcc <_mprec_log10+0x14>
 800cdc0:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <_mprec_log10+0x2c>)
 800cdc2:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800cdc6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cdca:	bdd0      	pop	{r4, r6, r7, pc}
 800cdcc:	2000      	movs	r0, #0
 800cdce:	2600      	movs	r6, #0
 800cdd0:	4905      	ldr	r1, [pc, #20]	; (800cde8 <_mprec_log10+0x30>)
 800cdd2:	4f06      	ldr	r7, [pc, #24]	; (800cdec <_mprec_log10+0x34>)
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	f7f3 fb7e 	bl	80004d8 <__aeabi_dmul>
 800cddc:	3c01      	subs	r4, #1
 800cdde:	d1f9      	bne.n	800cdd4 <_mprec_log10+0x1c>
 800cde0:	e7f3      	b.n	800cdca <_mprec_log10+0x12>
 800cde2:	bf00      	nop
 800cde4:	0800eeb8 	.word	0x0800eeb8
 800cde8:	3ff00000 	.word	0x3ff00000
 800cdec:	40240000 	.word	0x40240000

0800cdf0 <__copybits>:
 800cdf0:	3901      	subs	r1, #1
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	1149      	asrs	r1, r1, #5
 800cdf6:	6914      	ldr	r4, [r2, #16]
 800cdf8:	3101      	adds	r1, #1
 800cdfa:	f102 0314 	add.w	r3, r2, #20
 800cdfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce06:	42a3      	cmp	r3, r4
 800ce08:	4602      	mov	r2, r0
 800ce0a:	d303      	bcc.n	800ce14 <__copybits+0x24>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	428a      	cmp	r2, r1
 800ce10:	d305      	bcc.n	800ce1e <__copybits+0x2e>
 800ce12:	bd10      	pop	{r4, pc}
 800ce14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce18:	f840 2b04 	str.w	r2, [r0], #4
 800ce1c:	e7f3      	b.n	800ce06 <__copybits+0x16>
 800ce1e:	f842 3b04 	str.w	r3, [r2], #4
 800ce22:	e7f4      	b.n	800ce0e <__copybits+0x1e>

0800ce24 <__any_on>:
 800ce24:	f100 0214 	add.w	r2, r0, #20
 800ce28:	6900      	ldr	r0, [r0, #16]
 800ce2a:	114b      	asrs	r3, r1, #5
 800ce2c:	4298      	cmp	r0, r3
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	db11      	blt.n	800ce56 <__any_on+0x32>
 800ce32:	dd0a      	ble.n	800ce4a <__any_on+0x26>
 800ce34:	f011 011f 	ands.w	r1, r1, #31
 800ce38:	d007      	beq.n	800ce4a <__any_on+0x26>
 800ce3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce3e:	fa24 f001 	lsr.w	r0, r4, r1
 800ce42:	fa00 f101 	lsl.w	r1, r0, r1
 800ce46:	428c      	cmp	r4, r1
 800ce48:	d10b      	bne.n	800ce62 <__any_on+0x3e>
 800ce4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d803      	bhi.n	800ce5a <__any_on+0x36>
 800ce52:	2000      	movs	r0, #0
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	4603      	mov	r3, r0
 800ce58:	e7f7      	b.n	800ce4a <__any_on+0x26>
 800ce5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce5e:	2900      	cmp	r1, #0
 800ce60:	d0f5      	beq.n	800ce4e <__any_on+0x2a>
 800ce62:	2001      	movs	r0, #1
 800ce64:	e7f6      	b.n	800ce54 <__any_on+0x30>

0800ce66 <_calloc_r>:
 800ce66:	b538      	push	{r3, r4, r5, lr}
 800ce68:	fb02 f401 	mul.w	r4, r2, r1
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	f7fd ffc9 	bl	800ae04 <_malloc_r>
 800ce72:	4605      	mov	r5, r0
 800ce74:	b118      	cbz	r0, 800ce7e <_calloc_r+0x18>
 800ce76:	4622      	mov	r2, r4
 800ce78:	2100      	movs	r1, #0
 800ce7a:	f7fd ff6f 	bl	800ad5c <memset>
 800ce7e:	4628      	mov	r0, r5
 800ce80:	bd38      	pop	{r3, r4, r5, pc}

0800ce82 <_realloc_r>:
 800ce82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce84:	4607      	mov	r7, r0
 800ce86:	4614      	mov	r4, r2
 800ce88:	460e      	mov	r6, r1
 800ce8a:	b921      	cbnz	r1, 800ce96 <_realloc_r+0x14>
 800ce8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce90:	4611      	mov	r1, r2
 800ce92:	f7fd bfb7 	b.w	800ae04 <_malloc_r>
 800ce96:	b922      	cbnz	r2, 800cea2 <_realloc_r+0x20>
 800ce98:	f7fd ff68 	bl	800ad6c <_free_r>
 800ce9c:	4625      	mov	r5, r4
 800ce9e:	4628      	mov	r0, r5
 800cea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cea2:	f001 f978 	bl	800e196 <_malloc_usable_size_r>
 800cea6:	42a0      	cmp	r0, r4
 800cea8:	d20f      	bcs.n	800ceca <_realloc_r+0x48>
 800ceaa:	4621      	mov	r1, r4
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7fd ffa9 	bl	800ae04 <_malloc_r>
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d0f2      	beq.n	800ce9e <_realloc_r+0x1c>
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4622      	mov	r2, r4
 800cebc:	f7ff fbb1 	bl	800c622 <memcpy>
 800cec0:	4631      	mov	r1, r6
 800cec2:	4638      	mov	r0, r7
 800cec4:	f7fd ff52 	bl	800ad6c <_free_r>
 800cec8:	e7e9      	b.n	800ce9e <_realloc_r+0x1c>
 800ceca:	4635      	mov	r5, r6
 800cecc:	e7e7      	b.n	800ce9e <_realloc_r+0x1c>

0800cece <__ssputs_r>:
 800cece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced2:	688e      	ldr	r6, [r1, #8]
 800ced4:	4682      	mov	sl, r0
 800ced6:	429e      	cmp	r6, r3
 800ced8:	460c      	mov	r4, r1
 800ceda:	4690      	mov	r8, r2
 800cedc:	4699      	mov	r9, r3
 800cede:	d837      	bhi.n	800cf50 <__ssputs_r+0x82>
 800cee0:	898a      	ldrh	r2, [r1, #12]
 800cee2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cee6:	d031      	beq.n	800cf4c <__ssputs_r+0x7e>
 800cee8:	2302      	movs	r3, #2
 800ceea:	6825      	ldr	r5, [r4, #0]
 800ceec:	6909      	ldr	r1, [r1, #16]
 800ceee:	1a6f      	subs	r7, r5, r1
 800cef0:	6965      	ldr	r5, [r4, #20]
 800cef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cef6:	fb95 f5f3 	sdiv	r5, r5, r3
 800cefa:	f109 0301 	add.w	r3, r9, #1
 800cefe:	443b      	add	r3, r7
 800cf00:	429d      	cmp	r5, r3
 800cf02:	bf38      	it	cc
 800cf04:	461d      	movcc	r5, r3
 800cf06:	0553      	lsls	r3, r2, #21
 800cf08:	d530      	bpl.n	800cf6c <__ssputs_r+0x9e>
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	f7fd ff7a 	bl	800ae04 <_malloc_r>
 800cf10:	4606      	mov	r6, r0
 800cf12:	b950      	cbnz	r0, 800cf2a <__ssputs_r+0x5c>
 800cf14:	230c      	movs	r3, #12
 800cf16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf1a:	f8ca 3000 	str.w	r3, [sl]
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2a:	463a      	mov	r2, r7
 800cf2c:	6921      	ldr	r1, [r4, #16]
 800cf2e:	f7ff fb78 	bl	800c622 <memcpy>
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf3c:	81a3      	strh	r3, [r4, #12]
 800cf3e:	6126      	str	r6, [r4, #16]
 800cf40:	443e      	add	r6, r7
 800cf42:	6026      	str	r6, [r4, #0]
 800cf44:	464e      	mov	r6, r9
 800cf46:	6165      	str	r5, [r4, #20]
 800cf48:	1bed      	subs	r5, r5, r7
 800cf4a:	60a5      	str	r5, [r4, #8]
 800cf4c:	454e      	cmp	r6, r9
 800cf4e:	d900      	bls.n	800cf52 <__ssputs_r+0x84>
 800cf50:	464e      	mov	r6, r9
 800cf52:	4632      	mov	r2, r6
 800cf54:	4641      	mov	r1, r8
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	f001 f904 	bl	800e164 <memmove>
 800cf5c:	68a3      	ldr	r3, [r4, #8]
 800cf5e:	2000      	movs	r0, #0
 800cf60:	1b9b      	subs	r3, r3, r6
 800cf62:	60a3      	str	r3, [r4, #8]
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	441e      	add	r6, r3
 800cf68:	6026      	str	r6, [r4, #0]
 800cf6a:	e7dc      	b.n	800cf26 <__ssputs_r+0x58>
 800cf6c:	462a      	mov	r2, r5
 800cf6e:	f7ff ff88 	bl	800ce82 <_realloc_r>
 800cf72:	4606      	mov	r6, r0
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d1e2      	bne.n	800cf3e <__ssputs_r+0x70>
 800cf78:	6921      	ldr	r1, [r4, #16]
 800cf7a:	4650      	mov	r0, sl
 800cf7c:	f7fd fef6 	bl	800ad6c <_free_r>
 800cf80:	e7c8      	b.n	800cf14 <__ssputs_r+0x46>
	...

0800cf84 <_svfiprintf_r>:
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	461d      	mov	r5, r3
 800cf8a:	898b      	ldrh	r3, [r1, #12]
 800cf8c:	b09d      	sub	sp, #116	; 0x74
 800cf8e:	061f      	lsls	r7, r3, #24
 800cf90:	4680      	mov	r8, r0
 800cf92:	460c      	mov	r4, r1
 800cf94:	4616      	mov	r6, r2
 800cf96:	d50f      	bpl.n	800cfb8 <_svfiprintf_r+0x34>
 800cf98:	690b      	ldr	r3, [r1, #16]
 800cf9a:	b96b      	cbnz	r3, 800cfb8 <_svfiprintf_r+0x34>
 800cf9c:	2140      	movs	r1, #64	; 0x40
 800cf9e:	f7fd ff31 	bl	800ae04 <_malloc_r>
 800cfa2:	6020      	str	r0, [r4, #0]
 800cfa4:	6120      	str	r0, [r4, #16]
 800cfa6:	b928      	cbnz	r0, 800cfb4 <_svfiprintf_r+0x30>
 800cfa8:	230c      	movs	r3, #12
 800cfaa:	f8c8 3000 	str.w	r3, [r8]
 800cfae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfb2:	e0c8      	b.n	800d146 <_svfiprintf_r+0x1c2>
 800cfb4:	2340      	movs	r3, #64	; 0x40
 800cfb6:	6163      	str	r3, [r4, #20]
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9309      	str	r3, [sp, #36]	; 0x24
 800cfbc:	2320      	movs	r3, #32
 800cfbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc2:	2330      	movs	r3, #48	; 0x30
 800cfc4:	f04f 0b01 	mov.w	fp, #1
 800cfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfcc:	9503      	str	r5, [sp, #12]
 800cfce:	4637      	mov	r7, r6
 800cfd0:	463d      	mov	r5, r7
 800cfd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cfd6:	b10b      	cbz	r3, 800cfdc <_svfiprintf_r+0x58>
 800cfd8:	2b25      	cmp	r3, #37	; 0x25
 800cfda:	d13e      	bne.n	800d05a <_svfiprintf_r+0xd6>
 800cfdc:	ebb7 0a06 	subs.w	sl, r7, r6
 800cfe0:	d00b      	beq.n	800cffa <_svfiprintf_r+0x76>
 800cfe2:	4653      	mov	r3, sl
 800cfe4:	4632      	mov	r2, r6
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	4640      	mov	r0, r8
 800cfea:	f7ff ff70 	bl	800cece <__ssputs_r>
 800cfee:	3001      	adds	r0, #1
 800cff0:	f000 80a4 	beq.w	800d13c <_svfiprintf_r+0x1b8>
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	4453      	add	r3, sl
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	783b      	ldrb	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f000 809d 	beq.w	800d13c <_svfiprintf_r+0x1b8>
 800d002:	2300      	movs	r3, #0
 800d004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	9307      	str	r3, [sp, #28]
 800d010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d014:	931a      	str	r3, [sp, #104]	; 0x68
 800d016:	462f      	mov	r7, r5
 800d018:	2205      	movs	r2, #5
 800d01a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d01e:	4850      	ldr	r0, [pc, #320]	; (800d160 <_svfiprintf_r+0x1dc>)
 800d020:	f001 f892 	bl	800e148 <memchr>
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	b9d0      	cbnz	r0, 800d05e <_svfiprintf_r+0xda>
 800d028:	06d9      	lsls	r1, r3, #27
 800d02a:	bf44      	itt	mi
 800d02c:	2220      	movmi	r2, #32
 800d02e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d032:	071a      	lsls	r2, r3, #28
 800d034:	bf44      	itt	mi
 800d036:	222b      	movmi	r2, #43	; 0x2b
 800d038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d03c:	782a      	ldrb	r2, [r5, #0]
 800d03e:	2a2a      	cmp	r2, #42	; 0x2a
 800d040:	d015      	beq.n	800d06e <_svfiprintf_r+0xea>
 800d042:	462f      	mov	r7, r5
 800d044:	2000      	movs	r0, #0
 800d046:	250a      	movs	r5, #10
 800d048:	9a07      	ldr	r2, [sp, #28]
 800d04a:	4639      	mov	r1, r7
 800d04c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d050:	3b30      	subs	r3, #48	; 0x30
 800d052:	2b09      	cmp	r3, #9
 800d054:	d94d      	bls.n	800d0f2 <_svfiprintf_r+0x16e>
 800d056:	b1b8      	cbz	r0, 800d088 <_svfiprintf_r+0x104>
 800d058:	e00f      	b.n	800d07a <_svfiprintf_r+0xf6>
 800d05a:	462f      	mov	r7, r5
 800d05c:	e7b8      	b.n	800cfd0 <_svfiprintf_r+0x4c>
 800d05e:	4a40      	ldr	r2, [pc, #256]	; (800d160 <_svfiprintf_r+0x1dc>)
 800d060:	463d      	mov	r5, r7
 800d062:	1a80      	subs	r0, r0, r2
 800d064:	fa0b f000 	lsl.w	r0, fp, r0
 800d068:	4318      	orrs	r0, r3
 800d06a:	9004      	str	r0, [sp, #16]
 800d06c:	e7d3      	b.n	800d016 <_svfiprintf_r+0x92>
 800d06e:	9a03      	ldr	r2, [sp, #12]
 800d070:	1d11      	adds	r1, r2, #4
 800d072:	6812      	ldr	r2, [r2, #0]
 800d074:	9103      	str	r1, [sp, #12]
 800d076:	2a00      	cmp	r2, #0
 800d078:	db01      	blt.n	800d07e <_svfiprintf_r+0xfa>
 800d07a:	9207      	str	r2, [sp, #28]
 800d07c:	e004      	b.n	800d088 <_svfiprintf_r+0x104>
 800d07e:	4252      	negs	r2, r2
 800d080:	f043 0302 	orr.w	r3, r3, #2
 800d084:	9207      	str	r2, [sp, #28]
 800d086:	9304      	str	r3, [sp, #16]
 800d088:	783b      	ldrb	r3, [r7, #0]
 800d08a:	2b2e      	cmp	r3, #46	; 0x2e
 800d08c:	d10c      	bne.n	800d0a8 <_svfiprintf_r+0x124>
 800d08e:	787b      	ldrb	r3, [r7, #1]
 800d090:	2b2a      	cmp	r3, #42	; 0x2a
 800d092:	d133      	bne.n	800d0fc <_svfiprintf_r+0x178>
 800d094:	9b03      	ldr	r3, [sp, #12]
 800d096:	3702      	adds	r7, #2
 800d098:	1d1a      	adds	r2, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9203      	str	r2, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfb8      	it	lt
 800d0a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0a6:	9305      	str	r3, [sp, #20]
 800d0a8:	4d2e      	ldr	r5, [pc, #184]	; (800d164 <_svfiprintf_r+0x1e0>)
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	7839      	ldrb	r1, [r7, #0]
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f001 f84a 	bl	800e148 <memchr>
 800d0b4:	b138      	cbz	r0, 800d0c6 <_svfiprintf_r+0x142>
 800d0b6:	2340      	movs	r3, #64	; 0x40
 800d0b8:	1b40      	subs	r0, r0, r5
 800d0ba:	fa03 f000 	lsl.w	r0, r3, r0
 800d0be:	9b04      	ldr	r3, [sp, #16]
 800d0c0:	3701      	adds	r7, #1
 800d0c2:	4303      	orrs	r3, r0
 800d0c4:	9304      	str	r3, [sp, #16]
 800d0c6:	7839      	ldrb	r1, [r7, #0]
 800d0c8:	2206      	movs	r2, #6
 800d0ca:	4827      	ldr	r0, [pc, #156]	; (800d168 <_svfiprintf_r+0x1e4>)
 800d0cc:	1c7e      	adds	r6, r7, #1
 800d0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0d2:	f001 f839 	bl	800e148 <memchr>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d038      	beq.n	800d14c <_svfiprintf_r+0x1c8>
 800d0da:	4b24      	ldr	r3, [pc, #144]	; (800d16c <_svfiprintf_r+0x1e8>)
 800d0dc:	bb13      	cbnz	r3, 800d124 <_svfiprintf_r+0x1a0>
 800d0de:	9b03      	ldr	r3, [sp, #12]
 800d0e0:	3307      	adds	r3, #7
 800d0e2:	f023 0307 	bic.w	r3, r3, #7
 800d0e6:	3308      	adds	r3, #8
 800d0e8:	9303      	str	r3, [sp, #12]
 800d0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ec:	444b      	add	r3, r9
 800d0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f0:	e76d      	b.n	800cfce <_svfiprintf_r+0x4a>
 800d0f2:	fb05 3202 	mla	r2, r5, r2, r3
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	e7a6      	b.n	800d04a <_svfiprintf_r+0xc6>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	250a      	movs	r5, #10
 800d100:	4619      	mov	r1, r3
 800d102:	3701      	adds	r7, #1
 800d104:	9305      	str	r3, [sp, #20]
 800d106:	4638      	mov	r0, r7
 800d108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d10c:	3a30      	subs	r2, #48	; 0x30
 800d10e:	2a09      	cmp	r2, #9
 800d110:	d903      	bls.n	800d11a <_svfiprintf_r+0x196>
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0c8      	beq.n	800d0a8 <_svfiprintf_r+0x124>
 800d116:	9105      	str	r1, [sp, #20]
 800d118:	e7c6      	b.n	800d0a8 <_svfiprintf_r+0x124>
 800d11a:	fb05 2101 	mla	r1, r5, r1, r2
 800d11e:	2301      	movs	r3, #1
 800d120:	4607      	mov	r7, r0
 800d122:	e7f0      	b.n	800d106 <_svfiprintf_r+0x182>
 800d124:	ab03      	add	r3, sp, #12
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4622      	mov	r2, r4
 800d12a:	4b11      	ldr	r3, [pc, #68]	; (800d170 <_svfiprintf_r+0x1ec>)
 800d12c:	a904      	add	r1, sp, #16
 800d12e:	4640      	mov	r0, r8
 800d130:	f3af 8000 	nop.w
 800d134:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d138:	4681      	mov	r9, r0
 800d13a:	d1d6      	bne.n	800d0ea <_svfiprintf_r+0x166>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	065b      	lsls	r3, r3, #25
 800d140:	f53f af35 	bmi.w	800cfae <_svfiprintf_r+0x2a>
 800d144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d146:	b01d      	add	sp, #116	; 0x74
 800d148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14c:	ab03      	add	r3, sp, #12
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	4622      	mov	r2, r4
 800d152:	4b07      	ldr	r3, [pc, #28]	; (800d170 <_svfiprintf_r+0x1ec>)
 800d154:	a904      	add	r1, sp, #16
 800d156:	4640      	mov	r0, r8
 800d158:	f000 f882 	bl	800d260 <_printf_i>
 800d15c:	e7ea      	b.n	800d134 <_svfiprintf_r+0x1b0>
 800d15e:	bf00      	nop
 800d160:	0800ef8c 	.word	0x0800ef8c
 800d164:	0800ef92 	.word	0x0800ef92
 800d168:	0800ef96 	.word	0x0800ef96
 800d16c:	00000000 	.word	0x00000000
 800d170:	0800cecf 	.word	0x0800cecf

0800d174 <_printf_common>:
 800d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d178:	4691      	mov	r9, r2
 800d17a:	461f      	mov	r7, r3
 800d17c:	688a      	ldr	r2, [r1, #8]
 800d17e:	690b      	ldr	r3, [r1, #16]
 800d180:	4606      	mov	r6, r0
 800d182:	4293      	cmp	r3, r2
 800d184:	bfb8      	it	lt
 800d186:	4613      	movlt	r3, r2
 800d188:	f8c9 3000 	str.w	r3, [r9]
 800d18c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d190:	460c      	mov	r4, r1
 800d192:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d196:	b112      	cbz	r2, 800d19e <_printf_common+0x2a>
 800d198:	3301      	adds	r3, #1
 800d19a:	f8c9 3000 	str.w	r3, [r9]
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	0699      	lsls	r1, r3, #26
 800d1a2:	bf42      	ittt	mi
 800d1a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d1a8:	3302      	addmi	r3, #2
 800d1aa:	f8c9 3000 	strmi.w	r3, [r9]
 800d1ae:	6825      	ldr	r5, [r4, #0]
 800d1b0:	f015 0506 	ands.w	r5, r5, #6
 800d1b4:	d107      	bne.n	800d1c6 <_printf_common+0x52>
 800d1b6:	f104 0a19 	add.w	sl, r4, #25
 800d1ba:	68e3      	ldr	r3, [r4, #12]
 800d1bc:	f8d9 2000 	ldr.w	r2, [r9]
 800d1c0:	1a9b      	subs	r3, r3, r2
 800d1c2:	42ab      	cmp	r3, r5
 800d1c4:	dc29      	bgt.n	800d21a <_printf_common+0xa6>
 800d1c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1ca:	6822      	ldr	r2, [r4, #0]
 800d1cc:	3300      	adds	r3, #0
 800d1ce:	bf18      	it	ne
 800d1d0:	2301      	movne	r3, #1
 800d1d2:	0692      	lsls	r2, r2, #26
 800d1d4:	d42e      	bmi.n	800d234 <_printf_common+0xc0>
 800d1d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1da:	4639      	mov	r1, r7
 800d1dc:	4630      	mov	r0, r6
 800d1de:	47c0      	blx	r8
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	d021      	beq.n	800d228 <_printf_common+0xb4>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	68e5      	ldr	r5, [r4, #12]
 800d1e8:	f003 0306 	and.w	r3, r3, #6
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	bf18      	it	ne
 800d1f0:	2500      	movne	r5, #0
 800d1f2:	f8d9 2000 	ldr.w	r2, [r9]
 800d1f6:	f04f 0900 	mov.w	r9, #0
 800d1fa:	bf08      	it	eq
 800d1fc:	1aad      	subeq	r5, r5, r2
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	6922      	ldr	r2, [r4, #16]
 800d202:	bf08      	it	eq
 800d204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d208:	4293      	cmp	r3, r2
 800d20a:	bfc4      	itt	gt
 800d20c:	1a9b      	subgt	r3, r3, r2
 800d20e:	18ed      	addgt	r5, r5, r3
 800d210:	341a      	adds	r4, #26
 800d212:	454d      	cmp	r5, r9
 800d214:	d11a      	bne.n	800d24c <_printf_common+0xd8>
 800d216:	2000      	movs	r0, #0
 800d218:	e008      	b.n	800d22c <_printf_common+0xb8>
 800d21a:	2301      	movs	r3, #1
 800d21c:	4652      	mov	r2, sl
 800d21e:	4639      	mov	r1, r7
 800d220:	4630      	mov	r0, r6
 800d222:	47c0      	blx	r8
 800d224:	3001      	adds	r0, #1
 800d226:	d103      	bne.n	800d230 <_printf_common+0xbc>
 800d228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d230:	3501      	adds	r5, #1
 800d232:	e7c2      	b.n	800d1ba <_printf_common+0x46>
 800d234:	2030      	movs	r0, #48	; 0x30
 800d236:	18e1      	adds	r1, r4, r3
 800d238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d242:	4422      	add	r2, r4
 800d244:	3302      	adds	r3, #2
 800d246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d24a:	e7c4      	b.n	800d1d6 <_printf_common+0x62>
 800d24c:	2301      	movs	r3, #1
 800d24e:	4622      	mov	r2, r4
 800d250:	4639      	mov	r1, r7
 800d252:	4630      	mov	r0, r6
 800d254:	47c0      	blx	r8
 800d256:	3001      	adds	r0, #1
 800d258:	d0e6      	beq.n	800d228 <_printf_common+0xb4>
 800d25a:	f109 0901 	add.w	r9, r9, #1
 800d25e:	e7d8      	b.n	800d212 <_printf_common+0x9e>

0800d260 <_printf_i>:
 800d260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d264:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d268:	460c      	mov	r4, r1
 800d26a:	7e09      	ldrb	r1, [r1, #24]
 800d26c:	b085      	sub	sp, #20
 800d26e:	296e      	cmp	r1, #110	; 0x6e
 800d270:	4617      	mov	r7, r2
 800d272:	4606      	mov	r6, r0
 800d274:	4698      	mov	r8, r3
 800d276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d278:	f000 80b3 	beq.w	800d3e2 <_printf_i+0x182>
 800d27c:	d822      	bhi.n	800d2c4 <_printf_i+0x64>
 800d27e:	2963      	cmp	r1, #99	; 0x63
 800d280:	d036      	beq.n	800d2f0 <_printf_i+0x90>
 800d282:	d80a      	bhi.n	800d29a <_printf_i+0x3a>
 800d284:	2900      	cmp	r1, #0
 800d286:	f000 80b9 	beq.w	800d3fc <_printf_i+0x19c>
 800d28a:	2958      	cmp	r1, #88	; 0x58
 800d28c:	f000 8083 	beq.w	800d396 <_printf_i+0x136>
 800d290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d294:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d298:	e032      	b.n	800d300 <_printf_i+0xa0>
 800d29a:	2964      	cmp	r1, #100	; 0x64
 800d29c:	d001      	beq.n	800d2a2 <_printf_i+0x42>
 800d29e:	2969      	cmp	r1, #105	; 0x69
 800d2a0:	d1f6      	bne.n	800d290 <_printf_i+0x30>
 800d2a2:	6820      	ldr	r0, [r4, #0]
 800d2a4:	6813      	ldr	r3, [r2, #0]
 800d2a6:	0605      	lsls	r5, r0, #24
 800d2a8:	f103 0104 	add.w	r1, r3, #4
 800d2ac:	d52a      	bpl.n	800d304 <_printf_i+0xa4>
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6011      	str	r1, [r2, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	da03      	bge.n	800d2be <_printf_i+0x5e>
 800d2b6:	222d      	movs	r2, #45	; 0x2d
 800d2b8:	425b      	negs	r3, r3
 800d2ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d2be:	486f      	ldr	r0, [pc, #444]	; (800d47c <_printf_i+0x21c>)
 800d2c0:	220a      	movs	r2, #10
 800d2c2:	e039      	b.n	800d338 <_printf_i+0xd8>
 800d2c4:	2973      	cmp	r1, #115	; 0x73
 800d2c6:	f000 809d 	beq.w	800d404 <_printf_i+0x1a4>
 800d2ca:	d808      	bhi.n	800d2de <_printf_i+0x7e>
 800d2cc:	296f      	cmp	r1, #111	; 0x6f
 800d2ce:	d020      	beq.n	800d312 <_printf_i+0xb2>
 800d2d0:	2970      	cmp	r1, #112	; 0x70
 800d2d2:	d1dd      	bne.n	800d290 <_printf_i+0x30>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	f043 0320 	orr.w	r3, r3, #32
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	e003      	b.n	800d2e6 <_printf_i+0x86>
 800d2de:	2975      	cmp	r1, #117	; 0x75
 800d2e0:	d017      	beq.n	800d312 <_printf_i+0xb2>
 800d2e2:	2978      	cmp	r1, #120	; 0x78
 800d2e4:	d1d4      	bne.n	800d290 <_printf_i+0x30>
 800d2e6:	2378      	movs	r3, #120	; 0x78
 800d2e8:	4865      	ldr	r0, [pc, #404]	; (800d480 <_printf_i+0x220>)
 800d2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ee:	e055      	b.n	800d39c <_printf_i+0x13c>
 800d2f0:	6813      	ldr	r3, [r2, #0]
 800d2f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2f6:	1d19      	adds	r1, r3, #4
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6011      	str	r1, [r2, #0]
 800d2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d300:	2301      	movs	r3, #1
 800d302:	e08c      	b.n	800d41e <_printf_i+0x1be>
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d30a:	6011      	str	r1, [r2, #0]
 800d30c:	bf18      	it	ne
 800d30e:	b21b      	sxthne	r3, r3
 800d310:	e7cf      	b.n	800d2b2 <_printf_i+0x52>
 800d312:	6813      	ldr	r3, [r2, #0]
 800d314:	6825      	ldr	r5, [r4, #0]
 800d316:	1d18      	adds	r0, r3, #4
 800d318:	6010      	str	r0, [r2, #0]
 800d31a:	0628      	lsls	r0, r5, #24
 800d31c:	d501      	bpl.n	800d322 <_printf_i+0xc2>
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	e002      	b.n	800d328 <_printf_i+0xc8>
 800d322:	0668      	lsls	r0, r5, #25
 800d324:	d5fb      	bpl.n	800d31e <_printf_i+0xbe>
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	296f      	cmp	r1, #111	; 0x6f
 800d32a:	bf14      	ite	ne
 800d32c:	220a      	movne	r2, #10
 800d32e:	2208      	moveq	r2, #8
 800d330:	4852      	ldr	r0, [pc, #328]	; (800d47c <_printf_i+0x21c>)
 800d332:	2100      	movs	r1, #0
 800d334:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d338:	6865      	ldr	r5, [r4, #4]
 800d33a:	2d00      	cmp	r5, #0
 800d33c:	60a5      	str	r5, [r4, #8]
 800d33e:	f2c0 8095 	blt.w	800d46c <_printf_i+0x20c>
 800d342:	6821      	ldr	r1, [r4, #0]
 800d344:	f021 0104 	bic.w	r1, r1, #4
 800d348:	6021      	str	r1, [r4, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d13d      	bne.n	800d3ca <_printf_i+0x16a>
 800d34e:	2d00      	cmp	r5, #0
 800d350:	f040 808e 	bne.w	800d470 <_printf_i+0x210>
 800d354:	4665      	mov	r5, ip
 800d356:	2a08      	cmp	r2, #8
 800d358:	d10b      	bne.n	800d372 <_printf_i+0x112>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	07db      	lsls	r3, r3, #31
 800d35e:	d508      	bpl.n	800d372 <_printf_i+0x112>
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	6862      	ldr	r2, [r4, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	bfde      	ittt	le
 800d368:	2330      	movle	r3, #48	; 0x30
 800d36a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d36e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d372:	ebac 0305 	sub.w	r3, ip, r5
 800d376:	6123      	str	r3, [r4, #16]
 800d378:	f8cd 8000 	str.w	r8, [sp]
 800d37c:	463b      	mov	r3, r7
 800d37e:	aa03      	add	r2, sp, #12
 800d380:	4621      	mov	r1, r4
 800d382:	4630      	mov	r0, r6
 800d384:	f7ff fef6 	bl	800d174 <_printf_common>
 800d388:	3001      	adds	r0, #1
 800d38a:	d14d      	bne.n	800d428 <_printf_i+0x1c8>
 800d38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d390:	b005      	add	sp, #20
 800d392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d396:	4839      	ldr	r0, [pc, #228]	; (800d47c <_printf_i+0x21c>)
 800d398:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d39c:	6813      	ldr	r3, [r2, #0]
 800d39e:	6821      	ldr	r1, [r4, #0]
 800d3a0:	1d1d      	adds	r5, r3, #4
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6015      	str	r5, [r2, #0]
 800d3a6:	060a      	lsls	r2, r1, #24
 800d3a8:	d50b      	bpl.n	800d3c2 <_printf_i+0x162>
 800d3aa:	07ca      	lsls	r2, r1, #31
 800d3ac:	bf44      	itt	mi
 800d3ae:	f041 0120 	orrmi.w	r1, r1, #32
 800d3b2:	6021      	strmi	r1, [r4, #0]
 800d3b4:	b91b      	cbnz	r3, 800d3be <_printf_i+0x15e>
 800d3b6:	6822      	ldr	r2, [r4, #0]
 800d3b8:	f022 0220 	bic.w	r2, r2, #32
 800d3bc:	6022      	str	r2, [r4, #0]
 800d3be:	2210      	movs	r2, #16
 800d3c0:	e7b7      	b.n	800d332 <_printf_i+0xd2>
 800d3c2:	064d      	lsls	r5, r1, #25
 800d3c4:	bf48      	it	mi
 800d3c6:	b29b      	uxthmi	r3, r3
 800d3c8:	e7ef      	b.n	800d3aa <_printf_i+0x14a>
 800d3ca:	4665      	mov	r5, ip
 800d3cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3d0:	fb02 3311 	mls	r3, r2, r1, r3
 800d3d4:	5cc3      	ldrb	r3, [r0, r3]
 800d3d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3da:	460b      	mov	r3, r1
 800d3dc:	2900      	cmp	r1, #0
 800d3de:	d1f5      	bne.n	800d3cc <_printf_i+0x16c>
 800d3e0:	e7b9      	b.n	800d356 <_printf_i+0xf6>
 800d3e2:	6813      	ldr	r3, [r2, #0]
 800d3e4:	6825      	ldr	r5, [r4, #0]
 800d3e6:	1d18      	adds	r0, r3, #4
 800d3e8:	6961      	ldr	r1, [r4, #20]
 800d3ea:	6010      	str	r0, [r2, #0]
 800d3ec:	0628      	lsls	r0, r5, #24
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	d501      	bpl.n	800d3f6 <_printf_i+0x196>
 800d3f2:	6019      	str	r1, [r3, #0]
 800d3f4:	e002      	b.n	800d3fc <_printf_i+0x19c>
 800d3f6:	066a      	lsls	r2, r5, #25
 800d3f8:	d5fb      	bpl.n	800d3f2 <_printf_i+0x192>
 800d3fa:	8019      	strh	r1, [r3, #0]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4665      	mov	r5, ip
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	e7b9      	b.n	800d378 <_printf_i+0x118>
 800d404:	6813      	ldr	r3, [r2, #0]
 800d406:	1d19      	adds	r1, r3, #4
 800d408:	6011      	str	r1, [r2, #0]
 800d40a:	681d      	ldr	r5, [r3, #0]
 800d40c:	6862      	ldr	r2, [r4, #4]
 800d40e:	2100      	movs	r1, #0
 800d410:	4628      	mov	r0, r5
 800d412:	f000 fe99 	bl	800e148 <memchr>
 800d416:	b108      	cbz	r0, 800d41c <_printf_i+0x1bc>
 800d418:	1b40      	subs	r0, r0, r5
 800d41a:	6060      	str	r0, [r4, #4]
 800d41c:	6863      	ldr	r3, [r4, #4]
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	2300      	movs	r3, #0
 800d422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d426:	e7a7      	b.n	800d378 <_printf_i+0x118>
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	462a      	mov	r2, r5
 800d42c:	4639      	mov	r1, r7
 800d42e:	4630      	mov	r0, r6
 800d430:	47c0      	blx	r8
 800d432:	3001      	adds	r0, #1
 800d434:	d0aa      	beq.n	800d38c <_printf_i+0x12c>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	079b      	lsls	r3, r3, #30
 800d43a:	d413      	bmi.n	800d464 <_printf_i+0x204>
 800d43c:	68e0      	ldr	r0, [r4, #12]
 800d43e:	9b03      	ldr	r3, [sp, #12]
 800d440:	4298      	cmp	r0, r3
 800d442:	bfb8      	it	lt
 800d444:	4618      	movlt	r0, r3
 800d446:	e7a3      	b.n	800d390 <_printf_i+0x130>
 800d448:	2301      	movs	r3, #1
 800d44a:	464a      	mov	r2, r9
 800d44c:	4639      	mov	r1, r7
 800d44e:	4630      	mov	r0, r6
 800d450:	47c0      	blx	r8
 800d452:	3001      	adds	r0, #1
 800d454:	d09a      	beq.n	800d38c <_printf_i+0x12c>
 800d456:	3501      	adds	r5, #1
 800d458:	68e3      	ldr	r3, [r4, #12]
 800d45a:	9a03      	ldr	r2, [sp, #12]
 800d45c:	1a9b      	subs	r3, r3, r2
 800d45e:	42ab      	cmp	r3, r5
 800d460:	dcf2      	bgt.n	800d448 <_printf_i+0x1e8>
 800d462:	e7eb      	b.n	800d43c <_printf_i+0x1dc>
 800d464:	2500      	movs	r5, #0
 800d466:	f104 0919 	add.w	r9, r4, #25
 800d46a:	e7f5      	b.n	800d458 <_printf_i+0x1f8>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1ac      	bne.n	800d3ca <_printf_i+0x16a>
 800d470:	7803      	ldrb	r3, [r0, #0]
 800d472:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d476:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d47a:	e76c      	b.n	800d356 <_printf_i+0xf6>
 800d47c:	0800ef9d 	.word	0x0800ef9d
 800d480:	0800efae 	.word	0x0800efae

0800d484 <strncmp>:
 800d484:	b510      	push	{r4, lr}
 800d486:	b16a      	cbz	r2, 800d4a4 <strncmp+0x20>
 800d488:	3901      	subs	r1, #1
 800d48a:	1884      	adds	r4, r0, r2
 800d48c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d490:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d494:	4293      	cmp	r3, r2
 800d496:	d103      	bne.n	800d4a0 <strncmp+0x1c>
 800d498:	42a0      	cmp	r0, r4
 800d49a:	d001      	beq.n	800d4a0 <strncmp+0x1c>
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f5      	bne.n	800d48c <strncmp+0x8>
 800d4a0:	1a98      	subs	r0, r3, r2
 800d4a2:	bd10      	pop	{r4, pc}
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	e7fc      	b.n	800d4a2 <strncmp+0x1e>

0800d4a8 <__ascii_wctomb>:
 800d4a8:	b149      	cbz	r1, 800d4be <__ascii_wctomb+0x16>
 800d4aa:	2aff      	cmp	r2, #255	; 0xff
 800d4ac:	bf8b      	itete	hi
 800d4ae:	238a      	movhi	r3, #138	; 0x8a
 800d4b0:	700a      	strbls	r2, [r1, #0]
 800d4b2:	6003      	strhi	r3, [r0, #0]
 800d4b4:	2001      	movls	r0, #1
 800d4b6:	bf88      	it	hi
 800d4b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d4bc:	4770      	bx	lr
 800d4be:	4608      	mov	r0, r1
 800d4c0:	4770      	bx	lr

0800d4c2 <quorem>:
 800d4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c6:	6903      	ldr	r3, [r0, #16]
 800d4c8:	690c      	ldr	r4, [r1, #16]
 800d4ca:	4680      	mov	r8, r0
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	f2c0 8084 	blt.w	800d5da <quorem+0x118>
 800d4d2:	3c01      	subs	r4, #1
 800d4d4:	f101 0714 	add.w	r7, r1, #20
 800d4d8:	f100 0614 	add.w	r6, r0, #20
 800d4dc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d4e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	fbb0 f5f5 	udiv	r5, r0, r5
 800d4ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d4ee:	eb06 030c 	add.w	r3, r6, ip
 800d4f2:	eb07 090c 	add.w	r9, r7, ip
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	b39d      	cbz	r5, 800d562 <quorem+0xa0>
 800d4fa:	f04f 0a00 	mov.w	sl, #0
 800d4fe:	4638      	mov	r0, r7
 800d500:	46b6      	mov	lr, r6
 800d502:	46d3      	mov	fp, sl
 800d504:	f850 2b04 	ldr.w	r2, [r0], #4
 800d508:	b293      	uxth	r3, r2
 800d50a:	fb05 a303 	mla	r3, r5, r3, sl
 800d50e:	0c12      	lsrs	r2, r2, #16
 800d510:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d514:	fb05 a202 	mla	r2, r5, r2, sl
 800d518:	b29b      	uxth	r3, r3
 800d51a:	ebab 0303 	sub.w	r3, fp, r3
 800d51e:	f8de b000 	ldr.w	fp, [lr]
 800d522:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d526:	fa1f fb8b 	uxth.w	fp, fp
 800d52a:	445b      	add	r3, fp
 800d52c:	fa1f fb82 	uxth.w	fp, r2
 800d530:	f8de 2000 	ldr.w	r2, [lr]
 800d534:	4581      	cmp	r9, r0
 800d536:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d53a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d53e:	b29b      	uxth	r3, r3
 800d540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d544:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d548:	f84e 3b04 	str.w	r3, [lr], #4
 800d54c:	d2da      	bcs.n	800d504 <quorem+0x42>
 800d54e:	f856 300c 	ldr.w	r3, [r6, ip]
 800d552:	b933      	cbnz	r3, 800d562 <quorem+0xa0>
 800d554:	9b01      	ldr	r3, [sp, #4]
 800d556:	3b04      	subs	r3, #4
 800d558:	429e      	cmp	r6, r3
 800d55a:	461a      	mov	r2, r3
 800d55c:	d331      	bcc.n	800d5c2 <quorem+0x100>
 800d55e:	f8c8 4010 	str.w	r4, [r8, #16]
 800d562:	4640      	mov	r0, r8
 800d564:	f7ff fabc 	bl	800cae0 <__mcmp>
 800d568:	2800      	cmp	r0, #0
 800d56a:	db26      	blt.n	800d5ba <quorem+0xf8>
 800d56c:	4630      	mov	r0, r6
 800d56e:	f04f 0c00 	mov.w	ip, #0
 800d572:	3501      	adds	r5, #1
 800d574:	f857 1b04 	ldr.w	r1, [r7], #4
 800d578:	f8d0 e000 	ldr.w	lr, [r0]
 800d57c:	b28b      	uxth	r3, r1
 800d57e:	ebac 0303 	sub.w	r3, ip, r3
 800d582:	fa1f f28e 	uxth.w	r2, lr
 800d586:	4413      	add	r3, r2
 800d588:	0c0a      	lsrs	r2, r1, #16
 800d58a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d58e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d592:	b29b      	uxth	r3, r3
 800d594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d598:	45b9      	cmp	r9, r7
 800d59a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d59e:	f840 3b04 	str.w	r3, [r0], #4
 800d5a2:	d2e7      	bcs.n	800d574 <quorem+0xb2>
 800d5a4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d5a8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d5ac:	b92a      	cbnz	r2, 800d5ba <quorem+0xf8>
 800d5ae:	3b04      	subs	r3, #4
 800d5b0:	429e      	cmp	r6, r3
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	d30b      	bcc.n	800d5ce <quorem+0x10c>
 800d5b6:	f8c8 4010 	str.w	r4, [r8, #16]
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	b003      	add	sp, #12
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	6812      	ldr	r2, [r2, #0]
 800d5c4:	3b04      	subs	r3, #4
 800d5c6:	2a00      	cmp	r2, #0
 800d5c8:	d1c9      	bne.n	800d55e <quorem+0x9c>
 800d5ca:	3c01      	subs	r4, #1
 800d5cc:	e7c4      	b.n	800d558 <quorem+0x96>
 800d5ce:	6812      	ldr	r2, [r2, #0]
 800d5d0:	3b04      	subs	r3, #4
 800d5d2:	2a00      	cmp	r2, #0
 800d5d4:	d1ef      	bne.n	800d5b6 <quorem+0xf4>
 800d5d6:	3c01      	subs	r4, #1
 800d5d8:	e7ea      	b.n	800d5b0 <quorem+0xee>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	e7ee      	b.n	800d5bc <quorem+0xfa>
	...

0800d5e0 <_dtoa_r>:
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	4616      	mov	r6, r2
 800d5e6:	461f      	mov	r7, r3
 800d5e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5ea:	b095      	sub	sp, #84	; 0x54
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800d5f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d5f6:	b93d      	cbnz	r5, 800d608 <_dtoa_r+0x28>
 800d5f8:	2010      	movs	r0, #16
 800d5fa:	f7fd fb9f 	bl	800ad3c <malloc>
 800d5fe:	6260      	str	r0, [r4, #36]	; 0x24
 800d600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d604:	6005      	str	r5, [r0, #0]
 800d606:	60c5      	str	r5, [r0, #12]
 800d608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d60a:	6819      	ldr	r1, [r3, #0]
 800d60c:	b151      	cbz	r1, 800d624 <_dtoa_r+0x44>
 800d60e:	685a      	ldr	r2, [r3, #4]
 800d610:	2301      	movs	r3, #1
 800d612:	4093      	lsls	r3, r2
 800d614:	604a      	str	r2, [r1, #4]
 800d616:	608b      	str	r3, [r1, #8]
 800d618:	4620      	mov	r0, r4
 800d61a:	f7ff f843 	bl	800c6a4 <_Bfree>
 800d61e:	2200      	movs	r2, #0
 800d620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	1e3b      	subs	r3, r7, #0
 800d626:	bfaf      	iteee	ge
 800d628:	2300      	movge	r3, #0
 800d62a:	2201      	movlt	r2, #1
 800d62c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d630:	9303      	strlt	r3, [sp, #12]
 800d632:	bfac      	ite	ge
 800d634:	f8c8 3000 	strge.w	r3, [r8]
 800d638:	f8c8 2000 	strlt.w	r2, [r8]
 800d63c:	4bae      	ldr	r3, [pc, #696]	; (800d8f8 <_dtoa_r+0x318>)
 800d63e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d642:	ea33 0308 	bics.w	r3, r3, r8
 800d646:	d11b      	bne.n	800d680 <_dtoa_r+0xa0>
 800d648:	f242 730f 	movw	r3, #9999	; 0x270f
 800d64c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	9b02      	ldr	r3, [sp, #8]
 800d652:	b923      	cbnz	r3, 800d65e <_dtoa_r+0x7e>
 800d654:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d658:	2800      	cmp	r0, #0
 800d65a:	f000 8545 	beq.w	800e0e8 <_dtoa_r+0xb08>
 800d65e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d660:	b953      	cbnz	r3, 800d678 <_dtoa_r+0x98>
 800d662:	4ba6      	ldr	r3, [pc, #664]	; (800d8fc <_dtoa_r+0x31c>)
 800d664:	e021      	b.n	800d6aa <_dtoa_r+0xca>
 800d666:	4ba6      	ldr	r3, [pc, #664]	; (800d900 <_dtoa_r+0x320>)
 800d668:	9306      	str	r3, [sp, #24]
 800d66a:	3308      	adds	r3, #8
 800d66c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	9806      	ldr	r0, [sp, #24]
 800d672:	b015      	add	sp, #84	; 0x54
 800d674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d678:	4ba0      	ldr	r3, [pc, #640]	; (800d8fc <_dtoa_r+0x31c>)
 800d67a:	9306      	str	r3, [sp, #24]
 800d67c:	3303      	adds	r3, #3
 800d67e:	e7f5      	b.n	800d66c <_dtoa_r+0x8c>
 800d680:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d684:	2200      	movs	r2, #0
 800d686:	2300      	movs	r3, #0
 800d688:	4630      	mov	r0, r6
 800d68a:	4639      	mov	r1, r7
 800d68c:	f7f3 f98c 	bl	80009a8 <__aeabi_dcmpeq>
 800d690:	4682      	mov	sl, r0
 800d692:	b160      	cbz	r0, 800d6ae <_dtoa_r+0xce>
 800d694:	2301      	movs	r3, #1
 800d696:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f000 8520 	beq.w	800e0e2 <_dtoa_r+0xb02>
 800d6a2:	4b98      	ldr	r3, [pc, #608]	; (800d904 <_dtoa_r+0x324>)
 800d6a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	9306      	str	r3, [sp, #24]
 800d6ac:	e7e0      	b.n	800d670 <_dtoa_r+0x90>
 800d6ae:	ab12      	add	r3, sp, #72	; 0x48
 800d6b0:	9301      	str	r3, [sp, #4]
 800d6b2:	ab13      	add	r3, sp, #76	; 0x4c
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	4632      	mov	r2, r6
 800d6b8:	463b      	mov	r3, r7
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f7ff fafe 	bl	800ccbc <__d2b>
 800d6c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d6c4:	4683      	mov	fp, r0
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	d07d      	beq.n	800d7c6 <_dtoa_r+0x1e6>
 800d6ca:	46b0      	mov	r8, r6
 800d6cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800d6d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800d6d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	4b89      	ldr	r3, [pc, #548]	; (800d908 <_dtoa_r+0x328>)
 800d6e4:	4640      	mov	r0, r8
 800d6e6:	4649      	mov	r1, r9
 800d6e8:	f7f2 fd3e 	bl	8000168 <__aeabi_dsub>
 800d6ec:	a37c      	add	r3, pc, #496	; (adr r3, 800d8e0 <_dtoa_r+0x300>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f2 fef1 	bl	80004d8 <__aeabi_dmul>
 800d6f6:	a37c      	add	r3, pc, #496	; (adr r3, 800d8e8 <_dtoa_r+0x308>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 fd36 	bl	800016c <__adddf3>
 800d700:	4606      	mov	r6, r0
 800d702:	4628      	mov	r0, r5
 800d704:	460f      	mov	r7, r1
 800d706:	f7f2 fe7d 	bl	8000404 <__aeabi_i2d>
 800d70a:	a379      	add	r3, pc, #484	; (adr r3, 800d8f0 <_dtoa_r+0x310>)
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	f7f2 fee2 	bl	80004d8 <__aeabi_dmul>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4630      	mov	r0, r6
 800d71a:	4639      	mov	r1, r7
 800d71c:	f7f2 fd26 	bl	800016c <__adddf3>
 800d720:	4606      	mov	r6, r0
 800d722:	460f      	mov	r7, r1
 800d724:	f7f3 f972 	bl	8000a0c <__aeabi_d2iz>
 800d728:	2200      	movs	r2, #0
 800d72a:	4682      	mov	sl, r0
 800d72c:	2300      	movs	r3, #0
 800d72e:	4630      	mov	r0, r6
 800d730:	4639      	mov	r1, r7
 800d732:	f7f3 f943 	bl	80009bc <__aeabi_dcmplt>
 800d736:	b148      	cbz	r0, 800d74c <_dtoa_r+0x16c>
 800d738:	4650      	mov	r0, sl
 800d73a:	f7f2 fe63 	bl	8000404 <__aeabi_i2d>
 800d73e:	4632      	mov	r2, r6
 800d740:	463b      	mov	r3, r7
 800d742:	f7f3 f931 	bl	80009a8 <__aeabi_dcmpeq>
 800d746:	b908      	cbnz	r0, 800d74c <_dtoa_r+0x16c>
 800d748:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d74c:	f1ba 0f16 	cmp.w	sl, #22
 800d750:	d85a      	bhi.n	800d808 <_dtoa_r+0x228>
 800d752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d756:	496d      	ldr	r1, [pc, #436]	; (800d90c <_dtoa_r+0x32c>)
 800d758:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d760:	f7f3 f94a 	bl	80009f8 <__aeabi_dcmpgt>
 800d764:	2800      	cmp	r0, #0
 800d766:	d051      	beq.n	800d80c <_dtoa_r+0x22c>
 800d768:	2300      	movs	r3, #0
 800d76a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d76e:	930d      	str	r3, [sp, #52]	; 0x34
 800d770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d772:	1b5d      	subs	r5, r3, r5
 800d774:	1e6b      	subs	r3, r5, #1
 800d776:	9307      	str	r3, [sp, #28]
 800d778:	bf43      	ittte	mi
 800d77a:	2300      	movmi	r3, #0
 800d77c:	f1c5 0901 	rsbmi	r9, r5, #1
 800d780:	9307      	strmi	r3, [sp, #28]
 800d782:	f04f 0900 	movpl.w	r9, #0
 800d786:	f1ba 0f00 	cmp.w	sl, #0
 800d78a:	db41      	blt.n	800d810 <_dtoa_r+0x230>
 800d78c:	9b07      	ldr	r3, [sp, #28]
 800d78e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800d792:	4453      	add	r3, sl
 800d794:	9307      	str	r3, [sp, #28]
 800d796:	2300      	movs	r3, #0
 800d798:	9308      	str	r3, [sp, #32]
 800d79a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d79c:	2b09      	cmp	r3, #9
 800d79e:	f200 808f 	bhi.w	800d8c0 <_dtoa_r+0x2e0>
 800d7a2:	2b05      	cmp	r3, #5
 800d7a4:	bfc4      	itt	gt
 800d7a6:	3b04      	subgt	r3, #4
 800d7a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800d7aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d7ac:	bfc8      	it	gt
 800d7ae:	2500      	movgt	r5, #0
 800d7b0:	f1a3 0302 	sub.w	r3, r3, #2
 800d7b4:	bfd8      	it	le
 800d7b6:	2501      	movle	r5, #1
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	f200 808d 	bhi.w	800d8d8 <_dtoa_r+0x2f8>
 800d7be:	e8df f003 	tbb	[pc, r3]
 800d7c2:	7d7b      	.short	0x7d7b
 800d7c4:	6f2f      	.short	0x6f2f
 800d7c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d7ca:	441d      	add	r5, r3
 800d7cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d7d0:	2820      	cmp	r0, #32
 800d7d2:	dd13      	ble.n	800d7fc <_dtoa_r+0x21c>
 800d7d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d7d8:	9b02      	ldr	r3, [sp, #8]
 800d7da:	fa08 f800 	lsl.w	r8, r8, r0
 800d7de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d7e2:	fa23 f000 	lsr.w	r0, r3, r0
 800d7e6:	ea48 0000 	orr.w	r0, r8, r0
 800d7ea:	f7f2 fdfb 	bl	80003e4 <__aeabi_ui2d>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4680      	mov	r8, r0
 800d7f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800d7f6:	3d01      	subs	r5, #1
 800d7f8:	9310      	str	r3, [sp, #64]	; 0x40
 800d7fa:	e771      	b.n	800d6e0 <_dtoa_r+0x100>
 800d7fc:	9b02      	ldr	r3, [sp, #8]
 800d7fe:	f1c0 0020 	rsb	r0, r0, #32
 800d802:	fa03 f000 	lsl.w	r0, r3, r0
 800d806:	e7f0      	b.n	800d7ea <_dtoa_r+0x20a>
 800d808:	2301      	movs	r3, #1
 800d80a:	e7b0      	b.n	800d76e <_dtoa_r+0x18e>
 800d80c:	900d      	str	r0, [sp, #52]	; 0x34
 800d80e:	e7af      	b.n	800d770 <_dtoa_r+0x190>
 800d810:	f1ca 0300 	rsb	r3, sl, #0
 800d814:	9308      	str	r3, [sp, #32]
 800d816:	2300      	movs	r3, #0
 800d818:	eba9 090a 	sub.w	r9, r9, sl
 800d81c:	930c      	str	r3, [sp, #48]	; 0x30
 800d81e:	e7bc      	b.n	800d79a <_dtoa_r+0x1ba>
 800d820:	2301      	movs	r3, #1
 800d822:	9309      	str	r3, [sp, #36]	; 0x24
 800d824:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d826:	2b00      	cmp	r3, #0
 800d828:	dd74      	ble.n	800d914 <_dtoa_r+0x334>
 800d82a:	4698      	mov	r8, r3
 800d82c:	9304      	str	r3, [sp, #16]
 800d82e:	2200      	movs	r2, #0
 800d830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d832:	6072      	str	r2, [r6, #4]
 800d834:	2204      	movs	r2, #4
 800d836:	f102 0014 	add.w	r0, r2, #20
 800d83a:	4298      	cmp	r0, r3
 800d83c:	6871      	ldr	r1, [r6, #4]
 800d83e:	d96e      	bls.n	800d91e <_dtoa_r+0x33e>
 800d840:	4620      	mov	r0, r4
 800d842:	f7fe fefb 	bl	800c63c <_Balloc>
 800d846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d848:	6030      	str	r0, [r6, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f1b8 0f0e 	cmp.w	r8, #14
 800d850:	9306      	str	r3, [sp, #24]
 800d852:	f200 80ed 	bhi.w	800da30 <_dtoa_r+0x450>
 800d856:	2d00      	cmp	r5, #0
 800d858:	f000 80ea 	beq.w	800da30 <_dtoa_r+0x450>
 800d85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d860:	f1ba 0f00 	cmp.w	sl, #0
 800d864:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d868:	dd77      	ble.n	800d95a <_dtoa_r+0x37a>
 800d86a:	4a28      	ldr	r2, [pc, #160]	; (800d90c <_dtoa_r+0x32c>)
 800d86c:	f00a 030f 	and.w	r3, sl, #15
 800d870:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d874:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d878:	06f0      	lsls	r0, r6, #27
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d882:	d568      	bpl.n	800d956 <_dtoa_r+0x376>
 800d884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d888:	4b21      	ldr	r3, [pc, #132]	; (800d910 <_dtoa_r+0x330>)
 800d88a:	2503      	movs	r5, #3
 800d88c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d890:	f7f2 ff4c 	bl	800072c <__aeabi_ddiv>
 800d894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d898:	f006 060f 	and.w	r6, r6, #15
 800d89c:	4f1c      	ldr	r7, [pc, #112]	; (800d910 <_dtoa_r+0x330>)
 800d89e:	e04f      	b.n	800d940 <_dtoa_r+0x360>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d8a6:	4453      	add	r3, sl
 800d8a8:	f103 0801 	add.w	r8, r3, #1
 800d8ac:	9304      	str	r3, [sp, #16]
 800d8ae:	4643      	mov	r3, r8
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	bfb8      	it	lt
 800d8b4:	2301      	movlt	r3, #1
 800d8b6:	e7ba      	b.n	800d82e <_dtoa_r+0x24e>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e7b2      	b.n	800d822 <_dtoa_r+0x242>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	e7f0      	b.n	800d8a2 <_dtoa_r+0x2c2>
 800d8c0:	2501      	movs	r5, #1
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9509      	str	r5, [sp, #36]	; 0x24
 800d8c6:	931e      	str	r3, [sp, #120]	; 0x78
 800d8c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	9304      	str	r3, [sp, #16]
 800d8d0:	4698      	mov	r8, r3
 800d8d2:	2312      	movs	r3, #18
 800d8d4:	921f      	str	r2, [sp, #124]	; 0x7c
 800d8d6:	e7aa      	b.n	800d82e <_dtoa_r+0x24e>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	9309      	str	r3, [sp, #36]	; 0x24
 800d8dc:	e7f4      	b.n	800d8c8 <_dtoa_r+0x2e8>
 800d8de:	bf00      	nop
 800d8e0:	636f4361 	.word	0x636f4361
 800d8e4:	3fd287a7 	.word	0x3fd287a7
 800d8e8:	8b60c8b3 	.word	0x8b60c8b3
 800d8ec:	3fc68a28 	.word	0x3fc68a28
 800d8f0:	509f79fb 	.word	0x509f79fb
 800d8f4:	3fd34413 	.word	0x3fd34413
 800d8f8:	7ff00000 	.word	0x7ff00000
 800d8fc:	0800f0c9 	.word	0x0800f0c9
 800d900:	0800f0c0 	.word	0x0800f0c0
 800d904:	0800f0ce 	.word	0x0800f0ce
 800d908:	3ff80000 	.word	0x3ff80000
 800d90c:	0800eeb8 	.word	0x0800eeb8
 800d910:	0800ee90 	.word	0x0800ee90
 800d914:	2301      	movs	r3, #1
 800d916:	9304      	str	r3, [sp, #16]
 800d918:	4698      	mov	r8, r3
 800d91a:	461a      	mov	r2, r3
 800d91c:	e7da      	b.n	800d8d4 <_dtoa_r+0x2f4>
 800d91e:	3101      	adds	r1, #1
 800d920:	6071      	str	r1, [r6, #4]
 800d922:	0052      	lsls	r2, r2, #1
 800d924:	e787      	b.n	800d836 <_dtoa_r+0x256>
 800d926:	07f1      	lsls	r1, r6, #31
 800d928:	d508      	bpl.n	800d93c <_dtoa_r+0x35c>
 800d92a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d932:	f7f2 fdd1 	bl	80004d8 <__aeabi_dmul>
 800d936:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d93a:	3501      	adds	r5, #1
 800d93c:	1076      	asrs	r6, r6, #1
 800d93e:	3708      	adds	r7, #8
 800d940:	2e00      	cmp	r6, #0
 800d942:	d1f0      	bne.n	800d926 <_dtoa_r+0x346>
 800d944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d94c:	f7f2 feee 	bl	800072c <__aeabi_ddiv>
 800d950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d954:	e01b      	b.n	800d98e <_dtoa_r+0x3ae>
 800d956:	2502      	movs	r5, #2
 800d958:	e7a0      	b.n	800d89c <_dtoa_r+0x2bc>
 800d95a:	f000 80a4 	beq.w	800daa6 <_dtoa_r+0x4c6>
 800d95e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d962:	f1ca 0600 	rsb	r6, sl, #0
 800d966:	4ba0      	ldr	r3, [pc, #640]	; (800dbe8 <_dtoa_r+0x608>)
 800d968:	f006 020f 	and.w	r2, r6, #15
 800d96c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	f7f2 fdb0 	bl	80004d8 <__aeabi_dmul>
 800d978:	2502      	movs	r5, #2
 800d97a:	2300      	movs	r3, #0
 800d97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d980:	4f9a      	ldr	r7, [pc, #616]	; (800dbec <_dtoa_r+0x60c>)
 800d982:	1136      	asrs	r6, r6, #4
 800d984:	2e00      	cmp	r6, #0
 800d986:	f040 8083 	bne.w	800da90 <_dtoa_r+0x4b0>
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1e0      	bne.n	800d950 <_dtoa_r+0x370>
 800d98e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 808a 	beq.w	800daaa <_dtoa_r+0x4ca>
 800d996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d99a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d99e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	4b92      	ldr	r3, [pc, #584]	; (800dbf0 <_dtoa_r+0x610>)
 800d9a6:	f7f3 f809 	bl	80009bc <__aeabi_dcmplt>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d07d      	beq.n	800daaa <_dtoa_r+0x4ca>
 800d9ae:	f1b8 0f00 	cmp.w	r8, #0
 800d9b2:	d07a      	beq.n	800daaa <_dtoa_r+0x4ca>
 800d9b4:	9b04      	ldr	r3, [sp, #16]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	dd36      	ble.n	800da28 <_dtoa_r+0x448>
 800d9ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d9be:	2200      	movs	r2, #0
 800d9c0:	4b8c      	ldr	r3, [pc, #560]	; (800dbf4 <_dtoa_r+0x614>)
 800d9c2:	f7f2 fd89 	bl	80004d8 <__aeabi_dmul>
 800d9c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9ca:	9e04      	ldr	r6, [sp, #16]
 800d9cc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800d9d0:	3501      	adds	r5, #1
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f7f2 fd16 	bl	8000404 <__aeabi_i2d>
 800d9d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9dc:	f7f2 fd7c 	bl	80004d8 <__aeabi_dmul>
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4b85      	ldr	r3, [pc, #532]	; (800dbf8 <_dtoa_r+0x618>)
 800d9e4:	f7f2 fbc2 	bl	800016c <__adddf3>
 800d9e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d9ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d9f0:	950b      	str	r5, [sp, #44]	; 0x2c
 800d9f2:	2e00      	cmp	r6, #0
 800d9f4:	d15c      	bne.n	800dab0 <_dtoa_r+0x4d0>
 800d9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	4b7f      	ldr	r3, [pc, #508]	; (800dbfc <_dtoa_r+0x61c>)
 800d9fe:	f7f2 fbb3 	bl	8000168 <__aeabi_dsub>
 800da02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da04:	462b      	mov	r3, r5
 800da06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da0a:	f7f2 fff5 	bl	80009f8 <__aeabi_dcmpgt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 8281 	bne.w	800df16 <_dtoa_r+0x936>
 800da14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800da1e:	f7f2 ffcd 	bl	80009bc <__aeabi_dcmplt>
 800da22:	2800      	cmp	r0, #0
 800da24:	f040 8275 	bne.w	800df12 <_dtoa_r+0x932>
 800da28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800da2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da32:	2b00      	cmp	r3, #0
 800da34:	f2c0 814b 	blt.w	800dcce <_dtoa_r+0x6ee>
 800da38:	f1ba 0f0e 	cmp.w	sl, #14
 800da3c:	f300 8147 	bgt.w	800dcce <_dtoa_r+0x6ee>
 800da40:	4b69      	ldr	r3, [pc, #420]	; (800dbe8 <_dtoa_r+0x608>)
 800da42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800da50:	2b00      	cmp	r3, #0
 800da52:	f280 80d7 	bge.w	800dc04 <_dtoa_r+0x624>
 800da56:	f1b8 0f00 	cmp.w	r8, #0
 800da5a:	f300 80d3 	bgt.w	800dc04 <_dtoa_r+0x624>
 800da5e:	f040 8257 	bne.w	800df10 <_dtoa_r+0x930>
 800da62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da66:	2200      	movs	r2, #0
 800da68:	4b64      	ldr	r3, [pc, #400]	; (800dbfc <_dtoa_r+0x61c>)
 800da6a:	f7f2 fd35 	bl	80004d8 <__aeabi_dmul>
 800da6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da72:	f7f2 ffb7 	bl	80009e4 <__aeabi_dcmpge>
 800da76:	4646      	mov	r6, r8
 800da78:	4647      	mov	r7, r8
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f040 822d 	bne.w	800deda <_dtoa_r+0x8fa>
 800da80:	9b06      	ldr	r3, [sp, #24]
 800da82:	9a06      	ldr	r2, [sp, #24]
 800da84:	1c5d      	adds	r5, r3, #1
 800da86:	2331      	movs	r3, #49	; 0x31
 800da88:	f10a 0a01 	add.w	sl, sl, #1
 800da8c:	7013      	strb	r3, [r2, #0]
 800da8e:	e228      	b.n	800dee2 <_dtoa_r+0x902>
 800da90:	07f2      	lsls	r2, r6, #31
 800da92:	d505      	bpl.n	800daa0 <_dtoa_r+0x4c0>
 800da94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da98:	f7f2 fd1e 	bl	80004d8 <__aeabi_dmul>
 800da9c:	2301      	movs	r3, #1
 800da9e:	3501      	adds	r5, #1
 800daa0:	1076      	asrs	r6, r6, #1
 800daa2:	3708      	adds	r7, #8
 800daa4:	e76e      	b.n	800d984 <_dtoa_r+0x3a4>
 800daa6:	2502      	movs	r5, #2
 800daa8:	e771      	b.n	800d98e <_dtoa_r+0x3ae>
 800daaa:	4657      	mov	r7, sl
 800daac:	4646      	mov	r6, r8
 800daae:	e790      	b.n	800d9d2 <_dtoa_r+0x3f2>
 800dab0:	4b4d      	ldr	r3, [pc, #308]	; (800dbe8 <_dtoa_r+0x608>)
 800dab2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dab6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800daba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d048      	beq.n	800db52 <_dtoa_r+0x572>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	2000      	movs	r0, #0
 800dac6:	494e      	ldr	r1, [pc, #312]	; (800dc00 <_dtoa_r+0x620>)
 800dac8:	f7f2 fe30 	bl	800072c <__aeabi_ddiv>
 800dacc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dad0:	f7f2 fb4a 	bl	8000168 <__aeabi_dsub>
 800dad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dad8:	9d06      	ldr	r5, [sp, #24]
 800dada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dade:	f7f2 ff95 	bl	8000a0c <__aeabi_d2iz>
 800dae2:	9011      	str	r0, [sp, #68]	; 0x44
 800dae4:	f7f2 fc8e 	bl	8000404 <__aeabi_i2d>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daf0:	f7f2 fb3a 	bl	8000168 <__aeabi_dsub>
 800daf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800daf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dafa:	3330      	adds	r3, #48	; 0x30
 800dafc:	f805 3b01 	strb.w	r3, [r5], #1
 800db00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db04:	f7f2 ff5a 	bl	80009bc <__aeabi_dcmplt>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d163      	bne.n	800dbd4 <_dtoa_r+0x5f4>
 800db0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db10:	2000      	movs	r0, #0
 800db12:	4937      	ldr	r1, [pc, #220]	; (800dbf0 <_dtoa_r+0x610>)
 800db14:	f7f2 fb28 	bl	8000168 <__aeabi_dsub>
 800db18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db1c:	f7f2 ff4e 	bl	80009bc <__aeabi_dcmplt>
 800db20:	2800      	cmp	r0, #0
 800db22:	f040 80b5 	bne.w	800dc90 <_dtoa_r+0x6b0>
 800db26:	9b06      	ldr	r3, [sp, #24]
 800db28:	1aeb      	subs	r3, r5, r3
 800db2a:	429e      	cmp	r6, r3
 800db2c:	f77f af7c 	ble.w	800da28 <_dtoa_r+0x448>
 800db30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db34:	2200      	movs	r2, #0
 800db36:	4b2f      	ldr	r3, [pc, #188]	; (800dbf4 <_dtoa_r+0x614>)
 800db38:	f7f2 fcce 	bl	80004d8 <__aeabi_dmul>
 800db3c:	2200      	movs	r2, #0
 800db3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db46:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <_dtoa_r+0x614>)
 800db48:	f7f2 fcc6 	bl	80004d8 <__aeabi_dmul>
 800db4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db50:	e7c3      	b.n	800dada <_dtoa_r+0x4fa>
 800db52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db56:	f7f2 fcbf 	bl	80004d8 <__aeabi_dmul>
 800db5a:	9b06      	ldr	r3, [sp, #24]
 800db5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db60:	199d      	adds	r5, r3, r6
 800db62:	461e      	mov	r6, r3
 800db64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db68:	f7f2 ff50 	bl	8000a0c <__aeabi_d2iz>
 800db6c:	9011      	str	r0, [sp, #68]	; 0x44
 800db6e:	f7f2 fc49 	bl	8000404 <__aeabi_i2d>
 800db72:	4602      	mov	r2, r0
 800db74:	460b      	mov	r3, r1
 800db76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db7a:	f7f2 faf5 	bl	8000168 <__aeabi_dsub>
 800db7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db84:	3330      	adds	r3, #48	; 0x30
 800db86:	f806 3b01 	strb.w	r3, [r6], #1
 800db8a:	42ae      	cmp	r6, r5
 800db8c:	f04f 0200 	mov.w	r2, #0
 800db90:	d124      	bne.n	800dbdc <_dtoa_r+0x5fc>
 800db92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db96:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <_dtoa_r+0x620>)
 800db98:	f7f2 fae8 	bl	800016c <__adddf3>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dba4:	f7f2 ff28 	bl	80009f8 <__aeabi_dcmpgt>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d171      	bne.n	800dc90 <_dtoa_r+0x6b0>
 800dbac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	4913      	ldr	r1, [pc, #76]	; (800dc00 <_dtoa_r+0x620>)
 800dbb4:	f7f2 fad8 	bl	8000168 <__aeabi_dsub>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbc0:	f7f2 fefc 	bl	80009bc <__aeabi_dcmplt>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	f43f af2f 	beq.w	800da28 <_dtoa_r+0x448>
 800dbca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbce:	1e6a      	subs	r2, r5, #1
 800dbd0:	2b30      	cmp	r3, #48	; 0x30
 800dbd2:	d001      	beq.n	800dbd8 <_dtoa_r+0x5f8>
 800dbd4:	46ba      	mov	sl, r7
 800dbd6:	e04a      	b.n	800dc6e <_dtoa_r+0x68e>
 800dbd8:	4615      	mov	r5, r2
 800dbda:	e7f6      	b.n	800dbca <_dtoa_r+0x5ea>
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <_dtoa_r+0x614>)
 800dbde:	f7f2 fc7b 	bl	80004d8 <__aeabi_dmul>
 800dbe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbe6:	e7bd      	b.n	800db64 <_dtoa_r+0x584>
 800dbe8:	0800eeb8 	.word	0x0800eeb8
 800dbec:	0800ee90 	.word	0x0800ee90
 800dbf0:	3ff00000 	.word	0x3ff00000
 800dbf4:	40240000 	.word	0x40240000
 800dbf8:	401c0000 	.word	0x401c0000
 800dbfc:	40140000 	.word	0x40140000
 800dc00:	3fe00000 	.word	0x3fe00000
 800dc04:	9d06      	ldr	r5, [sp, #24]
 800dc06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc0e:	4630      	mov	r0, r6
 800dc10:	4639      	mov	r1, r7
 800dc12:	f7f2 fd8b 	bl	800072c <__aeabi_ddiv>
 800dc16:	f7f2 fef9 	bl	8000a0c <__aeabi_d2iz>
 800dc1a:	4681      	mov	r9, r0
 800dc1c:	f7f2 fbf2 	bl	8000404 <__aeabi_i2d>
 800dc20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc24:	f7f2 fc58 	bl	80004d8 <__aeabi_dmul>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 fa9a 	bl	8000168 <__aeabi_dsub>
 800dc34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800dc38:	f805 6b01 	strb.w	r6, [r5], #1
 800dc3c:	9e06      	ldr	r6, [sp, #24]
 800dc3e:	4602      	mov	r2, r0
 800dc40:	1bae      	subs	r6, r5, r6
 800dc42:	45b0      	cmp	r8, r6
 800dc44:	460b      	mov	r3, r1
 800dc46:	d135      	bne.n	800dcb4 <_dtoa_r+0x6d4>
 800dc48:	f7f2 fa90 	bl	800016c <__adddf3>
 800dc4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	f7f2 fed0 	bl	80009f8 <__aeabi_dcmpgt>
 800dc58:	b9c8      	cbnz	r0, 800dc8e <_dtoa_r+0x6ae>
 800dc5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fea1 	bl	80009a8 <__aeabi_dcmpeq>
 800dc66:	b110      	cbz	r0, 800dc6e <_dtoa_r+0x68e>
 800dc68:	f019 0f01 	tst.w	r9, #1
 800dc6c:	d10f      	bne.n	800dc8e <_dtoa_r+0x6ae>
 800dc6e:	4659      	mov	r1, fp
 800dc70:	4620      	mov	r0, r4
 800dc72:	f7fe fd17 	bl	800c6a4 <_Bfree>
 800dc76:	2300      	movs	r3, #0
 800dc78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc7a:	702b      	strb	r3, [r5, #0]
 800dc7c:	f10a 0301 	add.w	r3, sl, #1
 800dc80:	6013      	str	r3, [r2, #0]
 800dc82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f43f acf3 	beq.w	800d670 <_dtoa_r+0x90>
 800dc8a:	601d      	str	r5, [r3, #0]
 800dc8c:	e4f0      	b.n	800d670 <_dtoa_r+0x90>
 800dc8e:	4657      	mov	r7, sl
 800dc90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc94:	1e6b      	subs	r3, r5, #1
 800dc96:	2a39      	cmp	r2, #57	; 0x39
 800dc98:	d106      	bne.n	800dca8 <_dtoa_r+0x6c8>
 800dc9a:	9a06      	ldr	r2, [sp, #24]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d107      	bne.n	800dcb0 <_dtoa_r+0x6d0>
 800dca0:	2330      	movs	r3, #48	; 0x30
 800dca2:	7013      	strb	r3, [r2, #0]
 800dca4:	4613      	mov	r3, r2
 800dca6:	3701      	adds	r7, #1
 800dca8:	781a      	ldrb	r2, [r3, #0]
 800dcaa:	3201      	adds	r2, #1
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	e791      	b.n	800dbd4 <_dtoa_r+0x5f4>
 800dcb0:	461d      	mov	r5, r3
 800dcb2:	e7ed      	b.n	800dc90 <_dtoa_r+0x6b0>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	4b99      	ldr	r3, [pc, #612]	; (800df1c <_dtoa_r+0x93c>)
 800dcb8:	f7f2 fc0e 	bl	80004d8 <__aeabi_dmul>
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	4606      	mov	r6, r0
 800dcc2:	460f      	mov	r7, r1
 800dcc4:	f7f2 fe70 	bl	80009a8 <__aeabi_dcmpeq>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d09e      	beq.n	800dc0a <_dtoa_r+0x62a>
 800dccc:	e7cf      	b.n	800dc6e <_dtoa_r+0x68e>
 800dcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd0:	2a00      	cmp	r2, #0
 800dcd2:	f000 8088 	beq.w	800dde6 <_dtoa_r+0x806>
 800dcd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dcd8:	2a01      	cmp	r2, #1
 800dcda:	dc6d      	bgt.n	800ddb8 <_dtoa_r+0x7d8>
 800dcdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dcde:	2a00      	cmp	r2, #0
 800dce0:	d066      	beq.n	800ddb0 <_dtoa_r+0x7d0>
 800dce2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dce6:	464d      	mov	r5, r9
 800dce8:	9e08      	ldr	r6, [sp, #32]
 800dcea:	9a07      	ldr	r2, [sp, #28]
 800dcec:	2101      	movs	r1, #1
 800dcee:	441a      	add	r2, r3
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	4499      	add	r9, r3
 800dcf4:	9207      	str	r2, [sp, #28]
 800dcf6:	f7fe fdb3 	bl	800c860 <__i2b>
 800dcfa:	4607      	mov	r7, r0
 800dcfc:	2d00      	cmp	r5, #0
 800dcfe:	dd0b      	ble.n	800dd18 <_dtoa_r+0x738>
 800dd00:	9b07      	ldr	r3, [sp, #28]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	dd08      	ble.n	800dd18 <_dtoa_r+0x738>
 800dd06:	42ab      	cmp	r3, r5
 800dd08:	bfa8      	it	ge
 800dd0a:	462b      	movge	r3, r5
 800dd0c:	9a07      	ldr	r2, [sp, #28]
 800dd0e:	eba9 0903 	sub.w	r9, r9, r3
 800dd12:	1aed      	subs	r5, r5, r3
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	9307      	str	r3, [sp, #28]
 800dd18:	9b08      	ldr	r3, [sp, #32]
 800dd1a:	b1eb      	cbz	r3, 800dd58 <_dtoa_r+0x778>
 800dd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d065      	beq.n	800ddee <_dtoa_r+0x80e>
 800dd22:	b18e      	cbz	r6, 800dd48 <_dtoa_r+0x768>
 800dd24:	4639      	mov	r1, r7
 800dd26:	4632      	mov	r2, r6
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f7fe fe37 	bl	800c99c <__pow5mult>
 800dd2e:	465a      	mov	r2, fp
 800dd30:	4601      	mov	r1, r0
 800dd32:	4607      	mov	r7, r0
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7fe fd9c 	bl	800c872 <__multiply>
 800dd3a:	4659      	mov	r1, fp
 800dd3c:	900a      	str	r0, [sp, #40]	; 0x28
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f7fe fcb0 	bl	800c6a4 <_Bfree>
 800dd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd46:	469b      	mov	fp, r3
 800dd48:	9b08      	ldr	r3, [sp, #32]
 800dd4a:	1b9a      	subs	r2, r3, r6
 800dd4c:	d004      	beq.n	800dd58 <_dtoa_r+0x778>
 800dd4e:	4659      	mov	r1, fp
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7fe fe23 	bl	800c99c <__pow5mult>
 800dd56:	4683      	mov	fp, r0
 800dd58:	2101      	movs	r1, #1
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f7fe fd80 	bl	800c860 <__i2b>
 800dd60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd62:	4606      	mov	r6, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f000 81c6 	beq.w	800e0f6 <_dtoa_r+0xb16>
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4601      	mov	r1, r0
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7fe fe14 	bl	800c99c <__pow5mult>
 800dd74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dd76:	4606      	mov	r6, r0
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	dc3e      	bgt.n	800ddfa <_dtoa_r+0x81a>
 800dd7c:	9b02      	ldr	r3, [sp, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d137      	bne.n	800ddf2 <_dtoa_r+0x812>
 800dd82:	9b03      	ldr	r3, [sp, #12]
 800dd84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d134      	bne.n	800ddf6 <_dtoa_r+0x816>
 800dd8c:	9b03      	ldr	r3, [sp, #12]
 800dd8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd92:	0d1b      	lsrs	r3, r3, #20
 800dd94:	051b      	lsls	r3, r3, #20
 800dd96:	b12b      	cbz	r3, 800dda4 <_dtoa_r+0x7c4>
 800dd98:	9b07      	ldr	r3, [sp, #28]
 800dd9a:	f109 0901 	add.w	r9, r9, #1
 800dd9e:	3301      	adds	r3, #1
 800dda0:	9307      	str	r3, [sp, #28]
 800dda2:	2301      	movs	r3, #1
 800dda4:	9308      	str	r3, [sp, #32]
 800dda6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d128      	bne.n	800ddfe <_dtoa_r+0x81e>
 800ddac:	2001      	movs	r0, #1
 800ddae:	e02e      	b.n	800de0e <_dtoa_r+0x82e>
 800ddb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ddb6:	e796      	b.n	800dce6 <_dtoa_r+0x706>
 800ddb8:	9b08      	ldr	r3, [sp, #32]
 800ddba:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800ddbe:	42b3      	cmp	r3, r6
 800ddc0:	bfb7      	itett	lt
 800ddc2:	9b08      	ldrlt	r3, [sp, #32]
 800ddc4:	1b9e      	subge	r6, r3, r6
 800ddc6:	1af2      	sublt	r2, r6, r3
 800ddc8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ddca:	bfbf      	itttt	lt
 800ddcc:	9608      	strlt	r6, [sp, #32]
 800ddce:	189b      	addlt	r3, r3, r2
 800ddd0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ddd2:	2600      	movlt	r6, #0
 800ddd4:	f1b8 0f00 	cmp.w	r8, #0
 800ddd8:	bfb9      	ittee	lt
 800ddda:	eba9 0508 	sublt.w	r5, r9, r8
 800ddde:	2300      	movlt	r3, #0
 800dde0:	464d      	movge	r5, r9
 800dde2:	4643      	movge	r3, r8
 800dde4:	e781      	b.n	800dcea <_dtoa_r+0x70a>
 800dde6:	9e08      	ldr	r6, [sp, #32]
 800dde8:	464d      	mov	r5, r9
 800ddea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ddec:	e786      	b.n	800dcfc <_dtoa_r+0x71c>
 800ddee:	9a08      	ldr	r2, [sp, #32]
 800ddf0:	e7ad      	b.n	800dd4e <_dtoa_r+0x76e>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	e7d6      	b.n	800dda4 <_dtoa_r+0x7c4>
 800ddf6:	9b02      	ldr	r3, [sp, #8]
 800ddf8:	e7d4      	b.n	800dda4 <_dtoa_r+0x7c4>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9308      	str	r3, [sp, #32]
 800ddfe:	6933      	ldr	r3, [r6, #16]
 800de00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800de04:	6918      	ldr	r0, [r3, #16]
 800de06:	f7fe fcdd 	bl	800c7c4 <__hi0bits>
 800de0a:	f1c0 0020 	rsb	r0, r0, #32
 800de0e:	9b07      	ldr	r3, [sp, #28]
 800de10:	4418      	add	r0, r3
 800de12:	f010 001f 	ands.w	r0, r0, #31
 800de16:	d047      	beq.n	800dea8 <_dtoa_r+0x8c8>
 800de18:	f1c0 0320 	rsb	r3, r0, #32
 800de1c:	2b04      	cmp	r3, #4
 800de1e:	dd3b      	ble.n	800de98 <_dtoa_r+0x8b8>
 800de20:	9b07      	ldr	r3, [sp, #28]
 800de22:	f1c0 001c 	rsb	r0, r0, #28
 800de26:	4481      	add	r9, r0
 800de28:	4405      	add	r5, r0
 800de2a:	4403      	add	r3, r0
 800de2c:	9307      	str	r3, [sp, #28]
 800de2e:	f1b9 0f00 	cmp.w	r9, #0
 800de32:	dd05      	ble.n	800de40 <_dtoa_r+0x860>
 800de34:	4659      	mov	r1, fp
 800de36:	464a      	mov	r2, r9
 800de38:	4620      	mov	r0, r4
 800de3a:	f7fe fdfd 	bl	800ca38 <__lshift>
 800de3e:	4683      	mov	fp, r0
 800de40:	9b07      	ldr	r3, [sp, #28]
 800de42:	2b00      	cmp	r3, #0
 800de44:	dd05      	ble.n	800de52 <_dtoa_r+0x872>
 800de46:	4631      	mov	r1, r6
 800de48:	461a      	mov	r2, r3
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7fe fdf4 	bl	800ca38 <__lshift>
 800de50:	4606      	mov	r6, r0
 800de52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de54:	b353      	cbz	r3, 800deac <_dtoa_r+0x8cc>
 800de56:	4631      	mov	r1, r6
 800de58:	4658      	mov	r0, fp
 800de5a:	f7fe fe41 	bl	800cae0 <__mcmp>
 800de5e:	2800      	cmp	r0, #0
 800de60:	da24      	bge.n	800deac <_dtoa_r+0x8cc>
 800de62:	2300      	movs	r3, #0
 800de64:	4659      	mov	r1, fp
 800de66:	220a      	movs	r2, #10
 800de68:	4620      	mov	r0, r4
 800de6a:	f7fe fc32 	bl	800c6d2 <__multadd>
 800de6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de70:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800de74:	4683      	mov	fp, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 8144 	beq.w	800e104 <_dtoa_r+0xb24>
 800de7c:	2300      	movs	r3, #0
 800de7e:	4639      	mov	r1, r7
 800de80:	220a      	movs	r2, #10
 800de82:	4620      	mov	r0, r4
 800de84:	f7fe fc25 	bl	800c6d2 <__multadd>
 800de88:	9b04      	ldr	r3, [sp, #16]
 800de8a:	4607      	mov	r7, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	dc4d      	bgt.n	800df2c <_dtoa_r+0x94c>
 800de90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de92:	2b02      	cmp	r3, #2
 800de94:	dd4a      	ble.n	800df2c <_dtoa_r+0x94c>
 800de96:	e011      	b.n	800debc <_dtoa_r+0x8dc>
 800de98:	d0c9      	beq.n	800de2e <_dtoa_r+0x84e>
 800de9a:	9a07      	ldr	r2, [sp, #28]
 800de9c:	331c      	adds	r3, #28
 800de9e:	441a      	add	r2, r3
 800dea0:	4499      	add	r9, r3
 800dea2:	441d      	add	r5, r3
 800dea4:	4613      	mov	r3, r2
 800dea6:	e7c1      	b.n	800de2c <_dtoa_r+0x84c>
 800dea8:	4603      	mov	r3, r0
 800deaa:	e7f6      	b.n	800de9a <_dtoa_r+0x8ba>
 800deac:	f1b8 0f00 	cmp.w	r8, #0
 800deb0:	dc36      	bgt.n	800df20 <_dtoa_r+0x940>
 800deb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	dd33      	ble.n	800df20 <_dtoa_r+0x940>
 800deb8:	f8cd 8010 	str.w	r8, [sp, #16]
 800debc:	9b04      	ldr	r3, [sp, #16]
 800debe:	b963      	cbnz	r3, 800deda <_dtoa_r+0x8fa>
 800dec0:	4631      	mov	r1, r6
 800dec2:	2205      	movs	r2, #5
 800dec4:	4620      	mov	r0, r4
 800dec6:	f7fe fc04 	bl	800c6d2 <__multadd>
 800deca:	4601      	mov	r1, r0
 800decc:	4606      	mov	r6, r0
 800dece:	4658      	mov	r0, fp
 800ded0:	f7fe fe06 	bl	800cae0 <__mcmp>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	f73f add3 	bgt.w	800da80 <_dtoa_r+0x4a0>
 800deda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dedc:	9d06      	ldr	r5, [sp, #24]
 800dede:	ea6f 0a03 	mvn.w	sl, r3
 800dee2:	f04f 0900 	mov.w	r9, #0
 800dee6:	4631      	mov	r1, r6
 800dee8:	4620      	mov	r0, r4
 800deea:	f7fe fbdb 	bl	800c6a4 <_Bfree>
 800deee:	2f00      	cmp	r7, #0
 800def0:	f43f aebd 	beq.w	800dc6e <_dtoa_r+0x68e>
 800def4:	f1b9 0f00 	cmp.w	r9, #0
 800def8:	d005      	beq.n	800df06 <_dtoa_r+0x926>
 800defa:	45b9      	cmp	r9, r7
 800defc:	d003      	beq.n	800df06 <_dtoa_r+0x926>
 800defe:	4649      	mov	r1, r9
 800df00:	4620      	mov	r0, r4
 800df02:	f7fe fbcf 	bl	800c6a4 <_Bfree>
 800df06:	4639      	mov	r1, r7
 800df08:	4620      	mov	r0, r4
 800df0a:	f7fe fbcb 	bl	800c6a4 <_Bfree>
 800df0e:	e6ae      	b.n	800dc6e <_dtoa_r+0x68e>
 800df10:	2600      	movs	r6, #0
 800df12:	4637      	mov	r7, r6
 800df14:	e7e1      	b.n	800deda <_dtoa_r+0x8fa>
 800df16:	46ba      	mov	sl, r7
 800df18:	4637      	mov	r7, r6
 800df1a:	e5b1      	b.n	800da80 <_dtoa_r+0x4a0>
 800df1c:	40240000 	.word	0x40240000
 800df20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df22:	f8cd 8010 	str.w	r8, [sp, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	f000 80f3 	beq.w	800e112 <_dtoa_r+0xb32>
 800df2c:	2d00      	cmp	r5, #0
 800df2e:	dd05      	ble.n	800df3c <_dtoa_r+0x95c>
 800df30:	4639      	mov	r1, r7
 800df32:	462a      	mov	r2, r5
 800df34:	4620      	mov	r0, r4
 800df36:	f7fe fd7f 	bl	800ca38 <__lshift>
 800df3a:	4607      	mov	r7, r0
 800df3c:	9b08      	ldr	r3, [sp, #32]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d04c      	beq.n	800dfdc <_dtoa_r+0x9fc>
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	4620      	mov	r0, r4
 800df46:	f7fe fb79 	bl	800c63c <_Balloc>
 800df4a:	4605      	mov	r5, r0
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	f107 010c 	add.w	r1, r7, #12
 800df52:	3202      	adds	r2, #2
 800df54:	0092      	lsls	r2, r2, #2
 800df56:	300c      	adds	r0, #12
 800df58:	f7fe fb63 	bl	800c622 <memcpy>
 800df5c:	2201      	movs	r2, #1
 800df5e:	4629      	mov	r1, r5
 800df60:	4620      	mov	r0, r4
 800df62:	f7fe fd69 	bl	800ca38 <__lshift>
 800df66:	46b9      	mov	r9, r7
 800df68:	4607      	mov	r7, r0
 800df6a:	9b06      	ldr	r3, [sp, #24]
 800df6c:	9307      	str	r3, [sp, #28]
 800df6e:	9b02      	ldr	r3, [sp, #8]
 800df70:	f003 0301 	and.w	r3, r3, #1
 800df74:	9308      	str	r3, [sp, #32]
 800df76:	4631      	mov	r1, r6
 800df78:	4658      	mov	r0, fp
 800df7a:	f7ff faa2 	bl	800d4c2 <quorem>
 800df7e:	4649      	mov	r1, r9
 800df80:	4605      	mov	r5, r0
 800df82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800df86:	4658      	mov	r0, fp
 800df88:	f7fe fdaa 	bl	800cae0 <__mcmp>
 800df8c:	463a      	mov	r2, r7
 800df8e:	9002      	str	r0, [sp, #8]
 800df90:	4631      	mov	r1, r6
 800df92:	4620      	mov	r0, r4
 800df94:	f7fe fdbe 	bl	800cb14 <__mdiff>
 800df98:	68c3      	ldr	r3, [r0, #12]
 800df9a:	4602      	mov	r2, r0
 800df9c:	bb03      	cbnz	r3, 800dfe0 <_dtoa_r+0xa00>
 800df9e:	4601      	mov	r1, r0
 800dfa0:	9009      	str	r0, [sp, #36]	; 0x24
 800dfa2:	4658      	mov	r0, fp
 800dfa4:	f7fe fd9c 	bl	800cae0 <__mcmp>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfac:	4611      	mov	r1, r2
 800dfae:	4620      	mov	r0, r4
 800dfb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb2:	f7fe fb77 	bl	800c6a4 <_Bfree>
 800dfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb8:	b9a3      	cbnz	r3, 800dfe4 <_dtoa_r+0xa04>
 800dfba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dfbc:	b992      	cbnz	r2, 800dfe4 <_dtoa_r+0xa04>
 800dfbe:	9a08      	ldr	r2, [sp, #32]
 800dfc0:	b982      	cbnz	r2, 800dfe4 <_dtoa_r+0xa04>
 800dfc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dfc6:	d029      	beq.n	800e01c <_dtoa_r+0xa3c>
 800dfc8:	9b02      	ldr	r3, [sp, #8]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	dd01      	ble.n	800dfd2 <_dtoa_r+0x9f2>
 800dfce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dfd2:	9b07      	ldr	r3, [sp, #28]
 800dfd4:	1c5d      	adds	r5, r3, #1
 800dfd6:	f883 8000 	strb.w	r8, [r3]
 800dfda:	e784      	b.n	800dee6 <_dtoa_r+0x906>
 800dfdc:	4638      	mov	r0, r7
 800dfde:	e7c2      	b.n	800df66 <_dtoa_r+0x986>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e7e3      	b.n	800dfac <_dtoa_r+0x9cc>
 800dfe4:	9a02      	ldr	r2, [sp, #8]
 800dfe6:	2a00      	cmp	r2, #0
 800dfe8:	db04      	blt.n	800dff4 <_dtoa_r+0xa14>
 800dfea:	d123      	bne.n	800e034 <_dtoa_r+0xa54>
 800dfec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dfee:	bb0a      	cbnz	r2, 800e034 <_dtoa_r+0xa54>
 800dff0:	9a08      	ldr	r2, [sp, #32]
 800dff2:	b9fa      	cbnz	r2, 800e034 <_dtoa_r+0xa54>
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	ddec      	ble.n	800dfd2 <_dtoa_r+0x9f2>
 800dff8:	4659      	mov	r1, fp
 800dffa:	2201      	movs	r2, #1
 800dffc:	4620      	mov	r0, r4
 800dffe:	f7fe fd1b 	bl	800ca38 <__lshift>
 800e002:	4631      	mov	r1, r6
 800e004:	4683      	mov	fp, r0
 800e006:	f7fe fd6b 	bl	800cae0 <__mcmp>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	dc03      	bgt.n	800e016 <_dtoa_r+0xa36>
 800e00e:	d1e0      	bne.n	800dfd2 <_dtoa_r+0x9f2>
 800e010:	f018 0f01 	tst.w	r8, #1
 800e014:	d0dd      	beq.n	800dfd2 <_dtoa_r+0x9f2>
 800e016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e01a:	d1d8      	bne.n	800dfce <_dtoa_r+0x9ee>
 800e01c:	9b07      	ldr	r3, [sp, #28]
 800e01e:	9a07      	ldr	r2, [sp, #28]
 800e020:	1c5d      	adds	r5, r3, #1
 800e022:	2339      	movs	r3, #57	; 0x39
 800e024:	7013      	strb	r3, [r2, #0]
 800e026:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e02a:	1e6a      	subs	r2, r5, #1
 800e02c:	2b39      	cmp	r3, #57	; 0x39
 800e02e:	d04d      	beq.n	800e0cc <_dtoa_r+0xaec>
 800e030:	3301      	adds	r3, #1
 800e032:	e052      	b.n	800e0da <_dtoa_r+0xafa>
 800e034:	9a07      	ldr	r2, [sp, #28]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f102 0501 	add.w	r5, r2, #1
 800e03c:	dd06      	ble.n	800e04c <_dtoa_r+0xa6c>
 800e03e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e042:	d0eb      	beq.n	800e01c <_dtoa_r+0xa3c>
 800e044:	f108 0801 	add.w	r8, r8, #1
 800e048:	9b07      	ldr	r3, [sp, #28]
 800e04a:	e7c4      	b.n	800dfd6 <_dtoa_r+0x9f6>
 800e04c:	9b06      	ldr	r3, [sp, #24]
 800e04e:	9a04      	ldr	r2, [sp, #16]
 800e050:	1aeb      	subs	r3, r5, r3
 800e052:	4293      	cmp	r3, r2
 800e054:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e058:	d021      	beq.n	800e09e <_dtoa_r+0xabe>
 800e05a:	4659      	mov	r1, fp
 800e05c:	2300      	movs	r3, #0
 800e05e:	220a      	movs	r2, #10
 800e060:	4620      	mov	r0, r4
 800e062:	f7fe fb36 	bl	800c6d2 <__multadd>
 800e066:	45b9      	cmp	r9, r7
 800e068:	4683      	mov	fp, r0
 800e06a:	f04f 0300 	mov.w	r3, #0
 800e06e:	f04f 020a 	mov.w	r2, #10
 800e072:	4649      	mov	r1, r9
 800e074:	4620      	mov	r0, r4
 800e076:	d105      	bne.n	800e084 <_dtoa_r+0xaa4>
 800e078:	f7fe fb2b 	bl	800c6d2 <__multadd>
 800e07c:	4681      	mov	r9, r0
 800e07e:	4607      	mov	r7, r0
 800e080:	9507      	str	r5, [sp, #28]
 800e082:	e778      	b.n	800df76 <_dtoa_r+0x996>
 800e084:	f7fe fb25 	bl	800c6d2 <__multadd>
 800e088:	4639      	mov	r1, r7
 800e08a:	4681      	mov	r9, r0
 800e08c:	2300      	movs	r3, #0
 800e08e:	220a      	movs	r2, #10
 800e090:	4620      	mov	r0, r4
 800e092:	f7fe fb1e 	bl	800c6d2 <__multadd>
 800e096:	4607      	mov	r7, r0
 800e098:	e7f2      	b.n	800e080 <_dtoa_r+0xaa0>
 800e09a:	f04f 0900 	mov.w	r9, #0
 800e09e:	4659      	mov	r1, fp
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7fe fcc8 	bl	800ca38 <__lshift>
 800e0a8:	4631      	mov	r1, r6
 800e0aa:	4683      	mov	fp, r0
 800e0ac:	f7fe fd18 	bl	800cae0 <__mcmp>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	dcb8      	bgt.n	800e026 <_dtoa_r+0xa46>
 800e0b4:	d102      	bne.n	800e0bc <_dtoa_r+0xadc>
 800e0b6:	f018 0f01 	tst.w	r8, #1
 800e0ba:	d1b4      	bne.n	800e026 <_dtoa_r+0xa46>
 800e0bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0c0:	1e6a      	subs	r2, r5, #1
 800e0c2:	2b30      	cmp	r3, #48	; 0x30
 800e0c4:	f47f af0f 	bne.w	800dee6 <_dtoa_r+0x906>
 800e0c8:	4615      	mov	r5, r2
 800e0ca:	e7f7      	b.n	800e0bc <_dtoa_r+0xadc>
 800e0cc:	9b06      	ldr	r3, [sp, #24]
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d105      	bne.n	800e0de <_dtoa_r+0xafe>
 800e0d2:	2331      	movs	r3, #49	; 0x31
 800e0d4:	9a06      	ldr	r2, [sp, #24]
 800e0d6:	f10a 0a01 	add.w	sl, sl, #1
 800e0da:	7013      	strb	r3, [r2, #0]
 800e0dc:	e703      	b.n	800dee6 <_dtoa_r+0x906>
 800e0de:	4615      	mov	r5, r2
 800e0e0:	e7a1      	b.n	800e026 <_dtoa_r+0xa46>
 800e0e2:	4b17      	ldr	r3, [pc, #92]	; (800e140 <_dtoa_r+0xb60>)
 800e0e4:	f7ff bae1 	b.w	800d6aa <_dtoa_r+0xca>
 800e0e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f47f aabb 	bne.w	800d666 <_dtoa_r+0x86>
 800e0f0:	4b14      	ldr	r3, [pc, #80]	; (800e144 <_dtoa_r+0xb64>)
 800e0f2:	f7ff bada 	b.w	800d6aa <_dtoa_r+0xca>
 800e0f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	f77f ae3f 	ble.w	800dd7c <_dtoa_r+0x79c>
 800e0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e100:	9308      	str	r3, [sp, #32]
 800e102:	e653      	b.n	800ddac <_dtoa_r+0x7cc>
 800e104:	9b04      	ldr	r3, [sp, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	dc03      	bgt.n	800e112 <_dtoa_r+0xb32>
 800e10a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	f73f aed5 	bgt.w	800debc <_dtoa_r+0x8dc>
 800e112:	9d06      	ldr	r5, [sp, #24]
 800e114:	4631      	mov	r1, r6
 800e116:	4658      	mov	r0, fp
 800e118:	f7ff f9d3 	bl	800d4c2 <quorem>
 800e11c:	9b06      	ldr	r3, [sp, #24]
 800e11e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e122:	f805 8b01 	strb.w	r8, [r5], #1
 800e126:	9a04      	ldr	r2, [sp, #16]
 800e128:	1aeb      	subs	r3, r5, r3
 800e12a:	429a      	cmp	r2, r3
 800e12c:	ddb5      	ble.n	800e09a <_dtoa_r+0xaba>
 800e12e:	4659      	mov	r1, fp
 800e130:	2300      	movs	r3, #0
 800e132:	220a      	movs	r2, #10
 800e134:	4620      	mov	r0, r4
 800e136:	f7fe facc 	bl	800c6d2 <__multadd>
 800e13a:	4683      	mov	fp, r0
 800e13c:	e7ea      	b.n	800e114 <_dtoa_r+0xb34>
 800e13e:	bf00      	nop
 800e140:	0800f0cd 	.word	0x0800f0cd
 800e144:	0800f0c0 	.word	0x0800f0c0

0800e148 <memchr>:
 800e148:	b510      	push	{r4, lr}
 800e14a:	b2c9      	uxtb	r1, r1
 800e14c:	4402      	add	r2, r0
 800e14e:	4290      	cmp	r0, r2
 800e150:	4603      	mov	r3, r0
 800e152:	d101      	bne.n	800e158 <memchr+0x10>
 800e154:	2300      	movs	r3, #0
 800e156:	e003      	b.n	800e160 <memchr+0x18>
 800e158:	781c      	ldrb	r4, [r3, #0]
 800e15a:	3001      	adds	r0, #1
 800e15c:	428c      	cmp	r4, r1
 800e15e:	d1f6      	bne.n	800e14e <memchr+0x6>
 800e160:	4618      	mov	r0, r3
 800e162:	bd10      	pop	{r4, pc}

0800e164 <memmove>:
 800e164:	4288      	cmp	r0, r1
 800e166:	b510      	push	{r4, lr}
 800e168:	eb01 0302 	add.w	r3, r1, r2
 800e16c:	d807      	bhi.n	800e17e <memmove+0x1a>
 800e16e:	1e42      	subs	r2, r0, #1
 800e170:	4299      	cmp	r1, r3
 800e172:	d00a      	beq.n	800e18a <memmove+0x26>
 800e174:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e178:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e17c:	e7f8      	b.n	800e170 <memmove+0xc>
 800e17e:	4283      	cmp	r3, r0
 800e180:	d9f5      	bls.n	800e16e <memmove+0xa>
 800e182:	1881      	adds	r1, r0, r2
 800e184:	1ad2      	subs	r2, r2, r3
 800e186:	42d3      	cmn	r3, r2
 800e188:	d100      	bne.n	800e18c <memmove+0x28>
 800e18a:	bd10      	pop	{r4, pc}
 800e18c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e190:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e194:	e7f7      	b.n	800e186 <memmove+0x22>

0800e196 <_malloc_usable_size_r>:
 800e196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e19a:	1f18      	subs	r0, r3, #4
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	bfbc      	itt	lt
 800e1a0:	580b      	ldrlt	r3, [r1, r0]
 800e1a2:	18c0      	addlt	r0, r0, r3
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <trunc>:
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1aa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800e1ae:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800e1b2:	2a13      	cmp	r2, #19
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	dc10      	bgt.n	800e1dc <trunc+0x34>
 800e1ba:	2a00      	cmp	r2, #0
 800e1bc:	bfb3      	iteet	lt
 800e1be:	2000      	movlt	r0, #0
 800e1c0:	2000      	movge	r0, #0
 800e1c2:	4b10      	ldrge	r3, [pc, #64]	; (800e204 <trunc+0x5c>)
 800e1c4:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800e1c8:	bfa4      	itt	ge
 800e1ca:	fa43 f202 	asrge.w	r2, r3, r2
 800e1ce:	ea24 0102 	bicge.w	r1, r4, r2
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	4621      	mov	r1, r4
 800e1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1dc:	2a33      	cmp	r2, #51	; 0x33
 800e1de:	dd07      	ble.n	800e1f0 <trunc+0x48>
 800e1e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e1e4:	d1f7      	bne.n	800e1d6 <trunc+0x2e>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	f7f1 ffbf 	bl	800016c <__adddf3>
 800e1ee:	e7f0      	b.n	800e1d2 <trunc+0x2a>
 800e1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1f4:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800e1f8:	fa22 f505 	lsr.w	r5, r2, r5
 800e1fc:	ea20 0005 	bic.w	r0, r0, r5
 800e200:	e7e7      	b.n	800e1d2 <trunc+0x2a>
 800e202:	bf00      	nop
 800e204:	000fffff 	.word	0x000fffff

0800e208 <_init>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr

0800e214 <_fini>:
 800e214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e216:	bf00      	nop
 800e218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e21a:	bc08      	pop	{r3}
 800e21c:	469e      	mov	lr, r3
 800e21e:	4770      	bx	lr
