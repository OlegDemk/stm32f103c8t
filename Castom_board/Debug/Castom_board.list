
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080081a8  080081a8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081a8  080081a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080081b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000080  08008230  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  08008230  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bf8  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d1a  00000000  00000000  00034ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  000379c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000167eb  00000000  00000000  00039ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eba2  00000000  00000000  00050493  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007768a  00000000  00000000  0005f035  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d66bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  000d673c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08007260 	.word	0x08007260

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08007260 	.word	0x08007260

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000aa8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aac:	d1ed      	bne.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2iz>:
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30f      	bcc.n	8000fbe <__aeabi_f2iz+0x2a>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d90d      	bls.n	8000fc4 <__aeabi_f2iz+0x30>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	bf18      	it	ne
 8000fba:	4240      	negne	r0, r0
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2iz+0x3a>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d105      	bne.n	8000fda <__aeabi_f2iz+0x46>
 8000fce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd2:	bf08      	it	eq
 8000fd4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <test_flash_W25Q>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef hspi2;

// ----------------------------------------------------------------------------
void test_flash_W25Q(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
//		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
//	}



	int g=0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]

}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <nmea0183_checksum>:
	}
}
//---------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]

	for(j = 1; j < strlen(msg) - 4; j++)
 8001004:	2301      	movs	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	e00a      	b.n	8001020 <nmea0183_checksum+0x2c>
	{
		checksum = checksum^(unsigned)msg[j];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4053      	eors	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
	for(j = 1; j < strlen(msg) - 4; j++)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f895 	bl	8000150 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	1f1a      	subs	r2, r3, #4
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8ec      	bhi.n	800100a <nmea0183_checksum+0x16>
	}
	return checksum;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <parsing_GPGLL_line>:

//---------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b098      	sub	sp, #96	; 0x60
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001044:	2331      	movs	r3, #49	; 0x31
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
	memset(nmeaSnt, 0, size);
 8001048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f005 fc8b 	bl	800696c <memset>

	//Copy to  "*" з str_GPGLL в nmeaSnt
	int size_nmeaSnt = sizeof(nmeaSnt);
 8001056:	2331      	movs	r3, #49	; 0x31
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
	int i=0;
 800105a:	2300      	movs	r3, #0
 800105c:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001062:	e00c      	b.n	800107e <parsing_GPGLL_line+0x42>
	{
		nmeaSnt[i]=str_GPGLL[i];    // Read 49 bytes
 8001064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001072:	4413      	add	r3, r2
 8001074:	460a      	mov	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 8001078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107a:	3301      	adds	r3, #1
 800107c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800107e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b2a      	cmp	r3, #42	; 0x2a
 8001088:	d002      	beq.n	8001090 <parsing_GPGLL_line+0x54>
 800108a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800108c:	2b31      	cmp	r3, #49	; 0x31
 800108e:	dde9      	ble.n	8001064 <parsing_GPGLL_line+0x28>
	}

	// Check check sum //////////////////////////////////////////////////////////////
	char smNmbr[3]={0};     								// array for checksum
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2100      	movs	r1, #0
 8001096:	460a      	mov	r2, r1
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	460a      	mov	r2, r1
 800109c:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 800109e:	212a      	movs	r1, #42	; 0x2a
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f005 fc8b 	bl	80069bc <strchr>
 80010a6:	6478      	str	r0, [r7, #68]	; 0x44
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 80010a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010aa:	3301      	adds	r3, #1
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 80010b2:	2300      	movs	r3, #0
 80010b4:	73bb      	strb	r3, [r7, #14]

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff9a 	bl	8000ff4 <nmea0183_checksum>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	char hex[3];
	sprintf(hex, "%x", intSum);
 80010c6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4971      	ldr	r1, [pc, #452]	; (8001294 <parsing_GPGLL_line+0x258>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fc53 	bl	800697c <siprintf>

	if(strstr(smNmbr, hex) != NULL)
 80010d6:	f107 0208 	add.w	r2, r7, #8
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fc80 	bl	80069e6 <strstr>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80cf 	beq.w	800128c <parsing_GPGLL_line+0x250>
	{
		// Parsing string //////////////////////////////////////////////////////////////
		uint8_t cnt = 0;            		// Count of elements
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

		int i = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	65bb      	str	r3, [r7, #88]	; 0x58
		int count = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	657b      	str	r3, [r7, #84]	; 0x54

		while(nmeaSnt[i] != '\0')
 80010fc:	e0bf      	b.n	800127e <parsing_GPGLL_line+0x242>
		{
			while(nmeaSnt[i] == ',')
			{
				int g=0;
 80010fe:	2300      	movs	r3, #0
 8001100:	653b      	str	r3, [r7, #80]	; 0x50
				i++;
 8001102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001104:	3301      	adds	r3, #1
 8001106:	65bb      	str	r3, [r7, #88]	; 0x58
				switch (count)
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	2b04      	cmp	r3, #4
 800110c:	f200 80a9 	bhi.w	8001262 <parsing_GPGLL_line+0x226>
 8001110:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <parsing_GPGLL_line+0xdc>)
 8001112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001116:	bf00      	nop
 8001118:	0800112d 	.word	0x0800112d
 800111c:	08001169 	.word	0x08001169
 8001120:	080011a7 	.word	0x080011a7
 8001124:	080011e5 	.word	0x080011e5
 8001128:	08001223 	.word	0x08001223
				{
					case 0:
						for(g=0; g<10; g++)
 800112c:	2300      	movs	r3, #0
 800112e:	653b      	str	r3, [r7, #80]	; 0x50
 8001130:	e00f      	b.n	8001152 <parsing_GPGLL_line+0x116>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 8001132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001136:	4413      	add	r3, r2
 8001138:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800113c:	4413      	add	r3, r2
 800113e:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 8001142:	4a55      	ldr	r2, [pc, #340]	; (8001298 <parsing_GPGLL_line+0x25c>)
 8001144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001146:	4413      	add	r3, r2
 8001148:	460a      	mov	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 800114c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800114e:	3301      	adds	r3, #1
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
 8001152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001154:	2b09      	cmp	r3, #9
 8001156:	ddec      	ble.n	8001132 <parsing_GPGLL_line+0xf6>
						}
						GPS_data.lat[10] = '\0';
 8001158:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <parsing_GPGLL_line+0x25c>)
 800115a:	2200      	movs	r2, #0
 800115c:	729a      	strb	r2, [r3, #10]
						i = i+g;
 800115e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001162:	4413      	add	r3, r2
 8001164:	65bb      	str	r3, [r7, #88]	; 0x58
						break;
 8001166:	e07c      	b.n	8001262 <parsing_GPGLL_line+0x226>

					case 1:
						for (g =0; g<1; g++)
 8001168:	2300      	movs	r3, #0
 800116a:	653b      	str	r3, [r7, #80]	; 0x50
 800116c:	e010      	b.n	8001190 <parsing_GPGLL_line+0x154>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 800116e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001172:	4413      	add	r3, r2
 8001174:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001178:	4413      	add	r3, r2
 800117a:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 800117e:	4a46      	ldr	r2, [pc, #280]	; (8001298 <parsing_GPGLL_line+0x25c>)
 8001180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001182:	4413      	add	r3, r2
 8001184:	330b      	adds	r3, #11
 8001186:	460a      	mov	r2, r1
 8001188:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 800118a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800118c:	3301      	adds	r3, #1
 800118e:	653b      	str	r3, [r7, #80]	; 0x50
 8001190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001192:	2b00      	cmp	r3, #0
 8001194:	ddeb      	ble.n	800116e <parsing_GPGLL_line+0x132>
						}
						GPS_data.lat_letter[2] = '\0';
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <parsing_GPGLL_line+0x25c>)
 8001198:	2200      	movs	r2, #0
 800119a:	735a      	strb	r2, [r3, #13]
						i = i+g;
 800119c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800119e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011a0:	4413      	add	r3, r2
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
						break;
 80011a4:	e05d      	b.n	8001262 <parsing_GPGLL_line+0x226>

					case 2:
						for(g=0; g<11; g++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	653b      	str	r3, [r7, #80]	; 0x50
 80011aa:	e010      	b.n	80011ce <parsing_GPGLL_line+0x192>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 80011ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b0:	4413      	add	r3, r2
 80011b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011b6:	4413      	add	r3, r2
 80011b8:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 80011bc:	4a36      	ldr	r2, [pc, #216]	; (8001298 <parsing_GPGLL_line+0x25c>)
 80011be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c0:	4413      	add	r3, r2
 80011c2:	330d      	adds	r3, #13
 80011c4:	460a      	mov	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 80011c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ca:	3301      	adds	r3, #1
 80011cc:	653b      	str	r3, [r7, #80]	; 0x50
 80011ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d0:	2b0a      	cmp	r3, #10
 80011d2:	ddeb      	ble.n	80011ac <parsing_GPGLL_line+0x170>
						}
						GPS_data.lon[11] = '\0';
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <parsing_GPGLL_line+0x25c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
						i = i+g;
 80011da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011de:	4413      	add	r3, r2
 80011e0:	65bb      	str	r3, [r7, #88]	; 0x58
						break;
 80011e2:	e03e      	b.n	8001262 <parsing_GPGLL_line+0x226>

					case 3:
						for(g=0; g<1; g++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	653b      	str	r3, [r7, #80]	; 0x50
 80011e8:	e010      	b.n	800120c <parsing_GPGLL_line+0x1d0>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 80011ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ee:	4413      	add	r3, r2
 80011f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011f4:	4413      	add	r3, r2
 80011f6:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 80011fa:	4a27      	ldr	r2, [pc, #156]	; (8001298 <parsing_GPGLL_line+0x25c>)
 80011fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011fe:	4413      	add	r3, r2
 8001200:	3319      	adds	r3, #25
 8001202:	460a      	mov	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 8001206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001208:	3301      	adds	r3, #1
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
 800120c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800120e:	2b00      	cmp	r3, #0
 8001210:	ddeb      	ble.n	80011ea <parsing_GPGLL_line+0x1ae>
						}
						GPS_data.lon_letter[2] = '\0';
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <parsing_GPGLL_line+0x25c>)
 8001214:	2200      	movs	r2, #0
 8001216:	76da      	strb	r2, [r3, #27]
						i = i+g;
 8001218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800121a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800121c:	4413      	add	r3, r2
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
						break;
 8001220:	e01f      	b.n	8001262 <parsing_GPGLL_line+0x226>

					case 4:
						for(g=0; g<6; g++)
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	; 0x50
 8001226:	e010      	b.n	800124a <parsing_GPGLL_line+0x20e>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 8001228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800122a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800122c:	4413      	add	r3, r2
 800122e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001232:	4413      	add	r3, r2
 8001234:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <parsing_GPGLL_line+0x25c>)
 800123a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800123c:	4413      	add	r3, r2
 800123e:	331b      	adds	r3, #27
 8001240:	460a      	mov	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 8001244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001246:	3301      	adds	r3, #1
 8001248:	653b      	str	r3, [r7, #80]	; 0x50
 800124a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800124c:	2b05      	cmp	r3, #5
 800124e:	ddeb      	ble.n	8001228 <parsing_GPGLL_line+0x1ec>
						}
						GPS_data.time[6] = '\0';
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <parsing_GPGLL_line+0x25c>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 8001258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800125a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800125c:	4413      	add	r3, r2
 800125e:	65bb      	str	r3, [r7, #88]	; 0x58
						break;
 8001260:	bf00      	nop

				}
				count++;
 8001262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001264:	3301      	adds	r3, #1
 8001266:	657b      	str	r3, [r7, #84]	; 0x54
			while(nmeaSnt[i] == ',')
 8001268:	f107 0210 	add.w	r2, r7, #16
 800126c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2c      	cmp	r3, #44	; 0x2c
 8001274:	f43f af43 	beq.w	80010fe <parsing_GPGLL_line+0xc2>
			}
			i++;
 8001278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800127a:	3301      	adds	r3, #1
 800127c:	65bb      	str	r3, [r7, #88]	; 0x58
		while(nmeaSnt[i] != '\0')
 800127e:	f107 0210 	add.w	r2, r7, #16
 8001282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1ed      	bne.n	8001268 <parsing_GPGLL_line+0x22c>
		}
	}
}
 800128c:	bf00      	nop
 800128e:	3760      	adds	r7, #96	; 0x60
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08007278 	.word	0x08007278
 8001298:	200004b8 	.word	0x200004b8

0800129c <parsing_GPGGA_line>:
//---------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0a0      	sub	sp, #128	; 0x80
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
		// In this line parsed only count of satellites

		//GPS_data.number_of_satellites_GPGGA = (uint8_t*)number_of_satellites_point_GPGGA[1];		// save only it

	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 80012a4:	2346      	movs	r3, #70	; 0x46
 80012a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		memset(nmeaSnt, 0, size);
 80012a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 fb5b 	bl	800696c <memset>

		//Copy to  "*" з str_GPGGA в nmeaSnt
		int size_nmeaSnt = sizeof(nmeaSnt);
 80012b6:	2346      	movs	r3, #70	; 0x46
 80012b8:	66bb      	str	r3, [r7, #104]	; 0x68
		int i=0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	67fb      	str	r3, [r7, #124]	; 0x7c

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)   // 70   // 68
 80012be:	2300      	movs	r3, #0
 80012c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012c2:	e00c      	b.n	80012de <parsing_GPGGA_line+0x42>
		{
			nmeaSnt[i]=str_GPGGA[i];
 80012c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	7819      	ldrb	r1, [r3, #0]
 80012cc:	f107 021c 	add.w	r2, r7, #28
 80012d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012d2:	4413      	add	r3, r2
 80012d4:	460a      	mov	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)   // 70   // 68
 80012d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012da:	3301      	adds	r3, #1
 80012dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b2a      	cmp	r3, #42	; 0x2a
 80012e8:	d002      	beq.n	80012f0 <parsing_GPGGA_line+0x54>
 80012ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012ec:	2b45      	cmp	r3, #69	; 0x45
 80012ee:	dde9      	ble.n	80012c4 <parsing_GPGGA_line+0x28>
		}

		// Check check sum //////////////////////////////////////////////////////////////
		char smNmbr[3]={0};     								// array for checksum
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	2100      	movs	r1, #0
 80012f6:	460a      	mov	r2, r1
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	460a      	mov	r2, r1
 80012fc:	709a      	strb	r2, [r3, #2]
		char *rawSum;

		char time[6]={0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	809a      	strh	r2, [r3, #4]
		char nothing[2]={2};
 8001308:	2300      	movs	r3, #0
 800130a:	81bb      	strh	r3, [r7, #12]
 800130c:	2302      	movs	r3, #2
 800130e:	733b      	strb	r3, [r7, #12]
		//char latitude[] = {0};

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001310:	212a      	movs	r1, #42	; 0x2a
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 fb52 	bl	80069bc <strchr>
 8001318:	6678      	str	r0, [r7, #100]	; 0x64
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 800131a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800131c:	3301      	adds	r3, #1
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	833b      	strh	r3, [r7, #24]
		smNmbr[2]='\0';											// Add and of line '\0' sing
 8001324:	2300      	movs	r3, #0
 8001326:	76bb      	strb	r3, [r7, #26]


          // Проблема . Чексума не сходиться
		////////////////////////////////////////////
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe61 	bl	8000ff4 <nmea0183_checksum>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		char hex[3];
		sprintf(hex, "%x", intSum);
 8001338:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	493a      	ldr	r1, [pc, #232]	; (800142c <parsing_GPGGA_line+0x190>)
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fb1a 	bl	800697c <siprintf>

////////////////////////////////////////////////////
		if(strstr(smNmbr, hex) != NULL)
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fb47 	bl	80069e6 <strstr>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d062      	beq.n	8001424 <parsing_GPGGA_line+0x188>
		{
			// Parsing string //////////////////////////////////////////////////////////////
			uint8_t cnt = 0;            		// Count of elements
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

			int i = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	67bb      	str	r3, [r7, #120]	; 0x78
			int count = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	677b      	str	r3, [r7, #116]	; 0x74

			while(nmeaSnt[i] != '\0')
 800136c:	e053      	b.n	8001416 <parsing_GPGGA_line+0x17a>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 800136e:	2300      	movs	r3, #0
 8001370:	673b      	str	r3, [r7, #112]	; 0x70
					i++;
 8001372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001374:	3301      	adds	r3, #1
 8001376:	67bb      	str	r3, [r7, #120]	; 0x78
					switch (count)
 8001378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <parsing_GPGGA_line+0xe8>
 800137e:	2b01      	cmp	r3, #1
 8001380:	d01e      	beq.n	80013c0 <parsing_GPGGA_line+0x124>
 8001382:	e03b      	b.n	80013fc <parsing_GPGGA_line+0x160>
					{
						case 0:
							for(g=0; g<6; g++)
 8001384:	2300      	movs	r3, #0
 8001386:	673b      	str	r3, [r7, #112]	; 0x70
 8001388:	e010      	b.n	80013ac <parsing_GPGGA_line+0x110>
							{
								time[g] = nmeaSnt[i+g];
 800138a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800138c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800138e:	4413      	add	r3, r2
 8001390:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001394:	4413      	add	r3, r2
 8001396:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 800139a:	f107 0210 	add.w	r2, r7, #16
 800139e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a0:	4413      	add	r3, r2
 80013a2:	460a      	mov	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
							for(g=0; g<6; g++)
 80013a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a8:	3301      	adds	r3, #1
 80013aa:	673b      	str	r3, [r7, #112]	; 0x70
 80013ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	ddeb      	ble.n	800138a <parsing_GPGGA_line+0xee>
							}
							time[6] = '\0';
 80013b2:	2300      	movs	r3, #0
 80013b4:	75bb      	strb	r3, [r7, #22]
							i = i+g;
 80013b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ba:	4413      	add	r3, r2
 80013bc:	67bb      	str	r3, [r7, #120]	; 0x78
							break;
 80013be:	e01d      	b.n	80013fc <parsing_GPGGA_line+0x160>

						case 1:
							for (g =0; g<1; g++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	673b      	str	r3, [r7, #112]	; 0x70
 80013c4:	e010      	b.n	80013e8 <parsing_GPGGA_line+0x14c>
							{
								nothing[g] = nmeaSnt[i+g];
 80013c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ca:	4413      	add	r3, r2
 80013cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80013d0:	4413      	add	r3, r2
 80013d2:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 80013d6:	f107 020c 	add.w	r2, r7, #12
 80013da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013dc:	4413      	add	r3, r2
 80013de:	460a      	mov	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
							for (g =0; g<1; g++)
 80013e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013e4:	3301      	adds	r3, #1
 80013e6:	673b      	str	r3, [r7, #112]	; 0x70
 80013e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	ddeb      	ble.n	80013c6 <parsing_GPGGA_line+0x12a>
							}
							nothing[2] = '\0';
 80013ee:	2300      	movs	r3, #0
 80013f0:	73bb      	strb	r3, [r7, #14]
							i = i+g;
 80013f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013f6:	4413      	add	r3, r2
 80013f8:	67bb      	str	r3, [r7, #120]	; 0x78
							break;
 80013fa:	bf00      	nop
//							GPS_data.time[6] = '\0';
//							i = i+g;
//							break;

					}
					count++;
 80013fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013fe:	3301      	adds	r3, #1
 8001400:	677b      	str	r3, [r7, #116]	; 0x74
				while(nmeaSnt[i] == ',')
 8001402:	f107 021c 	add.w	r2, r7, #28
 8001406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b2c      	cmp	r3, #44	; 0x2c
 800140e:	d0ae      	beq.n	800136e <parsing_GPGGA_line+0xd2>
				}
				i++;
 8001410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001412:	3301      	adds	r3, #1
 8001414:	67bb      	str	r3, [r7, #120]	; 0x78
			while(nmeaSnt[i] != '\0')
 8001416:	f107 021c 	add.w	r2, r7, #28
 800141a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <parsing_GPGGA_line+0x166>
			}
		}
}
 8001424:	bf00      	nop
 8001426:	3780      	adds	r7, #128	; 0x80
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08007278 	.word	0x08007278

08001430 <parsing_GPVTG_line>:


//---------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b098      	sub	sp, #96	; 0x60
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001438:	2331      	movs	r3, #49	; 0x31
 800143a:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(nmeaSnt, 0, size);
 800143c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fa91 	bl	800696c <memset>

	//Copy to  "*" з str_GPVTG в nmeaSnt
	int size_nmeaSnt = sizeof(nmeaSnt);
 800144a:	2331      	movs	r3, #49	; 0x31
 800144c:	657b      	str	r3, [r7, #84]	; 0x54
	int i=0;
 800144e:	2300      	movs	r3, #0
 8001450:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001456:	e00c      	b.n	8001472 <parsing_GPVTG_line+0x42>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 8001458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	7819      	ldrb	r1, [r3, #0]
 8001460:	f107 0210 	add.w	r2, r7, #16
 8001464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001466:	4413      	add	r3, r2
 8001468:	460a      	mov	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 800146c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146e:	3301      	adds	r3, #1
 8001470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b2a      	cmp	r3, #42	; 0x2a
 800147c:	d002      	beq.n	8001484 <parsing_GPVTG_line+0x54>
 800147e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001480:	2b31      	cmp	r3, #49	; 0x31
 8001482:	dde9      	ble.n	8001458 <parsing_GPVTG_line+0x28>
	}

	// Check check sum //////////////////////////////////////////////////////////////
	char smNmbr[3]={0};     								// array for checksum
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2100      	movs	r1, #0
 800148a:	460a      	mov	r2, r1
 800148c:	801a      	strh	r2, [r3, #0]
 800148e:	460a      	mov	r2, r1
 8001490:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001492:	212a      	movs	r1, #42	; 0x2a
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f005 fa91 	bl	80069bc <strchr>
 800149a:	6538      	str	r0, [r7, #80]	; 0x50
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 800149c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800149e:	3301      	adds	r3, #1
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	81bb      	strh	r3, [r7, #12]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 80014a6:	2300      	movs	r3, #0
 80014a8:	73bb      	strb	r3, [r7, #14]

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fda0 	bl	8000ff4 <nmea0183_checksum>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char hex[3];
	sprintf(hex, "%x", intSum);
 80014ba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <parsing_GPVTG_line+0xc8>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 fa59 	bl	800697c <siprintf>

	if(strstr(smNmbr, hex) != NULL)
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fa86 	bl	80069e6 <strstr>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <parsing_GPVTG_line+0xbe>
	{
			// Parsing string //////////////////////////////////////////////////////////////
			uint8_t cnt = 0;            		// Count of elements
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

			int i = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
			int count = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
//				i++;
//			}
		}
			//GPS_data.number_of_satellites_GPGGA = (uint8_t*)number_of_satellites_point_GPGGA[1];		// save only it

}
 80014ee:	bf00      	nop
 80014f0:	3760      	adds	r7, #96	; 0x60
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	08007278 	.word	0x08007278

080014fc <parsing_GPS>:


//---------------------------------------------------------------------
// Parsing
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001502:	af00      	add	r7, sp, #0
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	6018      	str	r0, [r3, #0]
 8001508:	463b      	mov	r3, r7
 800150a:	6019      	str	r1, [r3, #0]

/////////////////////////////

	char buffStr[512];

	if(flag == 1)    										 // If data from GPS module in buffer
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <parsing_GPS+0xa8>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d141      	bne.n	8001598 <parsing_GPS+0x9c>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fa24 	bl	800696c <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	4610      	mov	r0, r2
 800152e:	f005 fa52 	bl	80069d6 <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL // work
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	491c      	ldr	r1, [pc, #112]	; (80015a8 <parsing_GPS+0xac>)
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fa54 	bl	80069e6 <strstr>
 800153e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 8001542:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <parsing_GPS+0x56>
		{
			parsing_GPGLL_line(str_GPGLL);
 800154a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800154e:	f7ff fd75 	bl	800103c <parsing_GPGLL_line>
		}

		// Find $GPGGA // Don't work
		str_GPGGA = strstr(buffStr, "$GPGGA");
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4915      	ldr	r1, [pc, #84]	; (80015ac <parsing_GPS+0xb0>)
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fa44 	bl	80069e6 <strstr>
 800155e:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 8001562:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <parsing_GPS+0x76>
		{
			parsing_GPGGA_line(str_GPGGA);
 800156a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800156e:	f7ff fe95 	bl	800129c <parsing_GPGGA_line>
		}

		str_GPVTG = strstr(buffStr, "$GPVTG");
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <parsing_GPS+0xb4>)
 8001578:	4618      	mov	r0, r3
 800157a:	f005 fa34 	bl	80069e6 <strstr>
 800157e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 8001582:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <parsing_GPS+0x96>
		{
			parsing_GPVTG_line(str_GPVTG);
 800158a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800158e:	f7ff ff4f 	bl	8001430 <parsing_GPVTG_line>
		}

		flag = 0;			// Data was read
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <parsing_GPS+0xa8>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
	}
}
 8001598:	bf00      	nop
 800159a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000a2 	.word	0x200000a2
 80015a8:	0800727c 	.word	0x0800727c
 80015ac:	08007284 	.word	0x08007284
 80015b0:	0800728c 	.word	0x0800728c

080015b4 <read_T_and_H_SI7021>:
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
	memset(str, 0 , sizeof(str));
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b095      	sub	sp, #84	; 0x54
 80015b8:	af02      	add	r7, sp, #8
	uint8_t size=0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char str[40]={0};
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	2228      	movs	r2, #40	; 0x28
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 f9cf 	bl	800696c <memset>
	int8_t STATUS = -1;
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	float data = 0;
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]

	// Read temperature ///////////////////////////////
	STATUS = r_single_Si7021(&data, Temperature);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f96e 	bl	80018c0 <r_single_Si7021>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	if(STATUS != 0)       	// If error
 80015ea:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d000      	beq.n	80015f4 <read_T_and_H_SI7021+0x40>
	{
		while(1){}
 80015f2:	e7fe      	b.n	80015f2 <read_T_and_H_SI7021+0x3e>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fca2 	bl	8000f44 <__aeabi_fcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <read_T_and_H_SI7021+0x56>
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <read_T_and_H_SI7021+0x1c8>)
 8001608:	e000      	b.n	800160c <read_T_and_H_SI7021+0x58>
 800160a:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <read_T_and_H_SI7021+0x1cc>)
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
	float tmpVal = (data < 0) ? -data : data;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc95 	bl	8000f44 <__aeabi_fcmplt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <read_T_and_H_SI7021+0x74>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001626:	e000      	b.n	800162a <read_T_and_H_SI7021+0x76>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c

	int tmpInt1 = tmpVal;
 800162c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800162e:	f7ff fcb1 	bl	8000f94 <__aeabi_f2iz>
 8001632:	4603      	mov	r3, r0
 8001634:	63bb      	str	r3, [r7, #56]	; 0x38
	float tmpFrac = (data - tmpInt1);
 8001636:	687c      	ldr	r4, [r7, #4]
 8001638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800163a:	f7ff fa91 	bl	8000b60 <__aeabi_i2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4619      	mov	r1, r3
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff f9d6 	bl	80009f4 <__aeabi_fsub>
 8001648:	4603      	mov	r3, r0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
	int tmpInt2 = trunc(tmpFrac * 10000);
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <read_T_and_H_SI7021+0x1d0>)
 800164e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001650:	f7ff fada 	bl	8000c08 <__aeabi_fmul>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fee6 	bl	8000428 <__aeabi_f2d>
 800165c:	4603      	mov	r3, r0
 800165e:	460c      	mov	r4, r1
 8001660:	4618      	mov	r0, r3
 8001662:	4621      	mov	r1, r4
 8001664:	f005 fdcc 	bl	8007200 <trunc>
 8001668:	4603      	mov	r3, r0
 800166a:	460c      	mov	r4, r1
 800166c:	4618      	mov	r0, r3
 800166e:	4621      	mov	r1, r4
 8001670:	f7ff f944 	bl	80008fc <__aeabi_d2iz>
 8001674:	4603      	mov	r3, r0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30

	// Print in COM port
	sprintf(str,"TEMPERATURE: %s%d.%04d C \r\n", tmpSign, tmpInt1, tmpInt2);      										// convert   in  str
 8001678:	f107 0008 	add.w	r0, r7, #8
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001684:	4940      	ldr	r1, [pc, #256]	; (8001788 <read_T_and_H_SI7021+0x1d4>)
 8001686:	f005 f979 	bl	800697c <siprintf>
	size=sizeof(str);
 800168a:	2328      	movs	r3, #40	; 0x28
 800168c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
 8001690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 0108 	add.w	r1, r7, #8
 800169a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169e:	483b      	ldr	r0, [pc, #236]	; (800178c <read_T_and_H_SI7021+0x1d8>)
 80016a0:	f004 fc25 	bl	8005eee <HAL_UART_Transmit>
	memset(str, 0 , sizeof(str));
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2228      	movs	r2, #40	; 0x28
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 f95d 	bl	800696c <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 80016b2:	23ff      	movs	r3, #255	; 0xff
 80016b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	STATUS = r_single_Si7021(&data, Humidity);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f8ff 	bl	80018c0 <r_single_Si7021>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	if(STATUS != 0)       	// If error
 80016c8:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d000      	beq.n	80016d2 <read_T_and_H_SI7021+0x11e>
	{
		while(1){}
 80016d0:	e7fe      	b.n	80016d0 <read_T_and_H_SI7021+0x11c>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fc33 	bl	8000f44 <__aeabi_fcmplt>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <read_T_and_H_SI7021+0x138>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016ea:	e000      	b.n	80016ee <read_T_and_H_SI7021+0x13a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c

	tmpInt1 = tmpVal;
 80016f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016f2:	f7ff fc4f 	bl	8000f94 <__aeabi_f2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
	tmpFrac = (data - tmpInt1);
 80016fa:	687c      	ldr	r4, [r7, #4]
 80016fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016fe:	f7ff fa2f 	bl	8000b60 <__aeabi_i2f>
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff f974 	bl	80009f4 <__aeabi_fsub>
 800170c:	4603      	mov	r3, r0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
	tmpInt2 = trunc(tmpFrac * 10000);
 8001710:	491c      	ldr	r1, [pc, #112]	; (8001784 <read_T_and_H_SI7021+0x1d0>)
 8001712:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001714:	f7ff fa78 	bl	8000c08 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fe84 	bl	8000428 <__aeabi_f2d>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	4618      	mov	r0, r3
 8001726:	4621      	mov	r1, r4
 8001728:	f005 fd6a 	bl	8007200 <trunc>
 800172c:	4603      	mov	r3, r0
 800172e:	460c      	mov	r4, r1
 8001730:	4618      	mov	r0, r3
 8001732:	4621      	mov	r1, r4
 8001734:	f7ff f8e2 	bl	80008fc <__aeabi_d2iz>
 8001738:	4603      	mov	r3, r0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30

	// Print in COM port
	sprintf(str,"HUMIDITY: %d.%04d %% \r\n", tmpInt1, tmpInt2);      										// convert   in  str
 800173c:	f107 0008 	add.w	r0, r7, #8
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <read_T_and_H_SI7021+0x1dc>)
 8001746:	f005 f919 	bl	800697c <siprintf>
	size=sizeof(str);
 800174a:	2328      	movs	r3, #40	; 0x28
 800174c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
 8001750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001754:	b29a      	uxth	r2, r3
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <read_T_and_H_SI7021+0x1d8>)
 8001760:	f004 fbc5 	bl	8005eee <HAL_UART_Transmit>
	memset(str, 0 , sizeof(str));
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	2228      	movs	r2, #40	; 0x28
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f005 f8fd 	bl	800696c <memset>
}
 8001772:	bf00      	nop
 8001774:	374c      	adds	r7, #76	; 0x4c
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	bf00      	nop
 800177c:	080072a4 	.word	0x080072a4
 8001780:	080072a8 	.word	0x080072a8
 8001784:	461c4000 	.word	0x461c4000
 8001788:	080072ac 	.word	0x080072ac
 800178c:	2000060c 	.word	0x2000060c
 8001790:	080072c8 	.word	0x080072c8
 8001794:	00000000 	.word	0x00000000

08001798 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe2d 	bl	8000404 <__aeabi_i2d>
 80017aa:	a311      	add	r3, pc, #68	; (adr r3, 80017f0 <process_temp_code+0x58>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fe92 	bl	80004d8 <__aeabi_dmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	4618      	mov	r0, r3
 80017ba:	4621      	mov	r1, r4
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <process_temp_code+0x68>)
 80017c2:	f7fe ffb3 	bl	800072c <__aeabi_ddiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	a30a      	add	r3, pc, #40	; (adr r3, 80017f8 <process_temp_code+0x60>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fcc8 	bl	8000168 <__aeabi_dsub>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4618      	mov	r0, r3
 80017de:	4621      	mov	r1, r4
 80017e0:	f7ff f8b4 	bl	800094c <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	3d70a3d7 	.word	0x3d70a3d7
 80017f4:	4065f70a 	.word	0x4065f70a
 80017f8:	cccccccd 	.word	0xcccccccd
 80017fc:	40476ccc 	.word	0x40476ccc
 8001800:	40f00000 	.word	0x40f00000

08001804 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdf7 	bl	8000404 <__aeabi_i2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <process_humi_code+0x84>)
 800181c:	f7fe fe5c 	bl	80004d8 <__aeabi_dmul>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <process_humi_code+0x88>)
 800182e:	f7fe ff7d 	bl	800072c <__aeabi_ddiv>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <process_humi_code+0x8c>)
 8001840:	f7fe fc92 	bl	8000168 <__aeabi_dsub>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	4618      	mov	r0, r3
 800184a:	4621      	mov	r1, r4
 800184c:	f7ff f87e 	bl	800094c <__aeabi_d2f>
 8001850:	4603      	mov	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fb73 	bl	8000f44 <__aeabi_fcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <process_humi_code+0x66>
    return 0;
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e009      	b.n	800187e <process_humi_code+0x7a>
  else if(value > 100)
 800186a:	490a      	ldr	r1, [pc, #40]	; (8001894 <process_humi_code+0x90>)
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff fb87 	bl	8000f80 <__aeabi_fcmpgt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <process_humi_code+0x78>
    return 100;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <process_humi_code+0x90>)
 800187a:	e000      	b.n	800187e <process_humi_code+0x7a>
  else
    return (float)value;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	405f4000 	.word	0x405f4000
 800188c:	40f00000 	.word	0x40f00000
 8001890:	40180000 	.word	0x40180000
 8001894:	42c80000 	.word	0x42c80000

08001898 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3301      	adds	r3, #1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	b29b      	uxth	r3, r3
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 80018d2:	23e5      	movs	r3, #229	; 0xe5
 80018d4:	737b      	strb	r3, [r7, #13]
 80018d6:	e008      	b.n	80018ea <r_single_Si7021+0x2a>
  else if(type == Temperature)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 80018de:	23e3      	movs	r3, #227	; 0xe3
 80018e0:	737b      	strb	r3, [r7, #13]
 80018e2:	e002      	b.n	80018ea <r_single_Si7021+0x2a>
  else
    return -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	e03c      	b.n	8001964 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	f107 020d 	add.w	r2, r7, #13
 80018f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	481c      	ldr	r0, [pc, #112]	; (800196c <r_single_Si7021+0xac>)
 80018fa:	f001 ff51 	bl	80037a0 <HAL_I2C_Master_Transmit>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <r_single_Si7021+0x4a>
    return -1;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001908:	e02c      	b.n	8001964 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	f107 0208 	add.w	r2, r7, #8
 8001910:	f242 7310 	movw	r3, #10000	; 0x2710
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2302      	movs	r3, #2
 8001918:	4814      	ldr	r0, [pc, #80]	; (800196c <r_single_Si7021+0xac>)
 800191a:	f002 f83f 	bl	800399c <HAL_I2C_Master_Receive>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <r_single_Si7021+0x6a>
    return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001928:	e01c      	b.n	8001964 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ffb2 	bl	8001898 <convert_to_uint16>
 8001934:	4603      	mov	r3, r0
 8001936:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d107      	bne.n	800194e <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <process_humi_code>
 8001946:	4602      	mov	r2, r0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e009      	b.n	8001962 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff1e 	bl	8001798 <process_temp_code>
 800195c:	4602      	mov	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]

  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200005b8 	.word	0x200005b8

08001970 <I2C_1_scaner>:
uint32_t timeout=1000;						// timeout for receive
uint16_t STATUS=0;								// Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b09e      	sub	sp, #120	; 0x78
 8001974:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t size=0;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	char str3[100]={0};
 800197c:	463b      	mov	r3, r7
 800197e:	2264      	movs	r2, #100	; 0x64
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fff2 	bl	800696c <memset>
	uint8_t size_mas=sizeof(str3);
 8001988:	2364      	movs	r3, #100	; 0x64
 800198a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t i=0;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	sprintf(str3,"I2C_1 SEARCH DEVISES... \r\n");      										// convert   in  str
 8001994:	463b      	mov	r3, r7
 8001996:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <I2C_1_scaner+0x224>)
 8001998:	461c      	mov	r4, r3
 800199a:	4615      	mov	r5, r2
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a4:	c403      	stmia	r4!, {r0, r1}
 80019a6:	8022      	strh	r2, [r4, #0]
 80019a8:	3402      	adds	r4, #2
 80019aa:	0c13      	lsrs	r3, r2, #16
 80019ac:	7023      	strb	r3, [r4, #0]
	size=sizeof(str3);
 80019ae:	2364      	movs	r3, #100	; 0x64
 80019b0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80019b4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4639      	mov	r1, r7
 80019bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c0:	4875      	ldr	r0, [pc, #468]	; (8001b98 <I2C_1_scaner+0x228>)
 80019c2:	f004 fa94 	bl	8005eee <HAL_UART_Transmit>
	uint8_t number_of_device=0;				// How many device controller is found
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80019cc:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <I2C_1_scaner+0x22c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e095      	b.n	8001b00 <I2C_1_scaner+0x190>
	{
		HAL_Delay(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f001 f8a5 	bl	8002b24 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 80019da:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <I2C_1_scaner+0x22c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b299      	uxth	r1, r3
 80019e4:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <I2C_1_scaner+0x230>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b298      	uxth	r0, r3
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <I2C_1_scaner+0x234>)
 80019ec:	881c      	ldrh	r4, [r3, #0]
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <I2C_1_scaner+0x234>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4a6d      	ldr	r2, [pc, #436]	; (8001ba8 <I2C_1_scaner+0x238>)
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	9202      	str	r2, [sp, #8]
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <I2C_1_scaner+0x23c>)
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4623      	mov	r3, r4
 8001a00:	4602      	mov	r2, r0
 8001a02:	486b      	ldr	r0, [pc, #428]	; (8001bb0 <I2C_1_scaner+0x240>)
 8001a04:	f002 fb1e 	bl	8004044 <HAL_I2C_Mem_Read>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <I2C_1_scaner+0x244>)
 8001a0e:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <I2C_1_scaner+0x244>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d16d      	bne.n	8001af4 <I2C_1_scaner+0x184>
		{
			number_of_device++;
 8001a18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8001a22:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b40      	cmp	r3, #64	; 0x40
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b3c      	cmp	r3, #60	; 0x3c
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d03c      	beq.n	8001ac0 <I2C_1_scaner+0x150>
			{
				switch (addres_devise)
 8001a46:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b3c      	cmp	r3, #60	; 0x3c
 8001a4c:	d01c      	beq.n	8001a88 <I2C_1_scaner+0x118>
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d150      	bne.n	8001af4 <I2C_1_scaner+0x184>
				{
					case H_and_T_sensor_SI7021_I2C_ADDR:
						sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
 8001a52:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <I2C_1_scaner+0x248>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 ff8d 	bl	800697c <siprintf>
						size=sizeof(str3);
 8001a62:	2364      	movs	r3, #100	; 0x64
 8001a64:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001a68:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4639      	mov	r1, r7
 8001a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a74:	4848      	ldr	r0, [pc, #288]	; (8001b98 <I2C_1_scaner+0x228>)
 8001a76:	f004 fa3a 	bl	8005eee <HAL_UART_Transmit>
						memset(str3, 0 , sizeof(str3));   // Clean str3
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2264      	movs	r2, #100	; 0x64
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 ff73 	bl	800696c <memset>
                    break;
 8001a86:	e035      	b.n	8001af4 <I2C_1_scaner+0x184>

					case  OLED_SSD136_I2C_ADDR:
						sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
 8001a88:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	463b      	mov	r3, r7
 8001a90:	494a      	ldr	r1, [pc, #296]	; (8001bbc <I2C_1_scaner+0x24c>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 ff72 	bl	800697c <siprintf>
						size=sizeof(str3);
 8001a98:	2364      	movs	r3, #100	; 0x64
 8001a9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001a9e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4639      	mov	r1, r7
 8001aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aaa:	483b      	ldr	r0, [pc, #236]	; (8001b98 <I2C_1_scaner+0x228>)
 8001aac:	f004 fa1f 	bl	8005eee <HAL_UART_Transmit>
						memset(str3, 0 , sizeof(str3));   // Clean str3
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2264      	movs	r2, #100	; 0x64
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 ff58 	bl	800696c <memset>
				    break;
 8001abc:	bf00      	nop
 8001abe:	e019      	b.n	8001af4 <I2C_1_scaner+0x184>
				}
			}

			else
			{
				memset(str3, 0 , sizeof(str3));
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2264      	movs	r2, #100	; 0x64
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 ff50 	bl	800696c <memset>
				sprintf(str3,"Device address-0x%x - found........................UNKNOWN DEVICE \r\n",addres_devise);      // convert   in  str
 8001acc:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	493a      	ldr	r1, [pc, #232]	; (8001bc0 <I2C_1_scaner+0x250>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 ff50 	bl	800697c <siprintf>
				size=sizeof(str3);
 8001adc:	2364      	movs	r3, #100	; 0x64
 8001ade:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001ae2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4639      	mov	r1, r7
 8001aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aee:	482a      	ldr	r0, [pc, #168]	; (8001b98 <I2C_1_scaner+0x228>)
 8001af0:	f004 f9fd 	bl	8005eee <HAL_UART_Transmit>
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <I2C_1_scaner+0x22c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	f47f af65 	bne.w	80019d4 <I2C_1_scaner+0x64>
			}
		}
	}
	if(number_of_device==0)  																				// If devices nofound
 8001b0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11c      	bne.n	8001b4c <I2C_1_scaner+0x1dc>
	{
		memset(str3, 0 , sizeof(str3));
 8001b12:	463b      	mov	r3, r7
 8001b14:	2264      	movs	r2, #100	; 0x64
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 ff27 	bl	800696c <memset>
		sprintf(str3,"Devices no found!!!\r\n");      							// convert   in  str
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <I2C_1_scaner+0x254>)
 8001b22:	461c      	mov	r4, r3
 8001b24:	4615      	mov	r5, r2
 8001b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b2e:	6020      	str	r0, [r4, #0]
 8001b30:	3404      	adds	r4, #4
 8001b32:	8021      	strh	r1, [r4, #0]
		size=sizeof(str3);
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001b3a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4639      	mov	r1, r7
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	4814      	ldr	r0, [pc, #80]	; (8001b98 <I2C_1_scaner+0x228>)
 8001b48:	f004 f9d1 	bl	8005eee <HAL_UART_Transmit>
	}

	memset(str3, 0 , sizeof(str3));
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2264      	movs	r2, #100	; 0x64
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 ff0a 	bl	800696c <memset>
	sprintf(str3,"DONE\r\n");      																	// convert   in  str
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <I2C_1_scaner+0x258>)
 8001b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b60:	6018      	str	r0, [r3, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	8019      	strh	r1, [r3, #0]
 8001b66:	3302      	adds	r3, #2
 8001b68:	0c0a      	lsrs	r2, r1, #16
 8001b6a:	701a      	strb	r2, [r3, #0]
	size=sizeof(str3);
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001b72:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4639      	mov	r1, r7
 8001b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <I2C_1_scaner+0x228>)
 8001b80:	f004 f9b5 	bl	8005eee <HAL_UART_Transmit>

	HAL_Delay(500);
 8001b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b88:	f000 ffcc 	bl	8002b24 <HAL_Delay>
}
 8001b8c:	bf00      	nop
 8001b8e:	3768      	adds	r7, #104	; 0x68
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	080072e0 	.word	0x080072e0
 8001b98:	2000060c 	.word	0x2000060c
 8001b9c:	2000009c 	.word	0x2000009c
 8001ba0:	2000009d 	.word	0x2000009d
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	2000009e 	.word	0x2000009e
 8001bb0:	200005b8 	.word	0x200005b8
 8001bb4:	200000a0 	.word	0x200000a0
 8001bb8:	080072fc 	.word	0x080072fc
 8001bbc:	0800734c 	.word	0x0800734c
 8001bc0:	08007378 	.word	0x08007378
 8001bc4:	080073c0 	.word	0x080073c0
 8001bc8:	080073d8 	.word	0x080073d8

08001bcc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PV */
// -----------------------------------------------------------------------------
#if GPS
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
		flag = 1;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_UART_RxCpltCallback+0x18>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
	}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	200000a2 	.word	0x200000a2

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf0:	f000 ff36 	bl	8002a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf4:	f000 f87a 	bl	8001cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf8:	f000 f9e2 	bl	8001fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bfc:	f000 f9c2 	bl	8001f84 <MX_DMA_Init>
  MX_TIM2_Init();
 8001c00:	f000 f91e 	bl	8001e40 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001c04:	f000 f8b8 	bl	8001d78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c08:	f000 f968 	bl	8001edc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c0c:	f000 f990 	bl	8001f30 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001c10:	f000 f8e0 	bl	8001dd4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  #if I2C_SCANNER
  	  I2C_1_scaner();
 8001c14:	f7ff feac 	bl	8001970 <I2C_1_scaner>
  #endif

  #if H_a_T_SI7021
  	  read_T_and_H_SI7021();
 8001c18:	f7ff fccc 	bl	80015b4 <read_T_and_H_SI7021>
  #endif

  #if OLED
	  init_oled();
 8001c1c:	f000 fa66 	bl	80020ec <init_oled>
	  test_oled();
 8001c20:	f000 fa74 	bl	800210c <test_oled>
  #endif

	  HAL_TIM_Base_Start_IT(&htim2);
 8001c24:	482c      	ldr	r0, [pc, #176]	; (8001cd8 <main+0xf0>)
 8001c26:	f003 fdc1 	bl	80057ac <HAL_TIM_Base_Start_IT>

	#if GPS
	  uint8_t GPS_buff[512];      						// main buffer for stream from GPS
	  memset(GPS_buff ,0 ,sizeof(GPS_buff));
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fe9a 	bl	800696c <memset>
	  HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 8001c38:	463b      	mov	r3, r7
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4826      	ldr	r0, [pc, #152]	; (8001cdc <main+0xf4>)
 8001c42:	f004 f9ed 	bl	8006020 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

        if(interrupt_flag == 1)
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <main+0xf8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d1fb      	bne.n	8001c46 <main+0x5e>
        {
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2101      	movs	r1, #1
 8001c52:	4824      	ldr	r0, [pc, #144]	; (8001ce4 <main+0xfc>)
 8001c54:	f001 fc54 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	4822      	ldr	r0, [pc, #136]	; (8001ce8 <main+0x100>)
 8001c5e:	f001 fc4f 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4820      	ldr	r0, [pc, #128]	; (8001ce8 <main+0x100>)
 8001c68:	f001 fc4a 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2120      	movs	r1, #32
 8001c70:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <main+0x100>)
 8001c72:	f001 fc45 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2110      	movs	r1, #16
 8001c7a:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <main+0x100>)
 8001c7c:	f001 fc40 	bl	8003500 <HAL_GPIO_WritePin>

        	read_T_and_H_SI7021();
 8001c80:	f7ff fc98 	bl	80015b4 <read_T_and_H_SI7021>


        	test_flash_W25Q();
 8001c84:	f7ff f9ac 	bl	8000fe0 <test_flash_W25Q>


			#if GPS
        		parsing_GPS(GPS_buff, 512);
 8001c88:	463b      	mov	r3, r7
 8001c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc34 	bl	80014fc <parsing_GPS>
        		HAL_Delay(500);
 8001c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c98:	f000 ff44 	bl	8002b24 <HAL_Delay>
			# else
        		HAL_Delay(500);
			#endif

        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <main+0xfc>)
 8001ca2:	f001 fc2d 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <main+0x100>)
 8001cac:	f001 fc28 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <main+0x100>)
 8001cb6:	f001 fc23 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <main+0x100>)
 8001cc0:	f001 fc1e 	bl	8003500 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <main+0x100>)
 8001cca:	f001 fc19 	bl	8003500 <HAL_GPIO_WritePin>


        	//HAL_Delay(100);
        	interrupt_flag = 0;
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <main+0xf8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
        if(interrupt_flag == 1)
 8001cd4:	e7b7      	b.n	8001c46 <main+0x5e>
 8001cd6:	bf00      	nop
 8001cd8:	2000064c 	.word	0x2000064c
 8001cdc:	20000578 	.word	0x20000578
 8001ce0:	200000a3 	.word	0x200000a3
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40010800 	.word	0x40010800

08001cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b090      	sub	sp, #64	; 0x40
 8001cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf2:	f107 0318 	add.w	r3, r7, #24
 8001cf6:	2228      	movs	r2, #40	; 0x28
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fe36 	bl	800696c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d20:	2302      	movs	r3, #2
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d30:	f107 0318 	add.w	r3, r7, #24
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f891 	bl	8004e5c <HAL_RCC_OscConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d40:	f000 f9ce 	bl	80020e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d44:	230f      	movs	r3, #15
 8001d46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fafc 	bl	800535c <HAL_RCC_ClockConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d6a:	f000 f9b9 	bl	80020e0 <Error_Handler>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3740      	adds	r7, #64	; 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <MX_I2C1_Init+0x54>)
 8001d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_I2C1_Init+0x58>)
 8001d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_I2C1_Init+0x50>)
 8001db6:	f001 fbbb 	bl	8003530 <HAL_I2C_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dc0:	f000 f98e 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200005b8 	.word	0x200005b8
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	000186a0 	.word	0x000186a0

08001dd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <MX_SPI2_Init+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_SPI2_Init+0x64>)
 8001e26:	f003 fc35 	bl	8005694 <HAL_SPI_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e30:	f000 f956 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200004dc 	.word	0x200004dc
 8001e3c:	40003800 	.word	0x40003800

08001e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	463b      	mov	r3, r7
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e66:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e74:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e88:	f003 fc65 	bl	8005756 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e92:	f000 f925 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001ea4:	f003 fdad 	bl	8005a02 <HAL_TIM_ConfigClockSource>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001eae:	f000 f917 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001ec0:	f003 ff72 	bl	8005da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001eca:	f000 f909 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000064c 	.word	0x2000064c

08001edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_USART1_UART_Init+0x50>)
 8001ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f02:	220c      	movs	r2, #12
 8001f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_USART1_UART_Init+0x4c>)
 8001f14:	f003 ff9e 	bl	8005e54 <HAL_UART_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f1e:	f000 f8df 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000060c 	.word	0x2000060c
 8001f2c:	40013800 	.word	0x40013800

08001f30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_USART3_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_USART3_UART_Init+0x4c>)
 8001f68:	f003 ff74 	bl	8005e54 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f72:	f000 f8b5 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000578 	.word	0x20000578
 8001f80:	40004800 	.word	0x40004800

08001f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_DMA_Init+0x38>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <MX_DMA_Init+0x38>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_DMA_Init+0x38>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	200d      	movs	r0, #13
 8001fa8:	f000 feb5 	bl	8002d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fac:	200d      	movs	r0, #13
 8001fae:	f000 fece 	bl	8002d4e <HAL_NVIC_EnableIRQ>

}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <MX_GPIO_Init+0xec>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <MX_GPIO_Init+0xec>)
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <MX_GPIO_Init+0xec>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <MX_GPIO_Init+0xec>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <MX_GPIO_Init+0xec>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <MX_GPIO_Init+0xec>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <MX_GPIO_Init+0xec>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a28      	ldr	r2, [pc, #160]	; (80020ac <MX_GPIO_Init+0xec>)
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <MX_GPIO_Init+0xec>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800201c:	2200      	movs	r2, #0
 800201e:	21f8      	movs	r1, #248	; 0xf8
 8002020:	4823      	ldr	r0, [pc, #140]	; (80020b0 <MX_GPIO_Init+0xf0>)
 8002022:	f001 fa6d 	bl	8003500 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|CS_M25Q_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f241 0101 	movw	r1, #4097	; 0x1001
 800202c:	4821      	ldr	r0, [pc, #132]	; (80020b4 <MX_GPIO_Init+0xf4>)
 800202e:	f001 fa67 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002032:	2308      	movs	r3, #8
 8002034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	4619      	mov	r1, r3
 8002048:	4819      	ldr	r0, [pc, #100]	; (80020b0 <MX_GPIO_Init+0xf0>)
 800204a:	f001 f8ff 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800204e:	23f0      	movs	r3, #240	; 0xf0
 8002050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2302      	movs	r3, #2
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4619      	mov	r1, r3
 8002064:	4812      	ldr	r0, [pc, #72]	; (80020b0 <MX_GPIO_Init+0xf0>)
 8002066:	f001 f8f1 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206a:	2301      	movs	r3, #1
 800206c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2302      	movs	r3, #2
 8002078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <MX_GPIO_Init+0xf4>)
 8002082:	f001 f8e3 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002094:	2301      	movs	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_GPIO_Init+0xf4>)
 80020a0:	f001 f8d4 	bl	800324c <HAL_GPIO_Init>

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00

080020b8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d102      	bne.n	80020d0 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();

        	interrupt_flag = 1;
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]


        }
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200000a3 	.word	0x200000a3

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <init_oled>:

extern TIM_HandleTypeDef htim1;

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80020f0:	f000 f866 	bl	80021c0 <ssd1306_Init>
	HAL_Delay(500);
 80020f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020f8:	f000 fd14 	bl	8002b24 <HAL_Delay>
	ssd1306_Fill(Black);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f000 f8cb 	bl	8002298 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002102:	f000 f8eb 	bl	80022dc <ssd1306_UpdateScreen>
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <test_oled>:
// -----------------------------------------------------------------------------------
void test_oled(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	71fb      	strb	r3, [r7, #7]
	for (i=0; i<=46; i++)     // 64 - 18
 8002116:	2300      	movs	r3, #0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e012      	b.n	8002142 <test_oled+0x36>
	{
		//HAL_TIM_Base_Stop_IT(&htim1);

		ssd1306_SetCursor(0,i);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	4619      	mov	r1, r3
 8002120:	2000      	movs	r0, #0
 8002122:	f000 fa11 	bl	8002548 <ssd1306_SetCursor>
		ssd1306_WriteString("HELLO !!!",Font_11x18,White);
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <test_oled+0x7c>)
 8002128:	2301      	movs	r3, #1
 800212a:	ca06      	ldmia	r2, {r1, r2}
 800212c:	4817      	ldr	r0, [pc, #92]	; (800218c <test_oled+0x80>)
 800212e:	f000 f9e5 	bl	80024fc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002132:	f000 f8d3 	bl	80022dc <ssd1306_UpdateScreen>

		//HAL_TIM_Base_Start_IT(&htim1);

		HAL_Delay(10);
 8002136:	200a      	movs	r0, #10
 8002138:	f000 fcf4 	bl	8002b24 <HAL_Delay>
	for (i=0; i<=46; i++)     // 64 - 18
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	3301      	adds	r3, #1
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b2e      	cmp	r3, #46	; 0x2e
 8002146:	d9e9      	bls.n	800211c <test_oled+0x10>
	}
	if(i >= 46)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b2d      	cmp	r3, #45	; 0x2d
 800214c:	d918      	bls.n	8002180 <test_oled+0x74>
	{
		for(i = 46; i>0; i--)
 800214e:	232e      	movs	r3, #46	; 0x2e
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	e012      	b.n	800217a <test_oled+0x6e>
		{
			//HAL_TIM_Base_Stop_IT(&htim1);

			ssd1306_SetCursor(0,i);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	4619      	mov	r1, r3
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f9f5 	bl	8002548 <ssd1306_SetCursor>
			ssd1306_WriteString("HELLO !!!",Font_11x18,White);
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <test_oled+0x7c>)
 8002160:	2301      	movs	r3, #1
 8002162:	ca06      	ldmia	r2, {r1, r2}
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <test_oled+0x80>)
 8002166:	f000 f9c9 	bl	80024fc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800216a:	f000 f8b7 	bl	80022dc <ssd1306_UpdateScreen>

			//HAL_TIM_Base_Start_IT(&htim1);

			HAL_Delay(10);
 800216e:	200a      	movs	r0, #10
 8002170:	f000 fcd8 	bl	8002b24 <HAL_Delay>
		for(i = 46; i>0; i--)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	3b01      	subs	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e9      	bne.n	8002154 <test_oled+0x48>
		}
	}
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000000 	.word	0x20000000
 800218c:	080073e0 	.word	0x080073e0

08002190 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af04      	add	r7, sp, #16
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800219a:	230a      	movs	r3, #10
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	2301      	movs	r3, #1
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	2200      	movs	r2, #0
 80021aa:	2178      	movs	r1, #120	; 0x78
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <ssd1306_WriteCommand+0x2c>)
 80021ae:	f001 fe4f 	bl	8003e50 <HAL_I2C_Mem_Write>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200005b8 	.word	0x200005b8

080021c0 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	f000 fcad 	bl	8002b24 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80021ca:	20ae      	movs	r0, #174	; 0xae
 80021cc:	f7ff ffe0 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80021d0:	2020      	movs	r0, #32
 80021d2:	f7ff ffdd 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80021d6:	2010      	movs	r0, #16
 80021d8:	f7ff ffda 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021dc:	20b0      	movs	r0, #176	; 0xb0
 80021de:	f7ff ffd7 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80021e2:	20c8      	movs	r0, #200	; 0xc8
 80021e4:	f7ff ffd4 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff ffd1 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80021ee:	2010      	movs	r0, #16
 80021f0:	f7ff ffce 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80021f4:	2040      	movs	r0, #64	; 0x40
 80021f6:	f7ff ffcb 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80021fa:	2081      	movs	r0, #129	; 0x81
 80021fc:	f7ff ffc8 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8002200:	20ff      	movs	r0, #255	; 0xff
 8002202:	f7ff ffc5 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002206:	20a1      	movs	r0, #161	; 0xa1
 8002208:	f7ff ffc2 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800220c:	20a6      	movs	r0, #166	; 0xa6
 800220e:	f7ff ffbf 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8002212:	20a8      	movs	r0, #168	; 0xa8
 8002214:	f7ff ffbc 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8002218:	203f      	movs	r0, #63	; 0x3f
 800221a:	f7ff ffb9 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800221e:	20a4      	movs	r0, #164	; 0xa4
 8002220:	f7ff ffb6 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8002224:	20d3      	movs	r0, #211	; 0xd3
 8002226:	f7ff ffb3 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff ffb0 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002230:	20d5      	movs	r0, #213	; 0xd5
 8002232:	f7ff ffad 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002236:	20f0      	movs	r0, #240	; 0xf0
 8002238:	f7ff ffaa 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800223c:	20d9      	movs	r0, #217	; 0xd9
 800223e:	f7ff ffa7 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8002242:	2022      	movs	r0, #34	; 0x22
 8002244:	f7ff ffa4 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8002248:	20da      	movs	r0, #218	; 0xda
 800224a:	f7ff ffa1 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800224e:	2012      	movs	r0, #18
 8002250:	f7ff ff9e 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002254:	20db      	movs	r0, #219	; 0xdb
 8002256:	f7ff ff9b 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800225a:	2020      	movs	r0, #32
 800225c:	f7ff ff98 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002260:	208d      	movs	r0, #141	; 0x8d
 8002262:	f7ff ff95 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8002266:	2014      	movs	r0, #20
 8002268:	f7ff ff92 	bl	8002190 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800226c:	20af      	movs	r0, #175	; 0xaf
 800226e:	f7ff ff8f 	bl	8002190 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f810 	bl	8002298 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8002278:	f000 f830 	bl	80022dc <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <ssd1306_Init+0xd4>)
 800227e:	2200      	movs	r2, #0
 8002280:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <ssd1306_Init+0xd4>)
 8002284:	2200      	movs	r2, #0
 8002286:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <ssd1306_Init+0xd4>)
 800228a:	2201      	movs	r2, #1
 800228c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200004a4 	.word	0x200004a4

08002298 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e00d      	b.n	80022c4 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <ssd1306_Fill+0x1a>
 80022ae:	2100      	movs	r1, #0
 80022b0:	e000      	b.n	80022b4 <ssd1306_Fill+0x1c>
 80022b2:	21ff      	movs	r1, #255	; 0xff
 80022b4:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <ssd1306_Fill+0x40>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	460a      	mov	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d3ed      	bcc.n	80022a8 <ssd1306_Fill+0x10>
	}
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200000a4 	.word	0x200000a4

080022dc <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	e01d      	b.n	8002324 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	3b50      	subs	r3, #80	; 0x50
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff4e 	bl	8002190 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff ff4b 	bl	8002190 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80022fa:	2010      	movs	r0, #16
 80022fc:	f7ff ff48 	bl	8002190 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	01db      	lsls	r3, r3, #7
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <ssd1306_UpdateScreen+0x58>)
 8002306:	4413      	add	r3, r2
 8002308:	2264      	movs	r2, #100	; 0x64
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	9201      	str	r2, [sp, #4]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2301      	movs	r3, #1
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	2178      	movs	r1, #120	; 0x78
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <ssd1306_UpdateScreen+0x5c>)
 800231a:	f001 fd99 	bl	8003e50 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	3301      	adds	r3, #1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	2b07      	cmp	r3, #7
 8002328:	d9de      	bls.n	80022e8 <ssd1306_UpdateScreen+0xc>
	}
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200000a4 	.word	0x200000a4
 8002338:	200005b8 	.word	0x200005b8

0800233c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	460b      	mov	r3, r1
 8002348:	71bb      	strb	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db48      	blt.n	80023e8 <ssd1306_DrawPixel+0xac>
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	2b3f      	cmp	r3, #63	; 0x3f
 800235a:	d845      	bhi.n	80023e8 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <ssd1306_DrawPixel+0xb8>)
 800235e:	791b      	ldrb	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8002364:	797b      	ldrb	r3, [r7, #5]
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8002372:	797b      	ldrb	r3, [r7, #5]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11a      	bne.n	80023ae <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	b2d8      	uxtb	r0, r3
 8002380:	4603      	mov	r3, r0
 8002382:	01db      	lsls	r3, r3, #7
 8002384:	4413      	add	r3, r2
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <ssd1306_DrawPixel+0xbc>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	b25a      	sxtb	r2, r3
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	b25b      	sxtb	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b259      	sxtb	r1, r3
 800239e:	79fa      	ldrb	r2, [r7, #7]
 80023a0:	4603      	mov	r3, r0
 80023a2:	01db      	lsls	r3, r3, #7
 80023a4:	4413      	add	r3, r2
 80023a6:	b2c9      	uxtb	r1, r1
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <ssd1306_DrawPixel+0xbc>)
 80023aa:	54d1      	strb	r1, [r2, r3]
 80023ac:	e01d      	b.n	80023ea <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	b2d8      	uxtb	r0, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4413      	add	r3, r2
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <ssd1306_DrawPixel+0xbc>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	b25a      	sxtb	r2, r3
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	4013      	ands	r3, r2
 80023d6:	b259      	sxtb	r1, r3
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	4603      	mov	r3, r0
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	4413      	add	r3, r2
 80023e0:	b2c9      	uxtb	r1, r1
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <ssd1306_DrawPixel+0xbc>)
 80023e4:	54d1      	strb	r1, [r2, r3]
 80023e6:	e000      	b.n	80023ea <ssd1306_DrawPixel+0xae>
		return;
 80023e8:	bf00      	nop
	}
}
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200004a4 	.word	0x200004a4
 80023f8:	200000a4 	.word	0x200000a4

080023fc <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	4604      	mov	r4, r0
 8002404:	1d38      	adds	r0, r7, #4
 8002406:	e880 0006 	stmia.w	r0, {r1, r2}
 800240a:	461a      	mov	r2, r3
 800240c:	4623      	mov	r3, r4
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	4613      	mov	r3, r2
 8002412:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	793b      	ldrb	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	2b7f      	cmp	r3, #127	; 0x7f
 8002420:	dc06      	bgt.n	8002430 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 8002424:	885b      	ldrh	r3, [r3, #2]
 8002426:	461a      	mov	r2, r3
 8002428:	797b      	ldrb	r3, [r7, #5]
 800242a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800242c:	2b3f      	cmp	r3, #63	; 0x3f
 800242e:	dd01      	ble.n	8002434 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8002430:	2300      	movs	r3, #0
 8002432:	e05d      	b.n	80024f0 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e04c      	b.n	80024d4 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	3b20      	subs	r3, #32
 8002440:	7979      	ldrb	r1, [r7, #5]
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4619      	mov	r1, r3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	440b      	add	r3, r1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e034      	b.n	80024c4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4413      	add	r3, r2
 8002476:	b2d8      	uxtb	r0, r3
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 800247a:	885b      	ldrh	r3, [r3, #2]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4413      	add	r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	7bba      	ldrb	r2, [r7, #14]
 8002488:	4619      	mov	r1, r3
 800248a:	f7ff ff57 	bl	800233c <ssd1306_DrawPixel>
 800248e:	e016      	b.n	80024be <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4413      	add	r3, r2
 800249c:	b2d8      	uxtb	r0, r3
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 80024a0:	885b      	ldrh	r3, [r3, #2]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	b2d9      	uxtb	r1, r3
 80024ac:	7bbb      	ldrb	r3, [r7, #14]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	f7ff ff3f 	bl	800233c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	793b      	ldrb	r3, [r7, #4]
 80024c6:	461a      	mov	r2, r3
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d3c5      	bcc.n	800245a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	797b      	ldrb	r3, [r7, #5]
 80024d6:	461a      	mov	r2, r3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4293      	cmp	r3, r2
 80024dc:	d3ad      	bcc.n	800243a <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 80024e0:	881a      	ldrh	r2, [r3, #0]
 80024e2:	793b      	ldrb	r3, [r7, #4]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <ssd1306_WriteChar+0xfc>)
 80024ec:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3724      	adds	r7, #36	; 0x24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}
 80024f8:	200004a4 	.word	0x200004a4

080024fc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	1d38      	adds	r0, r7, #4
 8002506:	e880 0006 	stmia.w	r0, {r1, r2}
 800250a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 800250c:	e012      	b.n	8002534 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	7818      	ldrb	r0, [r3, #0]
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	1d3a      	adds	r2, r7, #4
 8002516:	ca06      	ldmia	r2, {r1, r2}
 8002518:	f7ff ff70 	bl	80023fc <ssd1306_WriteChar>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d002      	beq.n	800252e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	e008      	b.n	8002540 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3301      	adds	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e8      	bne.n	800250e <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	781b      	ldrb	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	460a      	mov	r2, r1
 8002552:	71fb      	strb	r3, [r7, #7]
 8002554:	4613      	mov	r3, r2
 8002556:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <ssd1306_SetCursor+0x2c>)
 800255e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002560:	79bb      	ldrb	r3, [r7, #6]
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <ssd1306_SetCursor+0x2c>)
 8002566:	805a      	strh	r2, [r3, #2]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200004a4 	.word	0x200004a4

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_MspInit+0x5c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <HAL_MspInit+0x5c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6193      	str	r3, [r2, #24]
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_MspInit+0x5c>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_MspInit+0x5c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_MspInit+0x5c>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_MspInit+0x5c>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_MspInit+0x60>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_MspInit+0x60>)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000

080025dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_I2C_MspInit+0x70>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d123      	bne.n	8002644 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_I2C_MspInit+0x74>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_I2C_MspInit+0x74>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_I2C_MspInit+0x74>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002614:	23c0      	movs	r3, #192	; 0xc0
 8002616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002618:	2312      	movs	r3, #18
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	4619      	mov	r1, r3
 8002626:	480b      	ldr	r0, [pc, #44]	; (8002654 <HAL_I2C_MspInit+0x78>)
 8002628:	f000 fe10 	bl	800324c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_I2C_MspInit+0x74>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_I2C_MspInit+0x74>)
 8002632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_I2C_MspInit+0x74>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40005400 	.word	0x40005400
 8002650:	40021000 	.word	0x40021000
 8002654:	40010c00 	.word	0x40010c00

08002658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_SPI_MspInit+0x8c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d131      	bne.n	80026dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_SPI_MspInit+0x90>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_SPI_MspInit+0x90>)
 800267e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002682:	61d3      	str	r3, [r2, #28]
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_SPI_MspInit+0x90>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_SPI_MspInit+0x90>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_SPI_MspInit+0x90>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_SPI_MspInit+0x90>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <HAL_SPI_MspInit+0x94>)
 80026be:	f000 fdc5 	bl	800324c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4619      	mov	r1, r3
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <HAL_SPI_MspInit+0x94>)
 80026d8:	f000 fdb8 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40003800 	.word	0x40003800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010c00 	.word	0x40010c00

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d113      	bne.n	800272a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_TIM_Base_MspInit+0x44>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <HAL_TIM_Base_MspInit+0x44>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	61d3      	str	r3, [r2, #28]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_TIM_Base_MspInit+0x44>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	201c      	movs	r0, #28
 8002720:	f000 faf9 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002724:	201c      	movs	r0, #28
 8002726:	f000 fb12 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_UART_MspInit+0x15c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d132      	bne.n	80027be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002758:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <HAL_UART_MspInit+0x160>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_UART_MspInit+0x160>)
 800275e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_UART_MspInit+0x160>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_UART_MspInit+0x160>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <HAL_UART_MspInit+0x160>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_UART_MspInit+0x160>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800278c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002792:	2303      	movs	r3, #3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0318 	add.w	r3, r7, #24
 800279a:	4619      	mov	r1, r3
 800279c:	483f      	ldr	r0, [pc, #252]	; (800289c <HAL_UART_MspInit+0x164>)
 800279e:	f000 fd55 	bl	800324c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	4619      	mov	r1, r3
 80027b6:	4839      	ldr	r0, [pc, #228]	; (800289c <HAL_UART_MspInit+0x164>)
 80027b8:	f000 fd48 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027bc:	e065      	b.n	800288a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a37      	ldr	r2, [pc, #220]	; (80028a0 <HAL_UART_MspInit+0x168>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d160      	bne.n	800288a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4a32      	ldr	r2, [pc, #200]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d2:	61d3      	str	r3, [r2, #28]
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027e6:	f043 0308 	orr.w	r3, r3, #8
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_UART_MspInit+0x160>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	4619      	mov	r1, r3
 800280c:	4825      	ldr	r0, [pc, #148]	; (80028a4 <HAL_UART_MspInit+0x16c>)
 800280e:	f000 fd1d 	bl	800324c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	4619      	mov	r1, r3
 8002826:	481f      	ldr	r0, [pc, #124]	; (80028a4 <HAL_UART_MspInit+0x16c>)
 8002828:	f000 fd10 	bl	800324c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_UART_MspInit+0x170>)
 800282e:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <HAL_UART_MspInit+0x174>)
 8002830:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_UART_MspInit+0x170>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <HAL_UART_MspInit+0x170>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002852:	2220      	movs	r2, #32
 8002854:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800285e:	4812      	ldr	r0, [pc, #72]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002860:	f000 fa90 	bl	8002d84 <HAL_DMA_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_UART_MspInit+0x136>
      Error_Handler();
 800286a:	f7ff fc39 	bl	80020e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
 8002874:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_UART_MspInit+0x170>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2027      	movs	r0, #39	; 0x27
 8002880:	f000 fa49 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002884:	2027      	movs	r0, #39	; 0x27
 8002886:	f000 fa62 	bl	8002d4e <HAL_NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40013800 	.word	0x40013800
 8002898:	40021000 	.word	0x40021000
 800289c:	40010800 	.word	0x40010800
 80028a0:	40004800 	.word	0x40004800
 80028a4:	40010c00 	.word	0x40010c00
 80028a8:	20000534 	.word	0x20000534
 80028ac:	40020030 	.word	0x40020030

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <HardFault_Handler+0x4>

080028c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <MemManage_Handler+0x4>

080028c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <BusFault_Handler+0x4>

080028ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <UsageFault_Handler+0x4>

080028d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fc:	f000 f8f6 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <DMA1_Channel3_IRQHandler+0x10>)
 800290a:	f000 fb6b 	bl	8002fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000534 	.word	0x20000534

08002918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <TIM2_IRQHandler+0x10>)
 800291e:	f002 ff68 	bl	80057f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000064c 	.word	0x2000064c

0800292c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <USART3_IRQHandler+0x10>)
 8002932:	f003 fbf5 	bl	8006120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000578 	.word	0x20000578

08002940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <_sbrk+0x5c>)
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <_sbrk+0x60>)
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <_sbrk+0x64>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <_sbrk+0x68>)
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	429a      	cmp	r2, r3
 800296e:	d207      	bcs.n	8002980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002970:	f003 ffd2 	bl	8006918 <__errno>
 8002974:	4602      	mov	r2, r0
 8002976:	230c      	movs	r3, #12
 8002978:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800297e:	e009      	b.n	8002994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <_sbrk+0x64>)
 8002990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002992:	68fb      	ldr	r3, [r7, #12]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20005000 	.word	0x20005000
 80029a0:	00000400 	.word	0x00000400
 80029a4:	200004ac 	.word	0x200004ac
 80029a8:	20000698 	.word	0x20000698

080029ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <SystemInit+0x5c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <SystemInit+0x5c>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <SystemInit+0x5c>)
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4911      	ldr	r1, [pc, #68]	; (8002a08 <SystemInit+0x5c>)
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <SystemInit+0x60>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <SystemInit+0x5c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <SystemInit+0x5c>)
 80029ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <SystemInit+0x5c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SystemInit+0x5c>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <SystemInit+0x5c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <SystemInit+0x5c>)
 80029ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SystemInit+0x5c>)
 80029f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SystemInit+0x64>)
 80029fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	f8ff0000 	.word	0xf8ff0000
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a16:	e003      	b.n	8002a20 <LoopCopyDataInit>

08002a18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a1e:	3104      	adds	r1, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a20:	480a      	ldr	r0, [pc, #40]	; (8002a4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a28:	d3f6      	bcc.n	8002a18 <CopyDataInit>
  ldr r2, =_sbss
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a2c:	e002      	b.n	8002a34 <LoopFillZerobss>

08002a2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a30:	f842 3b04 	str.w	r3, [r2], #4

08002a34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a38:	d3f9      	bcc.n	8002a2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a3a:	f7ff ffb7 	bl	80029ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f003 ff71 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a42:	f7ff f8d1 	bl	8001be8 <main>
  bx lr
 8002a46:	4770      	bx	lr
  ldr r3, =_sidata
 8002a48:	080081b0 	.word	0x080081b0
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a50:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8002a54:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8002a58:	20000694 	.word	0x20000694

08002a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC1_2_IRQHandler>
	...

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_Init+0x28>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_Init+0x28>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a70:	2003      	movs	r0, #3
 8002a72:	f000 f945 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f000 f808 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7c:	f7ff fd7c 	bl	8002578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f95d 	bl	8002d6a <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac8:	f000 f925 	bl	8002d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	20000018 	.word	0x20000018
 8002ae8:	20000014 	.word	0x20000014

08002aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_IncTick+0x1c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_IncTick+0x20>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_IncTick+0x20>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	20000018 	.word	0x20000018
 8002b0c:	2000068c 	.word	0x2000068c

08002b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return uwTick;
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <HAL_GetTick+0x10>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	2000068c 	.word	0x2000068c

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_Delay+0x40>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffe0 	bl	8002b10 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000018 	.word	0x20000018

08002b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b84:	4013      	ands	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60d3      	str	r3, [r2, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0b      	blt.n	8002bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4906      	ldr	r1, [pc, #24]	; (8002c00 <__NVIC_EnableIRQ+0x34>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d301      	bcc.n	8002cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <SysTick_Config+0x40>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cda:	210f      	movs	r1, #15
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce0:	f7ff ff90 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <SysTick_Config+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <SysTick_Config+0x40>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000e010 	.word	0xe000e010

08002d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff2d 	bl	8002b68 <__NVIC_SetPriorityGrouping>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff42 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff90 	bl	8002c58 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5f 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff35 	bl	8002bcc <__NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffa2 	bl	8002cbc <SysTick_Config>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e043      	b.n	8002e22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_DMA_Init+0xa8>)
 8002da2:	4413      	add	r3, r2
 8002da4:	4a22      	ldr	r2, [pc, #136]	; (8002e30 <HAL_DMA_Init+0xac>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_DMA_Init+0xb0>)
 8002db6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002dd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	bffdfff8 	.word	0xbffdfff8
 8002e30:	cccccccd 	.word	0xcccccccd
 8002e34:	40020000 	.word	0x40020000

08002e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_Start_IT+0x20>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e04a      	b.n	8002eee <HAL_DMA_Start_IT+0xb6>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d13a      	bne.n	8002ee0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f9ae 	bl	80031f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 020e 	orr.w	r2, r2, #14
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e00f      	b.n	8002ece <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0204 	bic.w	r2, r2, #4
 8002ebc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 020a 	orr.w	r2, r2, #10
 8002ecc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e005      	b.n	8002eec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d005      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e051      	b.n	8002fbe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 020e 	bic.w	r2, r2, #14
 8002f28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_DMA_Abort_IT+0xd0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d029      	beq.n	8002f98 <HAL_DMA_Abort_IT+0xa0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <HAL_DMA_Abort_IT+0xd4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x9c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_DMA_Abort_IT+0xd8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01a      	beq.n	8002f8e <HAL_DMA_Abort_IT+0x96>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_DMA_Abort_IT+0xdc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d012      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x90>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_DMA_Abort_IT+0xe0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00a      	beq.n	8002f82 <HAL_DMA_Abort_IT+0x8a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_DMA_Abort_IT+0xe4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d102      	bne.n	8002f7c <HAL_DMA_Abort_IT+0x84>
 8002f76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f7a:	e00e      	b.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f80:	e00b      	b.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f86:	e008      	b.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8c:	e005      	b.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f92:	e002      	b.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f94:	2310      	movs	r3, #16
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_Abort_IT+0xa2>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <HAL_DMA_Abort_IT+0xe8>)
 8002f9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
    } 
  }
  return status;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40020008 	.word	0x40020008
 8002fcc:	4002001c 	.word	0x4002001c
 8002fd0:	40020030 	.word	0x40020030
 8002fd4:	40020044 	.word	0x40020044
 8002fd8:	40020058 	.word	0x40020058
 8002fdc:	4002006c 	.word	0x4002006c
 8002fe0:	40020000 	.word	0x40020000

08002fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2204      	movs	r2, #4
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d04f      	beq.n	80030ac <HAL_DMA_IRQHandler+0xc8>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04a      	beq.n	80030ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a66      	ldr	r2, [pc, #408]	; (80031d4 <HAL_DMA_IRQHandler+0x1f0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d029      	beq.n	8003092 <HAL_DMA_IRQHandler+0xae>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a65      	ldr	r2, [pc, #404]	; (80031d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_IRQHandler+0xaa>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_DMA_IRQHandler+0x1f8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01a      	beq.n	8003088 <HAL_DMA_IRQHandler+0xa4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a62      	ldr	r2, [pc, #392]	; (80031e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d012      	beq.n	8003082 <HAL_DMA_IRQHandler+0x9e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a60      	ldr	r2, [pc, #384]	; (80031e4 <HAL_DMA_IRQHandler+0x200>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00a      	beq.n	800307c <HAL_DMA_IRQHandler+0x98>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5f      	ldr	r2, [pc, #380]	; (80031e8 <HAL_DMA_IRQHandler+0x204>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d102      	bne.n	8003076 <HAL_DMA_IRQHandler+0x92>
 8003070:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003074:	e00e      	b.n	8003094 <HAL_DMA_IRQHandler+0xb0>
 8003076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800307a:	e00b      	b.n	8003094 <HAL_DMA_IRQHandler+0xb0>
 800307c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003080:	e008      	b.n	8003094 <HAL_DMA_IRQHandler+0xb0>
 8003082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003086:	e005      	b.n	8003094 <HAL_DMA_IRQHandler+0xb0>
 8003088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308c:	e002      	b.n	8003094 <HAL_DMA_IRQHandler+0xb0>
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	e000      	b.n	8003094 <HAL_DMA_IRQHandler+0xb0>
 8003092:	2304      	movs	r3, #4
 8003094:	4a55      	ldr	r2, [pc, #340]	; (80031ec <HAL_DMA_IRQHandler+0x208>)
 8003096:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8094 	beq.w	80031ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030aa:	e08e      	b.n	80031ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2202      	movs	r2, #2
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d056      	beq.n	800316a <HAL_DMA_IRQHandler+0x186>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d051      	beq.n	800316a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 020a 	bic.w	r2, r2, #10
 80030e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_DMA_IRQHandler+0x1f0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d029      	beq.n	800314a <HAL_DMA_IRQHandler+0x166>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <HAL_DMA_IRQHandler+0x1f4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <HAL_DMA_IRQHandler+0x162>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a35      	ldr	r2, [pc, #212]	; (80031dc <HAL_DMA_IRQHandler+0x1f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01a      	beq.n	8003140 <HAL_DMA_IRQHandler+0x15c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d012      	beq.n	800313a <HAL_DMA_IRQHandler+0x156>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <HAL_DMA_IRQHandler+0x200>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00a      	beq.n	8003134 <HAL_DMA_IRQHandler+0x150>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a31      	ldr	r2, [pc, #196]	; (80031e8 <HAL_DMA_IRQHandler+0x204>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d102      	bne.n	800312e <HAL_DMA_IRQHandler+0x14a>
 8003128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800312c:	e00e      	b.n	800314c <HAL_DMA_IRQHandler+0x168>
 800312e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003132:	e00b      	b.n	800314c <HAL_DMA_IRQHandler+0x168>
 8003134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003138:	e008      	b.n	800314c <HAL_DMA_IRQHandler+0x168>
 800313a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800313e:	e005      	b.n	800314c <HAL_DMA_IRQHandler+0x168>
 8003140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003144:	e002      	b.n	800314c <HAL_DMA_IRQHandler+0x168>
 8003146:	2320      	movs	r3, #32
 8003148:	e000      	b.n	800314c <HAL_DMA_IRQHandler+0x168>
 800314a:	2302      	movs	r3, #2
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <HAL_DMA_IRQHandler+0x208>)
 800314e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d034      	beq.n	80031ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003168:	e02f      	b.n	80031ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2208      	movs	r2, #8
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d028      	beq.n	80031cc <HAL_DMA_IRQHandler+0x1e8>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d023      	beq.n	80031cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020e 	bic.w	r2, r2, #14
 8003192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	2101      	movs	r1, #1
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    }
  }
  return;
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
}
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40020008 	.word	0x40020008
 80031d8:	4002001c 	.word	0x4002001c
 80031dc:	40020030 	.word	0x40020030
 80031e0:	40020044 	.word	0x40020044
 80031e4:	40020058 	.word	0x40020058
 80031e8:	4002006c 	.word	0x4002006c
 80031ec:	40020000 	.word	0x40020000

080031f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b10      	cmp	r3, #16
 800321c:	d108      	bne.n	8003230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800322e:	e007      	b.n	8003240 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
	...

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b08b      	sub	sp, #44	; 0x2c
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325e:	e127      	b.n	80034b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003260:	2201      	movs	r2, #1
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	429a      	cmp	r2, r3
 800327a:	f040 8116 	bne.w	80034aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b12      	cmp	r3, #18
 8003284:	d034      	beq.n	80032f0 <HAL_GPIO_Init+0xa4>
 8003286:	2b12      	cmp	r3, #18
 8003288:	d80d      	bhi.n	80032a6 <HAL_GPIO_Init+0x5a>
 800328a:	2b02      	cmp	r3, #2
 800328c:	d02b      	beq.n	80032e6 <HAL_GPIO_Init+0x9a>
 800328e:	2b02      	cmp	r3, #2
 8003290:	d804      	bhi.n	800329c <HAL_GPIO_Init+0x50>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d031      	beq.n	80032fa <HAL_GPIO_Init+0xae>
 8003296:	2b01      	cmp	r3, #1
 8003298:	d01c      	beq.n	80032d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800329a:	e048      	b.n	800332e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800329c:	2b03      	cmp	r3, #3
 800329e:	d043      	beq.n	8003328 <HAL_GPIO_Init+0xdc>
 80032a0:	2b11      	cmp	r3, #17
 80032a2:	d01b      	beq.n	80032dc <HAL_GPIO_Init+0x90>
          break;
 80032a4:	e043      	b.n	800332e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032a6:	4a89      	ldr	r2, [pc, #548]	; (80034cc <HAL_GPIO_Init+0x280>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d026      	beq.n	80032fa <HAL_GPIO_Init+0xae>
 80032ac:	4a87      	ldr	r2, [pc, #540]	; (80034cc <HAL_GPIO_Init+0x280>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d806      	bhi.n	80032c0 <HAL_GPIO_Init+0x74>
 80032b2:	4a87      	ldr	r2, [pc, #540]	; (80034d0 <HAL_GPIO_Init+0x284>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d020      	beq.n	80032fa <HAL_GPIO_Init+0xae>
 80032b8:	4a86      	ldr	r2, [pc, #536]	; (80034d4 <HAL_GPIO_Init+0x288>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01d      	beq.n	80032fa <HAL_GPIO_Init+0xae>
          break;
 80032be:	e036      	b.n	800332e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032c0:	4a85      	ldr	r2, [pc, #532]	; (80034d8 <HAL_GPIO_Init+0x28c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_GPIO_Init+0xae>
 80032c6:	4a85      	ldr	r2, [pc, #532]	; (80034dc <HAL_GPIO_Init+0x290>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d016      	beq.n	80032fa <HAL_GPIO_Init+0xae>
 80032cc:	4a84      	ldr	r2, [pc, #528]	; (80034e0 <HAL_GPIO_Init+0x294>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0xae>
          break;
 80032d2:	e02c      	b.n	800332e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	623b      	str	r3, [r7, #32]
          break;
 80032da:	e028      	b.n	800332e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	3304      	adds	r3, #4
 80032e2:	623b      	str	r3, [r7, #32]
          break;
 80032e4:	e023      	b.n	800332e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	3308      	adds	r3, #8
 80032ec:	623b      	str	r3, [r7, #32]
          break;
 80032ee:	e01e      	b.n	800332e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	330c      	adds	r3, #12
 80032f6:	623b      	str	r3, [r7, #32]
          break;
 80032f8:	e019      	b.n	800332e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003302:	2304      	movs	r3, #4
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e012      	b.n	800332e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003310:	2308      	movs	r3, #8
 8003312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	611a      	str	r2, [r3, #16]
          break;
 800331a:	e008      	b.n	800332e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800331c:	2308      	movs	r3, #8
 800331e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	615a      	str	r2, [r3, #20]
          break;
 8003326:	e002      	b.n	800332e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
          break;
 800332c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2bff      	cmp	r3, #255	; 0xff
 8003332:	d801      	bhi.n	8003338 <HAL_GPIO_Init+0xec>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	e001      	b.n	800333c <HAL_GPIO_Init+0xf0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2bff      	cmp	r3, #255	; 0xff
 8003342:	d802      	bhi.n	800334a <HAL_GPIO_Init+0xfe>
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x104>
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3b08      	subs	r3, #8
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	210f      	movs	r1, #15
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	401a      	ands	r2, r3
 8003362:	6a39      	ldr	r1, [r7, #32]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	431a      	orrs	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8096 	beq.w	80034aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800337e:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_GPIO_Init+0x298>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_GPIO_Init+0x298>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6193      	str	r3, [r2, #24]
 800338a:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <HAL_GPIO_Init+0x298>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003396:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_GPIO_Init+0x29c>)
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <HAL_GPIO_Init+0x2a0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_GPIO_Init+0x19e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4a      	ldr	r2, [pc, #296]	; (80034f0 <HAL_GPIO_Init+0x2a4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00d      	beq.n	80033e6 <HAL_GPIO_Init+0x19a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a49      	ldr	r2, [pc, #292]	; (80034f4 <HAL_GPIO_Init+0x2a8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <HAL_GPIO_Init+0x196>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a48      	ldr	r2, [pc, #288]	; (80034f8 <HAL_GPIO_Init+0x2ac>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_GPIO_Init+0x192>
 80033da:	2303      	movs	r3, #3
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x1a0>
 80033de:	2304      	movs	r3, #4
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x1a0>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x1a0>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x1a0>
 80033ea:	2300      	movs	r3, #0
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033fc:	493a      	ldr	r1, [pc, #232]	; (80034e8 <HAL_GPIO_Init+0x29c>)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003416:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4938      	ldr	r1, [pc, #224]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
 8003422:	e006      	b.n	8003432 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	43db      	mvns	r3, r3
 800342c:	4933      	ldr	r1, [pc, #204]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 800342e:	4013      	ands	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800343e:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	492e      	ldr	r1, [pc, #184]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
 800344a:	e006      	b.n	800345a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	43db      	mvns	r3, r3
 8003454:	4929      	ldr	r1, [pc, #164]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003456:	4013      	ands	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	4924      	ldr	r1, [pc, #144]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	43db      	mvns	r3, r3
 800347c:	491f      	ldr	r1, [pc, #124]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 800347e:	4013      	ands	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	491a      	ldr	r1, [pc, #104]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
 800349a:	e006      	b.n	80034aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4915      	ldr	r1, [pc, #84]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f47f aed0 	bne.w	8003260 <HAL_GPIO_Init+0x14>
  }
}
 80034c0:	bf00      	nop
 80034c2:	372c      	adds	r7, #44	; 0x2c
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	10210000 	.word	0x10210000
 80034d0:	10110000 	.word	0x10110000
 80034d4:	10120000 	.word	0x10120000
 80034d8:	10310000 	.word	0x10310000
 80034dc:	10320000 	.word	0x10320000
 80034e0:	10220000 	.word	0x10220000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010800 	.word	0x40010800
 80034f0:	40010c00 	.word	0x40010c00
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
 800350c:	4613      	mov	r3, r2
 800350e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003510:	787b      	ldrb	r3, [r7, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800351c:	e003      	b.n	8003526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	041a      	lsls	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	611a      	str	r2, [r3, #16]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e11f      	b.n	8003782 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff f840 	bl	80025dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003594:	f002 f838 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a7b      	ldr	r2, [pc, #492]	; (800378c <HAL_I2C_Init+0x25c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d807      	bhi.n	80035b4 <HAL_I2C_Init+0x84>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a7a      	ldr	r2, [pc, #488]	; (8003790 <HAL_I2C_Init+0x260>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bf94      	ite	ls
 80035ac:	2301      	movls	r3, #1
 80035ae:	2300      	movhi	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e006      	b.n	80035c2 <HAL_I2C_Init+0x92>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_I2C_Init+0x264>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0db      	b.n	8003782 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a72      	ldr	r2, [pc, #456]	; (8003798 <HAL_I2C_Init+0x268>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a64      	ldr	r2, [pc, #400]	; (800378c <HAL_I2C_Init+0x25c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d802      	bhi.n	8003604 <HAL_I2C_Init+0xd4>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3301      	adds	r3, #1
 8003602:	e009      	b.n	8003618 <HAL_I2C_Init+0xe8>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_I2C_Init+0x26c>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	3301      	adds	r3, #1
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	430b      	orrs	r3, r1
 800361e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800362a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4956      	ldr	r1, [pc, #344]	; (800378c <HAL_I2C_Init+0x25c>)
 8003634:	428b      	cmp	r3, r1
 8003636:	d80d      	bhi.n	8003654 <HAL_I2C_Init+0x124>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e59      	subs	r1, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fbb1 f3f3 	udiv	r3, r1, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b04      	cmp	r3, #4
 800364e:	bf38      	it	cc
 8003650:	2304      	movcc	r3, #4
 8003652:	e04f      	b.n	80036f4 <HAL_I2C_Init+0x1c4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d111      	bne.n	8003680 <HAL_I2C_Init+0x150>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Init+0x176>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	0099      	lsls	r1, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x17e>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e022      	b.n	80036f4 <HAL_I2C_Init+0x1c4>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_I2C_Init+0x1a4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e58      	subs	r0, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	440b      	add	r3, r1
 80036c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Init+0x1c4>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6809      	ldr	r1, [r1, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6911      	ldr	r1, [r2, #16]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	000186a0 	.word	0x000186a0
 8003790:	001e847f 	.word	0x001e847f
 8003794:	003d08ff 	.word	0x003d08ff
 8003798:	431bde83 	.word	0x431bde83
 800379c:	10624dd3 	.word	0x10624dd3

080037a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	461a      	mov	r2, r3
 80037ac:	460b      	mov	r3, r1
 80037ae:	817b      	strh	r3, [r7, #10]
 80037b0:	4613      	mov	r3, r2
 80037b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff f9ac 	bl	8002b10 <HAL_GetTick>
 80037b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	f040 80e0 	bne.w	8003988 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2319      	movs	r3, #25
 80037ce:	2201      	movs	r2, #1
 80037d0:	4970      	ldr	r1, [pc, #448]	; (8003994 <HAL_I2C_Master_Transmit+0x1f4>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f001 f966 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
 80037e0:	e0d3      	b.n	800398a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2C_Master_Transmit+0x50>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0cc      	b.n	800398a <HAL_I2C_Master_Transmit+0x1ea>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d007      	beq.n	8003816 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003824:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2210      	movs	r2, #16
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	893a      	ldrh	r2, [r7, #8]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_I2C_Master_Transmit+0x1f8>)
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fe52 	bl	8004508 <I2C_MasterRequestWrite>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e08d      	b.n	800398a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003884:	e066      	b.n	8003954 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f001 f9e0 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d11b      	bne.n	8003928 <HAL_I2C_Master_Transmit+0x188>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d017      	beq.n	8003928 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6a39      	ldr	r1, [r7, #32]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f001 f9d0 	bl	8004cd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b04      	cmp	r3, #4
 800393e:	d107      	bne.n	8003950 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e01a      	b.n	800398a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	d194      	bne.n	8003886 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	00100002 	.word	0x00100002
 8003998:	ffff0000 	.word	0xffff0000

0800399c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	461a      	mov	r2, r3
 80039a8:	460b      	mov	r3, r1
 80039aa:	817b      	strh	r3, [r7, #10]
 80039ac:	4613      	mov	r3, r2
 80039ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7ff f8ac 	bl	8002b10 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	f040 8238 	bne.w	8003e38 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2319      	movs	r3, #25
 80039ce:	2201      	movs	r2, #1
 80039d0:	497e      	ldr	r1, [pc, #504]	; (8003bcc <HAL_I2C_Master_Receive+0x230>)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f001 f866 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	e22b      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_I2C_Master_Receive+0x54>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e224      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d007      	beq.n	8003a16 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2222      	movs	r2, #34	; 0x22
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2210      	movs	r2, #16
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	893a      	ldrh	r2, [r7, #8]
 8003a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <HAL_I2C_Master_Receive+0x234>)
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a58:	8979      	ldrh	r1, [r7, #10]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fdd4 	bl	800460c <I2C_MasterRequestRead>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1e5      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d113      	bne.n	8003a9e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e1b9      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d11d      	bne.n	8003ae2 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ade:	b662      	cpsie	i
 8003ae0:	e197      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d11d      	bne.n	8003b26 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003afa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b22:	b662      	cpsie	i
 8003b24:	e175      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b4c:	e161      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	f200 811a 	bhi.w	8003d8c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d123      	bne.n	8003ba8 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f001 f8f5 	bl	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e162      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba6:	e134      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d150      	bne.n	8003c52 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4906      	ldr	r1, [pc, #24]	; (8003bd4 <HAL_I2C_Master_Receive+0x238>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 ff72 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e137      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
 8003bca:	bf00      	nop
 8003bcc:	00100002 	.word	0x00100002
 8003bd0:	ffff0000 	.word	0xffff0000
 8003bd4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c1c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c50:	e0df      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	2200      	movs	r2, #0
 8003c5a:	497a      	ldr	r1, [pc, #488]	; (8003e44 <HAL_I2C_Master_Receive+0x4a8>)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 ff21 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0e6      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cb0:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_I2C_Master_Receive+0x4ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	4a65      	ldr	r2, [pc, #404]	; (8003e4c <HAL_I2C_Master_Receive+0x4b0>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	0a1a      	lsrs	r2, r3, #8
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00da      	lsls	r2, r3, #3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d117      	bne.n	8003d06 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e099      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d1da      	bne.n	8003cca <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d56:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d8a:	e042      	b.n	8003e12 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 ffdf 	bl	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e04c      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d118      	bne.n	8003e12 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f47f ae99 	bne.w	8003b4e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	00010004 	.word	0x00010004
 8003e48:	20000010 	.word	0x20000010
 8003e4c:	14f8b589 	.word	0x14f8b589

08003e50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	460b      	mov	r3, r1
 8003e64:	813b      	strh	r3, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e6a:	f7fe fe51 	bl	8002b10 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	f040 80d9 	bne.w	8004030 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2319      	movs	r3, #25
 8003e84:	2201      	movs	r2, #1
 8003e86:	496d      	ldr	r1, [pc, #436]	; (800403c <HAL_I2C_Mem_Write+0x1ec>)
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fe0b 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
 8003e96:	e0cc      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2C_Mem_Write+0x56>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0c5      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d007      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2221      	movs	r2, #33	; 0x21
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2240      	movs	r2, #64	; 0x40
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	; (8004040 <HAL_I2C_Mem_Write+0x1f0>)
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f0e:	88f8      	ldrh	r0, [r7, #6]
 8003f10:	893a      	ldrh	r2, [r7, #8]
 8003f12:	8979      	ldrh	r1, [r7, #10]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fc42 	bl	80047a8 <I2C_RequestMemoryWrite>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d052      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e081      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fe8c 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d107      	bne.n	8003f56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06b      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d11b      	bne.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d017      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1aa      	bne.n	8003f2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fe78 	bl	8004cd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e016      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	00100002 	.word	0x00100002
 8004040:	ffff0000 	.word	0xffff0000

08004044 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	; 0x30
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004062:	f7fe fd55 	bl	8002b10 <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b20      	cmp	r3, #32
 8004072:	f040 823d 	bne.w	80044f0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2319      	movs	r3, #25
 800407c:	2201      	movs	r2, #1
 800407e:	4981      	ldr	r1, [pc, #516]	; (8004284 <HAL_I2C_Mem_Read+0x240>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fd0f 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	e230      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2C_Mem_Read+0x5a>
 800409a:	2302      	movs	r3, #2
 800409c:	e229      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d007      	beq.n	80040c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2240      	movs	r2, #64	; 0x40
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a61      	ldr	r2, [pc, #388]	; (8004288 <HAL_I2C_Mem_Read+0x244>)
 8004104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004106:	88f8      	ldrh	r0, [r7, #6]
 8004108:	893a      	ldrh	r2, [r7, #8]
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4603      	mov	r3, r0
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fbdc 	bl	80048d4 <I2C_RequestMemoryRead>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1e5      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d113      	bne.n	8004156 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e1b9      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11d      	bne.n	800419a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800416e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004194:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004196:	b662      	cpsie	i
 8004198:	e197      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d11d      	bne.n	80041de <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041da:	b662      	cpsie	i
 80041dc:	e175      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004204:	e161      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b03      	cmp	r3, #3
 800420c:	f200 811a 	bhi.w	8004444 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b01      	cmp	r3, #1
 8004216:	d123      	bne.n	8004260 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fd99 	bl	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e162      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800425e:	e134      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b02      	cmp	r3, #2
 8004266:	d150      	bne.n	800430a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	2200      	movs	r2, #0
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <HAL_I2C_Mem_Read+0x248>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fc16 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e137      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
 8004282:	bf00      	nop
 8004284:	00100002 	.word	0x00100002
 8004288:	ffff0000 	.word	0xffff0000
 800428c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004290:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042d4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004308:	e0df      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2200      	movs	r2, #0
 8004312:	497a      	ldr	r1, [pc, #488]	; (80044fc <HAL_I2C_Mem_Read+0x4b8>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fbc5 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0e6      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004334:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004368:	4b65      	ldr	r3, [pc, #404]	; (8004500 <HAL_I2C_Mem_Read+0x4bc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_I2C_Mem_Read+0x4c0>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0a1a      	lsrs	r2, r3, #8
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	00da      	lsls	r2, r3, #3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	3b01      	subs	r3, #1
 8004386:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d117      	bne.n	80043be <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043b0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e099      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d1da      	bne.n	8004382 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004442:	e042      	b.n	80044ca <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fc83 	bl	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e04c      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b04      	cmp	r3, #4
 8004496:	d118      	bne.n	80044ca <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f47f ae99 	bne.w	8004206 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	00010004 	.word	0x00010004
 8004500:	20000010 	.word	0x20000010
 8004504:	14f8b589 	.word	0x14f8b589

08004508 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	460b      	mov	r3, r1
 8004516:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d006      	beq.n	8004532 <I2C_MasterRequestWrite+0x2a>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d003      	beq.n	8004532 <I2C_MasterRequestWrite+0x2a>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004530:	d108      	bne.n	8004544 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e00b      	b.n	800455c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b12      	cmp	r3, #18
 800454a:	d107      	bne.n	800455c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fa9b 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	d103      	bne.n	800458c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e035      	b.n	80045fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004598:	d108      	bne.n	80045ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800459a:	897b      	ldrh	r3, [r7, #10]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	e01b      	b.n	80045e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	11db      	asrs	r3, r3, #7
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0306 	and.w	r3, r3, #6
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f063 030f 	orn	r3, r3, #15
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	490e      	ldr	r1, [pc, #56]	; (8004604 <I2C_MasterRequestWrite+0xfc>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fac1 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e010      	b.n	80045fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4907      	ldr	r1, [pc, #28]	; (8004608 <I2C_MasterRequestWrite+0x100>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fab1 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	00010008 	.word	0x00010008
 8004608:	00010002 	.word	0x00010002

0800460c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	460b      	mov	r3, r1
 800461a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d006      	beq.n	8004646 <I2C_MasterRequestRead+0x3a>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d003      	beq.n	8004646 <I2C_MasterRequestRead+0x3a>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004644:	d108      	bne.n	8004658 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e00b      	b.n	8004670 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	2b11      	cmp	r3, #17
 800465e:	d107      	bne.n	8004670 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fa11 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	d103      	bne.n	80046a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e079      	b.n	8004798 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ac:	d108      	bne.n	80046c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046ae:	897b      	ldrh	r3, [r7, #10]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	611a      	str	r2, [r3, #16]
 80046be:	e05f      	b.n	8004780 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046c0:	897b      	ldrh	r3, [r7, #10]
 80046c2:	11db      	asrs	r3, r3, #7
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0306 	and.w	r3, r3, #6
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f063 030f 	orn	r3, r3, #15
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4930      	ldr	r1, [pc, #192]	; (80047a0 <I2C_MasterRequestRead+0x194>)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fa37 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e054      	b.n	8004798 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4929      	ldr	r1, [pc, #164]	; (80047a4 <I2C_MasterRequestRead+0x198>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fa27 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e044      	b.n	8004798 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004732:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f9af 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475a:	d103      	bne.n	8004764 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e017      	b.n	8004798 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	11db      	asrs	r3, r3, #7
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f063 030e 	orn	r3, r3, #14
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4907      	ldr	r1, [pc, #28]	; (80047a4 <I2C_MasterRequestRead+0x198>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f9e3 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	00010008 	.word	0x00010008
 80047a4:	00010002 	.word	0x00010002

080047a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	460b      	mov	r3, r1
 80047bc:	813b      	strh	r3, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	2200      	movs	r2, #0
 80047da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f960 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f8:	d103      	bne.n	8004802 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e05f      	b.n	80048c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004806:	897b      	ldrh	r3, [r7, #10]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004814:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	6a3a      	ldr	r2, [r7, #32]
 800481a:	492d      	ldr	r1, [pc, #180]	; (80048d0 <I2C_RequestMemoryWrite+0x128>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f998 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e04c      	b.n	80048c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	6a39      	ldr	r1, [r7, #32]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fa02 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b04      	cmp	r3, #4
 8004858:	d107      	bne.n	800486a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004868:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e02b      	b.n	80048c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]
 800487e:	e021      	b.n	80048c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004880:	893b      	ldrh	r3, [r7, #8]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	b29b      	uxth	r3, r3
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	6a39      	ldr	r1, [r7, #32]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f9dc 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d107      	bne.n	80048b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e005      	b.n	80048c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ba:	893b      	ldrh	r3, [r7, #8]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	00010002 	.word	0x00010002

080048d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	817b      	strh	r3, [r7, #10]
 80048e6:	460b      	mov	r3, r1
 80048e8:	813b      	strh	r3, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2200      	movs	r2, #0
 8004916:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8c2 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	d103      	bne.n	800493e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0aa      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004950:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	4952      	ldr	r1, [pc, #328]	; (8004aa0 <I2C_RequestMemoryRead+0x1cc>)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f8fa 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e097      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	6a39      	ldr	r1, [r7, #32]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f964 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b04      	cmp	r3, #4
 8004994:	d107      	bne.n	80049a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e076      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b0:	893b      	ldrh	r3, [r7, #8]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	611a      	str	r2, [r3, #16]
 80049ba:	e021      	b.n	8004a00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049bc:	893b      	ldrh	r3, [r7, #8]
 80049be:	0a1b      	lsrs	r3, r3, #8
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	6a39      	ldr	r1, [r7, #32]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f93e 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d107      	bne.n	80049f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e050      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049f6:	893b      	ldrh	r3, [r7, #8]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	6a39      	ldr	r1, [r7, #32]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f923 	bl	8004c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d107      	bne.n	8004a28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e035      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f82b 	bl	8004aa4 <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00d      	beq.n	8004a70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d103      	bne.n	8004a6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e013      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a70:	897b      	ldrh	r3, [r7, #10]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	6a3a      	ldr	r2, [r7, #32]
 8004a84:	4906      	ldr	r1, [pc, #24]	; (8004aa0 <I2C_RequestMemoryRead+0x1cc>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f863 	bl	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	00010002 	.word	0x00010002

08004aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ab4:	e025      	b.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abc:	d021      	beq.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fe f827 	bl	8002b10 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e023      	b.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10d      	bne.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	43da      	mvns	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	e00c      	b.n	8004b42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d0b6      	beq.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b60:	e051      	b.n	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b70:	d123      	bne.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e046      	b.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc0:	d021      	beq.n	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fd ffa5 	bl	8002b10 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e020      	b.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10c      	bne.n	8004c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e00b      	b.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	43da      	mvns	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d18d      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c5c:	e02d      	b.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f8ce 	bl	8004e00 <I2C_IsAcknowledgeFailed>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e02d      	b.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c74:	d021      	beq.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fd ff4b 	bl	8002b10 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0220 	orr.w	r2, r3, #32
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e007      	b.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b80      	cmp	r3, #128	; 0x80
 8004cc6:	d1ca      	bne.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cde:	e02d      	b.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f88d 	bl	8004e00 <I2C_IsAcknowledgeFailed>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e02d      	b.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf6:	d021      	beq.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf8:	f7fd ff0a 	bl	8002b10 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d116      	bne.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d1ca      	bne.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d60:	e042      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d119      	bne.n	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0210 	mvn.w	r2, #16
 8004d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e029      	b.n	8004df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da4:	f7fd feb4 	bl	8002b10 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d302      	bcc.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d116      	bne.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f043 0220 	orr.w	r2, r3, #32
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e007      	b.n	8004df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d1b5      	bne.n	8004d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d11b      	bne.n	8004e50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f043 0204 	orr.w	r2, r3, #4
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e26c      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8087 	beq.w	8004f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e7c:	4b92      	ldr	r3, [pc, #584]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d00c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e88:	4b8f      	ldr	r3, [pc, #572]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d112      	bne.n	8004eba <HAL_RCC_OscConfig+0x5e>
 8004e94:	4b8c      	ldr	r3, [pc, #560]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d06c      	beq.n	8004f88 <HAL_RCC_OscConfig+0x12c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d168      	bne.n	8004f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e246      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x76>
 8004ec4:	4b80      	ldr	r3, [pc, #512]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a7f      	ldr	r2, [pc, #508]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e02e      	b.n	8004f30 <HAL_RCC_OscConfig+0xd4>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x98>
 8004eda:	4b7b      	ldr	r3, [pc, #492]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7a      	ldr	r2, [pc, #488]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b78      	ldr	r3, [pc, #480]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a77      	ldr	r2, [pc, #476]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e01d      	b.n	8004f30 <HAL_RCC_OscConfig+0xd4>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0xbc>
 8004efe:	4b72      	ldr	r3, [pc, #456]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a71      	ldr	r2, [pc, #452]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b6f      	ldr	r3, [pc, #444]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6e      	ldr	r2, [pc, #440]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0xd4>
 8004f18:	4b6b      	ldr	r3, [pc, #428]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6a      	ldr	r2, [pc, #424]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a67      	ldr	r2, [pc, #412]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fd fdea 	bl	8002b10 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fd fde6 	bl	8002b10 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e1fa      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b5d      	ldr	r3, [pc, #372]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0xe4>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fd fdd6 	bl	8002b10 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fd fdd2 	bl	8002b10 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e1e6      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	4b53      	ldr	r3, [pc, #332]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x10c>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d063      	beq.n	800505e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f96:	4b4c      	ldr	r3, [pc, #304]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fa2:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d11c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x18c>
 8004fae:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x176>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e1ba      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b3d      	ldr	r3, [pc, #244]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4939      	ldr	r1, [pc, #228]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	e03a      	b.n	800505e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fd fd8b 	bl	8002b10 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fd fd87 	bl	8002b10 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e19b      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	4b2d      	ldr	r3, [pc, #180]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4927      	ldr	r1, [pc, #156]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	e015      	b.n	800505e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b26      	ldr	r3, [pc, #152]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fd fd6a 	bl	8002b10 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005040:	f7fd fd66 	bl	8002b10 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e17a      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03a      	beq.n	80050e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d019      	beq.n	80050a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <HAL_RCC_OscConfig+0x274>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005078:	f7fd fd4a 	bl	8002b10 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005080:	f7fd fd46 	bl	8002b10 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e15a      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800509e:	2001      	movs	r0, #1
 80050a0:	f000 fada 	bl	8005658 <RCC_Delay>
 80050a4:	e01c      	b.n	80050e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <HAL_RCC_OscConfig+0x274>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ac:	f7fd fd30 	bl	8002b10 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b2:	e00f      	b.n	80050d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b4:	f7fd fd2c 	bl	8002b10 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d908      	bls.n	80050d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e140      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	42420000 	.word	0x42420000
 80050d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	4b9e      	ldr	r3, [pc, #632]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e9      	bne.n	80050b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a6 	beq.w	800523a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b97      	ldr	r3, [pc, #604]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4b94      	ldr	r3, [pc, #592]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	4a93      	ldr	r2, [pc, #588]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	61d3      	str	r3, [r2, #28]
 800510a:	4b91      	ldr	r3, [pc, #580]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b8e      	ldr	r3, [pc, #568]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005126:	4b8b      	ldr	r3, [pc, #556]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a8a      	ldr	r2, [pc, #552]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fd fced 	bl	8002b10 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fd fce9 	bl	8002b10 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	; 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0fd      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b81      	ldr	r3, [pc, #516]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x312>
 8005160:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4a7a      	ldr	r2, [pc, #488]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6213      	str	r3, [r2, #32]
 800516c:	e02d      	b.n	80051ca <HAL_RCC_OscConfig+0x36e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x334>
 8005176:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	4a75      	ldr	r2, [pc, #468]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6213      	str	r3, [r2, #32]
 8005182:	4b73      	ldr	r3, [pc, #460]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4a72      	ldr	r2, [pc, #456]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	6213      	str	r3, [r2, #32]
 800518e:	e01c      	b.n	80051ca <HAL_RCC_OscConfig+0x36e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b05      	cmp	r3, #5
 8005196:	d10c      	bne.n	80051b2 <HAL_RCC_OscConfig+0x356>
 8005198:	4b6d      	ldr	r3, [pc, #436]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	4a6c      	ldr	r2, [pc, #432]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800519e:	f043 0304 	orr.w	r3, r3, #4
 80051a2:	6213      	str	r3, [r2, #32]
 80051a4:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	4a69      	ldr	r2, [pc, #420]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6213      	str	r3, [r2, #32]
 80051b0:	e00b      	b.n	80051ca <HAL_RCC_OscConfig+0x36e>
 80051b2:	4b67      	ldr	r3, [pc, #412]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4a66      	ldr	r2, [pc, #408]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6213      	str	r3, [r2, #32]
 80051be:	4b64      	ldr	r3, [pc, #400]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	4a63      	ldr	r2, [pc, #396]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7fd fc9d 	bl	8002b10 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fd fc99 	bl	8002b10 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0ab      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f0:	4b57      	ldr	r3, [pc, #348]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ee      	beq.n	80051da <HAL_RCC_OscConfig+0x37e>
 80051fc:	e014      	b.n	8005228 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7fd fc87 	bl	8002b10 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fd fc83 	bl	8002b10 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e095      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521c:	4b4c      	ldr	r3, [pc, #304]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ee      	bne.n	8005206 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522e:	4b48      	ldr	r3, [pc, #288]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4a47      	ldr	r2, [pc, #284]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005238:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8081 	beq.w	8005346 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005244:	4b42      	ldr	r3, [pc, #264]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	2b08      	cmp	r3, #8
 800524e:	d061      	beq.n	8005314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d146      	bne.n	80052e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005258:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <HAL_RCC_OscConfig+0x4fc>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525e:	f7fd fc57 	bl	8002b10 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005266:	f7fd fc53 	bl	8002b10 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e067      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f0      	bne.n	8005266 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d108      	bne.n	80052a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800528e:	4b30      	ldr	r3, [pc, #192]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	492d      	ldr	r1, [pc, #180]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a0:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a19      	ldr	r1, [r3, #32]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	430b      	orrs	r3, r1
 80052b2:	4927      	ldr	r1, [pc, #156]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b8:	4b27      	ldr	r3, [pc, #156]	; (8005358 <HAL_RCC_OscConfig+0x4fc>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052be:	f7fd fc27 	bl	8002b10 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fd fc23 	bl	8002b10 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e037      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x46a>
 80052e4:	e02f      	b.n	8005346 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <HAL_RCC_OscConfig+0x4fc>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fd fc10 	bl	8002b10 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fd fc0c 	bl	8002b10 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e020      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x498>
 8005312:	e018      	b.n	8005346 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e013      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_OscConfig+0x4f4>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	429a      	cmp	r2, r3
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d001      	beq.n	8005346 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000
 8005354:	40007000 	.word	0x40007000
 8005358:	42420060 	.word	0x42420060

0800535c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0d0      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b6a      	ldr	r3, [pc, #424]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b67      	ldr	r3, [pc, #412]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 0207 	bic.w	r2, r3, #7
 8005386:	4965      	ldr	r1, [pc, #404]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b63      	ldr	r3, [pc, #396]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0b8      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b8:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4a58      	ldr	r2, [pc, #352]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d0:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a52      	ldr	r2, [pc, #328]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b50      	ldr	r3, [pc, #320]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	494d      	ldr	r1, [pc, #308]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d040      	beq.n	800547c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d115      	bne.n	800543a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e073      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e06b      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543a:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f023 0203 	bic.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4936      	ldr	r1, [pc, #216]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800544c:	f7fd fb60 	bl	8002b10 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	e00a      	b.n	800546a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005454:	f7fd fb5c 	bl	8002b10 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e053      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 020c 	and.w	r2, r3, #12
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	429a      	cmp	r2, r3
 800547a:	d1eb      	bne.n	8005454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800547c:	4b27      	ldr	r3, [pc, #156]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d210      	bcs.n	80054ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b24      	ldr	r3, [pc, #144]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 0207 	bic.w	r2, r3, #7
 8005492:	4922      	ldr	r1, [pc, #136]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e032      	b.n	8005512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b8:	4b19      	ldr	r3, [pc, #100]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4916      	ldr	r1, [pc, #88]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054d6:	4b12      	ldr	r3, [pc, #72]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	490e      	ldr	r1, [pc, #56]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ea:	f000 f821 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80054ee:	4601      	mov	r1, r0
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	5cd3      	ldrb	r3, [r2, r3]
 80054fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <HAL_RCC_ClockConfig+0x1cc>)
 8005504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <HAL_RCC_ClockConfig+0x1d0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fd fabe 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40022000 	.word	0x40022000
 8005520:	40021000 	.word	0x40021000
 8005524:	0800815c 	.word	0x0800815c
 8005528:	20000010 	.word	0x20000010
 800552c:	20000014 	.word	0x20000014

08005530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005530:	b490      	push	{r4, r7}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005536:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005538:	1d3c      	adds	r4, r7, #4
 800553a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800553c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800555a:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b04      	cmp	r3, #4
 8005568:	d002      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x40>
 800556a:	2b08      	cmp	r3, #8
 800556c:	d003      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0x46>
 800556e:	e02d      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005572:	623b      	str	r3, [r7, #32]
      break;
 8005574:	e02d      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	0c9b      	lsrs	r3, r3, #18
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005582:	4413      	add	r3, r2
 8005584:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005588:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d013      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005594:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	0c5b      	lsrs	r3, r3, #17
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055a2:	4413      	add	r3, r2
 80055a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4a0f      	ldr	r2, [pc, #60]	; (80055ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80055ae:	fb02 f203 	mul.w	r2, r2, r3
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ba:	e004      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	623b      	str	r3, [r7, #32]
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80055ce:	623b      	str	r3, [r7, #32]
      break;
 80055d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3728      	adds	r7, #40	; 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc90      	pop	{r4, r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	080073ec 	.word	0x080073ec
 80055e4:	080073fc 	.word	0x080073fc
 80055e8:	40021000 	.word	0x40021000
 80055ec:	007a1200 	.word	0x007a1200
 80055f0:	003d0900 	.word	0x003d0900

080055f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <HAL_RCC_GetHCLKFreq+0x10>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	20000010 	.word	0x20000010

08005608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800560c:	f7ff fff2 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005610:	4601      	mov	r1, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <HAL_RCC_GetPCLK1Freq+0x24>)
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	0800816c 	.word	0x0800816c

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005634:	f7ff ffde 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005638:	4601      	mov	r1, r0
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	0adb      	lsrs	r3, r3, #11
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4a03      	ldr	r2, [pc, #12]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005646:	5cd3      	ldrb	r3, [r2, r3]
 8005648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	0800816c 	.word	0x0800816c

08005658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <RCC_Delay+0x34>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <RCC_Delay+0x38>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	0a5b      	lsrs	r3, r3, #9
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005674:	bf00      	nop
  }
  while (Delay --);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	60fa      	str	r2, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f9      	bne.n	8005674 <RCC_Delay+0x1c>
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000010 	.word	0x20000010
 8005690:	10624dd3 	.word	0x10624dd3

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e053      	b.n	800574e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc ffc9 	bl	8002658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	ea42 0103 	orr.w	r1, r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	0c1a      	lsrs	r2, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f002 0204 	and.w	r2, r2, #4
 800572c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800573c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e01d      	b.n	80057a4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fc ffb7 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f000 fa0f 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d122      	bne.n	800584e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d11b      	bne.n	800584e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0202 	mvn.w	r2, #2
 800581e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f9a4 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 800583a:	e005      	b.n	8005848 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f997 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9a6 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d122      	bne.n	80058a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d11b      	bne.n	80058a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0204 	mvn.w	r2, #4
 8005872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f97a 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 800588e:	e005      	b.n	800589c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f96d 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f97c 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d122      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d11b      	bne.n	80058f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0208 	mvn.w	r2, #8
 80058c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f950 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80058e2:	e005      	b.n	80058f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f943 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f952 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b10      	cmp	r3, #16
 8005902:	d122      	bne.n	800594a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b10      	cmp	r3, #16
 8005910:	d11b      	bne.n	800594a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f06f 0210 	mvn.w	r2, #16
 800591a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2208      	movs	r2, #8
 8005920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f926 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005936:	e005      	b.n	8005944 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f919 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f928 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10e      	bne.n	8005976 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d107      	bne.n	8005976 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0201 	mvn.w	r2, #1
 800596e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fc fba1 	bl	80020b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d10e      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b80      	cmp	r3, #128	; 0x80
 8005990:	d107      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800599a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fa50 	bl	8005e42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d10e      	bne.n	80059ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f8ec 	bl	8005ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d10e      	bne.n	80059fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d107      	bne.n	80059fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0220 	mvn.w	r2, #32
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fa1b 	bl	8005e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_ConfigClockSource+0x18>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e0a6      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x166>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a40:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d067      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x120>
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d80b      	bhi.n	8005a6e <HAL_TIM_ConfigClockSource+0x6c>
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d073      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x140>
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d802      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x62>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d06f      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a62:	e078      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d06c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x140>
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d06a      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005a6c:	e073      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a6e:	2b70      	cmp	r3, #112	; 0x70
 8005a70:	d00d      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x8c>
 8005a72:	2b70      	cmp	r3, #112	; 0x70
 8005a74:	d804      	bhi.n	8005a80 <HAL_TIM_ConfigClockSource+0x7e>
 8005a76:	2b50      	cmp	r3, #80	; 0x50
 8005a78:	d033      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0xe0>
 8005a7a:	2b60      	cmp	r3, #96	; 0x60
 8005a7c:	d041      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a7e:	e06a      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a84:	d066      	beq.n	8005b54 <HAL_TIM_ConfigClockSource+0x152>
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8a:	d017      	beq.n	8005abc <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a8c:	e063      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f000 f964 	bl	8005d6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	609a      	str	r2, [r3, #8]
      break;
 8005aba:	e04c      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f000 f94d 	bl	8005d6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ade:	609a      	str	r2, [r3, #8]
      break;
 8005ae0:	e039      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 f8c4 	bl	8005c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2150      	movs	r1, #80	; 0x50
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f91b 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005b00:	e029      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 f8e2 	bl	8005cd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2160      	movs	r1, #96	; 0x60
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f90b 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e019      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 f8a4 	bl	8005c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f8fb 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e009      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f000 f8f2 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 8005b52:	e000      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005b54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <TIM_Base_SetConfig+0xb8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_Base_SetConfig+0x30>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d007      	beq.n	8005be8 <TIM_Base_SetConfig+0x30>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <TIM_Base_SetConfig+0xbc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0x30>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <TIM_Base_SetConfig+0xc0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d108      	bne.n	8005bfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <TIM_Base_SetConfig+0xb8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_Base_SetConfig+0x62>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d007      	beq.n	8005c1a <TIM_Base_SetConfig+0x62>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <TIM_Base_SetConfig+0xbc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_Base_SetConfig+0x62>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <TIM_Base_SetConfig+0xc0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d108      	bne.n	8005c2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a07      	ldr	r2, [pc, #28]	; (8005c70 <TIM_Base_SetConfig+0xb8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d103      	bne.n	8005c60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	615a      	str	r2, [r3, #20]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800

08005c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 030a 	bic.w	r3, r3, #10
 8005cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f023 0210 	bic.w	r2, r3, #16
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	031b      	lsls	r3, r3, #12
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f043 0307 	orr.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr

08005d6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b087      	sub	sp, #28
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	021a      	lsls	r2, r3, #8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	609a      	str	r2, [r3, #8]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e032      	b.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e03f      	b.n	8005ee6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fc5c 	bl	8002738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fc63 	bl	8006764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b088      	sub	sp, #32
 8005ef2:	af02      	add	r7, sp, #8
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	603b      	str	r3, [r7, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	f040 8083 	bne.w	8006016 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_UART_Transmit+0x2e>
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e07b      	b.n	8006018 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Transmit+0x40>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e074      	b.n	8006018 <HAL_UART_Transmit+0x12a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2221      	movs	r2, #33	; 0x21
 8005f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f44:	f7fc fde4 	bl	8002b10 <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f56:	e042      	b.n	8005fde <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d122      	bne.n	8005fb6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fa73 	bl	8006466 <UART_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e046      	b.n	8006018 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f9c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	60bb      	str	r3, [r7, #8]
 8005fac:	e017      	b.n	8005fde <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	e013      	b.n	8005fde <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fa50 	bl	8006466 <UART_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e023      	b.n	8006018 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	60ba      	str	r2, [r7, #8]
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1b7      	bne.n	8005f58 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2140      	movs	r1, #64	; 0x40
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fa37 	bl	8006466 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e00a      	b.n	8006018 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e000      	b.n	8006018 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006016:	2302      	movs	r3, #2
  }
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b20      	cmp	r3, #32
 8006038:	d166      	bne.n	8006108 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_UART_Receive_DMA+0x26>
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e05f      	b.n	800610a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_UART_Receive_DMA+0x38>
 8006054:	2302      	movs	r3, #2
 8006056:	e058      	b.n	800610a <HAL_UART_Receive_DMA+0xea>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2222      	movs	r2, #34	; 0x22
 8006076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	4a25      	ldr	r2, [pc, #148]	; (8006114 <HAL_UART_Receive_DMA+0xf4>)
 8006080:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	4a24      	ldr	r2, [pc, #144]	; (8006118 <HAL_UART_Receive_DMA+0xf8>)
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	4a23      	ldr	r2, [pc, #140]	; (800611c <HAL_UART_Receive_DMA+0xfc>)
 8006090:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	2200      	movs	r2, #0
 8006098:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	f7fc fec1 	bl	8002e38 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006102:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	0800634f 	.word	0x0800634f
 8006118:	080063b7 	.word	0x080063b7
 800611c:	080063d3 	.word	0x080063d3

08006120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10d      	bne.n	8006172 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_UART_IRQHandler+0x52>
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa78 	bl	8006660 <UART_Receive_IT>
      return;
 8006170:	e0cc      	b.n	800630c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80ab 	beq.w	80062d0 <HAL_UART_IRQHandler+0x1b0>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <HAL_UART_IRQHandler+0x70>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80a0 	beq.w	80062d0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_UART_IRQHandler+0x90>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_UART_IRQHandler+0xb0>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	f043 0202 	orr.w	r2, r3, #2
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_UART_IRQHandler+0xd0>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	f043 0204 	orr.w	r2, r3, #4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_UART_IRQHandler+0xf0>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006208:	f043 0208 	orr.w	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d078      	beq.n	800630a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <HAL_UART_IRQHandler+0x112>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa17 	bl	8006660 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d102      	bne.n	800625a <HAL_UART_IRQHandler+0x13a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d031      	beq.n	80062be <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f962 	bl	8006524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d023      	beq.n	80062b6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800627c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	2b00      	cmp	r3, #0
 8006284:	d013      	beq.n	80062ae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	4a22      	ldr	r2, [pc, #136]	; (8006314 <HAL_UART_IRQHandler+0x1f4>)
 800628c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	4618      	mov	r0, r3
 8006294:	f7fc fe30 	bl	8002ef8 <HAL_DMA_Abort_IT>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062a8:	4610      	mov	r0, r2
 80062aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	e00e      	b.n	80062cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f844 	bl	800633c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	e00a      	b.n	80062cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f840 	bl	800633c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	e006      	b.n	80062cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f83c 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80062ca:	e01e      	b.n	800630a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	bf00      	nop
    return;
 80062ce:	e01c      	b.n	800630a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <HAL_UART_IRQHandler+0x1cc>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f94e 	bl	8006586 <UART_Transmit_IT>
    return;
 80062ea:	e00f      	b.n	800630c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_UART_IRQHandler+0x1ec>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f995 	bl	8006630 <UART_EndTransmit_IT>
    return;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_UART_IRQHandler+0x1ec>
    return;
 800630a:	bf00      	nop
  }
}
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	0800655f 	.word	0x0800655f

08006318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d11e      	bne.n	80063a8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800637e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695a      	ldr	r2, [r3, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7fb fc0f 	bl	8001bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff ffb0 	bl	800632a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b21      	cmp	r3, #33	; 0x21
 8006404:	d108      	bne.n	8006418 <UART_DMAError+0x46>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006412:	68b8      	ldr	r0, [r7, #8]
 8006414:	f000 f871 	bl	80064fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf14      	ite	ne
 8006426:	2301      	movne	r3, #1
 8006428:	2300      	moveq	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b22      	cmp	r3, #34	; 0x22
 8006438:	d108      	bne.n	800644c <UART_DMAError+0x7a>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006446:	68b8      	ldr	r0, [r7, #8]
 8006448:	f000 f86c 	bl	8006524 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	f043 0210 	orr.w	r2, r3, #16
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006458:	68b8      	ldr	r0, [r7, #8]
 800645a:	f7ff ff6f 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	603b      	str	r3, [r7, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006476:	e02c      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647e:	d028      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0x30>
 8006486:	f7fc fb43 	bl	8002b10 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	429a      	cmp	r2, r3
 8006494:	d21d      	bcs.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e00f      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d0c3      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006510:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800653a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0201 	bic.w	r2, r2, #1
 800654a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fedf 	bl	800633c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b21      	cmp	r3, #33	; 0x21
 8006598:	d144      	bne.n	8006624 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d11a      	bne.n	80065da <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d105      	bne.n	80065ce <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	1c9a      	adds	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]
 80065cc:	e00e      	b.n	80065ec <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]
 80065d8:	e008      	b.n	80065ec <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6211      	str	r1, [r2, #32]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4619      	mov	r1, r3
 80065fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10f      	bne.n	8006620 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800660e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006646:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fe61 	bl	8006318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b22      	cmp	r3, #34	; 0x22
 8006672:	d171      	bne.n	8006758 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667c:	d123      	bne.n	80066c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10e      	bne.n	80066aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	1c9a      	adds	r2, r3, #2
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	629a      	str	r2, [r3, #40]	; 0x28
 80066a8:	e029      	b.n	80066fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
 80066c4:	e01b      	b.n	80066fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6858      	ldr	r0, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6291      	str	r1, [r2, #40]	; 0x28
 80066de:	b2c2      	uxtb	r2, r0
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e00c      	b.n	80066fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	1c58      	adds	r0, r3, #1
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	6288      	str	r0, [r1, #40]	; 0x28
 80066f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29b      	uxth	r3, r3
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4619      	mov	r1, r3
 800670c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800670e:	2b00      	cmp	r3, #0
 8006710:	d120      	bne.n	8006754 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0220 	bic.w	r2, r2, #32
 8006720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006730:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0201 	bic.w	r2, r2, #1
 8006740:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fb fa3e 	bl	8001bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e002      	b.n	800675a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	e000      	b.n	800675a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800679e:	f023 030c 	bic.w	r3, r3, #12
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	68f9      	ldr	r1, [r7, #12]
 80067a8:	430b      	orrs	r3, r1
 80067aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a52      	ldr	r2, [pc, #328]	; (8006910 <UART_SetConfig+0x1ac>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d14e      	bne.n	800686a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe ff30 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 80067d0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009a      	lsls	r2, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	4a4a      	ldr	r2, [pc, #296]	; (8006914 <UART_SetConfig+0x1b0>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	0119      	lsls	r1, r3, #4
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009a      	lsls	r2, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	fbb2 f2f3 	udiv	r2, r2, r3
 8006808:	4b42      	ldr	r3, [pc, #264]	; (8006914 <UART_SetConfig+0x1b0>)
 800680a:	fba3 0302 	umull	r0, r3, r3, r2
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	2064      	movs	r0, #100	; 0x64
 8006812:	fb00 f303 	mul.w	r3, r0, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	3332      	adds	r3, #50	; 0x32
 800681c:	4a3d      	ldr	r2, [pc, #244]	; (8006914 <UART_SetConfig+0x1b0>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006828:	4419      	add	r1, r3
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009a      	lsls	r2, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006840:	4b34      	ldr	r3, [pc, #208]	; (8006914 <UART_SetConfig+0x1b0>)
 8006842:	fba3 0302 	umull	r0, r3, r3, r2
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2064      	movs	r0, #100	; 0x64
 800684a:	fb00 f303 	mul.w	r3, r0, r3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	3332      	adds	r3, #50	; 0x32
 8006854:	4a2f      	ldr	r2, [pc, #188]	; (8006914 <UART_SetConfig+0x1b0>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f003 020f 	and.w	r2, r3, #15
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	440a      	add	r2, r1
 8006866:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006868:	e04d      	b.n	8006906 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800686a:	f7fe fecd 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 800686e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009a      	lsls	r2, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	4a23      	ldr	r2, [pc, #140]	; (8006914 <UART_SetConfig+0x1b0>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	0119      	lsls	r1, r3, #4
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009a      	lsls	r2, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <UART_SetConfig+0x1b0>)
 80068a8:	fba3 0302 	umull	r0, r3, r3, r2
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	2064      	movs	r0, #100	; 0x64
 80068b0:	fb00 f303 	mul.w	r3, r0, r3
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	3332      	adds	r3, #50	; 0x32
 80068ba:	4a16      	ldr	r2, [pc, #88]	; (8006914 <UART_SetConfig+0x1b0>)
 80068bc:	fba2 2303 	umull	r2, r3, r2, r3
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c6:	4419      	add	r1, r3
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009a      	lsls	r2, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	fbb2 f2f3 	udiv	r2, r2, r3
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <UART_SetConfig+0x1b0>)
 80068e0:	fba3 0302 	umull	r0, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	2064      	movs	r0, #100	; 0x64
 80068e8:	fb00 f303 	mul.w	r3, r0, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	3332      	adds	r3, #50	; 0x32
 80068f2:	4a08      	ldr	r2, [pc, #32]	; (8006914 <UART_SetConfig+0x1b0>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	440a      	add	r2, r1
 8006904:	609a      	str	r2, [r3, #8]
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40013800 	.word	0x40013800
 8006914:	51eb851f 	.word	0x51eb851f

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	; (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	2000001c 	.word	0x2000001c

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	2500      	movs	r5, #0
 8006928:	4e0c      	ldr	r6, [pc, #48]	; (800695c <__libc_init_array+0x38>)
 800692a:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692c:	1ba4      	subs	r4, r4, r6
 800692e:	10a4      	asrs	r4, r4, #2
 8006930:	42a5      	cmp	r5, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	f000 fc94 	bl	8007260 <_init>
 8006938:	2500      	movs	r5, #0
 800693a:	4e0a      	ldr	r6, [pc, #40]	; (8006964 <__libc_init_array+0x40>)
 800693c:	4c0a      	ldr	r4, [pc, #40]	; (8006968 <__libc_init_array+0x44>)
 800693e:	1ba4      	subs	r4, r4, r6
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	42a5      	cmp	r5, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800694c:	4798      	blx	r3
 800694e:	3501      	adds	r5, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006956:	4798      	blx	r3
 8006958:	3501      	adds	r5, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	080081a8 	.word	0x080081a8
 8006960:	080081a8 	.word	0x080081a8
 8006964:	080081a8 	.word	0x080081a8
 8006968:	080081ac 	.word	0x080081ac

0800696c <memset>:
 800696c:	4603      	mov	r3, r0
 800696e:	4402      	add	r2, r0
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	f803 1b01 	strb.w	r1, [r3], #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <siprintf>:
 800697c:	b40e      	push	{r1, r2, r3}
 800697e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006982:	b500      	push	{lr}
 8006984:	b09c      	sub	sp, #112	; 0x70
 8006986:	ab1d      	add	r3, sp, #116	; 0x74
 8006988:	9002      	str	r0, [sp, #8]
 800698a:	9006      	str	r0, [sp, #24]
 800698c:	9107      	str	r1, [sp, #28]
 800698e:	9104      	str	r1, [sp, #16]
 8006990:	4808      	ldr	r0, [pc, #32]	; (80069b4 <siprintf+0x38>)
 8006992:	4909      	ldr	r1, [pc, #36]	; (80069b8 <siprintf+0x3c>)
 8006994:	f853 2b04 	ldr.w	r2, [r3], #4
 8006998:	9105      	str	r1, [sp, #20]
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	a902      	add	r1, sp, #8
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	f000 f896 	bl	8006ad0 <_svfiprintf_r>
 80069a4:	2200      	movs	r2, #0
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	b01c      	add	sp, #112	; 0x70
 80069ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b0:	b003      	add	sp, #12
 80069b2:	4770      	bx	lr
 80069b4:	2000001c 	.word	0x2000001c
 80069b8:	ffff0208 	.word	0xffff0208

080069bc <strchr>:
 80069bc:	b2c9      	uxtb	r1, r1
 80069be:	4603      	mov	r3, r0
 80069c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c4:	b11a      	cbz	r2, 80069ce <strchr+0x12>
 80069c6:	428a      	cmp	r2, r1
 80069c8:	d1f9      	bne.n	80069be <strchr+0x2>
 80069ca:	4618      	mov	r0, r3
 80069cc:	4770      	bx	lr
 80069ce:	2900      	cmp	r1, #0
 80069d0:	bf18      	it	ne
 80069d2:	2300      	movne	r3, #0
 80069d4:	e7f9      	b.n	80069ca <strchr+0xe>

080069d6 <strcpy>:
 80069d6:	4603      	mov	r3, r0
 80069d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069dc:	f803 2b01 	strb.w	r2, [r3], #1
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	d1f9      	bne.n	80069d8 <strcpy+0x2>
 80069e4:	4770      	bx	lr

080069e6 <strstr>:
 80069e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e8:	7803      	ldrb	r3, [r0, #0]
 80069ea:	b17b      	cbz	r3, 8006a0c <strstr+0x26>
 80069ec:	4604      	mov	r4, r0
 80069ee:	7823      	ldrb	r3, [r4, #0]
 80069f0:	4620      	mov	r0, r4
 80069f2:	1c66      	adds	r6, r4, #1
 80069f4:	b17b      	cbz	r3, 8006a16 <strstr+0x30>
 80069f6:	1e4a      	subs	r2, r1, #1
 80069f8:	1e63      	subs	r3, r4, #1
 80069fa:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80069fe:	b14d      	cbz	r5, 8006a14 <strstr+0x2e>
 8006a00:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006a04:	4634      	mov	r4, r6
 8006a06:	42af      	cmp	r7, r5
 8006a08:	d0f7      	beq.n	80069fa <strstr+0x14>
 8006a0a:	e7f0      	b.n	80069ee <strstr+0x8>
 8006a0c:	780b      	ldrb	r3, [r1, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bf18      	it	ne
 8006a12:	2000      	movne	r0, #0
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a16:	4618      	mov	r0, r3
 8006a18:	e7fc      	b.n	8006a14 <strstr+0x2e>

08006a1a <__ssputs_r>:
 8006a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1e:	688e      	ldr	r6, [r1, #8]
 8006a20:	4682      	mov	sl, r0
 8006a22:	429e      	cmp	r6, r3
 8006a24:	460c      	mov	r4, r1
 8006a26:	4690      	mov	r8, r2
 8006a28:	4699      	mov	r9, r3
 8006a2a:	d837      	bhi.n	8006a9c <__ssputs_r+0x82>
 8006a2c:	898a      	ldrh	r2, [r1, #12]
 8006a2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a32:	d031      	beq.n	8006a98 <__ssputs_r+0x7e>
 8006a34:	2302      	movs	r3, #2
 8006a36:	6825      	ldr	r5, [r4, #0]
 8006a38:	6909      	ldr	r1, [r1, #16]
 8006a3a:	1a6f      	subs	r7, r5, r1
 8006a3c:	6965      	ldr	r5, [r4, #20]
 8006a3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a42:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a46:	f109 0301 	add.w	r3, r9, #1
 8006a4a:	443b      	add	r3, r7
 8006a4c:	429d      	cmp	r5, r3
 8006a4e:	bf38      	it	cc
 8006a50:	461d      	movcc	r5, r3
 8006a52:	0553      	lsls	r3, r2, #21
 8006a54:	d530      	bpl.n	8006ab8 <__ssputs_r+0x9e>
 8006a56:	4629      	mov	r1, r5
 8006a58:	f000 fb38 	bl	80070cc <_malloc_r>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	b950      	cbnz	r0, 8006a76 <__ssputs_r+0x5c>
 8006a60:	230c      	movs	r3, #12
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a66:	f8ca 3000 	str.w	r3, [sl]
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a76:	463a      	mov	r2, r7
 8006a78:	6921      	ldr	r1, [r4, #16]
 8006a7a:	f000 fab7 	bl	8006fec <memcpy>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	6126      	str	r6, [r4, #16]
 8006a8c:	443e      	add	r6, r7
 8006a8e:	6026      	str	r6, [r4, #0]
 8006a90:	464e      	mov	r6, r9
 8006a92:	6165      	str	r5, [r4, #20]
 8006a94:	1bed      	subs	r5, r5, r7
 8006a96:	60a5      	str	r5, [r4, #8]
 8006a98:	454e      	cmp	r6, r9
 8006a9a:	d900      	bls.n	8006a9e <__ssputs_r+0x84>
 8006a9c:	464e      	mov	r6, r9
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	f000 faad 	bl	8007002 <memmove>
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	2000      	movs	r0, #0
 8006aac:	1b9b      	subs	r3, r3, r6
 8006aae:	60a3      	str	r3, [r4, #8]
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	441e      	add	r6, r3
 8006ab4:	6026      	str	r6, [r4, #0]
 8006ab6:	e7dc      	b.n	8006a72 <__ssputs_r+0x58>
 8006ab8:	462a      	mov	r2, r5
 8006aba:	f000 fb61 	bl	8007180 <_realloc_r>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d1e2      	bne.n	8006a8a <__ssputs_r+0x70>
 8006ac4:	6921      	ldr	r1, [r4, #16]
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	f000 fab4 	bl	8007034 <_free_r>
 8006acc:	e7c8      	b.n	8006a60 <__ssputs_r+0x46>
	...

08006ad0 <_svfiprintf_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	461d      	mov	r5, r3
 8006ad6:	898b      	ldrh	r3, [r1, #12]
 8006ad8:	b09d      	sub	sp, #116	; 0x74
 8006ada:	061f      	lsls	r7, r3, #24
 8006adc:	4680      	mov	r8, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	d50f      	bpl.n	8006b04 <_svfiprintf_r+0x34>
 8006ae4:	690b      	ldr	r3, [r1, #16]
 8006ae6:	b96b      	cbnz	r3, 8006b04 <_svfiprintf_r+0x34>
 8006ae8:	2140      	movs	r1, #64	; 0x40
 8006aea:	f000 faef 	bl	80070cc <_malloc_r>
 8006aee:	6020      	str	r0, [r4, #0]
 8006af0:	6120      	str	r0, [r4, #16]
 8006af2:	b928      	cbnz	r0, 8006b00 <_svfiprintf_r+0x30>
 8006af4:	230c      	movs	r3, #12
 8006af6:	f8c8 3000 	str.w	r3, [r8]
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006afe:	e0c8      	b.n	8006c92 <_svfiprintf_r+0x1c2>
 8006b00:	2340      	movs	r3, #64	; 0x40
 8006b02:	6163      	str	r3, [r4, #20]
 8006b04:	2300      	movs	r3, #0
 8006b06:	9309      	str	r3, [sp, #36]	; 0x24
 8006b08:	2320      	movs	r3, #32
 8006b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b0e:	2330      	movs	r3, #48	; 0x30
 8006b10:	f04f 0b01 	mov.w	fp, #1
 8006b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b18:	9503      	str	r5, [sp, #12]
 8006b1a:	4637      	mov	r7, r6
 8006b1c:	463d      	mov	r5, r7
 8006b1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b22:	b10b      	cbz	r3, 8006b28 <_svfiprintf_r+0x58>
 8006b24:	2b25      	cmp	r3, #37	; 0x25
 8006b26:	d13e      	bne.n	8006ba6 <_svfiprintf_r+0xd6>
 8006b28:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b2c:	d00b      	beq.n	8006b46 <_svfiprintf_r+0x76>
 8006b2e:	4653      	mov	r3, sl
 8006b30:	4632      	mov	r2, r6
 8006b32:	4621      	mov	r1, r4
 8006b34:	4640      	mov	r0, r8
 8006b36:	f7ff ff70 	bl	8006a1a <__ssputs_r>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f000 80a4 	beq.w	8006c88 <_svfiprintf_r+0x1b8>
 8006b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b42:	4453      	add	r3, sl
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	783b      	ldrb	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 809d 	beq.w	8006c88 <_svfiprintf_r+0x1b8>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b60:	931a      	str	r3, [sp, #104]	; 0x68
 8006b62:	462f      	mov	r7, r5
 8006b64:	2205      	movs	r2, #5
 8006b66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b6a:	4850      	ldr	r0, [pc, #320]	; (8006cac <_svfiprintf_r+0x1dc>)
 8006b6c:	f000 fa30 	bl	8006fd0 <memchr>
 8006b70:	9b04      	ldr	r3, [sp, #16]
 8006b72:	b9d0      	cbnz	r0, 8006baa <_svfiprintf_r+0xda>
 8006b74:	06d9      	lsls	r1, r3, #27
 8006b76:	bf44      	itt	mi
 8006b78:	2220      	movmi	r2, #32
 8006b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b7e:	071a      	lsls	r2, r3, #28
 8006b80:	bf44      	itt	mi
 8006b82:	222b      	movmi	r2, #43	; 0x2b
 8006b84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b88:	782a      	ldrb	r2, [r5, #0]
 8006b8a:	2a2a      	cmp	r2, #42	; 0x2a
 8006b8c:	d015      	beq.n	8006bba <_svfiprintf_r+0xea>
 8006b8e:	462f      	mov	r7, r5
 8006b90:	2000      	movs	r0, #0
 8006b92:	250a      	movs	r5, #10
 8006b94:	9a07      	ldr	r2, [sp, #28]
 8006b96:	4639      	mov	r1, r7
 8006b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b9c:	3b30      	subs	r3, #48	; 0x30
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	d94d      	bls.n	8006c3e <_svfiprintf_r+0x16e>
 8006ba2:	b1b8      	cbz	r0, 8006bd4 <_svfiprintf_r+0x104>
 8006ba4:	e00f      	b.n	8006bc6 <_svfiprintf_r+0xf6>
 8006ba6:	462f      	mov	r7, r5
 8006ba8:	e7b8      	b.n	8006b1c <_svfiprintf_r+0x4c>
 8006baa:	4a40      	ldr	r2, [pc, #256]	; (8006cac <_svfiprintf_r+0x1dc>)
 8006bac:	463d      	mov	r5, r7
 8006bae:	1a80      	subs	r0, r0, r2
 8006bb0:	fa0b f000 	lsl.w	r0, fp, r0
 8006bb4:	4318      	orrs	r0, r3
 8006bb6:	9004      	str	r0, [sp, #16]
 8006bb8:	e7d3      	b.n	8006b62 <_svfiprintf_r+0x92>
 8006bba:	9a03      	ldr	r2, [sp, #12]
 8006bbc:	1d11      	adds	r1, r2, #4
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	9103      	str	r1, [sp, #12]
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	db01      	blt.n	8006bca <_svfiprintf_r+0xfa>
 8006bc6:	9207      	str	r2, [sp, #28]
 8006bc8:	e004      	b.n	8006bd4 <_svfiprintf_r+0x104>
 8006bca:	4252      	negs	r2, r2
 8006bcc:	f043 0302 	orr.w	r3, r3, #2
 8006bd0:	9207      	str	r2, [sp, #28]
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	783b      	ldrb	r3, [r7, #0]
 8006bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd8:	d10c      	bne.n	8006bf4 <_svfiprintf_r+0x124>
 8006bda:	787b      	ldrb	r3, [r7, #1]
 8006bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bde:	d133      	bne.n	8006c48 <_svfiprintf_r+0x178>
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	3702      	adds	r7, #2
 8006be4:	1d1a      	adds	r2, r3, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	9203      	str	r2, [sp, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bfb8      	it	lt
 8006bee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	4d2e      	ldr	r5, [pc, #184]	; (8006cb0 <_svfiprintf_r+0x1e0>)
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	7839      	ldrb	r1, [r7, #0]
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f9e8 	bl	8006fd0 <memchr>
 8006c00:	b138      	cbz	r0, 8006c12 <_svfiprintf_r+0x142>
 8006c02:	2340      	movs	r3, #64	; 0x40
 8006c04:	1b40      	subs	r0, r0, r5
 8006c06:	fa03 f000 	lsl.w	r0, r3, r0
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	3701      	adds	r7, #1
 8006c0e:	4303      	orrs	r3, r0
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	7839      	ldrb	r1, [r7, #0]
 8006c14:	2206      	movs	r2, #6
 8006c16:	4827      	ldr	r0, [pc, #156]	; (8006cb4 <_svfiprintf_r+0x1e4>)
 8006c18:	1c7e      	adds	r6, r7, #1
 8006c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c1e:	f000 f9d7 	bl	8006fd0 <memchr>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d038      	beq.n	8006c98 <_svfiprintf_r+0x1c8>
 8006c26:	4b24      	ldr	r3, [pc, #144]	; (8006cb8 <_svfiprintf_r+0x1e8>)
 8006c28:	bb13      	cbnz	r3, 8006c70 <_svfiprintf_r+0x1a0>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	3307      	adds	r3, #7
 8006c2e:	f023 0307 	bic.w	r3, r3, #7
 8006c32:	3308      	adds	r3, #8
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c38:	444b      	add	r3, r9
 8006c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3c:	e76d      	b.n	8006b1a <_svfiprintf_r+0x4a>
 8006c3e:	fb05 3202 	mla	r2, r5, r2, r3
 8006c42:	2001      	movs	r0, #1
 8006c44:	460f      	mov	r7, r1
 8006c46:	e7a6      	b.n	8006b96 <_svfiprintf_r+0xc6>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	250a      	movs	r5, #10
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	3701      	adds	r7, #1
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	4638      	mov	r0, r7
 8006c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c58:	3a30      	subs	r2, #48	; 0x30
 8006c5a:	2a09      	cmp	r2, #9
 8006c5c:	d903      	bls.n	8006c66 <_svfiprintf_r+0x196>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0c8      	beq.n	8006bf4 <_svfiprintf_r+0x124>
 8006c62:	9105      	str	r1, [sp, #20]
 8006c64:	e7c6      	b.n	8006bf4 <_svfiprintf_r+0x124>
 8006c66:	fb05 2101 	mla	r1, r5, r1, r2
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	e7f0      	b.n	8006c52 <_svfiprintf_r+0x182>
 8006c70:	ab03      	add	r3, sp, #12
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4622      	mov	r2, r4
 8006c76:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <_svfiprintf_r+0x1ec>)
 8006c78:	a904      	add	r1, sp, #16
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	f3af 8000 	nop.w
 8006c80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c84:	4681      	mov	r9, r0
 8006c86:	d1d6      	bne.n	8006c36 <_svfiprintf_r+0x166>
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	065b      	lsls	r3, r3, #25
 8006c8c:	f53f af35 	bmi.w	8006afa <_svfiprintf_r+0x2a>
 8006c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c92:	b01d      	add	sp, #116	; 0x74
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4b07      	ldr	r3, [pc, #28]	; (8006cbc <_svfiprintf_r+0x1ec>)
 8006ca0:	a904      	add	r1, sp, #16
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f000 f882 	bl	8006dac <_printf_i>
 8006ca8:	e7ea      	b.n	8006c80 <_svfiprintf_r+0x1b0>
 8006caa:	bf00      	nop
 8006cac:	08008174 	.word	0x08008174
 8006cb0:	0800817a 	.word	0x0800817a
 8006cb4:	0800817e 	.word	0x0800817e
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	08006a1b 	.word	0x08006a1b

08006cc0 <_printf_common>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	4691      	mov	r9, r2
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	688a      	ldr	r2, [r1, #8]
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	4606      	mov	r6, r0
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	bfb8      	it	lt
 8006cd2:	4613      	movlt	r3, r2
 8006cd4:	f8c9 3000 	str.w	r3, [r9]
 8006cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cdc:	460c      	mov	r4, r1
 8006cde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce2:	b112      	cbz	r2, 8006cea <_printf_common+0x2a>
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f8c9 3000 	str.w	r3, [r9]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	0699      	lsls	r1, r3, #26
 8006cee:	bf42      	ittt	mi
 8006cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006cf4:	3302      	addmi	r3, #2
 8006cf6:	f8c9 3000 	strmi.w	r3, [r9]
 8006cfa:	6825      	ldr	r5, [r4, #0]
 8006cfc:	f015 0506 	ands.w	r5, r5, #6
 8006d00:	d107      	bne.n	8006d12 <_printf_common+0x52>
 8006d02:	f104 0a19 	add.w	sl, r4, #25
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	f8d9 2000 	ldr.w	r2, [r9]
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	42ab      	cmp	r3, r5
 8006d10:	dc29      	bgt.n	8006d66 <_printf_common+0xa6>
 8006d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	3300      	adds	r3, #0
 8006d1a:	bf18      	it	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	0692      	lsls	r2, r2, #26
 8006d20:	d42e      	bmi.n	8006d80 <_printf_common+0xc0>
 8006d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d26:	4639      	mov	r1, r7
 8006d28:	4630      	mov	r0, r6
 8006d2a:	47c0      	blx	r8
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d021      	beq.n	8006d74 <_printf_common+0xb4>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	68e5      	ldr	r5, [r4, #12]
 8006d34:	f003 0306 	and.w	r3, r3, #6
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	bf18      	it	ne
 8006d3c:	2500      	movne	r5, #0
 8006d3e:	f8d9 2000 	ldr.w	r2, [r9]
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	bf08      	it	eq
 8006d48:	1aad      	subeq	r5, r5, r2
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	6922      	ldr	r2, [r4, #16]
 8006d4e:	bf08      	it	eq
 8006d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d54:	4293      	cmp	r3, r2
 8006d56:	bfc4      	itt	gt
 8006d58:	1a9b      	subgt	r3, r3, r2
 8006d5a:	18ed      	addgt	r5, r5, r3
 8006d5c:	341a      	adds	r4, #26
 8006d5e:	454d      	cmp	r5, r9
 8006d60:	d11a      	bne.n	8006d98 <_printf_common+0xd8>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e008      	b.n	8006d78 <_printf_common+0xb8>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4639      	mov	r1, r7
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0xbc>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7c2      	b.n	8006d06 <_printf_common+0x46>
 8006d80:	2030      	movs	r0, #48	; 0x30
 8006d82:	18e1      	adds	r1, r4, r3
 8006d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d8e:	4422      	add	r2, r4
 8006d90:	3302      	adds	r3, #2
 8006d92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d96:	e7c4      	b.n	8006d22 <_printf_common+0x62>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4630      	mov	r0, r6
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0e6      	beq.n	8006d74 <_printf_common+0xb4>
 8006da6:	f109 0901 	add.w	r9, r9, #1
 8006daa:	e7d8      	b.n	8006d5e <_printf_common+0x9e>

08006dac <_printf_i>:
 8006dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006db0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006db4:	460c      	mov	r4, r1
 8006db6:	7e09      	ldrb	r1, [r1, #24]
 8006db8:	b085      	sub	sp, #20
 8006dba:	296e      	cmp	r1, #110	; 0x6e
 8006dbc:	4617      	mov	r7, r2
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	4698      	mov	r8, r3
 8006dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dc4:	f000 80b3 	beq.w	8006f2e <_printf_i+0x182>
 8006dc8:	d822      	bhi.n	8006e10 <_printf_i+0x64>
 8006dca:	2963      	cmp	r1, #99	; 0x63
 8006dcc:	d036      	beq.n	8006e3c <_printf_i+0x90>
 8006dce:	d80a      	bhi.n	8006de6 <_printf_i+0x3a>
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	f000 80b9 	beq.w	8006f48 <_printf_i+0x19c>
 8006dd6:	2958      	cmp	r1, #88	; 0x58
 8006dd8:	f000 8083 	beq.w	8006ee2 <_printf_i+0x136>
 8006ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006de4:	e032      	b.n	8006e4c <_printf_i+0xa0>
 8006de6:	2964      	cmp	r1, #100	; 0x64
 8006de8:	d001      	beq.n	8006dee <_printf_i+0x42>
 8006dea:	2969      	cmp	r1, #105	; 0x69
 8006dec:	d1f6      	bne.n	8006ddc <_printf_i+0x30>
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	6813      	ldr	r3, [r2, #0]
 8006df2:	0605      	lsls	r5, r0, #24
 8006df4:	f103 0104 	add.w	r1, r3, #4
 8006df8:	d52a      	bpl.n	8006e50 <_printf_i+0xa4>
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	da03      	bge.n	8006e0a <_printf_i+0x5e>
 8006e02:	222d      	movs	r2, #45	; 0x2d
 8006e04:	425b      	negs	r3, r3
 8006e06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e0a:	486f      	ldr	r0, [pc, #444]	; (8006fc8 <_printf_i+0x21c>)
 8006e0c:	220a      	movs	r2, #10
 8006e0e:	e039      	b.n	8006e84 <_printf_i+0xd8>
 8006e10:	2973      	cmp	r1, #115	; 0x73
 8006e12:	f000 809d 	beq.w	8006f50 <_printf_i+0x1a4>
 8006e16:	d808      	bhi.n	8006e2a <_printf_i+0x7e>
 8006e18:	296f      	cmp	r1, #111	; 0x6f
 8006e1a:	d020      	beq.n	8006e5e <_printf_i+0xb2>
 8006e1c:	2970      	cmp	r1, #112	; 0x70
 8006e1e:	d1dd      	bne.n	8006ddc <_printf_i+0x30>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	f043 0320 	orr.w	r3, r3, #32
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	e003      	b.n	8006e32 <_printf_i+0x86>
 8006e2a:	2975      	cmp	r1, #117	; 0x75
 8006e2c:	d017      	beq.n	8006e5e <_printf_i+0xb2>
 8006e2e:	2978      	cmp	r1, #120	; 0x78
 8006e30:	d1d4      	bne.n	8006ddc <_printf_i+0x30>
 8006e32:	2378      	movs	r3, #120	; 0x78
 8006e34:	4865      	ldr	r0, [pc, #404]	; (8006fcc <_printf_i+0x220>)
 8006e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e3a:	e055      	b.n	8006ee8 <_printf_i+0x13c>
 8006e3c:	6813      	ldr	r3, [r2, #0]
 8006e3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e42:	1d19      	adds	r1, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6011      	str	r1, [r2, #0]
 8006e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e08c      	b.n	8006f6a <_printf_i+0x1be>
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e56:	6011      	str	r1, [r2, #0]
 8006e58:	bf18      	it	ne
 8006e5a:	b21b      	sxthne	r3, r3
 8006e5c:	e7cf      	b.n	8006dfe <_printf_i+0x52>
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	6825      	ldr	r5, [r4, #0]
 8006e62:	1d18      	adds	r0, r3, #4
 8006e64:	6010      	str	r0, [r2, #0]
 8006e66:	0628      	lsls	r0, r5, #24
 8006e68:	d501      	bpl.n	8006e6e <_printf_i+0xc2>
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	e002      	b.n	8006e74 <_printf_i+0xc8>
 8006e6e:	0668      	lsls	r0, r5, #25
 8006e70:	d5fb      	bpl.n	8006e6a <_printf_i+0xbe>
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	296f      	cmp	r1, #111	; 0x6f
 8006e76:	bf14      	ite	ne
 8006e78:	220a      	movne	r2, #10
 8006e7a:	2208      	moveq	r2, #8
 8006e7c:	4852      	ldr	r0, [pc, #328]	; (8006fc8 <_printf_i+0x21c>)
 8006e7e:	2100      	movs	r1, #0
 8006e80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e84:	6865      	ldr	r5, [r4, #4]
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	60a5      	str	r5, [r4, #8]
 8006e8a:	f2c0 8095 	blt.w	8006fb8 <_printf_i+0x20c>
 8006e8e:	6821      	ldr	r1, [r4, #0]
 8006e90:	f021 0104 	bic.w	r1, r1, #4
 8006e94:	6021      	str	r1, [r4, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d13d      	bne.n	8006f16 <_printf_i+0x16a>
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	f040 808e 	bne.w	8006fbc <_printf_i+0x210>
 8006ea0:	4665      	mov	r5, ip
 8006ea2:	2a08      	cmp	r2, #8
 8006ea4:	d10b      	bne.n	8006ebe <_printf_i+0x112>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	07db      	lsls	r3, r3, #31
 8006eaa:	d508      	bpl.n	8006ebe <_printf_i+0x112>
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	6862      	ldr	r2, [r4, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	bfde      	ittt	le
 8006eb4:	2330      	movle	r3, #48	; 0x30
 8006eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ebe:	ebac 0305 	sub.w	r3, ip, r5
 8006ec2:	6123      	str	r3, [r4, #16]
 8006ec4:	f8cd 8000 	str.w	r8, [sp]
 8006ec8:	463b      	mov	r3, r7
 8006eca:	aa03      	add	r2, sp, #12
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff fef6 	bl	8006cc0 <_printf_common>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d14d      	bne.n	8006f74 <_printf_i+0x1c8>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006edc:	b005      	add	sp, #20
 8006ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ee2:	4839      	ldr	r0, [pc, #228]	; (8006fc8 <_printf_i+0x21c>)
 8006ee4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ee8:	6813      	ldr	r3, [r2, #0]
 8006eea:	6821      	ldr	r1, [r4, #0]
 8006eec:	1d1d      	adds	r5, r3, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6015      	str	r5, [r2, #0]
 8006ef2:	060a      	lsls	r2, r1, #24
 8006ef4:	d50b      	bpl.n	8006f0e <_printf_i+0x162>
 8006ef6:	07ca      	lsls	r2, r1, #31
 8006ef8:	bf44      	itt	mi
 8006efa:	f041 0120 	orrmi.w	r1, r1, #32
 8006efe:	6021      	strmi	r1, [r4, #0]
 8006f00:	b91b      	cbnz	r3, 8006f0a <_printf_i+0x15e>
 8006f02:	6822      	ldr	r2, [r4, #0]
 8006f04:	f022 0220 	bic.w	r2, r2, #32
 8006f08:	6022      	str	r2, [r4, #0]
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	e7b7      	b.n	8006e7e <_printf_i+0xd2>
 8006f0e:	064d      	lsls	r5, r1, #25
 8006f10:	bf48      	it	mi
 8006f12:	b29b      	uxthmi	r3, r3
 8006f14:	e7ef      	b.n	8006ef6 <_printf_i+0x14a>
 8006f16:	4665      	mov	r5, ip
 8006f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f1c:	fb02 3311 	mls	r3, r2, r1, r3
 8006f20:	5cc3      	ldrb	r3, [r0, r3]
 8006f22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f26:	460b      	mov	r3, r1
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	d1f5      	bne.n	8006f18 <_printf_i+0x16c>
 8006f2c:	e7b9      	b.n	8006ea2 <_printf_i+0xf6>
 8006f2e:	6813      	ldr	r3, [r2, #0]
 8006f30:	6825      	ldr	r5, [r4, #0]
 8006f32:	1d18      	adds	r0, r3, #4
 8006f34:	6961      	ldr	r1, [r4, #20]
 8006f36:	6010      	str	r0, [r2, #0]
 8006f38:	0628      	lsls	r0, r5, #24
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	d501      	bpl.n	8006f42 <_printf_i+0x196>
 8006f3e:	6019      	str	r1, [r3, #0]
 8006f40:	e002      	b.n	8006f48 <_printf_i+0x19c>
 8006f42:	066a      	lsls	r2, r5, #25
 8006f44:	d5fb      	bpl.n	8006f3e <_printf_i+0x192>
 8006f46:	8019      	strh	r1, [r3, #0]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4665      	mov	r5, ip
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	e7b9      	b.n	8006ec4 <_printf_i+0x118>
 8006f50:	6813      	ldr	r3, [r2, #0]
 8006f52:	1d19      	adds	r1, r3, #4
 8006f54:	6011      	str	r1, [r2, #0]
 8006f56:	681d      	ldr	r5, [r3, #0]
 8006f58:	6862      	ldr	r2, [r4, #4]
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 f837 	bl	8006fd0 <memchr>
 8006f62:	b108      	cbz	r0, 8006f68 <_printf_i+0x1bc>
 8006f64:	1b40      	subs	r0, r0, r5
 8006f66:	6060      	str	r0, [r4, #4]
 8006f68:	6863      	ldr	r3, [r4, #4]
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f72:	e7a7      	b.n	8006ec4 <_printf_i+0x118>
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	462a      	mov	r2, r5
 8006f78:	4639      	mov	r1, r7
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	47c0      	blx	r8
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d0aa      	beq.n	8006ed8 <_printf_i+0x12c>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	079b      	lsls	r3, r3, #30
 8006f86:	d413      	bmi.n	8006fb0 <_printf_i+0x204>
 8006f88:	68e0      	ldr	r0, [r4, #12]
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	4298      	cmp	r0, r3
 8006f8e:	bfb8      	it	lt
 8006f90:	4618      	movlt	r0, r3
 8006f92:	e7a3      	b.n	8006edc <_printf_i+0x130>
 8006f94:	2301      	movs	r3, #1
 8006f96:	464a      	mov	r2, r9
 8006f98:	4639      	mov	r1, r7
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d09a      	beq.n	8006ed8 <_printf_i+0x12c>
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	68e3      	ldr	r3, [r4, #12]
 8006fa6:	9a03      	ldr	r2, [sp, #12]
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	42ab      	cmp	r3, r5
 8006fac:	dcf2      	bgt.n	8006f94 <_printf_i+0x1e8>
 8006fae:	e7eb      	b.n	8006f88 <_printf_i+0x1dc>
 8006fb0:	2500      	movs	r5, #0
 8006fb2:	f104 0919 	add.w	r9, r4, #25
 8006fb6:	e7f5      	b.n	8006fa4 <_printf_i+0x1f8>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ac      	bne.n	8006f16 <_printf_i+0x16a>
 8006fbc:	7803      	ldrb	r3, [r0, #0]
 8006fbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc6:	e76c      	b.n	8006ea2 <_printf_i+0xf6>
 8006fc8:	08008185 	.word	0x08008185
 8006fcc:	08008196 	.word	0x08008196

08006fd0 <memchr>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	b2c9      	uxtb	r1, r1
 8006fd4:	4402      	add	r2, r0
 8006fd6:	4290      	cmp	r0, r2
 8006fd8:	4603      	mov	r3, r0
 8006fda:	d101      	bne.n	8006fe0 <memchr+0x10>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e003      	b.n	8006fe8 <memchr+0x18>
 8006fe0:	781c      	ldrb	r4, [r3, #0]
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	428c      	cmp	r4, r1
 8006fe6:	d1f6      	bne.n	8006fd6 <memchr+0x6>
 8006fe8:	4618      	mov	r0, r3
 8006fea:	bd10      	pop	{r4, pc}

08006fec <memcpy>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	1e43      	subs	r3, r0, #1
 8006ff0:	440a      	add	r2, r1
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	d100      	bne.n	8006ff8 <memcpy+0xc>
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007000:	e7f7      	b.n	8006ff2 <memcpy+0x6>

08007002 <memmove>:
 8007002:	4288      	cmp	r0, r1
 8007004:	b510      	push	{r4, lr}
 8007006:	eb01 0302 	add.w	r3, r1, r2
 800700a:	d807      	bhi.n	800701c <memmove+0x1a>
 800700c:	1e42      	subs	r2, r0, #1
 800700e:	4299      	cmp	r1, r3
 8007010:	d00a      	beq.n	8007028 <memmove+0x26>
 8007012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007016:	f802 4f01 	strb.w	r4, [r2, #1]!
 800701a:	e7f8      	b.n	800700e <memmove+0xc>
 800701c:	4283      	cmp	r3, r0
 800701e:	d9f5      	bls.n	800700c <memmove+0xa>
 8007020:	1881      	adds	r1, r0, r2
 8007022:	1ad2      	subs	r2, r2, r3
 8007024:	42d3      	cmn	r3, r2
 8007026:	d100      	bne.n	800702a <memmove+0x28>
 8007028:	bd10      	pop	{r4, pc}
 800702a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800702e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007032:	e7f7      	b.n	8007024 <memmove+0x22>

08007034 <_free_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4605      	mov	r5, r0
 8007038:	2900      	cmp	r1, #0
 800703a:	d043      	beq.n	80070c4 <_free_r+0x90>
 800703c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007040:	1f0c      	subs	r4, r1, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfb8      	it	lt
 8007046:	18e4      	addlt	r4, r4, r3
 8007048:	f000 f8d0 	bl	80071ec <__malloc_lock>
 800704c:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <_free_r+0x94>)
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	4610      	mov	r0, r2
 8007052:	b933      	cbnz	r3, 8007062 <_free_r+0x2e>
 8007054:	6063      	str	r3, [r4, #4]
 8007056:	6014      	str	r4, [r2, #0]
 8007058:	4628      	mov	r0, r5
 800705a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800705e:	f000 b8c6 	b.w	80071ee <__malloc_unlock>
 8007062:	42a3      	cmp	r3, r4
 8007064:	d90b      	bls.n	800707e <_free_r+0x4a>
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	1862      	adds	r2, r4, r1
 800706a:	4293      	cmp	r3, r2
 800706c:	bf01      	itttt	eq
 800706e:	681a      	ldreq	r2, [r3, #0]
 8007070:	685b      	ldreq	r3, [r3, #4]
 8007072:	1852      	addeq	r2, r2, r1
 8007074:	6022      	streq	r2, [r4, #0]
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	6004      	str	r4, [r0, #0]
 800707a:	e7ed      	b.n	8007058 <_free_r+0x24>
 800707c:	4613      	mov	r3, r2
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	b10a      	cbz	r2, 8007086 <_free_r+0x52>
 8007082:	42a2      	cmp	r2, r4
 8007084:	d9fa      	bls.n	800707c <_free_r+0x48>
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	1858      	adds	r0, r3, r1
 800708a:	42a0      	cmp	r0, r4
 800708c:	d10b      	bne.n	80070a6 <_free_r+0x72>
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	4401      	add	r1, r0
 8007092:	1858      	adds	r0, r3, r1
 8007094:	4282      	cmp	r2, r0
 8007096:	6019      	str	r1, [r3, #0]
 8007098:	d1de      	bne.n	8007058 <_free_r+0x24>
 800709a:	6810      	ldr	r0, [r2, #0]
 800709c:	6852      	ldr	r2, [r2, #4]
 800709e:	4401      	add	r1, r0
 80070a0:	6019      	str	r1, [r3, #0]
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	e7d8      	b.n	8007058 <_free_r+0x24>
 80070a6:	d902      	bls.n	80070ae <_free_r+0x7a>
 80070a8:	230c      	movs	r3, #12
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	e7d4      	b.n	8007058 <_free_r+0x24>
 80070ae:	6820      	ldr	r0, [r4, #0]
 80070b0:	1821      	adds	r1, r4, r0
 80070b2:	428a      	cmp	r2, r1
 80070b4:	bf01      	itttt	eq
 80070b6:	6811      	ldreq	r1, [r2, #0]
 80070b8:	6852      	ldreq	r2, [r2, #4]
 80070ba:	1809      	addeq	r1, r1, r0
 80070bc:	6021      	streq	r1, [r4, #0]
 80070be:	6062      	str	r2, [r4, #4]
 80070c0:	605c      	str	r4, [r3, #4]
 80070c2:	e7c9      	b.n	8007058 <_free_r+0x24>
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
 80070c6:	bf00      	nop
 80070c8:	200004b0 	.word	0x200004b0

080070cc <_malloc_r>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	1ccd      	adds	r5, r1, #3
 80070d0:	f025 0503 	bic.w	r5, r5, #3
 80070d4:	3508      	adds	r5, #8
 80070d6:	2d0c      	cmp	r5, #12
 80070d8:	bf38      	it	cc
 80070da:	250c      	movcc	r5, #12
 80070dc:	2d00      	cmp	r5, #0
 80070de:	4606      	mov	r6, r0
 80070e0:	db01      	blt.n	80070e6 <_malloc_r+0x1a>
 80070e2:	42a9      	cmp	r1, r5
 80070e4:	d903      	bls.n	80070ee <_malloc_r+0x22>
 80070e6:	230c      	movs	r3, #12
 80070e8:	6033      	str	r3, [r6, #0]
 80070ea:	2000      	movs	r0, #0
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	f000 f87d 	bl	80071ec <__malloc_lock>
 80070f2:	4a21      	ldr	r2, [pc, #132]	; (8007178 <_malloc_r+0xac>)
 80070f4:	6814      	ldr	r4, [r2, #0]
 80070f6:	4621      	mov	r1, r4
 80070f8:	b991      	cbnz	r1, 8007120 <_malloc_r+0x54>
 80070fa:	4c20      	ldr	r4, [pc, #128]	; (800717c <_malloc_r+0xb0>)
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	b91b      	cbnz	r3, 8007108 <_malloc_r+0x3c>
 8007100:	4630      	mov	r0, r6
 8007102:	f000 f863 	bl	80071cc <_sbrk_r>
 8007106:	6020      	str	r0, [r4, #0]
 8007108:	4629      	mov	r1, r5
 800710a:	4630      	mov	r0, r6
 800710c:	f000 f85e 	bl	80071cc <_sbrk_r>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d124      	bne.n	800715e <_malloc_r+0x92>
 8007114:	230c      	movs	r3, #12
 8007116:	4630      	mov	r0, r6
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	f000 f868 	bl	80071ee <__malloc_unlock>
 800711e:	e7e4      	b.n	80070ea <_malloc_r+0x1e>
 8007120:	680b      	ldr	r3, [r1, #0]
 8007122:	1b5b      	subs	r3, r3, r5
 8007124:	d418      	bmi.n	8007158 <_malloc_r+0x8c>
 8007126:	2b0b      	cmp	r3, #11
 8007128:	d90f      	bls.n	800714a <_malloc_r+0x7e>
 800712a:	600b      	str	r3, [r1, #0]
 800712c:	18cc      	adds	r4, r1, r3
 800712e:	50cd      	str	r5, [r1, r3]
 8007130:	4630      	mov	r0, r6
 8007132:	f000 f85c 	bl	80071ee <__malloc_unlock>
 8007136:	f104 000b 	add.w	r0, r4, #11
 800713a:	1d23      	adds	r3, r4, #4
 800713c:	f020 0007 	bic.w	r0, r0, #7
 8007140:	1ac3      	subs	r3, r0, r3
 8007142:	d0d3      	beq.n	80070ec <_malloc_r+0x20>
 8007144:	425a      	negs	r2, r3
 8007146:	50e2      	str	r2, [r4, r3]
 8007148:	e7d0      	b.n	80070ec <_malloc_r+0x20>
 800714a:	684b      	ldr	r3, [r1, #4]
 800714c:	428c      	cmp	r4, r1
 800714e:	bf16      	itet	ne
 8007150:	6063      	strne	r3, [r4, #4]
 8007152:	6013      	streq	r3, [r2, #0]
 8007154:	460c      	movne	r4, r1
 8007156:	e7eb      	b.n	8007130 <_malloc_r+0x64>
 8007158:	460c      	mov	r4, r1
 800715a:	6849      	ldr	r1, [r1, #4]
 800715c:	e7cc      	b.n	80070f8 <_malloc_r+0x2c>
 800715e:	1cc4      	adds	r4, r0, #3
 8007160:	f024 0403 	bic.w	r4, r4, #3
 8007164:	42a0      	cmp	r0, r4
 8007166:	d005      	beq.n	8007174 <_malloc_r+0xa8>
 8007168:	1a21      	subs	r1, r4, r0
 800716a:	4630      	mov	r0, r6
 800716c:	f000 f82e 	bl	80071cc <_sbrk_r>
 8007170:	3001      	adds	r0, #1
 8007172:	d0cf      	beq.n	8007114 <_malloc_r+0x48>
 8007174:	6025      	str	r5, [r4, #0]
 8007176:	e7db      	b.n	8007130 <_malloc_r+0x64>
 8007178:	200004b0 	.word	0x200004b0
 800717c:	200004b4 	.word	0x200004b4

08007180 <_realloc_r>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	4607      	mov	r7, r0
 8007184:	4614      	mov	r4, r2
 8007186:	460e      	mov	r6, r1
 8007188:	b921      	cbnz	r1, 8007194 <_realloc_r+0x14>
 800718a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800718e:	4611      	mov	r1, r2
 8007190:	f7ff bf9c 	b.w	80070cc <_malloc_r>
 8007194:	b922      	cbnz	r2, 80071a0 <_realloc_r+0x20>
 8007196:	f7ff ff4d 	bl	8007034 <_free_r>
 800719a:	4625      	mov	r5, r4
 800719c:	4628      	mov	r0, r5
 800719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a0:	f000 f826 	bl	80071f0 <_malloc_usable_size_r>
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d20f      	bcs.n	80071c8 <_realloc_r+0x48>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4638      	mov	r0, r7
 80071ac:	f7ff ff8e 	bl	80070cc <_malloc_r>
 80071b0:	4605      	mov	r5, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d0f2      	beq.n	800719c <_realloc_r+0x1c>
 80071b6:	4631      	mov	r1, r6
 80071b8:	4622      	mov	r2, r4
 80071ba:	f7ff ff17 	bl	8006fec <memcpy>
 80071be:	4631      	mov	r1, r6
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7ff ff37 	bl	8007034 <_free_r>
 80071c6:	e7e9      	b.n	800719c <_realloc_r+0x1c>
 80071c8:	4635      	mov	r5, r6
 80071ca:	e7e7      	b.n	800719c <_realloc_r+0x1c>

080071cc <_sbrk_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	2300      	movs	r3, #0
 80071d0:	4c05      	ldr	r4, [pc, #20]	; (80071e8 <_sbrk_r+0x1c>)
 80071d2:	4605      	mov	r5, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	f7fb fbb2 	bl	8002940 <_sbrk>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_sbrk_r+0x1a>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_sbrk_r+0x1a>
 80071e4:	602b      	str	r3, [r5, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	20000690 	.word	0x20000690

080071ec <__malloc_lock>:
 80071ec:	4770      	bx	lr

080071ee <__malloc_unlock>:
 80071ee:	4770      	bx	lr

080071f0 <_malloc_usable_size_r>:
 80071f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f4:	1f18      	subs	r0, r3, #4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bfbc      	itt	lt
 80071fa:	580b      	ldrlt	r3, [r1, r0]
 80071fc:	18c0      	addlt	r0, r0, r3
 80071fe:	4770      	bx	lr

08007200 <trunc>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007206:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800720a:	2a13      	cmp	r2, #19
 800720c:	4603      	mov	r3, r0
 800720e:	460c      	mov	r4, r1
 8007210:	dc10      	bgt.n	8007234 <trunc+0x34>
 8007212:	2a00      	cmp	r2, #0
 8007214:	bfb3      	iteet	lt
 8007216:	2000      	movlt	r0, #0
 8007218:	2000      	movge	r0, #0
 800721a:	4b10      	ldrge	r3, [pc, #64]	; (800725c <trunc+0x5c>)
 800721c:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 8007220:	bfa4      	itt	ge
 8007222:	fa43 f202 	asrge.w	r2, r3, r2
 8007226:	ea24 0102 	bicge.w	r1, r4, r2
 800722a:	4603      	mov	r3, r0
 800722c:	460c      	mov	r4, r1
 800722e:	4618      	mov	r0, r3
 8007230:	4621      	mov	r1, r4
 8007232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007234:	2a33      	cmp	r2, #51	; 0x33
 8007236:	dd07      	ble.n	8007248 <trunc+0x48>
 8007238:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800723c:	d1f7      	bne.n	800722e <trunc+0x2e>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	f7f8 ff93 	bl	800016c <__adddf3>
 8007246:	e7f0      	b.n	800722a <trunc+0x2a>
 8007248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800724c:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8007250:	fa22 f505 	lsr.w	r5, r2, r5
 8007254:	ea20 0005 	bic.w	r0, r0, r5
 8007258:	e7e7      	b.n	800722a <trunc+0x2a>
 800725a:	bf00      	nop
 800725c:	000fffff 	.word	0x000fffff

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
