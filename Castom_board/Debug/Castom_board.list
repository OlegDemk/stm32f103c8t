
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac8  08006ac8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006ac8  08006ac8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ac8  08006ac8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac8  08006ac8  00016ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000078  08006b48  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006b48  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e97  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000291d  00000000  00000000  00033f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  00036858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162ea  00000000  00000000  00038a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d88b  00000000  00000000  0004ed72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077e0f  00000000  00000000  0005c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d440c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  000d4488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006900 	.word	0x08006900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006900 	.word	0x08006900

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	d1ed      	bne.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <test_flash_W25Q>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef hspi2;

// ----------------------------------------------------------------------------
void test_flash_W25Q(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
//		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
//	}



	int g=0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]

}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <read_T_and_H_SI7021>:
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
	memset(str, 0 , sizeof(str));
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08d      	sub	sp, #52	; 0x34
 8000fe8:	af02      	add	r7, sp, #8
	uint8_t size=0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	603b      	str	r3, [r7, #0]

	// Read temperature ///////////////////////////////
	STATUS = r_single_Si7021(&data, Temperature);
 8001006:	463b      	mov	r3, r7
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f990 	bl	8001330 <r_single_Si7021>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001016:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800101a:	2b00      	cmp	r3, #0
 800101c:	d000      	beq.n	8001020 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 800101e:	e7fe      	b.n	800101e <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f04f 0100 	mov.w	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff84 	bl	8000f34 <__aeabi_fcmplt>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <read_T_and_H_SI7021+0x52>
 8001032:	4b6b      	ldr	r3, [pc, #428]	; (80011e0 <read_T_and_H_SI7021+0x1fc>)
 8001034:	e000      	b.n	8001038 <read_T_and_H_SI7021+0x54>
 8001036:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <read_T_and_H_SI7021+0x200>)
 8001038:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f04f 0100 	mov.w	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff77 	bl	8000f34 <__aeabi_fcmplt>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <read_T_and_H_SI7021+0x70>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001052:	e000      	b.n	8001056 <read_T_and_H_SI7021+0x72>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 8001058:	69f8      	ldr	r0, [r7, #28]
 800105a:	f7ff ff93 	bl	8000f84 <__aeabi_f2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 8001062:	683c      	ldr	r4, [r7, #0]
 8001064:	69b8      	ldr	r0, [r7, #24]
 8001066:	f7ff fd73 	bl	8000b50 <__aeabi_i2f>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff fcb8 	bl	80009e4 <__aeabi_fsub>
 8001074:	4603      	mov	r3, r0
 8001076:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 8001078:	495b      	ldr	r1, [pc, #364]	; (80011e8 <read_T_and_H_SI7021+0x204>)
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff fdbc 	bl	8000bf8 <__aeabi_fmul>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9c8 	bl	8000418 <__aeabi_f2d>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f005 fc06 	bl	80068a0 <trunc>
 8001094:	4603      	mov	r3, r0
 8001096:	460c      	mov	r4, r1
 8001098:	4618      	mov	r0, r3
 800109a:	4621      	mov	r1, r4
 800109c:	f7ff fc26 	bl	80008ec <__aeabi_d2iz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	613b      	str	r3, [r7, #16]

	// Print Temperature in COM port
	sprintf(str,"T:%s%d.%04d C\r\n", tmpSign, tmpInt1, tmpInt2);      										// convert   in  str
 80010a4:	1d38      	adds	r0, r7, #4
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6a3a      	ldr	r2, [r7, #32]
 80010ae:	494f      	ldr	r1, [pc, #316]	; (80011ec <read_T_and_H_SI7021+0x208>)
 80010b0:	f004 ffdc 	bl	800606c <siprintf>
	size=sizeof(str);
 80010b4:	230a      	movs	r3, #10
 80010b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
 80010ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010be:	b29a      	uxth	r2, r3
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	484a      	ldr	r0, [pc, #296]	; (80011f0 <read_T_and_H_SI7021+0x20c>)
 80010c8:	f004 fbaa 	bl	8005820 <HAL_UART_Transmit>
	memset(str, 0 , sizeof(str));
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	220a      	movs	r2, #10
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 ffc2 	bl	800605c <memset>

	// Save in global variable
	sprintf(str,"T:%s%d C\0", tmpSign, tmpInt1);
 80010d8:	1d38      	adds	r0, r7, #4
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6a3a      	ldr	r2, [r7, #32]
 80010de:	4945      	ldr	r1, [pc, #276]	; (80011f4 <read_T_and_H_SI7021+0x210>)
 80010e0:	f004 ffc4 	bl	800606c <siprintf>
	strcpy(temperature_si7021, str);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4843      	ldr	r0, [pc, #268]	; (80011f8 <read_T_and_H_SI7021+0x214>)
 80010ea:	f004 ffdf 	bl	80060ac <strcpy>
	memset(str, 0 , sizeof(str));
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	220a      	movs	r2, #10
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 ffb1 	bl	800605c <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 8001100:	463b      	mov	r3, r7
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f913 	bl	8001330 <r_single_Si7021>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001110:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001114:	2b00      	cmp	r3, #0
 8001116:	d000      	beq.n	800111a <read_T_and_H_SI7021+0x136>
	{
		while(1){}
 8001118:	e7fe      	b.n	8001118 <read_T_and_H_SI7021+0x134>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f04f 0100 	mov.w	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff07 	bl	8000f34 <__aeabi_fcmplt>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <read_T_and_H_SI7021+0x150>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001132:	e000      	b.n	8001136 <read_T_and_H_SI7021+0x152>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8001138:	69f8      	ldr	r0, [r7, #28]
 800113a:	f7ff ff23 	bl	8000f84 <__aeabi_f2iz>
 800113e:	4603      	mov	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 8001142:	683c      	ldr	r4, [r7, #0]
 8001144:	69b8      	ldr	r0, [r7, #24]
 8001146:	f7ff fd03 	bl	8000b50 <__aeabi_i2f>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fc48 	bl	80009e4 <__aeabi_fsub>
 8001154:	4603      	mov	r3, r0
 8001156:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8001158:	4923      	ldr	r1, [pc, #140]	; (80011e8 <read_T_and_H_SI7021+0x204>)
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff fd4c 	bl	8000bf8 <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f958 	bl	8000418 <__aeabi_f2d>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f005 fb96 	bl	80068a0 <trunc>
 8001174:	4603      	mov	r3, r0
 8001176:	460c      	mov	r4, r1
 8001178:	4618      	mov	r0, r3
 800117a:	4621      	mov	r1, r4
 800117c:	f7ff fbb6 	bl	80008ec <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	613b      	str	r3, [r7, #16]

	// Print in COM port
	sprintf(str,"H:%d.%01d %% \r\n", tmpInt1, tmpInt2);      										// convert   in  str
 8001184:	1d38      	adds	r0, r7, #4
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	491c      	ldr	r1, [pc, #112]	; (80011fc <read_T_and_H_SI7021+0x218>)
 800118c:	f004 ff6e 	bl	800606c <siprintf>
	size=sizeof(str);
 8001190:	230a      	movs	r3, #10
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
 8001196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800119a:	b29a      	uxth	r2, r3
 800119c:	1d39      	adds	r1, r7, #4
 800119e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a2:	4813      	ldr	r0, [pc, #76]	; (80011f0 <read_T_and_H_SI7021+0x20c>)
 80011a4:	f004 fb3c 	bl	8005820 <HAL_UART_Transmit>
	memset(str, 0 , sizeof(str));
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	220a      	movs	r2, #10
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 ff54 	bl	800605c <memset>

	// Save in global variable
	sprintf(str,"H:%d %% \0", tmpInt1);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4911      	ldr	r1, [pc, #68]	; (8001200 <read_T_and_H_SI7021+0x21c>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 ff56 	bl	800606c <siprintf>
	strcpy(humidity_si7021, str);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <read_T_and_H_SI7021+0x220>)
 80011c6:	f004 ff71 	bl	80060ac <strcpy>
	memset(str, 0 , sizeof(str));
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	220a      	movs	r2, #10
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 ff43 	bl	800605c <memset>
}
 80011d6:	bf00      	nop
 80011d8:	372c      	adds	r7, #44	; 0x2c
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	bf00      	nop
 80011e0:	08006928 	.word	0x08006928
 80011e4:	0800692c 	.word	0x0800692c
 80011e8:	461c4000 	.word	0x461c4000
 80011ec:	08006930 	.word	0x08006930
 80011f0:	20000240 	.word	0x20000240
 80011f4:	08006940 	.word	0x08006940
 80011f8:	200000b0 	.word	0x200000b0
 80011fc:	0800694c 	.word	0x0800694c
 8001200:	0800695c 	.word	0x0800695c
 8001204:	200000b8 	.word	0x200000b8

08001208 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f8ed 	bl	80003f4 <__aeabi_i2d>
 800121a:	a311      	add	r3, pc, #68	; (adr r3, 8001260 <process_temp_code+0x58>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f952 	bl	80004c8 <__aeabi_dmul>
 8001224:	4603      	mov	r3, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4618      	mov	r0, r3
 800122a:	4621      	mov	r1, r4
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <process_temp_code+0x68>)
 8001232:	f7ff fa73 	bl	800071c <__aeabi_ddiv>
 8001236:	4603      	mov	r3, r0
 8001238:	460c      	mov	r4, r1
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	a30a      	add	r3, pc, #40	; (adr r3, 8001268 <process_temp_code+0x60>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7fe ff88 	bl	8000158 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	f7ff fb74 	bl	800093c <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	3d70a3d7 	.word	0x3d70a3d7
 8001264:	4065f70a 	.word	0x4065f70a
 8001268:	cccccccd 	.word	0xcccccccd
 800126c:	40476ccc 	.word	0x40476ccc
 8001270:	40f00000 	.word	0x40f00000

08001274 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8b7 	bl	80003f4 <__aeabi_i2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <process_humi_code+0x84>)
 800128c:	f7ff f91c 	bl	80004c8 <__aeabi_dmul>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <process_humi_code+0x88>)
 800129e:	f7ff fa3d 	bl	800071c <__aeabi_ddiv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	4618      	mov	r0, r3
 80012a8:	4621      	mov	r1, r4
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <process_humi_code+0x8c>)
 80012b0:	f7fe ff52 	bl	8000158 <__aeabi_dsub>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fb3e 	bl	800093c <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 80012c4:	f04f 0100 	mov.w	r1, #0
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff fe33 	bl	8000f34 <__aeabi_fcmplt>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <process_humi_code+0x66>
    return 0;
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e009      	b.n	80012ee <process_humi_code+0x7a>
  else if(value > 100)
 80012da:	490a      	ldr	r1, [pc, #40]	; (8001304 <process_humi_code+0x90>)
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff fe47 	bl	8000f70 <__aeabi_fcmpgt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <process_humi_code+0x78>
    return 100;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <process_humi_code+0x90>)
 80012ea:	e000      	b.n	80012ee <process_humi_code+0x7a>
  else
    return (float)value;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	405f4000 	.word	0x405f4000
 80012fc:	40f00000 	.word	0x40f00000
 8001300:	40180000 	.word	0x40180000
 8001304:	42c80000 	.word	0x42c80000

08001308 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3301      	adds	r3, #1
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21b      	sxth	r3, r3
 8001324:	b29b      	uxth	r3, r3
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 8001342:	23e5      	movs	r3, #229	; 0xe5
 8001344:	737b      	strb	r3, [r7, #13]
 8001346:	e008      	b.n	800135a <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 800134e:	23e3      	movs	r3, #227	; 0xe3
 8001350:	737b      	strb	r3, [r7, #13]
 8001352:	e002      	b.n	800135a <r_single_Si7021+0x2a>
  else
    return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001358:	e03c      	b.n	80013d4 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	f107 020d 	add.w	r2, r7, #13
 8001360:	f242 7310 	movw	r3, #10000	; 0x2710
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <r_single_Si7021+0xac>)
 800136a:	f001 fd6d 	bl	8002e48 <HAL_I2C_Master_Transmit>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <r_single_Si7021+0x4a>
    return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001378:	e02c      	b.n	80013d4 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	f107 0208 	add.w	r2, r7, #8
 8001380:	f242 7310 	movw	r3, #10000	; 0x2710
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2302      	movs	r3, #2
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <r_single_Si7021+0xac>)
 800138a:	f001 fe5b 	bl	8003044 <HAL_I2C_Master_Receive>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <r_single_Si7021+0x6a>
    return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001398:	e01c      	b.n	80013d4 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffb2 	bl	8001308 <convert_to_uint16>
 80013a4:	4603      	mov	r3, r0
 80013a6:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <process_humi_code>
 80013b6:	4602      	mov	r2, r0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e009      	b.n	80013d2 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff1e 	bl	8001208 <process_temp_code>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]

  return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200001ec 	.word	0x200001ec

080013e0 <I2C_1_scaner>:
uint32_t timeout=1000;						// timeout for receive
uint16_t STATUS=0;								// Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b09e      	sub	sp, #120	; 0x78
 80013e4:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t size=0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	char str3[100]={0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fe32 	bl	800605c <memset>
	uint8_t size_mas=sizeof(str3);
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t i=0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	sprintf(str3,"I2C_1 SEARCH DEVISES... \r\n");      										// convert   in  str
 8001404:	463b      	mov	r3, r7
 8001406:	4a7f      	ldr	r2, [pc, #508]	; (8001604 <I2C_1_scaner+0x224>)
 8001408:	461c      	mov	r4, r3
 800140a:	4615      	mov	r5, r2
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001414:	c403      	stmia	r4!, {r0, r1}
 8001416:	8022      	strh	r2, [r4, #0]
 8001418:	3402      	adds	r4, #2
 800141a:	0c13      	lsrs	r3, r2, #16
 800141c:	7023      	strb	r3, [r4, #0]
	size=sizeof(str3);
 800141e:	2364      	movs	r3, #100	; 0x64
 8001420:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001424:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001428:	b29a      	uxth	r2, r3
 800142a:	4639      	mov	r1, r7
 800142c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001430:	4875      	ldr	r0, [pc, #468]	; (8001608 <I2C_1_scaner+0x228>)
 8001432:	f004 f9f5 	bl	8005820 <HAL_UART_Transmit>
	uint8_t number_of_device=0;				// How many device controller is found
 8001436:	2300      	movs	r3, #0
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 800143c:	4b73      	ldr	r3, [pc, #460]	; (800160c <I2C_1_scaner+0x22c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e095      	b.n	8001570 <I2C_1_scaner+0x190>
	{
		HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f000 ff4f 	bl	80022e8 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 800144a:	4b70      	ldr	r3, [pc, #448]	; (800160c <I2C_1_scaner+0x22c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	b299      	uxth	r1, r3
 8001454:	4b6e      	ldr	r3, [pc, #440]	; (8001610 <I2C_1_scaner+0x230>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b298      	uxth	r0, r3
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <I2C_1_scaner+0x234>)
 800145c:	881c      	ldrh	r4, [r3, #0]
 800145e:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <I2C_1_scaner+0x234>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <I2C_1_scaner+0x238>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	9202      	str	r2, [sp, #8]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <I2C_1_scaner+0x23c>)
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4623      	mov	r3, r4
 8001470:	4602      	mov	r2, r0
 8001472:	486b      	ldr	r0, [pc, #428]	; (8001620 <I2C_1_scaner+0x240>)
 8001474:	f002 f840 	bl	80034f8 <HAL_I2C_Mem_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b69      	ldr	r3, [pc, #420]	; (8001624 <I2C_1_scaner+0x244>)
 800147e:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8001480:	4b68      	ldr	r3, [pc, #416]	; (8001624 <I2C_1_scaner+0x244>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d16d      	bne.n	8001564 <I2C_1_scaner+0x184>
		{
			number_of_device++;
 8001488:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800148c:	3301      	adds	r3, #1
 800148e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8001492:	4b5e      	ldr	r3, [pc, #376]	; (800160c <I2C_1_scaner+0x22c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b40      	cmp	r3, #64	; 0x40
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b5a      	ldr	r3, [pc, #360]	; (800160c <I2C_1_scaner+0x22c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b3c      	cmp	r3, #60	; 0x3c
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d03c      	beq.n	8001530 <I2C_1_scaner+0x150>
			{
				switch (addres_devise)
 80014b6:	4b55      	ldr	r3, [pc, #340]	; (800160c <I2C_1_scaner+0x22c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b3c      	cmp	r3, #60	; 0x3c
 80014bc:	d01c      	beq.n	80014f8 <I2C_1_scaner+0x118>
 80014be:	2b40      	cmp	r3, #64	; 0x40
 80014c0:	d150      	bne.n	8001564 <I2C_1_scaner+0x184>
				{
					case H_and_T_sensor_SI7021_I2C_ADDR:
						sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
 80014c2:	4b52      	ldr	r3, [pc, #328]	; (800160c <I2C_1_scaner+0x22c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	463b      	mov	r3, r7
 80014ca:	4957      	ldr	r1, [pc, #348]	; (8001628 <I2C_1_scaner+0x248>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fdcd 	bl	800606c <siprintf>
						size=sizeof(str3);
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80014d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4639      	mov	r1, r7
 80014e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e4:	4848      	ldr	r0, [pc, #288]	; (8001608 <I2C_1_scaner+0x228>)
 80014e6:	f004 f99b 	bl	8005820 <HAL_UART_Transmit>
						memset(str3, 0 , sizeof(str3));   // Clean str3
 80014ea:	463b      	mov	r3, r7
 80014ec:	2264      	movs	r2, #100	; 0x64
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 fdb3 	bl	800605c <memset>
                    break;
 80014f6:	e035      	b.n	8001564 <I2C_1_scaner+0x184>

					case  OLED_SSD136_I2C_ADDR:
						sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
 80014f8:	4b44      	ldr	r3, [pc, #272]	; (800160c <I2C_1_scaner+0x22c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	463b      	mov	r3, r7
 8001500:	494a      	ldr	r1, [pc, #296]	; (800162c <I2C_1_scaner+0x24c>)
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fdb2 	bl	800606c <siprintf>
						size=sizeof(str3);
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 800150e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001512:	b29a      	uxth	r2, r3
 8001514:	4639      	mov	r1, r7
 8001516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151a:	483b      	ldr	r0, [pc, #236]	; (8001608 <I2C_1_scaner+0x228>)
 800151c:	f004 f980 	bl	8005820 <HAL_UART_Transmit>
						memset(str3, 0 , sizeof(str3));   // Clean str3
 8001520:	463b      	mov	r3, r7
 8001522:	2264      	movs	r2, #100	; 0x64
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fd98 	bl	800605c <memset>
				    break;
 800152c:	bf00      	nop
 800152e:	e019      	b.n	8001564 <I2C_1_scaner+0x184>
				}
			}

			else
			{
				memset(str3, 0 , sizeof(str3));
 8001530:	463b      	mov	r3, r7
 8001532:	2264      	movs	r2, #100	; 0x64
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fd90 	bl	800605c <memset>
				sprintf(str3,"Device address-0x%x - found........................UNKNOWN DEVICE \r\n",addres_devise);      // convert   in  str
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <I2C_1_scaner+0x22c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	463b      	mov	r3, r7
 8001544:	493a      	ldr	r1, [pc, #232]	; (8001630 <I2C_1_scaner+0x250>)
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fd90 	bl	800606c <siprintf>
				size=sizeof(str3);
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8001552:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001556:	b29a      	uxth	r2, r3
 8001558:	4639      	mov	r1, r7
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	482a      	ldr	r0, [pc, #168]	; (8001608 <I2C_1_scaner+0x228>)
 8001560:	f004 f95e 	bl	8005820 <HAL_UART_Transmit>
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <I2C_1_scaner+0x22c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <I2C_1_scaner+0x22c>)
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <I2C_1_scaner+0x22c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	f47f af65 	bne.w	8001444 <I2C_1_scaner+0x64>
			}
		}
	}
	if(number_of_device==0)  																				// If devices nofound
 800157a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11c      	bne.n	80015bc <I2C_1_scaner+0x1dc>
	{
		memset(str3, 0 , sizeof(str3));
 8001582:	463b      	mov	r3, r7
 8001584:	2264      	movs	r2, #100	; 0x64
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fd67 	bl	800605c <memset>
		sprintf(str3,"Devices no found!!!\r\n");      							// convert   in  str
 800158e:	463b      	mov	r3, r7
 8001590:	4a28      	ldr	r2, [pc, #160]	; (8001634 <I2C_1_scaner+0x254>)
 8001592:	461c      	mov	r4, r3
 8001594:	4615      	mov	r5, r2
 8001596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800159e:	6020      	str	r0, [r4, #0]
 80015a0:	3404      	adds	r4, #4
 80015a2:	8021      	strh	r1, [r4, #0]
		size=sizeof(str3);
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80015aa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4639      	mov	r1, r7
 80015b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <I2C_1_scaner+0x228>)
 80015b8:	f004 f932 	bl	8005820 <HAL_UART_Transmit>
	}

	memset(str3, 0 , sizeof(str3));
 80015bc:	463b      	mov	r3, r7
 80015be:	2264      	movs	r2, #100	; 0x64
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fd4a 	bl	800605c <memset>
	sprintf(str3,"DONE\r\n");      																	// convert   in  str
 80015c8:	463b      	mov	r3, r7
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <I2C_1_scaner+0x258>)
 80015cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d0:	6018      	str	r0, [r3, #0]
 80015d2:	3304      	adds	r3, #4
 80015d4:	8019      	strh	r1, [r3, #0]
 80015d6:	3302      	adds	r3, #2
 80015d8:	0c0a      	lsrs	r2, r1, #16
 80015da:	701a      	strb	r2, [r3, #0]
	size=sizeof(str3);
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80015e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4639      	mov	r1, r7
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <I2C_1_scaner+0x228>)
 80015f0:	f004 f916 	bl	8005820 <HAL_UART_Transmit>

	HAL_Delay(500);
 80015f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f8:	f000 fe76 	bl	80022e8 <HAL_Delay>
}
 80015fc:	bf00      	nop
 80015fe:	3768      	adds	r7, #104	; 0x68
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}
 8001604:	08006968 	.word	0x08006968
 8001608:	20000240 	.word	0x20000240
 800160c:	20000094 	.word	0x20000094
 8001610:	20000095 	.word	0x20000095
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004
 800161c:	20000096 	.word	0x20000096
 8001620:	200001ec 	.word	0x200001ec
 8001624:	20000098 	.word	0x20000098
 8001628:	08006984 	.word	0x08006984
 800162c:	080069d4 	.word	0x080069d4
 8001630:	08006a00 	.word	0x08006a00
 8001634:	08006a48 	.word	0x08006a48
 8001638:	08006a60 	.word	0x08006a60

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001640:	f000 fdf0 	bl	8002224 <HAL_Init>
//
//  } global_data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001644:	f000 f83c 	bl	80016c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001648:	f000 fa70 	bl	8001b2c <MX_GPIO_Init>
  MX_DMA_Init();
 800164c:	f000 fa50 	bl	8001af0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001650:	f000 f982 	bl	8001958 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001654:	f000 f87a 	bl	800174c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001658:	f000 f9cc 	bl	80019f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800165c:	f000 fa1e 	bl	8001a9c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001660:	f000 f8a2 	bl	80017a8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001664:	f000 f8d6 	bl	8001814 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001668:	f000 f9ee 	bl	8001a48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



#if I2C_SCANNER
  I2C_1_scaner();
 800166c:	f7ff feb8 	bl	80013e0 <I2C_1_scaner>
#endif

#if H_a_T_SI7021
  read_T_and_H_SI7021();
 8001670:	f7ff fcb8 	bl	8000fe4 <read_T_and_H_SI7021>
#if OLED
  init_oled();
	  //test_oled();
#endif

HAL_TIM_Base_Start_IT(&htim2);
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <main+0x78>)
 8001676:	f003 fa5d 	bl	8004b34 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
        if(interrupt_flag == 1)
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <main+0x7c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d1fb      	bne.n	800167a <main+0x3e>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <main+0x80>)
 800168a:	f001 fa8d 	bl	8002ba8 <HAL_GPIO_WritePin>

        	read_T_and_H_SI7021();
 800168e:	f7ff fca9 	bl	8000fe4 <read_T_and_H_SI7021>
        	test_flash_W25Q();
 8001692:	f7ff fc9d 	bl	8000fd0 <test_flash_W25Q>

			#if GPS
        		parsing_GPS(GPS_buff, 512);
        		HAL_Delay(500);
			# else
        		HAL_Delay(500);
 8001696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800169a:	f000 fe25 	bl	80022e8 <HAL_Delay>

			#if OLED
        		OLED_prinr_all_data();
			#endif

        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <main+0x80>)
 80016a6:	f001 fa7f 	bl	8002ba8 <HAL_GPIO_WritePin>

			#if FINGERPRINT
        		//fingerprint_test();
			#endif

        	interrupt_flag = 0;
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <main+0x7c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
        if(interrupt_flag == 1)
 80016b0:	e7e3      	b.n	800167a <main+0x3e>
 80016b2:	bf00      	nop
 80016b4:	200002c0 	.word	0x200002c0
 80016b8:	2000009a 	.word	0x2000009a
 80016bc:	40011000 	.word	0x40011000

080016c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b090      	sub	sp, #64	; 0x40
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	2228      	movs	r2, #40	; 0x28
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fcc4 	bl	800605c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fd6b 	bl	80041e4 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001714:	f000 fa8c 	bl	8001c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2302      	movs	r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2102      	movs	r1, #2
 8001732:	4618      	mov	r0, r3
 8001734:	f002 ffd6 	bl	80046e4 <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800173e:	f000 fa77 	bl	8001c30 <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	; 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C1_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MX_I2C1_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_I2C1_Init+0x50>)
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x58>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_I2C1_Init+0x50>)
 800176a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_I2C1_Init+0x50>)
 800178a:	f001 fa25 	bl	8002bd8 <HAL_I2C_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 fa4c 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001ec 	.word	0x200001ec
 80017a0:	40005400 	.word	0x40005400
 80017a4:	000186a0 	.word	0x000186a0

080017a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_SPI2_Init+0x64>)
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <MX_SPI2_Init+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_SPI2_Init+0x64>)
 80017b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_SPI2_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_SPI2_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_SPI2_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_SPI2_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_SPI2_Init+0x64>)
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_SPI2_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_SPI2_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_SPI2_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_SPI2_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_SPI2_Init+0x64>)
 80017f4:	220a      	movs	r2, #10
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_SPI2_Init+0x64>)
 80017fa:	f003 f90f 	bl	8004a1c <HAL_SPI_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001804:	f000 fa14 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000110 	.word	0x20000110
 8001810:	40003800 	.word	0x40003800

08001814 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b096      	sub	sp, #88	; 0x58
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2220      	movs	r2, #32
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fc05 	bl	800605c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001854:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <MX_TIM1_Init+0x140>)
 8001856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <MX_TIM1_Init+0x13c>)
 800185a:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 800185e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8001866:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001868:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800186c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <MX_TIM1_Init+0x13c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001880:	4833      	ldr	r0, [pc, #204]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001882:	f003 f92c 	bl	8004ade <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800188c:	f000 f9d0 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800189a:	4619      	mov	r1, r3
 800189c:	482c      	ldr	r0, [pc, #176]	; (8001950 <MX_TIM1_Init+0x13c>)
 800189e:	f003 fb6f 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018a8:	f000 f9c2 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ac:	4828      	ldr	r0, [pc, #160]	; (8001950 <MX_TIM1_Init+0x13c>)
 80018ae:	f003 f964 	bl	8004b7a <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018b8:	f000 f9ba 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c8:	4619      	mov	r1, r3
 80018ca:	4821      	ldr	r0, [pc, #132]	; (8001950 <MX_TIM1_Init+0x13c>)
 80018cc:	f003 feb4 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018d6:	f000 f9ab 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 80018de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001902:	f003 fa77 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800190c:	f000 f990 	bl	8001c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001934:	f003 fec4 	bl	80056c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800193e:	f000 f977 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM1_Init+0x13c>)
 8001944:	f000 fa6e 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001948:	bf00      	nop
 800194a:	3758      	adds	r7, #88	; 0x58
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000280 	.word	0x20000280
 8001954:	40012c00 	.word	0x40012c00

08001958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <MX_TIM2_Init+0x98>)
 8001976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_TIM2_Init+0x98>)
 800197e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_TIM2_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_TIM2_Init+0x98>)
 800198c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_TIM2_Init+0x98>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <MX_TIM2_Init+0x98>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199e:	4814      	ldr	r0, [pc, #80]	; (80019f0 <MX_TIM2_Init+0x98>)
 80019a0:	f003 f89d 	bl	8004ade <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019aa:	f000 f941 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_TIM2_Init+0x98>)
 80019bc:	f003 fae0 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019c6:	f000 f933 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_TIM2_Init+0x98>)
 80019d8:	f003 fe2e 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019e2:	f000 f925 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200002c0 	.word	0x200002c0

080019f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_USART1_UART_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f003 feab 	bl	8005786 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a36:	f000 f8fb 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000240 	.word	0x20000240
 8001a44:	40013800 	.word	0x40013800

08001a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART2_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f003 fe81 	bl	8005786 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 f8d1 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000300 	.word	0x20000300
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_USART3_UART_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	f003 fe57 	bl	8005786 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f000 f8a7 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001ac 	.word	0x200001ac
 8001aec:	40004800 	.word	0x40004800

08001af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_DMA_Init+0x38>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <MX_DMA_Init+0x38>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_DMA_Init+0x38>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	200d      	movs	r0, #13
 8001b14:	f000 fce1 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b18:	200d      	movs	r0, #13
 8001b1a:	f000 fcfa 	bl	8002512 <HAL_NVIC_EnableIRQ>

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b5e:	f043 0320 	orr.w	r3, r3, #32
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_GPIO_Init+0xd0>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba6:	4816      	ldr	r0, [pc, #88]	; (8001c00 <MX_GPIO_Init+0xd4>)
 8001ba8:	f000 fffe 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_M25Q_GPIO_Port, CS_M25Q_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb2:	4814      	ldr	r0, [pc, #80]	; (8001c04 <MX_GPIO_Init+0xd8>)
 8001bb4:	f000 fff8 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <MX_GPIO_Init+0xd4>)
 8001bd2:	f000 fe8f 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_GPIO_Init+0xd8>)
 8001bf0:	f000 fe80 	bl	80028f4 <HAL_GPIO_Init>

}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40010c00 	.word	0x40010c00

08001c08 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c18:	d102      	bne.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
        }
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000009a 	.word	0x2000009a

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6193      	str	r3, [r2, #24]
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_MspInit+0x60>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_MspInit+0x60>)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000

08001ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <HAL_I2C_MspInit+0x70>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d123      	bne.n	8001d08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_I2C_MspInit+0x74>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <HAL_I2C_MspInit+0x74>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_I2C_MspInit+0x74>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cdc:	2312      	movs	r3, #18
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480b      	ldr	r0, [pc, #44]	; (8001d18 <HAL_I2C_MspInit+0x78>)
 8001cec:	f000 fe02 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_I2C_MspInit+0x74>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_I2C_MspInit+0x74>)
 8001cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_I2C_MspInit+0x74>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40005400 	.word	0x40005400
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010c00 	.word	0x40010c00

08001d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d131      	bne.n	8001da0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_SPI_MspInit+0x90>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_SPI_MspInit+0x90>)
 8001d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_SPI_MspInit+0x90>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_SPI_MspInit+0x90>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_SPI_MspInit+0x90>)
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_SPI_MspInit+0x90>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d6c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <HAL_SPI_MspInit+0x94>)
 8001d82:	f000 fdb7 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_SPI_MspInit+0x94>)
 8001d9c:	f000 fdaa 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40003800 	.word	0x40003800
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010c00 	.word	0x40010c00

08001db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10c      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd0:	6193      	str	r3, [r2, #24]
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dde:	e018      	b.n	8001e12 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d113      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	201c      	movs	r0, #28
 8001e08:	f000 fb67 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e0c:	201c      	movs	r0, #28
 8001e0e:	f000 fb80 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_TIM_MspPostInit+0x5c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d118      	bne.n	8001e76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_TIM_MspPostInit+0x60>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_TIM_MspPostInit+0x60>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_TIM_MspPostInit+0x60>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_TIM_MspPostInit+0x64>)
 8001e72:	f000 fd3f 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010800 	.word	0x40010800

08001e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <HAL_UART_MspInit+0x1c8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d132      	bne.n	8001f12 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eac:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a69      	ldr	r2, [pc, #420]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b64      	ldr	r3, [pc, #400]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a63      	ldr	r2, [pc, #396]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	4619      	mov	r1, r3
 8001ef0:	485a      	ldr	r0, [pc, #360]	; (800205c <HAL_UART_MspInit+0x1d0>)
 8001ef2:	f000 fcff 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4854      	ldr	r0, [pc, #336]	; (800205c <HAL_UART_MspInit+0x1d0>)
 8001f0c:	f000 fcf2 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f10:	e09b      	b.n	800204a <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_UART_MspInit+0x1d4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d130      	bne.n	8001f7e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f26:	61d3      	str	r3, [r2, #28]
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a47      	ldr	r2, [pc, #284]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	483f      	ldr	r0, [pc, #252]	; (800205c <HAL_UART_MspInit+0x1d0>)
 8001f60:	f000 fcc8 	bl	80028f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	4619      	mov	r1, r3
 8001f76:	4839      	ldr	r0, [pc, #228]	; (800205c <HAL_UART_MspInit+0x1d0>)
 8001f78:	f000 fcbc 	bl	80028f4 <HAL_GPIO_Init>
}
 8001f7c:	e065      	b.n	800204a <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a38      	ldr	r2, [pc, #224]	; (8002064 <HAL_UART_MspInit+0x1d8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d160      	bne.n	800204a <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f88:	4b33      	ldr	r3, [pc, #204]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a32      	ldr	r2, [pc, #200]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a2c      	ldr	r2, [pc, #176]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_UART_MspInit+0x1cc>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4826      	ldr	r0, [pc, #152]	; (8002068 <HAL_UART_MspInit+0x1dc>)
 8001fce:	f000 fc91 	bl	80028f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0320 	add.w	r3, r7, #32
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4820      	ldr	r0, [pc, #128]	; (8002068 <HAL_UART_MspInit+0x1dc>)
 8001fe8:	f000 fc84 	bl	80028f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_UART_MspInit+0x1e4>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_UART_MspInit+0x1e0>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002012:	2220      	movs	r2, #32
 8002014:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800201e:	4813      	ldr	r0, [pc, #76]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002020:	f000 fa92 	bl	8002548 <HAL_DMA_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800202a:	f7ff fe01 	bl	8001c30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_UART_MspInit+0x1e0>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2027      	movs	r0, #39	; 0x27
 8002040:	f000 fa4b 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002044:	2027      	movs	r0, #39	; 0x27
 8002046:	f000 fa64 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40013800 	.word	0x40013800
 8002058:	40021000 	.word	0x40021000
 800205c:	40010800 	.word	0x40010800
 8002060:	40004400 	.word	0x40004400
 8002064:	40004800 	.word	0x40004800
 8002068:	40010c00 	.word	0x40010c00
 800206c:	20000168 	.word	0x20000168
 8002070:	40020030 	.word	0x40020030

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <HardFault_Handler+0x4>

08002086 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <BusFault_Handler+0x4>

08002092 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <UsageFault_Handler+0x4>

08002098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 f8f6 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA1_Channel3_IRQHandler+0x10>)
 80020ce:	f000 fb0b 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000168 	.word	0x20000168

080020dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM2_IRQHandler+0x10>)
 80020e2:	f002 fd7e 	bl	8004be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200002c0 	.word	0x200002c0

080020f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <USART3_IRQHandler+0x10>)
 80020f6:	f003 fc2d 	bl	8005954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200001ac 	.word	0x200001ac

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f003 ff68 	bl	8006008 <__errno>
 8002138:	4602      	mov	r2, r0
 800213a:	230c      	movs	r3, #12
 800213c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20005000 	.word	0x20005000
 8002164:	00000400 	.word	0x00000400
 8002168:	2000009c 	.word	0x2000009c
 800216c:	20000348 	.word	0x20000348

08002170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <SystemInit+0x5c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <SystemInit+0x5c>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <SystemInit+0x5c>)
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4911      	ldr	r1, [pc, #68]	; (80021cc <SystemInit+0x5c>)
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <SystemInit+0x60>)
 8002188:	4013      	ands	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <SystemInit+0x5c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <SystemInit+0x5c>)
 8002192:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <SystemInit+0x5c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <SystemInit+0x5c>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <SystemInit+0x5c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <SystemInit+0x5c>)
 80021ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SystemInit+0x5c>)
 80021b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SystemInit+0x64>)
 80021be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	f8ff0000 	.word	0xf8ff0000
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021da:	e003      	b.n	80021e4 <LoopCopyDataInit>

080021dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021e2:	3104      	adds	r1, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021ec:	d3f6      	bcc.n	80021dc <CopyDataInit>
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021f0:	e002      	b.n	80021f8 <LoopFillZerobss>

080021f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021f4:	f842 3b04 	str.w	r3, [r2], #4

080021f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021fc:	d3f9      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021fe:	f7ff ffb7 	bl	8002170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f003 ff07 	bl	8006014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002206:	f7ff fa19 	bl	800163c <main>
  bx lr
 800220a:	4770      	bx	lr
  ldr r3, =_sidata
 800220c:	08006ad0 	.word	0x08006ad0
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002214:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002218:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800221c:	20000348 	.word	0x20000348

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x28>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 f945 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fcfc 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f95d 	bl	800252e <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f000 f925 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000008 	.word	0x20000008
 80022a8:	20000010 	.word	0x20000010
 80022ac:	2000000c 	.word	0x2000000c

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x1c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x20>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_IncTick+0x20>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000010 	.word	0x20000010
 80022d0:	20000340 	.word	0x20000340

080022d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_GetTick+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000340 	.word	0x20000340

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_Delay+0x40>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffe0 	bl	80022d4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000010 	.word	0x20000010

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <__NVIC_EnableIRQ+0x34>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a4:	f7ff ff90 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff2d 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff42 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff90 	bl	800241c <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5f 	bl	80023c8 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff35 	bl	8002390 <__NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffa2 	bl	8002480 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e043      	b.n	80025e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_DMA_Init+0xa8>)
 8002566:	4413      	add	r3, r2
 8002568:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_DMA_Init+0xac>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	009a      	lsls	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_DMA_Init+0xb0>)
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002592:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002596:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	bffdfff8 	.word	0xbffdfff8
 80025f4:	cccccccd 	.word	0xcccccccd
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260e:	2b02      	cmp	r3, #2
 8002610:	d005      	beq.n	800261e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e051      	b.n	80026c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020e 	bic.w	r2, r2, #14
 800262c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_DMA_Abort_IT+0xd0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d029      	beq.n	800269c <HAL_DMA_Abort_IT+0xa0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <HAL_DMA_Abort_IT+0xd4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Abort_IT+0x9c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_DMA_Abort_IT+0xd8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01a      	beq.n	8002692 <HAL_DMA_Abort_IT+0x96>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_DMA_Abort_IT+0xdc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d012      	beq.n	800268c <HAL_DMA_Abort_IT+0x90>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_DMA_Abort_IT+0xe0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00a      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_DMA_Abort_IT+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d102      	bne.n	8002680 <HAL_DMA_Abort_IT+0x84>
 800267a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800267e:	e00e      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002684:	e00b      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268a:	e008      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	e005      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002696:	e002      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 8002698:	2310      	movs	r3, #16
 800269a:	e000      	b.n	800269e <HAL_DMA_Abort_IT+0xa2>
 800269c:	2301      	movs	r3, #1
 800269e:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <HAL_DMA_Abort_IT+0xe8>)
 80026a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
    } 
  }
  return status;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40020008 	.word	0x40020008
 80026d0:	4002001c 	.word	0x4002001c
 80026d4:	40020030 	.word	0x40020030
 80026d8:	40020044 	.word	0x40020044
 80026dc:	40020058 	.word	0x40020058
 80026e0:	4002006c 	.word	0x4002006c
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d04f      	beq.n	80027b0 <HAL_DMA_IRQHandler+0xc8>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a66      	ldr	r2, [pc, #408]	; (80028d8 <HAL_DMA_IRQHandler+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d029      	beq.n	8002796 <HAL_DMA_IRQHandler+0xae>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a65      	ldr	r2, [pc, #404]	; (80028dc <HAL_DMA_IRQHandler+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_IRQHandler+0xaa>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_DMA_IRQHandler+0x1f8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01a      	beq.n	800278c <HAL_DMA_IRQHandler+0xa4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a62      	ldr	r2, [pc, #392]	; (80028e4 <HAL_DMA_IRQHandler+0x1fc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d012      	beq.n	8002786 <HAL_DMA_IRQHandler+0x9e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <HAL_DMA_IRQHandler+0x200>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x98>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5f      	ldr	r2, [pc, #380]	; (80028ec <HAL_DMA_IRQHandler+0x204>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d102      	bne.n	800277a <HAL_DMA_IRQHandler+0x92>
 8002774:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002778:	e00e      	b.n	8002798 <HAL_DMA_IRQHandler+0xb0>
 800277a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800277e:	e00b      	b.n	8002798 <HAL_DMA_IRQHandler+0xb0>
 8002780:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002784:	e008      	b.n	8002798 <HAL_DMA_IRQHandler+0xb0>
 8002786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800278a:	e005      	b.n	8002798 <HAL_DMA_IRQHandler+0xb0>
 800278c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002790:	e002      	b.n	8002798 <HAL_DMA_IRQHandler+0xb0>
 8002792:	2340      	movs	r3, #64	; 0x40
 8002794:	e000      	b.n	8002798 <HAL_DMA_IRQHandler+0xb0>
 8002796:	2304      	movs	r3, #4
 8002798:	4a55      	ldr	r2, [pc, #340]	; (80028f0 <HAL_DMA_IRQHandler+0x208>)
 800279a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8094 	beq.w	80028ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027ae:	e08e      	b.n	80028ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	2202      	movs	r2, #2
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d056      	beq.n	800286e <HAL_DMA_IRQHandler+0x186>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d051      	beq.n	800286e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10b      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 020a 	bic.w	r2, r2, #10
 80027e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a38      	ldr	r2, [pc, #224]	; (80028d8 <HAL_DMA_IRQHandler+0x1f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d029      	beq.n	800284e <HAL_DMA_IRQHandler+0x166>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a37      	ldr	r2, [pc, #220]	; (80028dc <HAL_DMA_IRQHandler+0x1f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0x162>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a35      	ldr	r2, [pc, #212]	; (80028e0 <HAL_DMA_IRQHandler+0x1f8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_IRQHandler+0x15c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a34      	ldr	r2, [pc, #208]	; (80028e4 <HAL_DMA_IRQHandler+0x1fc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d012      	beq.n	800283e <HAL_DMA_IRQHandler+0x156>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <HAL_DMA_IRQHandler+0x200>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00a      	beq.n	8002838 <HAL_DMA_IRQHandler+0x150>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a31      	ldr	r2, [pc, #196]	; (80028ec <HAL_DMA_IRQHandler+0x204>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d102      	bne.n	8002832 <HAL_DMA_IRQHandler+0x14a>
 800282c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002830:	e00e      	b.n	8002850 <HAL_DMA_IRQHandler+0x168>
 8002832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002836:	e00b      	b.n	8002850 <HAL_DMA_IRQHandler+0x168>
 8002838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283c:	e008      	b.n	8002850 <HAL_DMA_IRQHandler+0x168>
 800283e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002842:	e005      	b.n	8002850 <HAL_DMA_IRQHandler+0x168>
 8002844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002848:	e002      	b.n	8002850 <HAL_DMA_IRQHandler+0x168>
 800284a:	2320      	movs	r3, #32
 800284c:	e000      	b.n	8002850 <HAL_DMA_IRQHandler+0x168>
 800284e:	2302      	movs	r3, #2
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_DMA_IRQHandler+0x208>)
 8002852:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	d034      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800286c:	e02f      	b.n	80028ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2208      	movs	r2, #8
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d028      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x1e8>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 020e 	bic.w	r2, r2, #14
 8002896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
    }
  }
  return;
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
}
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40020008 	.word	0x40020008
 80028dc:	4002001c 	.word	0x4002001c
 80028e0:	40020030 	.word	0x40020030
 80028e4:	40020044 	.word	0x40020044
 80028e8:	40020058 	.word	0x40020058
 80028ec:	4002006c 	.word	0x4002006c
 80028f0:	40020000 	.word	0x40020000

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b08b      	sub	sp, #44	; 0x2c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002906:	e127      	b.n	8002b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002908:	2201      	movs	r2, #1
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8116 	bne.w	8002b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b12      	cmp	r3, #18
 800292c:	d034      	beq.n	8002998 <HAL_GPIO_Init+0xa4>
 800292e:	2b12      	cmp	r3, #18
 8002930:	d80d      	bhi.n	800294e <HAL_GPIO_Init+0x5a>
 8002932:	2b02      	cmp	r3, #2
 8002934:	d02b      	beq.n	800298e <HAL_GPIO_Init+0x9a>
 8002936:	2b02      	cmp	r3, #2
 8002938:	d804      	bhi.n	8002944 <HAL_GPIO_Init+0x50>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d031      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 800293e:	2b01      	cmp	r3, #1
 8002940:	d01c      	beq.n	800297c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002942:	e048      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002944:	2b03      	cmp	r3, #3
 8002946:	d043      	beq.n	80029d0 <HAL_GPIO_Init+0xdc>
 8002948:	2b11      	cmp	r3, #17
 800294a:	d01b      	beq.n	8002984 <HAL_GPIO_Init+0x90>
          break;
 800294c:	e043      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800294e:	4a89      	ldr	r2, [pc, #548]	; (8002b74 <HAL_GPIO_Init+0x280>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d026      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002954:	4a87      	ldr	r2, [pc, #540]	; (8002b74 <HAL_GPIO_Init+0x280>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d806      	bhi.n	8002968 <HAL_GPIO_Init+0x74>
 800295a:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_GPIO_Init+0x284>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d020      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002960:	4a86      	ldr	r2, [pc, #536]	; (8002b7c <HAL_GPIO_Init+0x288>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01d      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
          break;
 8002966:	e036      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002968:	4a85      	ldr	r2, [pc, #532]	; (8002b80 <HAL_GPIO_Init+0x28c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 800296e:	4a85      	ldr	r2, [pc, #532]	; (8002b84 <HAL_GPIO_Init+0x290>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d016      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
 8002974:	4a84      	ldr	r2, [pc, #528]	; (8002b88 <HAL_GPIO_Init+0x294>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xae>
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e028      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e023      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01e      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e019      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e012      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e008      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2bff      	cmp	r3, #255	; 0xff
 80029da:	d801      	bhi.n	80029e0 <HAL_GPIO_Init+0xec>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	e001      	b.n	80029e4 <HAL_GPIO_Init+0xf0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d802      	bhi.n	80029f2 <HAL_GPIO_Init+0xfe>
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x104>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3b08      	subs	r3, #8
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	210f      	movs	r1, #15
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	431a      	orrs	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8096 	beq.w	8002b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a26:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <HAL_GPIO_Init+0x2a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x19e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_GPIO_Init+0x2a4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x19a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_GPIO_Init+0x2a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x196>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_GPIO_Init+0x2ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x192>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x1a0>
 8002a92:	2300      	movs	r3, #0
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	f002 0203 	and.w	r2, r2, #3
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	4093      	lsls	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa4:	493a      	ldr	r1, [pc, #232]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4938      	ldr	r1, [pc, #224]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
 8002aca:	e006      	b.n	8002ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4933      	ldr	r1, [pc, #204]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	492e      	ldr	r1, [pc, #184]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4924      	ldr	r1, [pc, #144]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	491a      	ldr	r1, [pc, #104]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
 8002b42:	e006      	b.n	8002b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4915      	ldr	r1, [pc, #84]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f aed0 	bne.w	8002908 <HAL_GPIO_Init+0x14>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	372c      	adds	r7, #44	; 0x2c
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	10210000 	.word	0x10210000
 8002b78:	10110000 	.word	0x10110000
 8002b7c:	10120000 	.word	0x10120000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10320000 	.word	0x10320000
 8002b88:	10220000 	.word	0x10220000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40010800 	.word	0x40010800
 8002b98:	40010c00 	.word	0x40010c00
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40011400 	.word	0x40011400
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e11f      	b.n	8002e2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff f84e 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c3c:	f001 fea8 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8002c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4a7b      	ldr	r2, [pc, #492]	; (8002e34 <HAL_I2C_Init+0x25c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d807      	bhi.n	8002c5c <HAL_I2C_Init+0x84>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a7a      	ldr	r2, [pc, #488]	; (8002e38 <HAL_I2C_Init+0x260>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e006      	b.n	8002c6a <HAL_I2C_Init+0x92>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a77      	ldr	r2, [pc, #476]	; (8002e3c <HAL_I2C_Init+0x264>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0db      	b.n	8002e2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a72      	ldr	r2, [pc, #456]	; (8002e40 <HAL_I2C_Init+0x268>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0c9b      	lsrs	r3, r3, #18
 8002c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a64      	ldr	r2, [pc, #400]	; (8002e34 <HAL_I2C_Init+0x25c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <HAL_I2C_Init+0xd4>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	e009      	b.n	8002cc0 <HAL_I2C_Init+0xe8>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a63      	ldr	r2, [pc, #396]	; (8002e44 <HAL_I2C_Init+0x26c>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4956      	ldr	r1, [pc, #344]	; (8002e34 <HAL_I2C_Init+0x25c>)
 8002cdc:	428b      	cmp	r3, r1
 8002cde:	d80d      	bhi.n	8002cfc <HAL_I2C_Init+0x124>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e59      	subs	r1, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	bf38      	it	cc
 8002cf8:	2304      	movcc	r3, #4
 8002cfa:	e04f      	b.n	8002d9c <HAL_I2C_Init+0x1c4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d111      	bne.n	8002d28 <HAL_I2C_Init+0x150>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e58      	subs	r0, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e012      	b.n	8002d4e <HAL_I2C_Init+0x176>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Init+0x17e>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e022      	b.n	8002d9c <HAL_I2C_Init+0x1c4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10e      	bne.n	8002d7c <HAL_I2C_Init+0x1a4>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1e58      	subs	r0, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	440b      	add	r3, r1
 8002d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Init+0x1c4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	0099      	lsls	r1, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6809      	ldr	r1, [r1, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6911      	ldr	r1, [r2, #16]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	000186a0 	.word	0x000186a0
 8002e38:	001e847f 	.word	0x001e847f
 8002e3c:	003d08ff 	.word	0x003d08ff
 8002e40:	431bde83 	.word	0x431bde83
 8002e44:	10624dd3 	.word	0x10624dd3

08002e48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	461a      	mov	r2, r3
 8002e54:	460b      	mov	r3, r1
 8002e56:	817b      	strh	r3, [r7, #10]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fa3a 	bl	80022d4 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	f040 80e0 	bne.w	8003030 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2319      	movs	r3, #25
 8002e76:	2201      	movs	r2, #1
 8002e78:	4970      	ldr	r1, [pc, #448]	; (800303c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 ffd6 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0d3      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x50>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e0cc      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d007      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2221      	movs	r2, #33	; 0x21
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	893a      	ldrh	r2, [r7, #8]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_I2C_Master_Transmit+0x1f8>)
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f00:	8979      	ldrh	r1, [r7, #10]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fd58 	bl	80039bc <I2C_MasterRequestWrite>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08d      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f2c:	e066      	b.n	8002ffc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f001 f850 	bl	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d107      	bne.n	8002f56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d11b      	bne.n	8002fd0 <HAL_I2C_Master_Transmit+0x188>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d017      	beq.n	8002fd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	6a39      	ldr	r1, [r7, #32]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f001 f840 	bl	800405a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d107      	bne.n	8002ff8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e01a      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d194      	bne.n	8002f2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	00100002 	.word	0x00100002
 8003040:	ffff0000 	.word	0xffff0000

08003044 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
 8003054:	4613      	mov	r3, r2
 8003056:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff f93a 	bl	80022d4 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	f040 8238 	bne.w	80034e0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2319      	movs	r3, #25
 8003076:	2201      	movs	r2, #1
 8003078:	497e      	ldr	r1, [pc, #504]	; (8003274 <HAL_I2C_Master_Receive+0x230>)
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fed6 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	e22b      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_Master_Receive+0x54>
 8003094:	2302      	movs	r3, #2
 8003096:	e224      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d007      	beq.n	80030be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2222      	movs	r2, #34	; 0x22
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2210      	movs	r2, #16
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	893a      	ldrh	r2, [r7, #8]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <HAL_I2C_Master_Receive+0x234>)
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fcda 	bl	8003ac0 <I2C_MasterRequestRead>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1e5      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e1b9      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b01      	cmp	r3, #1
 800314c:	d11d      	bne.n	800318a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800315e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003186:	b662      	cpsie	i
 8003188:	e197      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	2b02      	cmp	r3, #2
 8003190:	d11d      	bne.n	80031ce <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031a2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031ca:	b662      	cpsie	i
 80031cc:	e175      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031f4:	e161      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	f200 811a 	bhi.w	8003434 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b01      	cmp	r3, #1
 8003206:	d123      	bne.n	8003250 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 ff65 	bl	80040dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e162      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800324e:	e134      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b02      	cmp	r3, #2
 8003256:	d150      	bne.n	80032fa <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <HAL_I2C_Master_Receive+0x238>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fde2 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e137      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
 8003272:	bf00      	nop
 8003274:	00100002 	.word	0x00100002
 8003278:	ffff0000 	.word	0xffff0000
 800327c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003280:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032c4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f8:	e0df      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2200      	movs	r2, #0
 8003302:	497a      	ldr	r1, [pc, #488]	; (80034ec <HAL_I2C_Master_Receive+0x4a8>)
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fd91 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0e6      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003324:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003358:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <HAL_I2C_Master_Receive+0x4ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	08db      	lsrs	r3, r3, #3
 800335e:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_I2C_Master_Receive+0x4b0>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	0a1a      	lsrs	r2, r3, #8
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00da      	lsls	r2, r3, #3
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	3b01      	subs	r3, #1
 8003376:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d117      	bne.n	80033ae <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033a0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e099      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d1da      	bne.n	8003372 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fe:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003432:	e042      	b.n	80034ba <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fe4f 	bl	80040dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04c      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d118      	bne.n	80034ba <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f47f ae99 	bne.w	80031f6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	00010004 	.word	0x00010004
 80034f0:	20000008 	.word	0x20000008
 80034f4:	14f8b589 	.word	0x14f8b589

080034f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4603      	mov	r3, r0
 8003508:	817b      	strh	r3, [r7, #10]
 800350a:	460b      	mov	r3, r1
 800350c:	813b      	strh	r3, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003516:	f7fe fedd 	bl	80022d4 <HAL_GetTick>
 800351a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b20      	cmp	r3, #32
 8003526:	f040 823d 	bne.w	80039a4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2319      	movs	r3, #25
 8003530:	2201      	movs	r2, #1
 8003532:	4981      	ldr	r1, [pc, #516]	; (8003738 <HAL_I2C_Mem_Read+0x240>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fc79 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
 8003542:	e230      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Mem_Read+0x5a>
 800354e:	2302      	movs	r3, #2
 8003550:	e229      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d007      	beq.n	8003578 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2222      	movs	r2, #34	; 0x22
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a61      	ldr	r2, [pc, #388]	; (800373c <HAL_I2C_Mem_Read+0x244>)
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ba:	88f8      	ldrh	r0, [r7, #6]
 80035bc:	893a      	ldrh	r2, [r7, #8]
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	4603      	mov	r3, r0
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fb46 	bl	8003c5c <I2C_RequestMemoryRead>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1e5      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d113      	bne.n	800360a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e1b9      	b.n	800397e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b01      	cmp	r3, #1
 8003610:	d11d      	bne.n	800364e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003620:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003622:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800364a:	b662      	cpsie	i
 800364c:	e197      	b.n	800397e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	2b02      	cmp	r3, #2
 8003654:	d11d      	bne.n	8003692 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003664:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003666:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800368e:	b662      	cpsie	i
 8003690:	e175      	b.n	800397e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036b8:	e161      	b.n	800397e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	2b03      	cmp	r3, #3
 80036c0:	f200 811a 	bhi.w	80038f8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d123      	bne.n	8003714 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fd03 	bl	80040dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e162      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003712:	e134      	b.n	800397e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b02      	cmp	r3, #2
 800371a:	d150      	bne.n	80037be <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	2200      	movs	r2, #0
 8003724:	4906      	ldr	r1, [pc, #24]	; (8003740 <HAL_I2C_Mem_Read+0x248>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fb80 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e137      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
 8003736:	bf00      	nop
 8003738:	00100002 	.word	0x00100002
 800373c:	ffff0000 	.word	0xffff0000
 8003740:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003744:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003788:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037bc:	e0df      	b.n	800397e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	2200      	movs	r2, #0
 80037c6:	497a      	ldr	r1, [pc, #488]	; (80039b0 <HAL_I2C_Mem_Read+0x4b8>)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fb2f 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0e6      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800381c:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <HAL_I2C_Mem_Read+0x4bc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	4a65      	ldr	r2, [pc, #404]	; (80039b8 <HAL_I2C_Mem_Read+0x4c0>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	0a1a      	lsrs	r2, r3, #8
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00da      	lsls	r2, r3, #3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	3b01      	subs	r3, #1
 800383a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d117      	bne.n	8003872 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003864:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e099      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d1da      	bne.n	8003836 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f6:	e042      	b.n	800397e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fbed 	bl	80040dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e04c      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d118      	bne.n	800397e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	f47f ae99 	bne.w	80036ba <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3728      	adds	r7, #40	; 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	00010004 	.word	0x00010004
 80039b4:	20000008 	.word	0x20000008
 80039b8:	14f8b589 	.word	0x14f8b589

080039bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	460b      	mov	r3, r1
 80039ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d006      	beq.n	80039e6 <I2C_MasterRequestWrite+0x2a>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <I2C_MasterRequestWrite+0x2a>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e00b      	b.n	8003a10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	2b12      	cmp	r3, #18
 80039fe:	d107      	bne.n	8003a10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fa05 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a36:	d103      	bne.n	8003a40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e035      	b.n	8003ab0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a4c:	d108      	bne.n	8003a60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	e01b      	b.n	8003a98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	11db      	asrs	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 030f 	orn	r3, r3, #15
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	490e      	ldr	r1, [pc, #56]	; (8003ab8 <I2C_MasterRequestWrite+0xfc>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa2b 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e010      	b.n	8003ab0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4907      	ldr	r1, [pc, #28]	; (8003abc <I2C_MasterRequestWrite+0x100>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fa1b 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	00010008 	.word	0x00010008
 8003abc:	00010002 	.word	0x00010002

08003ac0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	460b      	mov	r3, r1
 8003ace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d006      	beq.n	8003afa <I2C_MasterRequestRead+0x3a>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d003      	beq.n	8003afa <I2C_MasterRequestRead+0x3a>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af8:	d108      	bne.n	8003b0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e00b      	b.n	8003b24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	2b11      	cmp	r3, #17
 8003b12:	d107      	bne.n	8003b24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f97b 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4a:	d103      	bne.n	8003b54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e079      	b.n	8003c4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b60:	d108      	bne.n	8003b74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	e05f      	b.n	8003c34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	11db      	asrs	r3, r3, #7
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f063 030f 	orn	r3, r3, #15
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4930      	ldr	r1, [pc, #192]	; (8003c54 <I2C_MasterRequestRead+0x194>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9a1 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e054      	b.n	8003c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ba2:	897b      	ldrh	r3, [r7, #10]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4929      	ldr	r1, [pc, #164]	; (8003c58 <I2C_MasterRequestRead+0x198>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f991 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e044      	b.n	8003c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f919 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d103      	bne.n	8003c18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e017      	b.n	8003c4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	11db      	asrs	r3, r3, #7
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0306 	and.w	r3, r3, #6
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f063 030e 	orn	r3, r3, #14
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4907      	ldr	r1, [pc, #28]	; (8003c58 <I2C_MasterRequestRead+0x198>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f94d 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00010008 	.word	0x00010008
 8003c58:	00010002 	.word	0x00010002

08003c5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	813b      	strh	r3, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f8c2 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbc:	d103      	bne.n	8003cc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0aa      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	4952      	ldr	r1, [pc, #328]	; (8003e28 <I2C_RequestMemoryRead+0x1cc>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f8fa 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e097      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	6a39      	ldr	r1, [r7, #32]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f964 	bl	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d107      	bne.n	8003d2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e076      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e021      	b.n	8003d88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	6a39      	ldr	r1, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f93e 	bl	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e050      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7e:	893b      	ldrh	r3, [r7, #8]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	6a39      	ldr	r1, [r7, #32]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f923 	bl	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e035      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f82b 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d103      	bne.n	8003df4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e013      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	4906      	ldr	r1, [pc, #24]	; (8003e28 <I2C_RequestMemoryRead+0x1cc>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f863 	bl	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	00010002 	.word	0x00010002

08003e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	e025      	b.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e44:	d021      	beq.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe fa45 	bl	80022d4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d116      	bne.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e023      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10d      	bne.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	e00c      	b.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d0b6      	beq.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ee8:	e051      	b.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef8:	d123      	bne.n	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e046      	b.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f48:	d021      	beq.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7fe f9c3 	bl	80022d4 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d116      	bne.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0220 	orr.w	r2, r3, #32
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e020      	b.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10c      	bne.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e00b      	b.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d18d      	bne.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe4:	e02d      	b.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8ce 	bl	8004188 <I2C_IsAcknowledgeFailed>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e02d      	b.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ffc:	d021      	beq.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe f969 	bl	80022d4 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d116      	bne.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e007      	b.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b80      	cmp	r3, #128	; 0x80
 800404e:	d1ca      	bne.n	8003fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004066:	e02d      	b.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f88d 	bl	8004188 <I2C_IsAcknowledgeFailed>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e02d      	b.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407e:	d021      	beq.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004080:	f7fe f928 	bl	80022d4 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d116      	bne.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e007      	b.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d1ca      	bne.n	8004068 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040e8:	e042      	b.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d119      	bne.n	800412c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0210 	mvn.w	r2, #16
 8004100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e029      	b.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412c:	f7fe f8d2 	bl	80022d4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d1b5      	bne.n	80040ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419e:	d11b      	bne.n	80041d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e26c      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8087 	beq.w	8004312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004204:	4b92      	ldr	r3, [pc, #584]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b04      	cmp	r3, #4
 800420e:	d00c      	beq.n	800422a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004210:	4b8f      	ldr	r3, [pc, #572]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d112      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
 800421c:	4b8c      	ldr	r3, [pc, #560]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d10b      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422a:	4b89      	ldr	r3, [pc, #548]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d06c      	beq.n	8004310 <HAL_RCC_OscConfig+0x12c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d168      	bne.n	8004310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e246      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x76>
 800424c:	4b80      	ldr	r3, [pc, #512]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a7f      	ldr	r2, [pc, #508]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e02e      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7a      	ldr	r2, [pc, #488]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b78      	ldr	r3, [pc, #480]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a77      	ldr	r2, [pc, #476]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0xbc>
 8004286:	4b72      	ldr	r3, [pc, #456]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a71      	ldr	r2, [pc, #452]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6e      	ldr	r2, [pc, #440]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 80042a0:	4b6b      	ldr	r3, [pc, #428]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b68      	ldr	r3, [pc, #416]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a67      	ldr	r2, [pc, #412]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe f808 	bl	80022d4 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe f804 	bl	80022d4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1fa      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe4>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fd fff4 	bl	80022d4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fd fff0 	bl	80022d4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1e6      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b53      	ldr	r3, [pc, #332]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x10c>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800431e:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800432a:	4b49      	ldr	r3, [pc, #292]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x18c>
 8004336:	4b46      	ldr	r3, [pc, #280]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b43      	ldr	r3, [pc, #268]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x176>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1ba      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4939      	ldr	r1, [pc, #228]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_RCC_OscConfig+0x270>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fd ffa9 	bl	80022d4 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fd ffa5 	bl	80022d4 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e19b      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4927      	ldr	r1, [pc, #156]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b26      	ldr	r3, [pc, #152]	; (8004454 <HAL_RCC_OscConfig+0x270>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd ff88 	bl	80022d4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fd ff84 	bl	80022d4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e17a      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03a      	beq.n	8004468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d019      	beq.n	800442e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <HAL_RCC_OscConfig+0x274>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004400:	f7fd ff68 	bl	80022d4 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004408:	f7fd ff64 	bl	80022d4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e15a      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_RCC_OscConfig+0x26c>)
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004426:	2001      	movs	r0, #1
 8004428:	f000 fada 	bl	80049e0 <RCC_Delay>
 800442c:	e01c      	b.n	8004468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_RCC_OscConfig+0x274>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004434:	f7fd ff4e 	bl	80022d4 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443a:	e00f      	b.n	800445c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7fd ff4a 	bl	80022d4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d908      	bls.n	800445c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e140      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	42420000 	.word	0x42420000
 8004458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	4b9e      	ldr	r3, [pc, #632]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e9      	bne.n	800443c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a6 	beq.w	80045c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447a:	4b97      	ldr	r3, [pc, #604]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b94      	ldr	r3, [pc, #592]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4a93      	ldr	r2, [pc, #588]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	61d3      	str	r3, [r2, #28]
 8004492:	4b91      	ldr	r3, [pc, #580]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b8e      	ldr	r3, [pc, #568]	; (80046dc <HAL_RCC_OscConfig+0x4f8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b8b      	ldr	r3, [pc, #556]	; (80046dc <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a8a      	ldr	r2, [pc, #552]	; (80046dc <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd ff0b 	bl	80022d4 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd ff07 	bl	80022d4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0fd      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b81      	ldr	r3, [pc, #516]	; (80046dc <HAL_RCC_OscConfig+0x4f8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x312>
 80044e8:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4a7a      	ldr	r2, [pc, #488]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6213      	str	r3, [r2, #32]
 80044f4:	e02d      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x334>
 80044fe:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a75      	ldr	r2, [pc, #468]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	4b73      	ldr	r3, [pc, #460]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4a72      	ldr	r2, [pc, #456]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6213      	str	r3, [r2, #32]
 8004516:	e01c      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b05      	cmp	r3, #5
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x356>
 8004520:	4b6d      	ldr	r3, [pc, #436]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a6c      	ldr	r2, [pc, #432]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6213      	str	r3, [r2, #32]
 8004538:	e00b      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 800453a:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a66      	ldr	r2, [pc, #408]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a63      	ldr	r2, [pc, #396]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d015      	beq.n	8004586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fd febb 	bl	80022d4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fd feb7 	bl	80022d4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0ab      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ee      	beq.n	8004562 <HAL_RCC_OscConfig+0x37e>
 8004584:	e014      	b.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fd fea5 	bl	80022d4 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fd fea1 	bl	80022d4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	; 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e095      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ee      	bne.n	800458e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4a47      	ldr	r2, [pc, #284]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8081 	beq.w	80046ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045cc:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d061      	beq.n	800469c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d146      	bne.n	800466e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e0:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_OscConfig+0x4fc>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd fe75 	bl	80022d4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd fe71 	bl	80022d4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e067      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004600:	4b35      	ldr	r3, [pc, #212]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d108      	bne.n	8004628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004616:	4b30      	ldr	r3, [pc, #192]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	492d      	ldr	r1, [pc, #180]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a19      	ldr	r1, [r3, #32]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	430b      	orrs	r3, r1
 800463a:	4927      	ldr	r1, [pc, #156]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x4fc>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fd fe45 	bl	80022d4 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd fe41 	bl	80022d4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e037      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x46a>
 800466c:	e02f      	b.n	80046ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_RCC_OscConfig+0x4fc>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fd fe2e 	bl	80022d4 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fd fe2a 	bl	80022d4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e020      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x498>
 800469a:	e018      	b.n	80046ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e013      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42420060 	.word	0x42420060

080046e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d0      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 0207 	bic.w	r2, r3, #7
 800470e:	4965      	ldr	r1, [pc, #404]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800474a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004762:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d040      	beq.n	8004804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d115      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e073      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	4b3d      	ldr	r3, [pc, #244]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06b      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4936      	ldr	r1, [pc, #216]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d4:	f7fd fd7e 	bl	80022d4 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fd fd7a 	bl	80022d4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e053      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d210      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 0207 	bic.w	r2, r3, #7
 800481a:	4922      	ldr	r1, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4601      	mov	r1, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x1c8>)
 8004884:	5cd3      	ldrb	r3, [r2, r3]
 8004886:	fa21 f303 	lsr.w	r3, r1, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1cc>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd fcdc 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40021000 	.word	0x40021000
 80048ac:	08006a7c 	.word	0x08006a7c
 80048b0:	20000008 	.word	0x20000008
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b490      	push	{r4, r7}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048be:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048c0:	1d3c      	adds	r4, r7, #4
 80048c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x46>
 80048f6:	e02d      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048fa:	623b      	str	r3, [r7, #32]
      break;
 80048fc:	e02d      	b.n	800495a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	0c9b      	lsrs	r3, r3, #18
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800490a:	4413      	add	r3, r2
 800490c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004910:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	0c5b      	lsrs	r3, r3, #17
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800492a:	4413      	add	r3, r2
 800492c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004930:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004936:	fb02 f203 	mul.w	r2, r2, r3
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
 8004942:	e004      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	623b      	str	r3, [r7, #32]
      break;
 8004952:	e002      	b.n	800495a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004956:	623b      	str	r3, [r7, #32]
      break;
 8004958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800495a:	6a3b      	ldr	r3, [r7, #32]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bc90      	pop	{r4, r7}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	08006a68 	.word	0x08006a68
 800496c:	08006a78 	.word	0x08006a78
 8004970:	40021000 	.word	0x40021000
 8004974:	007a1200 	.word	0x007a1200
 8004978:	003d0900 	.word	0x003d0900

0800497c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004980:	4b02      	ldr	r3, [pc, #8]	; (800498c <HAL_RCC_GetHCLKFreq+0x10>)
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	20000008 	.word	0x20000008

08004990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004994:	f7ff fff2 	bl	800497c <HAL_RCC_GetHCLKFreq>
 8004998:	4601      	mov	r1, r0
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4a03      	ldr	r2, [pc, #12]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	08006a8c 	.word	0x08006a8c

080049b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049bc:	f7ff ffde 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049c0:	4601      	mov	r1, r0
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0adb      	lsrs	r3, r3, #11
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4a03      	ldr	r2, [pc, #12]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	08006a8c 	.word	0x08006a8c

080049e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <RCC_Delay+0x34>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <RCC_Delay+0x38>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0a5b      	lsrs	r3, r3, #9
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049fc:	bf00      	nop
  }
  while (Delay --);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1e5a      	subs	r2, r3, #1
 8004a02:	60fa      	str	r2, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f9      	bne.n	80049fc <RCC_Delay+0x1c>
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000008 	.word	0x20000008
 8004a18:	10624dd3 	.word	0x10624dd3

08004a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e053      	b.n	8004ad6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fd f967 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	ea42 0103 	orr.w	r1, r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	0c1a      	lsrs	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f002 0204 	and.w	r2, r2, #4
 8004ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e01d      	b.n	8004b2c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7fd f955 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 fb0b 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d007      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e01d      	b.n	8004bc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f815 	bl	8004bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f000 fabd 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d122      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d11b      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0202 	mvn.w	r2, #2
 8004c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa6b 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa5e 	bl	80050ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa6d 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d122      	bne.n	8004c92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d11b      	bne.n	8004c92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0204 	mvn.w	r2, #4
 8004c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa41 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004c7e:	e005      	b.n	8004c8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa34 	bl	80050ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa43 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d122      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d11b      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0208 	mvn.w	r2, #8
 8004cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fa17 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004cd2:	e005      	b.n	8004ce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa0a 	bl	80050ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa19 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d122      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d11b      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0210 	mvn.w	r2, #16
 8004d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2208      	movs	r2, #8
 8004d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f9ed 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8004d26:	e005      	b.n	8004d34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f9e0 	bl	80050ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9ef 	bl	8005112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d10e      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0201 	mvn.w	r2, #1
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7fc ff51 	bl	8001c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fcf1 	bl	8005774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9b3 	bl	8005124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d10e      	bne.n	8004dea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0220 	mvn.w	r2, #32
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fcbc 	bl	8005762 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0b4      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	f200 809f 	bhi.w	8004f64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004f65 	.word	0x08004f65
 8004e34:	08004f65 	.word	0x08004f65
 8004e38:	08004f65 	.word	0x08004f65
 8004e3c:	08004ea1 	.word	0x08004ea1
 8004e40:	08004f65 	.word	0x08004f65
 8004e44:	08004f65 	.word	0x08004f65
 8004e48:	08004f65 	.word	0x08004f65
 8004e4c:	08004ee3 	.word	0x08004ee3
 8004e50:	08004f65 	.word	0x08004f65
 8004e54:	08004f65 	.word	0x08004f65
 8004e58:	08004f65 	.word	0x08004f65
 8004e5c:	08004f23 	.word	0x08004f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f9c8 	bl	80051fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0208 	orr.w	r2, r2, #8
 8004e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0204 	bic.w	r2, r2, #4
 8004e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6999      	ldr	r1, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	619a      	str	r2, [r3, #24]
      break;
 8004e9e:	e062      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fa0e 	bl	80052c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6999      	ldr	r1, [r3, #24]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	021a      	lsls	r2, r3, #8
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	619a      	str	r2, [r3, #24]
      break;
 8004ee0:	e041      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fa57 	bl	800539c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0208 	orr.w	r2, r2, #8
 8004efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0204 	bic.w	r2, r2, #4
 8004f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69d9      	ldr	r1, [r3, #28]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	61da      	str	r2, [r3, #28]
      break;
 8004f20:	e021      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 faa1 	bl	8005470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69d9      	ldr	r1, [r3, #28]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	021a      	lsls	r2, r3, #8
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	61da      	str	r2, [r3, #28]
      break;
 8004f62:	e000      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIM_ConfigClockSource+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e0a6      	b.n	80050e6 <HAL_TIM_ConfigClockSource+0x166>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d067      	beq.n	80050a0 <HAL_TIM_ConfigClockSource+0x120>
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d80b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x6c>
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d073      	beq.n	80050c0 <HAL_TIM_ConfigClockSource+0x140>
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d802      	bhi.n	8004fe2 <HAL_TIM_ConfigClockSource+0x62>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d06f      	beq.n	80050c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fe0:	e078      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d06c      	beq.n	80050c0 <HAL_TIM_ConfigClockSource+0x140>
 8004fe6:	2b30      	cmp	r3, #48	; 0x30
 8004fe8:	d06a      	beq.n	80050c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004fea:	e073      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fec:	2b70      	cmp	r3, #112	; 0x70
 8004fee:	d00d      	beq.n	800500c <HAL_TIM_ConfigClockSource+0x8c>
 8004ff0:	2b70      	cmp	r3, #112	; 0x70
 8004ff2:	d804      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x7e>
 8004ff4:	2b50      	cmp	r3, #80	; 0x50
 8004ff6:	d033      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0xe0>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d041      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ffc:	e06a      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d066      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x152>
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005008:	d017      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800500a:	e063      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f000 faed 	bl	80055fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800502e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	609a      	str	r2, [r3, #8]
      break;
 8005038:	e04c      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f000 fad6 	bl	80055fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505c:	609a      	str	r2, [r3, #8]
      break;
 800505e:	e039      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	461a      	mov	r2, r3
 800506e:	f000 fa4d 	bl	800550c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2150      	movs	r1, #80	; 0x50
 8005078:	4618      	mov	r0, r3
 800507a:	f000 faa4 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 800507e:	e029      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	461a      	mov	r2, r3
 800508e:	f000 fa6b 	bl	8005568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2160      	movs	r1, #96	; 0x60
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fa94 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 800509e:	e019      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	461a      	mov	r2, r3
 80050ae:	f000 fa2d 	bl	800550c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fa84 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 80050be:	e009      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 fa7b 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 80050d0:	e000      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
	...

08005138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <TIM_Base_SetConfig+0xb8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0x30>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0x30>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <TIM_Base_SetConfig+0xbc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0x30>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a25      	ldr	r2, [pc, #148]	; (80051f8 <TIM_Base_SetConfig+0xc0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <TIM_Base_SetConfig+0xb8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0x62>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0x62>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <TIM_Base_SetConfig+0xbc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0x62>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <TIM_Base_SetConfig+0xc0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <TIM_Base_SetConfig+0xb8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d103      	bne.n	80051e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	615a      	str	r2, [r3, #20]
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800

080051fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0302 	bic.w	r3, r3, #2
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <TIM_OC1_SetConfig+0xc8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d10c      	bne.n	8005272 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0308 	bic.w	r3, r3, #8
 800525e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0304 	bic.w	r3, r3, #4
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <TIM_OC1_SetConfig+0xc8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d111      	bne.n	800529e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40012c00 	.word	0x40012c00

080052c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0210 	bic.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0320 	bic.w	r3, r3, #32
 8005312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <TIM_OC2_SetConfig+0xd0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d10d      	bne.n	8005344 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <TIM_OC2_SetConfig+0xd0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00

0800539c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <TIM_OC3_SetConfig+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10d      	bne.n	8005416 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_OC3_SetConfig+0xd0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d113      	bne.n	8005446 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	621a      	str	r2, [r3, #32]
}
 8005460:	bf00      	nop
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00

08005470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0f      	ldr	r2, [pc, #60]	; (8005508 <TIM_OC4_SetConfig+0x98>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00

0800550c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 030a 	bic.w	r3, r3, #10
 8005548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f023 0210 	bic.w	r2, r3, #16
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	031b      	lsls	r3, r3, #12
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f043 0307 	orr.w	r3, r3, #7
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b087      	sub	sp, #28
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	431a      	orrs	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4313      	orrs	r3, r2
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	609a      	str	r2, [r3, #8]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e032      	b.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005688:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4313      	orrs	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056d8:	2302      	movs	r3, #2
 80056da:	e03d      	b.n	8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e03f      	b.n	8005818 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fc fb6d 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2224      	movs	r2, #36	; 0x24
 80057b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb42 	bl	8005e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b20      	cmp	r3, #32
 800583e:	f040 8083 	bne.w	8005948 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_UART_Transmit+0x2e>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07b      	b.n	800594a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_UART_Transmit+0x40>
 800585c:	2302      	movs	r3, #2
 800585e:	e074      	b.n	800594a <HAL_UART_Transmit+0x12a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2221      	movs	r2, #33	; 0x21
 8005872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005876:	f7fc fd2d 	bl	80022d4 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005888:	e042      	b.n	8005910 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a0:	d122      	bne.n	80058e8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f968 	bl	8005b82 <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e046      	b.n	800594a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ce:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3302      	adds	r3, #2
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	e017      	b.n	8005910 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	e013      	b.n	8005910 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2200      	movs	r2, #0
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f945 	bl	8005b82 <UART_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e023      	b.n	800594a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	60ba      	str	r2, [r7, #8]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1b7      	bne.n	800588a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2200      	movs	r2, #0
 8005922:	2140      	movs	r1, #64	; 0x40
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f92c 	bl	8005b82 <UART_WaitOnFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e00a      	b.n	800594a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_UART_IRQHandler+0x52>
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9d7 	bl	8005d52 <UART_Receive_IT>
      return;
 80059a4:	e0cc      	b.n	8005b40 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80ab 	beq.w	8005b04 <HAL_UART_IRQHandler+0x1b0>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <HAL_UART_IRQHandler+0x70>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80a0 	beq.w	8005b04 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_UART_IRQHandler+0x90>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059dc:	f043 0201 	orr.w	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_UART_IRQHandler+0xb0>
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fc:	f043 0202 	orr.w	r2, r3, #2
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_UART_IRQHandler+0xd0>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	f043 0204 	orr.w	r2, r3, #4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_UART_IRQHandler+0xf0>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3c:	f043 0208 	orr.w	r2, r3, #8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d078      	beq.n	8005b3e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_UART_IRQHandler+0x112>
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f976 	bl	8005d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <HAL_UART_IRQHandler+0x13a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d031      	beq.n	8005af2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8c1 	bl	8005c16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d023      	beq.n	8005aea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d013      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <HAL_UART_IRQHandler+0x1f4>)
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fc fd98 	bl	80025fc <HAL_DMA_Abort_IT>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00e      	b.n	8005b00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f844 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00a      	b.n	8005b00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f840 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e006      	b.n	8005b00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f83c 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005afe:	e01e      	b.n	8005b3e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	bf00      	nop
    return;
 8005b02:	e01c      	b.n	8005b3e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_IRQHandler+0x1cc>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8ad 	bl	8005c78 <UART_Transmit_IT>
    return;
 8005b1e:	e00f      	b.n	8005b40 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_UART_IRQHandler+0x1ec>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8f4 	bl	8005d22 <UART_EndTransmit_IT>
    return;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005b3e:	bf00      	nop
  }
}
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08005c51 	.word	0x08005c51

08005b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b92:	e02c      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9a:	d028      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba2:	f7fc fb97 	bl	80022d4 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d21d      	bcs.n	8005bee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bc0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e00f      	b.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d0c3      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c2c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff ff80 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b21      	cmp	r3, #33	; 0x21
 8005c8a:	d144      	bne.n	8005d16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c94:	d11a      	bne.n	8005ccc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005caa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	621a      	str	r2, [r3, #32]
 8005cbe:	e00e      	b.n	8005cde <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]
 8005cca:	e008      	b.n	8005cde <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	1c59      	adds	r1, r3, #1
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6211      	str	r1, [r2, #32]
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4619      	mov	r1, r3
 8005cec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff ff02 	bl	8005b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b22      	cmp	r3, #34	; 0x22
 8005d64:	d171      	bne.n	8005e4a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	d123      	bne.n	8005db8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	629a      	str	r2, [r3, #40]	; 0x28
 8005d9a:	e029      	b.n	8005df0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	629a      	str	r2, [r3, #40]	; 0x28
 8005db6:	e01b      	b.n	8005df0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6858      	ldr	r0, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6291      	str	r1, [r2, #40]	; 0x28
 8005dd0:	b2c2      	uxtb	r2, r0
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e00c      	b.n	8005df0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	1c58      	adds	r0, r3, #1
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	6288      	str	r0, [r1, #40]	; 0x28
 8005de8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d120      	bne.n	8005e46 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0220 	bic.w	r2, r2, #32
 8005e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fe8e 	bl	8005b5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e002      	b.n	8005e4c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005e4a:	2302      	movs	r3, #2
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e8e:	f023 030c 	bic.w	r3, r3, #12
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a52      	ldr	r2, [pc, #328]	; (8006000 <UART_SetConfig+0x1ac>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d14e      	bne.n	8005f5a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fe fd7c 	bl	80049b8 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009a      	lsls	r2, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	4a4a      	ldr	r2, [pc, #296]	; (8006004 <UART_SetConfig+0x1b0>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	0119      	lsls	r1, r3, #4
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef8:	4b42      	ldr	r3, [pc, #264]	; (8006004 <UART_SetConfig+0x1b0>)
 8005efa:	fba3 0302 	umull	r0, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2064      	movs	r0, #100	; 0x64
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	3332      	adds	r3, #50	; 0x32
 8005f0c:	4a3d      	ldr	r2, [pc, #244]	; (8006004 <UART_SetConfig+0x1b0>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f18:	4419      	add	r1, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f30:	4b34      	ldr	r3, [pc, #208]	; (8006004 <UART_SetConfig+0x1b0>)
 8005f32:	fba3 0302 	umull	r0, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2064      	movs	r0, #100	; 0x64
 8005f3a:	fb00 f303 	mul.w	r3, r0, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	3332      	adds	r3, #50	; 0x32
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <UART_SetConfig+0x1b0>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	440a      	add	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005f58:	e04d      	b.n	8005ff6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7fe fd19 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8005f5e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009a      	lsls	r2, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	4a23      	ldr	r2, [pc, #140]	; (8006004 <UART_SetConfig+0x1b0>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	0119      	lsls	r1, r3, #4
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009a      	lsls	r2, r3, #2
 8005f8a:	441a      	add	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f96:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <UART_SetConfig+0x1b0>)
 8005f98:	fba3 0302 	umull	r0, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2064      	movs	r0, #100	; 0x64
 8005fa0:	fb00 f303 	mul.w	r3, r0, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	3332      	adds	r3, #50	; 0x32
 8005faa:	4a16      	ldr	r2, [pc, #88]	; (8006004 <UART_SetConfig+0x1b0>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb6:	4419      	add	r1, r3
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009a      	lsls	r2, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <UART_SetConfig+0x1b0>)
 8005fd0:	fba3 0302 	umull	r0, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2064      	movs	r0, #100	; 0x64
 8005fd8:	fb00 f303 	mul.w	r3, r0, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <UART_SetConfig+0x1b0>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40013800 	.word	0x40013800
 8006004:	51eb851f 	.word	0x51eb851f

08006008 <__errno>:
 8006008:	4b01      	ldr	r3, [pc, #4]	; (8006010 <__errno+0x8>)
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000014 	.word	0x20000014

08006014 <__libc_init_array>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	2500      	movs	r5, #0
 8006018:	4e0c      	ldr	r6, [pc, #48]	; (800604c <__libc_init_array+0x38>)
 800601a:	4c0d      	ldr	r4, [pc, #52]	; (8006050 <__libc_init_array+0x3c>)
 800601c:	1ba4      	subs	r4, r4, r6
 800601e:	10a4      	asrs	r4, r4, #2
 8006020:	42a5      	cmp	r5, r4
 8006022:	d109      	bne.n	8006038 <__libc_init_array+0x24>
 8006024:	f000 fc6c 	bl	8006900 <_init>
 8006028:	2500      	movs	r5, #0
 800602a:	4e0a      	ldr	r6, [pc, #40]	; (8006054 <__libc_init_array+0x40>)
 800602c:	4c0a      	ldr	r4, [pc, #40]	; (8006058 <__libc_init_array+0x44>)
 800602e:	1ba4      	subs	r4, r4, r6
 8006030:	10a4      	asrs	r4, r4, #2
 8006032:	42a5      	cmp	r5, r4
 8006034:	d105      	bne.n	8006042 <__libc_init_array+0x2e>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800603c:	4798      	blx	r3
 800603e:	3501      	adds	r5, #1
 8006040:	e7ee      	b.n	8006020 <__libc_init_array+0xc>
 8006042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006046:	4798      	blx	r3
 8006048:	3501      	adds	r5, #1
 800604a:	e7f2      	b.n	8006032 <__libc_init_array+0x1e>
 800604c:	08006ac8 	.word	0x08006ac8
 8006050:	08006ac8 	.word	0x08006ac8
 8006054:	08006ac8 	.word	0x08006ac8
 8006058:	08006acc 	.word	0x08006acc

0800605c <memset>:
 800605c:	4603      	mov	r3, r0
 800605e:	4402      	add	r2, r0
 8006060:	4293      	cmp	r3, r2
 8006062:	d100      	bne.n	8006066 <memset+0xa>
 8006064:	4770      	bx	lr
 8006066:	f803 1b01 	strb.w	r1, [r3], #1
 800606a:	e7f9      	b.n	8006060 <memset+0x4>

0800606c <siprintf>:
 800606c:	b40e      	push	{r1, r2, r3}
 800606e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006072:	b500      	push	{lr}
 8006074:	b09c      	sub	sp, #112	; 0x70
 8006076:	ab1d      	add	r3, sp, #116	; 0x74
 8006078:	9002      	str	r0, [sp, #8]
 800607a:	9006      	str	r0, [sp, #24]
 800607c:	9107      	str	r1, [sp, #28]
 800607e:	9104      	str	r1, [sp, #16]
 8006080:	4808      	ldr	r0, [pc, #32]	; (80060a4 <siprintf+0x38>)
 8006082:	4909      	ldr	r1, [pc, #36]	; (80060a8 <siprintf+0x3c>)
 8006084:	f853 2b04 	ldr.w	r2, [r3], #4
 8006088:	9105      	str	r1, [sp, #20]
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	a902      	add	r1, sp, #8
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	f000 f86e 	bl	8006170 <_svfiprintf_r>
 8006094:	2200      	movs	r2, #0
 8006096:	9b02      	ldr	r3, [sp, #8]
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	b01c      	add	sp, #112	; 0x70
 800609c:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a0:	b003      	add	sp, #12
 80060a2:	4770      	bx	lr
 80060a4:	20000014 	.word	0x20000014
 80060a8:	ffff0208 	.word	0xffff0208

080060ac <strcpy>:
 80060ac:	4603      	mov	r3, r0
 80060ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b2:	f803 2b01 	strb.w	r2, [r3], #1
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	d1f9      	bne.n	80060ae <strcpy+0x2>
 80060ba:	4770      	bx	lr

080060bc <__ssputs_r>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	688e      	ldr	r6, [r1, #8]
 80060c2:	4682      	mov	sl, r0
 80060c4:	429e      	cmp	r6, r3
 80060c6:	460c      	mov	r4, r1
 80060c8:	4690      	mov	r8, r2
 80060ca:	4699      	mov	r9, r3
 80060cc:	d837      	bhi.n	800613e <__ssputs_r+0x82>
 80060ce:	898a      	ldrh	r2, [r1, #12]
 80060d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060d4:	d031      	beq.n	800613a <__ssputs_r+0x7e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	6825      	ldr	r5, [r4, #0]
 80060da:	6909      	ldr	r1, [r1, #16]
 80060dc:	1a6f      	subs	r7, r5, r1
 80060de:	6965      	ldr	r5, [r4, #20]
 80060e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80060e8:	f109 0301 	add.w	r3, r9, #1
 80060ec:	443b      	add	r3, r7
 80060ee:	429d      	cmp	r5, r3
 80060f0:	bf38      	it	cc
 80060f2:	461d      	movcc	r5, r3
 80060f4:	0553      	lsls	r3, r2, #21
 80060f6:	d530      	bpl.n	800615a <__ssputs_r+0x9e>
 80060f8:	4629      	mov	r1, r5
 80060fa:	f000 fb37 	bl	800676c <_malloc_r>
 80060fe:	4606      	mov	r6, r0
 8006100:	b950      	cbnz	r0, 8006118 <__ssputs_r+0x5c>
 8006102:	230c      	movs	r3, #12
 8006104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006108:	f8ca 3000 	str.w	r3, [sl]
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006118:	463a      	mov	r2, r7
 800611a:	6921      	ldr	r1, [r4, #16]
 800611c:	f000 fab6 	bl	800668c <memcpy>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	6126      	str	r6, [r4, #16]
 800612e:	443e      	add	r6, r7
 8006130:	6026      	str	r6, [r4, #0]
 8006132:	464e      	mov	r6, r9
 8006134:	6165      	str	r5, [r4, #20]
 8006136:	1bed      	subs	r5, r5, r7
 8006138:	60a5      	str	r5, [r4, #8]
 800613a:	454e      	cmp	r6, r9
 800613c:	d900      	bls.n	8006140 <__ssputs_r+0x84>
 800613e:	464e      	mov	r6, r9
 8006140:	4632      	mov	r2, r6
 8006142:	4641      	mov	r1, r8
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	f000 faac 	bl	80066a2 <memmove>
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	2000      	movs	r0, #0
 800614e:	1b9b      	subs	r3, r3, r6
 8006150:	60a3      	str	r3, [r4, #8]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	441e      	add	r6, r3
 8006156:	6026      	str	r6, [r4, #0]
 8006158:	e7dc      	b.n	8006114 <__ssputs_r+0x58>
 800615a:	462a      	mov	r2, r5
 800615c:	f000 fb60 	bl	8006820 <_realloc_r>
 8006160:	4606      	mov	r6, r0
 8006162:	2800      	cmp	r0, #0
 8006164:	d1e2      	bne.n	800612c <__ssputs_r+0x70>
 8006166:	6921      	ldr	r1, [r4, #16]
 8006168:	4650      	mov	r0, sl
 800616a:	f000 fab3 	bl	80066d4 <_free_r>
 800616e:	e7c8      	b.n	8006102 <__ssputs_r+0x46>

08006170 <_svfiprintf_r>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	461d      	mov	r5, r3
 8006176:	898b      	ldrh	r3, [r1, #12]
 8006178:	b09d      	sub	sp, #116	; 0x74
 800617a:	061f      	lsls	r7, r3, #24
 800617c:	4680      	mov	r8, r0
 800617e:	460c      	mov	r4, r1
 8006180:	4616      	mov	r6, r2
 8006182:	d50f      	bpl.n	80061a4 <_svfiprintf_r+0x34>
 8006184:	690b      	ldr	r3, [r1, #16]
 8006186:	b96b      	cbnz	r3, 80061a4 <_svfiprintf_r+0x34>
 8006188:	2140      	movs	r1, #64	; 0x40
 800618a:	f000 faef 	bl	800676c <_malloc_r>
 800618e:	6020      	str	r0, [r4, #0]
 8006190:	6120      	str	r0, [r4, #16]
 8006192:	b928      	cbnz	r0, 80061a0 <_svfiprintf_r+0x30>
 8006194:	230c      	movs	r3, #12
 8006196:	f8c8 3000 	str.w	r3, [r8]
 800619a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800619e:	e0c8      	b.n	8006332 <_svfiprintf_r+0x1c2>
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	6163      	str	r3, [r4, #20]
 80061a4:	2300      	movs	r3, #0
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	2320      	movs	r3, #32
 80061aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061ae:	2330      	movs	r3, #48	; 0x30
 80061b0:	f04f 0b01 	mov.w	fp, #1
 80061b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b8:	9503      	str	r5, [sp, #12]
 80061ba:	4637      	mov	r7, r6
 80061bc:	463d      	mov	r5, r7
 80061be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061c2:	b10b      	cbz	r3, 80061c8 <_svfiprintf_r+0x58>
 80061c4:	2b25      	cmp	r3, #37	; 0x25
 80061c6:	d13e      	bne.n	8006246 <_svfiprintf_r+0xd6>
 80061c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80061cc:	d00b      	beq.n	80061e6 <_svfiprintf_r+0x76>
 80061ce:	4653      	mov	r3, sl
 80061d0:	4632      	mov	r2, r6
 80061d2:	4621      	mov	r1, r4
 80061d4:	4640      	mov	r0, r8
 80061d6:	f7ff ff71 	bl	80060bc <__ssputs_r>
 80061da:	3001      	adds	r0, #1
 80061dc:	f000 80a4 	beq.w	8006328 <_svfiprintf_r+0x1b8>
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	4453      	add	r3, sl
 80061e4:	9309      	str	r3, [sp, #36]	; 0x24
 80061e6:	783b      	ldrb	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 809d 	beq.w	8006328 <_svfiprintf_r+0x1b8>
 80061ee:	2300      	movs	r3, #0
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006200:	931a      	str	r3, [sp, #104]	; 0x68
 8006202:	462f      	mov	r7, r5
 8006204:	2205      	movs	r2, #5
 8006206:	f817 1b01 	ldrb.w	r1, [r7], #1
 800620a:	4850      	ldr	r0, [pc, #320]	; (800634c <_svfiprintf_r+0x1dc>)
 800620c:	f000 fa30 	bl	8006670 <memchr>
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	b9d0      	cbnz	r0, 800624a <_svfiprintf_r+0xda>
 8006214:	06d9      	lsls	r1, r3, #27
 8006216:	bf44      	itt	mi
 8006218:	2220      	movmi	r2, #32
 800621a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800621e:	071a      	lsls	r2, r3, #28
 8006220:	bf44      	itt	mi
 8006222:	222b      	movmi	r2, #43	; 0x2b
 8006224:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006228:	782a      	ldrb	r2, [r5, #0]
 800622a:	2a2a      	cmp	r2, #42	; 0x2a
 800622c:	d015      	beq.n	800625a <_svfiprintf_r+0xea>
 800622e:	462f      	mov	r7, r5
 8006230:	2000      	movs	r0, #0
 8006232:	250a      	movs	r5, #10
 8006234:	9a07      	ldr	r2, [sp, #28]
 8006236:	4639      	mov	r1, r7
 8006238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800623c:	3b30      	subs	r3, #48	; 0x30
 800623e:	2b09      	cmp	r3, #9
 8006240:	d94d      	bls.n	80062de <_svfiprintf_r+0x16e>
 8006242:	b1b8      	cbz	r0, 8006274 <_svfiprintf_r+0x104>
 8006244:	e00f      	b.n	8006266 <_svfiprintf_r+0xf6>
 8006246:	462f      	mov	r7, r5
 8006248:	e7b8      	b.n	80061bc <_svfiprintf_r+0x4c>
 800624a:	4a40      	ldr	r2, [pc, #256]	; (800634c <_svfiprintf_r+0x1dc>)
 800624c:	463d      	mov	r5, r7
 800624e:	1a80      	subs	r0, r0, r2
 8006250:	fa0b f000 	lsl.w	r0, fp, r0
 8006254:	4318      	orrs	r0, r3
 8006256:	9004      	str	r0, [sp, #16]
 8006258:	e7d3      	b.n	8006202 <_svfiprintf_r+0x92>
 800625a:	9a03      	ldr	r2, [sp, #12]
 800625c:	1d11      	adds	r1, r2, #4
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	9103      	str	r1, [sp, #12]
 8006262:	2a00      	cmp	r2, #0
 8006264:	db01      	blt.n	800626a <_svfiprintf_r+0xfa>
 8006266:	9207      	str	r2, [sp, #28]
 8006268:	e004      	b.n	8006274 <_svfiprintf_r+0x104>
 800626a:	4252      	negs	r2, r2
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	9207      	str	r2, [sp, #28]
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	783b      	ldrb	r3, [r7, #0]
 8006276:	2b2e      	cmp	r3, #46	; 0x2e
 8006278:	d10c      	bne.n	8006294 <_svfiprintf_r+0x124>
 800627a:	787b      	ldrb	r3, [r7, #1]
 800627c:	2b2a      	cmp	r3, #42	; 0x2a
 800627e:	d133      	bne.n	80062e8 <_svfiprintf_r+0x178>
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	3702      	adds	r7, #2
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	9203      	str	r2, [sp, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006292:	9305      	str	r3, [sp, #20]
 8006294:	4d2e      	ldr	r5, [pc, #184]	; (8006350 <_svfiprintf_r+0x1e0>)
 8006296:	2203      	movs	r2, #3
 8006298:	7839      	ldrb	r1, [r7, #0]
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f9e8 	bl	8006670 <memchr>
 80062a0:	b138      	cbz	r0, 80062b2 <_svfiprintf_r+0x142>
 80062a2:	2340      	movs	r3, #64	; 0x40
 80062a4:	1b40      	subs	r0, r0, r5
 80062a6:	fa03 f000 	lsl.w	r0, r3, r0
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	3701      	adds	r7, #1
 80062ae:	4303      	orrs	r3, r0
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	7839      	ldrb	r1, [r7, #0]
 80062b4:	2206      	movs	r2, #6
 80062b6:	4827      	ldr	r0, [pc, #156]	; (8006354 <_svfiprintf_r+0x1e4>)
 80062b8:	1c7e      	adds	r6, r7, #1
 80062ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062be:	f000 f9d7 	bl	8006670 <memchr>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d038      	beq.n	8006338 <_svfiprintf_r+0x1c8>
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <_svfiprintf_r+0x1e8>)
 80062c8:	bb13      	cbnz	r3, 8006310 <_svfiprintf_r+0x1a0>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	3307      	adds	r3, #7
 80062ce:	f023 0307 	bic.w	r3, r3, #7
 80062d2:	3308      	adds	r3, #8
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d8:	444b      	add	r3, r9
 80062da:	9309      	str	r3, [sp, #36]	; 0x24
 80062dc:	e76d      	b.n	80061ba <_svfiprintf_r+0x4a>
 80062de:	fb05 3202 	mla	r2, r5, r2, r3
 80062e2:	2001      	movs	r0, #1
 80062e4:	460f      	mov	r7, r1
 80062e6:	e7a6      	b.n	8006236 <_svfiprintf_r+0xc6>
 80062e8:	2300      	movs	r3, #0
 80062ea:	250a      	movs	r5, #10
 80062ec:	4619      	mov	r1, r3
 80062ee:	3701      	adds	r7, #1
 80062f0:	9305      	str	r3, [sp, #20]
 80062f2:	4638      	mov	r0, r7
 80062f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f8:	3a30      	subs	r2, #48	; 0x30
 80062fa:	2a09      	cmp	r2, #9
 80062fc:	d903      	bls.n	8006306 <_svfiprintf_r+0x196>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0c8      	beq.n	8006294 <_svfiprintf_r+0x124>
 8006302:	9105      	str	r1, [sp, #20]
 8006304:	e7c6      	b.n	8006294 <_svfiprintf_r+0x124>
 8006306:	fb05 2101 	mla	r1, r5, r1, r2
 800630a:	2301      	movs	r3, #1
 800630c:	4607      	mov	r7, r0
 800630e:	e7f0      	b.n	80062f2 <_svfiprintf_r+0x182>
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	4622      	mov	r2, r4
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <_svfiprintf_r+0x1ec>)
 8006318:	a904      	add	r1, sp, #16
 800631a:	4640      	mov	r0, r8
 800631c:	f3af 8000 	nop.w
 8006320:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006324:	4681      	mov	r9, r0
 8006326:	d1d6      	bne.n	80062d6 <_svfiprintf_r+0x166>
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	065b      	lsls	r3, r3, #25
 800632c:	f53f af35 	bmi.w	800619a <_svfiprintf_r+0x2a>
 8006330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006332:	b01d      	add	sp, #116	; 0x74
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	ab03      	add	r3, sp, #12
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4622      	mov	r2, r4
 800633e:	4b07      	ldr	r3, [pc, #28]	; (800635c <_svfiprintf_r+0x1ec>)
 8006340:	a904      	add	r1, sp, #16
 8006342:	4640      	mov	r0, r8
 8006344:	f000 f882 	bl	800644c <_printf_i>
 8006348:	e7ea      	b.n	8006320 <_svfiprintf_r+0x1b0>
 800634a:	bf00      	nop
 800634c:	08006a94 	.word	0x08006a94
 8006350:	08006a9a 	.word	0x08006a9a
 8006354:	08006a9e 	.word	0x08006a9e
 8006358:	00000000 	.word	0x00000000
 800635c:	080060bd 	.word	0x080060bd

08006360 <_printf_common>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	4691      	mov	r9, r2
 8006366:	461f      	mov	r7, r3
 8006368:	688a      	ldr	r2, [r1, #8]
 800636a:	690b      	ldr	r3, [r1, #16]
 800636c:	4606      	mov	r6, r0
 800636e:	4293      	cmp	r3, r2
 8006370:	bfb8      	it	lt
 8006372:	4613      	movlt	r3, r2
 8006374:	f8c9 3000 	str.w	r3, [r9]
 8006378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800637c:	460c      	mov	r4, r1
 800637e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006382:	b112      	cbz	r2, 800638a <_printf_common+0x2a>
 8006384:	3301      	adds	r3, #1
 8006386:	f8c9 3000 	str.w	r3, [r9]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	0699      	lsls	r1, r3, #26
 800638e:	bf42      	ittt	mi
 8006390:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006394:	3302      	addmi	r3, #2
 8006396:	f8c9 3000 	strmi.w	r3, [r9]
 800639a:	6825      	ldr	r5, [r4, #0]
 800639c:	f015 0506 	ands.w	r5, r5, #6
 80063a0:	d107      	bne.n	80063b2 <_printf_common+0x52>
 80063a2:	f104 0a19 	add.w	sl, r4, #25
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	f8d9 2000 	ldr.w	r2, [r9]
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	42ab      	cmp	r3, r5
 80063b0:	dc29      	bgt.n	8006406 <_printf_common+0xa6>
 80063b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	3300      	adds	r3, #0
 80063ba:	bf18      	it	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	0692      	lsls	r2, r2, #26
 80063c0:	d42e      	bmi.n	8006420 <_printf_common+0xc0>
 80063c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063c6:	4639      	mov	r1, r7
 80063c8:	4630      	mov	r0, r6
 80063ca:	47c0      	blx	r8
 80063cc:	3001      	adds	r0, #1
 80063ce:	d021      	beq.n	8006414 <_printf_common+0xb4>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	68e5      	ldr	r5, [r4, #12]
 80063d4:	f003 0306 	and.w	r3, r3, #6
 80063d8:	2b04      	cmp	r3, #4
 80063da:	bf18      	it	ne
 80063dc:	2500      	movne	r5, #0
 80063de:	f8d9 2000 	ldr.w	r2, [r9]
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	bf08      	it	eq
 80063e8:	1aad      	subeq	r5, r5, r2
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	bf08      	it	eq
 80063f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f4:	4293      	cmp	r3, r2
 80063f6:	bfc4      	itt	gt
 80063f8:	1a9b      	subgt	r3, r3, r2
 80063fa:	18ed      	addgt	r5, r5, r3
 80063fc:	341a      	adds	r4, #26
 80063fe:	454d      	cmp	r5, r9
 8006400:	d11a      	bne.n	8006438 <_printf_common+0xd8>
 8006402:	2000      	movs	r0, #0
 8006404:	e008      	b.n	8006418 <_printf_common+0xb8>
 8006406:	2301      	movs	r3, #1
 8006408:	4652      	mov	r2, sl
 800640a:	4639      	mov	r1, r7
 800640c:	4630      	mov	r0, r6
 800640e:	47c0      	blx	r8
 8006410:	3001      	adds	r0, #1
 8006412:	d103      	bne.n	800641c <_printf_common+0xbc>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641c:	3501      	adds	r5, #1
 800641e:	e7c2      	b.n	80063a6 <_printf_common+0x46>
 8006420:	2030      	movs	r0, #48	; 0x30
 8006422:	18e1      	adds	r1, r4, r3
 8006424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800642e:	4422      	add	r2, r4
 8006430:	3302      	adds	r3, #2
 8006432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006436:	e7c4      	b.n	80063c2 <_printf_common+0x62>
 8006438:	2301      	movs	r3, #1
 800643a:	4622      	mov	r2, r4
 800643c:	4639      	mov	r1, r7
 800643e:	4630      	mov	r0, r6
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d0e6      	beq.n	8006414 <_printf_common+0xb4>
 8006446:	f109 0901 	add.w	r9, r9, #1
 800644a:	e7d8      	b.n	80063fe <_printf_common+0x9e>

0800644c <_printf_i>:
 800644c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006450:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006454:	460c      	mov	r4, r1
 8006456:	7e09      	ldrb	r1, [r1, #24]
 8006458:	b085      	sub	sp, #20
 800645a:	296e      	cmp	r1, #110	; 0x6e
 800645c:	4617      	mov	r7, r2
 800645e:	4606      	mov	r6, r0
 8006460:	4698      	mov	r8, r3
 8006462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006464:	f000 80b3 	beq.w	80065ce <_printf_i+0x182>
 8006468:	d822      	bhi.n	80064b0 <_printf_i+0x64>
 800646a:	2963      	cmp	r1, #99	; 0x63
 800646c:	d036      	beq.n	80064dc <_printf_i+0x90>
 800646e:	d80a      	bhi.n	8006486 <_printf_i+0x3a>
 8006470:	2900      	cmp	r1, #0
 8006472:	f000 80b9 	beq.w	80065e8 <_printf_i+0x19c>
 8006476:	2958      	cmp	r1, #88	; 0x58
 8006478:	f000 8083 	beq.w	8006582 <_printf_i+0x136>
 800647c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006480:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006484:	e032      	b.n	80064ec <_printf_i+0xa0>
 8006486:	2964      	cmp	r1, #100	; 0x64
 8006488:	d001      	beq.n	800648e <_printf_i+0x42>
 800648a:	2969      	cmp	r1, #105	; 0x69
 800648c:	d1f6      	bne.n	800647c <_printf_i+0x30>
 800648e:	6820      	ldr	r0, [r4, #0]
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	0605      	lsls	r5, r0, #24
 8006494:	f103 0104 	add.w	r1, r3, #4
 8006498:	d52a      	bpl.n	80064f0 <_printf_i+0xa4>
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da03      	bge.n	80064aa <_printf_i+0x5e>
 80064a2:	222d      	movs	r2, #45	; 0x2d
 80064a4:	425b      	negs	r3, r3
 80064a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064aa:	486f      	ldr	r0, [pc, #444]	; (8006668 <_printf_i+0x21c>)
 80064ac:	220a      	movs	r2, #10
 80064ae:	e039      	b.n	8006524 <_printf_i+0xd8>
 80064b0:	2973      	cmp	r1, #115	; 0x73
 80064b2:	f000 809d 	beq.w	80065f0 <_printf_i+0x1a4>
 80064b6:	d808      	bhi.n	80064ca <_printf_i+0x7e>
 80064b8:	296f      	cmp	r1, #111	; 0x6f
 80064ba:	d020      	beq.n	80064fe <_printf_i+0xb2>
 80064bc:	2970      	cmp	r1, #112	; 0x70
 80064be:	d1dd      	bne.n	800647c <_printf_i+0x30>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	f043 0320 	orr.w	r3, r3, #32
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	e003      	b.n	80064d2 <_printf_i+0x86>
 80064ca:	2975      	cmp	r1, #117	; 0x75
 80064cc:	d017      	beq.n	80064fe <_printf_i+0xb2>
 80064ce:	2978      	cmp	r1, #120	; 0x78
 80064d0:	d1d4      	bne.n	800647c <_printf_i+0x30>
 80064d2:	2378      	movs	r3, #120	; 0x78
 80064d4:	4865      	ldr	r0, [pc, #404]	; (800666c <_printf_i+0x220>)
 80064d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064da:	e055      	b.n	8006588 <_printf_i+0x13c>
 80064dc:	6813      	ldr	r3, [r2, #0]
 80064de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e2:	1d19      	adds	r1, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6011      	str	r1, [r2, #0]
 80064e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ec:	2301      	movs	r3, #1
 80064ee:	e08c      	b.n	800660a <_printf_i+0x1be>
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064f6:	6011      	str	r1, [r2, #0]
 80064f8:	bf18      	it	ne
 80064fa:	b21b      	sxthne	r3, r3
 80064fc:	e7cf      	b.n	800649e <_printf_i+0x52>
 80064fe:	6813      	ldr	r3, [r2, #0]
 8006500:	6825      	ldr	r5, [r4, #0]
 8006502:	1d18      	adds	r0, r3, #4
 8006504:	6010      	str	r0, [r2, #0]
 8006506:	0628      	lsls	r0, r5, #24
 8006508:	d501      	bpl.n	800650e <_printf_i+0xc2>
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	e002      	b.n	8006514 <_printf_i+0xc8>
 800650e:	0668      	lsls	r0, r5, #25
 8006510:	d5fb      	bpl.n	800650a <_printf_i+0xbe>
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	296f      	cmp	r1, #111	; 0x6f
 8006516:	bf14      	ite	ne
 8006518:	220a      	movne	r2, #10
 800651a:	2208      	moveq	r2, #8
 800651c:	4852      	ldr	r0, [pc, #328]	; (8006668 <_printf_i+0x21c>)
 800651e:	2100      	movs	r1, #0
 8006520:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006524:	6865      	ldr	r5, [r4, #4]
 8006526:	2d00      	cmp	r5, #0
 8006528:	60a5      	str	r5, [r4, #8]
 800652a:	f2c0 8095 	blt.w	8006658 <_printf_i+0x20c>
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	f021 0104 	bic.w	r1, r1, #4
 8006534:	6021      	str	r1, [r4, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d13d      	bne.n	80065b6 <_printf_i+0x16a>
 800653a:	2d00      	cmp	r5, #0
 800653c:	f040 808e 	bne.w	800665c <_printf_i+0x210>
 8006540:	4665      	mov	r5, ip
 8006542:	2a08      	cmp	r2, #8
 8006544:	d10b      	bne.n	800655e <_printf_i+0x112>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	07db      	lsls	r3, r3, #31
 800654a:	d508      	bpl.n	800655e <_printf_i+0x112>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	6862      	ldr	r2, [r4, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	bfde      	ittt	le
 8006554:	2330      	movle	r3, #48	; 0x30
 8006556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800655a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800655e:	ebac 0305 	sub.w	r3, ip, r5
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	f8cd 8000 	str.w	r8, [sp]
 8006568:	463b      	mov	r3, r7
 800656a:	aa03      	add	r2, sp, #12
 800656c:	4621      	mov	r1, r4
 800656e:	4630      	mov	r0, r6
 8006570:	f7ff fef6 	bl	8006360 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	d14d      	bne.n	8006614 <_printf_i+0x1c8>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800657c:	b005      	add	sp, #20
 800657e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006582:	4839      	ldr	r0, [pc, #228]	; (8006668 <_printf_i+0x21c>)
 8006584:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006588:	6813      	ldr	r3, [r2, #0]
 800658a:	6821      	ldr	r1, [r4, #0]
 800658c:	1d1d      	adds	r5, r3, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6015      	str	r5, [r2, #0]
 8006592:	060a      	lsls	r2, r1, #24
 8006594:	d50b      	bpl.n	80065ae <_printf_i+0x162>
 8006596:	07ca      	lsls	r2, r1, #31
 8006598:	bf44      	itt	mi
 800659a:	f041 0120 	orrmi.w	r1, r1, #32
 800659e:	6021      	strmi	r1, [r4, #0]
 80065a0:	b91b      	cbnz	r3, 80065aa <_printf_i+0x15e>
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	f022 0220 	bic.w	r2, r2, #32
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	2210      	movs	r2, #16
 80065ac:	e7b7      	b.n	800651e <_printf_i+0xd2>
 80065ae:	064d      	lsls	r5, r1, #25
 80065b0:	bf48      	it	mi
 80065b2:	b29b      	uxthmi	r3, r3
 80065b4:	e7ef      	b.n	8006596 <_printf_i+0x14a>
 80065b6:	4665      	mov	r5, ip
 80065b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80065bc:	fb02 3311 	mls	r3, r2, r1, r3
 80065c0:	5cc3      	ldrb	r3, [r0, r3]
 80065c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065c6:	460b      	mov	r3, r1
 80065c8:	2900      	cmp	r1, #0
 80065ca:	d1f5      	bne.n	80065b8 <_printf_i+0x16c>
 80065cc:	e7b9      	b.n	8006542 <_printf_i+0xf6>
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	6825      	ldr	r5, [r4, #0]
 80065d2:	1d18      	adds	r0, r3, #4
 80065d4:	6961      	ldr	r1, [r4, #20]
 80065d6:	6010      	str	r0, [r2, #0]
 80065d8:	0628      	lsls	r0, r5, #24
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	d501      	bpl.n	80065e2 <_printf_i+0x196>
 80065de:	6019      	str	r1, [r3, #0]
 80065e0:	e002      	b.n	80065e8 <_printf_i+0x19c>
 80065e2:	066a      	lsls	r2, r5, #25
 80065e4:	d5fb      	bpl.n	80065de <_printf_i+0x192>
 80065e6:	8019      	strh	r1, [r3, #0]
 80065e8:	2300      	movs	r3, #0
 80065ea:	4665      	mov	r5, ip
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	e7b9      	b.n	8006564 <_printf_i+0x118>
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	1d19      	adds	r1, r3, #4
 80065f4:	6011      	str	r1, [r2, #0]
 80065f6:	681d      	ldr	r5, [r3, #0]
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	2100      	movs	r1, #0
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f837 	bl	8006670 <memchr>
 8006602:	b108      	cbz	r0, 8006608 <_printf_i+0x1bc>
 8006604:	1b40      	subs	r0, r0, r5
 8006606:	6060      	str	r0, [r4, #4]
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	2300      	movs	r3, #0
 800660e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006612:	e7a7      	b.n	8006564 <_printf_i+0x118>
 8006614:	6923      	ldr	r3, [r4, #16]
 8006616:	462a      	mov	r2, r5
 8006618:	4639      	mov	r1, r7
 800661a:	4630      	mov	r0, r6
 800661c:	47c0      	blx	r8
 800661e:	3001      	adds	r0, #1
 8006620:	d0aa      	beq.n	8006578 <_printf_i+0x12c>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	079b      	lsls	r3, r3, #30
 8006626:	d413      	bmi.n	8006650 <_printf_i+0x204>
 8006628:	68e0      	ldr	r0, [r4, #12]
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	4298      	cmp	r0, r3
 800662e:	bfb8      	it	lt
 8006630:	4618      	movlt	r0, r3
 8006632:	e7a3      	b.n	800657c <_printf_i+0x130>
 8006634:	2301      	movs	r3, #1
 8006636:	464a      	mov	r2, r9
 8006638:	4639      	mov	r1, r7
 800663a:	4630      	mov	r0, r6
 800663c:	47c0      	blx	r8
 800663e:	3001      	adds	r0, #1
 8006640:	d09a      	beq.n	8006578 <_printf_i+0x12c>
 8006642:	3501      	adds	r5, #1
 8006644:	68e3      	ldr	r3, [r4, #12]
 8006646:	9a03      	ldr	r2, [sp, #12]
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	42ab      	cmp	r3, r5
 800664c:	dcf2      	bgt.n	8006634 <_printf_i+0x1e8>
 800664e:	e7eb      	b.n	8006628 <_printf_i+0x1dc>
 8006650:	2500      	movs	r5, #0
 8006652:	f104 0919 	add.w	r9, r4, #25
 8006656:	e7f5      	b.n	8006644 <_printf_i+0x1f8>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1ac      	bne.n	80065b6 <_printf_i+0x16a>
 800665c:	7803      	ldrb	r3, [r0, #0]
 800665e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006666:	e76c      	b.n	8006542 <_printf_i+0xf6>
 8006668:	08006aa5 	.word	0x08006aa5
 800666c:	08006ab6 	.word	0x08006ab6

08006670 <memchr>:
 8006670:	b510      	push	{r4, lr}
 8006672:	b2c9      	uxtb	r1, r1
 8006674:	4402      	add	r2, r0
 8006676:	4290      	cmp	r0, r2
 8006678:	4603      	mov	r3, r0
 800667a:	d101      	bne.n	8006680 <memchr+0x10>
 800667c:	2300      	movs	r3, #0
 800667e:	e003      	b.n	8006688 <memchr+0x18>
 8006680:	781c      	ldrb	r4, [r3, #0]
 8006682:	3001      	adds	r0, #1
 8006684:	428c      	cmp	r4, r1
 8006686:	d1f6      	bne.n	8006676 <memchr+0x6>
 8006688:	4618      	mov	r0, r3
 800668a:	bd10      	pop	{r4, pc}

0800668c <memcpy>:
 800668c:	b510      	push	{r4, lr}
 800668e:	1e43      	subs	r3, r0, #1
 8006690:	440a      	add	r2, r1
 8006692:	4291      	cmp	r1, r2
 8006694:	d100      	bne.n	8006698 <memcpy+0xc>
 8006696:	bd10      	pop	{r4, pc}
 8006698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a0:	e7f7      	b.n	8006692 <memcpy+0x6>

080066a2 <memmove>:
 80066a2:	4288      	cmp	r0, r1
 80066a4:	b510      	push	{r4, lr}
 80066a6:	eb01 0302 	add.w	r3, r1, r2
 80066aa:	d807      	bhi.n	80066bc <memmove+0x1a>
 80066ac:	1e42      	subs	r2, r0, #1
 80066ae:	4299      	cmp	r1, r3
 80066b0:	d00a      	beq.n	80066c8 <memmove+0x26>
 80066b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066ba:	e7f8      	b.n	80066ae <memmove+0xc>
 80066bc:	4283      	cmp	r3, r0
 80066be:	d9f5      	bls.n	80066ac <memmove+0xa>
 80066c0:	1881      	adds	r1, r0, r2
 80066c2:	1ad2      	subs	r2, r2, r3
 80066c4:	42d3      	cmn	r3, r2
 80066c6:	d100      	bne.n	80066ca <memmove+0x28>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066d2:	e7f7      	b.n	80066c4 <memmove+0x22>

080066d4 <_free_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4605      	mov	r5, r0
 80066d8:	2900      	cmp	r1, #0
 80066da:	d043      	beq.n	8006764 <_free_r+0x90>
 80066dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e0:	1f0c      	subs	r4, r1, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bfb8      	it	lt
 80066e6:	18e4      	addlt	r4, r4, r3
 80066e8:	f000 f8d0 	bl	800688c <__malloc_lock>
 80066ec:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <_free_r+0x94>)
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	4610      	mov	r0, r2
 80066f2:	b933      	cbnz	r3, 8006702 <_free_r+0x2e>
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6014      	str	r4, [r2, #0]
 80066f8:	4628      	mov	r0, r5
 80066fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066fe:	f000 b8c6 	b.w	800688e <__malloc_unlock>
 8006702:	42a3      	cmp	r3, r4
 8006704:	d90b      	bls.n	800671e <_free_r+0x4a>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	1862      	adds	r2, r4, r1
 800670a:	4293      	cmp	r3, r2
 800670c:	bf01      	itttt	eq
 800670e:	681a      	ldreq	r2, [r3, #0]
 8006710:	685b      	ldreq	r3, [r3, #4]
 8006712:	1852      	addeq	r2, r2, r1
 8006714:	6022      	streq	r2, [r4, #0]
 8006716:	6063      	str	r3, [r4, #4]
 8006718:	6004      	str	r4, [r0, #0]
 800671a:	e7ed      	b.n	80066f8 <_free_r+0x24>
 800671c:	4613      	mov	r3, r2
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	b10a      	cbz	r2, 8006726 <_free_r+0x52>
 8006722:	42a2      	cmp	r2, r4
 8006724:	d9fa      	bls.n	800671c <_free_r+0x48>
 8006726:	6819      	ldr	r1, [r3, #0]
 8006728:	1858      	adds	r0, r3, r1
 800672a:	42a0      	cmp	r0, r4
 800672c:	d10b      	bne.n	8006746 <_free_r+0x72>
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	4401      	add	r1, r0
 8006732:	1858      	adds	r0, r3, r1
 8006734:	4282      	cmp	r2, r0
 8006736:	6019      	str	r1, [r3, #0]
 8006738:	d1de      	bne.n	80066f8 <_free_r+0x24>
 800673a:	6810      	ldr	r0, [r2, #0]
 800673c:	6852      	ldr	r2, [r2, #4]
 800673e:	4401      	add	r1, r0
 8006740:	6019      	str	r1, [r3, #0]
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	e7d8      	b.n	80066f8 <_free_r+0x24>
 8006746:	d902      	bls.n	800674e <_free_r+0x7a>
 8006748:	230c      	movs	r3, #12
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	e7d4      	b.n	80066f8 <_free_r+0x24>
 800674e:	6820      	ldr	r0, [r4, #0]
 8006750:	1821      	adds	r1, r4, r0
 8006752:	428a      	cmp	r2, r1
 8006754:	bf01      	itttt	eq
 8006756:	6811      	ldreq	r1, [r2, #0]
 8006758:	6852      	ldreq	r2, [r2, #4]
 800675a:	1809      	addeq	r1, r1, r0
 800675c:	6021      	streq	r1, [r4, #0]
 800675e:	6062      	str	r2, [r4, #4]
 8006760:	605c      	str	r4, [r3, #4]
 8006762:	e7c9      	b.n	80066f8 <_free_r+0x24>
 8006764:	bd38      	pop	{r3, r4, r5, pc}
 8006766:	bf00      	nop
 8006768:	200000a0 	.word	0x200000a0

0800676c <_malloc_r>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	1ccd      	adds	r5, r1, #3
 8006770:	f025 0503 	bic.w	r5, r5, #3
 8006774:	3508      	adds	r5, #8
 8006776:	2d0c      	cmp	r5, #12
 8006778:	bf38      	it	cc
 800677a:	250c      	movcc	r5, #12
 800677c:	2d00      	cmp	r5, #0
 800677e:	4606      	mov	r6, r0
 8006780:	db01      	blt.n	8006786 <_malloc_r+0x1a>
 8006782:	42a9      	cmp	r1, r5
 8006784:	d903      	bls.n	800678e <_malloc_r+0x22>
 8006786:	230c      	movs	r3, #12
 8006788:	6033      	str	r3, [r6, #0]
 800678a:	2000      	movs	r0, #0
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	f000 f87d 	bl	800688c <__malloc_lock>
 8006792:	4a21      	ldr	r2, [pc, #132]	; (8006818 <_malloc_r+0xac>)
 8006794:	6814      	ldr	r4, [r2, #0]
 8006796:	4621      	mov	r1, r4
 8006798:	b991      	cbnz	r1, 80067c0 <_malloc_r+0x54>
 800679a:	4c20      	ldr	r4, [pc, #128]	; (800681c <_malloc_r+0xb0>)
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	b91b      	cbnz	r3, 80067a8 <_malloc_r+0x3c>
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 f863 	bl	800686c <_sbrk_r>
 80067a6:	6020      	str	r0, [r4, #0]
 80067a8:	4629      	mov	r1, r5
 80067aa:	4630      	mov	r0, r6
 80067ac:	f000 f85e 	bl	800686c <_sbrk_r>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d124      	bne.n	80067fe <_malloc_r+0x92>
 80067b4:	230c      	movs	r3, #12
 80067b6:	4630      	mov	r0, r6
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	f000 f868 	bl	800688e <__malloc_unlock>
 80067be:	e7e4      	b.n	800678a <_malloc_r+0x1e>
 80067c0:	680b      	ldr	r3, [r1, #0]
 80067c2:	1b5b      	subs	r3, r3, r5
 80067c4:	d418      	bmi.n	80067f8 <_malloc_r+0x8c>
 80067c6:	2b0b      	cmp	r3, #11
 80067c8:	d90f      	bls.n	80067ea <_malloc_r+0x7e>
 80067ca:	600b      	str	r3, [r1, #0]
 80067cc:	18cc      	adds	r4, r1, r3
 80067ce:	50cd      	str	r5, [r1, r3]
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 f85c 	bl	800688e <__malloc_unlock>
 80067d6:	f104 000b 	add.w	r0, r4, #11
 80067da:	1d23      	adds	r3, r4, #4
 80067dc:	f020 0007 	bic.w	r0, r0, #7
 80067e0:	1ac3      	subs	r3, r0, r3
 80067e2:	d0d3      	beq.n	800678c <_malloc_r+0x20>
 80067e4:	425a      	negs	r2, r3
 80067e6:	50e2      	str	r2, [r4, r3]
 80067e8:	e7d0      	b.n	800678c <_malloc_r+0x20>
 80067ea:	684b      	ldr	r3, [r1, #4]
 80067ec:	428c      	cmp	r4, r1
 80067ee:	bf16      	itet	ne
 80067f0:	6063      	strne	r3, [r4, #4]
 80067f2:	6013      	streq	r3, [r2, #0]
 80067f4:	460c      	movne	r4, r1
 80067f6:	e7eb      	b.n	80067d0 <_malloc_r+0x64>
 80067f8:	460c      	mov	r4, r1
 80067fa:	6849      	ldr	r1, [r1, #4]
 80067fc:	e7cc      	b.n	8006798 <_malloc_r+0x2c>
 80067fe:	1cc4      	adds	r4, r0, #3
 8006800:	f024 0403 	bic.w	r4, r4, #3
 8006804:	42a0      	cmp	r0, r4
 8006806:	d005      	beq.n	8006814 <_malloc_r+0xa8>
 8006808:	1a21      	subs	r1, r4, r0
 800680a:	4630      	mov	r0, r6
 800680c:	f000 f82e 	bl	800686c <_sbrk_r>
 8006810:	3001      	adds	r0, #1
 8006812:	d0cf      	beq.n	80067b4 <_malloc_r+0x48>
 8006814:	6025      	str	r5, [r4, #0]
 8006816:	e7db      	b.n	80067d0 <_malloc_r+0x64>
 8006818:	200000a0 	.word	0x200000a0
 800681c:	200000a4 	.word	0x200000a4

08006820 <_realloc_r>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	4607      	mov	r7, r0
 8006824:	4614      	mov	r4, r2
 8006826:	460e      	mov	r6, r1
 8006828:	b921      	cbnz	r1, 8006834 <_realloc_r+0x14>
 800682a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800682e:	4611      	mov	r1, r2
 8006830:	f7ff bf9c 	b.w	800676c <_malloc_r>
 8006834:	b922      	cbnz	r2, 8006840 <_realloc_r+0x20>
 8006836:	f7ff ff4d 	bl	80066d4 <_free_r>
 800683a:	4625      	mov	r5, r4
 800683c:	4628      	mov	r0, r5
 800683e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006840:	f000 f826 	bl	8006890 <_malloc_usable_size_r>
 8006844:	42a0      	cmp	r0, r4
 8006846:	d20f      	bcs.n	8006868 <_realloc_r+0x48>
 8006848:	4621      	mov	r1, r4
 800684a:	4638      	mov	r0, r7
 800684c:	f7ff ff8e 	bl	800676c <_malloc_r>
 8006850:	4605      	mov	r5, r0
 8006852:	2800      	cmp	r0, #0
 8006854:	d0f2      	beq.n	800683c <_realloc_r+0x1c>
 8006856:	4631      	mov	r1, r6
 8006858:	4622      	mov	r2, r4
 800685a:	f7ff ff17 	bl	800668c <memcpy>
 800685e:	4631      	mov	r1, r6
 8006860:	4638      	mov	r0, r7
 8006862:	f7ff ff37 	bl	80066d4 <_free_r>
 8006866:	e7e9      	b.n	800683c <_realloc_r+0x1c>
 8006868:	4635      	mov	r5, r6
 800686a:	e7e7      	b.n	800683c <_realloc_r+0x1c>

0800686c <_sbrk_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	2300      	movs	r3, #0
 8006870:	4c05      	ldr	r4, [pc, #20]	; (8006888 <_sbrk_r+0x1c>)
 8006872:	4605      	mov	r5, r0
 8006874:	4608      	mov	r0, r1
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	f7fb fc44 	bl	8002104 <_sbrk>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_sbrk_r+0x1a>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	b103      	cbz	r3, 8006886 <_sbrk_r+0x1a>
 8006884:	602b      	str	r3, [r5, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	20000344 	.word	0x20000344

0800688c <__malloc_lock>:
 800688c:	4770      	bx	lr

0800688e <__malloc_unlock>:
 800688e:	4770      	bx	lr

08006890 <_malloc_usable_size_r>:
 8006890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006894:	1f18      	subs	r0, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfbc      	itt	lt
 800689a:	580b      	ldrlt	r3, [r1, r0]
 800689c:	18c0      	addlt	r0, r0, r3
 800689e:	4770      	bx	lr

080068a0 <trunc>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80068a6:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 80068aa:	2a13      	cmp	r2, #19
 80068ac:	4603      	mov	r3, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	dc10      	bgt.n	80068d4 <trunc+0x34>
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	bfb3      	iteet	lt
 80068b6:	2000      	movlt	r0, #0
 80068b8:	2000      	movge	r0, #0
 80068ba:	4b10      	ldrge	r3, [pc, #64]	; (80068fc <trunc+0x5c>)
 80068bc:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 80068c0:	bfa4      	itt	ge
 80068c2:	fa43 f202 	asrge.w	r2, r3, r2
 80068c6:	ea24 0102 	bicge.w	r1, r4, r2
 80068ca:	4603      	mov	r3, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	4618      	mov	r0, r3
 80068d0:	4621      	mov	r1, r4
 80068d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d4:	2a33      	cmp	r2, #51	; 0x33
 80068d6:	dd07      	ble.n	80068e8 <trunc+0x48>
 80068d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80068dc:	d1f7      	bne.n	80068ce <trunc+0x2e>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	f7f9 fc3b 	bl	800015c <__adddf3>
 80068e6:	e7f0      	b.n	80068ca <trunc+0x2a>
 80068e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068ec:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80068f0:	fa22 f505 	lsr.w	r5, r2, r5
 80068f4:	ea20 0005 	bic.w	r0, r0, r5
 80068f8:	e7e7      	b.n	80068ca <trunc+0x2a>
 80068fa:	bf00      	nop
 80068fc:	000fffff 	.word	0x000fffff

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
