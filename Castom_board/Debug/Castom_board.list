
Castom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  0800b060  0800b060  0001b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc30  0800bc30  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc30  0800bc30  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc30  0800bc30  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc30  0800bc30  0001bc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc34  0800bc34  0001bc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800bc38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  200001ec  0800be24  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800be24  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015865  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002df0  00000000  00000000  00035a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  00038870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00039ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016831  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee63  00000000  00000000  000513f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000780ca  00000000  00000000  0006025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c70  00000000  00000000  000d83a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b044 	.word	0x0800b044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800b044 	.word	0x0800b044

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <test_flash_W25Q>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef hspi2;

// ----------------------------------------------------------------------------
void test_flash_W25Q(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
//		HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
//	}



	int g=0;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]

}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <nmea0183_checksum>:
	}
}
//---------------------------------------------------------------------
// Checksum
int nmea0183_checksum(char *msg)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]

	for(j = 1; j < strlen(msg) - 4; j++)
 8001154:	2301      	movs	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	e00a      	b.n	8001170 <nmea0183_checksum+0x2c>
	{
		checksum = checksum^(unsigned)msg[j];
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4053      	eors	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
	for(j = 1; j < strlen(msg) - 4; j++)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7fe ffed 	bl	8000150 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	1f1a      	subs	r2, r3, #4
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8ec      	bhi.n	800115a <nmea0183_checksum+0x16>
	}
	return checksum;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <parsing_GPGLL_line>:

//---------------------------------------------------------------------
void parsing_GPGLL_line(char *str_GPGLL)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b0ab      	sub	sp, #172	; 0xac
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001194:	2331      	movs	r3, #49	; 0x31
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	memset(nmeaSnt, 0, size);
 800119a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800119e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 fcfd 	bl	8007ba4 <memset>

	//Copy to  "*" з str_GPGLL в nmeaSnt
	int size_nmeaSnt = sizeof(nmeaSnt);
 80011aa:	2331      	movs	r3, #49	; 0x31
 80011ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int i=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80011bc:	e010      	b.n	80011e0 <parsing_GPGLL_line+0x54>
	{
		nmeaSnt[i]=str_GPGLL[i];    // Read 49 bytes
 80011be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	7819      	ldrb	r1, [r3, #0]
 80011c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011d0:	4413      	add	r3, r2
 80011d2:	460a      	mov	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPGLL[i] != '*') && (i < 50)  ; i++)
 80011d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011da:	3301      	adds	r3, #1
 80011dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80011e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b2a      	cmp	r3, #42	; 0x2a
 80011ec:	d003      	beq.n	80011f6 <parsing_GPGLL_line+0x6a>
 80011ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011f2:	2b31      	cmp	r3, #49	; 0x31
 80011f4:	dde3      	ble.n	80011be <parsing_GPGLL_line+0x32>
	}

	// Check check sum //////////////////////////////////////////////////////////////
	char smNmbr[3]={0};     								// array for checksum
 80011f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011fa:	2100      	movs	r1, #0
 80011fc:	460a      	mov	r2, r1
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	460a      	mov	r2, r1
 8001202:	709a      	strb	r2, [r3, #2]
	char *rawSum;

	// Find "*"
	rawSum = strstr(str_GPGLL, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001204:	212a      	movs	r1, #42	; 0x2a
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f006 fcf4 	bl	8007bf4 <strchr>
 800120c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001214:	3301      	adds	r3, #1
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	smNmbr[2]='\0';											// Add and of line '\0' sing
 800121c:	2300      	movs	r3, #0
 800121e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001222:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff8c 	bl	8001144 <nmea0183_checksum>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	char hex[3];
	sprintf(hex, "%x", intSum);
 8001232:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800123a:	49b6      	ldr	r1, [pc, #728]	; (8001514 <parsing_GPGLL_line+0x388>)
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fcb9 	bl	8007bb4 <siprintf>

	if(strstr(smNmbr, hex) != NULL)
 8001242:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001246:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f006 fce6 	bl	8007c1e <strstr>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 823c 	beq.w	80016d2 <parsing_GPGLL_line+0x546>
	{
		// Parsing string //////////////////////////////////////////////////////////////
		uint8_t cnt = 0;            		// Count of elements
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

		int i = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		int count = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		while(nmeaSnt[i] != '\0')
 800126c:	e229      	b.n	80016c2 <parsing_GPGLL_line+0x536>
		{
			while(nmeaSnt[i] == ',')
			{
				int g=0;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				i++;
 8001274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001278:	3301      	adds	r3, #1
 800127a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				char str[12]={0};
 800127e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

				switch (count)
 800128a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800128e:	2b04      	cmp	r3, #4
 8001290:	f200 8204 	bhi.w	800169c <parsing_GPGLL_line+0x510>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <parsing_GPGLL_line+0x110>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012b1 	.word	0x080012b1
 80012a0:	08001401 	.word	0x08001401
 80012a4:	08001453 	.word	0x08001453
 80012a8:	080015d1 	.word	0x080015d1
 80012ac:	08001623 	.word	0x08001623
				{
					case 0:
						for(g=0; g<10; g++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012b6:	e014      	b.n	80012e2 <parsing_GPGLL_line+0x156>
						{
							GPS_data.lat[g] = nmeaSnt[i+g];
 80012b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80012bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012c0:	4413      	add	r3, r2
 80012c2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012c6:	4413      	add	r3, r2
 80012c8:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 80012cc:	4a92      	ldr	r2, [pc, #584]	; (8001518 <parsing_GPGLL_line+0x38c>)
 80012ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012d2:	4413      	add	r3, r2
 80012d4:	460a      	mov	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
						for(g=0; g<10; g++)
 80012d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012e6:	2b09      	cmp	r3, #9
 80012e8:	dde6      	ble.n	80012b8 <parsing_GPGLL_line+0x12c>
						}
						GPS_data.lat[10] = '\0';
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <parsing_GPGLL_line+0x38c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	729a      	strb	r2, [r3, #10]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 80012f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f4:	220c      	movs	r2, #12
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fc53 	bl	8007ba4 <memset>
						sprintf(str,"%s", GPS_data.lat);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4985      	ldr	r1, [pc, #532]	; (8001518 <parsing_GPGLL_line+0x38c>)
 8001304:	4618      	mov	r0, r3
 8001306:	f006 fc82 	bl	8007c0e <strcpy>
						strcpy(gps_lat, str);
 800130a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130e:	4619      	mov	r1, r3
 8001310:	4882      	ldr	r0, [pc, #520]	; (800151c <parsing_GPGLL_line+0x390>)
 8001312:	f006 fc7c 	bl	8007c0e <strcpy>

						// Convert lat in coordinate for google mups
						// 1. відділити градуси від мінут
						float integer_part_lat = 0;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	67bb      	str	r3, [r7, #120]	; 0x78
						float fractional_part_lat = 0;
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	677b      	str	r3, [r7, #116]	; 0x74
						char integer_part_char_lat[3]={0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2100      	movs	r1, #0
 8001328:	460a      	mov	r2, r1
 800132a:	801a      	strh	r2, [r3, #0]
 800132c:	460a      	mov	r2, r1
 800132e:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lat[9]={0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	721a      	strb	r2, [r3, #8]
						uint8_t k=0;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						for(k=0; k<=11; k++)
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001348:	e020      	b.n	800138c <parsing_GPGLL_line+0x200>
						{
							if(k<=1)
 800134a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800134e:	2b01      	cmp	r3, #1
 8001350:	d80b      	bhi.n	800136a <parsing_GPGLL_line+0x1de>
							{
								integer_part_char_lat[k] = GPS_data.lat[k];
 8001352:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001356:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800135a:	496f      	ldr	r1, [pc, #444]	; (8001518 <parsing_GPGLL_line+0x38c>)
 800135c:	5c8a      	ldrb	r2, [r1, r2]
 800135e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001362:	440b      	add	r3, r1
 8001364:	f803 2c80 	strb.w	r2, [r3, #-128]
 8001368:	e00b      	b.n	8001382 <parsing_GPGLL_line+0x1f6>
							}
							else
							{
								fractional_part_char_lat[k-2] = GPS_data.lat[k];
 800136a:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800136e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001372:	3b02      	subs	r3, #2
 8001374:	4968      	ldr	r1, [pc, #416]	; (8001518 <parsing_GPGLL_line+0x38c>)
 8001376:	5c8a      	ldrb	r2, [r1, r2]
 8001378:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800137c:	440b      	add	r3, r1
 800137e:	f803 2c8c 	strb.w	r2, [r3, #-140]
						for(k=0; k<=11; k++)
 8001382:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001386:	3301      	adds	r3, #1
 8001388:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800138c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001390:	2b0b      	cmp	r3, #11
 8001392:	d9da      	bls.n	800134a <parsing_GPGLL_line+0x1be>
							}
						}

						// 2. перетворити стрінги в числа
						integer_part_lat = atoi(integer_part_char_lat);          // save int part
 8001394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001398:	4618      	mov	r0, r3
 800139a:	f006 fbb0 	bl	8007afe <atoi>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc85 	bl	8000cb0 <__aeabi_i2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	67bb      	str	r3, [r7, #120]	; 0x78
						fractional_part_lat = atof(fractional_part_char_lat);	 // float part
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 fba2 	bl	8007af8 <atof>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f7ff fb6e 	bl	8000a9c <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	677b      	str	r3, [r7, #116]	; 0x74
 						// 3. Конвертувати в градуси
						fractional_part_lat = (fractional_part_lat/60);
 80013c4:	4956      	ldr	r1, [pc, #344]	; (8001520 <parsing_GPGLL_line+0x394>)
 80013c6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013c8:	f7ff fd7a 	bl	8000ec0 <__aeabi_fdiv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	677b      	str	r3, [r7, #116]	; 0x74
						integer_part_lat = integer_part_lat + fractional_part_lat;
 80013d0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80013d4:	f7ff fbb8 	bl	8000b48 <__addsf3>
 80013d8:	4603      	mov	r3, r0
 80013da:	67bb      	str	r3, [r7, #120]	; 0x78
						// 4. Конвертувати в стрінгу і Записати в глобальну змінну
                        gcvt(integer_part_lat, 11, gps_latitude );
 80013dc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80013de:	f7ff f823 	bl	8000428 <__aeabi_f2d>
 80013e2:	4b50      	ldr	r3, [pc, #320]	; (8001524 <parsing_GPGLL_line+0x398>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	f006 fb8f 	bl	8007b08 <gcvt>
                        gps_latitude[9] = '\0';
 80013ea:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <parsing_GPGLL_line+0x398>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	725a      	strb	r2, [r3, #9]
                        //
						i = i+g;
 80013f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80013f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013f8:	4413      	add	r3, r2
 80013fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						break;
 80013fe:	e14d      	b.n	800169c <parsing_GPGLL_line+0x510>

					case 1:
						for (g =0; g<1; g++)
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001406:	e015      	b.n	8001434 <parsing_GPGLL_line+0x2a8>
						{
							GPS_data.lat_letter[g] = nmeaSnt[i+g];
 8001408:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800140c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001410:	4413      	add	r3, r2
 8001412:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001416:	4413      	add	r3, r2
 8001418:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 800141c:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <parsing_GPGLL_line+0x38c>)
 800141e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001422:	4413      	add	r3, r2
 8001424:	330b      	adds	r3, #11
 8001426:	460a      	mov	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
						for (g =0; g<1; g++)
 800142a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800142e:	3301      	adds	r3, #1
 8001430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001438:	2b00      	cmp	r3, #0
 800143a:	dde5      	ble.n	8001408 <parsing_GPGLL_line+0x27c>
						}
						GPS_data.lat_letter[2] = '\0';
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <parsing_GPGLL_line+0x38c>)
 800143e:	2200      	movs	r2, #0
 8001440:	735a      	strb	r2, [r3, #13]
						i = i+g;
 8001442:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800144a:	4413      	add	r3, r2
 800144c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						break;
 8001450:	e124      	b.n	800169c <parsing_GPGLL_line+0x510>

					case 2:
						for(g=0; g<11; g++)
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001458:	e015      	b.n	8001486 <parsing_GPGLL_line+0x2fa>
						{
							GPS_data.lon[g] = nmeaSnt[i+g];
 800145a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800145e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001462:	4413      	add	r3, r2
 8001464:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001468:	4413      	add	r3, r2
 800146a:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <parsing_GPGLL_line+0x38c>)
 8001470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001474:	4413      	add	r3, r2
 8001476:	330d      	adds	r3, #13
 8001478:	460a      	mov	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<11; g++)
 800147c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001480:	3301      	adds	r3, #1
 8001482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800148a:	2b0a      	cmp	r3, #10
 800148c:	dde5      	ble.n	800145a <parsing_GPGLL_line+0x2ce>
						}
						GPS_data.lon[11] = '\0';
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <parsing_GPGLL_line+0x38c>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	220c      	movs	r2, #12
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f006 fb81 	bl	8007ba4 <memset>
						sprintf(str,"%s", GPS_data.lon);
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	4920      	ldr	r1, [pc, #128]	; (8001528 <parsing_GPGLL_line+0x39c>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 fbb0 	bl	8007c0e <strcpy>
						strcpy(gps_lon, str);
 80014ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b2:	4619      	mov	r1, r3
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <parsing_GPGLL_line+0x3a0>)
 80014b6:	f006 fbaa 	bl	8007c0e <strcpy>

						// Convert lon in coordinate for google mups
						// 1. відділити градуси від мінут
						float integer_part_lon = 0;
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						float fractional_part_lon = 0;
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	67fb      	str	r3, [r7, #124]	; 0x7c
						char integer_part_char_lon[3]={0};
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2100      	movs	r1, #0
 80014ce:	460a      	mov	r2, r1
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	460a      	mov	r2, r1
 80014d4:	709a      	strb	r2, [r3, #2]
						char fractional_part_char_lon[10]={0};
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	811a      	strh	r2, [r3, #8]
						k=0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						for(k=0; k<=11; k++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80014ee:	e031      	b.n	8001554 <parsing_GPGLL_line+0x3c8>
						{
							if(k<=2)
 80014f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d81b      	bhi.n	8001530 <parsing_GPGLL_line+0x3a4>
							{
								integer_part_char_lon[k] = GPS_data.lon[k];
 80014f8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80014fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001500:	4905      	ldr	r1, [pc, #20]	; (8001518 <parsing_GPGLL_line+0x38c>)
 8001502:	440a      	add	r2, r1
 8001504:	7b52      	ldrb	r2, [r2, #13]
 8001506:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800150a:	440b      	add	r3, r1
 800150c:	f803 2c90 	strb.w	r2, [r3, #-144]
 8001510:	e01b      	b.n	800154a <parsing_GPGLL_line+0x3be>
 8001512:	bf00      	nop
 8001514:	0800b060 	.word	0x0800b060
 8001518:	20000678 	.word	0x20000678
 800151c:	20000654 	.word	0x20000654
 8001520:	42700000 	.word	0x42700000
 8001524:	20000644 	.word	0x20000644
 8001528:	20000685 	.word	0x20000685
 800152c:	20000664 	.word	0x20000664
							}
							else
							{
								fractional_part_char_lon[k-3] = GPS_data.lon[k];
 8001530:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001534:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001538:	3b03      	subs	r3, #3
 800153a:	4968      	ldr	r1, [pc, #416]	; (80016dc <parsing_GPGLL_line+0x550>)
 800153c:	440a      	add	r2, r1
 800153e:	7b52      	ldrb	r2, [r2, #13]
 8001540:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001544:	440b      	add	r3, r1
 8001546:	f803 2c9c 	strb.w	r2, [r3, #-156]
						for(k=0; k<=11; k++)
 800154a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800154e:	3301      	adds	r3, #1
 8001550:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001554:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001558:	2b0b      	cmp	r3, #11
 800155a:	d9c9      	bls.n	80014f0 <parsing_GPGLL_line+0x364>
							}
						}

						// 2. перетворити стрінги в числа
						integer_part_lon = atoi(integer_part_char_lon);          // save int part
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4618      	mov	r0, r3
 8001562:	f006 facc 	bl	8007afe <atoi>
 8001566:	4603      	mov	r3, r0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fba1 	bl	8000cb0 <__aeabi_i2f>
 800156e:	4603      	mov	r3, r0
 8001570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						fractional_part_lon = atof(fractional_part_char_lon);	 // float part
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4618      	mov	r0, r3
 800157a:	f006 fabd 	bl	8007af8 <atof>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	4618      	mov	r0, r3
 8001584:	4621      	mov	r1, r4
 8001586:	f7ff fa89 	bl	8000a9c <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	67fb      	str	r3, [r7, #124]	; 0x7c
					 	// 3. Конвертувати в градуси
						fractional_part_lon = (fractional_part_lon/60);
 800158e:	4954      	ldr	r1, [pc, #336]	; (80016e0 <parsing_GPGLL_line+0x554>)
 8001590:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001592:	f7ff fc95 	bl	8000ec0 <__aeabi_fdiv>
 8001596:	4603      	mov	r3, r0
 8001598:	67fb      	str	r3, [r7, #124]	; 0x7c
						integer_part_lon = integer_part_lon + fractional_part_lon;
 800159a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800159c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80015a0:	f7ff fad2 	bl	8000b48 <__addsf3>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						// 4. Конвертувати в стрінгу і Записати в глобальну змінну
					    gcvt(integer_part_lon, 11, gps_lontitude );
 80015aa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80015ae:	f7fe ff3b 	bl	8000428 <__aeabi_f2d>
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <parsing_GPGLL_line+0x558>)
 80015b4:	220b      	movs	r2, #11
 80015b6:	f006 faa7 	bl	8007b08 <gcvt>
					    gps_lontitude[10] = '\0';
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <parsing_GPGLL_line+0x558>)
 80015bc:	2200      	movs	r2, #0
 80015be:	729a      	strb	r2, [r3, #10]
					    //

						i = i+g;
 80015c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80015c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015c8:	4413      	add	r3, r2
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						break;
 80015ce:	e065      	b.n	800169c <parsing_GPGLL_line+0x510>

					case 3:
						for(g=0; g<1; g++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015d6:	e015      	b.n	8001604 <parsing_GPGLL_line+0x478>
						{
							GPS_data.lon_letter[g] = nmeaSnt[i+g];
 80015d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80015dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015e0:	4413      	add	r3, r2
 80015e2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e6:	4413      	add	r3, r2
 80015e8:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 80015ec:	4a3b      	ldr	r2, [pc, #236]	; (80016dc <parsing_GPGLL_line+0x550>)
 80015ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015f2:	4413      	add	r3, r2
 80015f4:	3319      	adds	r3, #25
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
						for(g=0; g<1; g++)
 80015fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001608:	2b00      	cmp	r3, #0
 800160a:	dde5      	ble.n	80015d8 <parsing_GPGLL_line+0x44c>
						}
						GPS_data.lon_letter[2] = '\0';
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <parsing_GPGLL_line+0x550>)
 800160e:	2200      	movs	r2, #0
 8001610:	76da      	strb	r2, [r3, #27]
						i = i+g;
 8001612:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800161a:	4413      	add	r3, r2
 800161c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						break;
 8001620:	e03c      	b.n	800169c <parsing_GPGLL_line+0x510>

					case 4:
						for(g=0; g<6; g++)
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001628:	e015      	b.n	8001656 <parsing_GPGLL_line+0x4ca>
						{
							GPS_data.time[g] = nmeaSnt[i+g];
 800162a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800162e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001632:	4413      	add	r3, r2
 8001634:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001638:	4413      	add	r3, r2
 800163a:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 800163e:	4a27      	ldr	r2, [pc, #156]	; (80016dc <parsing_GPGLL_line+0x550>)
 8001640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001644:	4413      	add	r3, r2
 8001646:	331b      	adds	r3, #27
 8001648:	460a      	mov	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
						for(g=0; g<6; g++)
 800164c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001650:	3301      	adds	r3, #1
 8001652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800165a:	2b05      	cmp	r3, #5
 800165c:	dde5      	ble.n	800162a <parsing_GPGLL_line+0x49e>
						}
						GPS_data.time[6] = '\0';
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <parsing_GPGLL_line+0x550>)
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						i = i+g;
 8001666:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800166a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800166e:	4413      	add	r3, r2
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

						// Save in global variable
						memset(str, 0 , sizeof(str));
 8001674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001678:	220c      	movs	r2, #12
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f006 fa91 	bl	8007ba4 <memset>
						sprintf(str,"%s", GPS_data.time);
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	4918      	ldr	r1, [pc, #96]	; (80016e8 <parsing_GPGLL_line+0x55c>)
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fac0 	bl	8007c0e <strcpy>
						strcpy(gps_time, str);
 800168e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	4815      	ldr	r0, [pc, #84]	; (80016ec <parsing_GPGLL_line+0x560>)
 8001696:	f006 faba 	bl	8007c0e <strcpy>
						break;
 800169a:	bf00      	nop

				}
				count++;
 800169c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016a0:	3301      	adds	r3, #1
 80016a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			while(nmeaSnt[i] == ',')
 80016a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b2c      	cmp	r3, #44	; 0x2c
 80016b4:	f43f addb 	beq.w	800126e <parsing_GPGLL_line+0xe2>
			}
			i++;
 80016b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016bc:	3301      	adds	r3, #1
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		while(nmeaSnt[i] != '\0')
 80016c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e9      	bne.n	80016a6 <parsing_GPGLL_line+0x51a>
		}
	}
}
 80016d2:	bf00      	nop
 80016d4:	37ac      	adds	r7, #172	; 0xac
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000678 	.word	0x20000678
 80016e0:	42700000 	.word	0x42700000
 80016e4:	200006a0 	.word	0x200006a0
 80016e8:	20000693 	.word	0x20000693
 80016ec:	20000670 	.word	0x20000670

080016f0 <parsing_GPGGA_line>:
//---------------------------------------------------------------------
void parsing_GPGGA_line(char *str_GPGGA)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0a2      	sub	sp, #136	; 0x88
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
		// In this line parsed only count of satellites

		//GPS_data.number_of_satellites_GPGGA = (uint8_t*)number_of_satellites_point_GPGGA[1];		// save only it

	    char nmeaSnt[70];
		int size = sizeof(nmeaSnt);
 80016f8:	2346      	movs	r3, #70	; 0x46
 80016fa:	67bb      	str	r3, [r7, #120]	; 0x78
		memset(nmeaSnt, 0, size);
 80016fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f006 fa4d 	bl	8007ba4 <memset>

		//Copy to  "*" з str_GPGGA в nmeaSnt
		int size_nmeaSnt = sizeof(nmeaSnt);
 800170a:	2346      	movs	r3, #70	; 0x46
 800170c:	677b      	str	r3, [r7, #116]	; 0x74
		int i=0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)   // 70   // 68
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800171a:	e010      	b.n	800173e <parsing_GPGGA_line+0x4e>
		{
			nmeaSnt[i]=str_GPGGA[i];
 800171c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	7819      	ldrb	r1, [r3, #0]
 8001726:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800172a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800172e:	4413      	add	r3, r2
 8001730:	460a      	mov	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]
		for(i=0; (str_GPGGA[i] != '*') && (i < 70)  ; i++)   // 70   // 68
 8001734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001738:	3301      	adds	r3, #1
 800173a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800173e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b2a      	cmp	r3, #42	; 0x2a
 800174a:	d003      	beq.n	8001754 <parsing_GPGGA_line+0x64>
 800174c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001750:	2b45      	cmp	r3, #69	; 0x45
 8001752:	dde3      	ble.n	800171c <parsing_GPGGA_line+0x2c>
		}

		// Check check sum //////////////////////////////////////////////////////////////
		char smNmbr[3]={0};     								// array for checksum
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	2100      	movs	r1, #0
 800175a:	460a      	mov	r2, r1
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	460a      	mov	r2, r1
 8001760:	709a      	strb	r2, [r3, #2]
		char *rawSum;

		char time[6]={0};
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	809a      	strh	r2, [r3, #4]
		char not_used[12] = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]

		// Find "*"
		rawSum = strstr(str_GPGGA, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001778:	212a      	movs	r1, #42	; 0x2a
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f006 fa3a 	bl	8007bf4 <strchr>
 8001780:	6738      	str	r0, [r7, #112]	; 0x70
		memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001784:	3301      	adds	r3, #1
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	84bb      	strh	r3, [r7, #36]	; 0x24
		smNmbr[2]='\0';											// Add and of line '\0' sing
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


          // Проблема . Чексума не сходиться
		////////////////////////////////////////////
		char hex[3];
		memset(hex, 0 , sizeof(hex));
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	2203      	movs	r2, #3
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f006 fa02 	bl	8007ba4 <memset>
		uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 80017a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fccd 	bl	8001144 <nmea0183_checksum>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		sprintf(hex, "%x", intSum);
 80017b0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	49b0      	ldr	r1, [pc, #704]	; (8001a7c <parsing_GPGGA_line+0x38c>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 f9fa 	bl	8007bb4 <siprintf>

////////////////////////////////////////////////////
//		if(strstr(smNmbr, hex) != NULL)
//		{
			// Parsing string //////////////////////////////////////////////////////////////
			uint8_t cnt = 0;            		// Count of elements
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

			i = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int count = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			while(nmeaSnt[i] != '\0')
 80017d2:	e147      	b.n	8001a64 <parsing_GPGGA_line+0x374>
			{
				while(nmeaSnt[i] == ',')
				{
					int g=0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	67fb      	str	r3, [r7, #124]	; 0x7c
					i++;
 80017d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017dc:	3301      	adds	r3, #1
 80017de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					switch (count)
 80017e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	f200 8129 	bhi.w	8001a3e <parsing_GPGGA_line+0x34e>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <parsing_GPGGA_line+0x104>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001811 	.word	0x08001811
 80017f8:	08001855 	.word	0x08001855
 80017fc:	08001897 	.word	0x08001897
 8001800:	080018d9 	.word	0x080018d9
 8001804:	0800191b 	.word	0x0800191b
 8001808:	0800195d 	.word	0x0800195d
 800180c:	0800199f 	.word	0x0800199f
					{
						case 0:                     // Time
							for(g=0; g<6; g++)
 8001810:	2300      	movs	r3, #0
 8001812:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001814:	e011      	b.n	800183a <parsing_GPGGA_line+0x14a>
							{
								time[g] = nmeaSnt[i+g];
 8001816:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800181a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800181c:	4413      	add	r3, r2
 800181e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001822:	4413      	add	r3, r2
 8001824:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001828:	f107 021c 	add.w	r2, r7, #28
 800182c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800182e:	4413      	add	r3, r2
 8001830:	460a      	mov	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
							for(g=0; g<6; g++)
 8001834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001836:	3301      	adds	r3, #1
 8001838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800183a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800183c:	2b05      	cmp	r3, #5
 800183e:	ddea      	ble.n	8001816 <parsing_GPGGA_line+0x126>
							}
							time[6] = '\0';
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
							i = i+g;
 8001846:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800184a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800184c:	4413      	add	r3, r2
 800184e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001852:	e0f4      	b.n	8001a3e <parsing_GPGGA_line+0x34e>

						case 1:   					// Lat
							for (g =0; g<10; g++)
 8001854:	2300      	movs	r3, #0
 8001856:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001858:	e011      	b.n	800187e <parsing_GPGGA_line+0x18e>
							{
								not_used[g] = nmeaSnt[i+g];
 800185a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800185e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001860:	4413      	add	r3, r2
 8001862:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001866:	4413      	add	r3, r2
 8001868:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 800186c:	f107 0210 	add.w	r2, r7, #16
 8001870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001872:	4413      	add	r3, r2
 8001874:	460a      	mov	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
							for (g =0; g<10; g++)
 8001878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800187a:	3301      	adds	r3, #1
 800187c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800187e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001880:	2b09      	cmp	r3, #9
 8001882:	ddea      	ble.n	800185a <parsing_GPGGA_line+0x16a>
							}
							not_used[10] = '\0';
 8001884:	2300      	movs	r3, #0
 8001886:	76bb      	strb	r3, [r7, #26]
							i = i+g;
 8001888:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800188c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800188e:	4413      	add	r3, r2
 8001890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001894:	e0d3      	b.n	8001a3e <parsing_GPGGA_line+0x34e>

						case 2:						// N
							for(g=0; g<1; g++)
 8001896:	2300      	movs	r3, #0
 8001898:	67fb      	str	r3, [r7, #124]	; 0x7c
 800189a:	e011      	b.n	80018c0 <parsing_GPGGA_line+0x1d0>
							{
								not_used[g] = nmeaSnt[i+g];
 800189c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a2:	4413      	add	r3, r2
 80018a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018a8:	4413      	add	r3, r2
 80018aa:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018ae:	f107 0210 	add.w	r2, r7, #16
 80018b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b4:	4413      	add	r3, r2
 80018b6:	460a      	mov	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 80018ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018bc:	3301      	adds	r3, #1
 80018be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	ddea      	ble.n	800189c <parsing_GPGGA_line+0x1ac>
							}
							not_used[1] = '\0';
 80018c6:	2300      	movs	r3, #0
 80018c8:	747b      	strb	r3, [r7, #17]
							i = i+g;
 80018ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d0:	4413      	add	r3, r2
 80018d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 80018d6:	e0b2      	b.n	8001a3e <parsing_GPGGA_line+0x34e>

						case 3:                     // Lat
							for(g=0; g<11; g++)
 80018d8:	2300      	movs	r3, #0
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018dc:	e011      	b.n	8001902 <parsing_GPGGA_line+0x212>
							{
								not_used[g] = nmeaSnt[i+g];
 80018de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018e4:	4413      	add	r3, r2
 80018e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018ea:	4413      	add	r3, r2
 80018ec:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80018f0:	f107 0210 	add.w	r2, r7, #16
 80018f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f6:	4413      	add	r3, r2
 80018f8:	460a      	mov	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
							for(g=0; g<11; g++)
 80018fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018fe:	3301      	adds	r3, #1
 8001900:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001904:	2b0a      	cmp	r3, #10
 8001906:	ddea      	ble.n	80018de <parsing_GPGGA_line+0x1ee>
							}
							not_used[11] = '\0';
 8001908:	2300      	movs	r3, #0
 800190a:	76fb      	strb	r3, [r7, #27]
							i = i+g;
 800190c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001912:	4413      	add	r3, r2
 8001914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 8001918:	e091      	b.n	8001a3e <parsing_GPGGA_line+0x34e>

						case 4:                      // E
							for(g=0; g<1; g++)
 800191a:	2300      	movs	r3, #0
 800191c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800191e:	e011      	b.n	8001944 <parsing_GPGGA_line+0x254>
							{
								not_used[g] = nmeaSnt[i+g];
 8001920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001926:	4413      	add	r3, r2
 8001928:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800192c:	4413      	add	r3, r2
 800192e:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001932:	f107 0210 	add.w	r2, r7, #16
 8001936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001938:	4413      	add	r3, r2
 800193a:	460a      	mov	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 800193e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001940:	3301      	adds	r3, #1
 8001942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001946:	2b00      	cmp	r3, #0
 8001948:	ddea      	ble.n	8001920 <parsing_GPGGA_line+0x230>
							}
							not_used[1] = '\0';
 800194a:	2300      	movs	r3, #0
 800194c:	747b      	strb	r3, [r7, #17]
							i = i+g;
 800194e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800195a:	e070      	b.n	8001a3e <parsing_GPGGA_line+0x34e>

						case 5:                      // Fix Quality
							for(g=0; g<1; g++)
 800195c:	2300      	movs	r3, #0
 800195e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001960:	e011      	b.n	8001986 <parsing_GPGGA_line+0x296>
							{
								not_used[g] = nmeaSnt[i+g];
 8001962:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001968:	4413      	add	r3, r2
 800196a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800196e:	4413      	add	r3, r2
 8001970:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 8001974:	f107 0210 	add.w	r2, r7, #16
 8001978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197a:	4413      	add	r3, r2
 800197c:	460a      	mov	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
							for(g=0; g<1; g++)
 8001980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001982:	3301      	adds	r3, #1
 8001984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001988:	2b00      	cmp	r3, #0
 800198a:	ddea      	ble.n	8001962 <parsing_GPGGA_line+0x272>
							}
							not_used[1] = '\0';
 800198c:	2300      	movs	r3, #0
 800198e:	747b      	strb	r3, [r7, #17]
							i = i+g;
 8001990:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001994:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001996:	4413      	add	r3, r2
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							break;
 800199c:	e04f      	b.n	8001a3e <parsing_GPGGA_line+0x34e>

						case 6:                      // Number of Satellites
							memset(not_used, 0 , sizeof(not_used));    // clean buffer
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	220c      	movs	r2, #12
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f006 f8fc 	bl	8007ba4 <memset>
							for(g=0; g<2; g++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019b0:	e011      	b.n	80019d6 <parsing_GPGGA_line+0x2e6>
							{
								not_used[g] = nmeaSnt[i+g];
 80019b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019b8:	4413      	add	r3, r2
 80019ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019be:	4413      	add	r3, r2
 80019c0:	f813 1c60 	ldrb.w	r1, [r3, #-96]
 80019c4:	f107 0210 	add.w	r2, r7, #16
 80019c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019ca:	4413      	add	r3, r2
 80019cc:	460a      	mov	r2, r1
 80019ce:	701a      	strb	r2, [r3, #0]
							for(g=0; g<2; g++)
 80019d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019d2:	3301      	adds	r3, #1
 80019d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019d8:	2b01      	cmp	r3, #1
 80019da:	ddea      	ble.n	80019b2 <parsing_GPGGA_line+0x2c2>
							}
							not_used[2] = '\0';
 80019dc:	2300      	movs	r3, #0
 80019de:	74bb      	strb	r3, [r7, #18]

							// Save in structure
							char str[3]={0};
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2100      	movs	r1, #0
 80019e6:	460a      	mov	r2, r1
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	460a      	mov	r2, r1
 80019ec:	709a      	strb	r2, [r3, #2]
							sprintf(str,"%s", not_used);
 80019ee:	f107 0210 	add.w	r2, r7, #16
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f006 f908 	bl	8007c0e <strcpy>
							strcpy(GPS_data.number_of_satellites_GPGGA, str);
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	481e      	ldr	r0, [pc, #120]	; (8001a80 <parsing_GPGGA_line+0x390>)
 8001a06:	f006 f902 	bl	8007c0e <strcpy>

							// Save in global variable
							memset(str, 0 , sizeof(str));
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2203      	movs	r2, #3
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f006 f8c6 	bl	8007ba4 <memset>
							sprintf(str,"%s", GPS_data.number_of_satellites_GPGGA);
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4918      	ldr	r1, [pc, #96]	; (8001a80 <parsing_GPGGA_line+0x390>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f006 f8f5 	bl	8007c0e <strcpy>
							strcpy(gps_number_of_satellites, str);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4816      	ldr	r0, [pc, #88]	; (8001a84 <parsing_GPGGA_line+0x394>)
 8001a2c:	f006 f8ef 	bl	8007c0e <strcpy>

							i = i+g;
 8001a30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a36:	4413      	add	r3, r2
 8001a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

							break;
 8001a3c:	bf00      	nop

					}
					count++;
 8001a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				while(nmeaSnt[i] == ',')
 8001a48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b2c      	cmp	r3, #44	; 0x2c
 8001a56:	f43f aebd 	beq.w	80017d4 <parsing_GPGGA_line+0xe4>
				}
				i++;
 8001a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while(nmeaSnt[i] != '\0')
 8001a64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <parsing_GPGGA_line+0x358>
			}
	//	}
}
 8001a74:	bf00      	nop
 8001a76:	3788      	adds	r7, #136	; 0x88
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0800b060 	.word	0x0800b060
 8001a80:	2000069d 	.word	0x2000069d
 8001a84:	20000660 	.word	0x20000660

08001a88 <parsing_GPVTG_line>:


//---------------------------------------------------------------------
void parsing_GPVTG_line(char *str_GPVTG)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09c      	sub	sp, #112	; 0x70
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    // $GPVTG,,T,,M,0.036,N,0.066,K,A*26\r\n
	char nmeaSnt[49];
	int size = sizeof(nmeaSnt);
 8001a90:	2331      	movs	r3, #49	; 0x31
 8001a92:	667b      	str	r3, [r7, #100]	; 0x64
	memset(nmeaSnt, 0, size);
 8001a94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 f881 	bl	8007ba4 <memset>

	char str[6]={0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	809a      	strh	r2, [r3, #4]

	//Copy to  "*" з str_GPVTG в nmeaSnt
	int size_nmeaSnt = sizeof(nmeaSnt);
 8001aac:	2331      	movs	r3, #49	; 0x31
 8001aae:	663b      	str	r3, [r7, #96]	; 0x60
	int i=0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c

	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ab8:	e00c      	b.n	8001ad4 <parsing_GPVTG_line+0x4c>
	{
		nmeaSnt[i]=str_GPVTG[i];    // Read 49 bytes
 8001aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	7819      	ldrb	r1, [r3, #0]
 8001ac2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac8:	4413      	add	r3, r2
 8001aca:	460a      	mov	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
	for(i=0; (str_GPVTG[i] != '*') && (i < 50)  ; i++)
 8001ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b2a      	cmp	r3, #42	; 0x2a
 8001ade:	d002      	beq.n	8001ae6 <parsing_GPVTG_line+0x5e>
 8001ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae2:	2b31      	cmp	r3, #49	; 0x31
 8001ae4:	dde9      	ble.n	8001aba <parsing_GPVTG_line+0x32>
	}

	// Check check sum //////////////////////////////////////////////////////////////
	char smNmbr[3]={0};     								// array for checksum
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	2100      	movs	r1, #0
 8001aec:	460a      	mov	r2, r1
 8001aee:	801a      	strh	r2, [r3, #0]
 8001af0:	460a      	mov	r2, r1
 8001af2:	709a      	strb	r2, [r3, #2]
	char *rawSum;
	char not_used[12] = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
	//char speed[6] = {0};

	// Find "*"
	rawSum = strstr(str_GPVTG, "*");                       	// Find "*" in nmeaSnt. (Find start checksum number)
 8001b00:	212a      	movs	r1, #42	; 0x2a
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f006 f876 	bl	8007bf4 <strchr>
 8001b08:	65f8      	str	r0, [r7, #92]	; 0x5c
	memcpy(smNmbr, &rawSum[1], 2);							// Copy checksum
 8001b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	833b      	strh	r3, [r7, #24]
	smNmbr[2]='\0';											// Add and of line '\0' sing
 8001b14:	2300      	movs	r3, #0
 8001b16:	76bb      	strb	r3, [r7, #26]

	uint8_t intSum = nmea0183_checksum(nmeaSnt);			// Checksum
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fb11 	bl	8001144 <nmea0183_checksum>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char hex[3];
	sprintf(hex, "%x", intSum);
 8001b28:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4932      	ldr	r1, [pc, #200]	; (8001bfc <parsing_GPVTG_line+0x174>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f006 f83e 	bl	8007bb4 <siprintf>

//	if(strstr(smNmbr, hex) != NULL)
//	{
			// Parsing string //////////////////////////////////////////////////////////////
			uint8_t cnt = 0;            		// Count of elements
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

			i = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	66fb      	str	r3, [r7, #108]	; 0x6c
			int count = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	66bb      	str	r3, [r7, #104]	; 0x68

			while(nmeaSnt[i] != '\0')
 8001b46:	e04d      	b.n	8001be4 <parsing_GPVTG_line+0x15c>
			{
				if(nmeaSnt[i] == ',')
 8001b48:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b2c      	cmp	r3, #44	; 0x2c
 8001b54:	d102      	bne.n	8001b5c <parsing_GPVTG_line+0xd4>
				{
					count++;
 8001b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b58:	3301      	adds	r3, #1
 8001b5a:	66bb      	str	r3, [r7, #104]	; 0x68
				}
				if(count == 7)
 8001b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b5e:	2b07      	cmp	r3, #7
 8001b60:	d13d      	bne.n	8001bde <parsing_GPVTG_line+0x156>
				{
					i++;
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b64:	3301      	adds	r3, #1
 8001b66:	66fb      	str	r3, [r7, #108]	; 0x6c
					uint8_t size = sizeof(GPS_data.speed);
 8001b68:	2304      	movs	r3, #4
 8001b6a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
					uint8_t k = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					for(k = 0; k<=5; k++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001b7a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d82d      	bhi.n	8001bde <parsing_GPVTG_line+0x156>
					{
						GPS_data.speed[k] = nmeaSnt[i+k];
 8001b82:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b88:	441a      	add	r2, r3
 8001b8a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001b8e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001b92:	440a      	add	r2, r1
 8001b94:	f812 1c4c 	ldrb.w	r1, [r2, #-76]
 8001b98:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <parsing_GPVTG_line+0x178>)
 8001b9a:	4413      	add	r3, r2
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						if(nmeaSnt[i+k] = '.')              // don't use number after comma
 8001ba2:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba8:	4413      	add	r3, r2
 8001baa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001bae:	4413      	add	r3, r2
 8001bb0:	222e      	movs	r2, #46	; 0x2e
 8001bb2:	f803 2c4c 	strb.w	r2, [r3, #-76]
						{
							// Save in global variable
							memset(str, 0 , sizeof(str));
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2206      	movs	r2, #6
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 fff0 	bl	8007ba4 <memset>
							sprintf(str,"%s", GPS_data.speed);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <parsing_GPVTG_line+0x17c>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f006 f81f 	bl	8007c0e <strcpy>
							strcpy(gps_speed, str);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <parsing_GPVTG_line+0x180>)
 8001bd8:	f006 f819 	bl	8007c0e <strcpy>

							break;
 8001bdc:	bf00      	nop
						}
					}
				}
				i++;
 8001bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be0:	3301      	adds	r3, #1
 8001be2:	66fb      	str	r3, [r7, #108]	; 0x6c
			while(nmeaSnt[i] != '\0')
 8001be4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1aa      	bne.n	8001b48 <parsing_GPVTG_line+0xc0>
			}
}
 8001bf2:	bf00      	nop
 8001bf4:	3770      	adds	r7, #112	; 0x70
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	0800b060 	.word	0x0800b060
 8001c00:	20000678 	.word	0x20000678
 8001c04:	20000699 	.word	0x20000699
 8001c08:	2000063c 	.word	0x2000063c

08001c0c <parsing_GPS>:


//---------------------------------------------------------------------
// Parsing
void parsing_GPS(uint8_t *GPS_buff, int size_buff)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	6018      	str	r0, [r3, #0]
 8001c18:	463b      	mov	r3, r7
 8001c1a:	6019      	str	r1, [r3, #0]

/////////////////////////////

	char buffStr[512];

	if(flag == 1)    										 // If data from GPS module in buffer
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <parsing_GPS+0xa8>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d141      	bne.n	8001ca8 <parsing_GPS+0x9c>
	{
		memset(buffStr, 0, 512);        					 // Clean buffStr
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 ffb8 	bl	8007ba4 <memset>
		sprintf(buffStr, "%s", GPS_buff);					 // Save in buffStr string from biff
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	f107 020c 	add.w	r2, r7, #12
 8001c3a:	6819      	ldr	r1, [r3, #0]
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f005 ffe6 	bl	8007c0e <strcpy>
		char *str_GPGLL;
		char *str_GPGGA;
		char *str_GPVTG;

		// Find $GPGLL // work
		str_GPGLL = strstr(buffStr, "$GPGLL");    // $GPGLL,4948.72578,N,02359.72468,E,151729.00,A,A*6C\r
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	491c      	ldr	r1, [pc, #112]	; (8001cb8 <parsing_GPS+0xac>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 ffe8 	bl	8007c1e <strstr>
 8001c4e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		if(str_GPGLL != NULL)
 8001c52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <parsing_GPS+0x56>
		{
			parsing_GPGLL_line(str_GPGLL);
 8001c5a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001c5e:	f7ff fa95 	bl	800118c <parsing_GPGLL_line>
		}

		// Find $GPGGA // Don't work
		str_GPGGA = strstr(buffStr, "$GPGGA");
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4915      	ldr	r1, [pc, #84]	; (8001cbc <parsing_GPS+0xb0>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 ffd8 	bl	8007c1e <strstr>
 8001c6e:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		if(str_GPGGA != NULL)
 8001c72:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <parsing_GPS+0x76>
		{
			parsing_GPGGA_line(str_GPGGA);
 8001c7a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8001c7e:	f7ff fd37 	bl	80016f0 <parsing_GPGGA_line>
		}

		str_GPVTG = strstr(buffStr, "$GPVTG");
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <parsing_GPS+0xb4>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 ffc8 	bl	8007c1e <strstr>
 8001c8e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if(str_GPVTG != NULL)
 8001c92:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <parsing_GPS+0x96>
		{
			parsing_GPVTG_line(str_GPVTG);
 8001c9a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001c9e:	f7ff fef3 	bl	8001a88 <parsing_GPVTG_line>
		}

		flag = 0;			// Data was read
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <parsing_GPS+0xa8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ca8:	bf00      	nop
 8001caa:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000020e 	.word	0x2000020e
 8001cb8:	0800b064 	.word	0x0800b064
 8001cbc:	0800b06c 	.word	0x0800b06c
 8001cc0:	0800b074 	.word	0x0800b074

08001cc4 <read_T_and_H_SI7021>:
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
	memset(str, 0 , sizeof(str));
}
// --------------------------------------------------------------------------------
void read_T_and_H_SI7021(void)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08d      	sub	sp, #52	; 0x34
 8001cc8:	af02      	add	r7, sp, #8
	uint8_t size=0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[10]={0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	811a      	strh	r2, [r3, #8]
	int8_t STATUS = -1;
 8001cda:	23ff      	movs	r3, #255	; 0xff
 8001cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	float data = 0;
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]

	// Read temperature ///////////////////////////////
	STATUS = r_single_Si7021(&data, Temperature);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f990 	bl	8002010 <r_single_Si7021>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001cf6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d000      	beq.n	8001d00 <read_T_and_H_SI7021+0x3c>
	{
		while(1){}
 8001cfe:	e7fe      	b.n	8001cfe <read_T_and_H_SI7021+0x3a>
	}

	// For avoid float print
	char *tmpSign = (data < 0) ? "-" : "";
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f9c4 	bl	8001094 <__aeabi_fcmplt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <read_T_and_H_SI7021+0x52>
 8001d12:	4b6b      	ldr	r3, [pc, #428]	; (8001ec0 <read_T_and_H_SI7021+0x1fc>)
 8001d14:	e000      	b.n	8001d18 <read_T_and_H_SI7021+0x54>
 8001d16:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <read_T_and_H_SI7021+0x200>)
 8001d18:	623b      	str	r3, [r7, #32]
	float tmpVal = (data < 0) ? -data : data;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f9b7 	bl	8001094 <__aeabi_fcmplt>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <read_T_and_H_SI7021+0x70>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d32:	e000      	b.n	8001d36 <read_T_and_H_SI7021+0x72>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	61fb      	str	r3, [r7, #28]

	int tmpInt1 = tmpVal;
 8001d38:	69f8      	ldr	r0, [r7, #28]
 8001d3a:	f7ff f9d3 	bl	80010e4 <__aeabi_f2iz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	61bb      	str	r3, [r7, #24]
	float tmpFrac = (data - tmpInt1);
 8001d42:	683c      	ldr	r4, [r7, #0]
 8001d44:	69b8      	ldr	r0, [r7, #24]
 8001d46:	f7fe ffb3 	bl	8000cb0 <__aeabi_i2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7fe fef8 	bl	8000b44 <__aeabi_fsub>
 8001d54:	4603      	mov	r3, r0
 8001d56:	617b      	str	r3, [r7, #20]
	int tmpInt2 = trunc(tmpFrac * 10000);
 8001d58:	495b      	ldr	r1, [pc, #364]	; (8001ec8 <read_T_and_H_SI7021+0x204>)
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7fe fffc 	bl	8000d58 <__aeabi_fmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb60 	bl	8000428 <__aeabi_f2d>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4621      	mov	r1, r4
 8001d70:	f009 f938 	bl	800afe4 <trunc>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f7fe fe46 	bl	8000a0c <__aeabi_d2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	613b      	str	r3, [r7, #16]

	// Print Temperature in COM port
	sprintf(str,"T:%s%d.%04d C\r\n", tmpSign, tmpInt1, tmpInt2);      										// convert   in  str
 8001d84:	1d38      	adds	r0, r7, #4
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	494f      	ldr	r1, [pc, #316]	; (8001ecc <read_T_and_H_SI7021+0x208>)
 8001d90:	f005 ff10 	bl	8007bb4 <siprintf>
	size=sizeof(str);
 8001d94:	230a      	movs	r3, #10
 8001d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
 8001d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	1d39      	adds	r1, r7, #4
 8001da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da6:	484a      	ldr	r0, [pc, #296]	; (8001ed0 <read_T_and_H_SI7021+0x20c>)
 8001da8:	f005 f990 	bl	80070cc <HAL_UART_Transmit>
	memset(str, 0 , sizeof(str));
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	220a      	movs	r2, #10
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 fef6 	bl	8007ba4 <memset>

	// Save in global variable
	sprintf(str,"T:%s%d\0", tmpSign, tmpInt1);
 8001db8:	1d38      	adds	r0, r7, #4
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	4945      	ldr	r1, [pc, #276]	; (8001ed4 <read_T_and_H_SI7021+0x210>)
 8001dc0:	f005 fef8 	bl	8007bb4 <siprintf>
	strcpy(temperature_si7021, str);
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4843      	ldr	r0, [pc, #268]	; (8001ed8 <read_T_and_H_SI7021+0x214>)
 8001dca:	f005 ff20 	bl	8007c0e <strcpy>
	memset(str, 0 , sizeof(str));
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	220a      	movs	r2, #10
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 fee5 	bl	8007ba4 <memset>

	//// Read humidity `///////////////////////////////////
	STATUS = -1;
 8001dda:	23ff      	movs	r3, #255	; 0xff
 8001ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	STATUS = r_single_Si7021(&data, Humidity);
 8001de0:	463b      	mov	r3, r7
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f913 	bl	8002010 <r_single_Si7021>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(STATUS != 0)       	// If error
 8001df0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d000      	beq.n	8001dfa <read_T_and_H_SI7021+0x136>
	{
		while(1){}
 8001df8:	e7fe      	b.n	8001df8 <read_T_and_H_SI7021+0x134>
	}

	//// For avoid float print
	//// char *tmpSign = (data < 0) ? "-" : "";
	tmpVal = (data < 0) ? -data : data;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f947 	bl	8001094 <__aeabi_fcmplt>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <read_T_and_H_SI7021+0x150>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e12:	e000      	b.n	8001e16 <read_T_and_H_SI7021+0x152>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	61fb      	str	r3, [r7, #28]

	tmpInt1 = tmpVal;
 8001e18:	69f8      	ldr	r0, [r7, #28]
 8001e1a:	f7ff f963 	bl	80010e4 <__aeabi_f2iz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
	tmpFrac = (data - tmpInt1);
 8001e22:	683c      	ldr	r4, [r7, #0]
 8001e24:	69b8      	ldr	r0, [r7, #24]
 8001e26:	f7fe ff43 	bl	8000cb0 <__aeabi_i2f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7fe fe88 	bl	8000b44 <__aeabi_fsub>
 8001e34:	4603      	mov	r3, r0
 8001e36:	617b      	str	r3, [r7, #20]
	tmpInt2 = trunc(tmpFrac * 10000);
 8001e38:	4923      	ldr	r1, [pc, #140]	; (8001ec8 <read_T_and_H_SI7021+0x204>)
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7fe ff8c 	bl	8000d58 <__aeabi_fmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe faf0 	bl	8000428 <__aeabi_f2d>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4621      	mov	r1, r4
 8001e50:	f009 f8c8 	bl	800afe4 <trunc>
 8001e54:	4603      	mov	r3, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	f7fe fdd6 	bl	8000a0c <__aeabi_d2iz>
 8001e60:	4603      	mov	r3, r0
 8001e62:	613b      	str	r3, [r7, #16]

	// Print in COM port
	sprintf(str,"H:%d.%01d %% \r\n", tmpInt1, tmpInt2);      										// convert   in  str
 8001e64:	1d38      	adds	r0, r7, #4
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	491c      	ldr	r1, [pc, #112]	; (8001edc <read_T_and_H_SI7021+0x218>)
 8001e6c:	f005 fea2 	bl	8007bb4 <siprintf>
	size=sizeof(str);
 8001e70:	230a      	movs	r3, #10
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart1 , (uint8_t *)str, size, 0xFFFF);
 8001e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	1d39      	adds	r1, r7, #4
 8001e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <read_T_and_H_SI7021+0x20c>)
 8001e84:	f005 f922 	bl	80070cc <HAL_UART_Transmit>
	memset(str, 0 , sizeof(str));
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	220a      	movs	r2, #10
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f005 fe88 	bl	8007ba4 <memset>

	// Save in global variable
	sprintf(str,"H:%d\0", tmpInt1);
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4911      	ldr	r1, [pc, #68]	; (8001ee0 <read_T_and_H_SI7021+0x21c>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fe8a 	bl	8007bb4 <siprintf>
	strcpy(humidity_si7021, str);
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <read_T_and_H_SI7021+0x220>)
 8001ea6:	f005 feb2 	bl	8007c0e <strcpy>
	memset(str, 0 , sizeof(str));
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	220a      	movs	r2, #10
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f005 fe77 	bl	8007ba4 <memset>
}
 8001eb6:	bf00      	nop
 8001eb8:	372c      	adds	r7, #44	; 0x2c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800b08c 	.word	0x0800b08c
 8001ec4:	0800b090 	.word	0x0800b090
 8001ec8:	461c4000 	.word	0x461c4000
 8001ecc:	0800b094 	.word	0x0800b094
 8001ed0:	200007e0 	.word	0x200007e0
 8001ed4:	0800b0a4 	.word	0x0800b0a4
 8001ed8:	2000062c 	.word	0x2000062c
 8001edc:	0800b0ac 	.word	0x0800b0ac
 8001ee0:	0800b0bc 	.word	0x0800b0bc
 8001ee4:	20000634 	.word	0x20000634

08001ee8 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fa85 	bl	8000404 <__aeabi_i2d>
 8001efa:	a311      	add	r3, pc, #68	; (adr r3, 8001f40 <process_temp_code+0x58>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe faea 	bl	80004d8 <__aeabi_dmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <process_temp_code+0x68>)
 8001f12:	f7fe fc0b 	bl	800072c <__aeabi_ddiv>
 8001f16:	4603      	mov	r3, r0
 8001f18:	460c      	mov	r4, r1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	a30a      	add	r3, pc, #40	; (adr r3, 8001f48 <process_temp_code+0x60>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe f920 	bl	8000168 <__aeabi_dsub>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4621      	mov	r1, r4
 8001f30:	f7fe fdb4 	bl	8000a9c <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	3d70a3d7 	.word	0x3d70a3d7
 8001f44:	4065f70a 	.word	0x4065f70a
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	40476ccc 	.word	0x40476ccc
 8001f50:	40f00000 	.word	0x40f00000

08001f54 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa4f 	bl	8000404 <__aeabi_i2d>
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <process_humi_code+0x84>)
 8001f6c:	f7fe fab4 	bl	80004d8 <__aeabi_dmul>
 8001f70:	4603      	mov	r3, r0
 8001f72:	460c      	mov	r4, r1
 8001f74:	4618      	mov	r0, r3
 8001f76:	4621      	mov	r1, r4
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <process_humi_code+0x88>)
 8001f7e:	f7fe fbd5 	bl	800072c <__aeabi_ddiv>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	4618      	mov	r0, r3
 8001f88:	4621      	mov	r1, r4
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <process_humi_code+0x8c>)
 8001f90:	f7fe f8ea 	bl	8000168 <__aeabi_dsub>
 8001f94:	4603      	mov	r3, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	f7fe fd7e 	bl	8000a9c <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff f873 	bl	8001094 <__aeabi_fcmplt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <process_humi_code+0x66>
    return 0;
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e009      	b.n	8001fce <process_humi_code+0x7a>
  else if(value > 100)
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <process_humi_code+0x90>)
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff f887 	bl	80010d0 <__aeabi_fcmpgt>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <process_humi_code+0x78>
    return 100;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <process_humi_code+0x90>)
 8001fca:	e000      	b.n	8001fce <process_humi_code+0x7a>
  else
    return (float)value;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	405f4000 	.word	0x405f4000
 8001fdc:	40f00000 	.word	0x40f00000
 8001fe0:	40180000 	.word	0x40180000
 8001fe4:	42c80000 	.word	0x42c80000

08001fe8 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21b      	sxth	r3, r3
 8002004:	b29b      	uxth	r3, r3
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <r_single_Si7021>:
  else
    return 0;
}

int8_t r_single_Si7021(float* data, Si7021_measurement_type_t type)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af02      	add	r7, sp, #8
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd;
  uint8_t buffer[2];
  uint16_t code;

  if(type == Humidity)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <r_single_Si7021+0x18>
    cmd = Humi_HM;
 8002022:	23e5      	movs	r3, #229	; 0xe5
 8002024:	737b      	strb	r3, [r7, #13]
 8002026:	e008      	b.n	800203a <r_single_Si7021+0x2a>
  else if(type == Temperature)
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <r_single_Si7021+0x24>
    cmd = Temp_HM;
 800202e:	23e3      	movs	r3, #227	; 0xe3
 8002030:	737b      	strb	r3, [r7, #13]
 8002032:	e002      	b.n	800203a <r_single_Si7021+0x2a>
  else
    return -1;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002038:	e03c      	b.n	80020b4 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR, &cmd, 1, 10000))
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	f107 020d 	add.w	r2, r7, #13
 8002040:	f242 7310 	movw	r3, #10000	; 0x2710
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2301      	movs	r3, #1
 8002048:	481c      	ldr	r0, [pc, #112]	; (80020bc <r_single_Si7021+0xac>)
 800204a:	f002 f9c3 	bl	80043d4 <HAL_I2C_Master_Transmit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <r_single_Si7021+0x4a>
    return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002058:	e02c      	b.n	80020b4 <r_single_Si7021+0xa4>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c1, I2C_ADDR, buffer, 2, 10000))
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	f107 0208 	add.w	r2, r7, #8
 8002060:	f242 7310 	movw	r3, #10000	; 0x2710
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2302      	movs	r3, #2
 8002068:	4814      	ldr	r0, [pc, #80]	; (80020bc <r_single_Si7021+0xac>)
 800206a:	f002 fab1 	bl	80045d0 <HAL_I2C_Master_Receive>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <r_single_Si7021+0x6a>
    return -1;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002078:	e01c      	b.n	80020b4 <r_single_Si7021+0xa4>

  code = convert_to_uint16(buffer);
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffb2 	bl	8001fe8 <convert_to_uint16>
 8002084:	4603      	mov	r3, r0
 8002086:	81fb      	strh	r3, [r7, #14]

  if(type == Humidity)
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <r_single_Si7021+0x8e>
    *data = process_humi_code(code);
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5f 	bl	8001f54 <process_humi_code>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e009      	b.n	80020b2 <r_single_Si7021+0xa2>
  else if(type == Temperature)
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <r_single_Si7021+0xa2>
    *data = process_temp_code(code);
 80020a4:	89fb      	ldrh	r3, [r7, #14]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff1e 	bl	8001ee8 <process_temp_code>
 80020ac:	4602      	mov	r2, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]

  return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000078c 	.word	0x2000078c

080020c0 <I2C_1_scaner>:
uint32_t timeout=1000;						// timeout for receive
uint16_t STATUS=0;								// Status connect to device (if STATUS==0 - device

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b09e      	sub	sp, #120	; 0x78
 80020c4:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t size=0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	char str3[100]={0};
 80020cc:	463b      	mov	r3, r7
 80020ce:	2264      	movs	r2, #100	; 0x64
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f005 fd66 	bl	8007ba4 <memset>
	uint8_t size_mas=sizeof(str3);
 80020d8:	2364      	movs	r3, #100	; 0x64
 80020da:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t i=0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	sprintf(str3,"I2C_1 SEARCH DEVISES... \r\n");      										// convert   in  str
 80020e4:	463b      	mov	r3, r7
 80020e6:	4a7f      	ldr	r2, [pc, #508]	; (80022e4 <I2C_1_scaner+0x224>)
 80020e8:	461c      	mov	r4, r3
 80020ea:	4615      	mov	r5, r2
 80020ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020f4:	c403      	stmia	r4!, {r0, r1}
 80020f6:	8022      	strh	r2, [r4, #0]
 80020f8:	3402      	adds	r4, #2
 80020fa:	0c13      	lsrs	r3, r2, #16
 80020fc:	7023      	strb	r3, [r4, #0]
	size=sizeof(str3);
 80020fe:	2364      	movs	r3, #100	; 0x64
 8002100:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8002104:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002108:	b29a      	uxth	r2, r3
 800210a:	4639      	mov	r1, r7
 800210c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002110:	4875      	ldr	r0, [pc, #468]	; (80022e8 <I2C_1_scaner+0x228>)
 8002112:	f004 ffdb 	bl	80070cc <HAL_UART_Transmit>
	uint8_t number_of_device=0;				// How many device controller is found
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 800211c:	4b73      	ldr	r3, [pc, #460]	; (80022ec <I2C_1_scaner+0x22c>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e095      	b.n	8002250 <I2C_1_scaner+0x190>
	{
		HAL_Delay(1);
 8002124:	2001      	movs	r0, #1
 8002126:	f001 fb17 	bl	8003758 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <I2C_1_scaner+0x22c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	b299      	uxth	r1, r3
 8002134:	4b6e      	ldr	r3, [pc, #440]	; (80022f0 <I2C_1_scaner+0x230>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b298      	uxth	r0, r3
 800213a:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <I2C_1_scaner+0x234>)
 800213c:	881c      	ldrh	r4, [r3, #0]
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <I2C_1_scaner+0x234>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <I2C_1_scaner+0x238>)
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	9202      	str	r2, [sp, #8]
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <I2C_1_scaner+0x23c>)
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4623      	mov	r3, r4
 8002150:	4602      	mov	r2, r0
 8002152:	486b      	ldr	r0, [pc, #428]	; (8002300 <I2C_1_scaner+0x240>)
 8002154:	f002 fd90 	bl	8004c78 <HAL_I2C_Mem_Read>
 8002158:	4603      	mov	r3, r0
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <I2C_1_scaner+0x244>)
 800215e:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <I2C_1_scaner+0x244>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d16d      	bne.n	8002244 <I2C_1_scaner+0x184>
		{
			number_of_device++;
 8002168:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800216c:	3301      	adds	r3, #1
 800216e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8002172:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <I2C_1_scaner+0x22c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <I2C_1_scaner+0x22c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b3c      	cmp	r3, #60	; 0x3c
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d03c      	beq.n	8002210 <I2C_1_scaner+0x150>
			{
				switch (addres_devise)
 8002196:	4b55      	ldr	r3, [pc, #340]	; (80022ec <I2C_1_scaner+0x22c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b3c      	cmp	r3, #60	; 0x3c
 800219c:	d01c      	beq.n	80021d8 <I2C_1_scaner+0x118>
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d150      	bne.n	8002244 <I2C_1_scaner+0x184>
				{
					case H_and_T_sensor_SI7021_I2C_ADDR:
						sprintf(str3,"Device address-0x%x - found. It is Humidity and Temperature sensor SI7021 \r\n",addres_devise);      // convert   in  str
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <I2C_1_scaner+0x22c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	463b      	mov	r3, r7
 80021aa:	4957      	ldr	r1, [pc, #348]	; (8002308 <I2C_1_scaner+0x248>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f005 fd01 	bl	8007bb4 <siprintf>
						size=sizeof(str3);
 80021b2:	2364      	movs	r3, #100	; 0x64
 80021b4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80021b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4639      	mov	r1, r7
 80021c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <I2C_1_scaner+0x228>)
 80021c6:	f004 ff81 	bl	80070cc <HAL_UART_Transmit>
						memset(str3, 0 , sizeof(str3));   // Clean str3
 80021ca:	463b      	mov	r3, r7
 80021cc:	2264      	movs	r2, #100	; 0x64
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f005 fce7 	bl	8007ba4 <memset>
                    break;
 80021d6:	e035      	b.n	8002244 <I2C_1_scaner+0x184>

					case  OLED_SSD136_I2C_ADDR:
						sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
 80021d8:	4b44      	ldr	r3, [pc, #272]	; (80022ec <I2C_1_scaner+0x22c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	463b      	mov	r3, r7
 80021e0:	494a      	ldr	r1, [pc, #296]	; (800230c <I2C_1_scaner+0x24c>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f005 fce6 	bl	8007bb4 <siprintf>
						size=sizeof(str3);
 80021e8:	2364      	movs	r3, #100	; 0x64
 80021ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
						HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80021ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4639      	mov	r1, r7
 80021f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021fa:	483b      	ldr	r0, [pc, #236]	; (80022e8 <I2C_1_scaner+0x228>)
 80021fc:	f004 ff66 	bl	80070cc <HAL_UART_Transmit>
						memset(str3, 0 , sizeof(str3));   // Clean str3
 8002200:	463b      	mov	r3, r7
 8002202:	2264      	movs	r2, #100	; 0x64
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f005 fccc 	bl	8007ba4 <memset>
				    break;
 800220c:	bf00      	nop
 800220e:	e019      	b.n	8002244 <I2C_1_scaner+0x184>
				}
			}

			else
			{
				memset(str3, 0 , sizeof(str3));
 8002210:	463b      	mov	r3, r7
 8002212:	2264      	movs	r2, #100	; 0x64
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f005 fcc4 	bl	8007ba4 <memset>
				sprintf(str3,"Device address-0x%x - found........................UNKNOWN DEVICE \r\n",addres_devise);      // convert   in  str
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <I2C_1_scaner+0x22c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	463b      	mov	r3, r7
 8002224:	493a      	ldr	r1, [pc, #232]	; (8002310 <I2C_1_scaner+0x250>)
 8002226:	4618      	mov	r0, r3
 8002228:	f005 fcc4 	bl	8007bb4 <siprintf>
				size=sizeof(str3);
 800222c:	2364      	movs	r3, #100	; 0x64
 800222e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 8002232:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002236:	b29a      	uxth	r2, r3
 8002238:	4639      	mov	r1, r7
 800223a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223e:	482a      	ldr	r0, [pc, #168]	; (80022e8 <I2C_1_scaner+0x228>)
 8002240:	f004 ff44 	bl	80070cc <HAL_UART_Transmit>
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <I2C_1_scaner+0x22c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <I2C_1_scaner+0x22c>)
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <I2C_1_scaner+0x22c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2bff      	cmp	r3, #255	; 0xff
 8002256:	f47f af65 	bne.w	8002124 <I2C_1_scaner+0x64>
			}
		}
	}
	if(number_of_device==0)  																				// If devices nofound
 800225a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11c      	bne.n	800229c <I2C_1_scaner+0x1dc>
	{
		memset(str3, 0 , sizeof(str3));
 8002262:	463b      	mov	r3, r7
 8002264:	2264      	movs	r2, #100	; 0x64
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f005 fc9b 	bl	8007ba4 <memset>
		sprintf(str3,"Devices no found!!!\r\n");      							// convert   in  str
 800226e:	463b      	mov	r3, r7
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <I2C_1_scaner+0x254>)
 8002272:	461c      	mov	r4, r3
 8002274:	4615      	mov	r5, r2
 8002276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800227e:	6020      	str	r0, [r4, #0]
 8002280:	3404      	adds	r4, #4
 8002282:	8021      	strh	r1, [r4, #0]
		size=sizeof(str3);
 8002284:	2364      	movs	r3, #100	; 0x64
 8002286:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 800228a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800228e:	b29a      	uxth	r2, r3
 8002290:	4639      	mov	r1, r7
 8002292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002296:	4814      	ldr	r0, [pc, #80]	; (80022e8 <I2C_1_scaner+0x228>)
 8002298:	f004 ff18 	bl	80070cc <HAL_UART_Transmit>
	}

	memset(str3, 0 , sizeof(str3));
 800229c:	463b      	mov	r3, r7
 800229e:	2264      	movs	r2, #100	; 0x64
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 fc7e 	bl	8007ba4 <memset>
	sprintf(str3,"DONE\r\n");      																	// convert   in  str
 80022a8:	463b      	mov	r3, r7
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <I2C_1_scaner+0x258>)
 80022ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022b0:	6018      	str	r0, [r3, #0]
 80022b2:	3304      	adds	r3, #4
 80022b4:	8019      	strh	r1, [r3, #0]
 80022b6:	3302      	adds	r3, #2
 80022b8:	0c0a      	lsrs	r2, r1, #16
 80022ba:	701a      	strb	r2, [r3, #0]
	size=sizeof(str3);
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
 80022c2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4639      	mov	r1, r7
 80022ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ce:	4806      	ldr	r0, [pc, #24]	; (80022e8 <I2C_1_scaner+0x228>)
 80022d0:	f004 fefc 	bl	80070cc <HAL_UART_Transmit>

	HAL_Delay(500);
 80022d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022d8:	f001 fa3e 	bl	8003758 <HAL_Delay>
}
 80022dc:	bf00      	nop
 80022de:	3768      	adds	r7, #104	; 0x68
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bdb0      	pop	{r4, r5, r7, pc}
 80022e4:	0800b0c4 	.word	0x0800b0c4
 80022e8:	200007e0 	.word	0x200007e0
 80022ec:	20000208 	.word	0x20000208
 80022f0:	20000209 	.word	0x20000209
 80022f4:	20000008 	.word	0x20000008
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	2000020a 	.word	0x2000020a
 8002300:	2000078c 	.word	0x2000078c
 8002304:	2000020c 	.word	0x2000020c
 8002308:	0800b0e0 	.word	0x0800b0e0
 800230c:	0800b130 	.word	0x0800b130
 8002310:	0800b15c 	.word	0x0800b15c
 8002314:	0800b1a4 	.word	0x0800b1a4
 8002318:	0800b1bc 	.word	0x0800b1bc

0800231c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PV */
// -----------------------------------------------------------------------------
#if GPS
	uint8_t flag = 0;					// Flag signals what GPS buffer is full
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
		flag = 1;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_UART_RxCpltCallback+0x18>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
	}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	2000020e 	.word	0x2000020e

08002338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002340:	f001 f9a8 	bl	8003694 <HAL_Init>
//
//  } global_data;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002344:	f000 f856 	bl	80023f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002348:	f000 fa8a 	bl	8002860 <MX_GPIO_Init>
  MX_DMA_Init();
 800234c:	f000 fa6a 	bl	8002824 <MX_DMA_Init>
  MX_TIM2_Init();
 8002350:	f000 f99c 	bl	800268c <MX_TIM2_Init>
  MX_I2C1_Init();
 8002354:	f000 f894 	bl	8002480 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002358:	f000 f9e6 	bl	8002728 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800235c:	f000 fa38 	bl	80027d0 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8002360:	f000 f8bc 	bl	80024dc <MX_SPI2_Init>
  MX_TIM1_Init();
 8002364:	f000 f8f0 	bl	8002548 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002368:	f000 fa08 	bl	800277c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



#if I2C_SCANNER
  I2C_1_scaner();
 800236c:	f7ff fea8 	bl	80020c0 <I2C_1_scaner>
#endif

#if H_a_T_SI7021
  read_T_and_H_SI7021();
 8002370:	f7ff fca8 	bl	8001cc4 <read_T_and_H_SI7021>
#endif

#if OLED
  init_oled();
 8002374:	f000 fafc 	bl	8002970 <init_oled>
	  //test_oled();
#endif

HAL_TIM_Base_Start_IT(&htim2);
 8002378:	481a      	ldr	r0, [pc, #104]	; (80023e4 <main+0xac>)
 800237a:	f004 f831 	bl	80063e0 <HAL_TIM_Base_Start_IT>


#if GPS
	uint8_t GPS_buff[512];      						// main buffer for stream from GPS
	memset(GPS_buff ,0 ,sizeof(GPS_buff));
 800237e:	463b      	mov	r3, r7
 8002380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f005 fc0c 	bl	8007ba4 <memset>
	HAL_UART_Receive_DMA(&huart3, GPS_buff, 512);
 800238c:	463b      	mov	r3, r7
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	4619      	mov	r1, r3
 8002394:	4814      	ldr	r0, [pc, #80]	; (80023e8 <main+0xb0>)
 8002396:	f004 ff33 	bl	8007200 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
        if(interrupt_flag == 1)
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <main+0xb4>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d1fb      	bne.n	800239a <main+0x62>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a8:	4811      	ldr	r0, [pc, #68]	; (80023f0 <main+0xb8>)
 80023aa:	f001 fec3 	bl	8004134 <HAL_GPIO_WritePin>

        	read_T_and_H_SI7021();
 80023ae:	f7ff fc89 	bl	8001cc4 <read_T_and_H_SI7021>
        	test_flash_W25Q();
 80023b2:	f7fe febd 	bl	8001130 <test_flash_W25Q>

			#if GPS
        		parsing_GPS(GPS_buff, 512);
 80023b6:	463b      	mov	r3, r7
 80023b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fc25 	bl	8001c0c <parsing_GPS>
        		HAL_Delay(500);
 80023c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023c6:	f001 f9c7 	bl	8003758 <HAL_Delay>
			# else
        		HAL_Delay(500);
			#endif

			#if OLED
        		OLED_prinr_all_data();
 80023ca:	f000 fae1 	bl	8002990 <OLED_prinr_all_data>
			#endif

        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <main+0xb8>)
 80023d6:	f001 fead 	bl	8004134 <HAL_GPIO_WritePin>

			#if FINGERPRINT
        		fingerprint_test();
			#endif

        	interrupt_flag = 0;
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <main+0xb4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
        if(interrupt_flag == 1)
 80023e0:	e7db      	b.n	800239a <main+0x62>
 80023e2:	bf00      	nop
 80023e4:	20000860 	.word	0x20000860
 80023e8:	2000074c 	.word	0x2000074c
 80023ec:	2000020f 	.word	0x2000020f
 80023f0:	40011000 	.word	0x40011000

080023f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b090      	sub	sp, #64	; 0x40
 80023f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fa:	f107 0318 	add.w	r3, r7, #24
 80023fe:	2228      	movs	r2, #40	; 0x28
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f005 fbce 	bl	8007ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002416:	2301      	movs	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800241a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800241e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002424:	2301      	movs	r3, #1
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002428:	2302      	movs	r3, #2
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800242c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002432:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fb27 	bl	8005a90 <HAL_RCC_OscConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002448:	f000 fa8c 	bl	8002964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244c:	230f      	movs	r3, #15
 800244e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002450:	2302      	movs	r3, #2
 8002452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fd92 	bl	8005f90 <HAL_RCC_ClockConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002472:	f000 fa77 	bl	8002964 <Error_Handler>
  }
}
 8002476:	bf00      	nop
 8002478:	3740      	adds	r7, #64	; 0x40
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <MX_I2C1_Init+0x54>)
 8002488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_I2C1_Init+0x50>)
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <MX_I2C1_Init+0x58>)
 800248e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_I2C1_Init+0x50>)
 800249e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024be:	f001 fe51 	bl	8004164 <HAL_I2C_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024c8:	f000 fa4c 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000078c 	.word	0x2000078c
 80024d4:	40005400 	.word	0x40005400
 80024d8:	000186a0 	.word	0x000186a0

080024dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_SPI2_Init+0x64>)
 80024e2:	4a18      	ldr	r2, [pc, #96]	; (8002544 <MX_SPI2_Init+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <MX_SPI2_Init+0x64>)
 80024e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MX_SPI2_Init+0x64>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <MX_SPI2_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_SPI2_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_SPI2_Init+0x64>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_SPI2_Init+0x64>)
 8002508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_SPI2_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <MX_SPI2_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_SPI2_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <MX_SPI2_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_SPI2_Init+0x64>)
 8002528:	220a      	movs	r2, #10
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	; (8002540 <MX_SPI2_Init+0x64>)
 800252e:	f003 fecb 	bl	80062c8 <HAL_SPI_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002538:	f000 fa14 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200006b0 	.word	0x200006b0
 8002544:	40003800 	.word	0x40003800

08002548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b096      	sub	sp, #88	; 0x58
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2220      	movs	r2, #32
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f005 fb0f 	bl	8007ba4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <MX_TIM1_Init+0x13c>)
 8002588:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <MX_TIM1_Init+0x140>)
 800258a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600;
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <MX_TIM1_Init+0x13c>)
 800258e:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <MX_TIM1_Init+0x13c>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <MX_TIM1_Init+0x13c>)
 800259c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80025a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <MX_TIM1_Init+0x13c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <MX_TIM1_Init+0x13c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <MX_TIM1_Init+0x13c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025b4:	4833      	ldr	r0, [pc, #204]	; (8002684 <MX_TIM1_Init+0x13c>)
 80025b6:	f003 fee8 	bl	800638a <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80025c0:	f000 f9d0 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025ce:	4619      	mov	r1, r3
 80025d0:	482c      	ldr	r0, [pc, #176]	; (8002684 <MX_TIM1_Init+0x13c>)
 80025d2:	f004 f92b 	bl	800682c <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025dc:	f000 f9c2 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025e0:	4828      	ldr	r0, [pc, #160]	; (8002684 <MX_TIM1_Init+0x13c>)
 80025e2:	f003 ff20 	bl	8006426 <HAL_TIM_PWM_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80025ec:	f000 f9ba 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025fc:	4619      	mov	r1, r3
 80025fe:	4821      	ldr	r0, [pc, #132]	; (8002684 <MX_TIM1_Init+0x13c>)
 8002600:	f004 fc70 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800260a:	f000 f9ab 	bl	8002964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260e:	2360      	movs	r3, #96	; 0x60
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8002612:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002630:	2200      	movs	r2, #0
 8002632:	4619      	mov	r1, r3
 8002634:	4813      	ldr	r0, [pc, #76]	; (8002684 <MX_TIM1_Init+0x13c>)
 8002636:	f004 f833 	bl	80066a0 <HAL_TIM_PWM_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002640:	f000 f990 	bl	8002964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800265c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <MX_TIM1_Init+0x13c>)
 8002668:	f004 fc80 	bl	8006f6c <HAL_TIMEx_ConfigBreakDeadTime>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002672:	f000 f977 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <MX_TIM1_Init+0x13c>)
 8002678:	f000 fdfa 	bl	8003270 <HAL_TIM_MspPostInit>

}
 800267c:	bf00      	nop
 800267e:	3758      	adds	r7, #88	; 0x58
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000820 	.word	0x20000820
 8002688:	40012c00 	.word	0x40012c00

0800268c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002692:	f107 0308 	add.w	r3, r7, #8
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a0:	463b      	mov	r3, r7
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <MX_TIM2_Init+0x98>)
 80026aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <MX_TIM2_Init+0x98>)
 80026b2:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80026b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_TIM2_Init+0x98>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <MX_TIM2_Init+0x98>)
 80026c0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80026c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_TIM2_Init+0x98>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_TIM2_Init+0x98>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026d2:	4814      	ldr	r0, [pc, #80]	; (8002724 <MX_TIM2_Init+0x98>)
 80026d4:	f003 fe59 	bl	800638a <HAL_TIM_Base_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026de:	f000 f941 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4619      	mov	r1, r3
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <MX_TIM2_Init+0x98>)
 80026f0:	f004 f89c 	bl	800682c <HAL_TIM_ConfigClockSource>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026fa:	f000 f933 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002706:	463b      	mov	r3, r7
 8002708:	4619      	mov	r1, r3
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <MX_TIM2_Init+0x98>)
 800270c:	f004 fbea 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002716:	f000 f925 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000860 	.word	0x20000860

08002728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MX_USART1_UART_Init+0x50>)
 8002730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002760:	f004 fc67 	bl	8007032 <HAL_UART_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800276a:	f000 f8fb 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200007e0 	.word	0x200007e0
 8002778:	40013800 	.word	0x40013800

0800277c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <MX_USART2_UART_Init+0x50>)
 8002784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002788:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800278c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027b4:	f004 fc3d 	bl	8007032 <HAL_UART_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027be:	f000 f8d1 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200008a0 	.word	0x200008a0
 80027cc:	40004400 	.word	0x40004400

080027d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <MX_USART3_UART_Init+0x50>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_USART3_UART_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_USART3_UART_Init+0x4c>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_USART3_UART_Init+0x4c>)
 8002808:	f004 fc13 	bl	8007032 <HAL_UART_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002812:	f000 f8a7 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000074c 	.word	0x2000074c
 8002820:	40004800 	.word	0x40004800

08002824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_DMA_Init+0x38>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <MX_DMA_Init+0x38>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6153      	str	r3, [r2, #20]
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_DMA_Init+0x38>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	200d      	movs	r0, #13
 8002848:	f001 f87f 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800284c:	200d      	movs	r0, #13
 800284e:	f001 f898 	bl	8003982 <HAL_NVIC_EnableIRQ>

}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000

08002860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002874:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <MX_GPIO_Init+0xd0>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <MX_GPIO_Init+0xd0>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <MX_GPIO_Init+0xd0>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <MX_GPIO_Init+0xd0>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <MX_GPIO_Init+0xd0>)
 8002892:	f043 0320 	orr.w	r3, r3, #32
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <MX_GPIO_Init+0xd0>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <MX_GPIO_Init+0xd0>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <MX_GPIO_Init+0xd0>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <MX_GPIO_Init+0xd0>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <MX_GPIO_Init+0xd0>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <MX_GPIO_Init+0xd0>)
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <MX_GPIO_Init+0xd0>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80028d4:	2200      	movs	r2, #0
 80028d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028da:	4816      	ldr	r0, [pc, #88]	; (8002934 <MX_GPIO_Init+0xd4>)
 80028dc:	f001 fc2a 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_M25Q_GPIO_Port, CS_M25Q_Pin, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e6:	4814      	ldr	r0, [pc, #80]	; (8002938 <MX_GPIO_Init+0xd8>)
 80028e8:	f001 fc24 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4619      	mov	r1, r3
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <MX_GPIO_Init+0xd4>)
 8002906:	f001 fabb 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_M25Q_Pin */
  GPIO_InitStruct.Pin = CS_M25Q_Pin;
 800290a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_M25Q_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_GPIO_Init+0xd8>)
 8002924:	f001 faac 	bl	8003e80 <HAL_GPIO_Init>

}
 8002928:	bf00      	nop
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	40011000 	.word	0x40011000
 8002938:	40010c00 	.word	0x40010c00

0800293c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */


// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d102      	bne.n	8002954 <HAL_TIM_PeriodElapsedCallback+0x18>
        {
        	//read_T_and_H_SI7021();
        	interrupt_flag = 1;
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
        }
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000020f 	.word	0x2000020f

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <init_oled>:

extern TIM_HandleTypeDef htim1;

// -----------------------------------------------------------------------------------
void init_oled(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002974:	f000 f9ac 	bl	8002cd0 <ssd1306_Init>
	HAL_Delay(500);
 8002978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800297c:	f000 feec 	bl	8003758 <HAL_Delay>
	ssd1306_Fill(Black);
 8002980:	2000      	movs	r0, #0
 8002982:	f000 fa11 	bl	8002da8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002986:	f000 fa31 	bl	8002dec <ssd1306_UpdateScreen>
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <OLED_prinr_all_data>:
		}
	}
}
// -----------------------------------------------------------------------------------
void OLED_prinr_all_data(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b094      	sub	sp, #80	; 0x50
 8002994:	af00      	add	r7, sp, #0
	// Print temperature and humidity 'si7021'
	ssd1306_SetCursor(0, 0);
 8002996:	2100      	movs	r1, #0
 8002998:	2000      	movs	r0, #0
 800299a:	f000 fb5d 	bl	8003058 <ssd1306_SetCursor>
	ssd1306_WriteString(temperature_si7021, Font_7x10, White);
 800299e:	4ab3      	ldr	r2, [pc, #716]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 80029a0:	2301      	movs	r3, #1
 80029a2:	ca06      	ldmia	r2, {r1, r2}
 80029a4:	48b2      	ldr	r0, [pc, #712]	; (8002c70 <OLED_prinr_all_data+0x2e0>)
 80029a6:	f000 fb31 	bl	800300c <ssd1306_WriteString>

	ssd1306_SetCursor(35, 0);
 80029aa:	2100      	movs	r1, #0
 80029ac:	2023      	movs	r0, #35	; 0x23
 80029ae:	f000 fb53 	bl	8003058 <ssd1306_SetCursor>
	ssd1306_WriteString(humidity_si7021, Font_7x10, White);
 80029b2:	4aae      	ldr	r2, [pc, #696]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 80029b4:	2301      	movs	r3, #1
 80029b6:	ca06      	ldmia	r2, {r1, r2}
 80029b8:	48ae      	ldr	r0, [pc, #696]	; (8002c74 <OLED_prinr_all_data+0x2e4>)
 80029ba:	f000 fb27 	bl	800300c <ssd1306_WriteString>
    ///////////////////////////////////////////

	// Print GPS data
	char str[50]={0};
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	2232      	movs	r2, #50	; 0x32
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f005 f8ec 	bl	8007ba4 <memset>
    memset(str, 0 , sizeof(str));
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2232      	movs	r2, #50	; 0x32
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f005 f8e5 	bl	8007ba4 <memset>

	// Print data from GPS module  ( Lat )
    ssd1306_SetCursor(0, 16);
 80029da:	2110      	movs	r1, #16
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 fb3b 	bl	8003058 <ssd1306_SetCursor>
	ssd1306_WriteString(gps_latitude, Font_7x10, White);
 80029e2:	4aa2      	ldr	r2, [pc, #648]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 80029e4:	2301      	movs	r3, #1
 80029e6:	ca06      	ldmia	r2, {r1, r2}
 80029e8:	48a3      	ldr	r0, [pc, #652]	; (8002c78 <OLED_prinr_all_data+0x2e8>)
 80029ea:	f000 fb0f 	bl	800300c <ssd1306_WriteString>

	// Print data from GPS module  ( Lon )
	ssd1306_SetCursor(0, 26);
 80029ee:	211a      	movs	r1, #26
 80029f0:	2000      	movs	r0, #0
 80029f2:	f000 fb31 	bl	8003058 <ssd1306_SetCursor>
    ssd1306_WriteString(gps_lontitude, Font_7x10, White);
 80029f6:	4a9d      	ldr	r2, [pc, #628]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 80029f8:	2301      	movs	r3, #1
 80029fa:	ca06      	ldmia	r2, {r1, r2}
 80029fc:	489f      	ldr	r0, [pc, #636]	; (8002c7c <OLED_prinr_all_data+0x2ec>)
 80029fe:	f000 fb05 	bl	800300c <ssd1306_WriteString>

    // Print data from GPS module  ( Speed )
    memset(str, 0 , sizeof(str));
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	2232      	movs	r2, #50	; 0x32
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f8ca 	bl	8007ba4 <memset>
    sprintf(str,"%skm/h\0", gps_speed);
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4a9a      	ldr	r2, [pc, #616]	; (8002c80 <OLED_prinr_all_data+0x2f0>)
 8002a16:	499b      	ldr	r1, [pc, #620]	; (8002c84 <OLED_prinr_all_data+0x2f4>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f005 f8cb 	bl	8007bb4 <siprintf>
    ssd1306_SetCursor(75, 16);
 8002a1e:	2110      	movs	r1, #16
 8002a20:	204b      	movs	r0, #75	; 0x4b
 8002a22:	f000 fb19 	bl	8003058 <ssd1306_SetCursor>
    ssd1306_WriteString(str, Font_7x10, White);
 8002a26:	4a91      	ldr	r2, [pc, #580]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 8002a28:	f107 000c 	add.w	r0, r7, #12
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	ca06      	ldmia	r2, {r1, r2}
 8002a30:	f000 faec 	bl	800300c <ssd1306_WriteString>

    // Print data from GPS module  ( Number of satalits)
    memset(str, 0 , sizeof(str));
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	2232      	movs	r2, #50	; 0x32
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 f8b1 	bl	8007ba4 <memset>
    int satalits = atoi(gps_number_of_satellites);
 8002a42:	4891      	ldr	r0, [pc, #580]	; (8002c88 <OLED_prinr_all_data+0x2f8>)
 8002a44:	f005 f85b 	bl	8007afe <atoi>
 8002a48:	64b8      	str	r0, [r7, #72]	; 0x48
    if(satalits<=9)                 // clean zero sign
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	dc11      	bgt.n	8002a74 <OLED_prinr_all_data+0xe4>
    {
    	 sprintf(str,"N:%s\0", "  ");
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	4a8d      	ldr	r2, [pc, #564]	; (8002c8c <OLED_prinr_all_data+0x2fc>)
 8002a56:	498e      	ldr	r1, [pc, #568]	; (8002c90 <OLED_prinr_all_data+0x300>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 f8ab 	bl	8007bb4 <siprintf>
    	 ssd1306_SetCursor(95, 26);
 8002a5e:	211a      	movs	r1, #26
 8002a60:	205f      	movs	r0, #95	; 0x5f
 8002a62:	f000 faf9 	bl	8003058 <ssd1306_SetCursor>
    	 ssd1306_WriteString(str, Font_7x10, White);
 8002a66:	4a81      	ldr	r2, [pc, #516]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 8002a68:	f107 000c 	add.w	r0, r7, #12
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	ca06      	ldmia	r2, {r1, r2}
 8002a70:	f000 facc 	bl	800300c <ssd1306_WriteString>
    }
    sprintf(str,"N:%d\0", satalits);
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a7a:	4986      	ldr	r1, [pc, #536]	; (8002c94 <OLED_prinr_all_data+0x304>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f005 f899 	bl	8007bb4 <siprintf>
    ssd1306_SetCursor(95, 26);
 8002a82:	211a      	movs	r1, #26
 8002a84:	205f      	movs	r0, #95	; 0x5f
 8002a86:	f000 fae7 	bl	8003058 <ssd1306_SetCursor>
    ssd1306_WriteString(str, Font_7x10, White);
 8002a8a:	4a78      	ldr	r2, [pc, #480]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 8002a8c:	f107 000c 	add.w	r0, r7, #12
 8002a90:	2301      	movs	r3, #1
 8002a92:	ca06      	ldmia	r2, {r1, r2}
 8002a94:	f000 faba 	bl	800300c <ssd1306_WriteString>

    // Print data from GPS module (Time)
    char hours[2]={0};
 8002a98:	2300      	movs	r3, #0
 8002a9a:	813b      	strh	r3, [r7, #8]
    char minutes[2]={0};
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	80bb      	strh	r3, [r7, #4]
    char semicolum = ':';
 8002aa0:	233a      	movs	r3, #58	; 0x3a
 8002aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // divide hours and minutes
    uint8_t i=0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    for(i=0; i<=3; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002ab2:	e020      	b.n	8002af6 <OLED_prinr_all_data+0x166>
    {
    	if(i<=1)
 8002ab4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d80b      	bhi.n	8002ad4 <OLED_prinr_all_data+0x144>
    	{
    		hours[i] = gps_time[i];
 8002abc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002ac0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ac4:	4974      	ldr	r1, [pc, #464]	; (8002c98 <OLED_prinr_all_data+0x308>)
 8002ac6:	5c8a      	ldrb	r2, [r1, r2]
 8002ac8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002acc:	440b      	add	r3, r1
 8002ace:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002ad2:	e00b      	b.n	8002aec <OLED_prinr_all_data+0x15c>
    	}
    	else
    	{
    		minutes[i-2] = gps_time[i];
 8002ad4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002ad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002adc:	3b02      	subs	r3, #2
 8002ade:	496e      	ldr	r1, [pc, #440]	; (8002c98 <OLED_prinr_all_data+0x308>)
 8002ae0:	5c8a      	ldrb	r2, [r1, r2]
 8002ae2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f803 2c4c 	strb.w	r2, [r3, #-76]
    for(i=0; i<=3; i++)
 8002aec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002af0:	3301      	adds	r3, #1
 8002af2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002af6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d9da      	bls.n	8002ab4 <OLED_prinr_all_data+0x124>
    	}
    }
    // Add 3 hours
    int int_hours = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t dozens = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t units = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	dozens = hours[0];
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	units = hours[1];
 8002b14:	7a7b      	ldrb	r3, [r7, #9]
 8002b16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	dozens = dozens - 48;
 8002b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b1e:	3b30      	subs	r3, #48	; 0x30
 8002b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	units = units - 48;
 8002b24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b28:	3b30      	subs	r3, #48	; 0x30
 8002b2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	int_hours = units +(dozens *10);
 8002b2e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8002b32:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	440b      	add	r3, r1
 8002b40:	643b      	str	r3, [r7, #64]	; 0x40
	int_hours = int_hours+3;
 8002b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b44:	3303      	adds	r3, #3
 8002b46:	643b      	str	r3, [r7, #64]	; 0x40

	dozens = (int_hours/10) + 48;
 8002b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4a:	4a54      	ldr	r2, [pc, #336]	; (8002c9c <OLED_prinr_all_data+0x30c>)
 8002b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b50:	1092      	asrs	r2, r2, #2
 8002b52:	17db      	asrs	r3, r3, #31
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3330      	adds	r3, #48	; 0x30
 8002b5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	units = (int_hours%10) + 48;
 8002b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b60:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <OLED_prinr_all_data+0x30c>)
 8002b62:	fb83 1302 	smull	r1, r3, r3, r2
 8002b66:	1099      	asrs	r1, r3, #2
 8002b68:	17d3      	asrs	r3, r2, #31
 8002b6a:	1ac9      	subs	r1, r1, r3
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	1ad1      	subs	r1, r2, r3
 8002b76:	b2cb      	uxtb	r3, r1
 8002b78:	3330      	adds	r3, #48	; 0x30
 8002b7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	hours[0] = dozens;
 8002b7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b82:	723b      	strb	r3, [r7, #8]
	hours[1] = units;
 8002b84:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b88:	727b      	strb	r3, [r7, #9]

	if(int_hours == 24)
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8c:	2b18      	cmp	r3, #24
 8002b8e:	d103      	bne.n	8002b98 <OLED_prinr_all_data+0x208>
	{
		hours[0] = '0';
 8002b90:	2330      	movs	r3, #48	; 0x30
 8002b92:	723b      	strb	r3, [r7, #8]
		hours[1] = '0';
 8002b94:	2330      	movs	r3, #48	; 0x30
 8002b96:	727b      	strb	r3, [r7, #9]
	}
	if(int_hours == 25)
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	2b19      	cmp	r3, #25
 8002b9c:	d103      	bne.n	8002ba6 <OLED_prinr_all_data+0x216>
	{
		hours[0] = '0';
 8002b9e:	2330      	movs	r3, #48	; 0x30
 8002ba0:	723b      	strb	r3, [r7, #8]
		hours[1] = '1';
 8002ba2:	2331      	movs	r3, #49	; 0x31
 8002ba4:	727b      	strb	r3, [r7, #9]
	}
	if(int_hours == 26)
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	2b1a      	cmp	r3, #26
 8002baa:	d103      	bne.n	8002bb4 <OLED_prinr_all_data+0x224>
	{
		hours[0] = '0';
 8002bac:	2330      	movs	r3, #48	; 0x30
 8002bae:	723b      	strb	r3, [r7, #8]
		hours[1] = '2';
 8002bb0:	2332      	movs	r3, #50	; 0x32
 8002bb2:	727b      	strb	r3, [r7, #9]
	}

	if((int_hours >=0) && (int_hours<=9))
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db09      	blt.n	8002bce <OLED_prinr_all_data+0x23e>
 8002bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	dc06      	bgt.n	8002bce <OLED_prinr_all_data+0x23e>
	{
		hours[0] = '0';
 8002bc0:	2330      	movs	r3, #48	; 0x30
 8002bc2:	723b      	strb	r3, [r7, #8]
		hours[1] = int_hours +48;
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3330      	adds	r3, #48	; 0x30
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	727b      	strb	r3, [r7, #9]
	}

    // connect  hours and minutes with colon
    //i=5;
    for(i=0; i<5; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002bd4:	e034      	b.n	8002c40 <OLED_prinr_all_data+0x2b0>
    {
    	if(i<=1)
 8002bd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d80e      	bhi.n	8002bfc <OLED_prinr_all_data+0x26c>
    	{
    		str[i] = hours[i];
 8002bde:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002be2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002be6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bea:	440a      	add	r2, r1
 8002bec:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002bf0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f803 2c44 	strb.w	r2, [r3, #-68]
 8002bfa:	e01c      	b.n	8002c36 <OLED_prinr_all_data+0x2a6>
    	}
    	else
    	{
    		if(i==2)
 8002bfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d109      	bne.n	8002c18 <OLED_prinr_all_data+0x288>
    		{
    			str[i] = semicolum;
 8002c04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002c12:	f803 2c44 	strb.w	r2, [r3, #-68]
 8002c16:	e00e      	b.n	8002c36 <OLED_prinr_all_data+0x2a6>
    		}
    		else
    		{
    			str[i]=minutes[i-3];
 8002c18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c1c:	1eda      	subs	r2, r3, #3
 8002c1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c22:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c26:	440a      	add	r2, r1
 8002c28:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 8002c2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c30:	440b      	add	r3, r1
 8002c32:	f803 2c44 	strb.w	r2, [r3, #-68]
    for(i=0; i<5; i++)
 8002c36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002c40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d9c6      	bls.n	8002bd6 <OLED_prinr_all_data+0x246>
    		}
    	}
    }

    ssd1306_SetCursor(90, 00);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	205a      	movs	r0, #90	; 0x5a
 8002c4c:	f000 fa04 	bl	8003058 <ssd1306_SetCursor>
    ssd1306_WriteString(str, Font_7x10, White);
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <OLED_prinr_all_data+0x2dc>)
 8002c52:	f107 000c 	add.w	r0, r7, #12
 8002c56:	2301      	movs	r3, #1
 8002c58:	ca06      	ldmia	r2, {r1, r2}
 8002c5a:	f000 f9d7 	bl	800300c <ssd1306_WriteString>
//    sprintf(str,"%s", "TEST 0123456789");
//    ssd1306_SetCursor(00, 46);
//    ssd1306_WriteString(str, Font_7x10, White);


	ssd1306_UpdateScreen();
 8002c5e:	f000 f8c5 	bl	8002dec <ssd1306_UpdateScreen>

}
 8002c62:	bf00      	nop
 8002c64:	3750      	adds	r7, #80	; 0x50
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	2000062c 	.word	0x2000062c
 8002c74:	20000634 	.word	0x20000634
 8002c78:	20000644 	.word	0x20000644
 8002c7c:	200006a0 	.word	0x200006a0
 8002c80:	2000063c 	.word	0x2000063c
 8002c84:	0800b1d0 	.word	0x0800b1d0
 8002c88:	20000660 	.word	0x20000660
 8002c8c:	0800b1d8 	.word	0x0800b1d8
 8002c90:	0800b1dc 	.word	0x0800b1dc
 8002c94:	0800b1e4 	.word	0x0800b1e4
 8002c98:	20000670 	.word	0x20000670
 8002c9c:	66666667 	.word	0x66666667

08002ca0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af04      	add	r7, sp, #16
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8002caa:	230a      	movs	r3, #10
 8002cac:	9302      	str	r3, [sp, #8]
 8002cae:	2301      	movs	r3, #1
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	1dfb      	adds	r3, r7, #7
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2178      	movs	r1, #120	; 0x78
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <ssd1306_WriteCommand+0x2c>)
 8002cbe:	f001 fee1 	bl	8004a84 <HAL_I2C_Mem_Write>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000078c 	.word	0x2000078c

08002cd0 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	f000 fd3f 	bl	8003758 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8002cda:	20ae      	movs	r0, #174	; 0xae
 8002cdc:	f7ff ffe0 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002ce0:	2020      	movs	r0, #32
 8002ce2:	f7ff ffdd 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002ce6:	2010      	movs	r0, #16
 8002ce8:	f7ff ffda 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002cec:	20b0      	movs	r0, #176	; 0xb0
 8002cee:	f7ff ffd7 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002cf2:	20c8      	movs	r0, #200	; 0xc8
 8002cf4:	f7ff ffd4 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff ffd1 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8002cfe:	2010      	movs	r0, #16
 8002d00:	f7ff ffce 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8002d04:	2040      	movs	r0, #64	; 0x40
 8002d06:	f7ff ffcb 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8002d0a:	2081      	movs	r0, #129	; 0x81
 8002d0c:	f7ff ffc8 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8002d10:	20ff      	movs	r0, #255	; 0xff
 8002d12:	f7ff ffc5 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002d16:	20a1      	movs	r0, #161	; 0xa1
 8002d18:	f7ff ffc2 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8002d1c:	20a6      	movs	r0, #166	; 0xa6
 8002d1e:	f7ff ffbf 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8002d22:	20a8      	movs	r0, #168	; 0xa8
 8002d24:	f7ff ffbc 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8002d28:	203f      	movs	r0, #63	; 0x3f
 8002d2a:	f7ff ffb9 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d2e:	20a4      	movs	r0, #164	; 0xa4
 8002d30:	f7ff ffb6 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8002d34:	20d3      	movs	r0, #211	; 0xd3
 8002d36:	f7ff ffb3 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7ff ffb0 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d40:	20d5      	movs	r0, #213	; 0xd5
 8002d42:	f7ff ffad 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d46:	20f0      	movs	r0, #240	; 0xf0
 8002d48:	f7ff ffaa 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002d4c:	20d9      	movs	r0, #217	; 0xd9
 8002d4e:	f7ff ffa7 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8002d52:	2022      	movs	r0, #34	; 0x22
 8002d54:	f7ff ffa4 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8002d58:	20da      	movs	r0, #218	; 0xda
 8002d5a:	f7ff ffa1 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8002d5e:	2012      	movs	r0, #18
 8002d60:	f7ff ff9e 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002d64:	20db      	movs	r0, #219	; 0xdb
 8002d66:	f7ff ff9b 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002d6a:	2020      	movs	r0, #32
 8002d6c:	f7ff ff98 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002d70:	208d      	movs	r0, #141	; 0x8d
 8002d72:	f7ff ff95 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8002d76:	2014      	movs	r0, #20
 8002d78:	f7ff ff92 	bl	8002ca0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002d7c:	20af      	movs	r0, #175	; 0xaf
 8002d7e:	f7ff ff8f 	bl	8002ca0 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f000 f810 	bl	8002da8 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8002d88:	f000 f830 	bl	8002dec <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <ssd1306_Init+0xd4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <ssd1306_Init+0xd4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <ssd1306_Init+0xd4>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000610 	.word	0x20000610

08002da8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e00d      	b.n	8002dd4 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <ssd1306_Fill+0x1a>
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	e000      	b.n	8002dc4 <ssd1306_Fill+0x1c>
 8002dc2:	21ff      	movs	r1, #255	; 0xff
 8002dc4:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <ssd1306_Fill+0x40>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4413      	add	r3, r2
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d3ed      	bcc.n	8002db8 <ssd1306_Fill+0x10>
	}
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000210 	.word	0x20000210

08002dec <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	71fb      	strb	r3, [r7, #7]
 8002df6:	e01d      	b.n	8002e34 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	3b50      	subs	r3, #80	; 0x50
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff4e 	bl	8002ca0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff ff4b 	bl	8002ca0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8002e0a:	2010      	movs	r0, #16
 8002e0c:	f7ff ff48 	bl	8002ca0 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <ssd1306_UpdateScreen+0x58>)
 8002e16:	4413      	add	r3, r2
 8002e18:	2264      	movs	r2, #100	; 0x64
 8002e1a:	9202      	str	r2, [sp, #8]
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	9201      	str	r2, [sp, #4]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2301      	movs	r3, #1
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	2178      	movs	r1, #120	; 0x78
 8002e28:	4807      	ldr	r0, [pc, #28]	; (8002e48 <ssd1306_UpdateScreen+0x5c>)
 8002e2a:	f001 fe2b 	bl	8004a84 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	3301      	adds	r3, #1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b07      	cmp	r3, #7
 8002e38:	d9de      	bls.n	8002df8 <ssd1306_UpdateScreen+0xc>
	}
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000210 	.word	0x20000210
 8002e48:	2000078c 	.word	0x2000078c

08002e4c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	460b      	mov	r3, r1
 8002e58:	71bb      	strb	r3, [r7, #6]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db48      	blt.n	8002ef8 <ssd1306_DrawPixel+0xac>
 8002e66:	79bb      	ldrb	r3, [r7, #6]
 8002e68:	2b3f      	cmp	r3, #63	; 0x3f
 8002e6a:	d845      	bhi.n	8002ef8 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <ssd1306_DrawPixel+0xb8>)
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8002e74:	797b      	ldrb	r3, [r7, #5]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8002e82:	797b      	ldrb	r3, [r7, #5]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11a      	bne.n	8002ebe <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e88:	79fa      	ldrb	r2, [r7, #7]
 8002e8a:	79bb      	ldrb	r3, [r7, #6]
 8002e8c:	08db      	lsrs	r3, r3, #3
 8002e8e:	b2d8      	uxtb	r0, r3
 8002e90:	4603      	mov	r3, r0
 8002e92:	01db      	lsls	r3, r3, #7
 8002e94:	4413      	add	r3, r2
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <ssd1306_DrawPixel+0xbc>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	b25a      	sxtb	r2, r3
 8002e9c:	79bb      	ldrb	r3, [r7, #6]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b259      	sxtb	r1, r3
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	01db      	lsls	r3, r3, #7
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b2c9      	uxtb	r1, r1
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <ssd1306_DrawPixel+0xbc>)
 8002eba:	54d1      	strb	r1, [r2, r3]
 8002ebc:	e01d      	b.n	8002efa <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	79bb      	ldrb	r3, [r7, #6]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	b2d8      	uxtb	r0, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	01db      	lsls	r3, r3, #7
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <ssd1306_DrawPixel+0xbc>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	b25a      	sxtb	r2, r3
 8002ed2:	79bb      	ldrb	r3, [r7, #6]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b259      	sxtb	r1, r3
 8002ee8:	79fa      	ldrb	r2, [r7, #7]
 8002eea:	4603      	mov	r3, r0
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	4413      	add	r3, r2
 8002ef0:	b2c9      	uxtb	r1, r1
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <ssd1306_DrawPixel+0xbc>)
 8002ef4:	54d1      	strb	r1, [r2, r3]
 8002ef6:	e000      	b.n	8002efa <ssd1306_DrawPixel+0xae>
		return;
 8002ef8:	bf00      	nop
	}
}
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000610 	.word	0x20000610
 8002f08:	20000210 	.word	0x20000210

08002f0c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4604      	mov	r4, r0
 8002f14:	1d38      	adds	r0, r7, #4
 8002f16:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4623      	mov	r3, r4
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	4613      	mov	r3, r2
 8002f22:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	793b      	ldrb	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f30:	dc06      	bgt.n	8002f40 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002f32:	4b35      	ldr	r3, [pc, #212]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002f34:	885b      	ldrh	r3, [r3, #2]
 8002f36:	461a      	mov	r2, r3
 8002f38:	797b      	ldrb	r3, [r7, #5]
 8002f3a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002f3c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f3e:	dd01      	ble.n	8002f44 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e05d      	b.n	8003000 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	e04c      	b.n	8002fe4 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	3b20      	subs	r3, #32
 8002f50:	7979      	ldrb	r1, [r7, #5]
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	440b      	add	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	e034      	b.n	8002fd4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f7a:	4b23      	ldr	r3, [pc, #140]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	b2d8      	uxtb	r0, r3
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002f8a:	885b      	ldrh	r3, [r3, #2]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	7bba      	ldrb	r2, [r7, #14]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7ff ff57 	bl	8002e4c <ssd1306_DrawPixel>
 8002f9e:	e016      	b.n	8002fce <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	b2d8      	uxtb	r0, r3
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002fb0:	885b      	ldrh	r3, [r3, #2]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	b2d9      	uxtb	r1, r3
 8002fbc:	7bbb      	ldrb	r3, [r7, #14]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f7ff ff3f 	bl	8002e4c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	793b      	ldrb	r3, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d3c5      	bcc.n	8002f6a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	797b      	ldrb	r3, [r7, #5]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d3ad      	bcc.n	8002f4a <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002ff0:	881a      	ldrh	r2, [r3, #0]
 8002ff2:	793b      	ldrb	r3, [r7, #4]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	4b03      	ldr	r3, [pc, #12]	; (8003008 <ssd1306_WriteChar+0xfc>)
 8002ffc:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	; 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	20000610 	.word	0x20000610

0800300c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	1d38      	adds	r0, r7, #4
 8003016:	e880 0006 	stmia.w	r0, {r1, r2}
 800301a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 800301c:	e012      	b.n	8003044 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	7818      	ldrb	r0, [r3, #0]
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	1d3a      	adds	r2, r7, #4
 8003026:	ca06      	ldmia	r2, {r1, r2}
 8003028:	f7ff ff70 	bl	8002f0c <ssd1306_WriteChar>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d002      	beq.n	800303e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	e008      	b.n	8003050 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e8      	bne.n	800301e <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	781b      	ldrb	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	460a      	mov	r2, r1
 8003062:	71fb      	strb	r3, [r7, #7]
 8003064:	4613      	mov	r3, r2
 8003066:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	b29a      	uxth	r2, r3
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <ssd1306_SetCursor+0x2c>)
 800306e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <ssd1306_SetCursor+0x2c>)
 8003076:	805a      	strh	r2, [r3, #2]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000610 	.word	0x20000610

08003088 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_MspInit+0x5c>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_MspInit+0x5c>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6193      	str	r3, [r2, #24]
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_MspInit+0x5c>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_MspInit+0x5c>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_MspInit+0x5c>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_MspInit+0x5c>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_MspInit+0x60>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_MspInit+0x60>)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000

080030ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <HAL_I2C_MspInit+0x70>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d123      	bne.n	8003154 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_I2C_MspInit+0x74>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_I2C_MspInit+0x74>)
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	6193      	str	r3, [r2, #24]
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_I2C_MspInit+0x74>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003124:	23c0      	movs	r3, #192	; 0xc0
 8003126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003128:	2312      	movs	r3, #18
 800312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003130:	f107 0310 	add.w	r3, r7, #16
 8003134:	4619      	mov	r1, r3
 8003136:	480b      	ldr	r0, [pc, #44]	; (8003164 <HAL_I2C_MspInit+0x78>)
 8003138:	f000 fea2 	bl	8003e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_I2C_MspInit+0x74>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_I2C_MspInit+0x74>)
 8003142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003146:	61d3      	str	r3, [r2, #28]
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_I2C_MspInit+0x74>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40005400 	.word	0x40005400
 8003160:	40021000 	.word	0x40021000
 8003164:	40010c00 	.word	0x40010c00

08003168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_SPI_MspInit+0x8c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d131      	bne.n	80031ec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_SPI_MspInit+0x90>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4a1a      	ldr	r2, [pc, #104]	; (80031f8 <HAL_SPI_MspInit+0x90>)
 800318e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003192:	61d3      	str	r3, [r2, #28]
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_SPI_MspInit+0x90>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_SPI_MspInit+0x90>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_SPI_MspInit+0x90>)
 80031a6:	f043 0308 	orr.w	r3, r3, #8
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_SPI_MspInit+0x90>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80031b8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80031bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 0310 	add.w	r3, r7, #16
 80031ca:	4619      	mov	r1, r3
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <HAL_SPI_MspInit+0x94>)
 80031ce:	f000 fe57 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	4619      	mov	r1, r3
 80031e6:	4805      	ldr	r0, [pc, #20]	; (80031fc <HAL_SPI_MspInit+0x94>)
 80031e8:	f000 fe4a 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031ec:	bf00      	nop
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40003800 	.word	0x40003800
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010c00 	.word	0x40010c00

08003200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <HAL_TIM_Base_MspInit+0x68>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_TIM_Base_MspInit+0x6c>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_TIM_Base_MspInit+0x6c>)
 8003218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800321c:	6193      	str	r3, [r2, #24]
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_TIM_Base_MspInit+0x6c>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800322a:	e018      	b.n	800325e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d113      	bne.n	800325e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_TIM_Base_MspInit+0x6c>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4a0c      	ldr	r2, [pc, #48]	; (800326c <HAL_TIM_Base_MspInit+0x6c>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	61d3      	str	r3, [r2, #28]
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_TIM_Base_MspInit+0x6c>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	201c      	movs	r0, #28
 8003254:	f000 fb79 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003258:	201c      	movs	r0, #28
 800325a:	f000 fb92 	bl	8003982 <HAL_NVIC_EnableIRQ>
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0310 	add.w	r3, r7, #16
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_TIM_MspPostInit+0x5c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d118      	bne.n	80032c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_TIM_MspPostInit+0x60>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <HAL_TIM_MspPostInit+0x60>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_TIM_MspPostInit+0x60>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4619      	mov	r1, r3
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <HAL_TIM_MspPostInit+0x64>)
 80032be:	f000 fddf 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032c2:	bf00      	nop
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40010800 	.word	0x40010800

080032d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 0320 	add.w	r3, r7, #32
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6f      	ldr	r2, [pc, #444]	; (80034b0 <HAL_UART_MspInit+0x1d8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d132      	bne.n	800335e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032f8:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4a6d      	ldr	r2, [pc, #436]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003302:	6193      	str	r3, [r2, #24]
 8003304:	4b6b      	ldr	r3, [pc, #428]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	4b68      	ldr	r3, [pc, #416]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4a67      	ldr	r2, [pc, #412]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6193      	str	r3, [r2, #24]
 800331c:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003332:	2303      	movs	r3, #3
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	f107 0320 	add.w	r3, r7, #32
 800333a:	4619      	mov	r1, r3
 800333c:	485e      	ldr	r0, [pc, #376]	; (80034b8 <HAL_UART_MspInit+0x1e0>)
 800333e:	f000 fd9f 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003350:	f107 0320 	add.w	r3, r7, #32
 8003354:	4619      	mov	r1, r3
 8003356:	4858      	ldr	r0, [pc, #352]	; (80034b8 <HAL_UART_MspInit+0x1e0>)
 8003358:	f000 fd92 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800335c:	e0a3      	b.n	80034a6 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_UART_MspInit+0x1e4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d138      	bne.n	80033da <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003368:	4b52      	ldr	r3, [pc, #328]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4a51      	ldr	r2, [pc, #324]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003372:	61d3      	str	r3, [r2, #28]
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a4b      	ldr	r2, [pc, #300]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b49      	ldr	r3, [pc, #292]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003398:	2304      	movs	r3, #4
 800339a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	f107 0320 	add.w	r3, r7, #32
 80033a8:	4619      	mov	r1, r3
 80033aa:	4843      	ldr	r0, [pc, #268]	; (80034b8 <HAL_UART_MspInit+0x1e0>)
 80033ac:	f000 fd68 	bl	8003e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033b0:	2308      	movs	r3, #8
 80033b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033bc:	f107 0320 	add.w	r3, r7, #32
 80033c0:	4619      	mov	r1, r3
 80033c2:	483d      	ldr	r0, [pc, #244]	; (80034b8 <HAL_UART_MspInit+0x1e0>)
 80033c4:	f000 fd5c 	bl	8003e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2100      	movs	r1, #0
 80033cc:	2026      	movs	r0, #38	; 0x26
 80033ce:	f000 fabc 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033d2:	2026      	movs	r0, #38	; 0x26
 80033d4:	f000 fad5 	bl	8003982 <HAL_NVIC_EnableIRQ>
}
 80033d8:	e065      	b.n	80034a6 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_UART_MspInit+0x1e8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d160      	bne.n	80034a6 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 80033ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fc:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_UART_MspInit+0x1dc>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f107 0320 	add.w	r3, r7, #32
 8003426:	4619      	mov	r1, r3
 8003428:	4826      	ldr	r0, [pc, #152]	; (80034c4 <HAL_UART_MspInit+0x1ec>)
 800342a:	f000 fd29 	bl	8003e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800342e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 0320 	add.w	r3, r7, #32
 8003440:	4619      	mov	r1, r3
 8003442:	4820      	ldr	r0, [pc, #128]	; (80034c4 <HAL_UART_MspInit+0x1ec>)
 8003444:	f000 fd1c 	bl	8003e80 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003448:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 800344a:	4a20      	ldr	r2, [pc, #128]	; (80034cc <HAL_UART_MspInit+0x1f4>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 800346e:	2220      	movs	r2, #32
 8003470:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 8003474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003478:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800347a:	4813      	ldr	r0, [pc, #76]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 800347c:	f000 fa9c 	bl	80039b8 <HAL_DMA_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8003486:	f7ff fa6d 	bl	8002964 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 800348e:	635a      	str	r2, [r3, #52]	; 0x34
 8003490:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_UART_MspInit+0x1f0>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2027      	movs	r0, #39	; 0x27
 800349c:	f000 fa55 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034a0:	2027      	movs	r0, #39	; 0x27
 80034a2:	f000 fa6e 	bl	8003982 <HAL_NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3730      	adds	r7, #48	; 0x30
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40010800 	.word	0x40010800
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40004800 	.word	0x40004800
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	20000708 	.word	0x20000708
 80034cc:	40020030 	.word	0x40020030

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <HardFault_Handler+0x4>

080034e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <MemManage_Handler+0x4>

080034e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <BusFault_Handler+0x4>

080034ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <UsageFault_Handler+0x4>

080034f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800351c:	f000 f900 	bl	8003720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <DMA1_Channel3_IRQHandler+0x10>)
 800352a:	f000 fb75 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000708 	.word	0x20000708

08003538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <TIM2_IRQHandler+0x10>)
 800353e:	f002 ffa6 	bl	800648e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000860 	.word	0x20000860

0800354c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <USART2_IRQHandler+0x10>)
 8003552:	f003 fed5 	bl	8007300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200008a0 	.word	0x200008a0

08003560 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <USART3_IRQHandler+0x10>)
 8003566:	f003 fecb 	bl	8007300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2000074c 	.word	0x2000074c

08003574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <_sbrk+0x5c>)
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <_sbrk+0x60>)
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <_sbrk+0x64>)
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <_sbrk+0x68>)
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d207      	bcs.n	80035b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035a4:	f004 fad4 	bl	8007b50 <__errno>
 80035a8:	4602      	mov	r2, r0
 80035aa:	230c      	movs	r3, #12
 80035ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035b2:	e009      	b.n	80035c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <_sbrk+0x64>)
 80035c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20005000 	.word	0x20005000
 80035d4:	00000400 	.word	0x00000400
 80035d8:	20000618 	.word	0x20000618
 80035dc:	200008e8 	.word	0x200008e8

080035e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <SystemInit+0x5c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <SystemInit+0x5c>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <SystemInit+0x5c>)
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4911      	ldr	r1, [pc, #68]	; (800363c <SystemInit+0x5c>)
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <SystemInit+0x60>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <SystemInit+0x5c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0e      	ldr	r2, [pc, #56]	; (800363c <SystemInit+0x5c>)
 8003602:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <SystemInit+0x5c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <SystemInit+0x5c>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <SystemInit+0x5c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a07      	ldr	r2, [pc, #28]	; (800363c <SystemInit+0x5c>)
 800361e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003622:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <SystemInit+0x5c>)
 8003626:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800362a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SystemInit+0x64>)
 800362e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003632:	609a      	str	r2, [r3, #8]
#endif 
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	40021000 	.word	0x40021000
 8003640:	f8ff0000 	.word	0xf8ff0000
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003648:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800364a:	e003      	b.n	8003654 <LoopCopyDataInit>

0800364c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800364e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003650:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003652:	3104      	adds	r1, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003654:	480a      	ldr	r0, [pc, #40]	; (8003680 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003658:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800365a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800365c:	d3f6      	bcc.n	800364c <CopyDataInit>
  ldr r2, =_sbss
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003660:	e002      	b.n	8003668 <LoopFillZerobss>

08003662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003664:	f842 3b04 	str.w	r3, [r2], #4

08003668 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800366a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800366c:	d3f9      	bcc.n	8003662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800366e:	f7ff ffb7 	bl	80035e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003672:	f004 fa73 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003676:	f7fe fe5f 	bl	8002338 <main>
  bx lr
 800367a:	4770      	bx	lr
  ldr r3, =_sidata
 800367c:	0800bc38 	.word	0x0800bc38
  ldr r0, =_sdata
 8003680:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003684:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8003688:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 800368c:	200008e8 	.word	0x200008e8

08003690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC1_2_IRQHandler>
	...

08003694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_Init+0x28>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <HAL_Init+0x28>)
 800369e:	f043 0310 	orr.w	r3, r3, #16
 80036a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a4:	2003      	movs	r0, #3
 80036a6:	f000 f945 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f000 f808 	bl	80036c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b0:	f7ff fcea 	bl	8003088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40022000 	.word	0x40022000

080036c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_InitTick+0x54>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_InitTick+0x58>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f95d 	bl	800399e <HAL_SYSTICK_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00e      	b.n	800370c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d80a      	bhi.n	800370a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f4:	2200      	movs	r2, #0
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036fc:	f000 f925 	bl	800394a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <HAL_InitTick+0x5c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000010 	.word	0x20000010
 8003718:	20000018 	.word	0x20000018
 800371c:	20000014 	.word	0x20000014

08003720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_IncTick+0x1c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_IncTick+0x20>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a03      	ldr	r2, [pc, #12]	; (8003740 <HAL_IncTick+0x20>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	20000018 	.word	0x20000018
 8003740:	200008e0 	.word	0x200008e0

08003744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return uwTick;
 8003748:	4b02      	ldr	r3, [pc, #8]	; (8003754 <HAL_GetTick+0x10>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	200008e0 	.word	0x200008e0

08003758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7ff fff0 	bl	8003744 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003770:	d005      	beq.n	800377e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_Delay+0x40>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800377e:	bf00      	nop
 8003780:	f7ff ffe0 	bl	8003744 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8f7      	bhi.n	8003780 <HAL_Delay+0x28>
  {
  }
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000018 	.word	0x20000018

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <__NVIC_EnableIRQ+0x34>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	; (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	; (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003914:	f7ff ff90 	bl	8003838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff2d 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff42 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff90 	bl	800388c <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5f 	bl	8003838 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff35 	bl	8003800 <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffa2 	bl	80038f0 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e043      	b.n	8003a56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_DMA_Init+0xa8>)
 80039d6:	4413      	add	r3, r2
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_DMA_Init+0xac>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_DMA_Init+0xb0>)
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	bffdfff8 	.word	0xbffdfff8
 8003a64:	cccccccd 	.word	0xcccccccd
 8003a68:	40020000 	.word	0x40020000

08003a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Start_IT+0x20>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e04a      	b.n	8003b22 <HAL_DMA_Start_IT+0xb6>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d13a      	bne.n	8003b14 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f9ae 	bl	8003e24 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 020e 	orr.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e00f      	b.n	8003b02 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 020a 	orr.w	r2, r2, #10
 8003b00:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e005      	b.n	8003b20 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d005      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2204      	movs	r2, #4
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e051      	b.n	8003bf2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 020e 	bic.w	r2, r2, #14
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_DMA_Abort_IT+0xd0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d029      	beq.n	8003bcc <HAL_DMA_Abort_IT+0xa0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_DMA_Abort_IT+0xd4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x9c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_DMA_Abort_IT+0xd8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01a      	beq.n	8003bc2 <HAL_DMA_Abort_IT+0x96>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_DMA_Abort_IT+0xdc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d012      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x90>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <HAL_DMA_Abort_IT+0xe0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_DMA_Abort_IT+0x8a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_DMA_Abort_IT+0xe4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Abort_IT+0x84>
 8003baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bae:	e00e      	b.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb4:	e00b      	b.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bba:	e008      	b.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc0:	e005      	b.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc6:	e002      	b.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	e000      	b.n	8003bce <HAL_DMA_Abort_IT+0xa2>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <HAL_DMA_Abort_IT+0xe8>)
 8003bd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
    } 
  }
  return status;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40020008 	.word	0x40020008
 8003c00:	4002001c 	.word	0x4002001c
 8003c04:	40020030 	.word	0x40020030
 8003c08:	40020044 	.word	0x40020044
 8003c0c:	40020058 	.word	0x40020058
 8003c10:	4002006c 	.word	0x4002006c
 8003c14:	40020000 	.word	0x40020000

08003c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2204      	movs	r2, #4
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d04f      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0xc8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a66      	ldr	r2, [pc, #408]	; (8003e08 <HAL_DMA_IRQHandler+0x1f0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d029      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xae>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a65      	ldr	r2, [pc, #404]	; (8003e0c <HAL_DMA_IRQHandler+0x1f4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_DMA_IRQHandler+0x1f8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01a      	beq.n	8003cbc <HAL_DMA_IRQHandler+0xa4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a62      	ldr	r2, [pc, #392]	; (8003e14 <HAL_DMA_IRQHandler+0x1fc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x9e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a60      	ldr	r2, [pc, #384]	; (8003e18 <HAL_DMA_IRQHandler+0x200>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00a      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x98>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5f      	ldr	r2, [pc, #380]	; (8003e1c <HAL_DMA_IRQHandler+0x204>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d102      	bne.n	8003caa <HAL_DMA_IRQHandler+0x92>
 8003ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ca8:	e00e      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cae:	e00b      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cb4:	e008      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cba:	e005      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc0:	e002      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cc2:	2340      	movs	r3, #64	; 0x40
 8003cc4:	e000      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xb0>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	4a55      	ldr	r2, [pc, #340]	; (8003e20 <HAL_DMA_IRQHandler+0x208>)
 8003cca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8094 	beq.w	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cde:	e08e      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d056      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x186>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d051      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020a 	bic.w	r2, r2, #10
 8003d16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <HAL_DMA_IRQHandler+0x1f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d029      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x166>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a37      	ldr	r2, [pc, #220]	; (8003e0c <HAL_DMA_IRQHandler+0x1f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x162>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a35      	ldr	r2, [pc, #212]	; (8003e10 <HAL_DMA_IRQHandler+0x1f8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x15c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_DMA_IRQHandler+0x1fc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d012      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x156>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a32      	ldr	r2, [pc, #200]	; (8003e18 <HAL_DMA_IRQHandler+0x200>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x150>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_DMA_IRQHandler+0x204>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x14a>
 8003d5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d60:	e00e      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	e00b      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6c:	e008      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d72:	e005      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d78:	e002      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_IRQHandler+0x168>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <HAL_DMA_IRQHandler+0x208>)
 8003d82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d034      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d9c:	e02f      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2208      	movs	r2, #8
 8003da4:	409a      	lsls	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d028      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x1e8>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020e 	bic.w	r2, r2, #14
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
    }
  }
  return;
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
}
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40020008 	.word	0x40020008
 8003e0c:	4002001c 	.word	0x4002001c
 8003e10:	40020030 	.word	0x40020030
 8003e14:	40020044 	.word	0x40020044
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	4002006c 	.word	0x4002006c
 8003e20:	40020000 	.word	0x40020000

08003e24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d108      	bne.n	8003e64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e62:	e007      	b.n	8003e74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b08b      	sub	sp, #44	; 0x2c
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e92:	e127      	b.n	80040e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e94:	2201      	movs	r2, #1
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	f040 8116 	bne.w	80040de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b12      	cmp	r3, #18
 8003eb8:	d034      	beq.n	8003f24 <HAL_GPIO_Init+0xa4>
 8003eba:	2b12      	cmp	r3, #18
 8003ebc:	d80d      	bhi.n	8003eda <HAL_GPIO_Init+0x5a>
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d02b      	beq.n	8003f1a <HAL_GPIO_Init+0x9a>
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d804      	bhi.n	8003ed0 <HAL_GPIO_Init+0x50>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d031      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d01c      	beq.n	8003f08 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ece:	e048      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d043      	beq.n	8003f5c <HAL_GPIO_Init+0xdc>
 8003ed4:	2b11      	cmp	r3, #17
 8003ed6:	d01b      	beq.n	8003f10 <HAL_GPIO_Init+0x90>
          break;
 8003ed8:	e043      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003eda:	4a89      	ldr	r2, [pc, #548]	; (8004100 <HAL_GPIO_Init+0x280>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d026      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
 8003ee0:	4a87      	ldr	r2, [pc, #540]	; (8004100 <HAL_GPIO_Init+0x280>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d806      	bhi.n	8003ef4 <HAL_GPIO_Init+0x74>
 8003ee6:	4a87      	ldr	r2, [pc, #540]	; (8004104 <HAL_GPIO_Init+0x284>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d020      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
 8003eec:	4a86      	ldr	r2, [pc, #536]	; (8004108 <HAL_GPIO_Init+0x288>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
          break;
 8003ef2:	e036      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ef4:	4a85      	ldr	r2, [pc, #532]	; (800410c <HAL_GPIO_Init+0x28c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d019      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
 8003efa:	4a85      	ldr	r2, [pc, #532]	; (8004110 <HAL_GPIO_Init+0x290>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d016      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
 8003f00:	4a84      	ldr	r2, [pc, #528]	; (8004114 <HAL_GPIO_Init+0x294>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_GPIO_Init+0xae>
          break;
 8003f06:	e02c      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	623b      	str	r3, [r7, #32]
          break;
 8003f0e:	e028      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	3304      	adds	r3, #4
 8003f16:	623b      	str	r3, [r7, #32]
          break;
 8003f18:	e023      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	623b      	str	r3, [r7, #32]
          break;
 8003f22:	e01e      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	623b      	str	r3, [r7, #32]
          break;
 8003f2c:	e019      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f36:	2304      	movs	r3, #4
 8003f38:	623b      	str	r3, [r7, #32]
          break;
 8003f3a:	e012      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f44:	2308      	movs	r3, #8
 8003f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	611a      	str	r2, [r3, #16]
          break;
 8003f4e:	e008      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f50:	2308      	movs	r3, #8
 8003f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	615a      	str	r2, [r3, #20]
          break;
 8003f5a:	e002      	b.n	8003f62 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	623b      	str	r3, [r7, #32]
          break;
 8003f60:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2bff      	cmp	r3, #255	; 0xff
 8003f66:	d801      	bhi.n	8003f6c <HAL_GPIO_Init+0xec>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	e001      	b.n	8003f70 <HAL_GPIO_Init+0xf0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2bff      	cmp	r3, #255	; 0xff
 8003f76:	d802      	bhi.n	8003f7e <HAL_GPIO_Init+0xfe>
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_Init+0x104>
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	3b08      	subs	r3, #8
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	401a      	ands	r2, r3
 8003f96:	6a39      	ldr	r1, [r7, #32]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8096 	beq.w	80040de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb2:	4b59      	ldr	r3, [pc, #356]	; (8004118 <HAL_GPIO_Init+0x298>)
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	4a58      	ldr	r2, [pc, #352]	; (8004118 <HAL_GPIO_Init+0x298>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6193      	str	r3, [r2, #24]
 8003fbe:	4b56      	ldr	r3, [pc, #344]	; (8004118 <HAL_GPIO_Init+0x298>)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fca:	4a54      	ldr	r2, [pc, #336]	; (800411c <HAL_GPIO_Init+0x29c>)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_GPIO_Init+0x2a0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x19e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <HAL_GPIO_Init+0x2a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x19a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a49      	ldr	r2, [pc, #292]	; (8004128 <HAL_GPIO_Init+0x2a8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x196>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a48      	ldr	r2, [pc, #288]	; (800412c <HAL_GPIO_Init+0x2ac>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x192>
 800400e:	2303      	movs	r3, #3
 8004010:	e006      	b.n	8004020 <HAL_GPIO_Init+0x1a0>
 8004012:	2304      	movs	r3, #4
 8004014:	e004      	b.n	8004020 <HAL_GPIO_Init+0x1a0>
 8004016:	2302      	movs	r3, #2
 8004018:	e002      	b.n	8004020 <HAL_GPIO_Init+0x1a0>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_GPIO_Init+0x1a0>
 800401e:	2300      	movs	r3, #0
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	f002 0203 	and.w	r2, r2, #3
 8004026:	0092      	lsls	r2, r2, #2
 8004028:	4093      	lsls	r3, r2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004030:	493a      	ldr	r1, [pc, #232]	; (800411c <HAL_GPIO_Init+0x29c>)
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	3302      	adds	r3, #2
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4938      	ldr	r1, [pc, #224]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
 8004056:	e006      	b.n	8004066 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004058:	4b35      	ldr	r3, [pc, #212]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	43db      	mvns	r3, r3
 8004060:	4933      	ldr	r1, [pc, #204]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 8004062:	4013      	ands	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	492e      	ldr	r1, [pc, #184]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
 800407e:	e006      	b.n	800408e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	43db      	mvns	r3, r3
 8004088:	4929      	ldr	r1, [pc, #164]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 800408a:	4013      	ands	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800409a:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	4924      	ldr	r1, [pc, #144]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
 80040a6:	e006      	b.n	80040b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	491f      	ldr	r1, [pc, #124]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040c2:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	491a      	ldr	r1, [pc, #104]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
 80040ce:	e006      	b.n	80040de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	4915      	ldr	r1, [pc, #84]	; (8004130 <HAL_GPIO_Init+0x2b0>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	3301      	adds	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f47f aed0 	bne.w	8003e94 <HAL_GPIO_Init+0x14>
  }
}
 80040f4:	bf00      	nop
 80040f6:	372c      	adds	r7, #44	; 0x2c
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	10210000 	.word	0x10210000
 8004104:	10110000 	.word	0x10110000
 8004108:	10120000 	.word	0x10120000
 800410c:	10310000 	.word	0x10310000
 8004110:	10320000 	.word	0x10320000
 8004114:	10220000 	.word	0x10220000
 8004118:	40021000 	.word	0x40021000
 800411c:	40010000 	.word	0x40010000
 8004120:	40010800 	.word	0x40010800
 8004124:	40010c00 	.word	0x40010c00
 8004128:	40011000 	.word	0x40011000
 800412c:	40011400 	.word	0x40011400
 8004130:	40010400 	.word	0x40010400

08004134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
 8004140:	4613      	mov	r3, r2
 8004142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004144:	787b      	ldrb	r3, [r7, #1]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004150:	e003      	b.n	800415a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	041a      	lsls	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e11f      	b.n	80043b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe ffae 	bl	80030ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	; 0x24
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041c8:	f002 f838 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 80041cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4a7b      	ldr	r2, [pc, #492]	; (80043c0 <HAL_I2C_Init+0x25c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d807      	bhi.n	80041e8 <HAL_I2C_Init+0x84>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a7a      	ldr	r2, [pc, #488]	; (80043c4 <HAL_I2C_Init+0x260>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	bf94      	ite	ls
 80041e0:	2301      	movls	r3, #1
 80041e2:	2300      	movhi	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e006      	b.n	80041f6 <HAL_I2C_Init+0x92>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a77      	ldr	r2, [pc, #476]	; (80043c8 <HAL_I2C_Init+0x264>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	bf94      	ite	ls
 80041f0:	2301      	movls	r3, #1
 80041f2:	2300      	movhi	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0db      	b.n	80043b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a72      	ldr	r2, [pc, #456]	; (80043cc <HAL_I2C_Init+0x268>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0c9b      	lsrs	r3, r3, #18
 8004208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a64      	ldr	r2, [pc, #400]	; (80043c0 <HAL_I2C_Init+0x25c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d802      	bhi.n	8004238 <HAL_I2C_Init+0xd4>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3301      	adds	r3, #1
 8004236:	e009      	b.n	800424c <HAL_I2C_Init+0xe8>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	4a63      	ldr	r2, [pc, #396]	; (80043d0 <HAL_I2C_Init+0x26c>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	099b      	lsrs	r3, r3, #6
 800424a:	3301      	adds	r3, #1
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800425e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4956      	ldr	r1, [pc, #344]	; (80043c0 <HAL_I2C_Init+0x25c>)
 8004268:	428b      	cmp	r3, r1
 800426a:	d80d      	bhi.n	8004288 <HAL_I2C_Init+0x124>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1e59      	subs	r1, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	fbb1 f3f3 	udiv	r3, r1, r3
 800427a:	3301      	adds	r3, #1
 800427c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004280:	2b04      	cmp	r3, #4
 8004282:	bf38      	it	cc
 8004284:	2304      	movcc	r3, #4
 8004286:	e04f      	b.n	8004328 <HAL_I2C_Init+0x1c4>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d111      	bne.n	80042b4 <HAL_I2C_Init+0x150>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e58      	subs	r0, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	440b      	add	r3, r1
 800429e:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e012      	b.n	80042da <HAL_I2C_Init+0x176>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	0099      	lsls	r1, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Init+0x17e>
 80042de:	2301      	movs	r3, #1
 80042e0:	e022      	b.n	8004328 <HAL_I2C_Init+0x1c4>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <HAL_I2C_Init+0x1a4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e58      	subs	r0, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	440b      	add	r3, r1
 80042f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	e00f      	b.n	8004328 <HAL_I2C_Init+0x1c4>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e58      	subs	r0, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	0099      	lsls	r1, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	fbb0 f3f3 	udiv	r3, r0, r3
 800431e:	3301      	adds	r3, #1
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	6809      	ldr	r1, [r1, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6911      	ldr	r1, [r2, #16]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	430b      	orrs	r3, r1
 800436a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	000186a0 	.word	0x000186a0
 80043c4:	001e847f 	.word	0x001e847f
 80043c8:	003d08ff 	.word	0x003d08ff
 80043cc:	431bde83 	.word	0x431bde83
 80043d0:	10624dd3 	.word	0x10624dd3

080043d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	461a      	mov	r2, r3
 80043e0:	460b      	mov	r3, r1
 80043e2:	817b      	strh	r3, [r7, #10]
 80043e4:	4613      	mov	r3, r2
 80043e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff f9ac 	bl	8003744 <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	f040 80e0 	bne.w	80045bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	2319      	movs	r3, #25
 8004402:	2201      	movs	r2, #1
 8004404:	4970      	ldr	r1, [pc, #448]	; (80045c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f001 f966 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
 8004414:	e0d3      	b.n	80045be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_I2C_Master_Transmit+0x50>
 8004420:	2302      	movs	r3, #2
 8004422:	e0cc      	b.n	80045be <HAL_I2C_Master_Transmit+0x1ea>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d007      	beq.n	800444a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004458:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2221      	movs	r2, #33	; 0x21
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2210      	movs	r2, #16
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	893a      	ldrh	r2, [r7, #8]
 800447a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_I2C_Master_Transmit+0x1f8>)
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800448c:	8979      	ldrh	r1, [r7, #10]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fe52 	bl	800513c <I2C_MasterRequestWrite>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e08d      	b.n	80045be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044b8:	e066      	b.n	8004588 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f001 f9e0 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d107      	bne.n	80044e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06b      	b.n	80045be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d11b      	bne.n	800455c <HAL_I2C_Master_Transmit+0x188>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	6a39      	ldr	r1, [r7, #32]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f001 f9d0 	bl	8005906 <I2C_WaitOnBTFFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b04      	cmp	r3, #4
 8004572:	d107      	bne.n	8004584 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e01a      	b.n	80045be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d194      	bne.n	80044ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	00100002 	.word	0x00100002
 80045cc:	ffff0000 	.word	0xffff0000

080045d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	461a      	mov	r2, r3
 80045dc:	460b      	mov	r3, r1
 80045de:	817b      	strh	r3, [r7, #10]
 80045e0:	4613      	mov	r3, r2
 80045e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff f8ac 	bl	8003744 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	f040 8238 	bne.w	8004a6c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	2319      	movs	r3, #25
 8004602:	2201      	movs	r2, #1
 8004604:	497e      	ldr	r1, [pc, #504]	; (8004800 <HAL_I2C_Master_Receive+0x230>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 f866 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004612:	2302      	movs	r3, #2
 8004614:	e22b      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_I2C_Master_Receive+0x54>
 8004620:	2302      	movs	r3, #2
 8004622:	e224      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d007      	beq.n	800464a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004658:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2222      	movs	r2, #34	; 0x22
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2210      	movs	r2, #16
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	893a      	ldrh	r2, [r7, #8]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a5e      	ldr	r2, [pc, #376]	; (8004804 <HAL_I2C_Master_Receive+0x234>)
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800468c:	8979      	ldrh	r1, [r7, #10]
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fdd4 	bl	8005240 <I2C_MasterRequestRead>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e1e5      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d113      	bne.n	80046d2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e1b9      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d11d      	bne.n	8004716 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004710:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004712:	b662      	cpsie	i
 8004714:	e197      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	2b02      	cmp	r3, #2
 800471c:	d11d      	bne.n	800475a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800472e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004756:	b662      	cpsie	i
 8004758:	e175      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004780:	e161      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	2b03      	cmp	r3, #3
 8004788:	f200 811a 	bhi.w	80049c0 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	2b01      	cmp	r3, #1
 8004792:	d123      	bne.n	80047dc <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f001 f8f5 	bl	8005988 <I2C_WaitOnRXNEFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e162      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047da:	e134      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d150      	bne.n	8004886 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	2200      	movs	r2, #0
 80047ec:	4906      	ldr	r1, [pc, #24]	; (8004808 <HAL_I2C_Master_Receive+0x238>)
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 ff72 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e137      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
 80047fe:	bf00      	nop
 8004800:	00100002 	.word	0x00100002
 8004804:	ffff0000 	.word	0xffff0000
 8004808:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800480c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004850:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004884:	e0df      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2200      	movs	r2, #0
 800488e:	497a      	ldr	r1, [pc, #488]	; (8004a78 <HAL_I2C_Master_Receive+0x4a8>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 ff21 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0e6      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048e4:	4b65      	ldr	r3, [pc, #404]	; (8004a7c <HAL_I2C_Master_Receive+0x4ac>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	08db      	lsrs	r3, r3, #3
 80048ea:	4a65      	ldr	r2, [pc, #404]	; (8004a80 <HAL_I2C_Master_Receive+0x4b0>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	0a1a      	lsrs	r2, r3, #8
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	00da      	lsls	r2, r3, #3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	3b01      	subs	r3, #1
 8004902:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d117      	bne.n	800493a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800492c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e099      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d1da      	bne.n	80048fe <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800498a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049be:	e042      	b.n	8004a46 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 ffdf 	bl	8005988 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04c      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d118      	bne.n	8004a46 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f47f ae99 	bne.w	8004782 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	00010004 	.word	0x00010004
 8004a7c:	20000010 	.word	0x20000010
 8004a80:	14f8b589 	.word	0x14f8b589

08004a84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a9e:	f7fe fe51 	bl	8003744 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	f040 80d9 	bne.w	8004c64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2319      	movs	r3, #25
 8004ab8:	2201      	movs	r2, #1
 8004aba:	496d      	ldr	r1, [pc, #436]	; (8004c70 <HAL_I2C_Mem_Write+0x1ec>)
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fe0b 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0cc      	b.n	8004c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_I2C_Mem_Write+0x56>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0c5      	b.n	8004c66 <HAL_I2C_Mem_Write+0x1e2>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d007      	beq.n	8004b00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2221      	movs	r2, #33	; 0x21
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a4d      	ldr	r2, [pc, #308]	; (8004c74 <HAL_I2C_Mem_Write+0x1f0>)
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b42:	88f8      	ldrh	r0, [r7, #6]
 8004b44:	893a      	ldrh	r2, [r7, #8]
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4603      	mov	r3, r0
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fc42 	bl	80053dc <I2C_RequestMemoryWrite>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d052      	beq.n	8004c04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e081      	b.n	8004c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fe8c 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d11b      	bne.n	8004c04 <HAL_I2C_Mem_Write+0x180>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1aa      	bne.n	8004b62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fe78 	bl	8005906 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00d      	beq.n	8004c38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d107      	bne.n	8004c34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e016      	b.n	8004c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000

08004c78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	813b      	strh	r3, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c96:	f7fe fd55 	bl	8003744 <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 823d 	bne.w	8005124 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2319      	movs	r3, #25
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4981      	ldr	r1, [pc, #516]	; (8004eb8 <HAL_I2C_Mem_Read+0x240>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fd0f 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e230      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2C_Mem_Read+0x5a>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e229      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d007      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2222      	movs	r2, #34	; 0x22
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a61      	ldr	r2, [pc, #388]	; (8004ebc <HAL_I2C_Mem_Read+0x244>)
 8004d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3a:	88f8      	ldrh	r0, [r7, #6]
 8004d3c:	893a      	ldrh	r2, [r7, #8]
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4603      	mov	r3, r0
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fbdc 	bl	8005508 <I2C_RequestMemoryRead>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1e5      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d113      	bne.n	8004d8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e1b9      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d11d      	bne.n	8004dce <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004da2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dca:	b662      	cpsie	i
 8004dcc:	e197      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d11d      	bne.n	8004e12 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004de6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e0e:	b662      	cpsie	i
 8004e10:	e175      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e38:	e161      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	f200 811a 	bhi.w	8005078 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d123      	bne.n	8004e94 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fd99 	bl	8005988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e162      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e92:	e134      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d150      	bne.n	8004f3e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4906      	ldr	r1, [pc, #24]	; (8004ec0 <HAL_I2C_Mem_Read+0x248>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fc16 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e137      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
 8004eb6:	bf00      	nop
 8004eb8:	00100002 	.word	0x00100002
 8004ebc:	ffff0000 	.word	0xffff0000
 8004ec0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f08:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3c:	e0df      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	2200      	movs	r2, #0
 8004f46:	497a      	ldr	r1, [pc, #488]	; (8005130 <HAL_I2C_Mem_Read+0x4b8>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fbc5 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0e6      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f68:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f9c:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_I2C_Mem_Read+0x4bc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	4a65      	ldr	r2, [pc, #404]	; (8005138 <HAL_I2C_Mem_Read+0x4c0>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	0a1a      	lsrs	r2, r3, #8
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	00da      	lsls	r2, r3, #3
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d117      	bne.n	8004ff2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fe4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e099      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d1da      	bne.n	8004fb6 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005042:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005076:	e042      	b.n	80050fe <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fc83 	bl	8005988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04c      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d118      	bne.n	80050fe <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	f47f ae99 	bne.w	8004e3a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	00010004 	.word	0x00010004
 8005134:	20000010 	.word	0x20000010
 8005138:	14f8b589 	.word	0x14f8b589

0800513c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	460b      	mov	r3, r1
 800514a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d006      	beq.n	8005166 <I2C_MasterRequestWrite+0x2a>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d003      	beq.n	8005166 <I2C_MasterRequestWrite+0x2a>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005164:	d108      	bne.n	8005178 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e00b      	b.n	8005190 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	2b12      	cmp	r3, #18
 800517e:	d107      	bne.n	8005190 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800518e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fa9b 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b6:	d103      	bne.n	80051c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e035      	b.n	8005230 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051cc:	d108      	bne.n	80051e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051dc:	611a      	str	r2, [r3, #16]
 80051de:	e01b      	b.n	8005218 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	11db      	asrs	r3, r3, #7
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0306 	and.w	r3, r3, #6
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f063 030f 	orn	r3, r3, #15
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	490e      	ldr	r1, [pc, #56]	; (8005238 <I2C_MasterRequestWrite+0xfc>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fac1 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e010      	b.n	8005230 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800520e:	897b      	ldrh	r3, [r7, #10]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4907      	ldr	r1, [pc, #28]	; (800523c <I2C_MasterRequestWrite+0x100>)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fab1 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	00010008 	.word	0x00010008
 800523c:	00010002 	.word	0x00010002

08005240 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	460b      	mov	r3, r1
 800524e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005264:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d006      	beq.n	800527a <I2C_MasterRequestRead+0x3a>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d003      	beq.n	800527a <I2C_MasterRequestRead+0x3a>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005278:	d108      	bne.n	800528c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e00b      	b.n	80052a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	2b11      	cmp	r3, #17
 8005292:	d107      	bne.n	80052a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fa11 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d103      	bne.n	80052d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e079      	b.n	80053cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e0:	d108      	bne.n	80052f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	611a      	str	r2, [r3, #16]
 80052f2:	e05f      	b.n	80053b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052f4:	897b      	ldrh	r3, [r7, #10]
 80052f6:	11db      	asrs	r3, r3, #7
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0306 	and.w	r3, r3, #6
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f063 030f 	orn	r3, r3, #15
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4930      	ldr	r1, [pc, #192]	; (80053d4 <I2C_MasterRequestRead+0x194>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fa37 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e054      	b.n	80053cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005322:	897b      	ldrh	r3, [r7, #10]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4929      	ldr	r1, [pc, #164]	; (80053d8 <I2C_MasterRequestRead+0x198>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fa27 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e044      	b.n	80053cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005366:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f9af 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00d      	beq.n	800539c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538e:	d103      	bne.n	8005398 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e017      	b.n	80053cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	11db      	asrs	r3, r3, #7
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0306 	and.w	r3, r3, #6
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f063 030e 	orn	r3, r3, #14
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4907      	ldr	r1, [pc, #28]	; (80053d8 <I2C_MasterRequestRead+0x198>)
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f9e3 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00010008 	.word	0x00010008
 80053d8:	00010002 	.word	0x00010002

080053dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	460b      	mov	r3, r1
 80053f0:	813b      	strh	r3, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005404:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	2200      	movs	r2, #0
 800540e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f960 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542c:	d103      	bne.n	8005436 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e05f      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005448:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	492d      	ldr	r1, [pc, #180]	; (8005504 <I2C_RequestMemoryWrite+0x128>)
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f998 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04c      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa02 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e02b      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d105      	bne.n	80054b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	611a      	str	r2, [r3, #16]
 80054b2:	e021      	b.n	80054f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	6a39      	ldr	r1, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f9dc 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d107      	bne.n	80054ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e005      	b.n	80054fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ee:	893b      	ldrh	r3, [r7, #8]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	00010002 	.word	0x00010002

08005508 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4603      	mov	r3, r0
 8005518:	817b      	strh	r3, [r7, #10]
 800551a:	460b      	mov	r3, r1
 800551c:	813b      	strh	r3, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005530:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	2200      	movs	r2, #0
 800554a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f8c2 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005568:	d103      	bne.n	8005572 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0aa      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005576:	897b      	ldrh	r3, [r7, #10]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	4952      	ldr	r1, [pc, #328]	; (80056d4 <I2C_RequestMemoryRead+0x1cc>)
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f8fa 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e097      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	6a39      	ldr	r1, [r7, #32]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f964 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d107      	bne.n	80055da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e076      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055e4:	893b      	ldrh	r3, [r7, #8]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	611a      	str	r2, [r3, #16]
 80055ee:	e021      	b.n	8005634 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055f0:	893b      	ldrh	r3, [r7, #8]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f93e 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b04      	cmp	r3, #4
 8005614:	d107      	bne.n	8005626 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e050      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800562a:	893b      	ldrh	r3, [r7, #8]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	6a39      	ldr	r1, [r7, #32]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f923 	bl	8005884 <I2C_WaitOnTXEFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	2b04      	cmp	r3, #4
 800564a:	d107      	bne.n	800565c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e035      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2200      	movs	r2, #0
 8005678:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f82b 	bl	80056d8 <I2C_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005696:	d103      	bne.n	80056a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e013      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056a4:	897b      	ldrh	r3, [r7, #10]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	4906      	ldr	r1, [pc, #24]	; (80056d4 <I2C_RequestMemoryRead+0x1cc>)
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f863 	bl	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	00010002 	.word	0x00010002

080056d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e8:	e025      	b.n	8005736 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f0:	d021      	beq.n	8005736 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fe f827 	bl	8003744 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d116      	bne.n	8005736 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e023      	b.n	800577e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10d      	bne.n	800575c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	43da      	mvns	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4013      	ands	r3, r2
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	e00c      	b.n	8005776 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	43da      	mvns	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	429a      	cmp	r2, r3
 800577a:	d0b6      	beq.n	80056ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005794:	e051      	b.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d123      	bne.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f043 0204 	orr.w	r2, r3, #4
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e046      	b.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f4:	d021      	beq.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fd ffa5 	bl	8003744 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e020      	b.n	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d10c      	bne.n	800585e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	43da      	mvns	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4013      	ands	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	bf14      	ite	ne
 8005856:	2301      	movne	r3, #1
 8005858:	2300      	moveq	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	e00b      	b.n	8005876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	43da      	mvns	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	4013      	ands	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d18d      	bne.n	8005796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005890:	e02d      	b.n	80058ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f8ce 	bl	8005a34 <I2C_IsAcknowledgeFailed>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e02d      	b.n	80058fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a8:	d021      	beq.n	80058ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fd ff4b 	bl	8003744 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d116      	bne.n	80058ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e007      	b.n	80058fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	d1ca      	bne.n	8005892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005912:	e02d      	b.n	8005970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f88d 	bl	8005a34 <I2C_IsAcknowledgeFailed>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e02d      	b.n	8005980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592a:	d021      	beq.n	8005970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592c:	f7fd ff0a 	bl	8003744 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	429a      	cmp	r2, r3
 800593a:	d302      	bcc.n	8005942 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d116      	bne.n	8005970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e007      	b.n	8005980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d1ca      	bne.n	8005914 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005994:	e042      	b.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d119      	bne.n	80059d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0210 	mvn.w	r2, #16
 80059ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e029      	b.n	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d8:	f7fd feb4 	bl	8003744 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d302      	bcc.n	80059ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d116      	bne.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	f043 0220 	orr.w	r2, r3, #32
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e007      	b.n	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d1b5      	bne.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4a:	d11b      	bne.n	8005a84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f043 0204 	orr.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e26c      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8087 	beq.w	8005bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ab0:	4b92      	ldr	r3, [pc, #584]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d00c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005abc:	4b8f      	ldr	r3, [pc, #572]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d112      	bne.n	8005aee <HAL_RCC_OscConfig+0x5e>
 8005ac8:	4b8c      	ldr	r3, [pc, #560]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad4:	d10b      	bne.n	8005aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	4b89      	ldr	r3, [pc, #548]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d06c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x12c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d168      	bne.n	8005bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e246      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af6:	d106      	bne.n	8005b06 <HAL_RCC_OscConfig+0x76>
 8005af8:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7f      	ldr	r2, [pc, #508]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e02e      	b.n	8005b64 <HAL_RCC_OscConfig+0xd4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCC_OscConfig+0x98>
 8005b0e:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a7a      	ldr	r2, [pc, #488]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a77      	ldr	r2, [pc, #476]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e01d      	b.n	8005b64 <HAL_RCC_OscConfig+0xd4>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCC_OscConfig+0xbc>
 8005b32:	4b72      	ldr	r3, [pc, #456]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a71      	ldr	r2, [pc, #452]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a6e      	ldr	r2, [pc, #440]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e00b      	b.n	8005b64 <HAL_RCC_OscConfig+0xd4>
 8005b4c:	4b6b      	ldr	r3, [pc, #428]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a67      	ldr	r2, [pc, #412]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d013      	beq.n	8005b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7fd fdea 	bl	8003744 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b74:	f7fd fde6 	bl	8003744 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e1fa      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f0      	beq.n	8005b74 <HAL_RCC_OscConfig+0xe4>
 8005b92:	e014      	b.n	8005bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fd fdd6 	bl	8003744 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b9c:	f7fd fdd2 	bl	8003744 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b64      	cmp	r3, #100	; 0x64
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1e6      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bae:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x10c>
 8005bba:	e000      	b.n	8005bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d063      	beq.n	8005c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bca:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bd6:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d11c      	bne.n	8005c1c <HAL_RCC_OscConfig+0x18c>
 8005be2:	4b46      	ldr	r3, [pc, #280]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_RCC_OscConfig+0x176>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e1ba      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c06:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4939      	ldr	r1, [pc, #228]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1a:	e03a      	b.n	8005c92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2a:	f7fd fd8b 	bl	8003744 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fd fd87 	bl	8003744 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e19b      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c50:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4927      	ldr	r1, [pc, #156]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]
 8005c64:	e015      	b.n	8005c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c66:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fd6a 	bl	8003744 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c74:	f7fd fd66 	bl	8003744 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e17a      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c86:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03a      	beq.n	8005d14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d019      	beq.n	8005cda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cac:	f7fd fd4a 	bl	8003744 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb4:	f7fd fd46 	bl	8003744 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e15a      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	f000 fada 	bl	800628c <RCC_Delay>
 8005cd8:	e01c      	b.n	8005d14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce0:	f7fd fd30 	bl	8003744 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce6:	e00f      	b.n	8005d08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce8:	f7fd fd2c 	bl	8003744 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d908      	bls.n	8005d08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e140      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	42420000 	.word	0x42420000
 8005d04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d08:	4b9e      	ldr	r3, [pc, #632]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e9      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80a6 	beq.w	8005e6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d26:	4b97      	ldr	r3, [pc, #604]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10d      	bne.n	8005d4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d32:	4b94      	ldr	r3, [pc, #592]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4a93      	ldr	r2, [pc, #588]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	61d3      	str	r3, [r2, #28]
 8005d3e:	4b91      	ldr	r3, [pc, #580]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4e:	4b8e      	ldr	r3, [pc, #568]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d118      	bne.n	8005d8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5a:	4b8b      	ldr	r3, [pc, #556]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a8a      	ldr	r2, [pc, #552]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d66:	f7fd fced 	bl	8003744 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fd fce9 	bl	8003744 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b64      	cmp	r3, #100	; 0x64
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0fd      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d80:	4b81      	ldr	r3, [pc, #516]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x312>
 8005d94:	4b7b      	ldr	r3, [pc, #492]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	4a7a      	ldr	r2, [pc, #488]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6213      	str	r3, [r2, #32]
 8005da0:	e02d      	b.n	8005dfe <HAL_RCC_OscConfig+0x36e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x334>
 8005daa:	4b76      	ldr	r3, [pc, #472]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	4a75      	ldr	r2, [pc, #468]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	6213      	str	r3, [r2, #32]
 8005db6:	4b73      	ldr	r3, [pc, #460]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	4a72      	ldr	r2, [pc, #456]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	f023 0304 	bic.w	r3, r3, #4
 8005dc0:	6213      	str	r3, [r2, #32]
 8005dc2:	e01c      	b.n	8005dfe <HAL_RCC_OscConfig+0x36e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d10c      	bne.n	8005de6 <HAL_RCC_OscConfig+0x356>
 8005dcc:	4b6d      	ldr	r3, [pc, #436]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	4a6c      	ldr	r2, [pc, #432]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6213      	str	r3, [r2, #32]
 8005dd8:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	4a69      	ldr	r2, [pc, #420]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	6213      	str	r3, [r2, #32]
 8005de4:	e00b      	b.n	8005dfe <HAL_RCC_OscConfig+0x36e>
 8005de6:	4b67      	ldr	r3, [pc, #412]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	4a66      	ldr	r2, [pc, #408]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6213      	str	r3, [r2, #32]
 8005df2:	4b64      	ldr	r3, [pc, #400]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4a63      	ldr	r2, [pc, #396]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d015      	beq.n	8005e32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e06:	f7fd fc9d 	bl	8003744 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	e00a      	b.n	8005e24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0e:	f7fd fc99 	bl	8003744 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e0ab      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	4b57      	ldr	r3, [pc, #348]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ee      	beq.n	8005e0e <HAL_RCC_OscConfig+0x37e>
 8005e30:	e014      	b.n	8005e5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e32:	f7fd fc87 	bl	8003744 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e38:	e00a      	b.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3a:	f7fd fc83 	bl	8003744 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e095      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e50:	4b4c      	ldr	r3, [pc, #304]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ee      	bne.n	8005e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4a47      	ldr	r2, [pc, #284]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 8081 	beq.w	8005f7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e78:	4b42      	ldr	r3, [pc, #264]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 030c 	and.w	r3, r3, #12
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d061      	beq.n	8005f48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d146      	bne.n	8005f1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <HAL_RCC_OscConfig+0x4fc>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e92:	f7fd fc57 	bl	8003744 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9a:	f7fd fc53 	bl	8003744 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e067      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eac:	4b35      	ldr	r3, [pc, #212]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d108      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ec2:	4b30      	ldr	r3, [pc, #192]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	492d      	ldr	r1, [pc, #180]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a19      	ldr	r1, [r3, #32]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	4927      	ldr	r1, [pc, #156]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eec:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <HAL_RCC_OscConfig+0x4fc>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fd fc27 	bl	8003744 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efa:	f7fd fc23 	bl	8003744 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e037      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCC_OscConfig+0x46a>
 8005f18:	e02f      	b.n	8005f7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <HAL_RCC_OscConfig+0x4fc>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f20:	f7fd fc10 	bl	8003744 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f28:	f7fd fc0c 	bl	8003744 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e020      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x498>
 8005f46:	e018      	b.n	8005f7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e013      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	42420060 	.word	0x42420060

08005f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0d0      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa4:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d910      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb2:	4b67      	ldr	r3, [pc, #412]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 0207 	bic.w	r2, r3, #7
 8005fba:	4965      	ldr	r1, [pc, #404]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a52      	ldr	r2, [pc, #328]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800600a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800600e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d040      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d115      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b41      	ldr	r3, [pc, #260]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e073      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605e:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e06b      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f023 0203 	bic.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4936      	ldr	r1, [pc, #216]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006080:	f7fd fb60 	bl	8003744 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	e00a      	b.n	800609e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006088:	f7fd fb5c 	bl	8003744 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e053      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f003 020c 	and.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1eb      	bne.n	8006088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d210      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 0207 	bic.w	r2, r3, #7
 80060c6:	4922      	ldr	r1, [pc, #136]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800611a:	4313      	orrs	r3, r2
 800611c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f821 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8006122:	4601      	mov	r1, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	5cd3      	ldrb	r3, [r2, r3]
 8006132:	fa21 f303 	lsr.w	r3, r1, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1cc>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_RCC_ClockConfig+0x1d0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd fabe 	bl	80036c0 <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40022000 	.word	0x40022000
 8006154:	40021000 	.word	0x40021000
 8006158:	0800b96c 	.word	0x0800b96c
 800615c:	20000010 	.word	0x20000010
 8006160:	20000014 	.word	0x20000014

08006164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	b490      	push	{r4, r7}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800616a:	4b2a      	ldr	r3, [pc, #168]	; (8006214 <HAL_RCC_GetSysClockFreq+0xb0>)
 800616c:	1d3c      	adds	r4, r7, #4
 800616e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800618e:	4b23      	ldr	r3, [pc, #140]	; (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b04      	cmp	r3, #4
 800619c:	d002      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x40>
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d003      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x46>
 80061a2:	e02d      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061a4:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a6:	623b      	str	r3, [r7, #32]
      break;
 80061a8:	e02d      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	0c9b      	lsrs	r3, r3, #18
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061b6:	4413      	add	r3, r2
 80061b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80061bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	0c5b      	lsrs	r3, r3, #17
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061d6:	4413      	add	r3, r2
 80061d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061e2:	fb02 f203 	mul.w	r2, r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	e004      	b.n	80061fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	623b      	str	r3, [r7, #32]
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006202:	623b      	str	r3, [r7, #32]
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	6a3b      	ldr	r3, [r7, #32]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bc90      	pop	{r4, r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	0800b1ec 	.word	0x0800b1ec
 8006218:	0800b1fc 	.word	0x0800b1fc
 800621c:	40021000 	.word	0x40021000
 8006220:	007a1200 	.word	0x007a1200
 8006224:	003d0900 	.word	0x003d0900

08006228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <HAL_RCC_GetHCLKFreq+0x10>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	20000010 	.word	0x20000010

0800623c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006240:	f7ff fff2 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006244:	4601      	mov	r1, r0
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4a03      	ldr	r2, [pc, #12]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	0800b97c 	.word	0x0800b97c

08006264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006268:	f7ff ffde 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 800626c:	4601      	mov	r1, r0
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	0adb      	lsrs	r3, r3, #11
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	4a03      	ldr	r2, [pc, #12]	; (8006288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800627a:	5cd3      	ldrb	r3, [r2, r3]
 800627c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40021000 	.word	0x40021000
 8006288:	0800b97c 	.word	0x0800b97c

0800628c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <RCC_Delay+0x34>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <RCC_Delay+0x38>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0a5b      	lsrs	r3, r3, #9
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
 80062a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062a8:	bf00      	nop
  }
  while (Delay --);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1e5a      	subs	r2, r3, #1
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f9      	bne.n	80062a8 <RCC_Delay+0x1c>
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000010 	.word	0x20000010
 80062c4:	10624dd3 	.word	0x10624dd3

080062c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e053      	b.n	8006382 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fc ff37 	bl	8003168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	ea42 0103 	orr.w	r1, r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	0c1a      	lsrs	r2, r3, #16
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f002 0204 	and.w	r2, r2, #4
 8006360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e01d      	b.n	80063d8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fc ff25 	bl	8003200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f000 fb0b 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b06      	cmp	r3, #6
 8006408:	d007      	beq.n	800641a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e01d      	b.n	8006474 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f815 	bl	800647c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	4619      	mov	r1, r3
 8006464:	4610      	mov	r0, r2
 8006466:	f000 fabd 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr

0800648e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d122      	bne.n	80064ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d11b      	bne.n	80064ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f06f 0202 	mvn.w	r2, #2
 80064ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa6b 	bl	80069ac <HAL_TIM_IC_CaptureCallback>
 80064d6:	e005      	b.n	80064e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa5e 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa6d 	bl	80069be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d122      	bne.n	800653e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b04      	cmp	r3, #4
 8006504:	d11b      	bne.n	800653e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f06f 0204 	mvn.w	r2, #4
 800650e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fa41 	bl	80069ac <HAL_TIM_IC_CaptureCallback>
 800652a:	e005      	b.n	8006538 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa34 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa43 	bl	80069be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b08      	cmp	r3, #8
 800654a:	d122      	bne.n	8006592 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b08      	cmp	r3, #8
 8006558:	d11b      	bne.n	8006592 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0208 	mvn.w	r2, #8
 8006562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2204      	movs	r2, #4
 8006568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa17 	bl	80069ac <HAL_TIM_IC_CaptureCallback>
 800657e:	e005      	b.n	800658c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa0a 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa19 	bl	80069be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b10      	cmp	r3, #16
 800659e:	d122      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d11b      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f06f 0210 	mvn.w	r2, #16
 80065b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2208      	movs	r2, #8
 80065bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9ed 	bl	80069ac <HAL_TIM_IC_CaptureCallback>
 80065d2:	e005      	b.n	80065e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f9e0 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9ef 	bl	80069be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10e      	bne.n	8006612 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d107      	bne.n	8006612 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0201 	mvn.w	r2, #1
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7fc f995 	bl	800293c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d10e      	bne.n	800663e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d107      	bne.n	800663e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fcf1 	bl	8007020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d10e      	bne.n	800666a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d107      	bne.n	800666a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f9b3 	bl	80069d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b20      	cmp	r3, #32
 8006676:	d10e      	bne.n	8006696 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b20      	cmp	r3, #32
 8006684:	d107      	bne.n	8006696 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f06f 0220 	mvn.w	r2, #32
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fcbc 	bl	800700e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0b4      	b.n	8006824 <HAL_TIM_PWM_ConfigChannel+0x184>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b0c      	cmp	r3, #12
 80066ce:	f200 809f 	bhi.w	8006810 <HAL_TIM_PWM_ConfigChannel+0x170>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	0800670d 	.word	0x0800670d
 80066dc:	08006811 	.word	0x08006811
 80066e0:	08006811 	.word	0x08006811
 80066e4:	08006811 	.word	0x08006811
 80066e8:	0800674d 	.word	0x0800674d
 80066ec:	08006811 	.word	0x08006811
 80066f0:	08006811 	.word	0x08006811
 80066f4:	08006811 	.word	0x08006811
 80066f8:	0800678f 	.word	0x0800678f
 80066fc:	08006811 	.word	0x08006811
 8006700:	08006811 	.word	0x08006811
 8006704:	08006811 	.word	0x08006811
 8006708:	080067cf 	.word	0x080067cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f9c8 	bl	8006aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0208 	orr.w	r2, r2, #8
 8006726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0204 	bic.w	r2, r2, #4
 8006736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6999      	ldr	r1, [r3, #24]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	619a      	str	r2, [r3, #24]
      break;
 800674a:	e062      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fa0e 	bl	8006b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6999      	ldr	r1, [r3, #24]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	021a      	lsls	r2, r3, #8
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	619a      	str	r2, [r3, #24]
      break;
 800678c:	e041      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fa57 	bl	8006c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0208 	orr.w	r2, r2, #8
 80067a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69da      	ldr	r2, [r3, #28]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0204 	bic.w	r2, r2, #4
 80067b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69d9      	ldr	r1, [r3, #28]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	61da      	str	r2, [r3, #28]
      break;
 80067cc:	e021      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 faa1 	bl	8006d1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69d9      	ldr	r1, [r3, #28]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	021a      	lsls	r2, r3, #8
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	61da      	str	r2, [r3, #28]
      break;
 800680e:	e000      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006810:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIM_ConfigClockSource+0x18>
 8006840:	2302      	movs	r3, #2
 8006842:	e0a6      	b.n	8006992 <HAL_TIM_ConfigClockSource+0x166>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d067      	beq.n	800694c <HAL_TIM_ConfigClockSource+0x120>
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d80b      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x6c>
 8006880:	2b10      	cmp	r3, #16
 8006882:	d073      	beq.n	800696c <HAL_TIM_ConfigClockSource+0x140>
 8006884:	2b10      	cmp	r3, #16
 8006886:	d802      	bhi.n	800688e <HAL_TIM_ConfigClockSource+0x62>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d06f      	beq.n	800696c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800688c:	e078      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800688e:	2b20      	cmp	r3, #32
 8006890:	d06c      	beq.n	800696c <HAL_TIM_ConfigClockSource+0x140>
 8006892:	2b30      	cmp	r3, #48	; 0x30
 8006894:	d06a      	beq.n	800696c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006896:	e073      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006898:	2b70      	cmp	r3, #112	; 0x70
 800689a:	d00d      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0x8c>
 800689c:	2b70      	cmp	r3, #112	; 0x70
 800689e:	d804      	bhi.n	80068aa <HAL_TIM_ConfigClockSource+0x7e>
 80068a0:	2b50      	cmp	r3, #80	; 0x50
 80068a2:	d033      	beq.n	800690c <HAL_TIM_ConfigClockSource+0xe0>
 80068a4:	2b60      	cmp	r3, #96	; 0x60
 80068a6:	d041      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80068a8:	e06a      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	d066      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x152>
 80068b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b4:	d017      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068b6:	e063      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6899      	ldr	r1, [r3, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f000 faed 	bl	8006ea6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	609a      	str	r2, [r3, #8]
      break;
 80068e4:	e04c      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6899      	ldr	r1, [r3, #8]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f000 fad6 	bl	8006ea6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006908:	609a      	str	r2, [r3, #8]
      break;
 800690a:	e039      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	461a      	mov	r2, r3
 800691a:	f000 fa4d 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2150      	movs	r1, #80	; 0x50
 8006924:	4618      	mov	r0, r3
 8006926:	f000 faa4 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800692a:	e029      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	461a      	mov	r2, r3
 800693a:	f000 fa6b 	bl	8006e14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2160      	movs	r1, #96	; 0x60
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fa94 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800694a:	e019      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	461a      	mov	r2, r3
 800695a:	f000 fa2d 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2140      	movs	r1, #64	; 0x40
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fa84 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800696a:	e009      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f000 fa7b 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800697c:	e000      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800697e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr
	...

080069e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a29      	ldr	r2, [pc, #164]	; (8006a9c <TIM_Base_SetConfig+0xb8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <TIM_Base_SetConfig+0x30>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d007      	beq.n	8006a14 <TIM_Base_SetConfig+0x30>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <TIM_Base_SetConfig+0xbc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_Base_SetConfig+0x30>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <TIM_Base_SetConfig+0xc0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d108      	bne.n	8006a26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <TIM_Base_SetConfig+0xb8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_Base_SetConfig+0x62>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d007      	beq.n	8006a46 <TIM_Base_SetConfig+0x62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <TIM_Base_SetConfig+0xbc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_Base_SetConfig+0x62>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a18      	ldr	r2, [pc, #96]	; (8006aa4 <TIM_Base_SetConfig+0xc0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d108      	bne.n	8006a58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a07      	ldr	r2, [pc, #28]	; (8006a9c <TIM_Base_SetConfig+0xb8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d103      	bne.n	8006a8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	615a      	str	r2, [r3, #20]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800

08006aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f023 0302 	bic.w	r3, r3, #2
 8006af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <TIM_OC1_SetConfig+0xc8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10c      	bne.n	8006b1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0308 	bic.w	r3, r3, #8
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <TIM_OC1_SetConfig+0xc8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d111      	bne.n	8006b4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	621a      	str	r2, [r3, #32]
}
 8006b64:	bf00      	nop
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40012c00 	.word	0x40012c00

08006b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f023 0210 	bic.w	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0320 	bic.w	r3, r3, #32
 8006bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <TIM_OC2_SetConfig+0xd0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d10d      	bne.n	8006bf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <TIM_OC2_SetConfig+0xd0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d113      	bne.n	8006c20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	40012c00 	.word	0x40012c00

08006c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <TIM_OC3_SetConfig+0xd0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d10d      	bne.n	8006cc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <TIM_OC3_SetConfig+0xd0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d113      	bne.n	8006cf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	621a      	str	r2, [r3, #32]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00

08006d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	031b      	lsls	r3, r3, #12
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a0f      	ldr	r2, [pc, #60]	; (8006db4 <TIM_OC4_SetConfig+0x98>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d109      	bne.n	8006d90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	019b      	lsls	r3, r3, #6
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00

08006db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 030a 	bic.w	r3, r3, #10
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f023 0210 	bic.w	r2, r3, #16
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	031b      	lsls	r3, r3, #12
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	621a      	str	r2, [r3, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f043 0307 	orr.w	r3, r3, #7
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	609a      	str	r2, [r3, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	021a      	lsls	r2, r3, #8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	609a      	str	r2, [r3, #8]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e032      	b.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f34:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e03d      	b.n	8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr

0800700e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	bc80      	pop	{r7}
 800701e:	4770      	bx	lr

08007020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e03f      	b.n	80070c4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fc f93d 	bl	80032d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2224      	movs	r2, #36	; 0x24
 8007062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007074:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fc64 	bl	8007944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691a      	ldr	r2, [r3, #16]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800708a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800709a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b088      	sub	sp, #32
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	f040 8083 	bne.w	80071f4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_UART_Transmit+0x2e>
 80070f4:	88fb      	ldrh	r3, [r7, #6]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e07b      	b.n	80071f6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_UART_Transmit+0x40>
 8007108:	2302      	movs	r3, #2
 800710a:	e074      	b.n	80071f6 <HAL_UART_Transmit+0x12a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007122:	f7fc fb0f 	bl	8003744 <HAL_GetTick>
 8007126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007134:	e042      	b.n	80071bc <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714c:	d122      	bne.n	8007194 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2200      	movs	r2, #0
 8007156:	2180      	movs	r1, #128	; 0x80
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fa74 	bl	8007646 <UART_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e046      	b.n	80071f6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3302      	adds	r3, #2
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	e017      	b.n	80071bc <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3301      	adds	r3, #1
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	e013      	b.n	80071bc <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2200      	movs	r2, #0
 800719c:	2180      	movs	r1, #128	; 0x80
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fa51 	bl	8007646 <UART_WaitOnFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e023      	b.n	80071f6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	60ba      	str	r2, [r7, #8]
 80071b4:	781a      	ldrb	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1b7      	bne.n	8007136 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2140      	movs	r1, #64	; 0x40
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fa38 	bl	8007646 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e00a      	b.n	80071f6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b20      	cmp	r3, #32
 8007218:	d166      	bne.n	80072e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_UART_Receive_DMA+0x26>
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e05f      	b.n	80072ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_UART_Receive_DMA+0x38>
 8007234:	2302      	movs	r3, #2
 8007236:	e058      	b.n	80072ea <HAL_UART_Receive_DMA+0xea>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2222      	movs	r2, #34	; 0x22
 8007256:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	4a25      	ldr	r2, [pc, #148]	; (80072f4 <HAL_UART_Receive_DMA+0xf4>)
 8007260:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	4a24      	ldr	r2, [pc, #144]	; (80072f8 <HAL_UART_Receive_DMA+0xf8>)
 8007268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	4a23      	ldr	r2, [pc, #140]	; (80072fc <HAL_UART_Receive_DMA+0xfc>)
 8007270:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	2200      	movs	r2, #0
 8007278:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800727a:	f107 0308 	add.w	r3, r7, #8
 800727e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	88fb      	ldrh	r3, [r7, #6]
 8007292:	f7fc fbeb 	bl	8003a6c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007296:	2300      	movs	r3, #0
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e000      	b.n	80072ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80072e8:	2302      	movs	r3, #2
  }
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	0800752f 	.word	0x0800752f
 80072f8:	08007597 	.word	0x08007597
 80072fc:	080075b3 	.word	0x080075b3

08007300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10d      	bne.n	8007352 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_UART_IRQHandler+0x52>
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa78 	bl	8007840 <UART_Receive_IT>
      return;
 8007350:	e0cc      	b.n	80074ec <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80ab 	beq.w	80074b0 <HAL_UART_IRQHandler+0x1b0>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <HAL_UART_IRQHandler+0x70>
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80a0 	beq.w	80074b0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_UART_IRQHandler+0x90>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007388:	f043 0201 	orr.w	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_UART_IRQHandler+0xb0>
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	f043 0202 	orr.w	r2, r3, #2
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_UART_IRQHandler+0xd0>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c8:	f043 0204 	orr.w	r2, r3, #4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_UART_IRQHandler+0xf0>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e8:	f043 0208 	orr.w	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d078      	beq.n	80074ea <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <HAL_UART_IRQHandler+0x112>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa17 	bl	8007840 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <HAL_UART_IRQHandler+0x13a>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d031      	beq.n	800749e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f962 	bl	8007704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d023      	beq.n	8007496 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	695a      	ldr	r2, [r3, #20]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	2b00      	cmp	r3, #0
 8007464:	d013      	beq.n	800748e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746a:	4a22      	ldr	r2, [pc, #136]	; (80074f4 <HAL_UART_IRQHandler+0x1f4>)
 800746c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007472:	4618      	mov	r0, r3
 8007474:	f7fc fb5a 	bl	8003b2c <HAL_DMA_Abort_IT>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d016      	beq.n	80074ac <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e00e      	b.n	80074ac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f844 	bl	800751c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	e00a      	b.n	80074ac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f840 	bl	800751c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	e006      	b.n	80074ac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f83c 	bl	800751c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80074aa:	e01e      	b.n	80074ea <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ac:	bf00      	nop
    return;
 80074ae:	e01c      	b.n	80074ea <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <HAL_UART_IRQHandler+0x1cc>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f94e 	bl	8007766 <UART_Transmit_IT>
    return;
 80074ca:	e00f      	b.n	80074ec <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <HAL_UART_IRQHandler+0x1ec>
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f995 	bl	8007810 <UART_EndTransmit_IT>
    return;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_UART_IRQHandler+0x1ec>
    return;
 80074ea:	bf00      	nop
  }
}
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	0800773f 	.word	0x0800773f

080074f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr

0800752e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d11e      	bne.n	8007588 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800755e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695a      	ldr	r2, [r3, #20]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0201 	bic.w	r2, r2, #1
 800756e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695a      	ldr	r2, [r3, #20]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7fa fec7 	bl	800231c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff ffb0 	bl	800750a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b21      	cmp	r3, #33	; 0x21
 80075e4:	d108      	bne.n	80075f8 <UART_DMAError+0x46>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80075f2:	68b8      	ldr	r0, [r7, #8]
 80075f4:	f000 f871 	bl	80076da <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf14      	ite	ne
 8007606:	2301      	movne	r3, #1
 8007608:	2300      	moveq	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b22      	cmp	r3, #34	; 0x22
 8007618:	d108      	bne.n	800762c <UART_DMAError+0x7a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007626:	68b8      	ldr	r0, [r7, #8]
 8007628:	f000 f86c 	bl	8007704 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	f043 0210 	orr.w	r2, r3, #16
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007638:	68b8      	ldr	r0, [r7, #8]
 800763a:	f7ff ff6f 	bl	800751c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	603b      	str	r3, [r7, #0]
 8007652:	4613      	mov	r3, r2
 8007654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007656:	e02c      	b.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800765e:	d028      	beq.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0x30>
 8007666:	f7fc f86d 	bl	8003744 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	429a      	cmp	r2, r3
 8007674:	d21d      	bcs.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007684:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e00f      	b.n	80076d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4013      	ands	r3, r2
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	429a      	cmp	r2, r3
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d0c3      	beq.n	8007658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80076f0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800771a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fedf 	bl	800751c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b21      	cmp	r3, #33	; 0x21
 8007778:	d144      	bne.n	8007804 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007782:	d11a      	bne.n	80077ba <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007798:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	621a      	str	r2, [r3, #32]
 80077ac:	e00e      	b.n	80077cc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	621a      	str	r2, [r3, #32]
 80077b8:	e008      	b.n	80077cc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6211      	str	r1, [r2, #32]
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4619      	mov	r1, r3
 80077da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10f      	bne.n	8007800 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	e000      	b.n	8007806 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007804:	2302      	movs	r3, #2
  }
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007826:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fe61 	bl	80074f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b22      	cmp	r3, #34	; 0x22
 8007852:	d171      	bne.n	8007938 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785c:	d123      	bne.n	80078a6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10e      	bne.n	800788a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	1c9a      	adds	r2, r3, #2
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	629a      	str	r2, [r3, #40]	; 0x28
 8007888:	e029      	b.n	80078de <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	b29b      	uxth	r3, r3
 8007892:	b2db      	uxtb	r3, r3
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	629a      	str	r2, [r3, #40]	; 0x28
 80078a4:	e01b      	b.n	80078de <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6858      	ldr	r0, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	1c59      	adds	r1, r3, #1
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6291      	str	r1, [r2, #40]	; 0x28
 80078be:	b2c2      	uxtb	r2, r0
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e00c      	b.n	80078de <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	1c58      	adds	r0, r3, #1
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	6288      	str	r0, [r1, #40]	; 0x28
 80078d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4619      	mov	r1, r3
 80078ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d120      	bne.n	8007934 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0220 	bic.w	r2, r2, #32
 8007900:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fa fcf6 	bl	800231c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e002      	b.n	800793a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800797e:	f023 030c 	bic.w	r3, r3, #12
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	430b      	orrs	r3, r1
 800798a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a52      	ldr	r2, [pc, #328]	; (8007af0 <UART_SetConfig+0x1ac>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d14e      	bne.n	8007a4a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079ac:	f7fe fc5a 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 80079b0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009a      	lsls	r2, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	4a4a      	ldr	r2, [pc, #296]	; (8007af4 <UART_SetConfig+0x1b0>)
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	0119      	lsls	r1, r3, #4
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009a      	lsls	r2, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e8:	4b42      	ldr	r3, [pc, #264]	; (8007af4 <UART_SetConfig+0x1b0>)
 80079ea:	fba3 0302 	umull	r0, r3, r3, r2
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	2064      	movs	r0, #100	; 0x64
 80079f2:	fb00 f303 	mul.w	r3, r0, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	3332      	adds	r3, #50	; 0x32
 80079fc:	4a3d      	ldr	r2, [pc, #244]	; (8007af4 <UART_SetConfig+0x1b0>)
 80079fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a08:	4419      	add	r1, r3
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009a      	lsls	r2, r3, #2
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a20:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007a22:	fba3 0302 	umull	r0, r3, r3, r2
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	2064      	movs	r0, #100	; 0x64
 8007a2a:	fb00 f303 	mul.w	r3, r0, r3
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	3332      	adds	r3, #50	; 0x32
 8007a34:	4a2f      	ldr	r2, [pc, #188]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	f003 020f 	and.w	r2, r3, #15
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	440a      	add	r2, r1
 8007a46:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007a48:	e04d      	b.n	8007ae6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a4a:	f7fe fbf7 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 8007a4e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009a      	lsls	r2, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a66:	4a23      	ldr	r2, [pc, #140]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007a68:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	0119      	lsls	r1, r3, #4
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009a      	lsls	r2, r3, #2
 8007a7a:	441a      	add	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a86:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007a88:	fba3 0302 	umull	r0, r3, r3, r2
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	2064      	movs	r0, #100	; 0x64
 8007a90:	fb00 f303 	mul.w	r3, r0, r3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	3332      	adds	r3, #50	; 0x32
 8007a9a:	4a16      	ldr	r2, [pc, #88]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aa6:	4419      	add	r1, r3
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009a      	lsls	r2, r3, #2
 8007ab2:	441a      	add	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8007abe:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007ac0:	fba3 0302 	umull	r0, r3, r3, r2
 8007ac4:	095b      	lsrs	r3, r3, #5
 8007ac6:	2064      	movs	r0, #100	; 0x64
 8007ac8:	fb00 f303 	mul.w	r3, r0, r3
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	3332      	adds	r3, #50	; 0x32
 8007ad2:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <UART_SetConfig+0x1b0>)
 8007ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	440a      	add	r2, r1
 8007ae4:	609a      	str	r2, [r3, #8]
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	40013800 	.word	0x40013800
 8007af4:	51eb851f 	.word	0x51eb851f

08007af8 <atof>:
 8007af8:	2100      	movs	r1, #0
 8007afa:	f000 becd 	b.w	8008898 <strtod>

08007afe <atoi>:
 8007afe:	220a      	movs	r2, #10
 8007b00:	2100      	movs	r1, #0
 8007b02:	f000 bf57 	b.w	80089b4 <strtol>
	...

08007b08 <gcvt>:
 8007b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0a:	461c      	mov	r4, r3
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4615      	mov	r5, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	f7f8 ff50 	bl	80009bc <__aeabi_dcmplt>
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	b118      	cbz	r0, 8007b28 <gcvt+0x20>
 8007b20:	222d      	movs	r2, #45	; 0x2d
 8007b22:	3d01      	subs	r5, #1
 8007b24:	f803 2b01 	strb.w	r2, [r3], #1
 8007b28:	2267      	movs	r2, #103	; 0x67
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	e9cd 5300 	strd	r5, r3, [sp]
 8007b30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8007b34:	4905      	ldr	r1, [pc, #20]	; (8007b4c <gcvt+0x44>)
 8007b36:	4632      	mov	r2, r6
 8007b38:	463b      	mov	r3, r7
 8007b3a:	6808      	ldr	r0, [r1, #0]
 8007b3c:	f000 ffc4 	bl	8008ac8 <_gcvt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	bf14      	ite	ne
 8007b44:	4620      	movne	r0, r4
 8007b46:	2000      	moveq	r0, #0
 8007b48:	b005      	add	sp, #20
 8007b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4c:	2000001c 	.word	0x2000001c

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	; (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	2000001c 	.word	0x2000001c

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	2500      	movs	r5, #0
 8007b60:	4e0c      	ldr	r6, [pc, #48]	; (8007b94 <__libc_init_array+0x38>)
 8007b62:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b64:	1ba4      	subs	r4, r4, r6
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	42a5      	cmp	r5, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	f003 fa6a 	bl	800b044 <_init>
 8007b70:	2500      	movs	r5, #0
 8007b72:	4e0a      	ldr	r6, [pc, #40]	; (8007b9c <__libc_init_array+0x40>)
 8007b74:	4c0a      	ldr	r4, [pc, #40]	; (8007ba0 <__libc_init_array+0x44>)
 8007b76:	1ba4      	subs	r4, r4, r6
 8007b78:	10a4      	asrs	r4, r4, #2
 8007b7a:	42a5      	cmp	r5, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b84:	4798      	blx	r3
 8007b86:	3501      	adds	r5, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b8e:	4798      	blx	r3
 8007b90:	3501      	adds	r5, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	0800bc30 	.word	0x0800bc30
 8007b98:	0800bc30 	.word	0x0800bc30
 8007b9c:	0800bc30 	.word	0x0800bc30
 8007ba0:	0800bc34 	.word	0x0800bc34

08007ba4 <memset>:
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	4402      	add	r2, r0
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d100      	bne.n	8007bae <memset+0xa>
 8007bac:	4770      	bx	lr
 8007bae:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb2:	e7f9      	b.n	8007ba8 <memset+0x4>

08007bb4 <siprintf>:
 8007bb4:	b40e      	push	{r1, r2, r3}
 8007bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bba:	b500      	push	{lr}
 8007bbc:	b09c      	sub	sp, #112	; 0x70
 8007bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8007bc0:	9002      	str	r0, [sp, #8]
 8007bc2:	9006      	str	r0, [sp, #24]
 8007bc4:	9107      	str	r1, [sp, #28]
 8007bc6:	9104      	str	r1, [sp, #16]
 8007bc8:	4808      	ldr	r0, [pc, #32]	; (8007bec <siprintf+0x38>)
 8007bca:	4909      	ldr	r1, [pc, #36]	; (8007bf0 <siprintf+0x3c>)
 8007bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd0:	9105      	str	r1, [sp, #20]
 8007bd2:	6800      	ldr	r0, [r0, #0]
 8007bd4:	a902      	add	r1, sp, #8
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	f002 f88c 	bl	8009cf4 <_svfiprintf_r>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	9b02      	ldr	r3, [sp, #8]
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	b01c      	add	sp, #112	; 0x70
 8007be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be8:	b003      	add	sp, #12
 8007bea:	4770      	bx	lr
 8007bec:	2000001c 	.word	0x2000001c
 8007bf0:	ffff0208 	.word	0xffff0208

08007bf4 <strchr>:
 8007bf4:	b2c9      	uxtb	r1, r1
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfc:	b11a      	cbz	r2, 8007c06 <strchr+0x12>
 8007bfe:	428a      	cmp	r2, r1
 8007c00:	d1f9      	bne.n	8007bf6 <strchr+0x2>
 8007c02:	4618      	mov	r0, r3
 8007c04:	4770      	bx	lr
 8007c06:	2900      	cmp	r1, #0
 8007c08:	bf18      	it	ne
 8007c0a:	2300      	movne	r3, #0
 8007c0c:	e7f9      	b.n	8007c02 <strchr+0xe>

08007c0e <strcpy>:
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c14:	f803 2b01 	strb.w	r2, [r3], #1
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	d1f9      	bne.n	8007c10 <strcpy+0x2>
 8007c1c:	4770      	bx	lr

08007c1e <strstr>:
 8007c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c20:	7803      	ldrb	r3, [r0, #0]
 8007c22:	b17b      	cbz	r3, 8007c44 <strstr+0x26>
 8007c24:	4604      	mov	r4, r0
 8007c26:	7823      	ldrb	r3, [r4, #0]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	1c66      	adds	r6, r4, #1
 8007c2c:	b17b      	cbz	r3, 8007c4e <strstr+0x30>
 8007c2e:	1e4a      	subs	r2, r1, #1
 8007c30:	1e63      	subs	r3, r4, #1
 8007c32:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007c36:	b14d      	cbz	r5, 8007c4c <strstr+0x2e>
 8007c38:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007c3c:	4634      	mov	r4, r6
 8007c3e:	42af      	cmp	r7, r5
 8007c40:	d0f7      	beq.n	8007c32 <strstr+0x14>
 8007c42:	e7f0      	b.n	8007c26 <strstr+0x8>
 8007c44:	780b      	ldrb	r3, [r1, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bf18      	it	ne
 8007c4a:	2000      	movne	r0, #0
 8007c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	e7fc      	b.n	8007c4c <strstr+0x2e>

08007c52 <sulp>:
 8007c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	460f      	mov	r7, r1
 8007c58:	4690      	mov	r8, r2
 8007c5a:	f001 fe17 	bl	800988c <__ulp>
 8007c5e:	4604      	mov	r4, r0
 8007c60:	460d      	mov	r5, r1
 8007c62:	f1b8 0f00 	cmp.w	r8, #0
 8007c66:	d011      	beq.n	8007c8c <sulp+0x3a>
 8007c68:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007c6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dd0b      	ble.n	8007c8c <sulp+0x3a>
 8007c74:	2400      	movs	r4, #0
 8007c76:	051b      	lsls	r3, r3, #20
 8007c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c7c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c80:	4622      	mov	r2, r4
 8007c82:	462b      	mov	r3, r5
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	4629      	mov	r1, r5
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c94:	0000      	movs	r0, r0
	...

08007c98 <_strtod_l>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	461f      	mov	r7, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	b0a1      	sub	sp, #132	; 0x84
 8007ca2:	4683      	mov	fp, r0
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	460e      	mov	r6, r1
 8007ca8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007caa:	931c      	str	r3, [sp, #112]	; 0x70
 8007cac:	f001 fb05 	bl	80092ba <__localeconv_l>
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	6800      	ldr	r0, [r0, #0]
 8007cb4:	f7f8 fa4c 	bl	8000150 <strlen>
 8007cb8:	f04f 0900 	mov.w	r9, #0
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	f04f 0a00 	mov.w	sl, #0
 8007cc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8007cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	2a0d      	cmp	r2, #13
 8007cca:	d832      	bhi.n	8007d32 <_strtod_l+0x9a>
 8007ccc:	2a09      	cmp	r2, #9
 8007cce:	d236      	bcs.n	8007d3e <_strtod_l+0xa6>
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	d03e      	beq.n	8007d52 <_strtod_l+0xba>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8007cd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007cda:	782b      	ldrb	r3, [r5, #0]
 8007cdc:	2b30      	cmp	r3, #48	; 0x30
 8007cde:	f040 80ac 	bne.w	8007e3a <_strtod_l+0x1a2>
 8007ce2:	786b      	ldrb	r3, [r5, #1]
 8007ce4:	2b58      	cmp	r3, #88	; 0x58
 8007ce6:	d001      	beq.n	8007cec <_strtod_l+0x54>
 8007ce8:	2b78      	cmp	r3, #120	; 0x78
 8007cea:	d167      	bne.n	8007dbc <_strtod_l+0x124>
 8007cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cee:	9702      	str	r7, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	ab1c      	add	r3, sp, #112	; 0x70
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4a89      	ldr	r2, [pc, #548]	; (8007f1c <_strtod_l+0x284>)
 8007cf8:	ab1d      	add	r3, sp, #116	; 0x74
 8007cfa:	a91b      	add	r1, sp, #108	; 0x6c
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	f001 f801 	bl	8008d04 <__gethex>
 8007d02:	f010 0407 	ands.w	r4, r0, #7
 8007d06:	4606      	mov	r6, r0
 8007d08:	d005      	beq.n	8007d16 <_strtod_l+0x7e>
 8007d0a:	2c06      	cmp	r4, #6
 8007d0c:	d12b      	bne.n	8007d66 <_strtod_l+0xce>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	3501      	adds	r5, #1
 8007d12:	951b      	str	r5, [sp, #108]	; 0x6c
 8007d14:	930d      	str	r3, [sp, #52]	; 0x34
 8007d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 85a6 	bne.w	800886a <_strtod_l+0xbd2>
 8007d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d20:	b1e3      	cbz	r3, 8007d5c <_strtod_l+0xc4>
 8007d22:	464a      	mov	r2, r9
 8007d24:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	b021      	add	sp, #132	; 0x84
 8007d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d32:	2a2b      	cmp	r2, #43	; 0x2b
 8007d34:	d015      	beq.n	8007d62 <_strtod_l+0xca>
 8007d36:	2a2d      	cmp	r2, #45	; 0x2d
 8007d38:	d004      	beq.n	8007d44 <_strtod_l+0xac>
 8007d3a:	2a20      	cmp	r2, #32
 8007d3c:	d1ca      	bne.n	8007cd4 <_strtod_l+0x3c>
 8007d3e:	3301      	adds	r3, #1
 8007d40:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d42:	e7bf      	b.n	8007cc4 <_strtod_l+0x2c>
 8007d44:	2201      	movs	r2, #1
 8007d46:	920d      	str	r2, [sp, #52]	; 0x34
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1c2      	bne.n	8007cd8 <_strtod_l+0x40>
 8007d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d54:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f040 8585 	bne.w	8008866 <_strtod_l+0xbce>
 8007d5c:	464a      	mov	r2, r9
 8007d5e:	4653      	mov	r3, sl
 8007d60:	e7e2      	b.n	8007d28 <_strtod_l+0x90>
 8007d62:	2200      	movs	r2, #0
 8007d64:	e7ef      	b.n	8007d46 <_strtod_l+0xae>
 8007d66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d68:	b13a      	cbz	r2, 8007d7a <_strtod_l+0xe2>
 8007d6a:	2135      	movs	r1, #53	; 0x35
 8007d6c:	a81e      	add	r0, sp, #120	; 0x78
 8007d6e:	f001 fe9d 	bl	8009aac <__copybits>
 8007d72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d74:	4658      	mov	r0, fp
 8007d76:	f001 faf3 	bl	8009360 <_Bfree>
 8007d7a:	3c01      	subs	r4, #1
 8007d7c:	2c04      	cmp	r4, #4
 8007d7e:	d806      	bhi.n	8007d8e <_strtod_l+0xf6>
 8007d80:	e8df f004 	tbb	[pc, r4]
 8007d84:	1714030a 	.word	0x1714030a
 8007d88:	0a          	.byte	0x0a
 8007d89:	00          	.byte	0x00
 8007d8a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007d8e:	0731      	lsls	r1, r6, #28
 8007d90:	d5c1      	bpl.n	8007d16 <_strtod_l+0x7e>
 8007d92:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007d96:	e7be      	b.n	8007d16 <_strtod_l+0x7e>
 8007d98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d9a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007d9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007da6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8007daa:	e7f0      	b.n	8007d8e <_strtod_l+0xf6>
 8007dac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007f20 <_strtod_l+0x288>
 8007db0:	e7ed      	b.n	8007d8e <_strtod_l+0xf6>
 8007db2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007db6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007dba:	e7e8      	b.n	8007d8e <_strtod_l+0xf6>
 8007dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b30      	cmp	r3, #48	; 0x30
 8007dc6:	d0f9      	beq.n	8007dbc <_strtod_l+0x124>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0a4      	beq.n	8007d16 <_strtod_l+0x7e>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	2500      	movs	r5, #0
 8007dd0:	220a      	movs	r2, #10
 8007dd2:	9307      	str	r3, [sp, #28]
 8007dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dd6:	9506      	str	r5, [sp, #24]
 8007dd8:	9308      	str	r3, [sp, #32]
 8007dda:	9504      	str	r5, [sp, #16]
 8007ddc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007dde:	7807      	ldrb	r7, [r0, #0]
 8007de0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007de4:	b2d9      	uxtb	r1, r3
 8007de6:	2909      	cmp	r1, #9
 8007de8:	d929      	bls.n	8007e3e <_strtod_l+0x1a6>
 8007dea:	4622      	mov	r2, r4
 8007dec:	f8d8 1000 	ldr.w	r1, [r8]
 8007df0:	f002 fa10 	bl	800a214 <strncmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d031      	beq.n	8007e5c <_strtod_l+0x1c4>
 8007df8:	2000      	movs	r0, #0
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	9c04      	ldr	r4, [sp, #16]
 8007e00:	9005      	str	r0, [sp, #20]
 8007e02:	2b65      	cmp	r3, #101	; 0x65
 8007e04:	d001      	beq.n	8007e0a <_strtod_l+0x172>
 8007e06:	2b45      	cmp	r3, #69	; 0x45
 8007e08:	d114      	bne.n	8007e34 <_strtod_l+0x19c>
 8007e0a:	b924      	cbnz	r4, 8007e16 <_strtod_l+0x17e>
 8007e0c:	b910      	cbnz	r0, 8007e14 <_strtod_l+0x17c>
 8007e0e:	9b07      	ldr	r3, [sp, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d09e      	beq.n	8007d52 <_strtod_l+0xba>
 8007e14:	2400      	movs	r4, #0
 8007e16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007e18:	1c73      	adds	r3, r6, #1
 8007e1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e1c:	7873      	ldrb	r3, [r6, #1]
 8007e1e:	2b2b      	cmp	r3, #43	; 0x2b
 8007e20:	d078      	beq.n	8007f14 <_strtod_l+0x27c>
 8007e22:	2b2d      	cmp	r3, #45	; 0x2d
 8007e24:	d070      	beq.n	8007f08 <_strtod_l+0x270>
 8007e26:	f04f 0c00 	mov.w	ip, #0
 8007e2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007e2e:	2f09      	cmp	r7, #9
 8007e30:	d97c      	bls.n	8007f2c <_strtod_l+0x294>
 8007e32:	961b      	str	r6, [sp, #108]	; 0x6c
 8007e34:	f04f 0e00 	mov.w	lr, #0
 8007e38:	e09a      	b.n	8007f70 <_strtod_l+0x2d8>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e7c7      	b.n	8007dce <_strtod_l+0x136>
 8007e3e:	9904      	ldr	r1, [sp, #16]
 8007e40:	3001      	adds	r0, #1
 8007e42:	2908      	cmp	r1, #8
 8007e44:	bfd7      	itett	le
 8007e46:	9906      	ldrle	r1, [sp, #24]
 8007e48:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007e4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e50:	9306      	strle	r3, [sp, #24]
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	901b      	str	r0, [sp, #108]	; 0x6c
 8007e56:	3301      	adds	r3, #1
 8007e58:	9304      	str	r3, [sp, #16]
 8007e5a:	e7bf      	b.n	8007ddc <_strtod_l+0x144>
 8007e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e5e:	191a      	adds	r2, r3, r4
 8007e60:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e62:	9a04      	ldr	r2, [sp, #16]
 8007e64:	5d1b      	ldrb	r3, [r3, r4]
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	d037      	beq.n	8007eda <_strtod_l+0x242>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	9c04      	ldr	r4, [sp, #16]
 8007e6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007e72:	2909      	cmp	r1, #9
 8007e74:	d913      	bls.n	8007e9e <_strtod_l+0x206>
 8007e76:	2101      	movs	r1, #1
 8007e78:	9105      	str	r1, [sp, #20]
 8007e7a:	e7c2      	b.n	8007e02 <_strtod_l+0x16a>
 8007e7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e7e:	3001      	adds	r0, #1
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	d0f8      	beq.n	8007e7c <_strtod_l+0x1e4>
 8007e8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007e8e:	2a08      	cmp	r2, #8
 8007e90:	f200 84f0 	bhi.w	8008874 <_strtod_l+0xbdc>
 8007e94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e96:	9208      	str	r2, [sp, #32]
 8007e98:	4602      	mov	r2, r0
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007ea2:	f100 0101 	add.w	r1, r0, #1
 8007ea6:	d012      	beq.n	8007ece <_strtod_l+0x236>
 8007ea8:	440a      	add	r2, r1
 8007eaa:	270a      	movs	r7, #10
 8007eac:	4621      	mov	r1, r4
 8007eae:	eb00 0c04 	add.w	ip, r0, r4
 8007eb2:	458c      	cmp	ip, r1
 8007eb4:	d113      	bne.n	8007ede <_strtod_l+0x246>
 8007eb6:	1821      	adds	r1, r4, r0
 8007eb8:	2908      	cmp	r1, #8
 8007eba:	f104 0401 	add.w	r4, r4, #1
 8007ebe:	4404      	add	r4, r0
 8007ec0:	dc19      	bgt.n	8007ef6 <_strtod_l+0x25e>
 8007ec2:	210a      	movs	r1, #10
 8007ec4:	9b06      	ldr	r3, [sp, #24]
 8007ec6:	fb01 e303 	mla	r3, r1, r3, lr
 8007eca:	9306      	str	r3, [sp, #24]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ed0:	1c58      	adds	r0, r3, #1
 8007ed2:	901b      	str	r0, [sp, #108]	; 0x6c
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	e7c9      	b.n	8007e6e <_strtod_l+0x1d6>
 8007eda:	9804      	ldr	r0, [sp, #16]
 8007edc:	e7d3      	b.n	8007e86 <_strtod_l+0x1ee>
 8007ede:	2908      	cmp	r1, #8
 8007ee0:	f101 0101 	add.w	r1, r1, #1
 8007ee4:	dc03      	bgt.n	8007eee <_strtod_l+0x256>
 8007ee6:	9b06      	ldr	r3, [sp, #24]
 8007ee8:	437b      	muls	r3, r7
 8007eea:	9306      	str	r3, [sp, #24]
 8007eec:	e7e1      	b.n	8007eb2 <_strtod_l+0x21a>
 8007eee:	2910      	cmp	r1, #16
 8007ef0:	bfd8      	it	le
 8007ef2:	437d      	mulle	r5, r7
 8007ef4:	e7dd      	b.n	8007eb2 <_strtod_l+0x21a>
 8007ef6:	2c10      	cmp	r4, #16
 8007ef8:	bfdc      	itt	le
 8007efa:	210a      	movle	r1, #10
 8007efc:	fb01 e505 	mlale	r5, r1, r5, lr
 8007f00:	e7e4      	b.n	8007ecc <_strtod_l+0x234>
 8007f02:	2301      	movs	r3, #1
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	e781      	b.n	8007e0c <_strtod_l+0x174>
 8007f08:	f04f 0c01 	mov.w	ip, #1
 8007f0c:	1cb3      	adds	r3, r6, #2
 8007f0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f10:	78b3      	ldrb	r3, [r6, #2]
 8007f12:	e78a      	b.n	8007e2a <_strtod_l+0x192>
 8007f14:	f04f 0c00 	mov.w	ip, #0
 8007f18:	e7f8      	b.n	8007f0c <_strtod_l+0x274>
 8007f1a:	bf00      	nop
 8007f1c:	0800b98c 	.word	0x0800b98c
 8007f20:	7ff00000 	.word	0x7ff00000
 8007f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f26:	1c5f      	adds	r7, r3, #1
 8007f28:	971b      	str	r7, [sp, #108]	; 0x6c
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b30      	cmp	r3, #48	; 0x30
 8007f2e:	d0f9      	beq.n	8007f24 <_strtod_l+0x28c>
 8007f30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007f34:	2f08      	cmp	r7, #8
 8007f36:	f63f af7d 	bhi.w	8007e34 <_strtod_l+0x19c>
 8007f3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f40:	9309      	str	r3, [sp, #36]	; 0x24
 8007f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f44:	1c5f      	adds	r7, r3, #1
 8007f46:	971b      	str	r7, [sp, #108]	; 0x6c
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007f4e:	f1b8 0f09 	cmp.w	r8, #9
 8007f52:	d937      	bls.n	8007fc4 <_strtod_l+0x32c>
 8007f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f56:	1a7f      	subs	r7, r7, r1
 8007f58:	2f08      	cmp	r7, #8
 8007f5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007f5e:	dc37      	bgt.n	8007fd0 <_strtod_l+0x338>
 8007f60:	45be      	cmp	lr, r7
 8007f62:	bfa8      	it	ge
 8007f64:	46be      	movge	lr, r7
 8007f66:	f1bc 0f00 	cmp.w	ip, #0
 8007f6a:	d001      	beq.n	8007f70 <_strtod_l+0x2d8>
 8007f6c:	f1ce 0e00 	rsb	lr, lr, #0
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d151      	bne.n	8008018 <_strtod_l+0x380>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f47f aece 	bne.w	8007d16 <_strtod_l+0x7e>
 8007f7a:	9a07      	ldr	r2, [sp, #28]
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	f47f aeca 	bne.w	8007d16 <_strtod_l+0x7e>
 8007f82:	9a05      	ldr	r2, [sp, #20]
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	f47f aee4 	bne.w	8007d52 <_strtod_l+0xba>
 8007f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8007f8c:	d027      	beq.n	8007fde <_strtod_l+0x346>
 8007f8e:	dc21      	bgt.n	8007fd4 <_strtod_l+0x33c>
 8007f90:	2b49      	cmp	r3, #73	; 0x49
 8007f92:	f47f aede 	bne.w	8007d52 <_strtod_l+0xba>
 8007f96:	49a4      	ldr	r1, [pc, #656]	; (8008228 <_strtod_l+0x590>)
 8007f98:	a81b      	add	r0, sp, #108	; 0x6c
 8007f9a:	f001 f8e7 	bl	800916c <__match>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f43f aed7 	beq.w	8007d52 <_strtod_l+0xba>
 8007fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fa6:	49a1      	ldr	r1, [pc, #644]	; (800822c <_strtod_l+0x594>)
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	a81b      	add	r0, sp, #108	; 0x6c
 8007fac:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fae:	f001 f8dd 	bl	800916c <__match>
 8007fb2:	b910      	cbnz	r0, 8007fba <_strtod_l+0x322>
 8007fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008240 <_strtod_l+0x5a8>
 8007fbe:	f04f 0900 	mov.w	r9, #0
 8007fc2:	e6a8      	b.n	8007d16 <_strtod_l+0x7e>
 8007fc4:	210a      	movs	r1, #10
 8007fc6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007fca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007fce:	e7b8      	b.n	8007f42 <_strtod_l+0x2aa>
 8007fd0:	46be      	mov	lr, r7
 8007fd2:	e7c8      	b.n	8007f66 <_strtod_l+0x2ce>
 8007fd4:	2b69      	cmp	r3, #105	; 0x69
 8007fd6:	d0de      	beq.n	8007f96 <_strtod_l+0x2fe>
 8007fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8007fda:	f47f aeba 	bne.w	8007d52 <_strtod_l+0xba>
 8007fde:	4994      	ldr	r1, [pc, #592]	; (8008230 <_strtod_l+0x598>)
 8007fe0:	a81b      	add	r0, sp, #108	; 0x6c
 8007fe2:	f001 f8c3 	bl	800916c <__match>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f43f aeb3 	beq.w	8007d52 <_strtod_l+0xba>
 8007fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b28      	cmp	r3, #40	; 0x28
 8007ff2:	d10e      	bne.n	8008012 <_strtod_l+0x37a>
 8007ff4:	aa1e      	add	r2, sp, #120	; 0x78
 8007ff6:	498f      	ldr	r1, [pc, #572]	; (8008234 <_strtod_l+0x59c>)
 8007ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8007ffa:	f001 f8cb 	bl	8009194 <__hexnan>
 8007ffe:	2805      	cmp	r0, #5
 8008000:	d107      	bne.n	8008012 <_strtod_l+0x37a>
 8008002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008004:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008008:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800800c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008010:	e681      	b.n	8007d16 <_strtod_l+0x7e>
 8008012:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008248 <_strtod_l+0x5b0>
 8008016:	e7d2      	b.n	8007fbe <_strtod_l+0x326>
 8008018:	ebae 0302 	sub.w	r3, lr, r2
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	9806      	ldr	r0, [sp, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	bf08      	it	eq
 8008026:	4623      	moveq	r3, r4
 8008028:	2c10      	cmp	r4, #16
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	46a0      	mov	r8, r4
 800802e:	bfa8      	it	ge
 8008030:	f04f 0810 	movge.w	r8, #16
 8008034:	f7f8 f9d6 	bl	80003e4 <__aeabi_ui2d>
 8008038:	2c09      	cmp	r4, #9
 800803a:	4681      	mov	r9, r0
 800803c:	468a      	mov	sl, r1
 800803e:	dc13      	bgt.n	8008068 <_strtod_l+0x3d0>
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f43f ae67 	beq.w	8007d16 <_strtod_l+0x7e>
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	dd7e      	ble.n	800814a <_strtod_l+0x4b2>
 800804c:	2b16      	cmp	r3, #22
 800804e:	dc65      	bgt.n	800811c <_strtod_l+0x484>
 8008050:	4a79      	ldr	r2, [pc, #484]	; (8008238 <_strtod_l+0x5a0>)
 8008052:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008056:	464a      	mov	r2, r9
 8008058:	e9de 0100 	ldrd	r0, r1, [lr]
 800805c:	4653      	mov	r3, sl
 800805e:	f7f8 fa3b 	bl	80004d8 <__aeabi_dmul>
 8008062:	4681      	mov	r9, r0
 8008064:	468a      	mov	sl, r1
 8008066:	e656      	b.n	8007d16 <_strtod_l+0x7e>
 8008068:	4b73      	ldr	r3, [pc, #460]	; (8008238 <_strtod_l+0x5a0>)
 800806a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800806e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008072:	f7f8 fa31 	bl	80004d8 <__aeabi_dmul>
 8008076:	4606      	mov	r6, r0
 8008078:	4628      	mov	r0, r5
 800807a:	460f      	mov	r7, r1
 800807c:	f7f8 f9b2 	bl	80003e4 <__aeabi_ui2d>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 f870 	bl	800016c <__adddf3>
 800808c:	2c0f      	cmp	r4, #15
 800808e:	4681      	mov	r9, r0
 8008090:	468a      	mov	sl, r1
 8008092:	ddd5      	ble.n	8008040 <_strtod_l+0x3a8>
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	eba4 0808 	sub.w	r8, r4, r8
 800809a:	4498      	add	r8, r3
 800809c:	f1b8 0f00 	cmp.w	r8, #0
 80080a0:	f340 809a 	ble.w	80081d8 <_strtod_l+0x540>
 80080a4:	f018 030f 	ands.w	r3, r8, #15
 80080a8:	d00a      	beq.n	80080c0 <_strtod_l+0x428>
 80080aa:	4963      	ldr	r1, [pc, #396]	; (8008238 <_strtod_l+0x5a0>)
 80080ac:	464a      	mov	r2, r9
 80080ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b6:	4653      	mov	r3, sl
 80080b8:	f7f8 fa0e 	bl	80004d8 <__aeabi_dmul>
 80080bc:	4681      	mov	r9, r0
 80080be:	468a      	mov	sl, r1
 80080c0:	f038 080f 	bics.w	r8, r8, #15
 80080c4:	d077      	beq.n	80081b6 <_strtod_l+0x51e>
 80080c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80080ca:	dd4b      	ble.n	8008164 <_strtod_l+0x4cc>
 80080cc:	f04f 0800 	mov.w	r8, #0
 80080d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80080d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80080d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80080dc:	2322      	movs	r3, #34	; 0x22
 80080de:	f04f 0900 	mov.w	r9, #0
 80080e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008240 <_strtod_l+0x5a8>
 80080e6:	f8cb 3000 	str.w	r3, [fp]
 80080ea:	9b08      	ldr	r3, [sp, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f43f ae12 	beq.w	8007d16 <_strtod_l+0x7e>
 80080f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080f4:	4658      	mov	r0, fp
 80080f6:	f001 f933 	bl	8009360 <_Bfree>
 80080fa:	9906      	ldr	r1, [sp, #24]
 80080fc:	4658      	mov	r0, fp
 80080fe:	f001 f92f 	bl	8009360 <_Bfree>
 8008102:	9904      	ldr	r1, [sp, #16]
 8008104:	4658      	mov	r0, fp
 8008106:	f001 f92b 	bl	8009360 <_Bfree>
 800810a:	9908      	ldr	r1, [sp, #32]
 800810c:	4658      	mov	r0, fp
 800810e:	f001 f927 	bl	8009360 <_Bfree>
 8008112:	4641      	mov	r1, r8
 8008114:	4658      	mov	r0, fp
 8008116:	f001 f923 	bl	8009360 <_Bfree>
 800811a:	e5fc      	b.n	8007d16 <_strtod_l+0x7e>
 800811c:	9a07      	ldr	r2, [sp, #28]
 800811e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008122:	4293      	cmp	r3, r2
 8008124:	dbb6      	blt.n	8008094 <_strtod_l+0x3fc>
 8008126:	4d44      	ldr	r5, [pc, #272]	; (8008238 <_strtod_l+0x5a0>)
 8008128:	f1c4 040f 	rsb	r4, r4, #15
 800812c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008130:	464a      	mov	r2, r9
 8008132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008136:	4653      	mov	r3, sl
 8008138:	f7f8 f9ce 	bl	80004d8 <__aeabi_dmul>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	1b1c      	subs	r4, r3, r4
 8008140:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008144:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008148:	e789      	b.n	800805e <_strtod_l+0x3c6>
 800814a:	f113 0f16 	cmn.w	r3, #22
 800814e:	dba1      	blt.n	8008094 <_strtod_l+0x3fc>
 8008150:	4a39      	ldr	r2, [pc, #228]	; (8008238 <_strtod_l+0x5a0>)
 8008152:	4648      	mov	r0, r9
 8008154:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008158:	e9d2 2300 	ldrd	r2, r3, [r2]
 800815c:	4651      	mov	r1, sl
 800815e:	f7f8 fae5 	bl	800072c <__aeabi_ddiv>
 8008162:	e77e      	b.n	8008062 <_strtod_l+0x3ca>
 8008164:	2300      	movs	r3, #0
 8008166:	4648      	mov	r0, r9
 8008168:	4651      	mov	r1, sl
 800816a:	461d      	mov	r5, r3
 800816c:	4e33      	ldr	r6, [pc, #204]	; (800823c <_strtod_l+0x5a4>)
 800816e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008172:	f1b8 0f01 	cmp.w	r8, #1
 8008176:	dc21      	bgt.n	80081bc <_strtod_l+0x524>
 8008178:	b10b      	cbz	r3, 800817e <_strtod_l+0x4e6>
 800817a:	4681      	mov	r9, r0
 800817c:	468a      	mov	sl, r1
 800817e:	4b2f      	ldr	r3, [pc, #188]	; (800823c <_strtod_l+0x5a4>)
 8008180:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008184:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008188:	464a      	mov	r2, r9
 800818a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800818e:	4653      	mov	r3, sl
 8008190:	f7f8 f9a2 	bl	80004d8 <__aeabi_dmul>
 8008194:	4b2a      	ldr	r3, [pc, #168]	; (8008240 <_strtod_l+0x5a8>)
 8008196:	460a      	mov	r2, r1
 8008198:	400b      	ands	r3, r1
 800819a:	492a      	ldr	r1, [pc, #168]	; (8008244 <_strtod_l+0x5ac>)
 800819c:	4681      	mov	r9, r0
 800819e:	428b      	cmp	r3, r1
 80081a0:	d894      	bhi.n	80080cc <_strtod_l+0x434>
 80081a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081a6:	428b      	cmp	r3, r1
 80081a8:	bf86      	itte	hi
 80081aa:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80081ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800824c <_strtod_l+0x5b4>
 80081b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80081b6:	2300      	movs	r3, #0
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	e07b      	b.n	80082b4 <_strtod_l+0x61c>
 80081bc:	f018 0f01 	tst.w	r8, #1
 80081c0:	d006      	beq.n	80081d0 <_strtod_l+0x538>
 80081c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f8 f985 	bl	80004d8 <__aeabi_dmul>
 80081ce:	2301      	movs	r3, #1
 80081d0:	3501      	adds	r5, #1
 80081d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081d6:	e7cc      	b.n	8008172 <_strtod_l+0x4da>
 80081d8:	d0ed      	beq.n	80081b6 <_strtod_l+0x51e>
 80081da:	f1c8 0800 	rsb	r8, r8, #0
 80081de:	f018 020f 	ands.w	r2, r8, #15
 80081e2:	d00a      	beq.n	80081fa <_strtod_l+0x562>
 80081e4:	4b14      	ldr	r3, [pc, #80]	; (8008238 <_strtod_l+0x5a0>)
 80081e6:	4648      	mov	r0, r9
 80081e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ec:	4651      	mov	r1, sl
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 fa9b 	bl	800072c <__aeabi_ddiv>
 80081f6:	4681      	mov	r9, r0
 80081f8:	468a      	mov	sl, r1
 80081fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081fe:	d0da      	beq.n	80081b6 <_strtod_l+0x51e>
 8008200:	f1b8 0f1f 	cmp.w	r8, #31
 8008204:	dd24      	ble.n	8008250 <_strtod_l+0x5b8>
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	f8cd 8010 	str.w	r8, [sp, #16]
 800820e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008212:	f8cd 8018 	str.w	r8, [sp, #24]
 8008216:	2322      	movs	r3, #34	; 0x22
 8008218:	f04f 0900 	mov.w	r9, #0
 800821c:	f04f 0a00 	mov.w	sl, #0
 8008220:	f8cb 3000 	str.w	r3, [fp]
 8008224:	e761      	b.n	80080ea <_strtod_l+0x452>
 8008226:	bf00      	nop
 8008228:	0800b984 	.word	0x0800b984
 800822c:	0800bc23 	.word	0x0800bc23
 8008230:	0800b987 	.word	0x0800b987
 8008234:	0800b9a0 	.word	0x0800b9a0
 8008238:	0800ba18 	.word	0x0800ba18
 800823c:	0800b9f0 	.word	0x0800b9f0
 8008240:	7ff00000 	.word	0x7ff00000
 8008244:	7ca00000 	.word	0x7ca00000
 8008248:	fff80000 	.word	0xfff80000
 800824c:	7fefffff 	.word	0x7fefffff
 8008250:	f018 0310 	ands.w	r3, r8, #16
 8008254:	bf18      	it	ne
 8008256:	236a      	movne	r3, #106	; 0x6a
 8008258:	4648      	mov	r0, r9
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	4651      	mov	r1, sl
 800825e:	2300      	movs	r3, #0
 8008260:	4da1      	ldr	r5, [pc, #644]	; (80084e8 <_strtod_l+0x850>)
 8008262:	f1b8 0f00 	cmp.w	r8, #0
 8008266:	f300 8113 	bgt.w	8008490 <_strtod_l+0x7f8>
 800826a:	b10b      	cbz	r3, 8008270 <_strtod_l+0x5d8>
 800826c:	4681      	mov	r9, r0
 800826e:	468a      	mov	sl, r1
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	b1bb      	cbz	r3, 80082a4 <_strtod_l+0x60c>
 8008274:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800827c:	2b00      	cmp	r3, #0
 800827e:	4651      	mov	r1, sl
 8008280:	dd10      	ble.n	80082a4 <_strtod_l+0x60c>
 8008282:	2b1f      	cmp	r3, #31
 8008284:	f340 8110 	ble.w	80084a8 <_strtod_l+0x810>
 8008288:	2b34      	cmp	r3, #52	; 0x34
 800828a:	bfd8      	it	le
 800828c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008290:	f04f 0900 	mov.w	r9, #0
 8008294:	bfcf      	iteee	gt
 8008296:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800829a:	3b20      	suble	r3, #32
 800829c:	fa02 f303 	lslle.w	r3, r2, r3
 80082a0:	ea03 0a01 	andle.w	sl, r3, r1
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	4648      	mov	r0, r9
 80082aa:	4651      	mov	r1, sl
 80082ac:	f7f8 fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d1a8      	bne.n	8008206 <_strtod_l+0x56e>
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	9a04      	ldr	r2, [sp, #16]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	9908      	ldr	r1, [sp, #32]
 80082bc:	4623      	mov	r3, r4
 80082be:	4658      	mov	r0, fp
 80082c0:	f001 f8a0 	bl	8009404 <__s2b>
 80082c4:	9008      	str	r0, [sp, #32]
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f43f af00 	beq.w	80080cc <_strtod_l+0x434>
 80082cc:	9a07      	ldr	r2, [sp, #28]
 80082ce:	9b07      	ldr	r3, [sp, #28]
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	f1c3 0300 	rsb	r3, r3, #0
 80082d6:	bfa8      	it	ge
 80082d8:	2300      	movge	r3, #0
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	930e      	str	r3, [sp, #56]	; 0x38
 80082e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80082e4:	9316      	str	r3, [sp, #88]	; 0x58
 80082e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	4658      	mov	r0, fp
 80082ee:	6859      	ldr	r1, [r3, #4]
 80082f0:	f001 f802 	bl	80092f8 <_Balloc>
 80082f4:	9006      	str	r0, [sp, #24]
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f aef0 	beq.w	80080dc <_strtod_l+0x444>
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	300c      	adds	r0, #12
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	f103 010c 	add.w	r1, r3, #12
 8008306:	3202      	adds	r2, #2
 8008308:	0092      	lsls	r2, r2, #2
 800830a:	f000 ffea 	bl	80092e2 <memcpy>
 800830e:	ab1e      	add	r3, sp, #120	; 0x78
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	ab1d      	add	r3, sp, #116	; 0x74
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	464a      	mov	r2, r9
 8008318:	4653      	mov	r3, sl
 800831a:	4658      	mov	r0, fp
 800831c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008320:	f001 fb2a 	bl	8009978 <__d2b>
 8008324:	901c      	str	r0, [sp, #112]	; 0x70
 8008326:	2800      	cmp	r0, #0
 8008328:	f43f aed8 	beq.w	80080dc <_strtod_l+0x444>
 800832c:	2101      	movs	r1, #1
 800832e:	4658      	mov	r0, fp
 8008330:	f001 f8f4 	bl	800951c <__i2b>
 8008334:	9004      	str	r0, [sp, #16]
 8008336:	4603      	mov	r3, r0
 8008338:	2800      	cmp	r0, #0
 800833a:	f43f aecf 	beq.w	80080dc <_strtod_l+0x444>
 800833e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008340:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008342:	2d00      	cmp	r5, #0
 8008344:	bfab      	itete	ge
 8008346:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008348:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800834a:	18ee      	addge	r6, r5, r3
 800834c:	1b5c      	sublt	r4, r3, r5
 800834e:	9b05      	ldr	r3, [sp, #20]
 8008350:	bfa8      	it	ge
 8008352:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008354:	eba5 0503 	sub.w	r5, r5, r3
 8008358:	4415      	add	r5, r2
 800835a:	4b64      	ldr	r3, [pc, #400]	; (80084ec <_strtod_l+0x854>)
 800835c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008360:	bfb8      	it	lt
 8008362:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008364:	429d      	cmp	r5, r3
 8008366:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800836a:	f280 80af 	bge.w	80084cc <_strtod_l+0x834>
 800836e:	1b5b      	subs	r3, r3, r5
 8008370:	2b1f      	cmp	r3, #31
 8008372:	eba2 0203 	sub.w	r2, r2, r3
 8008376:	f04f 0701 	mov.w	r7, #1
 800837a:	f300 809c 	bgt.w	80084b6 <_strtod_l+0x81e>
 800837e:	2500      	movs	r5, #0
 8008380:	fa07 f303 	lsl.w	r3, r7, r3
 8008384:	930f      	str	r3, [sp, #60]	; 0x3c
 8008386:	18b7      	adds	r7, r6, r2
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	42be      	cmp	r6, r7
 800838c:	4414      	add	r4, r2
 800838e:	441c      	add	r4, r3
 8008390:	4633      	mov	r3, r6
 8008392:	bfa8      	it	ge
 8008394:	463b      	movge	r3, r7
 8008396:	42a3      	cmp	r3, r4
 8008398:	bfa8      	it	ge
 800839a:	4623      	movge	r3, r4
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfc2      	ittt	gt
 80083a0:	1aff      	subgt	r7, r7, r3
 80083a2:	1ae4      	subgt	r4, r4, r3
 80083a4:	1af6      	subgt	r6, r6, r3
 80083a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a8:	b1bb      	cbz	r3, 80083da <_strtod_l+0x742>
 80083aa:	461a      	mov	r2, r3
 80083ac:	9904      	ldr	r1, [sp, #16]
 80083ae:	4658      	mov	r0, fp
 80083b0:	f001 f952 	bl	8009658 <__pow5mult>
 80083b4:	9004      	str	r0, [sp, #16]
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f43f ae90 	beq.w	80080dc <_strtod_l+0x444>
 80083bc:	4601      	mov	r1, r0
 80083be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80083c0:	4658      	mov	r0, fp
 80083c2:	f001 f8b4 	bl	800952e <__multiply>
 80083c6:	9009      	str	r0, [sp, #36]	; 0x24
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f43f ae87 	beq.w	80080dc <_strtod_l+0x444>
 80083ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083d0:	4658      	mov	r0, fp
 80083d2:	f000 ffc5 	bl	8009360 <_Bfree>
 80083d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d8:	931c      	str	r3, [sp, #112]	; 0x70
 80083da:	2f00      	cmp	r7, #0
 80083dc:	dc7a      	bgt.n	80084d4 <_strtod_l+0x83c>
 80083de:	9b07      	ldr	r3, [sp, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd08      	ble.n	80083f6 <_strtod_l+0x75e>
 80083e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083e6:	9906      	ldr	r1, [sp, #24]
 80083e8:	4658      	mov	r0, fp
 80083ea:	f001 f935 	bl	8009658 <__pow5mult>
 80083ee:	9006      	str	r0, [sp, #24]
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f43f ae73 	beq.w	80080dc <_strtod_l+0x444>
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	dd08      	ble.n	800840c <_strtod_l+0x774>
 80083fa:	4622      	mov	r2, r4
 80083fc:	9906      	ldr	r1, [sp, #24]
 80083fe:	4658      	mov	r0, fp
 8008400:	f001 f978 	bl	80096f4 <__lshift>
 8008404:	9006      	str	r0, [sp, #24]
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f ae68 	beq.w	80080dc <_strtod_l+0x444>
 800840c:	2e00      	cmp	r6, #0
 800840e:	dd08      	ble.n	8008422 <_strtod_l+0x78a>
 8008410:	4632      	mov	r2, r6
 8008412:	9904      	ldr	r1, [sp, #16]
 8008414:	4658      	mov	r0, fp
 8008416:	f001 f96d 	bl	80096f4 <__lshift>
 800841a:	9004      	str	r0, [sp, #16]
 800841c:	2800      	cmp	r0, #0
 800841e:	f43f ae5d 	beq.w	80080dc <_strtod_l+0x444>
 8008422:	9a06      	ldr	r2, [sp, #24]
 8008424:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008426:	4658      	mov	r0, fp
 8008428:	f001 f9d2 	bl	80097d0 <__mdiff>
 800842c:	4680      	mov	r8, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	f43f ae54 	beq.w	80080dc <_strtod_l+0x444>
 8008434:	2400      	movs	r4, #0
 8008436:	68c3      	ldr	r3, [r0, #12]
 8008438:	9904      	ldr	r1, [sp, #16]
 800843a:	60c4      	str	r4, [r0, #12]
 800843c:	930c      	str	r3, [sp, #48]	; 0x30
 800843e:	f001 f9ad 	bl	800979c <__mcmp>
 8008442:	42a0      	cmp	r0, r4
 8008444:	da54      	bge.n	80084f0 <_strtod_l+0x858>
 8008446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008448:	b9f3      	cbnz	r3, 8008488 <_strtod_l+0x7f0>
 800844a:	f1b9 0f00 	cmp.w	r9, #0
 800844e:	d11b      	bne.n	8008488 <_strtod_l+0x7f0>
 8008450:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008454:	b9c3      	cbnz	r3, 8008488 <_strtod_l+0x7f0>
 8008456:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800845a:	0d1b      	lsrs	r3, r3, #20
 800845c:	051b      	lsls	r3, r3, #20
 800845e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008462:	d911      	bls.n	8008488 <_strtod_l+0x7f0>
 8008464:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008468:	b91b      	cbnz	r3, 8008472 <_strtod_l+0x7da>
 800846a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800846e:	2b01      	cmp	r3, #1
 8008470:	dd0a      	ble.n	8008488 <_strtod_l+0x7f0>
 8008472:	4641      	mov	r1, r8
 8008474:	2201      	movs	r2, #1
 8008476:	4658      	mov	r0, fp
 8008478:	f001 f93c 	bl	80096f4 <__lshift>
 800847c:	9904      	ldr	r1, [sp, #16]
 800847e:	4680      	mov	r8, r0
 8008480:	f001 f98c 	bl	800979c <__mcmp>
 8008484:	2800      	cmp	r0, #0
 8008486:	dc68      	bgt.n	800855a <_strtod_l+0x8c2>
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d172      	bne.n	8008574 <_strtod_l+0x8dc>
 800848e:	e630      	b.n	80080f2 <_strtod_l+0x45a>
 8008490:	f018 0f01 	tst.w	r8, #1
 8008494:	d004      	beq.n	80084a0 <_strtod_l+0x808>
 8008496:	e9d5 2300 	ldrd	r2, r3, [r5]
 800849a:	f7f8 f81d 	bl	80004d8 <__aeabi_dmul>
 800849e:	2301      	movs	r3, #1
 80084a0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084a4:	3508      	adds	r5, #8
 80084a6:	e6dc      	b.n	8008262 <_strtod_l+0x5ca>
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	ea03 0909 	and.w	r9, r3, r9
 80084b4:	e6f6      	b.n	80082a4 <_strtod_l+0x60c>
 80084b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80084ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80084be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80084c2:	35e2      	adds	r5, #226	; 0xe2
 80084c4:	fa07 f505 	lsl.w	r5, r7, r5
 80084c8:	970f      	str	r7, [sp, #60]	; 0x3c
 80084ca:	e75c      	b.n	8008386 <_strtod_l+0x6ee>
 80084cc:	2301      	movs	r3, #1
 80084ce:	2500      	movs	r5, #0
 80084d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d2:	e758      	b.n	8008386 <_strtod_l+0x6ee>
 80084d4:	463a      	mov	r2, r7
 80084d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084d8:	4658      	mov	r0, fp
 80084da:	f001 f90b 	bl	80096f4 <__lshift>
 80084de:	901c      	str	r0, [sp, #112]	; 0x70
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f47f af7c 	bne.w	80083de <_strtod_l+0x746>
 80084e6:	e5f9      	b.n	80080dc <_strtod_l+0x444>
 80084e8:	0800b9b8 	.word	0x0800b9b8
 80084ec:	fffffc02 	.word	0xfffffc02
 80084f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80084f4:	f040 8089 	bne.w	800860a <_strtod_l+0x972>
 80084f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80084fe:	b342      	cbz	r2, 8008552 <_strtod_l+0x8ba>
 8008500:	4aaf      	ldr	r2, [pc, #700]	; (80087c0 <_strtod_l+0xb28>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d156      	bne.n	80085b4 <_strtod_l+0x91c>
 8008506:	9b05      	ldr	r3, [sp, #20]
 8008508:	4648      	mov	r0, r9
 800850a:	b1eb      	cbz	r3, 8008548 <_strtod_l+0x8b0>
 800850c:	4653      	mov	r3, sl
 800850e:	4aad      	ldr	r2, [pc, #692]	; (80087c4 <_strtod_l+0xb2c>)
 8008510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008514:	401a      	ands	r2, r3
 8008516:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800851a:	d818      	bhi.n	800854e <_strtod_l+0x8b6>
 800851c:	0d12      	lsrs	r2, r2, #20
 800851e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008522:	fa01 f303 	lsl.w	r3, r1, r3
 8008526:	4298      	cmp	r0, r3
 8008528:	d144      	bne.n	80085b4 <_strtod_l+0x91c>
 800852a:	4ba7      	ldr	r3, [pc, #668]	; (80087c8 <_strtod_l+0xb30>)
 800852c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852e:	429a      	cmp	r2, r3
 8008530:	d102      	bne.n	8008538 <_strtod_l+0x8a0>
 8008532:	3001      	adds	r0, #1
 8008534:	f43f add2 	beq.w	80080dc <_strtod_l+0x444>
 8008538:	4ba2      	ldr	r3, [pc, #648]	; (80087c4 <_strtod_l+0xb2c>)
 800853a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853c:	f04f 0900 	mov.w	r9, #0
 8008540:	401a      	ands	r2, r3
 8008542:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008546:	e79f      	b.n	8008488 <_strtod_l+0x7f0>
 8008548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800854c:	e7eb      	b.n	8008526 <_strtod_l+0x88e>
 800854e:	460b      	mov	r3, r1
 8008550:	e7e9      	b.n	8008526 <_strtod_l+0x88e>
 8008552:	bb7b      	cbnz	r3, 80085b4 <_strtod_l+0x91c>
 8008554:	f1b9 0f00 	cmp.w	r9, #0
 8008558:	d12c      	bne.n	80085b4 <_strtod_l+0x91c>
 800855a:	9905      	ldr	r1, [sp, #20]
 800855c:	4653      	mov	r3, sl
 800855e:	4a99      	ldr	r2, [pc, #612]	; (80087c4 <_strtod_l+0xb2c>)
 8008560:	b1f1      	cbz	r1, 80085a0 <_strtod_l+0x908>
 8008562:	ea02 010a 	and.w	r1, r2, sl
 8008566:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800856a:	dc19      	bgt.n	80085a0 <_strtod_l+0x908>
 800856c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008570:	f77f ae51 	ble.w	8008216 <_strtod_l+0x57e>
 8008574:	2300      	movs	r3, #0
 8008576:	4a95      	ldr	r2, [pc, #596]	; (80087cc <_strtod_l+0xb34>)
 8008578:	4648      	mov	r0, r9
 800857a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800857e:	4651      	mov	r1, sl
 8008580:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008584:	f7f7 ffa8 	bl	80004d8 <__aeabi_dmul>
 8008588:	4681      	mov	r9, r0
 800858a:	468a      	mov	sl, r1
 800858c:	2900      	cmp	r1, #0
 800858e:	f47f adb0 	bne.w	80080f2 <_strtod_l+0x45a>
 8008592:	2800      	cmp	r0, #0
 8008594:	f47f adad 	bne.w	80080f2 <_strtod_l+0x45a>
 8008598:	2322      	movs	r3, #34	; 0x22
 800859a:	f8cb 3000 	str.w	r3, [fp]
 800859e:	e5a8      	b.n	80080f2 <_strtod_l+0x45a>
 80085a0:	4013      	ands	r3, r2
 80085a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085a6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80085aa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80085ae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80085b2:	e769      	b.n	8008488 <_strtod_l+0x7f0>
 80085b4:	b19d      	cbz	r5, 80085de <_strtod_l+0x946>
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	421d      	tst	r5, r3
 80085ba:	f43f af65 	beq.w	8008488 <_strtod_l+0x7f0>
 80085be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c0:	9a05      	ldr	r2, [sp, #20]
 80085c2:	4648      	mov	r0, r9
 80085c4:	4651      	mov	r1, sl
 80085c6:	b173      	cbz	r3, 80085e6 <_strtod_l+0x94e>
 80085c8:	f7ff fb43 	bl	8007c52 <sulp>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085d4:	f7f7 fdca 	bl	800016c <__adddf3>
 80085d8:	4681      	mov	r9, r0
 80085da:	468a      	mov	sl, r1
 80085dc:	e754      	b.n	8008488 <_strtod_l+0x7f0>
 80085de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e0:	ea13 0f09 	tst.w	r3, r9
 80085e4:	e7e9      	b.n	80085ba <_strtod_l+0x922>
 80085e6:	f7ff fb34 	bl	8007c52 <sulp>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085f2:	f7f7 fdb9 	bl	8000168 <__aeabi_dsub>
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4681      	mov	r9, r0
 80085fc:	468a      	mov	sl, r1
 80085fe:	f7f8 f9d3 	bl	80009a8 <__aeabi_dcmpeq>
 8008602:	2800      	cmp	r0, #0
 8008604:	f47f ae07 	bne.w	8008216 <_strtod_l+0x57e>
 8008608:	e73e      	b.n	8008488 <_strtod_l+0x7f0>
 800860a:	9904      	ldr	r1, [sp, #16]
 800860c:	4640      	mov	r0, r8
 800860e:	f001 fa02 	bl	8009a16 <__ratio>
 8008612:	2200      	movs	r2, #0
 8008614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008618:	4606      	mov	r6, r0
 800861a:	460f      	mov	r7, r1
 800861c:	f7f8 f9d8 	bl	80009d0 <__aeabi_dcmple>
 8008620:	2800      	cmp	r0, #0
 8008622:	d075      	beq.n	8008710 <_strtod_l+0xa78>
 8008624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008626:	2b00      	cmp	r3, #0
 8008628:	d047      	beq.n	80086ba <_strtod_l+0xa22>
 800862a:	2600      	movs	r6, #0
 800862c:	4f68      	ldr	r7, [pc, #416]	; (80087d0 <_strtod_l+0xb38>)
 800862e:	4d68      	ldr	r5, [pc, #416]	; (80087d0 <_strtod_l+0xb38>)
 8008630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008632:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008636:	0d1b      	lsrs	r3, r3, #20
 8008638:	051b      	lsls	r3, r3, #20
 800863a:	930f      	str	r3, [sp, #60]	; 0x3c
 800863c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800863e:	4b65      	ldr	r3, [pc, #404]	; (80087d4 <_strtod_l+0xb3c>)
 8008640:	429a      	cmp	r2, r3
 8008642:	f040 80cf 	bne.w	80087e4 <_strtod_l+0xb4c>
 8008646:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800864a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	4648      	mov	r0, r9
 8008652:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008656:	4651      	mov	r1, sl
 8008658:	f001 f918 	bl	800988c <__ulp>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4630      	mov	r0, r6
 8008662:	4639      	mov	r1, r7
 8008664:	f7f7 ff38 	bl	80004d8 <__aeabi_dmul>
 8008668:	464a      	mov	r2, r9
 800866a:	4653      	mov	r3, sl
 800866c:	f7f7 fd7e 	bl	800016c <__adddf3>
 8008670:	460b      	mov	r3, r1
 8008672:	4954      	ldr	r1, [pc, #336]	; (80087c4 <_strtod_l+0xb2c>)
 8008674:	4a58      	ldr	r2, [pc, #352]	; (80087d8 <_strtod_l+0xb40>)
 8008676:	4019      	ands	r1, r3
 8008678:	4291      	cmp	r1, r2
 800867a:	4681      	mov	r9, r0
 800867c:	d95e      	bls.n	800873c <_strtod_l+0xaa4>
 800867e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008680:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008684:	4293      	cmp	r3, r2
 8008686:	d103      	bne.n	8008690 <_strtod_l+0x9f8>
 8008688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868a:	3301      	adds	r3, #1
 800868c:	f43f ad26 	beq.w	80080dc <_strtod_l+0x444>
 8008690:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008694:	f8df a130 	ldr.w	sl, [pc, #304]	; 80087c8 <_strtod_l+0xb30>
 8008698:	991c      	ldr	r1, [sp, #112]	; 0x70
 800869a:	4658      	mov	r0, fp
 800869c:	f000 fe60 	bl	8009360 <_Bfree>
 80086a0:	9906      	ldr	r1, [sp, #24]
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fe5c 	bl	8009360 <_Bfree>
 80086a8:	9904      	ldr	r1, [sp, #16]
 80086aa:	4658      	mov	r0, fp
 80086ac:	f000 fe58 	bl	8009360 <_Bfree>
 80086b0:	4641      	mov	r1, r8
 80086b2:	4658      	mov	r0, fp
 80086b4:	f000 fe54 	bl	8009360 <_Bfree>
 80086b8:	e617      	b.n	80082ea <_strtod_l+0x652>
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	d119      	bne.n	80086f4 <_strtod_l+0xa5c>
 80086c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c6:	b9e3      	cbnz	r3, 8008702 <_strtod_l+0xa6a>
 80086c8:	2200      	movs	r2, #0
 80086ca:	4b41      	ldr	r3, [pc, #260]	; (80087d0 <_strtod_l+0xb38>)
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f8 f974 	bl	80009bc <__aeabi_dcmplt>
 80086d4:	b9c8      	cbnz	r0, 800870a <_strtod_l+0xa72>
 80086d6:	2200      	movs	r2, #0
 80086d8:	4b40      	ldr	r3, [pc, #256]	; (80087dc <_strtod_l+0xb44>)
 80086da:	4630      	mov	r0, r6
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f7 fefb 	bl	80004d8 <__aeabi_dmul>
 80086e2:	4604      	mov	r4, r0
 80086e4:	460d      	mov	r5, r1
 80086e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80086ea:	9418      	str	r4, [sp, #96]	; 0x60
 80086ec:	9319      	str	r3, [sp, #100]	; 0x64
 80086ee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80086f2:	e79d      	b.n	8008630 <_strtod_l+0x998>
 80086f4:	f1b9 0f01 	cmp.w	r9, #1
 80086f8:	d103      	bne.n	8008702 <_strtod_l+0xa6a>
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f43f ad8a 	beq.w	8008216 <_strtod_l+0x57e>
 8008702:	2600      	movs	r6, #0
 8008704:	4f36      	ldr	r7, [pc, #216]	; (80087e0 <_strtod_l+0xb48>)
 8008706:	2400      	movs	r4, #0
 8008708:	e791      	b.n	800862e <_strtod_l+0x996>
 800870a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800870c:	4d33      	ldr	r5, [pc, #204]	; (80087dc <_strtod_l+0xb44>)
 800870e:	e7ea      	b.n	80086e6 <_strtod_l+0xa4e>
 8008710:	4b32      	ldr	r3, [pc, #200]	; (80087dc <_strtod_l+0xb44>)
 8008712:	2200      	movs	r2, #0
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f7 fede 	bl	80004d8 <__aeabi_dmul>
 800871c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871e:	4604      	mov	r4, r0
 8008720:	460d      	mov	r5, r1
 8008722:	b933      	cbnz	r3, 8008732 <_strtod_l+0xa9a>
 8008724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008728:	9010      	str	r0, [sp, #64]	; 0x40
 800872a:	9311      	str	r3, [sp, #68]	; 0x44
 800872c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008730:	e77e      	b.n	8008630 <_strtod_l+0x998>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800873a:	e7f7      	b.n	800872c <_strtod_l+0xa94>
 800873c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1a8      	bne.n	8008698 <_strtod_l+0xa00>
 8008746:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800874a:	0d1b      	lsrs	r3, r3, #20
 800874c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	429a      	cmp	r2, r3
 8008752:	4656      	mov	r6, sl
 8008754:	d1a0      	bne.n	8008698 <_strtod_l+0xa00>
 8008756:	4629      	mov	r1, r5
 8008758:	4620      	mov	r0, r4
 800875a:	f7f8 f957 	bl	8000a0c <__aeabi_d2iz>
 800875e:	f7f7 fe51 	bl	8000404 <__aeabi_i2d>
 8008762:	460b      	mov	r3, r1
 8008764:	4602      	mov	r2, r0
 8008766:	4629      	mov	r1, r5
 8008768:	4620      	mov	r0, r4
 800876a:	f7f7 fcfd 	bl	8000168 <__aeabi_dsub>
 800876e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008770:	4604      	mov	r4, r0
 8008772:	460d      	mov	r5, r1
 8008774:	b933      	cbnz	r3, 8008784 <_strtod_l+0xaec>
 8008776:	f1b9 0f00 	cmp.w	r9, #0
 800877a:	d103      	bne.n	8008784 <_strtod_l+0xaec>
 800877c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008780:	2e00      	cmp	r6, #0
 8008782:	d06a      	beq.n	800885a <_strtod_l+0xbc2>
 8008784:	a30a      	add	r3, pc, #40	; (adr r3, 80087b0 <_strtod_l+0xb18>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	f7f8 f915 	bl	80009bc <__aeabi_dcmplt>
 8008792:	2800      	cmp	r0, #0
 8008794:	f47f acad 	bne.w	80080f2 <_strtod_l+0x45a>
 8008798:	a307      	add	r3, pc, #28	; (adr r3, 80087b8 <_strtod_l+0xb20>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f8 f929 	bl	80009f8 <__aeabi_dcmpgt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f af76 	beq.w	8008698 <_strtod_l+0xa00>
 80087ac:	e4a1      	b.n	80080f2 <_strtod_l+0x45a>
 80087ae:	bf00      	nop
 80087b0:	94a03595 	.word	0x94a03595
 80087b4:	3fdfffff 	.word	0x3fdfffff
 80087b8:	35afe535 	.word	0x35afe535
 80087bc:	3fe00000 	.word	0x3fe00000
 80087c0:	000fffff 	.word	0x000fffff
 80087c4:	7ff00000 	.word	0x7ff00000
 80087c8:	7fefffff 	.word	0x7fefffff
 80087cc:	39500000 	.word	0x39500000
 80087d0:	3ff00000 	.word	0x3ff00000
 80087d4:	7fe00000 	.word	0x7fe00000
 80087d8:	7c9fffff 	.word	0x7c9fffff
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	bff00000 	.word	0xbff00000
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	b313      	cbz	r3, 800882e <_strtod_l+0xb96>
 80087e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087ee:	d81e      	bhi.n	800882e <_strtod_l+0xb96>
 80087f0:	a325      	add	r3, pc, #148	; (adr r3, 8008888 <_strtod_l+0xbf0>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f8 f8e9 	bl	80009d0 <__aeabi_dcmple>
 80087fe:	b190      	cbz	r0, 8008826 <_strtod_l+0xb8e>
 8008800:	4629      	mov	r1, r5
 8008802:	4620      	mov	r0, r4
 8008804:	f7f8 f92a 	bl	8000a5c <__aeabi_d2uiz>
 8008808:	2800      	cmp	r0, #0
 800880a:	bf08      	it	eq
 800880c:	2001      	moveq	r0, #1
 800880e:	f7f7 fde9 	bl	80003e4 <__aeabi_ui2d>
 8008812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008814:	4604      	mov	r4, r0
 8008816:	460d      	mov	r5, r1
 8008818:	b9d3      	cbnz	r3, 8008850 <_strtod_l+0xbb8>
 800881a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800881e:	9012      	str	r0, [sp, #72]	; 0x48
 8008820:	9313      	str	r3, [sp, #76]	; 0x4c
 8008822:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008828:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800882c:	1a9f      	subs	r7, r3, r2
 800882e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008832:	f001 f82b 	bl	800988c <__ulp>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f7 fe4b 	bl	80004d8 <__aeabi_dmul>
 8008842:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008846:	f7f7 fc91 	bl	800016c <__adddf3>
 800884a:	4681      	mov	r9, r0
 800884c:	468a      	mov	sl, r1
 800884e:	e777      	b.n	8008740 <_strtod_l+0xaa8>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008858:	e7e3      	b.n	8008822 <_strtod_l+0xb8a>
 800885a:	a30d      	add	r3, pc, #52	; (adr r3, 8008890 <_strtod_l+0xbf8>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f8 f8ac 	bl	80009bc <__aeabi_dcmplt>
 8008864:	e79f      	b.n	80087a6 <_strtod_l+0xb0e>
 8008866:	2300      	movs	r3, #0
 8008868:	930d      	str	r3, [sp, #52]	; 0x34
 800886a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800886c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	f7ff ba55 	b.w	8007d1e <_strtod_l+0x86>
 8008874:	2b65      	cmp	r3, #101	; 0x65
 8008876:	f04f 0200 	mov.w	r2, #0
 800887a:	f43f ab42 	beq.w	8007f02 <_strtod_l+0x26a>
 800887e:	2101      	movs	r1, #1
 8008880:	4614      	mov	r4, r2
 8008882:	9105      	str	r1, [sp, #20]
 8008884:	f7ff babf 	b.w	8007e06 <_strtod_l+0x16e>
 8008888:	ffc00000 	.word	0xffc00000
 800888c:	41dfffff 	.word	0x41dfffff
 8008890:	94a03595 	.word	0x94a03595
 8008894:	3fcfffff 	.word	0x3fcfffff

08008898 <strtod>:
 8008898:	4b06      	ldr	r3, [pc, #24]	; (80088b4 <strtod+0x1c>)
 800889a:	b410      	push	{r4}
 800889c:	681c      	ldr	r4, [r3, #0]
 800889e:	4a06      	ldr	r2, [pc, #24]	; (80088b8 <strtod+0x20>)
 80088a0:	6a23      	ldr	r3, [r4, #32]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bf08      	it	eq
 80088a6:	4613      	moveq	r3, r2
 80088a8:	460a      	mov	r2, r1
 80088aa:	4601      	mov	r1, r0
 80088ac:	4620      	mov	r0, r4
 80088ae:	bc10      	pop	{r4}
 80088b0:	f7ff b9f2 	b.w	8007c98 <_strtod_l>
 80088b4:	2000001c 	.word	0x2000001c
 80088b8:	20000080 	.word	0x20000080

080088bc <_strtol_l.isra.0>:
 80088bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c0:	4680      	mov	r8, r0
 80088c2:	4689      	mov	r9, r1
 80088c4:	4692      	mov	sl, r2
 80088c6:	461e      	mov	r6, r3
 80088c8:	460f      	mov	r7, r1
 80088ca:	463d      	mov	r5, r7
 80088cc:	9808      	ldr	r0, [sp, #32]
 80088ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088d2:	f000 fcef 	bl	80092b4 <__locale_ctype_ptr_l>
 80088d6:	4420      	add	r0, r4
 80088d8:	7843      	ldrb	r3, [r0, #1]
 80088da:	f013 0308 	ands.w	r3, r3, #8
 80088de:	d132      	bne.n	8008946 <_strtol_l.isra.0+0x8a>
 80088e0:	2c2d      	cmp	r4, #45	; 0x2d
 80088e2:	d132      	bne.n	800894a <_strtol_l.isra.0+0x8e>
 80088e4:	2201      	movs	r2, #1
 80088e6:	787c      	ldrb	r4, [r7, #1]
 80088e8:	1cbd      	adds	r5, r7, #2
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	d05d      	beq.n	80089aa <_strtol_l.isra.0+0xee>
 80088ee:	2e10      	cmp	r6, #16
 80088f0:	d109      	bne.n	8008906 <_strtol_l.isra.0+0x4a>
 80088f2:	2c30      	cmp	r4, #48	; 0x30
 80088f4:	d107      	bne.n	8008906 <_strtol_l.isra.0+0x4a>
 80088f6:	782b      	ldrb	r3, [r5, #0]
 80088f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088fc:	2b58      	cmp	r3, #88	; 0x58
 80088fe:	d14f      	bne.n	80089a0 <_strtol_l.isra.0+0xe4>
 8008900:	2610      	movs	r6, #16
 8008902:	786c      	ldrb	r4, [r5, #1]
 8008904:	3502      	adds	r5, #2
 8008906:	2a00      	cmp	r2, #0
 8008908:	bf14      	ite	ne
 800890a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800890e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008912:	2700      	movs	r7, #0
 8008914:	fbb1 fcf6 	udiv	ip, r1, r6
 8008918:	4638      	mov	r0, r7
 800891a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800891e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008922:	2b09      	cmp	r3, #9
 8008924:	d817      	bhi.n	8008956 <_strtol_l.isra.0+0x9a>
 8008926:	461c      	mov	r4, r3
 8008928:	42a6      	cmp	r6, r4
 800892a:	dd23      	ble.n	8008974 <_strtol_l.isra.0+0xb8>
 800892c:	1c7b      	adds	r3, r7, #1
 800892e:	d007      	beq.n	8008940 <_strtol_l.isra.0+0x84>
 8008930:	4584      	cmp	ip, r0
 8008932:	d31c      	bcc.n	800896e <_strtol_l.isra.0+0xb2>
 8008934:	d101      	bne.n	800893a <_strtol_l.isra.0+0x7e>
 8008936:	45a6      	cmp	lr, r4
 8008938:	db19      	blt.n	800896e <_strtol_l.isra.0+0xb2>
 800893a:	2701      	movs	r7, #1
 800893c:	fb00 4006 	mla	r0, r0, r6, r4
 8008940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008944:	e7eb      	b.n	800891e <_strtol_l.isra.0+0x62>
 8008946:	462f      	mov	r7, r5
 8008948:	e7bf      	b.n	80088ca <_strtol_l.isra.0+0xe>
 800894a:	2c2b      	cmp	r4, #43	; 0x2b
 800894c:	bf04      	itt	eq
 800894e:	1cbd      	addeq	r5, r7, #2
 8008950:	787c      	ldrbeq	r4, [r7, #1]
 8008952:	461a      	mov	r2, r3
 8008954:	e7c9      	b.n	80088ea <_strtol_l.isra.0+0x2e>
 8008956:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800895a:	2b19      	cmp	r3, #25
 800895c:	d801      	bhi.n	8008962 <_strtol_l.isra.0+0xa6>
 800895e:	3c37      	subs	r4, #55	; 0x37
 8008960:	e7e2      	b.n	8008928 <_strtol_l.isra.0+0x6c>
 8008962:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008966:	2b19      	cmp	r3, #25
 8008968:	d804      	bhi.n	8008974 <_strtol_l.isra.0+0xb8>
 800896a:	3c57      	subs	r4, #87	; 0x57
 800896c:	e7dc      	b.n	8008928 <_strtol_l.isra.0+0x6c>
 800896e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008972:	e7e5      	b.n	8008940 <_strtol_l.isra.0+0x84>
 8008974:	1c7b      	adds	r3, r7, #1
 8008976:	d108      	bne.n	800898a <_strtol_l.isra.0+0xce>
 8008978:	2322      	movs	r3, #34	; 0x22
 800897a:	4608      	mov	r0, r1
 800897c:	f8c8 3000 	str.w	r3, [r8]
 8008980:	f1ba 0f00 	cmp.w	sl, #0
 8008984:	d107      	bne.n	8008996 <_strtol_l.isra.0+0xda>
 8008986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898a:	b102      	cbz	r2, 800898e <_strtol_l.isra.0+0xd2>
 800898c:	4240      	negs	r0, r0
 800898e:	f1ba 0f00 	cmp.w	sl, #0
 8008992:	d0f8      	beq.n	8008986 <_strtol_l.isra.0+0xca>
 8008994:	b10f      	cbz	r7, 800899a <_strtol_l.isra.0+0xde>
 8008996:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800899a:	f8ca 9000 	str.w	r9, [sl]
 800899e:	e7f2      	b.n	8008986 <_strtol_l.isra.0+0xca>
 80089a0:	2430      	movs	r4, #48	; 0x30
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d1af      	bne.n	8008906 <_strtol_l.isra.0+0x4a>
 80089a6:	2608      	movs	r6, #8
 80089a8:	e7ad      	b.n	8008906 <_strtol_l.isra.0+0x4a>
 80089aa:	2c30      	cmp	r4, #48	; 0x30
 80089ac:	d0a3      	beq.n	80088f6 <_strtol_l.isra.0+0x3a>
 80089ae:	260a      	movs	r6, #10
 80089b0:	e7a9      	b.n	8008906 <_strtol_l.isra.0+0x4a>
	...

080089b4 <strtol>:
 80089b4:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <strtol+0x24>)
 80089b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b8:	681c      	ldr	r4, [r3, #0]
 80089ba:	4d08      	ldr	r5, [pc, #32]	; (80089dc <strtol+0x28>)
 80089bc:	6a23      	ldr	r3, [r4, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bf08      	it	eq
 80089c2:	462b      	moveq	r3, r5
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4613      	mov	r3, r2
 80089c8:	460a      	mov	r2, r1
 80089ca:	4601      	mov	r1, r0
 80089cc:	4620      	mov	r0, r4
 80089ce:	f7ff ff75 	bl	80088bc <_strtol_l.isra.0>
 80089d2:	b003      	add	sp, #12
 80089d4:	bd30      	pop	{r4, r5, pc}
 80089d6:	bf00      	nop
 80089d8:	2000001c 	.word	0x2000001c
 80089dc:	20000080 	.word	0x20000080

080089e0 <print_e>:
 80089e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e2:	b08b      	sub	sp, #44	; 0x2c
 80089e4:	460f      	mov	r7, r1
 80089e6:	a908      	add	r1, sp, #32
 80089e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80089ea:	9104      	str	r1, [sp, #16]
 80089ec:	a907      	add	r1, sp, #28
 80089ee:	9103      	str	r1, [sp, #12]
 80089f0:	a909      	add	r1, sp, #36	; 0x24
 80089f2:	9102      	str	r1, [sp, #8]
 80089f4:	1c61      	adds	r1, r4, #1
 80089f6:	9101      	str	r1, [sp, #4]
 80089f8:	2102      	movs	r1, #2
 80089fa:	9100      	str	r1, [sp, #0]
 80089fc:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8008a00:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008a02:	f001 fcb5 	bl	800a370 <_dtoa_r>
 8008a06:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	4298      	cmp	r0, r3
 8008a10:	d104      	bne.n	8008a1c <print_e+0x3c>
 8008a12:	4638      	mov	r0, r7
 8008a14:	f7ff f8fb 	bl	8007c0e <strcpy>
 8008a18:	b00b      	add	sp, #44	; 0x2c
 8008a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1c:	780b      	ldrb	r3, [r1, #0]
 8008a1e:	703b      	strb	r3, [r7, #0]
 8008a20:	2d00      	cmp	r5, #0
 8008a22:	d142      	bne.n	8008aaa <print_e+0xca>
 8008a24:	2c00      	cmp	r4, #0
 8008a26:	d140      	bne.n	8008aaa <print_e+0xca>
 8008a28:	1c7b      	adds	r3, r7, #1
 8008a2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a2e:	b10a      	cbz	r2, 8008a34 <print_e+0x54>
 8008a30:	2c00      	cmp	r4, #0
 8008a32:	dc3e      	bgt.n	8008ab2 <print_e+0xd2>
 8008a34:	2e67      	cmp	r6, #103	; 0x67
 8008a36:	d043      	beq.n	8008ac0 <print_e+0xe0>
 8008a38:	2e47      	cmp	r6, #71	; 0x47
 8008a3a:	d043      	beq.n	8008ac4 <print_e+0xe4>
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	2730      	movs	r7, #48	; 0x30
 8008a40:	191d      	adds	r5, r3, r4
 8008a42:	1aa9      	subs	r1, r5, r2
 8008a44:	2900      	cmp	r1, #0
 8008a46:	dc38      	bgt.n	8008aba <print_e+0xda>
 8008a48:	2c00      	cmp	r4, #0
 8008a4a:	bfa8      	it	ge
 8008a4c:	191b      	addge	r3, r3, r4
 8008a4e:	1e41      	subs	r1, r0, #1
 8008a50:	2900      	cmp	r1, #0
 8008a52:	9109      	str	r1, [sp, #36]	; 0x24
 8008a54:	461a      	mov	r2, r3
 8008a56:	bfb7      	itett	lt
 8008a58:	212d      	movlt	r1, #45	; 0x2d
 8008a5a:	212b      	movge	r1, #43	; 0x2b
 8008a5c:	f1c0 0001 	rsblt	r0, r0, #1
 8008a60:	9009      	strlt	r0, [sp, #36]	; 0x24
 8008a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a64:	f802 6b02 	strb.w	r6, [r2], #2
 8008a68:	bfb4      	ite	lt
 8008a6a:	7059      	strblt	r1, [r3, #1]
 8008a6c:	7059      	strbge	r1, [r3, #1]
 8008a6e:	2863      	cmp	r0, #99	; 0x63
 8008a70:	dd0b      	ble.n	8008a8a <print_e+0xaa>
 8008a72:	2164      	movs	r1, #100	; 0x64
 8008a74:	fb90 f1f1 	sdiv	r1, r0, r1
 8008a78:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008a7c:	1cda      	adds	r2, r3, #3
 8008a7e:	709c      	strb	r4, [r3, #2]
 8008a80:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008a84:	fb03 0101 	mla	r1, r3, r1, r0
 8008a88:	9109      	str	r1, [sp, #36]	; 0x24
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a8e:	fb91 f3f3 	sdiv	r3, r1, r3
 8008a92:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a96:	7010      	strb	r0, [r2, #0]
 8008a98:	f06f 0009 	mvn.w	r0, #9
 8008a9c:	fb00 1303 	mla	r3, r0, r3, r1
 8008aa0:	3330      	adds	r3, #48	; 0x30
 8008aa2:	7053      	strb	r3, [r2, #1]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	7093      	strb	r3, [r2, #2]
 8008aa8:	e7b6      	b.n	8008a18 <print_e+0x38>
 8008aaa:	222e      	movs	r2, #46	; 0x2e
 8008aac:	1cbb      	adds	r3, r7, #2
 8008aae:	707a      	strb	r2, [r7, #1]
 8008ab0:	e7bb      	b.n	8008a2a <print_e+0x4a>
 8008ab2:	f803 2b01 	strb.w	r2, [r3], #1
 8008ab6:	3c01      	subs	r4, #1
 8008ab8:	e7b7      	b.n	8008a2a <print_e+0x4a>
 8008aba:	f802 7b01 	strb.w	r7, [r2], #1
 8008abe:	e7c0      	b.n	8008a42 <print_e+0x62>
 8008ac0:	2665      	movs	r6, #101	; 0x65
 8008ac2:	e7c4      	b.n	8008a4e <print_e+0x6e>
 8008ac4:	2645      	movs	r6, #69	; 0x45
 8008ac6:	e7c2      	b.n	8008a4e <print_e+0x6e>

08008ac8 <_gcvt>:
 8008ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008acc:	4617      	mov	r7, r2
 8008ace:	461d      	mov	r5, r3
 8008ad0:	b08b      	sub	sp, #44	; 0x2c
 8008ad2:	4681      	mov	r9, r0
 8008ad4:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2300      	movs	r3, #0
 8008adc:	4638      	mov	r0, r7
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8008ae4:	f7f7 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8008ae8:	b108      	cbz	r0, 8008aee <_gcvt+0x26>
 8008aea:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	4638      	mov	r0, r7
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 ff57 	bl	80009a8 <__aeabi_dcmpeq>
 8008afa:	b138      	cbz	r0, 8008b0c <_gcvt+0x44>
 8008afc:	2330      	movs	r3, #48	; 0x30
 8008afe:	7023      	strb	r3, [r4, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	7063      	strb	r3, [r4, #1]
 8008b04:	4620      	mov	r0, r4
 8008b06:	b00b      	add	sp, #44	; 0x2c
 8008b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b0c:	a352      	add	r3, pc, #328	; (adr r3, 8008c58 <_gcvt+0x190>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	4638      	mov	r0, r7
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7f7 ff5b 	bl	80009d0 <__aeabi_dcmple>
 8008b1a:	b168      	cbz	r0, 8008b38 <_gcvt+0x70>
 8008b1c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008b20:	3e01      	subs	r6, #1
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	f8cd 8008 	str.w	r8, [sp, #8]
 8008b28:	9600      	str	r6, [sp, #0]
 8008b2a:	463a      	mov	r2, r7
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4648      	mov	r0, r9
 8008b32:	f7ff ff55 	bl	80089e0 <print_e>
 8008b36:	e7e5      	b.n	8008b04 <_gcvt+0x3c>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 ff9b 	bl	8009a74 <_mprec_log10>
 8008b3e:	463a      	mov	r2, r7
 8008b40:	462b      	mov	r3, r5
 8008b42:	f7f7 ff45 	bl	80009d0 <__aeabi_dcmple>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d1e8      	bne.n	8008b1c <_gcvt+0x54>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4b44      	ldr	r3, [pc, #272]	; (8008c60 <_gcvt+0x198>)
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7f7 ff33 	bl	80009bc <__aeabi_dcmplt>
 8008b56:	a909      	add	r1, sp, #36	; 0x24
 8008b58:	aa08      	add	r2, sp, #32
 8008b5a:	ab07      	add	r3, sp, #28
 8008b5c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8008b60:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008b64:	b388      	cbz	r0, 8008bca <_gcvt+0x102>
 8008b66:	2303      	movs	r3, #3
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	4648      	mov	r0, r9
 8008b70:	f001 fbfe 	bl	800a370 <_dtoa_r>
 8008b74:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b78:	9a07      	ldr	r2, [sp, #28]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d027      	beq.n	8008bce <_gcvt+0x106>
 8008b7e:	4623      	mov	r3, r4
 8008b80:	4426      	add	r6, r4
 8008b82:	4607      	mov	r7, r0
 8008b84:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008b88:	1af2      	subs	r2, r6, r3
 8008b8a:	9d07      	ldr	r5, [sp, #28]
 8008b8c:	b349      	cbz	r1, 8008be2 <_gcvt+0x11a>
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	dc22      	bgt.n	8008bd8 <_gcvt+0x110>
 8008b92:	f1b8 0f00 	cmp.w	r8, #0
 8008b96:	d102      	bne.n	8008b9e <_gcvt+0xd6>
 8008b98:	7839      	ldrb	r1, [r7, #0]
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	d049      	beq.n	8008c32 <_gcvt+0x16a>
 8008b9e:	429c      	cmp	r4, r3
 8008ba0:	bf04      	itt	eq
 8008ba2:	2130      	moveq	r1, #48	; 0x30
 8008ba4:	7021      	strbeq	r1, [r4, #0]
 8008ba6:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8008baa:	f04f 0000 	mov.w	r0, #0
 8008bae:	f04f 0630 	mov.w	r6, #48	; 0x30
 8008bb2:	bf08      	it	eq
 8008bb4:	1c63      	addeq	r3, r4, #1
 8008bb6:	7019      	strb	r1, [r3, #0]
 8008bb8:	9907      	ldr	r1, [sp, #28]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	db24      	blt.n	8008c0c <_gcvt+0x144>
 8008bc2:	b100      	cbz	r0, 8008bc6 <_gcvt+0xfe>
 8008bc4:	9107      	str	r1, [sp, #28]
 8008bc6:	1e79      	subs	r1, r7, #1
 8008bc8:	e02b      	b.n	8008c22 <_gcvt+0x15a>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e7cc      	b.n	8008b68 <_gcvt+0xa0>
 8008bce:	4601      	mov	r1, r0
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7ff f81c 	bl	8007c0e <strcpy>
 8008bd6:	e795      	b.n	8008b04 <_gcvt+0x3c>
 8008bd8:	3d01      	subs	r5, #1
 8008bda:	f803 1b01 	strb.w	r1, [r3], #1
 8008bde:	9507      	str	r5, [sp, #28]
 8008be0:	e7cf      	b.n	8008b82 <_gcvt+0xba>
 8008be2:	1aad      	subs	r5, r5, r2
 8008be4:	2630      	movs	r6, #48	; 0x30
 8008be6:	e005      	b.n	8008bf4 <_gcvt+0x12c>
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	dd06      	ble.n	8008bfa <_gcvt+0x132>
 8008bec:	2101      	movs	r1, #1
 8008bee:	f803 6b01 	strb.w	r6, [r3], #1
 8008bf2:	3a01      	subs	r2, #1
 8008bf4:	18a8      	adds	r0, r5, r2
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	dcf6      	bgt.n	8008be8 <_gcvt+0x120>
 8008bfa:	2900      	cmp	r1, #0
 8008bfc:	d0c9      	beq.n	8008b92 <_gcvt+0xca>
 8008bfe:	9007      	str	r0, [sp, #28]
 8008c00:	e7c7      	b.n	8008b92 <_gcvt+0xca>
 8008c02:	f803 6b01 	strb.w	r6, [r3], #1
 8008c06:	3a01      	subs	r2, #1
 8008c08:	2001      	movs	r0, #1
 8008c0a:	e7d7      	b.n	8008bbc <_gcvt+0xf4>
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	f101 0101 	add.w	r1, r1, #1
 8008c12:	dcf6      	bgt.n	8008c02 <_gcvt+0x13a>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d0d6      	beq.n	8008bc6 <_gcvt+0xfe>
 8008c18:	9507      	str	r5, [sp, #28]
 8008c1a:	e7d4      	b.n	8008bc6 <_gcvt+0xfe>
 8008c1c:	f803 0b01 	strb.w	r0, [r3], #1
 8008c20:	3a01      	subs	r2, #1
 8008c22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c26:	b108      	cbz	r0, 8008c2c <_gcvt+0x164>
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	dcf7      	bgt.n	8008c1c <_gcvt+0x154>
 8008c2c:	f1b8 0f00 	cmp.w	r8, #0
 8008c30:	d10b      	bne.n	8008c4a <_gcvt+0x182>
 8008c32:	2200      	movs	r2, #0
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e765      	b.n	8008b04 <_gcvt+0x3c>
 8008c38:	f801 6b01 	strb.w	r6, [r1], #1
 8008c3c:	1a68      	subs	r0, r5, r1
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	dcfa      	bgt.n	8008c38 <_gcvt+0x170>
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	bfa8      	it	ge
 8008c46:	189b      	addge	r3, r3, r2
 8008c48:	e7f3      	b.n	8008c32 <_gcvt+0x16a>
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	189d      	adds	r5, r3, r2
 8008c4e:	2630      	movs	r6, #48	; 0x30
 8008c50:	e7f4      	b.n	8008c3c <_gcvt+0x174>
 8008c52:	bf00      	nop
 8008c54:	f3af 8000 	nop.w
 8008c58:	eb1c432d 	.word	0xeb1c432d
 8008c5c:	3f1a36e2 	.word	0x3f1a36e2
 8008c60:	3ff00000 	.word	0x3ff00000

08008c64 <rshift>:
 8008c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c66:	6906      	ldr	r6, [r0, #16]
 8008c68:	114b      	asrs	r3, r1, #5
 8008c6a:	429e      	cmp	r6, r3
 8008c6c:	f100 0414 	add.w	r4, r0, #20
 8008c70:	dd31      	ble.n	8008cd6 <rshift+0x72>
 8008c72:	f011 011f 	ands.w	r1, r1, #31
 8008c76:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008c7a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008c7e:	d108      	bne.n	8008c92 <rshift+0x2e>
 8008c80:	4621      	mov	r1, r4
 8008c82:	42b2      	cmp	r2, r6
 8008c84:	460b      	mov	r3, r1
 8008c86:	d211      	bcs.n	8008cac <rshift+0x48>
 8008c88:	f852 3b04 	ldr.w	r3, [r2], #4
 8008c8c:	f841 3b04 	str.w	r3, [r1], #4
 8008c90:	e7f7      	b.n	8008c82 <rshift+0x1e>
 8008c92:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008c96:	4623      	mov	r3, r4
 8008c98:	f1c1 0c20 	rsb	ip, r1, #32
 8008c9c:	40cd      	lsrs	r5, r1
 8008c9e:	3204      	adds	r2, #4
 8008ca0:	42b2      	cmp	r2, r6
 8008ca2:	4617      	mov	r7, r2
 8008ca4:	d30d      	bcc.n	8008cc2 <rshift+0x5e>
 8008ca6:	601d      	str	r5, [r3, #0]
 8008ca8:	b105      	cbz	r5, 8008cac <rshift+0x48>
 8008caa:	3304      	adds	r3, #4
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	eba3 0204 	sub.w	r2, r3, r4
 8008cb2:	bf08      	it	eq
 8008cb4:	2300      	moveq	r3, #0
 8008cb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cba:	6102      	str	r2, [r0, #16]
 8008cbc:	bf08      	it	eq
 8008cbe:	6143      	streq	r3, [r0, #20]
 8008cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc2:	683f      	ldr	r7, [r7, #0]
 8008cc4:	fa07 f70c 	lsl.w	r7, r7, ip
 8008cc8:	433d      	orrs	r5, r7
 8008cca:	f843 5b04 	str.w	r5, [r3], #4
 8008cce:	f852 5b04 	ldr.w	r5, [r2], #4
 8008cd2:	40cd      	lsrs	r5, r1
 8008cd4:	e7e4      	b.n	8008ca0 <rshift+0x3c>
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	e7e8      	b.n	8008cac <rshift+0x48>

08008cda <__hexdig_fun>:
 8008cda:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008cde:	2b09      	cmp	r3, #9
 8008ce0:	d802      	bhi.n	8008ce8 <__hexdig_fun+0xe>
 8008ce2:	3820      	subs	r0, #32
 8008ce4:	b2c0      	uxtb	r0, r0
 8008ce6:	4770      	bx	lr
 8008ce8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	d801      	bhi.n	8008cf4 <__hexdig_fun+0x1a>
 8008cf0:	3847      	subs	r0, #71	; 0x47
 8008cf2:	e7f7      	b.n	8008ce4 <__hexdig_fun+0xa>
 8008cf4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cf8:	2b05      	cmp	r3, #5
 8008cfa:	d801      	bhi.n	8008d00 <__hexdig_fun+0x26>
 8008cfc:	3827      	subs	r0, #39	; 0x27
 8008cfe:	e7f1      	b.n	8008ce4 <__hexdig_fun+0xa>
 8008d00:	2000      	movs	r0, #0
 8008d02:	4770      	bx	lr

08008d04 <__gethex>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	b08b      	sub	sp, #44	; 0x2c
 8008d0a:	9002      	str	r0, [sp, #8]
 8008d0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008d0e:	468a      	mov	sl, r1
 8008d10:	4690      	mov	r8, r2
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	f000 fad1 	bl	80092ba <__localeconv_l>
 8008d18:	6803      	ldr	r3, [r0, #0]
 8008d1a:	f04f 0b00 	mov.w	fp, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	9303      	str	r3, [sp, #12]
 8008d22:	f7f7 fa15 	bl	8000150 <strlen>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	9001      	str	r0, [sp, #4]
 8008d2a:	4403      	add	r3, r0
 8008d2c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d30:	9307      	str	r3, [sp, #28]
 8008d32:	f8da 3000 	ldr.w	r3, [sl]
 8008d36:	3302      	adds	r3, #2
 8008d38:	461f      	mov	r7, r3
 8008d3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d3e:	2830      	cmp	r0, #48	; 0x30
 8008d40:	d06c      	beq.n	8008e1c <__gethex+0x118>
 8008d42:	f7ff ffca 	bl	8008cda <__hexdig_fun>
 8008d46:	4604      	mov	r4, r0
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d16a      	bne.n	8008e22 <__gethex+0x11e>
 8008d4c:	9a01      	ldr	r2, [sp, #4]
 8008d4e:	9903      	ldr	r1, [sp, #12]
 8008d50:	4638      	mov	r0, r7
 8008d52:	f001 fa5f 	bl	800a214 <strncmp>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d166      	bne.n	8008e28 <__gethex+0x124>
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	5cf8      	ldrb	r0, [r7, r3]
 8008d5e:	18fe      	adds	r6, r7, r3
 8008d60:	f7ff ffbb 	bl	8008cda <__hexdig_fun>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d062      	beq.n	8008e2e <__gethex+0x12a>
 8008d68:	4633      	mov	r3, r6
 8008d6a:	7818      	ldrb	r0, [r3, #0]
 8008d6c:	461f      	mov	r7, r3
 8008d6e:	2830      	cmp	r0, #48	; 0x30
 8008d70:	f103 0301 	add.w	r3, r3, #1
 8008d74:	d0f9      	beq.n	8008d6a <__gethex+0x66>
 8008d76:	f7ff ffb0 	bl	8008cda <__hexdig_fun>
 8008d7a:	fab0 f580 	clz	r5, r0
 8008d7e:	4634      	mov	r4, r6
 8008d80:	f04f 0b01 	mov.w	fp, #1
 8008d84:	096d      	lsrs	r5, r5, #5
 8008d86:	463a      	mov	r2, r7
 8008d88:	4616      	mov	r6, r2
 8008d8a:	7830      	ldrb	r0, [r6, #0]
 8008d8c:	3201      	adds	r2, #1
 8008d8e:	f7ff ffa4 	bl	8008cda <__hexdig_fun>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d1f8      	bne.n	8008d88 <__gethex+0x84>
 8008d96:	9a01      	ldr	r2, [sp, #4]
 8008d98:	9903      	ldr	r1, [sp, #12]
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f001 fa3a 	bl	800a214 <strncmp>
 8008da0:	b950      	cbnz	r0, 8008db8 <__gethex+0xb4>
 8008da2:	b954      	cbnz	r4, 8008dba <__gethex+0xb6>
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	18f4      	adds	r4, r6, r3
 8008da8:	4622      	mov	r2, r4
 8008daa:	4616      	mov	r6, r2
 8008dac:	7830      	ldrb	r0, [r6, #0]
 8008dae:	3201      	adds	r2, #1
 8008db0:	f7ff ff93 	bl	8008cda <__hexdig_fun>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d1f8      	bne.n	8008daa <__gethex+0xa6>
 8008db8:	b10c      	cbz	r4, 8008dbe <__gethex+0xba>
 8008dba:	1ba4      	subs	r4, r4, r6
 8008dbc:	00a4      	lsls	r4, r4, #2
 8008dbe:	7833      	ldrb	r3, [r6, #0]
 8008dc0:	2b50      	cmp	r3, #80	; 0x50
 8008dc2:	d001      	beq.n	8008dc8 <__gethex+0xc4>
 8008dc4:	2b70      	cmp	r3, #112	; 0x70
 8008dc6:	d140      	bne.n	8008e4a <__gethex+0x146>
 8008dc8:	7873      	ldrb	r3, [r6, #1]
 8008dca:	2b2b      	cmp	r3, #43	; 0x2b
 8008dcc:	d031      	beq.n	8008e32 <__gethex+0x12e>
 8008dce:	2b2d      	cmp	r3, #45	; 0x2d
 8008dd0:	d033      	beq.n	8008e3a <__gethex+0x136>
 8008dd2:	f04f 0900 	mov.w	r9, #0
 8008dd6:	1c71      	adds	r1, r6, #1
 8008dd8:	7808      	ldrb	r0, [r1, #0]
 8008dda:	f7ff ff7e 	bl	8008cda <__hexdig_fun>
 8008dde:	1e43      	subs	r3, r0, #1
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b18      	cmp	r3, #24
 8008de4:	d831      	bhi.n	8008e4a <__gethex+0x146>
 8008de6:	f1a0 0210 	sub.w	r2, r0, #16
 8008dea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008dee:	f7ff ff74 	bl	8008cda <__hexdig_fun>
 8008df2:	1e43      	subs	r3, r0, #1
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b18      	cmp	r3, #24
 8008df8:	d922      	bls.n	8008e40 <__gethex+0x13c>
 8008dfa:	f1b9 0f00 	cmp.w	r9, #0
 8008dfe:	d000      	beq.n	8008e02 <__gethex+0xfe>
 8008e00:	4252      	negs	r2, r2
 8008e02:	4414      	add	r4, r2
 8008e04:	f8ca 1000 	str.w	r1, [sl]
 8008e08:	b30d      	cbz	r5, 8008e4e <__gethex+0x14a>
 8008e0a:	f1bb 0f00 	cmp.w	fp, #0
 8008e0e:	bf0c      	ite	eq
 8008e10:	2706      	moveq	r7, #6
 8008e12:	2700      	movne	r7, #0
 8008e14:	4638      	mov	r0, r7
 8008e16:	b00b      	add	sp, #44	; 0x2c
 8008e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1c:	f10b 0b01 	add.w	fp, fp, #1
 8008e20:	e78a      	b.n	8008d38 <__gethex+0x34>
 8008e22:	2500      	movs	r5, #0
 8008e24:	462c      	mov	r4, r5
 8008e26:	e7ae      	b.n	8008d86 <__gethex+0x82>
 8008e28:	463e      	mov	r6, r7
 8008e2a:	2501      	movs	r5, #1
 8008e2c:	e7c7      	b.n	8008dbe <__gethex+0xba>
 8008e2e:	4604      	mov	r4, r0
 8008e30:	e7fb      	b.n	8008e2a <__gethex+0x126>
 8008e32:	f04f 0900 	mov.w	r9, #0
 8008e36:	1cb1      	adds	r1, r6, #2
 8008e38:	e7ce      	b.n	8008dd8 <__gethex+0xd4>
 8008e3a:	f04f 0901 	mov.w	r9, #1
 8008e3e:	e7fa      	b.n	8008e36 <__gethex+0x132>
 8008e40:	230a      	movs	r3, #10
 8008e42:	fb03 0202 	mla	r2, r3, r2, r0
 8008e46:	3a10      	subs	r2, #16
 8008e48:	e7cf      	b.n	8008dea <__gethex+0xe6>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	e7da      	b.n	8008e04 <__gethex+0x100>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	1bf3      	subs	r3, r6, r7
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b07      	cmp	r3, #7
 8008e56:	dc49      	bgt.n	8008eec <__gethex+0x1e8>
 8008e58:	9802      	ldr	r0, [sp, #8]
 8008e5a:	f000 fa4d 	bl	80092f8 <_Balloc>
 8008e5e:	f04f 0b00 	mov.w	fp, #0
 8008e62:	4605      	mov	r5, r0
 8008e64:	46da      	mov	sl, fp
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	f100 0914 	add.w	r9, r0, #20
 8008e6c:	f1c3 0301 	rsb	r3, r3, #1
 8008e70:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e74:	9308      	str	r3, [sp, #32]
 8008e76:	42b7      	cmp	r7, r6
 8008e78:	d33b      	bcc.n	8008ef2 <__gethex+0x1ee>
 8008e7a:	9804      	ldr	r0, [sp, #16]
 8008e7c:	f840 ab04 	str.w	sl, [r0], #4
 8008e80:	eba0 0009 	sub.w	r0, r0, r9
 8008e84:	1080      	asrs	r0, r0, #2
 8008e86:	6128      	str	r0, [r5, #16]
 8008e88:	0147      	lsls	r7, r0, #5
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	f000 faf8 	bl	8009480 <__hi0bits>
 8008e90:	f8d8 6000 	ldr.w	r6, [r8]
 8008e94:	1a3f      	subs	r7, r7, r0
 8008e96:	42b7      	cmp	r7, r6
 8008e98:	dd64      	ble.n	8008f64 <__gethex+0x260>
 8008e9a:	1bbf      	subs	r7, r7, r6
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 fe1e 	bl	8009ae0 <__any_on>
 8008ea4:	4682      	mov	sl, r0
 8008ea6:	b178      	cbz	r0, 8008ec8 <__gethex+0x1c4>
 8008ea8:	f04f 0a01 	mov.w	sl, #1
 8008eac:	1e7b      	subs	r3, r7, #1
 8008eae:	1159      	asrs	r1, r3, #5
 8008eb0:	f003 021f 	and.w	r2, r3, #31
 8008eb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008eb8:	fa0a f202 	lsl.w	r2, sl, r2
 8008ebc:	420a      	tst	r2, r1
 8008ebe:	d003      	beq.n	8008ec8 <__gethex+0x1c4>
 8008ec0:	4553      	cmp	r3, sl
 8008ec2:	dc46      	bgt.n	8008f52 <__gethex+0x24e>
 8008ec4:	f04f 0a02 	mov.w	sl, #2
 8008ec8:	4639      	mov	r1, r7
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7ff feca 	bl	8008c64 <rshift>
 8008ed0:	443c      	add	r4, r7
 8008ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	da52      	bge.n	8008f80 <__gethex+0x27c>
 8008eda:	4629      	mov	r1, r5
 8008edc:	9802      	ldr	r0, [sp, #8]
 8008ede:	f000 fa3f 	bl	8009360 <_Bfree>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ee6:	27a3      	movs	r7, #163	; 0xa3
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e793      	b.n	8008e14 <__gethex+0x110>
 8008eec:	3101      	adds	r1, #1
 8008eee:	105b      	asrs	r3, r3, #1
 8008ef0:	e7b0      	b.n	8008e54 <__gethex+0x150>
 8008ef2:	1e73      	subs	r3, r6, #1
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	9a07      	ldr	r2, [sp, #28]
 8008ef8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d018      	beq.n	8008f32 <__gethex+0x22e>
 8008f00:	f1bb 0f20 	cmp.w	fp, #32
 8008f04:	d107      	bne.n	8008f16 <__gethex+0x212>
 8008f06:	9b04      	ldr	r3, [sp, #16]
 8008f08:	f8c3 a000 	str.w	sl, [r3]
 8008f0c:	f04f 0a00 	mov.w	sl, #0
 8008f10:	46d3      	mov	fp, sl
 8008f12:	3304      	adds	r3, #4
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f1a:	f7ff fede 	bl	8008cda <__hexdig_fun>
 8008f1e:	f000 000f 	and.w	r0, r0, #15
 8008f22:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f26:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f2a:	f10b 0b04 	add.w	fp, fp, #4
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	e00d      	b.n	8008f4e <__gethex+0x24a>
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	9a08      	ldr	r2, [sp, #32]
 8008f36:	4413      	add	r3, r2
 8008f38:	42bb      	cmp	r3, r7
 8008f3a:	d3e1      	bcc.n	8008f00 <__gethex+0x1fc>
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	9a01      	ldr	r2, [sp, #4]
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	9309      	str	r3, [sp, #36]	; 0x24
 8008f44:	f001 f966 	bl	800a214 <strncmp>
 8008f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d1d8      	bne.n	8008f00 <__gethex+0x1fc>
 8008f4e:	461e      	mov	r6, r3
 8008f50:	e791      	b.n	8008e76 <__gethex+0x172>
 8008f52:	1eb9      	subs	r1, r7, #2
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 fdc3 	bl	8009ae0 <__any_on>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d0b2      	beq.n	8008ec4 <__gethex+0x1c0>
 8008f5e:	f04f 0a03 	mov.w	sl, #3
 8008f62:	e7b1      	b.n	8008ec8 <__gethex+0x1c4>
 8008f64:	da09      	bge.n	8008f7a <__gethex+0x276>
 8008f66:	1bf7      	subs	r7, r6, r7
 8008f68:	4629      	mov	r1, r5
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	9802      	ldr	r0, [sp, #8]
 8008f6e:	f000 fbc1 	bl	80096f4 <__lshift>
 8008f72:	4605      	mov	r5, r0
 8008f74:	1be4      	subs	r4, r4, r7
 8008f76:	f100 0914 	add.w	r9, r0, #20
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	e7a8      	b.n	8008ed2 <__gethex+0x1ce>
 8008f80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f84:	42a0      	cmp	r0, r4
 8008f86:	dd6b      	ble.n	8009060 <__gethex+0x35c>
 8008f88:	1b04      	subs	r4, r0, r4
 8008f8a:	42a6      	cmp	r6, r4
 8008f8c:	dc2e      	bgt.n	8008fec <__gethex+0x2e8>
 8008f8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d022      	beq.n	8008fdc <__gethex+0x2d8>
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d024      	beq.n	8008fe4 <__gethex+0x2e0>
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d115      	bne.n	8008fca <__gethex+0x2c6>
 8008f9e:	42a6      	cmp	r6, r4
 8008fa0:	d113      	bne.n	8008fca <__gethex+0x2c6>
 8008fa2:	2e01      	cmp	r6, #1
 8008fa4:	dc0b      	bgt.n	8008fbe <__gethex+0x2ba>
 8008fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008faa:	9a06      	ldr	r2, [sp, #24]
 8008fac:	2762      	movs	r7, #98	; 0x62
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	612b      	str	r3, [r5, #16]
 8008fb4:	f8c9 3000 	str.w	r3, [r9]
 8008fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fba:	601d      	str	r5, [r3, #0]
 8008fbc:	e72a      	b.n	8008e14 <__gethex+0x110>
 8008fbe:	1e71      	subs	r1, r6, #1
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f000 fd8d 	bl	8009ae0 <__any_on>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d1ed      	bne.n	8008fa6 <__gethex+0x2a2>
 8008fca:	4629      	mov	r1, r5
 8008fcc:	9802      	ldr	r0, [sp, #8]
 8008fce:	f000 f9c7 	bl	8009360 <_Bfree>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fd6:	2750      	movs	r7, #80	; 0x50
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	e71b      	b.n	8008e14 <__gethex+0x110>
 8008fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0e1      	beq.n	8008fa6 <__gethex+0x2a2>
 8008fe2:	e7f2      	b.n	8008fca <__gethex+0x2c6>
 8008fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1dd      	bne.n	8008fa6 <__gethex+0x2a2>
 8008fea:	e7ee      	b.n	8008fca <__gethex+0x2c6>
 8008fec:	1e67      	subs	r7, r4, #1
 8008fee:	f1ba 0f00 	cmp.w	sl, #0
 8008ff2:	d132      	bne.n	800905a <__gethex+0x356>
 8008ff4:	b127      	cbz	r7, 8009000 <__gethex+0x2fc>
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f000 fd71 	bl	8009ae0 <__any_on>
 8008ffe:	4682      	mov	sl, r0
 8009000:	2301      	movs	r3, #1
 8009002:	117a      	asrs	r2, r7, #5
 8009004:	f007 071f 	and.w	r7, r7, #31
 8009008:	fa03 f707 	lsl.w	r7, r3, r7
 800900c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009010:	4621      	mov	r1, r4
 8009012:	421f      	tst	r7, r3
 8009014:	f04f 0702 	mov.w	r7, #2
 8009018:	4628      	mov	r0, r5
 800901a:	bf18      	it	ne
 800901c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009020:	1b36      	subs	r6, r6, r4
 8009022:	f7ff fe1f 	bl	8008c64 <rshift>
 8009026:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800902a:	f1ba 0f00 	cmp.w	sl, #0
 800902e:	d048      	beq.n	80090c2 <__gethex+0x3be>
 8009030:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d015      	beq.n	8009064 <__gethex+0x360>
 8009038:	2b03      	cmp	r3, #3
 800903a:	d017      	beq.n	800906c <__gethex+0x368>
 800903c:	2b01      	cmp	r3, #1
 800903e:	d109      	bne.n	8009054 <__gethex+0x350>
 8009040:	f01a 0f02 	tst.w	sl, #2
 8009044:	d006      	beq.n	8009054 <__gethex+0x350>
 8009046:	f8d9 3000 	ldr.w	r3, [r9]
 800904a:	ea4a 0a03 	orr.w	sl, sl, r3
 800904e:	f01a 0f01 	tst.w	sl, #1
 8009052:	d10e      	bne.n	8009072 <__gethex+0x36e>
 8009054:	f047 0710 	orr.w	r7, r7, #16
 8009058:	e033      	b.n	80090c2 <__gethex+0x3be>
 800905a:	f04f 0a01 	mov.w	sl, #1
 800905e:	e7cf      	b.n	8009000 <__gethex+0x2fc>
 8009060:	2701      	movs	r7, #1
 8009062:	e7e2      	b.n	800902a <__gethex+0x326>
 8009064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009066:	f1c3 0301 	rsb	r3, r3, #1
 800906a:	9315      	str	r3, [sp, #84]	; 0x54
 800906c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f0      	beq.n	8009054 <__gethex+0x350>
 8009072:	f04f 0c00 	mov.w	ip, #0
 8009076:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800907a:	f105 0314 	add.w	r3, r5, #20
 800907e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009082:	eb03 010a 	add.w	r1, r3, sl
 8009086:	4618      	mov	r0, r3
 8009088:	f853 2b04 	ldr.w	r2, [r3], #4
 800908c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009090:	d01c      	beq.n	80090cc <__gethex+0x3c8>
 8009092:	3201      	adds	r2, #1
 8009094:	6002      	str	r2, [r0, #0]
 8009096:	2f02      	cmp	r7, #2
 8009098:	f105 0314 	add.w	r3, r5, #20
 800909c:	d138      	bne.n	8009110 <__gethex+0x40c>
 800909e:	f8d8 2000 	ldr.w	r2, [r8]
 80090a2:	3a01      	subs	r2, #1
 80090a4:	42b2      	cmp	r2, r6
 80090a6:	d10a      	bne.n	80090be <__gethex+0x3ba>
 80090a8:	2201      	movs	r2, #1
 80090aa:	1171      	asrs	r1, r6, #5
 80090ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090b0:	f006 061f 	and.w	r6, r6, #31
 80090b4:	fa02 f606 	lsl.w	r6, r2, r6
 80090b8:	421e      	tst	r6, r3
 80090ba:	bf18      	it	ne
 80090bc:	4617      	movne	r7, r2
 80090be:	f047 0720 	orr.w	r7, r7, #32
 80090c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090c4:	601d      	str	r5, [r3, #0]
 80090c6:	9b06      	ldr	r3, [sp, #24]
 80090c8:	601c      	str	r4, [r3, #0]
 80090ca:	e6a3      	b.n	8008e14 <__gethex+0x110>
 80090cc:	4299      	cmp	r1, r3
 80090ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80090d2:	d8d8      	bhi.n	8009086 <__gethex+0x382>
 80090d4:	68ab      	ldr	r3, [r5, #8]
 80090d6:	4599      	cmp	r9, r3
 80090d8:	db12      	blt.n	8009100 <__gethex+0x3fc>
 80090da:	6869      	ldr	r1, [r5, #4]
 80090dc:	9802      	ldr	r0, [sp, #8]
 80090de:	3101      	adds	r1, #1
 80090e0:	f000 f90a 	bl	80092f8 <_Balloc>
 80090e4:	4683      	mov	fp, r0
 80090e6:	692a      	ldr	r2, [r5, #16]
 80090e8:	f105 010c 	add.w	r1, r5, #12
 80090ec:	3202      	adds	r2, #2
 80090ee:	0092      	lsls	r2, r2, #2
 80090f0:	300c      	adds	r0, #12
 80090f2:	f000 f8f6 	bl	80092e2 <memcpy>
 80090f6:	4629      	mov	r1, r5
 80090f8:	9802      	ldr	r0, [sp, #8]
 80090fa:	f000 f931 	bl	8009360 <_Bfree>
 80090fe:	465d      	mov	r5, fp
 8009100:	692b      	ldr	r3, [r5, #16]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	612a      	str	r2, [r5, #16]
 8009106:	2201      	movs	r2, #1
 8009108:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800910c:	615a      	str	r2, [r3, #20]
 800910e:	e7c2      	b.n	8009096 <__gethex+0x392>
 8009110:	692a      	ldr	r2, [r5, #16]
 8009112:	454a      	cmp	r2, r9
 8009114:	dd0b      	ble.n	800912e <__gethex+0x42a>
 8009116:	2101      	movs	r1, #1
 8009118:	4628      	mov	r0, r5
 800911a:	f7ff fda3 	bl	8008c64 <rshift>
 800911e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009122:	3401      	adds	r4, #1
 8009124:	42a3      	cmp	r3, r4
 8009126:	f6ff aed8 	blt.w	8008eda <__gethex+0x1d6>
 800912a:	2701      	movs	r7, #1
 800912c:	e7c7      	b.n	80090be <__gethex+0x3ba>
 800912e:	f016 061f 	ands.w	r6, r6, #31
 8009132:	d0fa      	beq.n	800912a <__gethex+0x426>
 8009134:	449a      	add	sl, r3
 8009136:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800913a:	f000 f9a1 	bl	8009480 <__hi0bits>
 800913e:	f1c6 0620 	rsb	r6, r6, #32
 8009142:	42b0      	cmp	r0, r6
 8009144:	dbe7      	blt.n	8009116 <__gethex+0x412>
 8009146:	e7f0      	b.n	800912a <__gethex+0x426>

08009148 <L_shift>:
 8009148:	f1c2 0208 	rsb	r2, r2, #8
 800914c:	0092      	lsls	r2, r2, #2
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	f1c2 0620 	rsb	r6, r2, #32
 8009154:	6843      	ldr	r3, [r0, #4]
 8009156:	6804      	ldr	r4, [r0, #0]
 8009158:	fa03 f506 	lsl.w	r5, r3, r6
 800915c:	432c      	orrs	r4, r5
 800915e:	40d3      	lsrs	r3, r2
 8009160:	6004      	str	r4, [r0, #0]
 8009162:	f840 3f04 	str.w	r3, [r0, #4]!
 8009166:	4288      	cmp	r0, r1
 8009168:	d3f4      	bcc.n	8009154 <L_shift+0xc>
 800916a:	bd70      	pop	{r4, r5, r6, pc}

0800916c <__match>:
 800916c:	b530      	push	{r4, r5, lr}
 800916e:	6803      	ldr	r3, [r0, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009176:	b914      	cbnz	r4, 800917e <__match+0x12>
 8009178:	6003      	str	r3, [r0, #0]
 800917a:	2001      	movs	r0, #1
 800917c:	bd30      	pop	{r4, r5, pc}
 800917e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009182:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009186:	2d19      	cmp	r5, #25
 8009188:	bf98      	it	ls
 800918a:	3220      	addls	r2, #32
 800918c:	42a2      	cmp	r2, r4
 800918e:	d0f0      	beq.n	8009172 <__match+0x6>
 8009190:	2000      	movs	r0, #0
 8009192:	e7f3      	b.n	800917c <__match+0x10>

08009194 <__hexnan>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	2500      	movs	r5, #0
 800919a:	680b      	ldr	r3, [r1, #0]
 800919c:	4682      	mov	sl, r0
 800919e:	115f      	asrs	r7, r3, #5
 80091a0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80091a4:	f013 031f 	ands.w	r3, r3, #31
 80091a8:	bf18      	it	ne
 80091aa:	3704      	addne	r7, #4
 80091ac:	1f3e      	subs	r6, r7, #4
 80091ae:	4690      	mov	r8, r2
 80091b0:	46b1      	mov	r9, r6
 80091b2:	4634      	mov	r4, r6
 80091b4:	46ab      	mov	fp, r5
 80091b6:	b087      	sub	sp, #28
 80091b8:	6801      	ldr	r1, [r0, #0]
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	f847 5c04 	str.w	r5, [r7, #-4]
 80091c0:	9502      	str	r5, [sp, #8]
 80091c2:	784a      	ldrb	r2, [r1, #1]
 80091c4:	1c4b      	adds	r3, r1, #1
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	b342      	cbz	r2, 800921c <__hexnan+0x88>
 80091ca:	4610      	mov	r0, r2
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	9204      	str	r2, [sp, #16]
 80091d0:	f7ff fd83 	bl	8008cda <__hexdig_fun>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d143      	bne.n	8009260 <__hexnan+0xcc>
 80091d8:	9a04      	ldr	r2, [sp, #16]
 80091da:	9905      	ldr	r1, [sp, #20]
 80091dc:	2a20      	cmp	r2, #32
 80091de:	d818      	bhi.n	8009212 <__hexnan+0x7e>
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	459b      	cmp	fp, r3
 80091e4:	dd13      	ble.n	800920e <__hexnan+0x7a>
 80091e6:	454c      	cmp	r4, r9
 80091e8:	d206      	bcs.n	80091f8 <__hexnan+0x64>
 80091ea:	2d07      	cmp	r5, #7
 80091ec:	dc04      	bgt.n	80091f8 <__hexnan+0x64>
 80091ee:	462a      	mov	r2, r5
 80091f0:	4649      	mov	r1, r9
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7ff ffa8 	bl	8009148 <L_shift>
 80091f8:	4544      	cmp	r4, r8
 80091fa:	d944      	bls.n	8009286 <__hexnan+0xf2>
 80091fc:	2300      	movs	r3, #0
 80091fe:	f1a4 0904 	sub.w	r9, r4, #4
 8009202:	f844 3c04 	str.w	r3, [r4, #-4]
 8009206:	461d      	mov	r5, r3
 8009208:	464c      	mov	r4, r9
 800920a:	f8cd b008 	str.w	fp, [sp, #8]
 800920e:	9903      	ldr	r1, [sp, #12]
 8009210:	e7d7      	b.n	80091c2 <__hexnan+0x2e>
 8009212:	2a29      	cmp	r2, #41	; 0x29
 8009214:	d14a      	bne.n	80092ac <__hexnan+0x118>
 8009216:	3102      	adds	r1, #2
 8009218:	f8ca 1000 	str.w	r1, [sl]
 800921c:	f1bb 0f00 	cmp.w	fp, #0
 8009220:	d044      	beq.n	80092ac <__hexnan+0x118>
 8009222:	454c      	cmp	r4, r9
 8009224:	d206      	bcs.n	8009234 <__hexnan+0xa0>
 8009226:	2d07      	cmp	r5, #7
 8009228:	dc04      	bgt.n	8009234 <__hexnan+0xa0>
 800922a:	462a      	mov	r2, r5
 800922c:	4649      	mov	r1, r9
 800922e:	4620      	mov	r0, r4
 8009230:	f7ff ff8a 	bl	8009148 <L_shift>
 8009234:	4544      	cmp	r4, r8
 8009236:	d928      	bls.n	800928a <__hexnan+0xf6>
 8009238:	4643      	mov	r3, r8
 800923a:	f854 2b04 	ldr.w	r2, [r4], #4
 800923e:	42a6      	cmp	r6, r4
 8009240:	f843 2b04 	str.w	r2, [r3], #4
 8009244:	d2f9      	bcs.n	800923a <__hexnan+0xa6>
 8009246:	2200      	movs	r2, #0
 8009248:	f843 2b04 	str.w	r2, [r3], #4
 800924c:	429e      	cmp	r6, r3
 800924e:	d2fb      	bcs.n	8009248 <__hexnan+0xb4>
 8009250:	6833      	ldr	r3, [r6, #0]
 8009252:	b91b      	cbnz	r3, 800925c <__hexnan+0xc8>
 8009254:	4546      	cmp	r6, r8
 8009256:	d127      	bne.n	80092a8 <__hexnan+0x114>
 8009258:	2301      	movs	r3, #1
 800925a:	6033      	str	r3, [r6, #0]
 800925c:	2005      	movs	r0, #5
 800925e:	e026      	b.n	80092ae <__hexnan+0x11a>
 8009260:	3501      	adds	r5, #1
 8009262:	2d08      	cmp	r5, #8
 8009264:	f10b 0b01 	add.w	fp, fp, #1
 8009268:	dd06      	ble.n	8009278 <__hexnan+0xe4>
 800926a:	4544      	cmp	r4, r8
 800926c:	d9cf      	bls.n	800920e <__hexnan+0x7a>
 800926e:	2300      	movs	r3, #0
 8009270:	2501      	movs	r5, #1
 8009272:	f844 3c04 	str.w	r3, [r4, #-4]
 8009276:	3c04      	subs	r4, #4
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	f000 000f 	and.w	r0, r0, #15
 800927e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	e7c3      	b.n	800920e <__hexnan+0x7a>
 8009286:	2508      	movs	r5, #8
 8009288:	e7c1      	b.n	800920e <__hexnan+0x7a>
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0df      	beq.n	8009250 <__hexnan+0xbc>
 8009290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009294:	f1c3 0320 	rsb	r3, r3, #32
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
 800929c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80092a0:	401a      	ands	r2, r3
 80092a2:	f847 2c04 	str.w	r2, [r7, #-4]
 80092a6:	e7d3      	b.n	8009250 <__hexnan+0xbc>
 80092a8:	3e04      	subs	r6, #4
 80092aa:	e7d1      	b.n	8009250 <__hexnan+0xbc>
 80092ac:	2004      	movs	r0, #4
 80092ae:	b007      	add	sp, #28
 80092b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092b4 <__locale_ctype_ptr_l>:
 80092b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80092b8:	4770      	bx	lr

080092ba <__localeconv_l>:
 80092ba:	30f0      	adds	r0, #240	; 0xf0
 80092bc:	4770      	bx	lr

080092be <__ascii_mbtowc>:
 80092be:	b082      	sub	sp, #8
 80092c0:	b901      	cbnz	r1, 80092c4 <__ascii_mbtowc+0x6>
 80092c2:	a901      	add	r1, sp, #4
 80092c4:	b142      	cbz	r2, 80092d8 <__ascii_mbtowc+0x1a>
 80092c6:	b14b      	cbz	r3, 80092dc <__ascii_mbtowc+0x1e>
 80092c8:	7813      	ldrb	r3, [r2, #0]
 80092ca:	600b      	str	r3, [r1, #0]
 80092cc:	7812      	ldrb	r2, [r2, #0]
 80092ce:	1c10      	adds	r0, r2, #0
 80092d0:	bf18      	it	ne
 80092d2:	2001      	movne	r0, #1
 80092d4:	b002      	add	sp, #8
 80092d6:	4770      	bx	lr
 80092d8:	4610      	mov	r0, r2
 80092da:	e7fb      	b.n	80092d4 <__ascii_mbtowc+0x16>
 80092dc:	f06f 0001 	mvn.w	r0, #1
 80092e0:	e7f8      	b.n	80092d4 <__ascii_mbtowc+0x16>

080092e2 <memcpy>:
 80092e2:	b510      	push	{r4, lr}
 80092e4:	1e43      	subs	r3, r0, #1
 80092e6:	440a      	add	r2, r1
 80092e8:	4291      	cmp	r1, r2
 80092ea:	d100      	bne.n	80092ee <memcpy+0xc>
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f6:	e7f7      	b.n	80092e8 <memcpy+0x6>

080092f8 <_Balloc>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092fc:	4604      	mov	r4, r0
 80092fe:	460e      	mov	r6, r1
 8009300:	b93d      	cbnz	r5, 8009312 <_Balloc+0x1a>
 8009302:	2010      	movs	r0, #16
 8009304:	f001 fde8 	bl	800aed8 <malloc>
 8009308:	6260      	str	r0, [r4, #36]	; 0x24
 800930a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800930e:	6005      	str	r5, [r0, #0]
 8009310:	60c5      	str	r5, [r0, #12]
 8009312:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009314:	68eb      	ldr	r3, [r5, #12]
 8009316:	b183      	cbz	r3, 800933a <_Balloc+0x42>
 8009318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009320:	b9b8      	cbnz	r0, 8009352 <_Balloc+0x5a>
 8009322:	2101      	movs	r1, #1
 8009324:	fa01 f506 	lsl.w	r5, r1, r6
 8009328:	1d6a      	adds	r2, r5, #5
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fbf8 	bl	8009b22 <_calloc_r>
 8009332:	b160      	cbz	r0, 800934e <_Balloc+0x56>
 8009334:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009338:	e00e      	b.n	8009358 <_Balloc+0x60>
 800933a:	2221      	movs	r2, #33	; 0x21
 800933c:	2104      	movs	r1, #4
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fbef 	bl	8009b22 <_calloc_r>
 8009344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009346:	60e8      	str	r0, [r5, #12]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e4      	bne.n	8009318 <_Balloc+0x20>
 800934e:	2000      	movs	r0, #0
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	6802      	ldr	r2, [r0, #0]
 8009354:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009358:	2300      	movs	r3, #0
 800935a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800935e:	e7f7      	b.n	8009350 <_Balloc+0x58>

08009360 <_Bfree>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009364:	4606      	mov	r6, r0
 8009366:	460d      	mov	r5, r1
 8009368:	b93c      	cbnz	r4, 800937a <_Bfree+0x1a>
 800936a:	2010      	movs	r0, #16
 800936c:	f001 fdb4 	bl	800aed8 <malloc>
 8009370:	6270      	str	r0, [r6, #36]	; 0x24
 8009372:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009376:	6004      	str	r4, [r0, #0]
 8009378:	60c4      	str	r4, [r0, #12]
 800937a:	b13d      	cbz	r5, 800938c <_Bfree+0x2c>
 800937c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800937e:	686a      	ldr	r2, [r5, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009386:	6029      	str	r1, [r5, #0]
 8009388:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800938c:	bd70      	pop	{r4, r5, r6, pc}

0800938e <__multadd>:
 800938e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009392:	461f      	mov	r7, r3
 8009394:	4606      	mov	r6, r0
 8009396:	460c      	mov	r4, r1
 8009398:	2300      	movs	r3, #0
 800939a:	690d      	ldr	r5, [r1, #16]
 800939c:	f101 0c14 	add.w	ip, r1, #20
 80093a0:	f8dc 0000 	ldr.w	r0, [ip]
 80093a4:	3301      	adds	r3, #1
 80093a6:	b281      	uxth	r1, r0
 80093a8:	fb02 7101 	mla	r1, r2, r1, r7
 80093ac:	0c00      	lsrs	r0, r0, #16
 80093ae:	0c0f      	lsrs	r7, r1, #16
 80093b0:	fb02 7000 	mla	r0, r2, r0, r7
 80093b4:	b289      	uxth	r1, r1
 80093b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80093ba:	429d      	cmp	r5, r3
 80093bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80093c0:	f84c 1b04 	str.w	r1, [ip], #4
 80093c4:	dcec      	bgt.n	80093a0 <__multadd+0x12>
 80093c6:	b1d7      	cbz	r7, 80093fe <__multadd+0x70>
 80093c8:	68a3      	ldr	r3, [r4, #8]
 80093ca:	42ab      	cmp	r3, r5
 80093cc:	dc12      	bgt.n	80093f4 <__multadd+0x66>
 80093ce:	6861      	ldr	r1, [r4, #4]
 80093d0:	4630      	mov	r0, r6
 80093d2:	3101      	adds	r1, #1
 80093d4:	f7ff ff90 	bl	80092f8 <_Balloc>
 80093d8:	4680      	mov	r8, r0
 80093da:	6922      	ldr	r2, [r4, #16]
 80093dc:	f104 010c 	add.w	r1, r4, #12
 80093e0:	3202      	adds	r2, #2
 80093e2:	0092      	lsls	r2, r2, #2
 80093e4:	300c      	adds	r0, #12
 80093e6:	f7ff ff7c 	bl	80092e2 <memcpy>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff ffb7 	bl	8009360 <_Bfree>
 80093f2:	4644      	mov	r4, r8
 80093f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093f8:	3501      	adds	r5, #1
 80093fa:	615f      	str	r7, [r3, #20]
 80093fc:	6125      	str	r5, [r4, #16]
 80093fe:	4620      	mov	r0, r4
 8009400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009404 <__s2b>:
 8009404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009408:	4615      	mov	r5, r2
 800940a:	2209      	movs	r2, #9
 800940c:	461f      	mov	r7, r3
 800940e:	3308      	adds	r3, #8
 8009410:	460c      	mov	r4, r1
 8009412:	fb93 f3f2 	sdiv	r3, r3, r2
 8009416:	4606      	mov	r6, r0
 8009418:	2201      	movs	r2, #1
 800941a:	2100      	movs	r1, #0
 800941c:	429a      	cmp	r2, r3
 800941e:	db20      	blt.n	8009462 <__s2b+0x5e>
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff ff69 	bl	80092f8 <_Balloc>
 8009426:	9b08      	ldr	r3, [sp, #32]
 8009428:	2d09      	cmp	r5, #9
 800942a:	6143      	str	r3, [r0, #20]
 800942c:	f04f 0301 	mov.w	r3, #1
 8009430:	6103      	str	r3, [r0, #16]
 8009432:	dd19      	ble.n	8009468 <__s2b+0x64>
 8009434:	f104 0809 	add.w	r8, r4, #9
 8009438:	46c1      	mov	r9, r8
 800943a:	442c      	add	r4, r5
 800943c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009440:	4601      	mov	r1, r0
 8009442:	3b30      	subs	r3, #48	; 0x30
 8009444:	220a      	movs	r2, #10
 8009446:	4630      	mov	r0, r6
 8009448:	f7ff ffa1 	bl	800938e <__multadd>
 800944c:	45a1      	cmp	r9, r4
 800944e:	d1f5      	bne.n	800943c <__s2b+0x38>
 8009450:	eb08 0405 	add.w	r4, r8, r5
 8009454:	3c08      	subs	r4, #8
 8009456:	1b2d      	subs	r5, r5, r4
 8009458:	1963      	adds	r3, r4, r5
 800945a:	42bb      	cmp	r3, r7
 800945c:	db07      	blt.n	800946e <__s2b+0x6a>
 800945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009462:	0052      	lsls	r2, r2, #1
 8009464:	3101      	adds	r1, #1
 8009466:	e7d9      	b.n	800941c <__s2b+0x18>
 8009468:	340a      	adds	r4, #10
 800946a:	2509      	movs	r5, #9
 800946c:	e7f3      	b.n	8009456 <__s2b+0x52>
 800946e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009472:	4601      	mov	r1, r0
 8009474:	3b30      	subs	r3, #48	; 0x30
 8009476:	220a      	movs	r2, #10
 8009478:	4630      	mov	r0, r6
 800947a:	f7ff ff88 	bl	800938e <__multadd>
 800947e:	e7eb      	b.n	8009458 <__s2b+0x54>

08009480 <__hi0bits>:
 8009480:	0c02      	lsrs	r2, r0, #16
 8009482:	0412      	lsls	r2, r2, #16
 8009484:	4603      	mov	r3, r0
 8009486:	b9b2      	cbnz	r2, 80094b6 <__hi0bits+0x36>
 8009488:	0403      	lsls	r3, r0, #16
 800948a:	2010      	movs	r0, #16
 800948c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009490:	bf04      	itt	eq
 8009492:	021b      	lsleq	r3, r3, #8
 8009494:	3008      	addeq	r0, #8
 8009496:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800949a:	bf04      	itt	eq
 800949c:	011b      	lsleq	r3, r3, #4
 800949e:	3004      	addeq	r0, #4
 80094a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80094a4:	bf04      	itt	eq
 80094a6:	009b      	lsleq	r3, r3, #2
 80094a8:	3002      	addeq	r0, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	db06      	blt.n	80094bc <__hi0bits+0x3c>
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	d503      	bpl.n	80094ba <__hi0bits+0x3a>
 80094b2:	3001      	adds	r0, #1
 80094b4:	4770      	bx	lr
 80094b6:	2000      	movs	r0, #0
 80094b8:	e7e8      	b.n	800948c <__hi0bits+0xc>
 80094ba:	2020      	movs	r0, #32
 80094bc:	4770      	bx	lr

080094be <__lo0bits>:
 80094be:	6803      	ldr	r3, [r0, #0]
 80094c0:	4601      	mov	r1, r0
 80094c2:	f013 0207 	ands.w	r2, r3, #7
 80094c6:	d00b      	beq.n	80094e0 <__lo0bits+0x22>
 80094c8:	07da      	lsls	r2, r3, #31
 80094ca:	d423      	bmi.n	8009514 <__lo0bits+0x56>
 80094cc:	0798      	lsls	r0, r3, #30
 80094ce:	bf49      	itett	mi
 80094d0:	085b      	lsrmi	r3, r3, #1
 80094d2:	089b      	lsrpl	r3, r3, #2
 80094d4:	2001      	movmi	r0, #1
 80094d6:	600b      	strmi	r3, [r1, #0]
 80094d8:	bf5c      	itt	pl
 80094da:	600b      	strpl	r3, [r1, #0]
 80094dc:	2002      	movpl	r0, #2
 80094de:	4770      	bx	lr
 80094e0:	b298      	uxth	r0, r3
 80094e2:	b9a8      	cbnz	r0, 8009510 <__lo0bits+0x52>
 80094e4:	2010      	movs	r0, #16
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094ec:	bf04      	itt	eq
 80094ee:	0a1b      	lsreq	r3, r3, #8
 80094f0:	3008      	addeq	r0, #8
 80094f2:	071a      	lsls	r2, r3, #28
 80094f4:	bf04      	itt	eq
 80094f6:	091b      	lsreq	r3, r3, #4
 80094f8:	3004      	addeq	r0, #4
 80094fa:	079a      	lsls	r2, r3, #30
 80094fc:	bf04      	itt	eq
 80094fe:	089b      	lsreq	r3, r3, #2
 8009500:	3002      	addeq	r0, #2
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d402      	bmi.n	800950c <__lo0bits+0x4e>
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	d006      	beq.n	8009518 <__lo0bits+0x5a>
 800950a:	3001      	adds	r0, #1
 800950c:	600b      	str	r3, [r1, #0]
 800950e:	4770      	bx	lr
 8009510:	4610      	mov	r0, r2
 8009512:	e7e9      	b.n	80094e8 <__lo0bits+0x2a>
 8009514:	2000      	movs	r0, #0
 8009516:	4770      	bx	lr
 8009518:	2020      	movs	r0, #32
 800951a:	4770      	bx	lr

0800951c <__i2b>:
 800951c:	b510      	push	{r4, lr}
 800951e:	460c      	mov	r4, r1
 8009520:	2101      	movs	r1, #1
 8009522:	f7ff fee9 	bl	80092f8 <_Balloc>
 8009526:	2201      	movs	r2, #1
 8009528:	6144      	str	r4, [r0, #20]
 800952a:	6102      	str	r2, [r0, #16]
 800952c:	bd10      	pop	{r4, pc}

0800952e <__multiply>:
 800952e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009532:	4614      	mov	r4, r2
 8009534:	690a      	ldr	r2, [r1, #16]
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	4688      	mov	r8, r1
 800953a:	429a      	cmp	r2, r3
 800953c:	bfbe      	ittt	lt
 800953e:	460b      	movlt	r3, r1
 8009540:	46a0      	movlt	r8, r4
 8009542:	461c      	movlt	r4, r3
 8009544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009548:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800954c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009554:	eb07 0609 	add.w	r6, r7, r9
 8009558:	42b3      	cmp	r3, r6
 800955a:	bfb8      	it	lt
 800955c:	3101      	addlt	r1, #1
 800955e:	f7ff fecb 	bl	80092f8 <_Balloc>
 8009562:	f100 0514 	add.w	r5, r0, #20
 8009566:	462b      	mov	r3, r5
 8009568:	2200      	movs	r2, #0
 800956a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800956e:	4573      	cmp	r3, lr
 8009570:	d316      	bcc.n	80095a0 <__multiply+0x72>
 8009572:	f104 0214 	add.w	r2, r4, #20
 8009576:	f108 0114 	add.w	r1, r8, #20
 800957a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800957e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	9b00      	ldr	r3, [sp, #0]
 8009586:	9201      	str	r2, [sp, #4]
 8009588:	4293      	cmp	r3, r2
 800958a:	d80c      	bhi.n	80095a6 <__multiply+0x78>
 800958c:	2e00      	cmp	r6, #0
 800958e:	dd03      	ble.n	8009598 <__multiply+0x6a>
 8009590:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009594:	2b00      	cmp	r3, #0
 8009596:	d05d      	beq.n	8009654 <__multiply+0x126>
 8009598:	6106      	str	r6, [r0, #16]
 800959a:	b003      	add	sp, #12
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	f843 2b04 	str.w	r2, [r3], #4
 80095a4:	e7e3      	b.n	800956e <__multiply+0x40>
 80095a6:	f8b2 b000 	ldrh.w	fp, [r2]
 80095aa:	f1bb 0f00 	cmp.w	fp, #0
 80095ae:	d023      	beq.n	80095f8 <__multiply+0xca>
 80095b0:	4689      	mov	r9, r1
 80095b2:	46ac      	mov	ip, r5
 80095b4:	f04f 0800 	mov.w	r8, #0
 80095b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80095bc:	f8dc a000 	ldr.w	sl, [ip]
 80095c0:	b2a3      	uxth	r3, r4
 80095c2:	fa1f fa8a 	uxth.w	sl, sl
 80095c6:	fb0b a303 	mla	r3, fp, r3, sl
 80095ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80095ce:	f8dc 4000 	ldr.w	r4, [ip]
 80095d2:	4443      	add	r3, r8
 80095d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095d8:	fb0b 840a 	mla	r4, fp, sl, r8
 80095dc:	46e2      	mov	sl, ip
 80095de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095e8:	454f      	cmp	r7, r9
 80095ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095ee:	f84a 3b04 	str.w	r3, [sl], #4
 80095f2:	d82b      	bhi.n	800964c <__multiply+0x11e>
 80095f4:	f8cc 8004 	str.w	r8, [ip, #4]
 80095f8:	9b01      	ldr	r3, [sp, #4]
 80095fa:	3204      	adds	r2, #4
 80095fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009600:	f1ba 0f00 	cmp.w	sl, #0
 8009604:	d020      	beq.n	8009648 <__multiply+0x11a>
 8009606:	4689      	mov	r9, r1
 8009608:	46a8      	mov	r8, r5
 800960a:	f04f 0b00 	mov.w	fp, #0
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	f8b9 c000 	ldrh.w	ip, [r9]
 8009614:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009618:	b29b      	uxth	r3, r3
 800961a:	fb0a 440c 	mla	r4, sl, ip, r4
 800961e:	46c4      	mov	ip, r8
 8009620:	445c      	add	r4, fp
 8009622:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009626:	f84c 3b04 	str.w	r3, [ip], #4
 800962a:	f859 3b04 	ldr.w	r3, [r9], #4
 800962e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	fb0a b303 	mla	r3, sl, r3, fp
 8009638:	454f      	cmp	r7, r9
 800963a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800963e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009642:	d805      	bhi.n	8009650 <__multiply+0x122>
 8009644:	f8c8 3004 	str.w	r3, [r8, #4]
 8009648:	3504      	adds	r5, #4
 800964a:	e79b      	b.n	8009584 <__multiply+0x56>
 800964c:	46d4      	mov	ip, sl
 800964e:	e7b3      	b.n	80095b8 <__multiply+0x8a>
 8009650:	46e0      	mov	r8, ip
 8009652:	e7dd      	b.n	8009610 <__multiply+0xe2>
 8009654:	3e01      	subs	r6, #1
 8009656:	e799      	b.n	800958c <__multiply+0x5e>

08009658 <__pow5mult>:
 8009658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965c:	4615      	mov	r5, r2
 800965e:	f012 0203 	ands.w	r2, r2, #3
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	d007      	beq.n	8009678 <__pow5mult+0x20>
 8009668:	4c21      	ldr	r4, [pc, #132]	; (80096f0 <__pow5mult+0x98>)
 800966a:	3a01      	subs	r2, #1
 800966c:	2300      	movs	r3, #0
 800966e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009672:	f7ff fe8c 	bl	800938e <__multadd>
 8009676:	4607      	mov	r7, r0
 8009678:	10ad      	asrs	r5, r5, #2
 800967a:	d035      	beq.n	80096e8 <__pow5mult+0x90>
 800967c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800967e:	b93c      	cbnz	r4, 8009690 <__pow5mult+0x38>
 8009680:	2010      	movs	r0, #16
 8009682:	f001 fc29 	bl	800aed8 <malloc>
 8009686:	6270      	str	r0, [r6, #36]	; 0x24
 8009688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800968c:	6004      	str	r4, [r0, #0]
 800968e:	60c4      	str	r4, [r0, #12]
 8009690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009698:	b94c      	cbnz	r4, 80096ae <__pow5mult+0x56>
 800969a:	f240 2171 	movw	r1, #625	; 0x271
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ff3c 	bl	800951c <__i2b>
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	07eb      	lsls	r3, r5, #31
 80096b4:	d50a      	bpl.n	80096cc <__pow5mult+0x74>
 80096b6:	4639      	mov	r1, r7
 80096b8:	4622      	mov	r2, r4
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff ff37 	bl	800952e <__multiply>
 80096c0:	4681      	mov	r9, r0
 80096c2:	4639      	mov	r1, r7
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff fe4b 	bl	8009360 <_Bfree>
 80096ca:	464f      	mov	r7, r9
 80096cc:	106d      	asrs	r5, r5, #1
 80096ce:	d00b      	beq.n	80096e8 <__pow5mult+0x90>
 80096d0:	6820      	ldr	r0, [r4, #0]
 80096d2:	b938      	cbnz	r0, 80096e4 <__pow5mult+0x8c>
 80096d4:	4622      	mov	r2, r4
 80096d6:	4621      	mov	r1, r4
 80096d8:	4630      	mov	r0, r6
 80096da:	f7ff ff28 	bl	800952e <__multiply>
 80096de:	6020      	str	r0, [r4, #0]
 80096e0:	f8c0 8000 	str.w	r8, [r0]
 80096e4:	4604      	mov	r4, r0
 80096e6:	e7e4      	b.n	80096b2 <__pow5mult+0x5a>
 80096e8:	4638      	mov	r0, r7
 80096ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ee:	bf00      	nop
 80096f0:	0800bae0 	.word	0x0800bae0

080096f4 <__lshift>:
 80096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	460c      	mov	r4, r1
 80096fa:	4607      	mov	r7, r0
 80096fc:	4616      	mov	r6, r2
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009704:	eb0a 0903 	add.w	r9, sl, r3
 8009708:	6849      	ldr	r1, [r1, #4]
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	f109 0501 	add.w	r5, r9, #1
 8009710:	42ab      	cmp	r3, r5
 8009712:	db32      	blt.n	800977a <__lshift+0x86>
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff fdef 	bl	80092f8 <_Balloc>
 800971a:	2300      	movs	r3, #0
 800971c:	4680      	mov	r8, r0
 800971e:	461a      	mov	r2, r3
 8009720:	f100 0114 	add.w	r1, r0, #20
 8009724:	4553      	cmp	r3, sl
 8009726:	db2b      	blt.n	8009780 <__lshift+0x8c>
 8009728:	6920      	ldr	r0, [r4, #16]
 800972a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800972e:	f104 0314 	add.w	r3, r4, #20
 8009732:	f016 021f 	ands.w	r2, r6, #31
 8009736:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800973a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800973e:	d025      	beq.n	800978c <__lshift+0x98>
 8009740:	2000      	movs	r0, #0
 8009742:	f1c2 0e20 	rsb	lr, r2, #32
 8009746:	468a      	mov	sl, r1
 8009748:	681e      	ldr	r6, [r3, #0]
 800974a:	4096      	lsls	r6, r2
 800974c:	4330      	orrs	r0, r6
 800974e:	f84a 0b04 	str.w	r0, [sl], #4
 8009752:	f853 0b04 	ldr.w	r0, [r3], #4
 8009756:	459c      	cmp	ip, r3
 8009758:	fa20 f00e 	lsr.w	r0, r0, lr
 800975c:	d814      	bhi.n	8009788 <__lshift+0x94>
 800975e:	6048      	str	r0, [r1, #4]
 8009760:	b108      	cbz	r0, 8009766 <__lshift+0x72>
 8009762:	f109 0502 	add.w	r5, r9, #2
 8009766:	3d01      	subs	r5, #1
 8009768:	4638      	mov	r0, r7
 800976a:	f8c8 5010 	str.w	r5, [r8, #16]
 800976e:	4621      	mov	r1, r4
 8009770:	f7ff fdf6 	bl	8009360 <_Bfree>
 8009774:	4640      	mov	r0, r8
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	3101      	adds	r1, #1
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	e7c7      	b.n	8009710 <__lshift+0x1c>
 8009780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009784:	3301      	adds	r3, #1
 8009786:	e7cd      	b.n	8009724 <__lshift+0x30>
 8009788:	4651      	mov	r1, sl
 800978a:	e7dc      	b.n	8009746 <__lshift+0x52>
 800978c:	3904      	subs	r1, #4
 800978e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009792:	459c      	cmp	ip, r3
 8009794:	f841 2f04 	str.w	r2, [r1, #4]!
 8009798:	d8f9      	bhi.n	800978e <__lshift+0x9a>
 800979a:	e7e4      	b.n	8009766 <__lshift+0x72>

0800979c <__mcmp>:
 800979c:	6903      	ldr	r3, [r0, #16]
 800979e:	690a      	ldr	r2, [r1, #16]
 80097a0:	b530      	push	{r4, r5, lr}
 80097a2:	1a9b      	subs	r3, r3, r2
 80097a4:	d10c      	bne.n	80097c0 <__mcmp+0x24>
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	3014      	adds	r0, #20
 80097aa:	3114      	adds	r1, #20
 80097ac:	1884      	adds	r4, r0, r2
 80097ae:	4411      	add	r1, r2
 80097b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097b8:	4295      	cmp	r5, r2
 80097ba:	d003      	beq.n	80097c4 <__mcmp+0x28>
 80097bc:	d305      	bcc.n	80097ca <__mcmp+0x2e>
 80097be:	2301      	movs	r3, #1
 80097c0:	4618      	mov	r0, r3
 80097c2:	bd30      	pop	{r4, r5, pc}
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d3f3      	bcc.n	80097b0 <__mcmp+0x14>
 80097c8:	e7fa      	b.n	80097c0 <__mcmp+0x24>
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ce:	e7f7      	b.n	80097c0 <__mcmp+0x24>

080097d0 <__mdiff>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	460d      	mov	r5, r1
 80097d6:	4607      	mov	r7, r0
 80097d8:	4611      	mov	r1, r2
 80097da:	4628      	mov	r0, r5
 80097dc:	4614      	mov	r4, r2
 80097de:	f7ff ffdd 	bl	800979c <__mcmp>
 80097e2:	1e06      	subs	r6, r0, #0
 80097e4:	d108      	bne.n	80097f8 <__mdiff+0x28>
 80097e6:	4631      	mov	r1, r6
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7ff fd85 	bl	80092f8 <_Balloc>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f8:	bfa4      	itt	ge
 80097fa:	4623      	movge	r3, r4
 80097fc:	462c      	movge	r4, r5
 80097fe:	4638      	mov	r0, r7
 8009800:	6861      	ldr	r1, [r4, #4]
 8009802:	bfa6      	itte	ge
 8009804:	461d      	movge	r5, r3
 8009806:	2600      	movge	r6, #0
 8009808:	2601      	movlt	r6, #1
 800980a:	f7ff fd75 	bl	80092f8 <_Balloc>
 800980e:	f04f 0e00 	mov.w	lr, #0
 8009812:	60c6      	str	r6, [r0, #12]
 8009814:	692b      	ldr	r3, [r5, #16]
 8009816:	6926      	ldr	r6, [r4, #16]
 8009818:	f104 0214 	add.w	r2, r4, #20
 800981c:	f105 0914 	add.w	r9, r5, #20
 8009820:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009824:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009828:	f100 0114 	add.w	r1, r0, #20
 800982c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009830:	f859 5b04 	ldr.w	r5, [r9], #4
 8009834:	fa1f f38a 	uxth.w	r3, sl
 8009838:	4473      	add	r3, lr
 800983a:	b2ac      	uxth	r4, r5
 800983c:	1b1b      	subs	r3, r3, r4
 800983e:	0c2c      	lsrs	r4, r5, #16
 8009840:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009844:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009848:	b29b      	uxth	r3, r3
 800984a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800984e:	45c8      	cmp	r8, r9
 8009850:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009854:	4694      	mov	ip, r2
 8009856:	f841 4b04 	str.w	r4, [r1], #4
 800985a:	d8e7      	bhi.n	800982c <__mdiff+0x5c>
 800985c:	45bc      	cmp	ip, r7
 800985e:	d304      	bcc.n	800986a <__mdiff+0x9a>
 8009860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009864:	b183      	cbz	r3, 8009888 <__mdiff+0xb8>
 8009866:	6106      	str	r6, [r0, #16]
 8009868:	e7c4      	b.n	80097f4 <__mdiff+0x24>
 800986a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800986e:	b2a2      	uxth	r2, r4
 8009870:	4472      	add	r2, lr
 8009872:	1413      	asrs	r3, r2, #16
 8009874:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009878:	b292      	uxth	r2, r2
 800987a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800987e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009882:	f841 2b04 	str.w	r2, [r1], #4
 8009886:	e7e9      	b.n	800985c <__mdiff+0x8c>
 8009888:	3e01      	subs	r6, #1
 800988a:	e7e9      	b.n	8009860 <__mdiff+0x90>

0800988c <__ulp>:
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <__ulp+0x44>)
 800988e:	400b      	ands	r3, r1
 8009890:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd02      	ble.n	800989e <__ulp+0x12>
 8009898:	2000      	movs	r0, #0
 800989a:	4619      	mov	r1, r3
 800989c:	4770      	bx	lr
 800989e:	425b      	negs	r3, r3
 80098a0:	151b      	asrs	r3, r3, #20
 80098a2:	2b13      	cmp	r3, #19
 80098a4:	f04f 0000 	mov.w	r0, #0
 80098a8:	f04f 0100 	mov.w	r1, #0
 80098ac:	dc04      	bgt.n	80098b8 <__ulp+0x2c>
 80098ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80098b2:	fa42 f103 	asr.w	r1, r2, r3
 80098b6:	4770      	bx	lr
 80098b8:	2201      	movs	r2, #1
 80098ba:	3b14      	subs	r3, #20
 80098bc:	2b1e      	cmp	r3, #30
 80098be:	bfce      	itee	gt
 80098c0:	4613      	movgt	r3, r2
 80098c2:	f1c3 031f 	rsble	r3, r3, #31
 80098c6:	fa02 f303 	lslle.w	r3, r2, r3
 80098ca:	4618      	mov	r0, r3
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	7ff00000 	.word	0x7ff00000

080098d4 <__b2d>:
 80098d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d8:	6907      	ldr	r7, [r0, #16]
 80098da:	f100 0914 	add.w	r9, r0, #20
 80098de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80098e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80098e6:	f1a7 0804 	sub.w	r8, r7, #4
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff fdc8 	bl	8009480 <__hi0bits>
 80098f0:	f1c0 0320 	rsb	r3, r0, #32
 80098f4:	280a      	cmp	r0, #10
 80098f6:	600b      	str	r3, [r1, #0]
 80098f8:	491e      	ldr	r1, [pc, #120]	; (8009974 <__b2d+0xa0>)
 80098fa:	dc17      	bgt.n	800992c <__b2d+0x58>
 80098fc:	45c1      	cmp	r9, r8
 80098fe:	bf28      	it	cs
 8009900:	2200      	movcs	r2, #0
 8009902:	f1c0 0c0b 	rsb	ip, r0, #11
 8009906:	fa26 f30c 	lsr.w	r3, r6, ip
 800990a:	bf38      	it	cc
 800990c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009910:	ea43 0501 	orr.w	r5, r3, r1
 8009914:	f100 0315 	add.w	r3, r0, #21
 8009918:	fa06 f303 	lsl.w	r3, r6, r3
 800991c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009920:	ea43 0402 	orr.w	r4, r3, r2
 8009924:	4620      	mov	r0, r4
 8009926:	4629      	mov	r1, r5
 8009928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992c:	45c1      	cmp	r9, r8
 800992e:	bf3a      	itte	cc
 8009930:	f1a7 0808 	subcc.w	r8, r7, #8
 8009934:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009938:	2200      	movcs	r2, #0
 800993a:	f1b0 030b 	subs.w	r3, r0, #11
 800993e:	d015      	beq.n	800996c <__b2d+0x98>
 8009940:	409e      	lsls	r6, r3
 8009942:	f1c3 0720 	rsb	r7, r3, #32
 8009946:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800994a:	fa22 f107 	lsr.w	r1, r2, r7
 800994e:	45c8      	cmp	r8, r9
 8009950:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009954:	ea46 0501 	orr.w	r5, r6, r1
 8009958:	bf94      	ite	ls
 800995a:	2100      	movls	r1, #0
 800995c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009960:	fa02 f003 	lsl.w	r0, r2, r3
 8009964:	40f9      	lsrs	r1, r7
 8009966:	ea40 0401 	orr.w	r4, r0, r1
 800996a:	e7db      	b.n	8009924 <__b2d+0x50>
 800996c:	ea46 0501 	orr.w	r5, r6, r1
 8009970:	4614      	mov	r4, r2
 8009972:	e7d7      	b.n	8009924 <__b2d+0x50>
 8009974:	3ff00000 	.word	0x3ff00000

08009978 <__d2b>:
 8009978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800997c:	461c      	mov	r4, r3
 800997e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009982:	2101      	movs	r1, #1
 8009984:	4690      	mov	r8, r2
 8009986:	f7ff fcb7 	bl	80092f8 <_Balloc>
 800998a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800998e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009992:	4607      	mov	r7, r0
 8009994:	bb34      	cbnz	r4, 80099e4 <__d2b+0x6c>
 8009996:	9201      	str	r2, [sp, #4]
 8009998:	f1b8 0200 	subs.w	r2, r8, #0
 800999c:	d027      	beq.n	80099ee <__d2b+0x76>
 800999e:	a802      	add	r0, sp, #8
 80099a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80099a4:	f7ff fd8b 	bl	80094be <__lo0bits>
 80099a8:	9900      	ldr	r1, [sp, #0]
 80099aa:	b1f0      	cbz	r0, 80099ea <__d2b+0x72>
 80099ac:	9a01      	ldr	r2, [sp, #4]
 80099ae:	f1c0 0320 	rsb	r3, r0, #32
 80099b2:	fa02 f303 	lsl.w	r3, r2, r3
 80099b6:	430b      	orrs	r3, r1
 80099b8:	40c2      	lsrs	r2, r0
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	9201      	str	r2, [sp, #4]
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	bf14      	ite	ne
 80099c4:	2102      	movne	r1, #2
 80099c6:	2101      	moveq	r1, #1
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	6139      	str	r1, [r7, #16]
 80099cc:	b1c4      	cbz	r4, 8009a00 <__d2b+0x88>
 80099ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099d2:	4404      	add	r4, r0
 80099d4:	6034      	str	r4, [r6, #0]
 80099d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099da:	6028      	str	r0, [r5, #0]
 80099dc:	4638      	mov	r0, r7
 80099de:	b002      	add	sp, #8
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099e8:	e7d5      	b.n	8009996 <__d2b+0x1e>
 80099ea:	6179      	str	r1, [r7, #20]
 80099ec:	e7e7      	b.n	80099be <__d2b+0x46>
 80099ee:	a801      	add	r0, sp, #4
 80099f0:	f7ff fd65 	bl	80094be <__lo0bits>
 80099f4:	2101      	movs	r1, #1
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	6139      	str	r1, [r7, #16]
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	3020      	adds	r0, #32
 80099fe:	e7e5      	b.n	80099cc <__d2b+0x54>
 8009a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a04:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009a08:	6030      	str	r0, [r6, #0]
 8009a0a:	6918      	ldr	r0, [r3, #16]
 8009a0c:	f7ff fd38 	bl	8009480 <__hi0bits>
 8009a10:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a14:	e7e1      	b.n	80099da <__d2b+0x62>

08009a16 <__ratio>:
 8009a16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	4688      	mov	r8, r1
 8009a1c:	4669      	mov	r1, sp
 8009a1e:	4681      	mov	r9, r0
 8009a20:	f7ff ff58 	bl	80098d4 <__b2d>
 8009a24:	468b      	mov	fp, r1
 8009a26:	4606      	mov	r6, r0
 8009a28:	460f      	mov	r7, r1
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	a901      	add	r1, sp, #4
 8009a2e:	f7ff ff51 	bl	80098d4 <__b2d>
 8009a32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	eba3 0c02 	sub.w	ip, r3, r2
 8009a40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfd5      	itete	le
 8009a4e:	460a      	movle	r2, r1
 8009a50:	463a      	movgt	r2, r7
 8009a52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009a5a:	bfd8      	it	le
 8009a5c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009a60:	462b      	mov	r3, r5
 8009a62:	4602      	mov	r2, r0
 8009a64:	4659      	mov	r1, fp
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7f6 fe60 	bl	800072c <__aeabi_ddiv>
 8009a6c:	b003      	add	sp, #12
 8009a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009a74 <_mprec_log10>:
 8009a74:	2817      	cmp	r0, #23
 8009a76:	b5d0      	push	{r4, r6, r7, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	dc05      	bgt.n	8009a88 <_mprec_log10+0x14>
 8009a7c:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <_mprec_log10+0x2c>)
 8009a7e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8009a82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009a86:	bdd0      	pop	{r4, r6, r7, pc}
 8009a88:	2000      	movs	r0, #0
 8009a8a:	2600      	movs	r6, #0
 8009a8c:	4905      	ldr	r1, [pc, #20]	; (8009aa4 <_mprec_log10+0x30>)
 8009a8e:	4f06      	ldr	r7, [pc, #24]	; (8009aa8 <_mprec_log10+0x34>)
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	3c01      	subs	r4, #1
 8009a9a:	d1f9      	bne.n	8009a90 <_mprec_log10+0x1c>
 8009a9c:	e7f3      	b.n	8009a86 <_mprec_log10+0x12>
 8009a9e:	bf00      	nop
 8009aa0:	0800ba18 	.word	0x0800ba18
 8009aa4:	3ff00000 	.word	0x3ff00000
 8009aa8:	40240000 	.word	0x40240000

08009aac <__copybits>:
 8009aac:	3901      	subs	r1, #1
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	1149      	asrs	r1, r1, #5
 8009ab2:	6914      	ldr	r4, [r2, #16]
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	f102 0314 	add.w	r3, r2, #20
 8009aba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009abe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	d303      	bcc.n	8009ad0 <__copybits+0x24>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	428a      	cmp	r2, r1
 8009acc:	d305      	bcc.n	8009ada <__copybits+0x2e>
 8009ace:	bd10      	pop	{r4, pc}
 8009ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad4:	f840 2b04 	str.w	r2, [r0], #4
 8009ad8:	e7f3      	b.n	8009ac2 <__copybits+0x16>
 8009ada:	f842 3b04 	str.w	r3, [r2], #4
 8009ade:	e7f4      	b.n	8009aca <__copybits+0x1e>

08009ae0 <__any_on>:
 8009ae0:	f100 0214 	add.w	r2, r0, #20
 8009ae4:	6900      	ldr	r0, [r0, #16]
 8009ae6:	114b      	asrs	r3, r1, #5
 8009ae8:	4298      	cmp	r0, r3
 8009aea:	b510      	push	{r4, lr}
 8009aec:	db11      	blt.n	8009b12 <__any_on+0x32>
 8009aee:	dd0a      	ble.n	8009b06 <__any_on+0x26>
 8009af0:	f011 011f 	ands.w	r1, r1, #31
 8009af4:	d007      	beq.n	8009b06 <__any_on+0x26>
 8009af6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009afa:	fa24 f001 	lsr.w	r0, r4, r1
 8009afe:	fa00 f101 	lsl.w	r1, r0, r1
 8009b02:	428c      	cmp	r4, r1
 8009b04:	d10b      	bne.n	8009b1e <__any_on+0x3e>
 8009b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d803      	bhi.n	8009b16 <__any_on+0x36>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	bd10      	pop	{r4, pc}
 8009b12:	4603      	mov	r3, r0
 8009b14:	e7f7      	b.n	8009b06 <__any_on+0x26>
 8009b16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b1a:	2900      	cmp	r1, #0
 8009b1c:	d0f5      	beq.n	8009b0a <__any_on+0x2a>
 8009b1e:	2001      	movs	r0, #1
 8009b20:	e7f6      	b.n	8009b10 <__any_on+0x30>

08009b22 <_calloc_r>:
 8009b22:	b538      	push	{r3, r4, r5, lr}
 8009b24:	fb02 f401 	mul.w	r4, r2, r1
 8009b28:	4621      	mov	r1, r4
 8009b2a:	f000 f809 	bl	8009b40 <_malloc_r>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b118      	cbz	r0, 8009b3a <_calloc_r+0x18>
 8009b32:	4622      	mov	r2, r4
 8009b34:	2100      	movs	r1, #0
 8009b36:	f7fe f835 	bl	8007ba4 <memset>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009b40 <_malloc_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	1ccd      	adds	r5, r1, #3
 8009b44:	f025 0503 	bic.w	r5, r5, #3
 8009b48:	3508      	adds	r5, #8
 8009b4a:	2d0c      	cmp	r5, #12
 8009b4c:	bf38      	it	cc
 8009b4e:	250c      	movcc	r5, #12
 8009b50:	2d00      	cmp	r5, #0
 8009b52:	4606      	mov	r6, r0
 8009b54:	db01      	blt.n	8009b5a <_malloc_r+0x1a>
 8009b56:	42a9      	cmp	r1, r5
 8009b58:	d903      	bls.n	8009b62 <_malloc_r+0x22>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	6033      	str	r3, [r6, #0]
 8009b5e:	2000      	movs	r0, #0
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	f001 f9e8 	bl	800af36 <__malloc_lock>
 8009b66:	4a21      	ldr	r2, [pc, #132]	; (8009bec <_malloc_r+0xac>)
 8009b68:	6814      	ldr	r4, [r2, #0]
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	b991      	cbnz	r1, 8009b94 <_malloc_r+0x54>
 8009b6e:	4c20      	ldr	r4, [pc, #128]	; (8009bf0 <_malloc_r+0xb0>)
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	b91b      	cbnz	r3, 8009b7c <_malloc_r+0x3c>
 8009b74:	4630      	mov	r0, r6
 8009b76:	f000 fb3d 	bl	800a1f4 <_sbrk_r>
 8009b7a:	6020      	str	r0, [r4, #0]
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f000 fb38 	bl	800a1f4 <_sbrk_r>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d124      	bne.n	8009bd2 <_malloc_r+0x92>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	6033      	str	r3, [r6, #0]
 8009b8e:	f001 f9d3 	bl	800af38 <__malloc_unlock>
 8009b92:	e7e4      	b.n	8009b5e <_malloc_r+0x1e>
 8009b94:	680b      	ldr	r3, [r1, #0]
 8009b96:	1b5b      	subs	r3, r3, r5
 8009b98:	d418      	bmi.n	8009bcc <_malloc_r+0x8c>
 8009b9a:	2b0b      	cmp	r3, #11
 8009b9c:	d90f      	bls.n	8009bbe <_malloc_r+0x7e>
 8009b9e:	600b      	str	r3, [r1, #0]
 8009ba0:	18cc      	adds	r4, r1, r3
 8009ba2:	50cd      	str	r5, [r1, r3]
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f001 f9c7 	bl	800af38 <__malloc_unlock>
 8009baa:	f104 000b 	add.w	r0, r4, #11
 8009bae:	1d23      	adds	r3, r4, #4
 8009bb0:	f020 0007 	bic.w	r0, r0, #7
 8009bb4:	1ac3      	subs	r3, r0, r3
 8009bb6:	d0d3      	beq.n	8009b60 <_malloc_r+0x20>
 8009bb8:	425a      	negs	r2, r3
 8009bba:	50e2      	str	r2, [r4, r3]
 8009bbc:	e7d0      	b.n	8009b60 <_malloc_r+0x20>
 8009bbe:	684b      	ldr	r3, [r1, #4]
 8009bc0:	428c      	cmp	r4, r1
 8009bc2:	bf16      	itet	ne
 8009bc4:	6063      	strne	r3, [r4, #4]
 8009bc6:	6013      	streq	r3, [r2, #0]
 8009bc8:	460c      	movne	r4, r1
 8009bca:	e7eb      	b.n	8009ba4 <_malloc_r+0x64>
 8009bcc:	460c      	mov	r4, r1
 8009bce:	6849      	ldr	r1, [r1, #4]
 8009bd0:	e7cc      	b.n	8009b6c <_malloc_r+0x2c>
 8009bd2:	1cc4      	adds	r4, r0, #3
 8009bd4:	f024 0403 	bic.w	r4, r4, #3
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d005      	beq.n	8009be8 <_malloc_r+0xa8>
 8009bdc:	1a21      	subs	r1, r4, r0
 8009bde:	4630      	mov	r0, r6
 8009be0:	f000 fb08 	bl	800a1f4 <_sbrk_r>
 8009be4:	3001      	adds	r0, #1
 8009be6:	d0cf      	beq.n	8009b88 <_malloc_r+0x48>
 8009be8:	6025      	str	r5, [r4, #0]
 8009bea:	e7db      	b.n	8009ba4 <_malloc_r+0x64>
 8009bec:	2000061c 	.word	0x2000061c
 8009bf0:	20000620 	.word	0x20000620

08009bf4 <_realloc_r>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	4614      	mov	r4, r2
 8009bfa:	460e      	mov	r6, r1
 8009bfc:	b921      	cbnz	r1, 8009c08 <_realloc_r+0x14>
 8009bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c02:	4611      	mov	r1, r2
 8009c04:	f7ff bf9c 	b.w	8009b40 <_malloc_r>
 8009c08:	b922      	cbnz	r2, 8009c14 <_realloc_r+0x20>
 8009c0a:	f001 f997 	bl	800af3c <_free_r>
 8009c0e:	4625      	mov	r5, r4
 8009c10:	4628      	mov	r0, r5
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c14:	f001 f9de 	bl	800afd4 <_malloc_usable_size_r>
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d20f      	bcs.n	8009c3c <_realloc_r+0x48>
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f7ff ff8e 	bl	8009b40 <_malloc_r>
 8009c24:	4605      	mov	r5, r0
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d0f2      	beq.n	8009c10 <_realloc_r+0x1c>
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	f7ff fb58 	bl	80092e2 <memcpy>
 8009c32:	4631      	mov	r1, r6
 8009c34:	4638      	mov	r0, r7
 8009c36:	f001 f981 	bl	800af3c <_free_r>
 8009c3a:	e7e9      	b.n	8009c10 <_realloc_r+0x1c>
 8009c3c:	4635      	mov	r5, r6
 8009c3e:	e7e7      	b.n	8009c10 <_realloc_r+0x1c>

08009c40 <__ssputs_r>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	688e      	ldr	r6, [r1, #8]
 8009c46:	4682      	mov	sl, r0
 8009c48:	429e      	cmp	r6, r3
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	4690      	mov	r8, r2
 8009c4e:	4699      	mov	r9, r3
 8009c50:	d837      	bhi.n	8009cc2 <__ssputs_r+0x82>
 8009c52:	898a      	ldrh	r2, [r1, #12]
 8009c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c58:	d031      	beq.n	8009cbe <__ssputs_r+0x7e>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	6825      	ldr	r5, [r4, #0]
 8009c5e:	6909      	ldr	r1, [r1, #16]
 8009c60:	1a6f      	subs	r7, r5, r1
 8009c62:	6965      	ldr	r5, [r4, #20]
 8009c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c68:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c6c:	f109 0301 	add.w	r3, r9, #1
 8009c70:	443b      	add	r3, r7
 8009c72:	429d      	cmp	r5, r3
 8009c74:	bf38      	it	cc
 8009c76:	461d      	movcc	r5, r3
 8009c78:	0553      	lsls	r3, r2, #21
 8009c7a:	d530      	bpl.n	8009cde <__ssputs_r+0x9e>
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	f7ff ff5f 	bl	8009b40 <_malloc_r>
 8009c82:	4606      	mov	r6, r0
 8009c84:	b950      	cbnz	r0, 8009c9c <__ssputs_r+0x5c>
 8009c86:	230c      	movs	r3, #12
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8c:	f8ca 3000 	str.w	r3, [sl]
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9c:	463a      	mov	r2, r7
 8009c9e:	6921      	ldr	r1, [r4, #16]
 8009ca0:	f7ff fb1f 	bl	80092e2 <memcpy>
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cae:	81a3      	strh	r3, [r4, #12]
 8009cb0:	6126      	str	r6, [r4, #16]
 8009cb2:	443e      	add	r6, r7
 8009cb4:	6026      	str	r6, [r4, #0]
 8009cb6:	464e      	mov	r6, r9
 8009cb8:	6165      	str	r5, [r4, #20]
 8009cba:	1bed      	subs	r5, r5, r7
 8009cbc:	60a5      	str	r5, [r4, #8]
 8009cbe:	454e      	cmp	r6, r9
 8009cc0:	d900      	bls.n	8009cc4 <__ssputs_r+0x84>
 8009cc2:	464e      	mov	r6, r9
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	4641      	mov	r1, r8
 8009cc8:	6820      	ldr	r0, [r4, #0]
 8009cca:	f001 f91b 	bl	800af04 <memmove>
 8009cce:	68a3      	ldr	r3, [r4, #8]
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	1b9b      	subs	r3, r3, r6
 8009cd4:	60a3      	str	r3, [r4, #8]
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	441e      	add	r6, r3
 8009cda:	6026      	str	r6, [r4, #0]
 8009cdc:	e7dc      	b.n	8009c98 <__ssputs_r+0x58>
 8009cde:	462a      	mov	r2, r5
 8009ce0:	f7ff ff88 	bl	8009bf4 <_realloc_r>
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d1e2      	bne.n	8009cb0 <__ssputs_r+0x70>
 8009cea:	6921      	ldr	r1, [r4, #16]
 8009cec:	4650      	mov	r0, sl
 8009cee:	f001 f925 	bl	800af3c <_free_r>
 8009cf2:	e7c8      	b.n	8009c86 <__ssputs_r+0x46>

08009cf4 <_svfiprintf_r>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	461d      	mov	r5, r3
 8009cfa:	898b      	ldrh	r3, [r1, #12]
 8009cfc:	b09d      	sub	sp, #116	; 0x74
 8009cfe:	061f      	lsls	r7, r3, #24
 8009d00:	4680      	mov	r8, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	4616      	mov	r6, r2
 8009d06:	d50f      	bpl.n	8009d28 <_svfiprintf_r+0x34>
 8009d08:	690b      	ldr	r3, [r1, #16]
 8009d0a:	b96b      	cbnz	r3, 8009d28 <_svfiprintf_r+0x34>
 8009d0c:	2140      	movs	r1, #64	; 0x40
 8009d0e:	f7ff ff17 	bl	8009b40 <_malloc_r>
 8009d12:	6020      	str	r0, [r4, #0]
 8009d14:	6120      	str	r0, [r4, #16]
 8009d16:	b928      	cbnz	r0, 8009d24 <_svfiprintf_r+0x30>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	f8c8 3000 	str.w	r3, [r8]
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d22:	e0c8      	b.n	8009eb6 <_svfiprintf_r+0x1c2>
 8009d24:	2340      	movs	r3, #64	; 0x40
 8009d26:	6163      	str	r3, [r4, #20]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d32:	2330      	movs	r3, #48	; 0x30
 8009d34:	f04f 0b01 	mov.w	fp, #1
 8009d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d3c:	9503      	str	r5, [sp, #12]
 8009d3e:	4637      	mov	r7, r6
 8009d40:	463d      	mov	r5, r7
 8009d42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d46:	b10b      	cbz	r3, 8009d4c <_svfiprintf_r+0x58>
 8009d48:	2b25      	cmp	r3, #37	; 0x25
 8009d4a:	d13e      	bne.n	8009dca <_svfiprintf_r+0xd6>
 8009d4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d50:	d00b      	beq.n	8009d6a <_svfiprintf_r+0x76>
 8009d52:	4653      	mov	r3, sl
 8009d54:	4632      	mov	r2, r6
 8009d56:	4621      	mov	r1, r4
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f7ff ff71 	bl	8009c40 <__ssputs_r>
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f000 80a4 	beq.w	8009eac <_svfiprintf_r+0x1b8>
 8009d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d66:	4453      	add	r3, sl
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6a:	783b      	ldrb	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 809d 	beq.w	8009eac <_svfiprintf_r+0x1b8>
 8009d72:	2300      	movs	r3, #0
 8009d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d84:	931a      	str	r3, [sp, #104]	; 0x68
 8009d86:	462f      	mov	r7, r5
 8009d88:	2205      	movs	r2, #5
 8009d8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d8e:	4850      	ldr	r0, [pc, #320]	; (8009ed0 <_svfiprintf_r+0x1dc>)
 8009d90:	f001 f8aa 	bl	800aee8 <memchr>
 8009d94:	9b04      	ldr	r3, [sp, #16]
 8009d96:	b9d0      	cbnz	r0, 8009dce <_svfiprintf_r+0xda>
 8009d98:	06d9      	lsls	r1, r3, #27
 8009d9a:	bf44      	itt	mi
 8009d9c:	2220      	movmi	r2, #32
 8009d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009da2:	071a      	lsls	r2, r3, #28
 8009da4:	bf44      	itt	mi
 8009da6:	222b      	movmi	r2, #43	; 0x2b
 8009da8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dac:	782a      	ldrb	r2, [r5, #0]
 8009dae:	2a2a      	cmp	r2, #42	; 0x2a
 8009db0:	d015      	beq.n	8009dde <_svfiprintf_r+0xea>
 8009db2:	462f      	mov	r7, r5
 8009db4:	2000      	movs	r0, #0
 8009db6:	250a      	movs	r5, #10
 8009db8:	9a07      	ldr	r2, [sp, #28]
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc0:	3b30      	subs	r3, #48	; 0x30
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d94d      	bls.n	8009e62 <_svfiprintf_r+0x16e>
 8009dc6:	b1b8      	cbz	r0, 8009df8 <_svfiprintf_r+0x104>
 8009dc8:	e00f      	b.n	8009dea <_svfiprintf_r+0xf6>
 8009dca:	462f      	mov	r7, r5
 8009dcc:	e7b8      	b.n	8009d40 <_svfiprintf_r+0x4c>
 8009dce:	4a40      	ldr	r2, [pc, #256]	; (8009ed0 <_svfiprintf_r+0x1dc>)
 8009dd0:	463d      	mov	r5, r7
 8009dd2:	1a80      	subs	r0, r0, r2
 8009dd4:	fa0b f000 	lsl.w	r0, fp, r0
 8009dd8:	4318      	orrs	r0, r3
 8009dda:	9004      	str	r0, [sp, #16]
 8009ddc:	e7d3      	b.n	8009d86 <_svfiprintf_r+0x92>
 8009dde:	9a03      	ldr	r2, [sp, #12]
 8009de0:	1d11      	adds	r1, r2, #4
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	9103      	str	r1, [sp, #12]
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	db01      	blt.n	8009dee <_svfiprintf_r+0xfa>
 8009dea:	9207      	str	r2, [sp, #28]
 8009dec:	e004      	b.n	8009df8 <_svfiprintf_r+0x104>
 8009dee:	4252      	negs	r2, r2
 8009df0:	f043 0302 	orr.w	r3, r3, #2
 8009df4:	9207      	str	r2, [sp, #28]
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	783b      	ldrb	r3, [r7, #0]
 8009dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8009dfc:	d10c      	bne.n	8009e18 <_svfiprintf_r+0x124>
 8009dfe:	787b      	ldrb	r3, [r7, #1]
 8009e00:	2b2a      	cmp	r3, #42	; 0x2a
 8009e02:	d133      	bne.n	8009e6c <_svfiprintf_r+0x178>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	3702      	adds	r7, #2
 8009e08:	1d1a      	adds	r2, r3, #4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	9203      	str	r2, [sp, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfb8      	it	lt
 8009e12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	4d2e      	ldr	r5, [pc, #184]	; (8009ed4 <_svfiprintf_r+0x1e0>)
 8009e1a:	2203      	movs	r2, #3
 8009e1c:	7839      	ldrb	r1, [r7, #0]
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f001 f862 	bl	800aee8 <memchr>
 8009e24:	b138      	cbz	r0, 8009e36 <_svfiprintf_r+0x142>
 8009e26:	2340      	movs	r3, #64	; 0x40
 8009e28:	1b40      	subs	r0, r0, r5
 8009e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	3701      	adds	r7, #1
 8009e32:	4303      	orrs	r3, r0
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	7839      	ldrb	r1, [r7, #0]
 8009e38:	2206      	movs	r2, #6
 8009e3a:	4827      	ldr	r0, [pc, #156]	; (8009ed8 <_svfiprintf_r+0x1e4>)
 8009e3c:	1c7e      	adds	r6, r7, #1
 8009e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e42:	f001 f851 	bl	800aee8 <memchr>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d038      	beq.n	8009ebc <_svfiprintf_r+0x1c8>
 8009e4a:	4b24      	ldr	r3, [pc, #144]	; (8009edc <_svfiprintf_r+0x1e8>)
 8009e4c:	bb13      	cbnz	r3, 8009e94 <_svfiprintf_r+0x1a0>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	3307      	adds	r3, #7
 8009e52:	f023 0307 	bic.w	r3, r3, #7
 8009e56:	3308      	adds	r3, #8
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5c:	444b      	add	r3, r9
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	e76d      	b.n	8009d3e <_svfiprintf_r+0x4a>
 8009e62:	fb05 3202 	mla	r2, r5, r2, r3
 8009e66:	2001      	movs	r0, #1
 8009e68:	460f      	mov	r7, r1
 8009e6a:	e7a6      	b.n	8009dba <_svfiprintf_r+0xc6>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	250a      	movs	r5, #10
 8009e70:	4619      	mov	r1, r3
 8009e72:	3701      	adds	r7, #1
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	4638      	mov	r0, r7
 8009e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e7c:	3a30      	subs	r2, #48	; 0x30
 8009e7e:	2a09      	cmp	r2, #9
 8009e80:	d903      	bls.n	8009e8a <_svfiprintf_r+0x196>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0c8      	beq.n	8009e18 <_svfiprintf_r+0x124>
 8009e86:	9105      	str	r1, [sp, #20]
 8009e88:	e7c6      	b.n	8009e18 <_svfiprintf_r+0x124>
 8009e8a:	fb05 2101 	mla	r1, r5, r1, r2
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4607      	mov	r7, r0
 8009e92:	e7f0      	b.n	8009e76 <_svfiprintf_r+0x182>
 8009e94:	ab03      	add	r3, sp, #12
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <_svfiprintf_r+0x1ec>)
 8009e9c:	a904      	add	r1, sp, #16
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f3af 8000 	nop.w
 8009ea4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ea8:	4681      	mov	r9, r0
 8009eaa:	d1d6      	bne.n	8009e5a <_svfiprintf_r+0x166>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	065b      	lsls	r3, r3, #25
 8009eb0:	f53f af35 	bmi.w	8009d1e <_svfiprintf_r+0x2a>
 8009eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eb6:	b01d      	add	sp, #116	; 0x74
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	ab03      	add	r3, sp, #12
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <_svfiprintf_r+0x1ec>)
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	f000 f882 	bl	8009fd0 <_printf_i>
 8009ecc:	e7ea      	b.n	8009ea4 <_svfiprintf_r+0x1b0>
 8009ece:	bf00      	nop
 8009ed0:	0800baec 	.word	0x0800baec
 8009ed4:	0800baf2 	.word	0x0800baf2
 8009ed8:	0800baf6 	.word	0x0800baf6
 8009edc:	00000000 	.word	0x00000000
 8009ee0:	08009c41 	.word	0x08009c41

08009ee4 <_printf_common>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	4691      	mov	r9, r2
 8009eea:	461f      	mov	r7, r3
 8009eec:	688a      	ldr	r2, [r1, #8]
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	bfb8      	it	lt
 8009ef6:	4613      	movlt	r3, r2
 8009ef8:	f8c9 3000 	str.w	r3, [r9]
 8009efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f00:	460c      	mov	r4, r1
 8009f02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f06:	b112      	cbz	r2, 8009f0e <_printf_common+0x2a>
 8009f08:	3301      	adds	r3, #1
 8009f0a:	f8c9 3000 	str.w	r3, [r9]
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	0699      	lsls	r1, r3, #26
 8009f12:	bf42      	ittt	mi
 8009f14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f18:	3302      	addmi	r3, #2
 8009f1a:	f8c9 3000 	strmi.w	r3, [r9]
 8009f1e:	6825      	ldr	r5, [r4, #0]
 8009f20:	f015 0506 	ands.w	r5, r5, #6
 8009f24:	d107      	bne.n	8009f36 <_printf_common+0x52>
 8009f26:	f104 0a19 	add.w	sl, r4, #25
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8009f30:	1a9b      	subs	r3, r3, r2
 8009f32:	42ab      	cmp	r3, r5
 8009f34:	dc29      	bgt.n	8009f8a <_printf_common+0xa6>
 8009f36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f3a:	6822      	ldr	r2, [r4, #0]
 8009f3c:	3300      	adds	r3, #0
 8009f3e:	bf18      	it	ne
 8009f40:	2301      	movne	r3, #1
 8009f42:	0692      	lsls	r2, r2, #26
 8009f44:	d42e      	bmi.n	8009fa4 <_printf_common+0xc0>
 8009f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	47c0      	blx	r8
 8009f50:	3001      	adds	r0, #1
 8009f52:	d021      	beq.n	8009f98 <_printf_common+0xb4>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	68e5      	ldr	r5, [r4, #12]
 8009f58:	f003 0306 	and.w	r3, r3, #6
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	bf18      	it	ne
 8009f60:	2500      	movne	r5, #0
 8009f62:	f8d9 2000 	ldr.w	r2, [r9]
 8009f66:	f04f 0900 	mov.w	r9, #0
 8009f6a:	bf08      	it	eq
 8009f6c:	1aad      	subeq	r5, r5, r2
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	bf08      	it	eq
 8009f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	bfc4      	itt	gt
 8009f7c:	1a9b      	subgt	r3, r3, r2
 8009f7e:	18ed      	addgt	r5, r5, r3
 8009f80:	341a      	adds	r4, #26
 8009f82:	454d      	cmp	r5, r9
 8009f84:	d11a      	bne.n	8009fbc <_printf_common+0xd8>
 8009f86:	2000      	movs	r0, #0
 8009f88:	e008      	b.n	8009f9c <_printf_common+0xb8>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4652      	mov	r2, sl
 8009f8e:	4639      	mov	r1, r7
 8009f90:	4630      	mov	r0, r6
 8009f92:	47c0      	blx	r8
 8009f94:	3001      	adds	r0, #1
 8009f96:	d103      	bne.n	8009fa0 <_printf_common+0xbc>
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	e7c2      	b.n	8009f2a <_printf_common+0x46>
 8009fa4:	2030      	movs	r0, #48	; 0x30
 8009fa6:	18e1      	adds	r1, r4, r3
 8009fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fb2:	4422      	add	r2, r4
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fba:	e7c4      	b.n	8009f46 <_printf_common+0x62>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	47c0      	blx	r8
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d0e6      	beq.n	8009f98 <_printf_common+0xb4>
 8009fca:	f109 0901 	add.w	r9, r9, #1
 8009fce:	e7d8      	b.n	8009f82 <_printf_common+0x9e>

08009fd0 <_printf_i>:
 8009fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009fd8:	460c      	mov	r4, r1
 8009fda:	7e09      	ldrb	r1, [r1, #24]
 8009fdc:	b085      	sub	sp, #20
 8009fde:	296e      	cmp	r1, #110	; 0x6e
 8009fe0:	4617      	mov	r7, r2
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	4698      	mov	r8, r3
 8009fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fe8:	f000 80b3 	beq.w	800a152 <_printf_i+0x182>
 8009fec:	d822      	bhi.n	800a034 <_printf_i+0x64>
 8009fee:	2963      	cmp	r1, #99	; 0x63
 8009ff0:	d036      	beq.n	800a060 <_printf_i+0x90>
 8009ff2:	d80a      	bhi.n	800a00a <_printf_i+0x3a>
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	f000 80b9 	beq.w	800a16c <_printf_i+0x19c>
 8009ffa:	2958      	cmp	r1, #88	; 0x58
 8009ffc:	f000 8083 	beq.w	800a106 <_printf_i+0x136>
 800a000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a004:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a008:	e032      	b.n	800a070 <_printf_i+0xa0>
 800a00a:	2964      	cmp	r1, #100	; 0x64
 800a00c:	d001      	beq.n	800a012 <_printf_i+0x42>
 800a00e:	2969      	cmp	r1, #105	; 0x69
 800a010:	d1f6      	bne.n	800a000 <_printf_i+0x30>
 800a012:	6820      	ldr	r0, [r4, #0]
 800a014:	6813      	ldr	r3, [r2, #0]
 800a016:	0605      	lsls	r5, r0, #24
 800a018:	f103 0104 	add.w	r1, r3, #4
 800a01c:	d52a      	bpl.n	800a074 <_printf_i+0xa4>
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	da03      	bge.n	800a02e <_printf_i+0x5e>
 800a026:	222d      	movs	r2, #45	; 0x2d
 800a028:	425b      	negs	r3, r3
 800a02a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a02e:	486f      	ldr	r0, [pc, #444]	; (800a1ec <_printf_i+0x21c>)
 800a030:	220a      	movs	r2, #10
 800a032:	e039      	b.n	800a0a8 <_printf_i+0xd8>
 800a034:	2973      	cmp	r1, #115	; 0x73
 800a036:	f000 809d 	beq.w	800a174 <_printf_i+0x1a4>
 800a03a:	d808      	bhi.n	800a04e <_printf_i+0x7e>
 800a03c:	296f      	cmp	r1, #111	; 0x6f
 800a03e:	d020      	beq.n	800a082 <_printf_i+0xb2>
 800a040:	2970      	cmp	r1, #112	; 0x70
 800a042:	d1dd      	bne.n	800a000 <_printf_i+0x30>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	f043 0320 	orr.w	r3, r3, #32
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	e003      	b.n	800a056 <_printf_i+0x86>
 800a04e:	2975      	cmp	r1, #117	; 0x75
 800a050:	d017      	beq.n	800a082 <_printf_i+0xb2>
 800a052:	2978      	cmp	r1, #120	; 0x78
 800a054:	d1d4      	bne.n	800a000 <_printf_i+0x30>
 800a056:	2378      	movs	r3, #120	; 0x78
 800a058:	4865      	ldr	r0, [pc, #404]	; (800a1f0 <_printf_i+0x220>)
 800a05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a05e:	e055      	b.n	800a10c <_printf_i+0x13c>
 800a060:	6813      	ldr	r3, [r2, #0]
 800a062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6011      	str	r1, [r2, #0]
 800a06c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a070:	2301      	movs	r3, #1
 800a072:	e08c      	b.n	800a18e <_printf_i+0x1be>
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a07a:	6011      	str	r1, [r2, #0]
 800a07c:	bf18      	it	ne
 800a07e:	b21b      	sxthne	r3, r3
 800a080:	e7cf      	b.n	800a022 <_printf_i+0x52>
 800a082:	6813      	ldr	r3, [r2, #0]
 800a084:	6825      	ldr	r5, [r4, #0]
 800a086:	1d18      	adds	r0, r3, #4
 800a088:	6010      	str	r0, [r2, #0]
 800a08a:	0628      	lsls	r0, r5, #24
 800a08c:	d501      	bpl.n	800a092 <_printf_i+0xc2>
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	e002      	b.n	800a098 <_printf_i+0xc8>
 800a092:	0668      	lsls	r0, r5, #25
 800a094:	d5fb      	bpl.n	800a08e <_printf_i+0xbe>
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	296f      	cmp	r1, #111	; 0x6f
 800a09a:	bf14      	ite	ne
 800a09c:	220a      	movne	r2, #10
 800a09e:	2208      	moveq	r2, #8
 800a0a0:	4852      	ldr	r0, [pc, #328]	; (800a1ec <_printf_i+0x21c>)
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0a8:	6865      	ldr	r5, [r4, #4]
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	60a5      	str	r5, [r4, #8]
 800a0ae:	f2c0 8095 	blt.w	800a1dc <_printf_i+0x20c>
 800a0b2:	6821      	ldr	r1, [r4, #0]
 800a0b4:	f021 0104 	bic.w	r1, r1, #4
 800a0b8:	6021      	str	r1, [r4, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d13d      	bne.n	800a13a <_printf_i+0x16a>
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	f040 808e 	bne.w	800a1e0 <_printf_i+0x210>
 800a0c4:	4665      	mov	r5, ip
 800a0c6:	2a08      	cmp	r2, #8
 800a0c8:	d10b      	bne.n	800a0e2 <_printf_i+0x112>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	07db      	lsls	r3, r3, #31
 800a0ce:	d508      	bpl.n	800a0e2 <_printf_i+0x112>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	6862      	ldr	r2, [r4, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	bfde      	ittt	le
 800a0d8:	2330      	movle	r3, #48	; 0x30
 800a0da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0e2:	ebac 0305 	sub.w	r3, ip, r5
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	f8cd 8000 	str.w	r8, [sp]
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	aa03      	add	r2, sp, #12
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7ff fef6 	bl	8009ee4 <_printf_common>
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d14d      	bne.n	800a198 <_printf_i+0x1c8>
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a100:	b005      	add	sp, #20
 800a102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a106:	4839      	ldr	r0, [pc, #228]	; (800a1ec <_printf_i+0x21c>)
 800a108:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a10c:	6813      	ldr	r3, [r2, #0]
 800a10e:	6821      	ldr	r1, [r4, #0]
 800a110:	1d1d      	adds	r5, r3, #4
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6015      	str	r5, [r2, #0]
 800a116:	060a      	lsls	r2, r1, #24
 800a118:	d50b      	bpl.n	800a132 <_printf_i+0x162>
 800a11a:	07ca      	lsls	r2, r1, #31
 800a11c:	bf44      	itt	mi
 800a11e:	f041 0120 	orrmi.w	r1, r1, #32
 800a122:	6021      	strmi	r1, [r4, #0]
 800a124:	b91b      	cbnz	r3, 800a12e <_printf_i+0x15e>
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	f022 0220 	bic.w	r2, r2, #32
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	2210      	movs	r2, #16
 800a130:	e7b7      	b.n	800a0a2 <_printf_i+0xd2>
 800a132:	064d      	lsls	r5, r1, #25
 800a134:	bf48      	it	mi
 800a136:	b29b      	uxthmi	r3, r3
 800a138:	e7ef      	b.n	800a11a <_printf_i+0x14a>
 800a13a:	4665      	mov	r5, ip
 800a13c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a140:	fb02 3311 	mls	r3, r2, r1, r3
 800a144:	5cc3      	ldrb	r3, [r0, r3]
 800a146:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a14a:	460b      	mov	r3, r1
 800a14c:	2900      	cmp	r1, #0
 800a14e:	d1f5      	bne.n	800a13c <_printf_i+0x16c>
 800a150:	e7b9      	b.n	800a0c6 <_printf_i+0xf6>
 800a152:	6813      	ldr	r3, [r2, #0]
 800a154:	6825      	ldr	r5, [r4, #0]
 800a156:	1d18      	adds	r0, r3, #4
 800a158:	6961      	ldr	r1, [r4, #20]
 800a15a:	6010      	str	r0, [r2, #0]
 800a15c:	0628      	lsls	r0, r5, #24
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	d501      	bpl.n	800a166 <_printf_i+0x196>
 800a162:	6019      	str	r1, [r3, #0]
 800a164:	e002      	b.n	800a16c <_printf_i+0x19c>
 800a166:	066a      	lsls	r2, r5, #25
 800a168:	d5fb      	bpl.n	800a162 <_printf_i+0x192>
 800a16a:	8019      	strh	r1, [r3, #0]
 800a16c:	2300      	movs	r3, #0
 800a16e:	4665      	mov	r5, ip
 800a170:	6123      	str	r3, [r4, #16]
 800a172:	e7b9      	b.n	800a0e8 <_printf_i+0x118>
 800a174:	6813      	ldr	r3, [r2, #0]
 800a176:	1d19      	adds	r1, r3, #4
 800a178:	6011      	str	r1, [r2, #0]
 800a17a:	681d      	ldr	r5, [r3, #0]
 800a17c:	6862      	ldr	r2, [r4, #4]
 800a17e:	2100      	movs	r1, #0
 800a180:	4628      	mov	r0, r5
 800a182:	f000 feb1 	bl	800aee8 <memchr>
 800a186:	b108      	cbz	r0, 800a18c <_printf_i+0x1bc>
 800a188:	1b40      	subs	r0, r0, r5
 800a18a:	6060      	str	r0, [r4, #4]
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	2300      	movs	r3, #0
 800a192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a196:	e7a7      	b.n	800a0e8 <_printf_i+0x118>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	462a      	mov	r2, r5
 800a19c:	4639      	mov	r1, r7
 800a19e:	4630      	mov	r0, r6
 800a1a0:	47c0      	blx	r8
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d0aa      	beq.n	800a0fc <_printf_i+0x12c>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	079b      	lsls	r3, r3, #30
 800a1aa:	d413      	bmi.n	800a1d4 <_printf_i+0x204>
 800a1ac:	68e0      	ldr	r0, [r4, #12]
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	4298      	cmp	r0, r3
 800a1b2:	bfb8      	it	lt
 800a1b4:	4618      	movlt	r0, r3
 800a1b6:	e7a3      	b.n	800a100 <_printf_i+0x130>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	464a      	mov	r2, r9
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4630      	mov	r0, r6
 800a1c0:	47c0      	blx	r8
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d09a      	beq.n	800a0fc <_printf_i+0x12c>
 800a1c6:	3501      	adds	r5, #1
 800a1c8:	68e3      	ldr	r3, [r4, #12]
 800a1ca:	9a03      	ldr	r2, [sp, #12]
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	42ab      	cmp	r3, r5
 800a1d0:	dcf2      	bgt.n	800a1b8 <_printf_i+0x1e8>
 800a1d2:	e7eb      	b.n	800a1ac <_printf_i+0x1dc>
 800a1d4:	2500      	movs	r5, #0
 800a1d6:	f104 0919 	add.w	r9, r4, #25
 800a1da:	e7f5      	b.n	800a1c8 <_printf_i+0x1f8>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1ac      	bne.n	800a13a <_printf_i+0x16a>
 800a1e0:	7803      	ldrb	r3, [r0, #0]
 800a1e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1ea:	e76c      	b.n	800a0c6 <_printf_i+0xf6>
 800a1ec:	0800bafd 	.word	0x0800bafd
 800a1f0:	0800bb0e 	.word	0x0800bb0e

0800a1f4 <_sbrk_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4c05      	ldr	r4, [pc, #20]	; (800a210 <_sbrk_r+0x1c>)
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	f7f9 f9b8 	bl	8003574 <_sbrk>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_sbrk_r+0x1a>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_sbrk_r+0x1a>
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	200008e4 	.word	0x200008e4

0800a214 <strncmp>:
 800a214:	b510      	push	{r4, lr}
 800a216:	b16a      	cbz	r2, 800a234 <strncmp+0x20>
 800a218:	3901      	subs	r1, #1
 800a21a:	1884      	adds	r4, r0, r2
 800a21c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a220:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a224:	4293      	cmp	r3, r2
 800a226:	d103      	bne.n	800a230 <strncmp+0x1c>
 800a228:	42a0      	cmp	r0, r4
 800a22a:	d001      	beq.n	800a230 <strncmp+0x1c>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1f5      	bne.n	800a21c <strncmp+0x8>
 800a230:	1a98      	subs	r0, r3, r2
 800a232:	bd10      	pop	{r4, pc}
 800a234:	4610      	mov	r0, r2
 800a236:	e7fc      	b.n	800a232 <strncmp+0x1e>

0800a238 <__ascii_wctomb>:
 800a238:	b149      	cbz	r1, 800a24e <__ascii_wctomb+0x16>
 800a23a:	2aff      	cmp	r2, #255	; 0xff
 800a23c:	bf8b      	itete	hi
 800a23e:	238a      	movhi	r3, #138	; 0x8a
 800a240:	700a      	strbls	r2, [r1, #0]
 800a242:	6003      	strhi	r3, [r0, #0]
 800a244:	2001      	movls	r0, #1
 800a246:	bf88      	it	hi
 800a248:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a24c:	4770      	bx	lr
 800a24e:	4608      	mov	r0, r1
 800a250:	4770      	bx	lr

0800a252 <quorem>:
 800a252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a256:	6903      	ldr	r3, [r0, #16]
 800a258:	690c      	ldr	r4, [r1, #16]
 800a25a:	4680      	mov	r8, r0
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	f2c0 8084 	blt.w	800a36a <quorem+0x118>
 800a262:	3c01      	subs	r4, #1
 800a264:	f101 0714 	add.w	r7, r1, #20
 800a268:	f100 0614 	add.w	r6, r0, #20
 800a26c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a270:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a274:	3501      	adds	r5, #1
 800a276:	fbb0 f5f5 	udiv	r5, r0, r5
 800a27a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a27e:	eb06 030c 	add.w	r3, r6, ip
 800a282:	eb07 090c 	add.w	r9, r7, ip
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	b39d      	cbz	r5, 800a2f2 <quorem+0xa0>
 800a28a:	f04f 0a00 	mov.w	sl, #0
 800a28e:	4638      	mov	r0, r7
 800a290:	46b6      	mov	lr, r6
 800a292:	46d3      	mov	fp, sl
 800a294:	f850 2b04 	ldr.w	r2, [r0], #4
 800a298:	b293      	uxth	r3, r2
 800a29a:	fb05 a303 	mla	r3, r5, r3, sl
 800a29e:	0c12      	lsrs	r2, r2, #16
 800a2a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2a4:	fb05 a202 	mla	r2, r5, r2, sl
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	ebab 0303 	sub.w	r3, fp, r3
 800a2ae:	f8de b000 	ldr.w	fp, [lr]
 800a2b2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a2b6:	fa1f fb8b 	uxth.w	fp, fp
 800a2ba:	445b      	add	r3, fp
 800a2bc:	fa1f fb82 	uxth.w	fp, r2
 800a2c0:	f8de 2000 	ldr.w	r2, [lr]
 800a2c4:	4581      	cmp	r9, r0
 800a2c6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a2ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a2d8:	f84e 3b04 	str.w	r3, [lr], #4
 800a2dc:	d2da      	bcs.n	800a294 <quorem+0x42>
 800a2de:	f856 300c 	ldr.w	r3, [r6, ip]
 800a2e2:	b933      	cbnz	r3, 800a2f2 <quorem+0xa0>
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	3b04      	subs	r3, #4
 800a2e8:	429e      	cmp	r6, r3
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	d331      	bcc.n	800a352 <quorem+0x100>
 800a2ee:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f7ff fa52 	bl	800979c <__mcmp>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	db26      	blt.n	800a34a <quorem+0xf8>
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f04f 0c00 	mov.w	ip, #0
 800a302:	3501      	adds	r5, #1
 800a304:	f857 1b04 	ldr.w	r1, [r7], #4
 800a308:	f8d0 e000 	ldr.w	lr, [r0]
 800a30c:	b28b      	uxth	r3, r1
 800a30e:	ebac 0303 	sub.w	r3, ip, r3
 800a312:	fa1f f28e 	uxth.w	r2, lr
 800a316:	4413      	add	r3, r2
 800a318:	0c0a      	lsrs	r2, r1, #16
 800a31a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a31e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a322:	b29b      	uxth	r3, r3
 800a324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a328:	45b9      	cmp	r9, r7
 800a32a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a32e:	f840 3b04 	str.w	r3, [r0], #4
 800a332:	d2e7      	bcs.n	800a304 <quorem+0xb2>
 800a334:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a338:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a33c:	b92a      	cbnz	r2, 800a34a <quorem+0xf8>
 800a33e:	3b04      	subs	r3, #4
 800a340:	429e      	cmp	r6, r3
 800a342:	461a      	mov	r2, r3
 800a344:	d30b      	bcc.n	800a35e <quorem+0x10c>
 800a346:	f8c8 4010 	str.w	r4, [r8, #16]
 800a34a:	4628      	mov	r0, r5
 800a34c:	b003      	add	sp, #12
 800a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a352:	6812      	ldr	r2, [r2, #0]
 800a354:	3b04      	subs	r3, #4
 800a356:	2a00      	cmp	r2, #0
 800a358:	d1c9      	bne.n	800a2ee <quorem+0x9c>
 800a35a:	3c01      	subs	r4, #1
 800a35c:	e7c4      	b.n	800a2e8 <quorem+0x96>
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	3b04      	subs	r3, #4
 800a362:	2a00      	cmp	r2, #0
 800a364:	d1ef      	bne.n	800a346 <quorem+0xf4>
 800a366:	3c01      	subs	r4, #1
 800a368:	e7ea      	b.n	800a340 <quorem+0xee>
 800a36a:	2000      	movs	r0, #0
 800a36c:	e7ee      	b.n	800a34c <quorem+0xfa>
	...

0800a370 <_dtoa_r>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4616      	mov	r6, r2
 800a376:	461f      	mov	r7, r3
 800a378:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a37a:	b095      	sub	sp, #84	; 0x54
 800a37c:	4604      	mov	r4, r0
 800a37e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a382:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a386:	b93d      	cbnz	r5, 800a398 <_dtoa_r+0x28>
 800a388:	2010      	movs	r0, #16
 800a38a:	f000 fda5 	bl	800aed8 <malloc>
 800a38e:	6260      	str	r0, [r4, #36]	; 0x24
 800a390:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a394:	6005      	str	r5, [r0, #0]
 800a396:	60c5      	str	r5, [r0, #12]
 800a398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a39a:	6819      	ldr	r1, [r3, #0]
 800a39c:	b151      	cbz	r1, 800a3b4 <_dtoa_r+0x44>
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	4093      	lsls	r3, r2
 800a3a4:	604a      	str	r2, [r1, #4]
 800a3a6:	608b      	str	r3, [r1, #8]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7fe ffd9 	bl	8009360 <_Bfree>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	1e3b      	subs	r3, r7, #0
 800a3b6:	bfaf      	iteee	ge
 800a3b8:	2300      	movge	r3, #0
 800a3ba:	2201      	movlt	r2, #1
 800a3bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a3c0:	9303      	strlt	r3, [sp, #12]
 800a3c2:	bfac      	ite	ge
 800a3c4:	f8c8 3000 	strge.w	r3, [r8]
 800a3c8:	f8c8 2000 	strlt.w	r2, [r8]
 800a3cc:	4bae      	ldr	r3, [pc, #696]	; (800a688 <_dtoa_r+0x318>)
 800a3ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a3d2:	ea33 0308 	bics.w	r3, r3, r8
 800a3d6:	d11b      	bne.n	800a410 <_dtoa_r+0xa0>
 800a3d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	9b02      	ldr	r3, [sp, #8]
 800a3e2:	b923      	cbnz	r3, 800a3ee <_dtoa_r+0x7e>
 800a3e4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	f000 8545 	beq.w	800ae78 <_dtoa_r+0xb08>
 800a3ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3f0:	b953      	cbnz	r3, 800a408 <_dtoa_r+0x98>
 800a3f2:	4ba6      	ldr	r3, [pc, #664]	; (800a68c <_dtoa_r+0x31c>)
 800a3f4:	e021      	b.n	800a43a <_dtoa_r+0xca>
 800a3f6:	4ba6      	ldr	r3, [pc, #664]	; (800a690 <_dtoa_r+0x320>)
 800a3f8:	9306      	str	r3, [sp, #24]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	9806      	ldr	r0, [sp, #24]
 800a402:	b015      	add	sp, #84	; 0x54
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	4ba0      	ldr	r3, [pc, #640]	; (800a68c <_dtoa_r+0x31c>)
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	3303      	adds	r3, #3
 800a40e:	e7f5      	b.n	800a3fc <_dtoa_r+0x8c>
 800a410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a414:	2200      	movs	r2, #0
 800a416:	2300      	movs	r3, #0
 800a418:	4630      	mov	r0, r6
 800a41a:	4639      	mov	r1, r7
 800a41c:	f7f6 fac4 	bl	80009a8 <__aeabi_dcmpeq>
 800a420:	4682      	mov	sl, r0
 800a422:	b160      	cbz	r0, 800a43e <_dtoa_r+0xce>
 800a424:	2301      	movs	r3, #1
 800a426:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a428:	6013      	str	r3, [r2, #0]
 800a42a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 8520 	beq.w	800ae72 <_dtoa_r+0xb02>
 800a432:	4b98      	ldr	r3, [pc, #608]	; (800a694 <_dtoa_r+0x324>)
 800a434:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	3b01      	subs	r3, #1
 800a43a:	9306      	str	r3, [sp, #24]
 800a43c:	e7e0      	b.n	800a400 <_dtoa_r+0x90>
 800a43e:	ab12      	add	r3, sp, #72	; 0x48
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	ab13      	add	r3, sp, #76	; 0x4c
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4632      	mov	r2, r6
 800a448:	463b      	mov	r3, r7
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7ff fa94 	bl	8009978 <__d2b>
 800a450:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a454:	4683      	mov	fp, r0
 800a456:	2d00      	cmp	r5, #0
 800a458:	d07d      	beq.n	800a556 <_dtoa_r+0x1e6>
 800a45a:	46b0      	mov	r8, r6
 800a45c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a460:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a464:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a468:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a46c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a470:	2200      	movs	r2, #0
 800a472:	4b89      	ldr	r3, [pc, #548]	; (800a698 <_dtoa_r+0x328>)
 800a474:	4640      	mov	r0, r8
 800a476:	4649      	mov	r1, r9
 800a478:	f7f5 fe76 	bl	8000168 <__aeabi_dsub>
 800a47c:	a37c      	add	r3, pc, #496	; (adr r3, 800a670 <_dtoa_r+0x300>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f6 f829 	bl	80004d8 <__aeabi_dmul>
 800a486:	a37c      	add	r3, pc, #496	; (adr r3, 800a678 <_dtoa_r+0x308>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f7f5 fe6e 	bl	800016c <__adddf3>
 800a490:	4606      	mov	r6, r0
 800a492:	4628      	mov	r0, r5
 800a494:	460f      	mov	r7, r1
 800a496:	f7f5 ffb5 	bl	8000404 <__aeabi_i2d>
 800a49a:	a379      	add	r3, pc, #484	; (adr r3, 800a680 <_dtoa_r+0x310>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f7f6 f81a 	bl	80004d8 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f5 fe5e 	bl	800016c <__adddf3>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	460f      	mov	r7, r1
 800a4b4:	f7f6 faaa 	bl	8000a0c <__aeabi_d2iz>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4682      	mov	sl, r0
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f6 fa7b 	bl	80009bc <__aeabi_dcmplt>
 800a4c6:	b148      	cbz	r0, 800a4dc <_dtoa_r+0x16c>
 800a4c8:	4650      	mov	r0, sl
 800a4ca:	f7f5 ff9b 	bl	8000404 <__aeabi_i2d>
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	463b      	mov	r3, r7
 800a4d2:	f7f6 fa69 	bl	80009a8 <__aeabi_dcmpeq>
 800a4d6:	b908      	cbnz	r0, 800a4dc <_dtoa_r+0x16c>
 800a4d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a4dc:	f1ba 0f16 	cmp.w	sl, #22
 800a4e0:	d85a      	bhi.n	800a598 <_dtoa_r+0x228>
 800a4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4e6:	496d      	ldr	r1, [pc, #436]	; (800a69c <_dtoa_r+0x32c>)
 800a4e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4f0:	f7f6 fa82 	bl	80009f8 <__aeabi_dcmpgt>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d051      	beq.n	800a59c <_dtoa_r+0x22c>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a4fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a502:	1b5d      	subs	r5, r3, r5
 800a504:	1e6b      	subs	r3, r5, #1
 800a506:	9307      	str	r3, [sp, #28]
 800a508:	bf43      	ittte	mi
 800a50a:	2300      	movmi	r3, #0
 800a50c:	f1c5 0901 	rsbmi	r9, r5, #1
 800a510:	9307      	strmi	r3, [sp, #28]
 800a512:	f04f 0900 	movpl.w	r9, #0
 800a516:	f1ba 0f00 	cmp.w	sl, #0
 800a51a:	db41      	blt.n	800a5a0 <_dtoa_r+0x230>
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a522:	4453      	add	r3, sl
 800a524:	9307      	str	r3, [sp, #28]
 800a526:	2300      	movs	r3, #0
 800a528:	9308      	str	r3, [sp, #32]
 800a52a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	f200 808f 	bhi.w	800a650 <_dtoa_r+0x2e0>
 800a532:	2b05      	cmp	r3, #5
 800a534:	bfc4      	itt	gt
 800a536:	3b04      	subgt	r3, #4
 800a538:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a53a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a53c:	bfc8      	it	gt
 800a53e:	2500      	movgt	r5, #0
 800a540:	f1a3 0302 	sub.w	r3, r3, #2
 800a544:	bfd8      	it	le
 800a546:	2501      	movle	r5, #1
 800a548:	2b03      	cmp	r3, #3
 800a54a:	f200 808d 	bhi.w	800a668 <_dtoa_r+0x2f8>
 800a54e:	e8df f003 	tbb	[pc, r3]
 800a552:	7d7b      	.short	0x7d7b
 800a554:	6f2f      	.short	0x6f2f
 800a556:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a55a:	441d      	add	r5, r3
 800a55c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a560:	2820      	cmp	r0, #32
 800a562:	dd13      	ble.n	800a58c <_dtoa_r+0x21c>
 800a564:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	fa08 f800 	lsl.w	r8, r8, r0
 800a56e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a572:	fa23 f000 	lsr.w	r0, r3, r0
 800a576:	ea48 0000 	orr.w	r0, r8, r0
 800a57a:	f7f5 ff33 	bl	80003e4 <__aeabi_ui2d>
 800a57e:	2301      	movs	r3, #1
 800a580:	4680      	mov	r8, r0
 800a582:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a586:	3d01      	subs	r5, #1
 800a588:	9310      	str	r3, [sp, #64]	; 0x40
 800a58a:	e771      	b.n	800a470 <_dtoa_r+0x100>
 800a58c:	9b02      	ldr	r3, [sp, #8]
 800a58e:	f1c0 0020 	rsb	r0, r0, #32
 800a592:	fa03 f000 	lsl.w	r0, r3, r0
 800a596:	e7f0      	b.n	800a57a <_dtoa_r+0x20a>
 800a598:	2301      	movs	r3, #1
 800a59a:	e7b0      	b.n	800a4fe <_dtoa_r+0x18e>
 800a59c:	900d      	str	r0, [sp, #52]	; 0x34
 800a59e:	e7af      	b.n	800a500 <_dtoa_r+0x190>
 800a5a0:	f1ca 0300 	rsb	r3, sl, #0
 800a5a4:	9308      	str	r3, [sp, #32]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	eba9 090a 	sub.w	r9, r9, sl
 800a5ac:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ae:	e7bc      	b.n	800a52a <_dtoa_r+0x1ba>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dd74      	ble.n	800a6a4 <_dtoa_r+0x334>
 800a5ba:	4698      	mov	r8, r3
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5c2:	6072      	str	r2, [r6, #4]
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	f102 0014 	add.w	r0, r2, #20
 800a5ca:	4298      	cmp	r0, r3
 800a5cc:	6871      	ldr	r1, [r6, #4]
 800a5ce:	d96e      	bls.n	800a6ae <_dtoa_r+0x33e>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f7fe fe91 	bl	80092f8 <_Balloc>
 800a5d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5d8:	6030      	str	r0, [r6, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f1b8 0f0e 	cmp.w	r8, #14
 800a5e0:	9306      	str	r3, [sp, #24]
 800a5e2:	f200 80ed 	bhi.w	800a7c0 <_dtoa_r+0x450>
 800a5e6:	2d00      	cmp	r5, #0
 800a5e8:	f000 80ea 	beq.w	800a7c0 <_dtoa_r+0x450>
 800a5ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5f0:	f1ba 0f00 	cmp.w	sl, #0
 800a5f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a5f8:	dd77      	ble.n	800a6ea <_dtoa_r+0x37a>
 800a5fa:	4a28      	ldr	r2, [pc, #160]	; (800a69c <_dtoa_r+0x32c>)
 800a5fc:	f00a 030f 	and.w	r3, sl, #15
 800a600:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a604:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a608:	06f0      	lsls	r0, r6, #27
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a612:	d568      	bpl.n	800a6e6 <_dtoa_r+0x376>
 800a614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a618:	4b21      	ldr	r3, [pc, #132]	; (800a6a0 <_dtoa_r+0x330>)
 800a61a:	2503      	movs	r5, #3
 800a61c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a620:	f7f6 f884 	bl	800072c <__aeabi_ddiv>
 800a624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a628:	f006 060f 	and.w	r6, r6, #15
 800a62c:	4f1c      	ldr	r7, [pc, #112]	; (800a6a0 <_dtoa_r+0x330>)
 800a62e:	e04f      	b.n	800a6d0 <_dtoa_r+0x360>
 800a630:	2301      	movs	r3, #1
 800a632:	9309      	str	r3, [sp, #36]	; 0x24
 800a634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a636:	4453      	add	r3, sl
 800a638:	f103 0801 	add.w	r8, r3, #1
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	4643      	mov	r3, r8
 800a640:	2b01      	cmp	r3, #1
 800a642:	bfb8      	it	lt
 800a644:	2301      	movlt	r3, #1
 800a646:	e7ba      	b.n	800a5be <_dtoa_r+0x24e>
 800a648:	2300      	movs	r3, #0
 800a64a:	e7b2      	b.n	800a5b2 <_dtoa_r+0x242>
 800a64c:	2300      	movs	r3, #0
 800a64e:	e7f0      	b.n	800a632 <_dtoa_r+0x2c2>
 800a650:	2501      	movs	r5, #1
 800a652:	2300      	movs	r3, #0
 800a654:	9509      	str	r5, [sp, #36]	; 0x24
 800a656:	931e      	str	r3, [sp, #120]	; 0x78
 800a658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a65c:	2200      	movs	r2, #0
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	4698      	mov	r8, r3
 800a662:	2312      	movs	r3, #18
 800a664:	921f      	str	r2, [sp, #124]	; 0x7c
 800a666:	e7aa      	b.n	800a5be <_dtoa_r+0x24e>
 800a668:	2301      	movs	r3, #1
 800a66a:	9309      	str	r3, [sp, #36]	; 0x24
 800a66c:	e7f4      	b.n	800a658 <_dtoa_r+0x2e8>
 800a66e:	bf00      	nop
 800a670:	636f4361 	.word	0x636f4361
 800a674:	3fd287a7 	.word	0x3fd287a7
 800a678:	8b60c8b3 	.word	0x8b60c8b3
 800a67c:	3fc68a28 	.word	0x3fc68a28
 800a680:	509f79fb 	.word	0x509f79fb
 800a684:	3fd34413 	.word	0x3fd34413
 800a688:	7ff00000 	.word	0x7ff00000
 800a68c:	0800bc29 	.word	0x0800bc29
 800a690:	0800bc20 	.word	0x0800bc20
 800a694:	0800bc2e 	.word	0x0800bc2e
 800a698:	3ff80000 	.word	0x3ff80000
 800a69c:	0800ba18 	.word	0x0800ba18
 800a6a0:	0800b9f0 	.word	0x0800b9f0
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	9304      	str	r3, [sp, #16]
 800a6a8:	4698      	mov	r8, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	e7da      	b.n	800a664 <_dtoa_r+0x2f4>
 800a6ae:	3101      	adds	r1, #1
 800a6b0:	6071      	str	r1, [r6, #4]
 800a6b2:	0052      	lsls	r2, r2, #1
 800a6b4:	e787      	b.n	800a5c6 <_dtoa_r+0x256>
 800a6b6:	07f1      	lsls	r1, r6, #31
 800a6b8:	d508      	bpl.n	800a6cc <_dtoa_r+0x35c>
 800a6ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c2:	f7f5 ff09 	bl	80004d8 <__aeabi_dmul>
 800a6c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a6ca:	3501      	adds	r5, #1
 800a6cc:	1076      	asrs	r6, r6, #1
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	d1f0      	bne.n	800a6b6 <_dtoa_r+0x346>
 800a6d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6dc:	f7f6 f826 	bl	800072c <__aeabi_ddiv>
 800a6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e4:	e01b      	b.n	800a71e <_dtoa_r+0x3ae>
 800a6e6:	2502      	movs	r5, #2
 800a6e8:	e7a0      	b.n	800a62c <_dtoa_r+0x2bc>
 800a6ea:	f000 80a4 	beq.w	800a836 <_dtoa_r+0x4c6>
 800a6ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6f2:	f1ca 0600 	rsb	r6, sl, #0
 800a6f6:	4ba0      	ldr	r3, [pc, #640]	; (800a978 <_dtoa_r+0x608>)
 800a6f8:	f006 020f 	and.w	r2, r6, #15
 800a6fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f7f5 fee8 	bl	80004d8 <__aeabi_dmul>
 800a708:	2502      	movs	r5, #2
 800a70a:	2300      	movs	r3, #0
 800a70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a710:	4f9a      	ldr	r7, [pc, #616]	; (800a97c <_dtoa_r+0x60c>)
 800a712:	1136      	asrs	r6, r6, #4
 800a714:	2e00      	cmp	r6, #0
 800a716:	f040 8083 	bne.w	800a820 <_dtoa_r+0x4b0>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e0      	bne.n	800a6e0 <_dtoa_r+0x370>
 800a71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 808a 	beq.w	800a83a <_dtoa_r+0x4ca>
 800a726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a72a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a72e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a732:	2200      	movs	r2, #0
 800a734:	4b92      	ldr	r3, [pc, #584]	; (800a980 <_dtoa_r+0x610>)
 800a736:	f7f6 f941 	bl	80009bc <__aeabi_dcmplt>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d07d      	beq.n	800a83a <_dtoa_r+0x4ca>
 800a73e:	f1b8 0f00 	cmp.w	r8, #0
 800a742:	d07a      	beq.n	800a83a <_dtoa_r+0x4ca>
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	dd36      	ble.n	800a7b8 <_dtoa_r+0x448>
 800a74a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a74e:	2200      	movs	r2, #0
 800a750:	4b8c      	ldr	r3, [pc, #560]	; (800a984 <_dtoa_r+0x614>)
 800a752:	f7f5 fec1 	bl	80004d8 <__aeabi_dmul>
 800a756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75a:	9e04      	ldr	r6, [sp, #16]
 800a75c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800a760:	3501      	adds	r5, #1
 800a762:	4628      	mov	r0, r5
 800a764:	f7f5 fe4e 	bl	8000404 <__aeabi_i2d>
 800a768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a76c:	f7f5 feb4 	bl	80004d8 <__aeabi_dmul>
 800a770:	2200      	movs	r2, #0
 800a772:	4b85      	ldr	r3, [pc, #532]	; (800a988 <_dtoa_r+0x618>)
 800a774:	f7f5 fcfa 	bl	800016c <__adddf3>
 800a778:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a77c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a780:	950b      	str	r5, [sp, #44]	; 0x2c
 800a782:	2e00      	cmp	r6, #0
 800a784:	d15c      	bne.n	800a840 <_dtoa_r+0x4d0>
 800a786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78a:	2200      	movs	r2, #0
 800a78c:	4b7f      	ldr	r3, [pc, #508]	; (800a98c <_dtoa_r+0x61c>)
 800a78e:	f7f5 fceb 	bl	8000168 <__aeabi_dsub>
 800a792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a794:	462b      	mov	r3, r5
 800a796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a79a:	f7f6 f92d 	bl	80009f8 <__aeabi_dcmpgt>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f040 8281 	bne.w	800aca6 <_dtoa_r+0x936>
 800a7a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7aa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a7ae:	f7f6 f905 	bl	80009bc <__aeabi_dcmplt>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	f040 8275 	bne.w	800aca2 <_dtoa_r+0x932>
 800a7b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a7bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f2c0 814b 	blt.w	800aa5e <_dtoa_r+0x6ee>
 800a7c8:	f1ba 0f0e 	cmp.w	sl, #14
 800a7cc:	f300 8147 	bgt.w	800aa5e <_dtoa_r+0x6ee>
 800a7d0:	4b69      	ldr	r3, [pc, #420]	; (800a978 <_dtoa_r+0x608>)
 800a7d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f280 80d7 	bge.w	800a994 <_dtoa_r+0x624>
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	f300 80d3 	bgt.w	800a994 <_dtoa_r+0x624>
 800a7ee:	f040 8257 	bne.w	800aca0 <_dtoa_r+0x930>
 800a7f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4b64      	ldr	r3, [pc, #400]	; (800a98c <_dtoa_r+0x61c>)
 800a7fa:	f7f5 fe6d 	bl	80004d8 <__aeabi_dmul>
 800a7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a802:	f7f6 f8ef 	bl	80009e4 <__aeabi_dcmpge>
 800a806:	4646      	mov	r6, r8
 800a808:	4647      	mov	r7, r8
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f040 822d 	bne.w	800ac6a <_dtoa_r+0x8fa>
 800a810:	9b06      	ldr	r3, [sp, #24]
 800a812:	9a06      	ldr	r2, [sp, #24]
 800a814:	1c5d      	adds	r5, r3, #1
 800a816:	2331      	movs	r3, #49	; 0x31
 800a818:	f10a 0a01 	add.w	sl, sl, #1
 800a81c:	7013      	strb	r3, [r2, #0]
 800a81e:	e228      	b.n	800ac72 <_dtoa_r+0x902>
 800a820:	07f2      	lsls	r2, r6, #31
 800a822:	d505      	bpl.n	800a830 <_dtoa_r+0x4c0>
 800a824:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a828:	f7f5 fe56 	bl	80004d8 <__aeabi_dmul>
 800a82c:	2301      	movs	r3, #1
 800a82e:	3501      	adds	r5, #1
 800a830:	1076      	asrs	r6, r6, #1
 800a832:	3708      	adds	r7, #8
 800a834:	e76e      	b.n	800a714 <_dtoa_r+0x3a4>
 800a836:	2502      	movs	r5, #2
 800a838:	e771      	b.n	800a71e <_dtoa_r+0x3ae>
 800a83a:	4657      	mov	r7, sl
 800a83c:	4646      	mov	r6, r8
 800a83e:	e790      	b.n	800a762 <_dtoa_r+0x3f2>
 800a840:	4b4d      	ldr	r3, [pc, #308]	; (800a978 <_dtoa_r+0x608>)
 800a842:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a846:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d048      	beq.n	800a8e2 <_dtoa_r+0x572>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	2000      	movs	r0, #0
 800a856:	494e      	ldr	r1, [pc, #312]	; (800a990 <_dtoa_r+0x620>)
 800a858:	f7f5 ff68 	bl	800072c <__aeabi_ddiv>
 800a85c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a860:	f7f5 fc82 	bl	8000168 <__aeabi_dsub>
 800a864:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a868:	9d06      	ldr	r5, [sp, #24]
 800a86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a86e:	f7f6 f8cd 	bl	8000a0c <__aeabi_d2iz>
 800a872:	9011      	str	r0, [sp, #68]	; 0x44
 800a874:	f7f5 fdc6 	bl	8000404 <__aeabi_i2d>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a880:	f7f5 fc72 	bl	8000168 <__aeabi_dsub>
 800a884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a88a:	3330      	adds	r3, #48	; 0x30
 800a88c:	f805 3b01 	strb.w	r3, [r5], #1
 800a890:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a894:	f7f6 f892 	bl	80009bc <__aeabi_dcmplt>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d163      	bne.n	800a964 <_dtoa_r+0x5f4>
 800a89c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	4937      	ldr	r1, [pc, #220]	; (800a980 <_dtoa_r+0x610>)
 800a8a4:	f7f5 fc60 	bl	8000168 <__aeabi_dsub>
 800a8a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8ac:	f7f6 f886 	bl	80009bc <__aeabi_dcmplt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f040 80b5 	bne.w	800aa20 <_dtoa_r+0x6b0>
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	1aeb      	subs	r3, r5, r3
 800a8ba:	429e      	cmp	r6, r3
 800a8bc:	f77f af7c 	ble.w	800a7b8 <_dtoa_r+0x448>
 800a8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4b2f      	ldr	r3, [pc, #188]	; (800a984 <_dtoa_r+0x614>)
 800a8c8:	f7f5 fe06 	bl	80004d8 <__aeabi_dmul>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d6:	4b2b      	ldr	r3, [pc, #172]	; (800a984 <_dtoa_r+0x614>)
 800a8d8:	f7f5 fdfe 	bl	80004d8 <__aeabi_dmul>
 800a8dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8e0:	e7c3      	b.n	800a86a <_dtoa_r+0x4fa>
 800a8e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8e6:	f7f5 fdf7 	bl	80004d8 <__aeabi_dmul>
 800a8ea:	9b06      	ldr	r3, [sp, #24]
 800a8ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8f0:	199d      	adds	r5, r3, r6
 800a8f2:	461e      	mov	r6, r3
 800a8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f8:	f7f6 f888 	bl	8000a0c <__aeabi_d2iz>
 800a8fc:	9011      	str	r0, [sp, #68]	; 0x44
 800a8fe:	f7f5 fd81 	bl	8000404 <__aeabi_i2d>
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a90a:	f7f5 fc2d 	bl	8000168 <__aeabi_dsub>
 800a90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a914:	3330      	adds	r3, #48	; 0x30
 800a916:	f806 3b01 	strb.w	r3, [r6], #1
 800a91a:	42ae      	cmp	r6, r5
 800a91c:	f04f 0200 	mov.w	r2, #0
 800a920:	d124      	bne.n	800a96c <_dtoa_r+0x5fc>
 800a922:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a926:	4b1a      	ldr	r3, [pc, #104]	; (800a990 <_dtoa_r+0x620>)
 800a928:	f7f5 fc20 	bl	800016c <__adddf3>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a934:	f7f6 f860 	bl	80009f8 <__aeabi_dcmpgt>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d171      	bne.n	800aa20 <_dtoa_r+0x6b0>
 800a93c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a940:	2000      	movs	r0, #0
 800a942:	4913      	ldr	r1, [pc, #76]	; (800a990 <_dtoa_r+0x620>)
 800a944:	f7f5 fc10 	bl	8000168 <__aeabi_dsub>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a950:	f7f6 f834 	bl	80009bc <__aeabi_dcmplt>
 800a954:	2800      	cmp	r0, #0
 800a956:	f43f af2f 	beq.w	800a7b8 <_dtoa_r+0x448>
 800a95a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a95e:	1e6a      	subs	r2, r5, #1
 800a960:	2b30      	cmp	r3, #48	; 0x30
 800a962:	d001      	beq.n	800a968 <_dtoa_r+0x5f8>
 800a964:	46ba      	mov	sl, r7
 800a966:	e04a      	b.n	800a9fe <_dtoa_r+0x68e>
 800a968:	4615      	mov	r5, r2
 800a96a:	e7f6      	b.n	800a95a <_dtoa_r+0x5ea>
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <_dtoa_r+0x614>)
 800a96e:	f7f5 fdb3 	bl	80004d8 <__aeabi_dmul>
 800a972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a976:	e7bd      	b.n	800a8f4 <_dtoa_r+0x584>
 800a978:	0800ba18 	.word	0x0800ba18
 800a97c:	0800b9f0 	.word	0x0800b9f0
 800a980:	3ff00000 	.word	0x3ff00000
 800a984:	40240000 	.word	0x40240000
 800a988:	401c0000 	.word	0x401c0000
 800a98c:	40140000 	.word	0x40140000
 800a990:	3fe00000 	.word	0x3fe00000
 800a994:	9d06      	ldr	r5, [sp, #24]
 800a996:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99e:	4630      	mov	r0, r6
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	f7f5 fec3 	bl	800072c <__aeabi_ddiv>
 800a9a6:	f7f6 f831 	bl	8000a0c <__aeabi_d2iz>
 800a9aa:	4681      	mov	r9, r0
 800a9ac:	f7f5 fd2a 	bl	8000404 <__aeabi_i2d>
 800a9b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9b4:	f7f5 fd90 	bl	80004d8 <__aeabi_dmul>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4630      	mov	r0, r6
 800a9be:	4639      	mov	r1, r7
 800a9c0:	f7f5 fbd2 	bl	8000168 <__aeabi_dsub>
 800a9c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a9c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a9cc:	9e06      	ldr	r6, [sp, #24]
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	1bae      	subs	r6, r5, r6
 800a9d2:	45b0      	cmp	r8, r6
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	d135      	bne.n	800aa44 <_dtoa_r+0x6d4>
 800a9d8:	f7f5 fbc8 	bl	800016c <__adddf3>
 800a9dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	f7f6 f808 	bl	80009f8 <__aeabi_dcmpgt>
 800a9e8:	b9c8      	cbnz	r0, 800aa1e <_dtoa_r+0x6ae>
 800a9ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	f7f5 ffd9 	bl	80009a8 <__aeabi_dcmpeq>
 800a9f6:	b110      	cbz	r0, 800a9fe <_dtoa_r+0x68e>
 800a9f8:	f019 0f01 	tst.w	r9, #1
 800a9fc:	d10f      	bne.n	800aa1e <_dtoa_r+0x6ae>
 800a9fe:	4659      	mov	r1, fp
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7fe fcad 	bl	8009360 <_Bfree>
 800aa06:	2300      	movs	r3, #0
 800aa08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa0a:	702b      	strb	r3, [r5, #0]
 800aa0c:	f10a 0301 	add.w	r3, sl, #1
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f43f acf3 	beq.w	800a400 <_dtoa_r+0x90>
 800aa1a:	601d      	str	r5, [r3, #0]
 800aa1c:	e4f0      	b.n	800a400 <_dtoa_r+0x90>
 800aa1e:	4657      	mov	r7, sl
 800aa20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa24:	1e6b      	subs	r3, r5, #1
 800aa26:	2a39      	cmp	r2, #57	; 0x39
 800aa28:	d106      	bne.n	800aa38 <_dtoa_r+0x6c8>
 800aa2a:	9a06      	ldr	r2, [sp, #24]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d107      	bne.n	800aa40 <_dtoa_r+0x6d0>
 800aa30:	2330      	movs	r3, #48	; 0x30
 800aa32:	7013      	strb	r3, [r2, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	3701      	adds	r7, #1
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	3201      	adds	r2, #1
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	e791      	b.n	800a964 <_dtoa_r+0x5f4>
 800aa40:	461d      	mov	r5, r3
 800aa42:	e7ed      	b.n	800aa20 <_dtoa_r+0x6b0>
 800aa44:	2200      	movs	r2, #0
 800aa46:	4b99      	ldr	r3, [pc, #612]	; (800acac <_dtoa_r+0x93c>)
 800aa48:	f7f5 fd46 	bl	80004d8 <__aeabi_dmul>
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2300      	movs	r3, #0
 800aa50:	4606      	mov	r6, r0
 800aa52:	460f      	mov	r7, r1
 800aa54:	f7f5 ffa8 	bl	80009a8 <__aeabi_dcmpeq>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d09e      	beq.n	800a99a <_dtoa_r+0x62a>
 800aa5c:	e7cf      	b.n	800a9fe <_dtoa_r+0x68e>
 800aa5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	f000 8088 	beq.w	800ab76 <_dtoa_r+0x806>
 800aa66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa68:	2a01      	cmp	r2, #1
 800aa6a:	dc6d      	bgt.n	800ab48 <_dtoa_r+0x7d8>
 800aa6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	d066      	beq.n	800ab40 <_dtoa_r+0x7d0>
 800aa72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa76:	464d      	mov	r5, r9
 800aa78:	9e08      	ldr	r6, [sp, #32]
 800aa7a:	9a07      	ldr	r2, [sp, #28]
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	441a      	add	r2, r3
 800aa80:	4620      	mov	r0, r4
 800aa82:	4499      	add	r9, r3
 800aa84:	9207      	str	r2, [sp, #28]
 800aa86:	f7fe fd49 	bl	800951c <__i2b>
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	2d00      	cmp	r5, #0
 800aa8e:	dd0b      	ble.n	800aaa8 <_dtoa_r+0x738>
 800aa90:	9b07      	ldr	r3, [sp, #28]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dd08      	ble.n	800aaa8 <_dtoa_r+0x738>
 800aa96:	42ab      	cmp	r3, r5
 800aa98:	bfa8      	it	ge
 800aa9a:	462b      	movge	r3, r5
 800aa9c:	9a07      	ldr	r2, [sp, #28]
 800aa9e:	eba9 0903 	sub.w	r9, r9, r3
 800aaa2:	1aed      	subs	r5, r5, r3
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	b1eb      	cbz	r3, 800aae8 <_dtoa_r+0x778>
 800aaac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d065      	beq.n	800ab7e <_dtoa_r+0x80e>
 800aab2:	b18e      	cbz	r6, 800aad8 <_dtoa_r+0x768>
 800aab4:	4639      	mov	r1, r7
 800aab6:	4632      	mov	r2, r6
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7fe fdcd 	bl	8009658 <__pow5mult>
 800aabe:	465a      	mov	r2, fp
 800aac0:	4601      	mov	r1, r0
 800aac2:	4607      	mov	r7, r0
 800aac4:	4620      	mov	r0, r4
 800aac6:	f7fe fd32 	bl	800952e <__multiply>
 800aaca:	4659      	mov	r1, fp
 800aacc:	900a      	str	r0, [sp, #40]	; 0x28
 800aace:	4620      	mov	r0, r4
 800aad0:	f7fe fc46 	bl	8009360 <_Bfree>
 800aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad6:	469b      	mov	fp, r3
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	1b9a      	subs	r2, r3, r6
 800aadc:	d004      	beq.n	800aae8 <_dtoa_r+0x778>
 800aade:	4659      	mov	r1, fp
 800aae0:	4620      	mov	r0, r4
 800aae2:	f7fe fdb9 	bl	8009658 <__pow5mult>
 800aae6:	4683      	mov	fp, r0
 800aae8:	2101      	movs	r1, #1
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7fe fd16 	bl	800951c <__i2b>
 800aaf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 81c6 	beq.w	800ae86 <_dtoa_r+0xb16>
 800aafa:	461a      	mov	r2, r3
 800aafc:	4601      	mov	r1, r0
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7fe fdaa 	bl	8009658 <__pow5mult>
 800ab04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab06:	4606      	mov	r6, r0
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	dc3e      	bgt.n	800ab8a <_dtoa_r+0x81a>
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d137      	bne.n	800ab82 <_dtoa_r+0x812>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d134      	bne.n	800ab86 <_dtoa_r+0x816>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab22:	0d1b      	lsrs	r3, r3, #20
 800ab24:	051b      	lsls	r3, r3, #20
 800ab26:	b12b      	cbz	r3, 800ab34 <_dtoa_r+0x7c4>
 800ab28:	9b07      	ldr	r3, [sp, #28]
 800ab2a:	f109 0901 	add.w	r9, r9, #1
 800ab2e:	3301      	adds	r3, #1
 800ab30:	9307      	str	r3, [sp, #28]
 800ab32:	2301      	movs	r3, #1
 800ab34:	9308      	str	r3, [sp, #32]
 800ab36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d128      	bne.n	800ab8e <_dtoa_r+0x81e>
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	e02e      	b.n	800ab9e <_dtoa_r+0x82e>
 800ab40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab46:	e796      	b.n	800aa76 <_dtoa_r+0x706>
 800ab48:	9b08      	ldr	r3, [sp, #32]
 800ab4a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800ab4e:	42b3      	cmp	r3, r6
 800ab50:	bfb7      	itett	lt
 800ab52:	9b08      	ldrlt	r3, [sp, #32]
 800ab54:	1b9e      	subge	r6, r3, r6
 800ab56:	1af2      	sublt	r2, r6, r3
 800ab58:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ab5a:	bfbf      	itttt	lt
 800ab5c:	9608      	strlt	r6, [sp, #32]
 800ab5e:	189b      	addlt	r3, r3, r2
 800ab60:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ab62:	2600      	movlt	r6, #0
 800ab64:	f1b8 0f00 	cmp.w	r8, #0
 800ab68:	bfb9      	ittee	lt
 800ab6a:	eba9 0508 	sublt.w	r5, r9, r8
 800ab6e:	2300      	movlt	r3, #0
 800ab70:	464d      	movge	r5, r9
 800ab72:	4643      	movge	r3, r8
 800ab74:	e781      	b.n	800aa7a <_dtoa_r+0x70a>
 800ab76:	9e08      	ldr	r6, [sp, #32]
 800ab78:	464d      	mov	r5, r9
 800ab7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab7c:	e786      	b.n	800aa8c <_dtoa_r+0x71c>
 800ab7e:	9a08      	ldr	r2, [sp, #32]
 800ab80:	e7ad      	b.n	800aade <_dtoa_r+0x76e>
 800ab82:	2300      	movs	r3, #0
 800ab84:	e7d6      	b.n	800ab34 <_dtoa_r+0x7c4>
 800ab86:	9b02      	ldr	r3, [sp, #8]
 800ab88:	e7d4      	b.n	800ab34 <_dtoa_r+0x7c4>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9308      	str	r3, [sp, #32]
 800ab8e:	6933      	ldr	r3, [r6, #16]
 800ab90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab94:	6918      	ldr	r0, [r3, #16]
 800ab96:	f7fe fc73 	bl	8009480 <__hi0bits>
 800ab9a:	f1c0 0020 	rsb	r0, r0, #32
 800ab9e:	9b07      	ldr	r3, [sp, #28]
 800aba0:	4418      	add	r0, r3
 800aba2:	f010 001f 	ands.w	r0, r0, #31
 800aba6:	d047      	beq.n	800ac38 <_dtoa_r+0x8c8>
 800aba8:	f1c0 0320 	rsb	r3, r0, #32
 800abac:	2b04      	cmp	r3, #4
 800abae:	dd3b      	ble.n	800ac28 <_dtoa_r+0x8b8>
 800abb0:	9b07      	ldr	r3, [sp, #28]
 800abb2:	f1c0 001c 	rsb	r0, r0, #28
 800abb6:	4481      	add	r9, r0
 800abb8:	4405      	add	r5, r0
 800abba:	4403      	add	r3, r0
 800abbc:	9307      	str	r3, [sp, #28]
 800abbe:	f1b9 0f00 	cmp.w	r9, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x860>
 800abc4:	4659      	mov	r1, fp
 800abc6:	464a      	mov	r2, r9
 800abc8:	4620      	mov	r0, r4
 800abca:	f7fe fd93 	bl	80096f4 <__lshift>
 800abce:	4683      	mov	fp, r0
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dd05      	ble.n	800abe2 <_dtoa_r+0x872>
 800abd6:	4631      	mov	r1, r6
 800abd8:	461a      	mov	r2, r3
 800abda:	4620      	mov	r0, r4
 800abdc:	f7fe fd8a 	bl	80096f4 <__lshift>
 800abe0:	4606      	mov	r6, r0
 800abe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe4:	b353      	cbz	r3, 800ac3c <_dtoa_r+0x8cc>
 800abe6:	4631      	mov	r1, r6
 800abe8:	4658      	mov	r0, fp
 800abea:	f7fe fdd7 	bl	800979c <__mcmp>
 800abee:	2800      	cmp	r0, #0
 800abf0:	da24      	bge.n	800ac3c <_dtoa_r+0x8cc>
 800abf2:	2300      	movs	r3, #0
 800abf4:	4659      	mov	r1, fp
 800abf6:	220a      	movs	r2, #10
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7fe fbc8 	bl	800938e <__multadd>
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ac04:	4683      	mov	fp, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 8144 	beq.w	800ae94 <_dtoa_r+0xb24>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4639      	mov	r1, r7
 800ac10:	220a      	movs	r2, #10
 800ac12:	4620      	mov	r0, r4
 800ac14:	f7fe fbbb 	bl	800938e <__multadd>
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	4607      	mov	r7, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dc4d      	bgt.n	800acbc <_dtoa_r+0x94c>
 800ac20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	dd4a      	ble.n	800acbc <_dtoa_r+0x94c>
 800ac26:	e011      	b.n	800ac4c <_dtoa_r+0x8dc>
 800ac28:	d0c9      	beq.n	800abbe <_dtoa_r+0x84e>
 800ac2a:	9a07      	ldr	r2, [sp, #28]
 800ac2c:	331c      	adds	r3, #28
 800ac2e:	441a      	add	r2, r3
 800ac30:	4499      	add	r9, r3
 800ac32:	441d      	add	r5, r3
 800ac34:	4613      	mov	r3, r2
 800ac36:	e7c1      	b.n	800abbc <_dtoa_r+0x84c>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	e7f6      	b.n	800ac2a <_dtoa_r+0x8ba>
 800ac3c:	f1b8 0f00 	cmp.w	r8, #0
 800ac40:	dc36      	bgt.n	800acb0 <_dtoa_r+0x940>
 800ac42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	dd33      	ble.n	800acb0 <_dtoa_r+0x940>
 800ac48:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	b963      	cbnz	r3, 800ac6a <_dtoa_r+0x8fa>
 800ac50:	4631      	mov	r1, r6
 800ac52:	2205      	movs	r2, #5
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7fe fb9a 	bl	800938e <__multadd>
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	4658      	mov	r0, fp
 800ac60:	f7fe fd9c 	bl	800979c <__mcmp>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f73f add3 	bgt.w	800a810 <_dtoa_r+0x4a0>
 800ac6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac6c:	9d06      	ldr	r5, [sp, #24]
 800ac6e:	ea6f 0a03 	mvn.w	sl, r3
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	4631      	mov	r1, r6
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7fe fb71 	bl	8009360 <_Bfree>
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	f43f aebd 	beq.w	800a9fe <_dtoa_r+0x68e>
 800ac84:	f1b9 0f00 	cmp.w	r9, #0
 800ac88:	d005      	beq.n	800ac96 <_dtoa_r+0x926>
 800ac8a:	45b9      	cmp	r9, r7
 800ac8c:	d003      	beq.n	800ac96 <_dtoa_r+0x926>
 800ac8e:	4649      	mov	r1, r9
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7fe fb65 	bl	8009360 <_Bfree>
 800ac96:	4639      	mov	r1, r7
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f7fe fb61 	bl	8009360 <_Bfree>
 800ac9e:	e6ae      	b.n	800a9fe <_dtoa_r+0x68e>
 800aca0:	2600      	movs	r6, #0
 800aca2:	4637      	mov	r7, r6
 800aca4:	e7e1      	b.n	800ac6a <_dtoa_r+0x8fa>
 800aca6:	46ba      	mov	sl, r7
 800aca8:	4637      	mov	r7, r6
 800acaa:	e5b1      	b.n	800a810 <_dtoa_r+0x4a0>
 800acac:	40240000 	.word	0x40240000
 800acb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb2:	f8cd 8010 	str.w	r8, [sp, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80f3 	beq.w	800aea2 <_dtoa_r+0xb32>
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	dd05      	ble.n	800accc <_dtoa_r+0x95c>
 800acc0:	4639      	mov	r1, r7
 800acc2:	462a      	mov	r2, r5
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7fe fd15 	bl	80096f4 <__lshift>
 800acca:	4607      	mov	r7, r0
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d04c      	beq.n	800ad6c <_dtoa_r+0x9fc>
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4620      	mov	r0, r4
 800acd6:	f7fe fb0f 	bl	80092f8 <_Balloc>
 800acda:	4605      	mov	r5, r0
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	f107 010c 	add.w	r1, r7, #12
 800ace2:	3202      	adds	r2, #2
 800ace4:	0092      	lsls	r2, r2, #2
 800ace6:	300c      	adds	r0, #12
 800ace8:	f7fe fafb 	bl	80092e2 <memcpy>
 800acec:	2201      	movs	r2, #1
 800acee:	4629      	mov	r1, r5
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7fe fcff 	bl	80096f4 <__lshift>
 800acf6:	46b9      	mov	r9, r7
 800acf8:	4607      	mov	r7, r0
 800acfa:	9b06      	ldr	r3, [sp, #24]
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	9308      	str	r3, [sp, #32]
 800ad06:	4631      	mov	r1, r6
 800ad08:	4658      	mov	r0, fp
 800ad0a:	f7ff faa2 	bl	800a252 <quorem>
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4605      	mov	r5, r0
 800ad12:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad16:	4658      	mov	r0, fp
 800ad18:	f7fe fd40 	bl	800979c <__mcmp>
 800ad1c:	463a      	mov	r2, r7
 800ad1e:	9002      	str	r0, [sp, #8]
 800ad20:	4631      	mov	r1, r6
 800ad22:	4620      	mov	r0, r4
 800ad24:	f7fe fd54 	bl	80097d0 <__mdiff>
 800ad28:	68c3      	ldr	r3, [r0, #12]
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	bb03      	cbnz	r3, 800ad70 <_dtoa_r+0xa00>
 800ad2e:	4601      	mov	r1, r0
 800ad30:	9009      	str	r0, [sp, #36]	; 0x24
 800ad32:	4658      	mov	r0, fp
 800ad34:	f7fe fd32 	bl	800979c <__mcmp>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4620      	mov	r0, r4
 800ad40:	9309      	str	r3, [sp, #36]	; 0x24
 800ad42:	f7fe fb0d 	bl	8009360 <_Bfree>
 800ad46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad48:	b9a3      	cbnz	r3, 800ad74 <_dtoa_r+0xa04>
 800ad4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ad4c:	b992      	cbnz	r2, 800ad74 <_dtoa_r+0xa04>
 800ad4e:	9a08      	ldr	r2, [sp, #32]
 800ad50:	b982      	cbnz	r2, 800ad74 <_dtoa_r+0xa04>
 800ad52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad56:	d029      	beq.n	800adac <_dtoa_r+0xa3c>
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dd01      	ble.n	800ad62 <_dtoa_r+0x9f2>
 800ad5e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ad62:	9b07      	ldr	r3, [sp, #28]
 800ad64:	1c5d      	adds	r5, r3, #1
 800ad66:	f883 8000 	strb.w	r8, [r3]
 800ad6a:	e784      	b.n	800ac76 <_dtoa_r+0x906>
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	e7c2      	b.n	800acf6 <_dtoa_r+0x986>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e7e3      	b.n	800ad3c <_dtoa_r+0x9cc>
 800ad74:	9a02      	ldr	r2, [sp, #8]
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	db04      	blt.n	800ad84 <_dtoa_r+0xa14>
 800ad7a:	d123      	bne.n	800adc4 <_dtoa_r+0xa54>
 800ad7c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ad7e:	bb0a      	cbnz	r2, 800adc4 <_dtoa_r+0xa54>
 800ad80:	9a08      	ldr	r2, [sp, #32]
 800ad82:	b9fa      	cbnz	r2, 800adc4 <_dtoa_r+0xa54>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	ddec      	ble.n	800ad62 <_dtoa_r+0x9f2>
 800ad88:	4659      	mov	r1, fp
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7fe fcb1 	bl	80096f4 <__lshift>
 800ad92:	4631      	mov	r1, r6
 800ad94:	4683      	mov	fp, r0
 800ad96:	f7fe fd01 	bl	800979c <__mcmp>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	dc03      	bgt.n	800ada6 <_dtoa_r+0xa36>
 800ad9e:	d1e0      	bne.n	800ad62 <_dtoa_r+0x9f2>
 800ada0:	f018 0f01 	tst.w	r8, #1
 800ada4:	d0dd      	beq.n	800ad62 <_dtoa_r+0x9f2>
 800ada6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800adaa:	d1d8      	bne.n	800ad5e <_dtoa_r+0x9ee>
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	1c5d      	adds	r5, r3, #1
 800adb2:	2339      	movs	r3, #57	; 0x39
 800adb4:	7013      	strb	r3, [r2, #0]
 800adb6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adba:	1e6a      	subs	r2, r5, #1
 800adbc:	2b39      	cmp	r3, #57	; 0x39
 800adbe:	d04d      	beq.n	800ae5c <_dtoa_r+0xaec>
 800adc0:	3301      	adds	r3, #1
 800adc2:	e052      	b.n	800ae6a <_dtoa_r+0xafa>
 800adc4:	9a07      	ldr	r2, [sp, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f102 0501 	add.w	r5, r2, #1
 800adcc:	dd06      	ble.n	800addc <_dtoa_r+0xa6c>
 800adce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800add2:	d0eb      	beq.n	800adac <_dtoa_r+0xa3c>
 800add4:	f108 0801 	add.w	r8, r8, #1
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	e7c4      	b.n	800ad66 <_dtoa_r+0x9f6>
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	1aeb      	subs	r3, r5, r3
 800ade2:	4293      	cmp	r3, r2
 800ade4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ade8:	d021      	beq.n	800ae2e <_dtoa_r+0xabe>
 800adea:	4659      	mov	r1, fp
 800adec:	2300      	movs	r3, #0
 800adee:	220a      	movs	r2, #10
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7fe facc 	bl	800938e <__multadd>
 800adf6:	45b9      	cmp	r9, r7
 800adf8:	4683      	mov	fp, r0
 800adfa:	f04f 0300 	mov.w	r3, #0
 800adfe:	f04f 020a 	mov.w	r2, #10
 800ae02:	4649      	mov	r1, r9
 800ae04:	4620      	mov	r0, r4
 800ae06:	d105      	bne.n	800ae14 <_dtoa_r+0xaa4>
 800ae08:	f7fe fac1 	bl	800938e <__multadd>
 800ae0c:	4681      	mov	r9, r0
 800ae0e:	4607      	mov	r7, r0
 800ae10:	9507      	str	r5, [sp, #28]
 800ae12:	e778      	b.n	800ad06 <_dtoa_r+0x996>
 800ae14:	f7fe fabb 	bl	800938e <__multadd>
 800ae18:	4639      	mov	r1, r7
 800ae1a:	4681      	mov	r9, r0
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	220a      	movs	r2, #10
 800ae20:	4620      	mov	r0, r4
 800ae22:	f7fe fab4 	bl	800938e <__multadd>
 800ae26:	4607      	mov	r7, r0
 800ae28:	e7f2      	b.n	800ae10 <_dtoa_r+0xaa0>
 800ae2a:	f04f 0900 	mov.w	r9, #0
 800ae2e:	4659      	mov	r1, fp
 800ae30:	2201      	movs	r2, #1
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7fe fc5e 	bl	80096f4 <__lshift>
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4683      	mov	fp, r0
 800ae3c:	f7fe fcae 	bl	800979c <__mcmp>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	dcb8      	bgt.n	800adb6 <_dtoa_r+0xa46>
 800ae44:	d102      	bne.n	800ae4c <_dtoa_r+0xadc>
 800ae46:	f018 0f01 	tst.w	r8, #1
 800ae4a:	d1b4      	bne.n	800adb6 <_dtoa_r+0xa46>
 800ae4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae50:	1e6a      	subs	r2, r5, #1
 800ae52:	2b30      	cmp	r3, #48	; 0x30
 800ae54:	f47f af0f 	bne.w	800ac76 <_dtoa_r+0x906>
 800ae58:	4615      	mov	r5, r2
 800ae5a:	e7f7      	b.n	800ae4c <_dtoa_r+0xadc>
 800ae5c:	9b06      	ldr	r3, [sp, #24]
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d105      	bne.n	800ae6e <_dtoa_r+0xafe>
 800ae62:	2331      	movs	r3, #49	; 0x31
 800ae64:	9a06      	ldr	r2, [sp, #24]
 800ae66:	f10a 0a01 	add.w	sl, sl, #1
 800ae6a:	7013      	strb	r3, [r2, #0]
 800ae6c:	e703      	b.n	800ac76 <_dtoa_r+0x906>
 800ae6e:	4615      	mov	r5, r2
 800ae70:	e7a1      	b.n	800adb6 <_dtoa_r+0xa46>
 800ae72:	4b17      	ldr	r3, [pc, #92]	; (800aed0 <_dtoa_r+0xb60>)
 800ae74:	f7ff bae1 	b.w	800a43a <_dtoa_r+0xca>
 800ae78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f47f aabb 	bne.w	800a3f6 <_dtoa_r+0x86>
 800ae80:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <_dtoa_r+0xb64>)
 800ae82:	f7ff bada 	b.w	800a43a <_dtoa_r+0xca>
 800ae86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	f77f ae3f 	ble.w	800ab0c <_dtoa_r+0x79c>
 800ae8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae90:	9308      	str	r3, [sp, #32]
 800ae92:	e653      	b.n	800ab3c <_dtoa_r+0x7cc>
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	dc03      	bgt.n	800aea2 <_dtoa_r+0xb32>
 800ae9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	f73f aed5 	bgt.w	800ac4c <_dtoa_r+0x8dc>
 800aea2:	9d06      	ldr	r5, [sp, #24]
 800aea4:	4631      	mov	r1, r6
 800aea6:	4658      	mov	r0, fp
 800aea8:	f7ff f9d3 	bl	800a252 <quorem>
 800aeac:	9b06      	ldr	r3, [sp, #24]
 800aeae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aeb2:	f805 8b01 	strb.w	r8, [r5], #1
 800aeb6:	9a04      	ldr	r2, [sp, #16]
 800aeb8:	1aeb      	subs	r3, r5, r3
 800aeba:	429a      	cmp	r2, r3
 800aebc:	ddb5      	ble.n	800ae2a <_dtoa_r+0xaba>
 800aebe:	4659      	mov	r1, fp
 800aec0:	2300      	movs	r3, #0
 800aec2:	220a      	movs	r2, #10
 800aec4:	4620      	mov	r0, r4
 800aec6:	f7fe fa62 	bl	800938e <__multadd>
 800aeca:	4683      	mov	fp, r0
 800aecc:	e7ea      	b.n	800aea4 <_dtoa_r+0xb34>
 800aece:	bf00      	nop
 800aed0:	0800bc2d 	.word	0x0800bc2d
 800aed4:	0800bc20 	.word	0x0800bc20

0800aed8 <malloc>:
 800aed8:	4b02      	ldr	r3, [pc, #8]	; (800aee4 <malloc+0xc>)
 800aeda:	4601      	mov	r1, r0
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f7fe be2f 	b.w	8009b40 <_malloc_r>
 800aee2:	bf00      	nop
 800aee4:	2000001c 	.word	0x2000001c

0800aee8 <memchr>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	b2c9      	uxtb	r1, r1
 800aeec:	4402      	add	r2, r0
 800aeee:	4290      	cmp	r0, r2
 800aef0:	4603      	mov	r3, r0
 800aef2:	d101      	bne.n	800aef8 <memchr+0x10>
 800aef4:	2300      	movs	r3, #0
 800aef6:	e003      	b.n	800af00 <memchr+0x18>
 800aef8:	781c      	ldrb	r4, [r3, #0]
 800aefa:	3001      	adds	r0, #1
 800aefc:	428c      	cmp	r4, r1
 800aefe:	d1f6      	bne.n	800aeee <memchr+0x6>
 800af00:	4618      	mov	r0, r3
 800af02:	bd10      	pop	{r4, pc}

0800af04 <memmove>:
 800af04:	4288      	cmp	r0, r1
 800af06:	b510      	push	{r4, lr}
 800af08:	eb01 0302 	add.w	r3, r1, r2
 800af0c:	d807      	bhi.n	800af1e <memmove+0x1a>
 800af0e:	1e42      	subs	r2, r0, #1
 800af10:	4299      	cmp	r1, r3
 800af12:	d00a      	beq.n	800af2a <memmove+0x26>
 800af14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af18:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af1c:	e7f8      	b.n	800af10 <memmove+0xc>
 800af1e:	4283      	cmp	r3, r0
 800af20:	d9f5      	bls.n	800af0e <memmove+0xa>
 800af22:	1881      	adds	r1, r0, r2
 800af24:	1ad2      	subs	r2, r2, r3
 800af26:	42d3      	cmn	r3, r2
 800af28:	d100      	bne.n	800af2c <memmove+0x28>
 800af2a:	bd10      	pop	{r4, pc}
 800af2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af34:	e7f7      	b.n	800af26 <memmove+0x22>

0800af36 <__malloc_lock>:
 800af36:	4770      	bx	lr

0800af38 <__malloc_unlock>:
 800af38:	4770      	bx	lr
	...

0800af3c <_free_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4605      	mov	r5, r0
 800af40:	2900      	cmp	r1, #0
 800af42:	d043      	beq.n	800afcc <_free_r+0x90>
 800af44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af48:	1f0c      	subs	r4, r1, #4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bfb8      	it	lt
 800af4e:	18e4      	addlt	r4, r4, r3
 800af50:	f7ff fff1 	bl	800af36 <__malloc_lock>
 800af54:	4a1e      	ldr	r2, [pc, #120]	; (800afd0 <_free_r+0x94>)
 800af56:	6813      	ldr	r3, [r2, #0]
 800af58:	4610      	mov	r0, r2
 800af5a:	b933      	cbnz	r3, 800af6a <_free_r+0x2e>
 800af5c:	6063      	str	r3, [r4, #4]
 800af5e:	6014      	str	r4, [r2, #0]
 800af60:	4628      	mov	r0, r5
 800af62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af66:	f7ff bfe7 	b.w	800af38 <__malloc_unlock>
 800af6a:	42a3      	cmp	r3, r4
 800af6c:	d90b      	bls.n	800af86 <_free_r+0x4a>
 800af6e:	6821      	ldr	r1, [r4, #0]
 800af70:	1862      	adds	r2, r4, r1
 800af72:	4293      	cmp	r3, r2
 800af74:	bf01      	itttt	eq
 800af76:	681a      	ldreq	r2, [r3, #0]
 800af78:	685b      	ldreq	r3, [r3, #4]
 800af7a:	1852      	addeq	r2, r2, r1
 800af7c:	6022      	streq	r2, [r4, #0]
 800af7e:	6063      	str	r3, [r4, #4]
 800af80:	6004      	str	r4, [r0, #0]
 800af82:	e7ed      	b.n	800af60 <_free_r+0x24>
 800af84:	4613      	mov	r3, r2
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	b10a      	cbz	r2, 800af8e <_free_r+0x52>
 800af8a:	42a2      	cmp	r2, r4
 800af8c:	d9fa      	bls.n	800af84 <_free_r+0x48>
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	1858      	adds	r0, r3, r1
 800af92:	42a0      	cmp	r0, r4
 800af94:	d10b      	bne.n	800afae <_free_r+0x72>
 800af96:	6820      	ldr	r0, [r4, #0]
 800af98:	4401      	add	r1, r0
 800af9a:	1858      	adds	r0, r3, r1
 800af9c:	4282      	cmp	r2, r0
 800af9e:	6019      	str	r1, [r3, #0]
 800afa0:	d1de      	bne.n	800af60 <_free_r+0x24>
 800afa2:	6810      	ldr	r0, [r2, #0]
 800afa4:	6852      	ldr	r2, [r2, #4]
 800afa6:	4401      	add	r1, r0
 800afa8:	6019      	str	r1, [r3, #0]
 800afaa:	605a      	str	r2, [r3, #4]
 800afac:	e7d8      	b.n	800af60 <_free_r+0x24>
 800afae:	d902      	bls.n	800afb6 <_free_r+0x7a>
 800afb0:	230c      	movs	r3, #12
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	e7d4      	b.n	800af60 <_free_r+0x24>
 800afb6:	6820      	ldr	r0, [r4, #0]
 800afb8:	1821      	adds	r1, r4, r0
 800afba:	428a      	cmp	r2, r1
 800afbc:	bf01      	itttt	eq
 800afbe:	6811      	ldreq	r1, [r2, #0]
 800afc0:	6852      	ldreq	r2, [r2, #4]
 800afc2:	1809      	addeq	r1, r1, r0
 800afc4:	6021      	streq	r1, [r4, #0]
 800afc6:	6062      	str	r2, [r4, #4]
 800afc8:	605c      	str	r4, [r3, #4]
 800afca:	e7c9      	b.n	800af60 <_free_r+0x24>
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	2000061c 	.word	0x2000061c

0800afd4 <_malloc_usable_size_r>:
 800afd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afd8:	1f18      	subs	r0, r3, #4
 800afda:	2b00      	cmp	r3, #0
 800afdc:	bfbc      	itt	lt
 800afde:	580b      	ldrlt	r3, [r1, r0]
 800afe0:	18c0      	addlt	r0, r0, r3
 800afe2:	4770      	bx	lr

0800afe4 <trunc>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800afea:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800afee:	2a13      	cmp	r2, #19
 800aff0:	4603      	mov	r3, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	dc10      	bgt.n	800b018 <trunc+0x34>
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	bfb3      	iteet	lt
 800affa:	2000      	movlt	r0, #0
 800affc:	2000      	movge	r0, #0
 800affe:	4b10      	ldrge	r3, [pc, #64]	; (800b040 <trunc+0x5c>)
 800b000:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800b004:	bfa4      	itt	ge
 800b006:	fa43 f202 	asrge.w	r2, r3, r2
 800b00a:	ea24 0102 	bicge.w	r1, r4, r2
 800b00e:	4603      	mov	r3, r0
 800b010:	460c      	mov	r4, r1
 800b012:	4618      	mov	r0, r3
 800b014:	4621      	mov	r1, r4
 800b016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b018:	2a33      	cmp	r2, #51	; 0x33
 800b01a:	dd07      	ble.n	800b02c <trunc+0x48>
 800b01c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b020:	d1f7      	bne.n	800b012 <trunc+0x2e>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	f7f5 f8a1 	bl	800016c <__adddf3>
 800b02a:	e7f0      	b.n	800b00e <trunc+0x2a>
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b030:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800b034:	fa22 f505 	lsr.w	r5, r2, r5
 800b038:	ea20 0005 	bic.w	r0, r0, r5
 800b03c:	e7e7      	b.n	800b00e <trunc+0x2a>
 800b03e:	bf00      	nop
 800b040:	000fffff 	.word	0x000fffff

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
